

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Sep 20 07:14:14 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     	;# 
    44  0001                     	;# 
    45  0002                     	;# 
    46  0003                     	;# 
    47  0004                     	;# 
    48  0005                     	;# 
    49  0006                     	;# 
    50  0007                     	;# 
    51  0008                     	;# 
    52  0009                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000D                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0093                     	;# 
    77  0094                     	;# 
    78  0095                     	;# 
    79  0096                     	;# 
    80  0097                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  0111                     	;# 
    92  0112                     	;# 
    93  0113                     	;# 
    94  0114                     	;# 
    95  0115                     	;# 
    96  0116                     	;# 
    97  0117                     	;# 
    98  0118                     	;# 
    99  0119                     	;# 
   100  011A                     	;# 
   101  011B                     	;# 
   102  011D                     	;# 
   103  011E                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0191                     	;# 
   107  0191                     	;# 
   108  0192                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0194                     	;# 
   113  0195                     	;# 
   114  0196                     	;# 
   115  0199                     	;# 
   116  019A                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019C                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  019F                     	;# 
   126  020C                     	;# 
   127  020D                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0219                     	;# 
   144  021A                     	;# 
   145  021B                     	;# 
   146  021C                     	;# 
   147  021D                     	;# 
   148  021E                     	;# 
   149  021F                     	;# 
   150  0291                     	;# 
   151  0291                     	;# 
   152  0292                     	;# 
   153  0293                     	;# 
   154  0294                     	;# 
   155  0295                     	;# 
   156  0295                     	;# 
   157  0296                     	;# 
   158  0298                     	;# 
   159  0298                     	;# 
   160  0299                     	;# 
   161  029A                     	;# 
   162  029B                     	;# 
   163  029C                     	;# 
   164  029C                     	;# 
   165  029D                     	;# 
   166  029E                     	;# 
   167  029E                     	;# 
   168  0311                     	;# 
   169  0311                     	;# 
   170  0312                     	;# 
   171  0313                     	;# 
   172  0318                     	;# 
   173  0318                     	;# 
   174  0319                     	;# 
   175  031A                     	;# 
   176  0394                     	;# 
   177  0395                     	;# 
   178  0396                     	;# 
   179  039A                     	;# 
   180  039C                     	;# 
   181  039D                     	;# 
   182  039E                     	;# 
   183  039F                     	;# 
   184  0415                     	;# 
   185  0416                     	;# 
   186  0417                     	;# 
   187  041C                     	;# 
   188  041D                     	;# 
   189  041E                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE9                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEF                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0008                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0013                     	;# 
   218  0014                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0016                     	;# 
   222  0017                     	;# 
   223  0018                     	;# 
   224  0019                     	;# 
   225  001A                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001E                     	;# 
   229  001F                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0094                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011A                     	;# 
   259  011B                     	;# 
   260  011D                     	;# 
   261  011E                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0191                     	;# 
   265  0191                     	;# 
   266  0192                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0193                     	;# 
   270  0194                     	;# 
   271  0195                     	;# 
   272  0196                     	;# 
   273  0199                     	;# 
   274  019A                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019B                     	;# 
   279  019C                     	;# 
   280  019C                     	;# 
   281  019D                     	;# 
   282  019E                     	;# 
   283  019F                     	;# 
   284  020C                     	;# 
   285  020D                     	;# 
   286  0211                     	;# 
   287  0211                     	;# 
   288  0212                     	;# 
   289  0212                     	;# 
   290  0213                     	;# 
   291  0213                     	;# 
   292  0214                     	;# 
   293  0214                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0216                     	;# 
   298  0216                     	;# 
   299  0217                     	;# 
   300  0217                     	;# 
   301  0219                     	;# 
   302  021A                     	;# 
   303  021B                     	;# 
   304  021C                     	;# 
   305  021D                     	;# 
   306  021E                     	;# 
   307  021F                     	;# 
   308  0291                     	;# 
   309  0291                     	;# 
   310  0292                     	;# 
   311  0293                     	;# 
   312  0294                     	;# 
   313  0295                     	;# 
   314  0295                     	;# 
   315  0296                     	;# 
   316  0298                     	;# 
   317  0298                     	;# 
   318  0299                     	;# 
   319  029A                     	;# 
   320  029B                     	;# 
   321  029C                     	;# 
   322  029C                     	;# 
   323  029D                     	;# 
   324  029E                     	;# 
   325  029E                     	;# 
   326  0311                     	;# 
   327  0311                     	;# 
   328  0312                     	;# 
   329  0313                     	;# 
   330  0318                     	;# 
   331  0318                     	;# 
   332  0319                     	;# 
   333  031A                     	;# 
   334  0394                     	;# 
   335  0395                     	;# 
   336  0396                     	;# 
   337  039A                     	;# 
   338  039C                     	;# 
   339  039D                     	;# 
   340  039E                     	;# 
   341  039F                     	;# 
   342  0415                     	;# 
   343  0416                     	;# 
   344  0417                     	;# 
   345  041C                     	;# 
   346  041D                     	;# 
   347  041E                     	;# 
   348  0FE4                     	;# 
   349  0FE5                     	;# 
   350  0FE6                     	;# 
   351  0FE7                     	;# 
   352  0FE8                     	;# 
   353  0FE9                     	;# 
   354  0FEA                     	;# 
   355  0FEB                     	;# 
   356  0FED                     	;# 
   357  0FEE                     	;# 
   358  0FEF                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  0008                     	;# 
   368  0009                     	;# 
   369  000A                     	;# 
   370  000B                     	;# 
   371  000C                     	;# 
   372  000D                     	;# 
   373  0011                     	;# 
   374  0012                     	;# 
   375  0013                     	;# 
   376  0014                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001E                     	;# 
   387  001F                     	;# 
   388  008C                     	;# 
   389  008D                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0095                     	;# 
   395  0096                     	;# 
   396  0097                     	;# 
   397  0098                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  0111                     	;# 
   408  0112                     	;# 
   409  0113                     	;# 
   410  0114                     	;# 
   411  0115                     	;# 
   412  0116                     	;# 
   413  0117                     	;# 
   414  0118                     	;# 
   415  0119                     	;# 
   416  011A                     	;# 
   417  011B                     	;# 
   418  011D                     	;# 
   419  011E                     	;# 
   420  018C                     	;# 
   421  018D                     	;# 
   422  0191                     	;# 
   423  0191                     	;# 
   424  0192                     	;# 
   425  0193                     	;# 
   426  0193                     	;# 
   427  0193                     	;# 
   428  0194                     	;# 
   429  0195                     	;# 
   430  0196                     	;# 
   431  0199                     	;# 
   432  019A                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019C                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  020D                     	;# 
   444  0211                     	;# 
   445  0211                     	;# 
   446  0212                     	;# 
   447  0212                     	;# 
   448  0213                     	;# 
   449  0213                     	;# 
   450  0214                     	;# 
   451  0214                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0215                     	;# 
   455  0216                     	;# 
   456  0216                     	;# 
   457  0217                     	;# 
   458  0217                     	;# 
   459  0219                     	;# 
   460  021A                     	;# 
   461  021B                     	;# 
   462  021C                     	;# 
   463  021D                     	;# 
   464  021E                     	;# 
   465  021F                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0294                     	;# 
   471  0295                     	;# 
   472  0295                     	;# 
   473  0296                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  029B                     	;# 
   479  029C                     	;# 
   480  029C                     	;# 
   481  029D                     	;# 
   482  029E                     	;# 
   483  029E                     	;# 
   484  0311                     	;# 
   485  0311                     	;# 
   486  0312                     	;# 
   487  0313                     	;# 
   488  0318                     	;# 
   489  0318                     	;# 
   490  0319                     	;# 
   491  031A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  039A                     	;# 
   496  039C                     	;# 
   497  039D                     	;# 
   498  039E                     	;# 
   499  039F                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  041C                     	;# 
   504  041D                     	;# 
   505  041E                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000D                     	;# 
   531  0011                     	;# 
   532  0012                     	;# 
   533  0013                     	;# 
   534  0014                     	;# 
   535  0015                     	;# 
   536  0016                     	;# 
   537  0016                     	;# 
   538  0017                     	;# 
   539  0018                     	;# 
   540  0019                     	;# 
   541  001A                     	;# 
   542  001B                     	;# 
   543  001C                     	;# 
   544  001E                     	;# 
   545  001F                     	;# 
   546  008C                     	;# 
   547  008D                     	;# 
   548  0091                     	;# 
   549  0092                     	;# 
   550  0093                     	;# 
   551  0094                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009A                     	;# 
   558  009B                     	;# 
   559  009B                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  0111                     	;# 
   566  0112                     	;# 
   567  0113                     	;# 
   568  0114                     	;# 
   569  0115                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  0118                     	;# 
   573  0119                     	;# 
   574  011A                     	;# 
   575  011B                     	;# 
   576  011D                     	;# 
   577  011E                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  0191                     	;# 
   581  0191                     	;# 
   582  0192                     	;# 
   583  0193                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0194                     	;# 
   587  0195                     	;# 
   588  0196                     	;# 
   589  0199                     	;# 
   590  019A                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019C                     	;# 
   596  019C                     	;# 
   597  019D                     	;# 
   598  019E                     	;# 
   599  019F                     	;# 
   600  020C                     	;# 
   601  020D                     	;# 
   602  0211                     	;# 
   603  0211                     	;# 
   604  0212                     	;# 
   605  0212                     	;# 
   606  0213                     	;# 
   607  0213                     	;# 
   608  0214                     	;# 
   609  0214                     	;# 
   610  0215                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0216                     	;# 
   614  0216                     	;# 
   615  0217                     	;# 
   616  0217                     	;# 
   617  0219                     	;# 
   618  021A                     	;# 
   619  021B                     	;# 
   620  021C                     	;# 
   621  021D                     	;# 
   622  021E                     	;# 
   623  021F                     	;# 
   624  0291                     	;# 
   625  0291                     	;# 
   626  0292                     	;# 
   627  0293                     	;# 
   628  0294                     	;# 
   629  0295                     	;# 
   630  0295                     	;# 
   631  0296                     	;# 
   632  0298                     	;# 
   633  0298                     	;# 
   634  0299                     	;# 
   635  029A                     	;# 
   636  029B                     	;# 
   637  029C                     	;# 
   638  029C                     	;# 
   639  029D                     	;# 
   640  029E                     	;# 
   641  029E                     	;# 
   642  0311                     	;# 
   643  0311                     	;# 
   644  0312                     	;# 
   645  0313                     	;# 
   646  0318                     	;# 
   647  0318                     	;# 
   648  0319                     	;# 
   649  031A                     	;# 
   650  0394                     	;# 
   651  0395                     	;# 
   652  0396                     	;# 
   653  039A                     	;# 
   654  039C                     	;# 
   655  039D                     	;# 
   656  039E                     	;# 
   657  039F                     	;# 
   658  0415                     	;# 
   659  0416                     	;# 
   660  0417                     	;# 
   661  041C                     	;# 
   662  041D                     	;# 
   663  041E                     	;# 
   664  0FE4                     	;# 
   665  0FE5                     	;# 
   666  0FE6                     	;# 
   667  0FE7                     	;# 
   668  0FE8                     	;# 
   669  0FE9                     	;# 
   670  0FEA                     	;# 
   671  0FEB                     	;# 
   672  0FED                     	;# 
   673  0FEE                     	;# 
   674  0FEF                     	;# 
   675  0000                     	;# 
   676  0001                     	;# 
   677  0002                     	;# 
   678  0003                     	;# 
   679  0004                     	;# 
   680  0005                     	;# 
   681  0006                     	;# 
   682  0007                     	;# 
   683  0008                     	;# 
   684  0009                     	;# 
   685  000A                     	;# 
   686  000B                     	;# 
   687  000C                     	;# 
   688  000D                     	;# 
   689  0011                     	;# 
   690  0012                     	;# 
   691  0013                     	;# 
   692  0014                     	;# 
   693  0015                     	;# 
   694  0016                     	;# 
   695  0016                     	;# 
   696  0017                     	;# 
   697  0018                     	;# 
   698  0019                     	;# 
   699  001A                     	;# 
   700  001B                     	;# 
   701  001C                     	;# 
   702  001E                     	;# 
   703  001F                     	;# 
   704  008C                     	;# 
   705  008D                     	;# 
   706  0091                     	;# 
   707  0092                     	;# 
   708  0093                     	;# 
   709  0094                     	;# 
   710  0095                     	;# 
   711  0096                     	;# 
   712  0097                     	;# 
   713  0098                     	;# 
   714  0099                     	;# 
   715  009A                     	;# 
   716  009B                     	;# 
   717  009B                     	;# 
   718  009C                     	;# 
   719  009D                     	;# 
   720  009E                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  0111                     	;# 
   724  0112                     	;# 
   725  0113                     	;# 
   726  0114                     	;# 
   727  0115                     	;# 
   728  0116                     	;# 
   729  0117                     	;# 
   730  0118                     	;# 
   731  0119                     	;# 
   732  011A                     	;# 
   733  011B                     	;# 
   734  011D                     	;# 
   735  011E                     	;# 
   736  018C                     	;# 
   737  018D                     	;# 
   738  0191                     	;# 
   739  0191                     	;# 
   740  0192                     	;# 
   741  0193                     	;# 
   742  0193                     	;# 
   743  0193                     	;# 
   744  0194                     	;# 
   745  0195                     	;# 
   746  0196                     	;# 
   747  0199                     	;# 
   748  019A                     	;# 
   749  019B                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019C                     	;# 
   754  019C                     	;# 
   755  019D                     	;# 
   756  019E                     	;# 
   757  019F                     	;# 
   758  020C                     	;# 
   759  020D                     	;# 
   760  0211                     	;# 
   761  0211                     	;# 
   762  0212                     	;# 
   763  0212                     	;# 
   764  0213                     	;# 
   765  0213                     	;# 
   766  0214                     	;# 
   767  0214                     	;# 
   768  0215                     	;# 
   769  0215                     	;# 
   770  0215                     	;# 
   771  0216                     	;# 
   772  0216                     	;# 
   773  0217                     	;# 
   774  0217                     	;# 
   775  0219                     	;# 
   776  021A                     	;# 
   777  021B                     	;# 
   778  021C                     	;# 
   779  021D                     	;# 
   780  021E                     	;# 
   781  021F                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0298                     	;# 
   791  0298                     	;# 
   792  0299                     	;# 
   793  029A                     	;# 
   794  029B                     	;# 
   795  029C                     	;# 
   796  029C                     	;# 
   797  029D                     	;# 
   798  029E                     	;# 
   799  029E                     	;# 
   800  0311                     	;# 
   801  0311                     	;# 
   802  0312                     	;# 
   803  0313                     	;# 
   804  0318                     	;# 
   805  0318                     	;# 
   806  0319                     	;# 
   807  031A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  039A                     	;# 
   812  039C                     	;# 
   813  039D                     	;# 
   814  039E                     	;# 
   815  039F                     	;# 
   816  0415                     	;# 
   817  0416                     	;# 
   818  0417                     	;# 
   819  041C                     	;# 
   820  041D                     	;# 
   821  041E                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0013                     	;# 
   850  0014                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  001E                     	;# 
   861  001F                     	;# 
   862  008C                     	;# 
   863  008D                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0093                     	;# 
   867  0094                     	;# 
   868  0095                     	;# 
   869  0096                     	;# 
   870  0097                     	;# 
   871  0098                     	;# 
   872  0099                     	;# 
   873  009A                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  010C                     	;# 
   880  010D                     	;# 
   881  0111                     	;# 
   882  0112                     	;# 
   883  0113                     	;# 
   884  0114                     	;# 
   885  0115                     	;# 
   886  0116                     	;# 
   887  0117                     	;# 
   888  0118                     	;# 
   889  0119                     	;# 
   890  011A                     	;# 
   891  011B                     	;# 
   892  011D                     	;# 
   893  011E                     	;# 
   894  018C                     	;# 
   895  018D                     	;# 
   896  0191                     	;# 
   897  0191                     	;# 
   898  0192                     	;# 
   899  0193                     	;# 
   900  0193                     	;# 
   901  0193                     	;# 
   902  0194                     	;# 
   903  0195                     	;# 
   904  0196                     	;# 
   905  0199                     	;# 
   906  019A                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019B                     	;# 
   911  019C                     	;# 
   912  019C                     	;# 
   913  019D                     	;# 
   914  019E                     	;# 
   915  019F                     	;# 
   916  020C                     	;# 
   917  020D                     	;# 
   918  0211                     	;# 
   919  0211                     	;# 
   920  0212                     	;# 
   921  0212                     	;# 
   922  0213                     	;# 
   923  0213                     	;# 
   924  0214                     	;# 
   925  0214                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0215                     	;# 
   929  0216                     	;# 
   930  0216                     	;# 
   931  0217                     	;# 
   932  0217                     	;# 
   933  0219                     	;# 
   934  021A                     	;# 
   935  021B                     	;# 
   936  021C                     	;# 
   937  021D                     	;# 
   938  021E                     	;# 
   939  021F                     	;# 
   940  0291                     	;# 
   941  0291                     	;# 
   942  0292                     	;# 
   943  0293                     	;# 
   944  0294                     	;# 
   945  0295                     	;# 
   946  0295                     	;# 
   947  0296                     	;# 
   948  0298                     	;# 
   949  0298                     	;# 
   950  0299                     	;# 
   951  029A                     	;# 
   952  029B                     	;# 
   953  029C                     	;# 
   954  029C                     	;# 
   955  029D                     	;# 
   956  029E                     	;# 
   957  029E                     	;# 
   958  0311                     	;# 
   959  0311                     	;# 
   960  0312                     	;# 
   961  0313                     	;# 
   962  0318                     	;# 
   963  0318                     	;# 
   964  0319                     	;# 
   965  031A                     	;# 
   966  0394                     	;# 
   967  0395                     	;# 
   968  0396                     	;# 
   969  039A                     	;# 
   970  039C                     	;# 
   971  039D                     	;# 
   972  039E                     	;# 
   973  039F                     	;# 
   974  0415                     	;# 
   975  0416                     	;# 
   976  0417                     	;# 
   977  041C                     	;# 
   978  041D                     	;# 
   979  041E                     	;# 
   980  0FE4                     	;# 
   981  0FE5                     	;# 
   982  0FE6                     	;# 
   983  0FE7                     	;# 
   984  0FE8                     	;# 
   985  0FE9                     	;# 
   986  0FEA                     	;# 
   987  0FEB                     	;# 
   988  0FED                     	;# 
   989  0FEE                     	;# 
   990  0FEF                     	;# 
   991  0000                     	;# 
   992  0001                     	;# 
   993  0002                     	;# 
   994  0003                     	;# 
   995  0004                     	;# 
   996  0005                     	;# 
   997  0006                     	;# 
   998  0007                     	;# 
   999  0008                     	;# 
  1000  0009                     	;# 
  1001  000A                     	;# 
  1002  000B                     	;# 
  1003  000C                     	;# 
  1004  000D                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0016                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001C                     	;# 
  1018  001E                     	;# 
  1019  001F                     	;# 
  1020  008C                     	;# 
  1021  008D                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0097                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009A                     	;# 
  1032  009B                     	;# 
  1033  009B                     	;# 
  1034  009C                     	;# 
  1035  009D                     	;# 
  1036  009E                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  0111                     	;# 
  1040  0112                     	;# 
  1041  0113                     	;# 
  1042  0114                     	;# 
  1043  0115                     	;# 
  1044  0116                     	;# 
  1045  0117                     	;# 
  1046  0118                     	;# 
  1047  0119                     	;# 
  1048  011A                     	;# 
  1049  011B                     	;# 
  1050  011D                     	;# 
  1051  011E                     	;# 
  1052  018C                     	;# 
  1053  018D                     	;# 
  1054  0191                     	;# 
  1055  0191                     	;# 
  1056  0192                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0193                     	;# 
  1060  0194                     	;# 
  1061  0195                     	;# 
  1062  0196                     	;# 
  1063  0199                     	;# 
  1064  019A                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019C                     	;# 
  1070  019C                     	;# 
  1071  019D                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  020C                     	;# 
  1075  020D                     	;# 
  1076  0211                     	;# 
  1077  0211                     	;# 
  1078  0212                     	;# 
  1079  0212                     	;# 
  1080  0213                     	;# 
  1081  0213                     	;# 
  1082  0214                     	;# 
  1083  0214                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0215                     	;# 
  1087  0216                     	;# 
  1088  0216                     	;# 
  1089  0217                     	;# 
  1090  0217                     	;# 
  1091  0219                     	;# 
  1092  021A                     	;# 
  1093  021B                     	;# 
  1094  021C                     	;# 
  1095  021D                     	;# 
  1096  021E                     	;# 
  1097  021F                     	;# 
  1098  0291                     	;# 
  1099  0291                     	;# 
  1100  0292                     	;# 
  1101  0293                     	;# 
  1102  0294                     	;# 
  1103  0295                     	;# 
  1104  0295                     	;# 
  1105  0296                     	;# 
  1106  0298                     	;# 
  1107  0298                     	;# 
  1108  0299                     	;# 
  1109  029A                     	;# 
  1110  029B                     	;# 
  1111  029C                     	;# 
  1112  029C                     	;# 
  1113  029D                     	;# 
  1114  029E                     	;# 
  1115  029E                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  0394                     	;# 
  1125  0395                     	;# 
  1126  0396                     	;# 
  1127  039A                     	;# 
  1128  039C                     	;# 
  1129  039D                     	;# 
  1130  039E                     	;# 
  1131  039F                     	;# 
  1132  0415                     	;# 
  1133  0416                     	;# 
  1134  0417                     	;# 
  1135  041C                     	;# 
  1136  041D                     	;# 
  1137  041E                     	;# 
  1138  0FE4                     	;# 
  1139  0FE5                     	;# 
  1140  0FE6                     	;# 
  1141  0FE7                     	;# 
  1142  0FE8                     	;# 
  1143  0FE9                     	;# 
  1144  0FEA                     	;# 
  1145  0FEB                     	;# 
  1146  0FED                     	;# 
  1147  0FEE                     	;# 
  1148  0FEF                     	;# 
  1149  0000                     	;# 
  1150  0001                     	;# 
  1151  0002                     	;# 
  1152  0003                     	;# 
  1153  0004                     	;# 
  1154  0005                     	;# 
  1155  0006                     	;# 
  1156  0007                     	;# 
  1157  0008                     	;# 
  1158  0009                     	;# 
  1159  000A                     	;# 
  1160  000B                     	;# 
  1161  000C                     	;# 
  1162  000D                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0013                     	;# 
  1166  0014                     	;# 
  1167  0015                     	;# 
  1168  0016                     	;# 
  1169  0016                     	;# 
  1170  0017                     	;# 
  1171  0018                     	;# 
  1172  0019                     	;# 
  1173  001A                     	;# 
  1174  001B                     	;# 
  1175  001C                     	;# 
  1176  001E                     	;# 
  1177  001F                     	;# 
  1178  008C                     	;# 
  1179  008D                     	;# 
  1180  0091                     	;# 
  1181  0092                     	;# 
  1182  0093                     	;# 
  1183  0094                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0098                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  0111                     	;# 
  1198  0112                     	;# 
  1199  0113                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0117                     	;# 
  1204  0118                     	;# 
  1205  0119                     	;# 
  1206  011A                     	;# 
  1207  011B                     	;# 
  1208  011D                     	;# 
  1209  011E                     	;# 
  1210  018C                     	;# 
  1211  018D                     	;# 
  1212  0191                     	;# 
  1213  0191                     	;# 
  1214  0192                     	;# 
  1215  0193                     	;# 
  1216  0193                     	;# 
  1217  0193                     	;# 
  1218  0194                     	;# 
  1219  0195                     	;# 
  1220  0196                     	;# 
  1221  0199                     	;# 
  1222  019A                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019C                     	;# 
  1228  019C                     	;# 
  1229  019D                     	;# 
  1230  019E                     	;# 
  1231  019F                     	;# 
  1232  020C                     	;# 
  1233  020D                     	;# 
  1234  0211                     	;# 
  1235  0211                     	;# 
  1236  0212                     	;# 
  1237  0212                     	;# 
  1238  0213                     	;# 
  1239  0213                     	;# 
  1240  0214                     	;# 
  1241  0214                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0215                     	;# 
  1245  0216                     	;# 
  1246  0216                     	;# 
  1247  0217                     	;# 
  1248  0217                     	;# 
  1249  0219                     	;# 
  1250  021A                     	;# 
  1251  021B                     	;# 
  1252  021C                     	;# 
  1253  021D                     	;# 
  1254  021E                     	;# 
  1255  021F                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0294                     	;# 
  1261  0295                     	;# 
  1262  0295                     	;# 
  1263  0296                     	;# 
  1264  0298                     	;# 
  1265  0298                     	;# 
  1266  0299                     	;# 
  1267  029A                     	;# 
  1268  029B                     	;# 
  1269  029C                     	;# 
  1270  029C                     	;# 
  1271  029D                     	;# 
  1272  029E                     	;# 
  1273  029E                     	;# 
  1274  0311                     	;# 
  1275  0311                     	;# 
  1276  0312                     	;# 
  1277  0313                     	;# 
  1278  0318                     	;# 
  1279  0318                     	;# 
  1280  0319                     	;# 
  1281  031A                     	;# 
  1282  0394                     	;# 
  1283  0395                     	;# 
  1284  0396                     	;# 
  1285  039A                     	;# 
  1286  039C                     	;# 
  1287  039D                     	;# 
  1288  039E                     	;# 
  1289  039F                     	;# 
  1290  0415                     	;# 
  1291  0416                     	;# 
  1292  0417                     	;# 
  1293  041C                     	;# 
  1294  041D                     	;# 
  1295  041E                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000D                     	;# 
  1321  0011                     	;# 
  1322  0012                     	;# 
  1323  0013                     	;# 
  1324  0014                     	;# 
  1325  0015                     	;# 
  1326  0016                     	;# 
  1327  0016                     	;# 
  1328  0017                     	;# 
  1329  0018                     	;# 
  1330  0019                     	;# 
  1331  001A                     	;# 
  1332  001B                     	;# 
  1333  001C                     	;# 
  1334  001E                     	;# 
  1335  001F                     	;# 
  1336  008C                     	;# 
  1337  008D                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0094                     	;# 
  1342  0095                     	;# 
  1343  0096                     	;# 
  1344  0097                     	;# 
  1345  0098                     	;# 
  1346  0099                     	;# 
  1347  009A                     	;# 
  1348  009B                     	;# 
  1349  009B                     	;# 
  1350  009C                     	;# 
  1351  009D                     	;# 
  1352  009E                     	;# 
  1353  010C                     	;# 
  1354  010D                     	;# 
  1355  0111                     	;# 
  1356  0112                     	;# 
  1357  0113                     	;# 
  1358  0114                     	;# 
  1359  0115                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  0118                     	;# 
  1363  0119                     	;# 
  1364  011A                     	;# 
  1365  011B                     	;# 
  1366  011D                     	;# 
  1367  011E                     	;# 
  1368  018C                     	;# 
  1369  018D                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0193                     	;# 
  1376  0194                     	;# 
  1377  0195                     	;# 
  1378  0196                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019B                     	;# 
  1385  019C                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019F                     	;# 
  1390  020C                     	;# 
  1391  020D                     	;# 
  1392  0211                     	;# 
  1393  0211                     	;# 
  1394  0212                     	;# 
  1395  0212                     	;# 
  1396  0213                     	;# 
  1397  0213                     	;# 
  1398  0214                     	;# 
  1399  0214                     	;# 
  1400  0215                     	;# 
  1401  0215                     	;# 
  1402  0215                     	;# 
  1403  0216                     	;# 
  1404  0216                     	;# 
  1405  0217                     	;# 
  1406  0217                     	;# 
  1407  0219                     	;# 
  1408  021A                     	;# 
  1409  021B                     	;# 
  1410  021C                     	;# 
  1411  021D                     	;# 
  1412  021E                     	;# 
  1413  021F                     	;# 
  1414  0291                     	;# 
  1415  0291                     	;# 
  1416  0292                     	;# 
  1417  0293                     	;# 
  1418  0294                     	;# 
  1419  0295                     	;# 
  1420  0295                     	;# 
  1421  0296                     	;# 
  1422  0298                     	;# 
  1423  0298                     	;# 
  1424  0299                     	;# 
  1425  029A                     	;# 
  1426  029B                     	;# 
  1427  029C                     	;# 
  1428  029C                     	;# 
  1429  029D                     	;# 
  1430  029E                     	;# 
  1431  029E                     	;# 
  1432  0311                     	;# 
  1433  0311                     	;# 
  1434  0312                     	;# 
  1435  0313                     	;# 
  1436  0318                     	;# 
  1437  0318                     	;# 
  1438  0319                     	;# 
  1439  031A                     	;# 
  1440  0394                     	;# 
  1441  0395                     	;# 
  1442  0396                     	;# 
  1443  039A                     	;# 
  1444  039C                     	;# 
  1445  039D                     	;# 
  1446  039E                     	;# 
  1447  039F                     	;# 
  1448  0415                     	;# 
  1449  0416                     	;# 
  1450  0417                     	;# 
  1451  041C                     	;# 
  1452  041D                     	;# 
  1453  041E                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465                           
  1466                           	psect	idataBANK0
  1467  0780                     __pidataBANK0:	
  1468                           
  1469                           ;initializer for _LED_state
  1470  0780  3401               	retlw	1
  1471                           
  1472                           	psect	stringtext
  1473  0519                     __pstringtext:	
  1474  0519                     _fp_x0_a:	
  1475  0519  34D0               	retlw	208
  1476  051A  34D2               	retlw	210
  1477  051B  3402               	retlw	2
  1478  051C  3400               	retlw	0
  1479  051D                     __end_of_fp_x0_a:	
  1480  051D                     _fp_x0_b:	
  1481  051D  34E4               	retlw	228
  1482  051E  34E1               	retlw	225
  1483  051F  3401               	retlw	1
  1484  0520  3400               	retlw	0
  1485  0521                     __end_of_fp_x0_b:	
  1486  0521                     _ratio_mph:	
  1487  0521  34F9               	retlw	249
  1488  0522  349E               	retlw	158
  1489  0523  3400               	retlw	0
  1490  0524  3400               	retlw	0
  1491  0525                     __end_of_ratio_mph:	
  1492  0525                     convert_to_fp@one:	
  1493  0525  3401               	retlw	1
  1494  0526  3400               	retlw	0
  1495  0527                     __end_ofconvert_to_fp@one:	
  1496  000B                     _INTCONbits	set	11
  1497  0011                     _PIR1bits	set	17
  1498  000D                     _PORTBbits	set	13
  1499  0015                     _TMR0	set	21
  1500  0095                     _OPTION_REG	set	149
  1501  0095                     _OPTION_REGbits	set	149
  1502  0099                     _OSCCON	set	153
  1503  009A                     _OSCSTAT	set	154
  1504  0098                     _OSCTUNE	set	152
  1505  0091                     _PIE1bits	set	145
  1506  008C                     _TRISA	set	140
  1507  008D                     _TRISB	set	141
  1508  04D6                     _PLLR	set	1238
  1509  011D                     _APFCON0	set	285
  1510  011E                     _APFCON1	set	286
  1511  010C                     _LATA	set	268
  1512  010D                     _LATB	set	269
  1513  0862                     _LATA2	set	2146
  1514  018C                     _ANSELA	set	396
  1515  018D                     _ANSELB	set	397
  1516  019F                     _BAUDCON	set	415
  1517  0199                     _RCREG	set	409
  1518  019D                     _RCSTA	set	413
  1519  019D                     _RCSTAbits	set	413
  1520  019C                     _SPBRGH	set	412
  1521  019B                     _SPBRGL	set	411
  1522  019A                     _TXREG	set	410
  1523  019E                     _TXSTA	set	414
  1524  020C                     _WPUA	set	524
  1525  020D                     _WPUB	set	525
  1526  0527                     STR_1:	
  1527  0527  3424               	retlw	36	;'$'
  1528  0528  3450               	retlw	80	;'P'
  1529  0529  344D               	retlw	77	;'M'
  1530  052A  3454               	retlw	84	;'T'
  1531  052B  344B               	retlw	75	;'K'
  1532  052C  3433               	retlw	51	;'3'
  1533  052D  3431               	retlw	49	;'1'
  1534  052E  3434               	retlw	52	;'4'
  1535  052F  342C               	retlw	44	;','
  1536  0530  3430               	retlw	48	;'0'
  1537  0531  342C               	retlw	44	;','
  1538  0532  3430               	retlw	48	;'0'
  1539  0533  342C               	retlw	44	;','
  1540  0534  3431               	retlw	49	;'1'
  1541  0535  342C               	retlw	44	;','
  1542  0536  3430               	retlw	48	;'0'
  1543  0537  342C               	retlw	44	;','
  1544  0538  3430               	retlw	48	;'0'
  1545  0539  342C               	retlw	44	;','
  1546  053A  3430               	retlw	48	;'0'
  1547  053B  342C               	retlw	44	;','
  1548  053C  3430               	retlw	48	;'0'
  1549  053D  342C               	retlw	44	;','
  1550  053E  3430               	retlw	48	;'0'
  1551  053F  342C               	retlw	44	;','
  1552  0540  3430               	retlw	48	;'0'
  1553  0541  342C               	retlw	44	;','
  1554  0542  3430               	retlw	48	;'0'
  1555  0543  342C               	retlw	44	;','
  1556  0544  3430               	retlw	48	;'0'
  1557  0545  342C               	retlw	44	;','
  1558  0546  3430               	retlw	48	;'0'
  1559  0547  342C               	retlw	44	;','
  1560  0548  3430               	retlw	48	;'0'
  1561  0549  342C               	retlw	44	;','
  1562  054A  3430               	retlw	48	;'0'
  1563  054B  342C               	retlw	44	;','
  1564  054C  3430               	retlw	48	;'0'
  1565  054D  342C               	retlw	44	;','
  1566  054E  3430               	retlw	48	;'0'
  1567  054F  342C               	retlw	44	;','
  1568  0550  3430               	retlw	48	;'0'
  1569  0551  342C               	retlw	44	;','
  1570  0552  3430               	retlw	48	;'0'
  1571  0553  342C               	retlw	44	;','
  1572  0554  3430               	retlw	48	;'0'
  1573  0555  342A               	retlw	42	;'*'
  1574  0556  3432               	retlw	50	;'2'
  1575  0557  3439               	retlw	57	;'9'
  1576  0558  340D               	retlw	13
  1577  0559  340A               	retlw	10
  1578  055A  3400               	retlw	0
  1579  055B                     STR_2:	
  1580  055B  3424               	retlw	36	;'$'
  1581  055C  3450               	retlw	80	;'P'
  1582  055D  344D               	retlw	77	;'M'
  1583  055E  3454               	retlw	84	;'T'
  1584  055F  344B               	retlw	75	;'K'
  1585  0560  3432               	retlw	50	;'2'
  1586  0561  3432               	retlw	50	;'2'
  1587  0562  3430               	retlw	48	;'0'
  1588  0563  342C               	retlw	44	;','
  1589  0564  3431               	retlw	49	;'1'
  1590  0565  3430               	retlw	48	;'0'
  1591  0566  3430               	retlw	48	;'0'
  1592  0567  342A               	retlw	42	;'*'
  1593  0568  3432               	retlw	50	;'2'
  1594  0569  3446               	retlw	70	;'F'
  1595  056A  340D               	retlw	13
  1596  056B  340A               	retlw	10
  1597  056C  3400               	retlw	0
  1598                           
  1599                           ; #config settings
  1600  0000                     
  1601                           	psect	cinit
  1602  002B                     start_initialization:	
  1603  002B                     __initialization:	
  1604                           
  1605                           ; Initialize objects allocated to BANK0
  1606  002B  3187  2780  3180   	fcall	__pidataBANK0	;fetch initializer
  1607  002E  00EF               	movwf	__pdataBANK0& (0+127)
  1608                           
  1609                           ; Clear objects allocated to COMMON
  1610  002F  01F0               	clrf	__pbssCOMMON& (0+127)
  1611  0030  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1612  0031  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1613  0032  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1614  0033  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1615                           
  1616                           ; Clear objects allocated to BANK0
  1617  0034  304B               	movlw	low __pbssBANK0
  1618  0035  0084               	movwf	4
  1619  0036  3000               	movlw	high __pbssBANK0
  1620  0037  0085               	movwf	5
  1621  0038  3024               	movlw	36
  1622  0039  3187  2768         	fcall	clear_ram0
  1623  003B                     end_of_initialization:	
  1624                           ;End of C runtime variable initialization code
  1625                           
  1626  003B                     __end_of__initialization:	
  1627  003B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1628  003C  0020               	movlb	0
  1629  003D  3184  2C2F         	ljmp	_main	;jump to C main() function
  1630                           
  1631                           	psect	bssCOMMON
  1632  0070                     __pbssCOMMON:	
  1633  0070                     _b_last_state:	
  1634  0070                     	ds	2
  1635  0072                     _b_count_pressed:	
  1636  0072                     	ds	1
  1637  0073                     _eusartRxCount:	
  1638  0073                     	ds	1
  1639  0074                     _timer0ReloadVal:	
  1640  0074                     	ds	1
  1641                           
  1642                           	psect	bssBANK0
  1643  004B                     __pbssBANK0:	
  1644  004B                     _eusartRxBuffer:	
  1645  004B                     	ds	8
  1646  0053                     _eusartTxBuffer:	
  1647  0053                     	ds	8
  1648  005B                     _speed:	
  1649  005B                     	ds	4
  1650  005F                     TMR0_ISR@CountCallBack:	
  1651  005F                     	ds	2
  1652  0061                     _TMR0_InterruptHandler:	
  1653  0061                     	ds	2
  1654  0063                     _LED_counter:	
  1655  0063                     	ds	1
  1656  0064                     _b_confirmed_state:	
  1657  0064                     	ds	1
  1658  0065                     _b_count_released:	
  1659  0065                     	ds	1
  1660  0066                     _b_has_once_been_released:	
  1661  0066                     	ds	1
  1662  0067                     _b_push_confirmed:	
  1663  0067                     	ds	1
  1664  0068                     _b_release_confirmed:	
  1665  0068                     	ds	1
  1666  0069                     _eusartRxHead:	
  1667  0069                     	ds	1
  1668  006A                     _eusartRxTail:	
  1669  006A                     	ds	1
  1670  006B                     _eusartTxBufferRemaining:	
  1671  006B                     	ds	1
  1672  006C                     _eusartTxHead:	
  1673  006C                     	ds	1
  1674  006D                     _eusartTxTail:	
  1675  006D                     	ds	1
  1676  006E                     _speed_units:	
  1677  006E                     	ds	1
  1678                           
  1679                           	psect	dataBANK0
  1680  006F                     __pdataBANK0:	
  1681  006F                     _LED_state:	
  1682  006F                     	ds	1
  1683                           
  1684                           	psect	clrtext
  1685  0768                     clear_ram0:	
  1686                           ;	Called with FSR0 containing the base address, and
  1687                           ;	WREG with the size to clear
  1688                           
  1689  0768  0064               	clrwdt	;clear the watchdog before getting into this loop
  1690  0769                     clrloop0:	
  1691  0769  0180               	clrf	0	;clear RAM location pointed to by FSR
  1692  076A  3101               	addfsr 0,1
  1693  076B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1694  076C  2F69               	goto	clrloop0	;have we reached the end yet?
  1695  076D  3400               	retlw	0	;all done for this memory range, return
  1696                           
  1697                           	psect	cstackBANK1
  1698  00A0                     __pcstackBANK1:	
  1699  00A0                     main@tmp:	
  1700                           
  1701                           ; 1 bytes @ 0x0
  1702  00A0                     	ds	1
  1703                           
  1704                           	psect	cstackCOMMON
  1705  0075                     __pcstackCOMMON:	
  1706  0075                     ?_PIN_MANAGER_Initialize:	
  1707  0075                     ?_OSCILLATOR_Initialize:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0075                     ?_TMR0_Initialize:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0075                     ?_EUSART_Initialize:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0075                     ?_TMR0_ISR:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0075                     ?_EUSART_Transmit_ISR:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0075                     ??_EUSART_Transmit_ISR:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0075                     ?_EUSART_Receive_ISR:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0075                     ??_EUSART_Receive_ISR:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0075                     ?_TMR0_DefaultInterruptHandler:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0075                     ??_TMR0_DefaultInterruptHandler:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0075                     ?_TMR0_CallBack:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0075                     ?_my10msTimerISR:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0075                     ?_LED_set_state:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0075                     ?_GPS_Initialize:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0075                     ?_GPS_read_speed:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0075                     ?_LED_update_loop:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0075                     ??_LED_update_loop:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0075                     ?_button_update_loop:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0075                     ?_SYSTEM_Initialize:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0075                     ?_INTERRUPT_InterruptManager:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0075                     ?_EUSART_Read:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0075                     ?_EUSART_Write:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0075                     ?_putch:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0075                     ?_main:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0075                     ?_get_button_state:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0075                     ??_get_button_state:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0075                     get_button_state@state:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788                           
  1789                           ; 1 bytes @ 0x0
  1790  0075                     	ds	1
  1791  0076                     ??_button_update_loop:	
  1792                           
  1793                           ; 1 bytes @ 0x1
  1794  0076                     	ds	2
  1795  0078                     button_update_loop@current_state:	
  1796                           
  1797                           ; 1 bytes @ 0x3
  1798  0078                     	ds	1
  1799  0079                     ??_TMR0_ISR:	
  1800  0079                     ??_TMR0_CallBack:	
  1801                           ; 1 bytes @ 0x4
  1802                           
  1803  0079                     ??_my10msTimerISR:	
  1804                           ; 1 bytes @ 0x4
  1805                           
  1806  0079                     ??_INTERRUPT_InterruptManager:	
  1807                           ; 1 bytes @ 0x4
  1808                           
  1809                           
  1810                           ; 1 bytes @ 0x4
  1811  0079                     	ds	1
  1812                           
  1813                           	psect	cstackBANK0
  1814  0020                     __pcstackBANK0:	
  1815  0020                     ??_PIN_MANAGER_Initialize:	
  1816  0020                     ??_OSCILLATOR_Initialize:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0020                     ??_EUSART_Initialize:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0020                     ?_TMR0_SetInterruptHandler:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0020                     ??_LED_set_state:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0020                     ??_EUSART_Read:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0020                     ??_EUSART_Write:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0020                     ?___wmul:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0020                     ?_convert_to_fp:	
  1838                           ; 2 bytes @ 0x0
  1839                           
  1840  0020                     ?___lmul:	
  1841                           ; 4 bytes @ 0x0
  1842                           
  1843  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1844                           ; 4 bytes @ 0x0
  1845                           
  1846  0020                     convert_to_fp@int_part:	
  1847                           ; 2 bytes @ 0x0
  1848                           
  1849  0020                     ___wmul@multiplier:	
  1850                           ; 2 bytes @ 0x0
  1851                           
  1852  0020                     ___lmul@multiplier:	
  1853                           ; 2 bytes @ 0x0
  1854                           
  1855                           
  1856                           ; 4 bytes @ 0x0
  1857  0020                     	ds	1
  1858  0021                     EUSART_Read@readValue:	
  1859  0021                     EUSART_Write@txData:	
  1860                           ; 1 bytes @ 0x1
  1861                           
  1862  0021                     LED_set_state@new_state:	
  1863                           ; 1 bytes @ 0x1
  1864                           
  1865                           
  1866                           ; 1 bytes @ 0x1
  1867  0021                     	ds	1
  1868  0022                     ??_TMR0_Initialize:	
  1869  0022                     ??_TMR0_SetInterruptHandler:	
  1870                           ; 1 bytes @ 0x2
  1871                           
  1872  0022                     ??_putch:	
  1873                           ; 1 bytes @ 0x2
  1874                           
  1875  0022                     putch@txData:	
  1876                           ; 1 bytes @ 0x2
  1877                           
  1878  0022                     convert_to_fp@fract_part:	
  1879                           ; 1 bytes @ 0x2
  1880                           
  1881  0022                     ___wmul@multiplicand:	
  1882                           ; 2 bytes @ 0x2
  1883                           
  1884                           
  1885                           ; 2 bytes @ 0x2
  1886  0022                     	ds	1
  1887  0023                     ??_SYSTEM_Initialize:	
  1888  0023                     ?_printf:	
  1889                           ; 1 bytes @ 0x3
  1890                           
  1891  0023                     printf@f:	
  1892                           ; 2 bytes @ 0x3
  1893                           
  1894                           
  1895                           ; 2 bytes @ 0x3
  1896  0023                     	ds	1
  1897  0024                     ??_convert_to_fp:	
  1898  0024                     ??___wmul:	
  1899                           ; 1 bytes @ 0x4
  1900                           
  1901  0024                     ___wmul@product:	
  1902                           ; 1 bytes @ 0x4
  1903                           
  1904  0024                     ___lmul@multiplicand:	
  1905                           ; 2 bytes @ 0x4
  1906                           
  1907                           
  1908                           ; 4 bytes @ 0x4
  1909  0024                     	ds	1
  1910  0025                     ??_printf:	
  1911                           
  1912                           ; 1 bytes @ 0x5
  1913  0025                     	ds	3
  1914  0028                     ??___lmul:	
  1915  0028                     printf@ap:	
  1916                           ; 1 bytes @ 0x8
  1917                           
  1918  0028                     ___lmul@product:	
  1919                           ; 1 bytes @ 0x8
  1920                           
  1921                           
  1922                           ; 4 bytes @ 0x8
  1923  0028                     	ds	1
  1924  0029                     printf@c:	
  1925                           
  1926                           ; 1 bytes @ 0x9
  1927  0029                     	ds	1
  1928  002A                     ??_GPS_Initialize:	
  1929                           
  1930                           ; 1 bytes @ 0xA
  1931  002A                     	ds	2
  1932  002C                     ?_multiply_fp:	
  1933  002C                     convert_to_fp@res_fract:	
  1934                           ; 4 bytes @ 0xC
  1935                           
  1936  002C                     multiply_fp@n1:	
  1937                           ; 2 bytes @ 0xC
  1938                           
  1939                           
  1940                           ; 4 bytes @ 0xC
  1941  002C                     	ds	1
  1942  002D                     GPS_Initialize@tmp:	
  1943                           
  1944                           ; 1 bytes @ 0xD
  1945  002D                     	ds	1
  1946  002E                     convert_to_fp@i_bit:	
  1947                           
  1948                           ; 1 bytes @ 0xE
  1949  002E                     	ds	1
  1950  002F                     convert_to_fp@tmp_left:	
  1951                           
  1952                           ; 2 bytes @ 0xF
  1953  002F                     	ds	1
  1954  0030                     multiply_fp@n2:	
  1955                           
  1956                           ; 4 bytes @ 0x10
  1957  0030                     	ds	1
  1958  0031                     convert_to_fp@res:	
  1959                           
  1960                           ; 4 bytes @ 0x11
  1961  0031                     	ds	3
  1962  0034                     ??_multiply_fp:	
  1963                           
  1964                           ; 1 bytes @ 0x14
  1965  0034                     	ds	1
  1966  0035                     ??_GPS_read_speed:	
  1967                           
  1968                           ; 1 bytes @ 0x15
  1969  0035                     	ds	2
  1970  0037                     GPS_read_speed@before_dot:	
  1971                           
  1972                           ; 1 bytes @ 0x17
  1973  0037                     	ds	1
  1974  0038                     GPS_read_speed@no_more_checksum:	
  1975                           
  1976                           ; 1 bytes @ 0x18
  1977  0038                     	ds	1
  1978  0039                     GPS_read_speed@read_speed_int:	
  1979                           
  1980                           ; 2 bytes @ 0x19
  1981  0039                     	ds	2
  1982  003B                     GPS_read_speed@read_speed_fra:	
  1983                           
  1984                           ; 2 bytes @ 0x1B
  1985  003B                     	ds	2
  1986  003D                     GPS_read_speed@checksum2:	
  1987                           
  1988                           ; 1 bytes @ 0x1D
  1989  003D                     	ds	1
  1990  003E                     GPS_read_speed@checksum:	
  1991                           
  1992                           ; 1 bytes @ 0x1E
  1993  003E                     	ds	1
  1994  003F                     GPS_read_speed@buffer:	
  1995                           
  1996                           ; 6 bytes @ 0x1F
  1997  003F                     	ds	3
  1998  0042                     multiply_fp@res:	
  1999                           
  2000                           ; 4 bytes @ 0x22
  2001  0042                     	ds	3
  2002  0045                     GPS_read_speed@i_buff2:	
  2003                           
  2004                           ; 1 bytes @ 0x25
  2005  0045                     	ds	1
  2006  0046                     GPS_read_speed@i_buff:	
  2007                           
  2008                           ; 1 bytes @ 0x26
  2009  0046                     	ds	1
  2010  0047                     GPS_read_speed@m_char:	
  2011                           
  2012                           ; 1 bytes @ 0x27
  2013  0047                     	ds	1
  2014  0048                     ??_main:	
  2015                           
  2016                           ; 1 bytes @ 0x28
  2017  0048                     	ds	3
  2018                           
  2019                           	psect	maintext
  2020  042F                     __pmaintext:	
  2021 ;;
  2022 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2023 ;;
  2024 ;; *************** function _main *****************
  2025 ;; Defined at:
  2026 ;;		line 67 in file "main.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  tmp             1    0[BANK1 ] unsigned char 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : B1F/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2040 ;;      Params:         0       0       0       0       0       0
  2041 ;;      Locals:         0       0       1       0       0       0
  2042 ;;      Temps:          0       3       0       0       0       0
  2043 ;;      Totals:         0       3       1       0       0       0
  2044 ;;Total ram usage:        4 bytes
  2045 ;; Hardware stack levels required when called:   10
  2046 ;; This function calls:
  2047 ;;		_GPS_Initialize
  2048 ;;		_GPS_read_speed
  2049 ;;		_LED_set_state
  2050 ;;		_SYSTEM_Initialize
  2051 ;;		_TMR0_SetInterruptHandler
  2052 ;;		_multiply_fp
  2053 ;; This function is called by:
  2054 ;;		Startup code after reset
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           
  2059                           ;psect for function _main
  2060  042F                     _main:	
  2061                           
  2062                           ;main.c: 70: SYSTEM_Initialize();
  2063                           
  2064                           ;incstack = 0
  2065                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2066  042F  3187  273D  3184   	fcall	_SYSTEM_Initialize
  2067                           
  2068                           ;main.c: 72: TMR0_SetInterruptHandler(my10msTimerISR);
  2069  0432  307A               	movlw	low _my10msTimerISR
  2070  0433  0020               	movlb	0	; select bank0
  2071  0434  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2072  0435  3007               	movlw	high _my10msTimerISR
  2073  0436  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2074  0437  3187  276E  3184   	fcall	_TMR0_SetInterruptHandler
  2075                           
  2076                           ;main.c: 75: (INTCONbits.GIE = 1);
  2077  043A  178B               	bsf	11,7	;volatile
  2078                           
  2079                           ;main.c: 77: (INTCONbits.PEIE = 1);
  2080  043B  170B               	bsf	11,6	;volatile
  2081                           
  2082                           ;main.c: 79: LED_set_state(manual_mode);
  2083  043C  3004               	movlw	4
  2084  043D  3186  262E  3184   	fcall	_LED_set_state
  2085                           
  2086                           ;main.c: 80: do { LATA2 = 0; } while(0);
  2087  0440  0022               	movlb	2	; select bank2
  2088  0441  110C               	bcf	12,2	;volatile
  2089                           
  2090                           ;main.c: 81: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  2091  0442  0021               	movlb	1	; select bank1
  2092  0443  01A0               	clrf	main@tmp^(0+128)
  2093  0444  300A               	movlw	10
  2094  0445  0220               	subwf	main@tmp^(0+128),w
  2095  0446  1803               	btfsc	3,0
  2096  0447  2C5F               	goto	l3054
  2097  0448                     l3048:	
  2098  0448  3005               	movlw	5
  2099  0449  0020               	movlb	0	; select bank0
  2100  044A  00CA               	movwf	??_main+2
  2101  044B  300F               	movlw	15
  2102  044C  00C9               	movwf	??_main+1
  2103  044D  30F4               	movlw	244
  2104  044E  00C8               	movwf	??_main
  2105  044F                     u3847:	
  2106  044F  0BC8               	decfsz	??_main,f
  2107  0450  2C4F               	goto	u3847
  2108  0451  0BC9               	decfsz	??_main+1,f
  2109  0452  2C4F               	goto	u3847
  2110  0453  0BCA               	decfsz	??_main+2,f
  2111  0454  2C4F               	goto	u3847
  2112  0455  3001               	movlw	1
  2113  0456  0020               	movlb	0	; select bank0
  2114  0457  00C8               	movwf	??_main
  2115  0458  0848               	movf	??_main,w
  2116  0459  0021               	movlb	1	; select bank1
  2117  045A  07A0               	addwf	main@tmp^(0+128),f
  2118  045B  300A               	movlw	10
  2119  045C  0220               	subwf	main@tmp^(0+128),w
  2120  045D  1C03               	skipc
  2121  045E  2C48               	goto	l3048
  2122  045F                     l3054:	
  2123                           
  2124                           ;main.c: 83: GPS_Initialize();
  2125  045F  3185  256D  3184   	fcall	_GPS_Initialize
  2126                           
  2127                           ;main.c: 85: speed = 0;
  2128  0462  3000               	movlw	0
  2129  0463  0020               	movlb	0	; select bank0
  2130  0464  00DE               	movwf	_speed+3
  2131  0465  3000               	movlw	0
  2132  0466  00DD               	movwf	_speed+2
  2133  0467  3000               	movlw	0
  2134  0468  00DC               	movwf	_speed+1
  2135  0469  3000               	movlw	0
  2136  046A  00DB               	movwf	_speed
  2137  046B                     l3058:	
  2138                           ;main.c: 87: while (1)
  2139                           
  2140                           
  2141                           ;main.c: 88: {
  2142                           ;main.c: 90: if (GPS_read_speed())
  2143  046B  3180  203F  3184   	fcall	_GPS_read_speed
  2144  046E  3A00               	xorlw	0
  2145  046F  1903               	skipnz
  2146  0470  2CA1               	goto	l3068
  2147                           
  2148                           ;main.c: 91: {
  2149                           ;main.c: 93: if (speed_units == MPH)
  2150  0471  0020               	movlb	0	; select bank0
  2151  0472  086E               	movf	_speed_units,w
  2152  0473  1D03               	btfss	3,2
  2153  0474  2C95               	goto	l3064
  2154                           
  2155                           ;main.c: 94: speed = multiply_fp(speed, ratio_mph);
  2156  0475  085E               	movf	_speed+3,w
  2157  0476  00AF               	movwf	multiply_fp@n1+3
  2158  0477  085D               	movf	_speed+2,w
  2159  0478  00AE               	movwf	multiply_fp@n1+2
  2160  0479  085C               	movf	_speed+1,w
  2161  047A  00AD               	movwf	multiply_fp@n1+1
  2162  047B  085B               	movf	_speed,w
  2163  047C  00AC               	movwf	multiply_fp@n1
  2164  047D  3021               	movlw	low (_ratio_mph| (0+32768))
  2165  047E  0084               	movwf	4
  2166  047F  3085               	movlw	high (_ratio_mph| (0+32768))
  2167  0480  0085               	movwf	5
  2168  0481  3F00               	moviw [0]fsr0
  2169  0482  00B0               	movwf	multiply_fp@n2
  2170  0483  3F01               	moviw [1]fsr0
  2171  0484  00B1               	movwf	multiply_fp@n2+1
  2172  0485  3F02               	moviw [2]fsr0
  2173  0486  00B2               	movwf	multiply_fp@n2+2
  2174  0487  3F03               	moviw [3]fsr0
  2175  0488  00B3               	movwf	multiply_fp@n2+3
  2176  0489  3182  228D  3184   	fcall	_multiply_fp
  2177  048C  0020               	movlb	0	; select bank0
  2178  048D  082F               	movf	?_multiply_fp+3,w
  2179  048E  00DE               	movwf	_speed+3
  2180  048F  082E               	movf	?_multiply_fp+2,w
  2181  0490  00DD               	movwf	_speed+2
  2182  0491  082D               	movf	?_multiply_fp+1,w
  2183  0492  00DC               	movwf	_speed+1
  2184  0493  082C               	movf	?_multiply_fp,w
  2185  0494  00DB               	movwf	_speed
  2186  0495                     l3064:	
  2187                           ;main.c: 96: do { LATA2 = 1; } while(0);
  2188                           
  2189  0495  0022               	movlb	2	; select bank2
  2190  0496  150C               	bsf	12,2	;volatile
  2191                           
  2192                           ;main.c: 97: _delay((unsigned long)((20)*(32000000/4000.0)));
  2193  0497  30D0               	movlw	208
  2194  0498  0020               	movlb	0	; select bank0
  2195  0499  00C9               	movwf	??_main+1
  2196  049A  30C9               	movlw	201
  2197  049B  00C8               	movwf	??_main
  2198  049C                     u3857:	
  2199  049C  0BC8               	decfsz	??_main,f
  2200  049D  2C9C               	goto	u3857
  2201  049E  0BC9               	decfsz	??_main+1,f
  2202  049F  2C9C               	goto	u3857
  2203  04A0  3200               	nop2
  2204  04A1                     l3068:	
  2205                           ;main.c: 98: }
  2206                           ;main.c: 99: do { LATA2 = 0; } while(0);
  2207                           
  2208  04A1  0022               	movlb	2	; select bank2
  2209  04A2  110C               	bcf	12,2	;volatile
  2210  04A3  2C6B               	goto	l3058
  2211  04A4                     __end_of_main:	
  2212                           
  2213                           	psect	text1
  2214  028D                     __ptext1:	
  2215 ;; *************** function _multiply_fp *****************
  2216 ;; Defined at:
  2217 ;;		line 46 in file "fixed_point.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  n1              4   12[BANK0 ] long 
  2220 ;;  n2              4   16[BANK0 ] long 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  res             4   34[BANK0 ] long 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  4   12[BANK0 ] long 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0, pclath, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2232 ;;      Params:         0       8       0       0       0       0
  2233 ;;      Locals:         0       4       0       0       0       0
  2234 ;;      Temps:          0      14       0       0       0       0
  2235 ;;      Totals:         0      26       0       0       0       0
  2236 ;;Total ram usage:       26 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    7
  2239 ;; This function calls:
  2240 ;;		___lmul
  2241 ;; This function is called by:
  2242 ;;		_main
  2243 ;;		_reciprocal_fp
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           
  2248                           ;psect for function _multiply_fp
  2249  028D                     _multiply_fp:	
  2250                           
  2251                           ;fixed_point.c: 50: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  2252                           
  2253                           ;incstack = 0
  2254                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  2255  028D  0020               	movlb	0	; select bank0
  2256  028E  082C               	movf	multiply_fp@n1,w
  2257  028F  00B4               	movwf	??_multiply_fp
  2258  0290  082D               	movf	multiply_fp@n1+1,w
  2259  0291  00B5               	movwf	??_multiply_fp+1
  2260  0292  082E               	movf	multiply_fp@n1+2,w
  2261  0293  00B6               	movwf	??_multiply_fp+2
  2262  0294  082F               	movf	multiply_fp@n1+3,w
  2263  0295  00B7               	movwf	??_multiply_fp+3
  2264  0296  3010               	movlw	16
  2265  0297  00B8               	movwf	??_multiply_fp+4
  2266  0298                     u3595:	
  2267  0298  37B7               	asrf	??_multiply_fp+3,f
  2268  0299  0CB6               	rrf	??_multiply_fp+2,f
  2269  029A  0CB5               	rrf	??_multiply_fp+1,f
  2270  029B  0CB4               	rrf	??_multiply_fp,f
  2271  029C  0BB8               	decfsz	??_multiply_fp+4,f
  2272  029D  2A98               	goto	u3595
  2273  029E  0837               	movf	??_multiply_fp+3,w
  2274  029F  00A3               	movwf	___lmul@multiplier+3
  2275  02A0  0836               	movf	??_multiply_fp+2,w
  2276  02A1  00A2               	movwf	___lmul@multiplier+2
  2277  02A2  0835               	movf	??_multiply_fp+1,w
  2278  02A3  00A1               	movwf	___lmul@multiplier+1
  2279  02A4  0834               	movf	??_multiply_fp,w
  2280  02A5  00A0               	movwf	___lmul@multiplier
  2281  02A6  0830               	movf	multiply_fp@n2,w
  2282  02A7  00B9               	movwf	??_multiply_fp+5
  2283  02A8  0831               	movf	multiply_fp@n2+1,w
  2284  02A9  00BA               	movwf	??_multiply_fp+6
  2285  02AA  0832               	movf	multiply_fp@n2+2,w
  2286  02AB  00BB               	movwf	??_multiply_fp+7
  2287  02AC  0833               	movf	multiply_fp@n2+3,w
  2288  02AD  00BC               	movwf	??_multiply_fp+8
  2289  02AE  3010               	movlw	16
  2290  02AF  00BD               	movwf	??_multiply_fp+9
  2291  02B0                     u3605:	
  2292  02B0  37BC               	asrf	??_multiply_fp+8,f
  2293  02B1  0CBB               	rrf	??_multiply_fp+7,f
  2294  02B2  0CBA               	rrf	??_multiply_fp+6,f
  2295  02B3  0CB9               	rrf	??_multiply_fp+5,f
  2296  02B4  0BBD               	decfsz	??_multiply_fp+9,f
  2297  02B5  2AB0               	goto	u3605
  2298  02B6  083C               	movf	??_multiply_fp+8,w
  2299  02B7  00A7               	movwf	___lmul@multiplicand+3
  2300  02B8  083B               	movf	??_multiply_fp+7,w
  2301  02B9  00A6               	movwf	___lmul@multiplicand+2
  2302  02BA  083A               	movf	??_multiply_fp+6,w
  2303  02BB  00A5               	movwf	___lmul@multiplicand+1
  2304  02BC  0839               	movf	??_multiply_fp+5,w
  2305  02BD  00A4               	movwf	___lmul@multiplicand
  2306  02BE  3185  25B2  3182   	fcall	___lmul
  2307  02C1  0020               	movlb	0	; select bank0
  2308  02C2  0820               	movf	?___lmul,w
  2309  02C3  00BE               	movwf	??_multiply_fp+10
  2310  02C4  0821               	movf	?___lmul+1,w
  2311  02C5  00BF               	movwf	??_multiply_fp+11
  2312  02C6  0822               	movf	?___lmul+2,w
  2313  02C7  00C0               	movwf	??_multiply_fp+12
  2314  02C8  0823               	movf	?___lmul+3,w
  2315  02C9  00C1               	movwf	??_multiply_fp+13
  2316  02CA  3010               	movlw	16
  2317  02CB                     u3615:	
  2318  02CB  35BE               	lslf	??_multiply_fp+10,f
  2319  02CC  0DBF               	rlf	??_multiply_fp+11,f
  2320  02CD  0DC0               	rlf	??_multiply_fp+12,f
  2321  02CE  0DC1               	rlf	??_multiply_fp+13,f
  2322  02CF  0B89               	decfsz	9,f
  2323  02D0  2ACB               	goto	u3615
  2324  02D1  0841               	movf	??_multiply_fp+13,w
  2325  02D2  00C5               	movwf	multiply_fp@res+3
  2326  02D3  0840               	movf	??_multiply_fp+12,w
  2327  02D4  00C4               	movwf	multiply_fp@res+2
  2328  02D5  083F               	movf	??_multiply_fp+11,w
  2329  02D6  00C3               	movwf	multiply_fp@res+1
  2330  02D7  083E               	movf	??_multiply_fp+10,w
  2331  02D8  00C2               	movwf	multiply_fp@res
  2332                           
  2333                           ;fixed_point.c: 51: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  2334  02D9  082C               	movf	multiply_fp@n1,w
  2335  02DA  00B4               	movwf	??_multiply_fp
  2336  02DB  082D               	movf	multiply_fp@n1+1,w
  2337  02DC  00B5               	movwf	??_multiply_fp+1
  2338  02DD  082E               	movf	multiply_fp@n1+2,w
  2339  02DE  00B6               	movwf	??_multiply_fp+2
  2340  02DF  082F               	movf	multiply_fp@n1+3,w
  2341  02E0  00B7               	movwf	??_multiply_fp+3
  2342  02E1  3010               	movlw	16
  2343  02E2  00B8               	movwf	??_multiply_fp+4
  2344  02E3                     u3625:	
  2345  02E3  37B7               	asrf	??_multiply_fp+3,f
  2346  02E4  0CB6               	rrf	??_multiply_fp+2,f
  2347  02E5  0CB5               	rrf	??_multiply_fp+1,f
  2348  02E6  0CB4               	rrf	??_multiply_fp,f
  2349  02E7  0BB8               	decfsz	??_multiply_fp+4,f
  2350  02E8  2AE3               	goto	u3625
  2351  02E9  0837               	movf	??_multiply_fp+3,w
  2352  02EA  00A3               	movwf	___lmul@multiplier+3
  2353  02EB  0836               	movf	??_multiply_fp+2,w
  2354  02EC  00A2               	movwf	___lmul@multiplier+2
  2355  02ED  0835               	movf	??_multiply_fp+1,w
  2356  02EE  00A1               	movwf	___lmul@multiplier+1
  2357  02EF  0834               	movf	??_multiply_fp,w
  2358  02F0  00A0               	movwf	___lmul@multiplier
  2359  02F1  30FF               	movlw	255
  2360  02F2  0530               	andwf	multiply_fp@n2,w
  2361  02F3  00A4               	movwf	___lmul@multiplicand
  2362  02F4  30FF               	movlw	255
  2363  02F5  0531               	andwf	multiply_fp@n2+1,w
  2364  02F6  00A5               	movwf	___lmul@multiplicand+1
  2365  02F7  3000               	movlw	0
  2366  02F8  0532               	andwf	multiply_fp@n2+2,w
  2367  02F9  00A6               	movwf	___lmul@multiplicand+2
  2368  02FA  3000               	movlw	0
  2369  02FB  0533               	andwf	multiply_fp@n2+3,w
  2370  02FC  00A7               	movwf	___lmul@multiplicand+3
  2371  02FD  3185  25B2  3182   	fcall	___lmul
  2372  0300  0020               	movlb	0	; select bank0
  2373  0301  0820               	movf	?___lmul,w
  2374  0302  07C2               	addwf	multiply_fp@res,f
  2375  0303  0821               	movf	?___lmul+1,w
  2376  0304  3DC3               	addwfc	multiply_fp@res+1,f
  2377  0305  0822               	movf	?___lmul+2,w
  2378  0306  3DC4               	addwfc	multiply_fp@res+2,f
  2379  0307  0823               	movf	?___lmul+3,w
  2380  0308  3DC5               	addwfc	multiply_fp@res+3,f
  2381                           
  2382                           ;fixed_point.c: 52: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  2383  0309  0830               	movf	multiply_fp@n2,w
  2384  030A  00B4               	movwf	??_multiply_fp
  2385  030B  0831               	movf	multiply_fp@n2+1,w
  2386  030C  00B5               	movwf	??_multiply_fp+1
  2387  030D  0832               	movf	multiply_fp@n2+2,w
  2388  030E  00B6               	movwf	??_multiply_fp+2
  2389  030F  0833               	movf	multiply_fp@n2+3,w
  2390  0310  00B7               	movwf	??_multiply_fp+3
  2391  0311  3010               	movlw	16
  2392  0312  00B8               	movwf	??_multiply_fp+4
  2393  0313                     u3635:	
  2394  0313  37B7               	asrf	??_multiply_fp+3,f
  2395  0314  0CB6               	rrf	??_multiply_fp+2,f
  2396  0315  0CB5               	rrf	??_multiply_fp+1,f
  2397  0316  0CB4               	rrf	??_multiply_fp,f
  2398  0317  0BB8               	decfsz	??_multiply_fp+4,f
  2399  0318  2B13               	goto	u3635
  2400  0319  0837               	movf	??_multiply_fp+3,w
  2401  031A  00A3               	movwf	___lmul@multiplier+3
  2402  031B  0836               	movf	??_multiply_fp+2,w
  2403  031C  00A2               	movwf	___lmul@multiplier+2
  2404  031D  0835               	movf	??_multiply_fp+1,w
  2405  031E  00A1               	movwf	___lmul@multiplier+1
  2406  031F  0834               	movf	??_multiply_fp,w
  2407  0320  00A0               	movwf	___lmul@multiplier
  2408  0321  30FF               	movlw	255
  2409  0322  052C               	andwf	multiply_fp@n1,w
  2410  0323  00A4               	movwf	___lmul@multiplicand
  2411  0324  30FF               	movlw	255
  2412  0325  052D               	andwf	multiply_fp@n1+1,w
  2413  0326  00A5               	movwf	___lmul@multiplicand+1
  2414  0327  3000               	movlw	0
  2415  0328  052E               	andwf	multiply_fp@n1+2,w
  2416  0329  00A6               	movwf	___lmul@multiplicand+2
  2417  032A  3000               	movlw	0
  2418  032B  052F               	andwf	multiply_fp@n1+3,w
  2419  032C  00A7               	movwf	___lmul@multiplicand+3
  2420  032D  3185  25B2  3182   	fcall	___lmul
  2421  0330  0020               	movlb	0	; select bank0
  2422  0331  0820               	movf	?___lmul,w
  2423  0332  07C2               	addwf	multiply_fp@res,f
  2424  0333  0821               	movf	?___lmul+1,w
  2425  0334  3DC3               	addwfc	multiply_fp@res+1,f
  2426  0335  0822               	movf	?___lmul+2,w
  2427  0336  3DC4               	addwfc	multiply_fp@res+2,f
  2428  0337  0823               	movf	?___lmul+3,w
  2429  0338  3DC5               	addwfc	multiply_fp@res+3,f
  2430                           
  2431                           ;fixed_point.c: 53: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  2432  0339  30FF               	movlw	255
  2433  033A  00B4               	movwf	??_multiply_fp
  2434  033B  30FF               	movlw	255
  2435  033C  00B5               	movwf	??_multiply_fp+1
  2436  033D  3000               	movlw	0
  2437  033E  00B6               	movwf	??_multiply_fp+2
  2438  033F  3000               	movlw	0
  2439  0340  00B7               	movwf	??_multiply_fp+3
  2440  0341  30FF               	movlw	255
  2441  0342  052C               	andwf	multiply_fp@n1,w
  2442  0343  00A0               	movwf	___lmul@multiplier
  2443  0344  30FF               	movlw	255
  2444  0345  052D               	andwf	multiply_fp@n1+1,w
  2445  0346  00A1               	movwf	___lmul@multiplier+1
  2446  0347  3000               	movlw	0
  2447  0348  052E               	andwf	multiply_fp@n1+2,w
  2448  0349  00A2               	movwf	___lmul@multiplier+2
  2449  034A  3000               	movlw	0
  2450  034B  052F               	andwf	multiply_fp@n1+3,w
  2451  034C  00A3               	movwf	___lmul@multiplier+3
  2452  034D  30FF               	movlw	255
  2453  034E  0530               	andwf	multiply_fp@n2,w
  2454  034F  00A4               	movwf	___lmul@multiplicand
  2455  0350  30FF               	movlw	255
  2456  0351  0531               	andwf	multiply_fp@n2+1,w
  2457  0352  00A5               	movwf	___lmul@multiplicand+1
  2458  0353  3000               	movlw	0
  2459  0354  0532               	andwf	multiply_fp@n2+2,w
  2460  0355  00A6               	movwf	___lmul@multiplicand+2
  2461  0356  3000               	movlw	0
  2462  0357  0533               	andwf	multiply_fp@n2+3,w
  2463  0358  00A7               	movwf	___lmul@multiplicand+3
  2464  0359  3185  25B2  3182   	fcall	___lmul
  2465  035C  0020               	movlb	0	; select bank0
  2466  035D  0820               	movf	?___lmul,w
  2467  035E  00B8               	movwf	??_multiply_fp+4
  2468  035F  0821               	movf	?___lmul+1,w
  2469  0360  00B9               	movwf	??_multiply_fp+5
  2470  0361  0822               	movf	?___lmul+2,w
  2471  0362  00BA               	movwf	??_multiply_fp+6
  2472  0363  0823               	movf	?___lmul+3,w
  2473  0364  00BB               	movwf	??_multiply_fp+7
  2474  0365  3010               	movlw	16
  2475  0366  00BC               	movwf	??_multiply_fp+8
  2476  0367                     u3645:	
  2477  0367  37BB               	asrf	??_multiply_fp+7,f
  2478  0368  0CBA               	rrf	??_multiply_fp+6,f
  2479  0369  0CB9               	rrf	??_multiply_fp+5,f
  2480  036A  0CB8               	rrf	??_multiply_fp+4,f
  2481  036B  0BBC               	decfsz	??_multiply_fp+8,f
  2482  036C  2B67               	goto	u3645
  2483  036D  0838               	movf	??_multiply_fp+4,w
  2484  036E  05B4               	andwf	??_multiply_fp,f
  2485  036F  0839               	movf	??_multiply_fp+5,w
  2486  0370  05B5               	andwf	??_multiply_fp+1,f
  2487  0371  083A               	movf	??_multiply_fp+6,w
  2488  0372  05B6               	andwf	??_multiply_fp+2,f
  2489  0373  083B               	movf	??_multiply_fp+7,w
  2490  0374  05B7               	andwf	??_multiply_fp+3,f
  2491  0375  0834               	movf	??_multiply_fp,w
  2492  0376  07C2               	addwf	multiply_fp@res,f
  2493  0377  0835               	movf	??_multiply_fp+1,w
  2494  0378  3DC3               	addwfc	multiply_fp@res+1,f
  2495  0379  0836               	movf	??_multiply_fp+2,w
  2496  037A  3DC4               	addwfc	multiply_fp@res+2,f
  2497  037B  0837               	movf	??_multiply_fp+3,w
  2498  037C  3DC5               	addwfc	multiply_fp@res+3,f
  2499                           
  2500                           ;fixed_point.c: 54: return res;
  2501  037D  0845               	movf	multiply_fp@res+3,w
  2502  037E  00AF               	movwf	?_multiply_fp+3
  2503  037F  0844               	movf	multiply_fp@res+2,w
  2504  0380  00AE               	movwf	?_multiply_fp+2
  2505  0381  0843               	movf	multiply_fp@res+1,w
  2506  0382  00AD               	movwf	?_multiply_fp+1
  2507  0383  0842               	movf	multiply_fp@res,w
  2508  0384  00AC               	movwf	?_multiply_fp
  2509  0385  0008               	return
  2510  0386                     __end_of_multiply_fp:	
  2511                           
  2512                           	psect	text2
  2513  05B2                     __ptext2:	
  2514 ;; *************** function ___lmul *****************
  2515 ;; Defined at:
  2516 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2519 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  product         4    8[BANK0 ] unsigned long 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  4    0[BANK0 ] unsigned long 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2531 ;;      Params:         0       8       0       0       0       0
  2532 ;;      Locals:         0       4       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0
  2534 ;;      Totals:         0      12       0       0       0       0
  2535 ;;Total ram usage:       12 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    6
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_multiply_fp
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           
  2546                           ;psect for function ___lmul
  2547  05B2                     ___lmul:	
  2548                           
  2549                           ;incstack = 0
  2550                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2551  05B2  3000               	movlw	0
  2552  05B3  0020               	movlb	0	; select bank0
  2553  05B4  00AB               	movwf	___lmul@product+3
  2554  05B5  3000               	movlw	0
  2555  05B6  00AA               	movwf	___lmul@product+2
  2556  05B7  3000               	movlw	0
  2557  05B8  00A9               	movwf	___lmul@product+1
  2558  05B9  3000               	movlw	0
  2559  05BA  00A8               	movwf	___lmul@product
  2560  05BB                     l2658:	
  2561  05BB  1C20               	btfss	___lmul@multiplier,0
  2562  05BC  2DC5               	goto	l2662
  2563  05BD  0824               	movf	___lmul@multiplicand,w
  2564  05BE  07A8               	addwf	___lmul@product,f
  2565  05BF  0825               	movf	___lmul@multiplicand+1,w
  2566  05C0  3DA9               	addwfc	___lmul@product+1,f
  2567  05C1  0826               	movf	___lmul@multiplicand+2,w
  2568  05C2  3DAA               	addwfc	___lmul@product+2,f
  2569  05C3  0827               	movf	___lmul@multiplicand+3,w
  2570  05C4  3DAB               	addwfc	___lmul@product+3,f
  2571  05C5                     l2662:	
  2572  05C5  3001               	movlw	1
  2573  05C6                     u2955:	
  2574  05C6  35A4               	lslf	___lmul@multiplicand,f
  2575  05C7  0DA5               	rlf	___lmul@multiplicand+1,f
  2576  05C8  0DA6               	rlf	___lmul@multiplicand+2,f
  2577  05C9  0DA7               	rlf	___lmul@multiplicand+3,f
  2578  05CA  0B89               	decfsz	9,f
  2579  05CB  2DC6               	goto	u2955
  2580  05CC  3001               	movlw	1
  2581  05CD                     u2965:	
  2582  05CD  36A3               	lsrf	___lmul@multiplier+3,f
  2583  05CE  0CA2               	rrf	___lmul@multiplier+2,f
  2584  05CF  0CA1               	rrf	___lmul@multiplier+1,f
  2585  05D0  0CA0               	rrf	___lmul@multiplier,f
  2586  05D1  0B89               	decfsz	9,f
  2587  05D2  2DCD               	goto	u2965
  2588  05D3  0823               	movf	___lmul@multiplier+3,w
  2589  05D4  0422               	iorwf	___lmul@multiplier+2,w
  2590  05D5  0421               	iorwf	___lmul@multiplier+1,w
  2591  05D6  0420               	iorwf	___lmul@multiplier,w
  2592  05D7  1D03               	skipz
  2593  05D8  2DBB               	goto	l2658
  2594  05D9  082B               	movf	___lmul@product+3,w
  2595  05DA  00A3               	movwf	?___lmul+3
  2596  05DB  082A               	movf	___lmul@product+2,w
  2597  05DC  00A2               	movwf	?___lmul+2
  2598  05DD  0829               	movf	___lmul@product+1,w
  2599  05DE  00A1               	movwf	?___lmul+1
  2600  05DF  0828               	movf	___lmul@product,w
  2601  05E0  00A0               	movwf	?___lmul
  2602  05E1  0008               	return
  2603  05E2                     __end_of___lmul:	
  2604                           
  2605                           	psect	text3
  2606  073D                     __ptext3:	
  2607 ;; *************** function _SYSTEM_Initialize *****************
  2608 ;; Defined at:
  2609 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0, pclath, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2623 ;;      Params:         0       0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    8
  2630 ;; This function calls:
  2631 ;;		_EUSART_Initialize
  2632 ;;		_OSCILLATOR_Initialize
  2633 ;;		_PIN_MANAGER_Initialize
  2634 ;;		_TMR0_Initialize
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           
  2641                           ;psect for function _SYSTEM_Initialize
  2642  073D                     _SYSTEM_Initialize:	
  2643                           
  2644                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2645                           
  2646                           ;incstack = 0
  2647                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2648  073D  3186  26FC  3187   	fcall	_PIN_MANAGER_Initialize
  2649                           
  2650                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2651  0740  3187  2760  3187   	fcall	_OSCILLATOR_Initialize
  2652                           
  2653                           ;mcc.c: 74: TMR0_Initialize();
  2654  0743  3187  2713  3187   	fcall	_TMR0_Initialize
  2655                           
  2656                           ;mcc.c: 75: EUSART_Initialize();
  2657  0746  3186  26C6         	fcall	_EUSART_Initialize
  2658  0748  0008               	return
  2659  0749                     __end_of_SYSTEM_Initialize:	
  2660                           
  2661                           	psect	text4
  2662  0713                     __ptext4:	
  2663 ;; *************** function _TMR0_Initialize *****************
  2664 ;; Defined at:
  2665 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0, pclath, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2679 ;;      Params:         0       0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0       0
  2681 ;;      Temps:          0       1       0       0       0       0
  2682 ;;      Totals:         0       1       0       0       0       0
  2683 ;;Total ram usage:        1 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    7
  2686 ;; This function calls:
  2687 ;;		_TMR0_SetInterruptHandler
  2688 ;; This function is called by:
  2689 ;;		_SYSTEM_Initialize
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           
  2694                           ;psect for function _TMR0_Initialize
  2695  0713                     _TMR0_Initialize:	
  2696                           
  2697                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2701  0713  0021               	movlb	1	; select bank1
  2702  0714  0815               	movf	21,w	;volatile
  2703  0715  39C0               	andlw	192
  2704  0716  3817               	iorlw	23
  2705  0717  0095               	movwf	21	;volatile
  2706                           
  2707                           ;tmr0.c: 71: TMR0 = 0x64;
  2708  0718  3064               	movlw	100
  2709  0719  0020               	movlb	0	; select bank0
  2710  071A  0095               	movwf	21	;volatile
  2711                           
  2712                           ;tmr0.c: 74: timer0ReloadVal= 100;
  2713  071B  3064               	movlw	100
  2714  071C  00A2               	movwf	??_TMR0_Initialize
  2715  071D  0822               	movf	??_TMR0_Initialize,w
  2716  071E  00F4               	movwf	_timer0ReloadVal	;volatile
  2717                           
  2718                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  2719  071F  110B               	bcf	11,2	;volatile
  2720                           
  2721                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  2722  0720  168B               	bsf	11,5	;volatile
  2723                           
  2724                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2725  0721  3081               	movlw	low _TMR0_DefaultInterruptHandler
  2726  0722  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2727  0723  3007               	movlw	high _TMR0_DefaultInterruptHandler
  2728  0724  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2729  0725  3187  276E         	fcall	_TMR0_SetInterruptHandler
  2730  0727  0008               	return
  2731  0728                     __end_of_TMR0_Initialize:	
  2732                           
  2733                           	psect	text5
  2734  076E                     __ptext5:	
  2735 ;; *************** function _TMR0_SetInterruptHandler *****************
  2736 ;; Defined at:
  2737 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  2740 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;		None
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2752 ;;      Params:         0       2       0       0       0       0
  2753 ;;      Locals:         0       0       0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0
  2755 ;;      Totals:         0       2       0       0       0       0
  2756 ;;Total ram usage:        2 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    6
  2759 ;; This function calls:
  2760 ;;		Nothing
  2761 ;; This function is called by:
  2762 ;;		_TMR0_Initialize
  2763 ;;		_main
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _TMR0_SetInterruptHandler
  2769  076E                     _TMR0_SetInterruptHandler:	
  2770                           
  2771                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2775  076E  0020               	movlb	0	; select bank0
  2776  076F  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2777  0770  00E2               	movwf	_TMR0_InterruptHandler+1
  2778  0771  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2779  0772  00E1               	movwf	_TMR0_InterruptHandler
  2780  0773  0008               	return
  2781  0774                     __end_of_TMR0_SetInterruptHandler:	
  2782                           
  2783                           	psect	text6
  2784  06FC                     __ptext6:	
  2785 ;; *************** function _PIN_MANAGER_Initialize *****************
  2786 ;; Defined at:
  2787 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;		None
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      void 
  2794 ;; Registers used:
  2795 ;;		wreg, status,2
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2801 ;;      Params:         0       0       0       0       0       0
  2802 ;;      Locals:         0       0       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0
  2804 ;;      Totals:         0       0       0       0       0       0
  2805 ;;Total ram usage:        0 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    6
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_SYSTEM_Initialize
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           
  2816                           ;psect for function _PIN_MANAGER_Initialize
  2817  06FC                     _PIN_MANAGER_Initialize:	
  2818                           
  2819                           ;pin_manager.c: 51: LATB = 0x0;
  2820                           
  2821                           ;incstack = 0
  2822                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2823  06FC  0022               	movlb	2	; select bank2
  2824  06FD  018D               	clrf	13	;volatile
  2825                           
  2826                           ;pin_manager.c: 52: LATA = 0x0;
  2827  06FE  018C               	clrf	12	;volatile
  2828                           
  2829                           ;pin_manager.c: 53: ANSELA = 0x1F;
  2830  06FF  301F               	movlw	31
  2831  0700  0023               	movlb	3	; select bank3
  2832  0701  008C               	movwf	12	;volatile
  2833                           
  2834                           ;pin_manager.c: 54: ANSELB = 0xF8;
  2835  0702  30F8               	movlw	248
  2836  0703  008D               	movwf	13	;volatile
  2837                           
  2838                           ;pin_manager.c: 55: WPUA = 0x20;
  2839  0704  3020               	movlw	32
  2840  0705  0024               	movlb	4	; select bank4
  2841  0706  008C               	movwf	12	;volatile
  2842                           
  2843                           ;pin_manager.c: 56: WPUB = 0xFF;
  2844  0707  30FF               	movlw	255
  2845  0708  008D               	movwf	13	;volatile
  2846                           
  2847                           ;pin_manager.c: 57: TRISB = 0xFF;
  2848  0709  30FF               	movlw	255
  2849  070A  0021               	movlb	1	; select bank1
  2850  070B  008D               	movwf	13	;volatile
  2851                           
  2852                           ;pin_manager.c: 58: TRISA = 0xFB;
  2853  070C  30FB               	movlw	251
  2854  070D  008C               	movwf	12	;volatile
  2855                           
  2856                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  2857  070E  1395               	bcf	21,7	;volatile
  2858                           
  2859                           ;pin_manager.c: 61: APFCON0 = 0x00;
  2860  070F  0022               	movlb	2	; select bank2
  2861  0710  019D               	clrf	29	;volatile
  2862                           
  2863                           ;pin_manager.c: 62: APFCON1 = 0x00;
  2864  0711  019E               	clrf	30	;volatile
  2865  0712  0008               	return
  2866  0713                     __end_of_PIN_MANAGER_Initialize:	
  2867                           
  2868                           	psect	text7
  2869  0760                     __ptext7:	
  2870 ;; *************** function _OSCILLATOR_Initialize *****************
  2871 ;; Defined at:
  2872 ;;		line 78 in file "mcc_generated_files/mcc.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;		None
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2886 ;;      Params:         0       0       0       0       0       0
  2887 ;;      Locals:         0       0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0
  2889 ;;      Totals:         0       0       0       0       0       0
  2890 ;;Total ram usage:        0 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    6
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_SYSTEM_Initialize
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           
  2901                           ;psect for function _OSCILLATOR_Initialize
  2902  0760                     _OSCILLATOR_Initialize:	
  2903                           
  2904                           ;mcc.c: 81: OSCCON = 0x70;
  2905                           
  2906                           ;incstack = 0
  2907                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2908  0760  3070               	movlw	112
  2909  0761  0021               	movlb	1	; select bank1
  2910  0762  0099               	movwf	25	;volatile
  2911                           
  2912                           ;mcc.c: 83: OSCSTAT = 0x00;
  2913  0763  019A               	clrf	26	;volatile
  2914                           
  2915                           ;mcc.c: 85: OSCTUNE = 0x00;
  2916  0764  0198               	clrf	24	;volatile
  2917  0765                     l24:	
  2918                           ;mcc.c: 90: {
  2919                           
  2920                           ;mcc.c: 89: while(PLLR == 0)
  2921                           
  2922  0765  1B1A               	btfsc	26,6	;volatile
  2923  0766  0008               	return
  2924  0767  2F65               	goto	l24
  2925  0768                     __end_of_OSCILLATOR_Initialize:	
  2926                           
  2927                           	psect	text8
  2928  06C6                     __ptext8:	
  2929 ;; *************** function _EUSART_Initialize *****************
  2930 ;; Defined at:
  2931 ;;		line 75 in file "mcc_generated_files/eusart.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2945 ;;      Params:         0       0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0
  2947 ;;      Temps:          0       1       0       0       0       0
  2948 ;;      Totals:         0       1       0       0       0       0
  2949 ;;Total ram usage:        1 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    6
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_SYSTEM_Initialize
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           
  2960                           ;psect for function _EUSART_Initialize
  2961  06C6                     _EUSART_Initialize:	
  2962                           
  2963                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  2964                           
  2965                           ;incstack = 0
  2966                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2967  06C6  0021               	movlb	1	; select bank1
  2968  06C7  1291               	bcf	17,5	;volatile
  2969                           
  2970                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2971  06C8  1211               	bcf	17,4	;volatile
  2972                           
  2973                           ;eusart.c: 84: BAUDCON = 0x08;
  2974  06C9  3008               	movlw	8
  2975  06CA  0023               	movlb	3	; select bank3
  2976  06CB  009F               	movwf	31	;volatile
  2977                           
  2978                           ;eusart.c: 87: RCSTA = 0x90;
  2979  06CC  3090               	movlw	144
  2980  06CD  009D               	movwf	29	;volatile
  2981                           
  2982                           ;eusart.c: 90: TXSTA = 0x24;
  2983  06CE  3024               	movlw	36
  2984  06CF  009E               	movwf	30	;volatile
  2985                           
  2986                           ;eusart.c: 93: SPBRGL = 0x40;
  2987  06D0  3040               	movlw	64
  2988  06D1  009B               	movwf	27	;volatile
  2989                           
  2990                           ;eusart.c: 96: SPBRGH = 0x03;
  2991  06D2  3003               	movlw	3
  2992  06D3  009C               	movwf	28	;volatile
  2993                           
  2994                           ;eusart.c: 100: eusartTxHead = 0;
  2995  06D4  0020               	movlb	0	; select bank0
  2996  06D5  01EC               	clrf	_eusartTxHead
  2997                           
  2998                           ;eusart.c: 101: eusartTxTail = 0;
  2999  06D6  01ED               	clrf	_eusartTxTail
  3000                           
  3001                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3002  06D7  3008               	movlw	8
  3003  06D8  00A0               	movwf	??_EUSART_Initialize
  3004  06D9  0820               	movf	??_EUSART_Initialize,w
  3005  06DA  00EB               	movwf	_eusartTxBufferRemaining	;volatile
  3006                           
  3007                           ;eusart.c: 104: eusartRxHead = 0;
  3008  06DB  01E9               	clrf	_eusartRxHead
  3009                           
  3010                           ;eusart.c: 105: eusartRxTail = 0;
  3011  06DC  01EA               	clrf	_eusartRxTail
  3012                           
  3013                           ;eusart.c: 106: eusartRxCount = 0;
  3014  06DD  01F3               	clrf	_eusartRxCount	;volatile
  3015                           
  3016                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3017  06DE  0021               	movlb	1	; select bank1
  3018  06DF  1691               	bsf	17,5	;volatile
  3019  06E0  0008               	return
  3020  06E1                     __end_of_EUSART_Initialize:	
  3021                           
  3022                           	psect	text9
  3023  062E                     __ptext9:	
  3024 ;; *************** function _LED_set_state *****************
  3025 ;; Defined at:
  3026 ;;		line 16 in file "interact.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  new_state       1    wreg     enum E2901
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  new_state       1    1[BANK0 ] enum E2901
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3040 ;;      Params:         0       0       0       0       0       0
  3041 ;;      Locals:         0       1       0       0       0       0
  3042 ;;      Temps:          0       1       0       0       0       0
  3043 ;;      Totals:         0       2       0       0       0       0
  3044 ;;Total ram usage:        2 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    6
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_main
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _LED_set_state
  3056  062E                     _LED_set_state:	
  3057                           
  3058                           ;incstack = 0
  3059                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  3060                           ;LED_set_state@new_state stored from wreg
  3061  062E  0020               	movlb	0	; select bank0
  3062  062F  00A1               	movwf	LED_set_state@new_state
  3063                           
  3064                           ;interact.c: 18: LED_state = new_state;
  3065  0630  0821               	movf	LED_set_state@new_state,w
  3066  0631  00A0               	movwf	??_LED_set_state
  3067  0632  0820               	movf	??_LED_set_state,w
  3068  0633  00EF               	movwf	_LED_state
  3069                           
  3070                           ;interact.c: 19: if (new_state == always_off)
  3071  0634  0321               	decf	LED_set_state@new_state,w
  3072  0635  1D03               	btfss	3,2
  3073  0636  2E3A               	goto	l2676
  3074                           
  3075                           ;interact.c: 20: do { LATA2 = 0; } while(0);
  3076  0637  0022               	movlb	2	; select bank2
  3077  0638  110C               	bcf	12,2	;volatile
  3078  0639  0008               	return
  3079  063A                     l2676:	
  3080                           
  3081                           ;interact.c: 21: else if (new_state == always_on)
  3082  063A  0020               	movlb	0	; select bank0
  3083  063B  0821               	movf	LED_set_state@new_state,w
  3084  063C  1D03               	btfss	3,2
  3085  063D  2E41               	goto	l2678
  3086                           
  3087                           ;interact.c: 22: do { LATA2 = 1; } while(0);
  3088  063E  0022               	movlb	2	; select bank2
  3089  063F  150C               	bsf	12,2	;volatile
  3090  0640  0008               	return
  3091  0641                     l2678:	
  3092                           
  3093                           ;interact.c: 23: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  3094  0641  3002               	movlw	2
  3095  0642  0020               	movlb	0	; select bank0
  3096  0643  0621               	xorwf	LED_set_state@new_state,w
  3097  0644  1903               	btfsc	3,2
  3098  0645  2E4A               	goto	l333
  3099  0646  3003               	movlw	3
  3100  0647  0621               	xorwf	LED_set_state@new_state,w
  3101  0648  1D03               	btfss	3,2
  3102  0649  0008               	return
  3103  064A                     l333:	
  3104                           ;interact.c: 24: {
  3105                           ;interact.c: 25: do { LATA2 = 1; } while(0);
  3106                           
  3107  064A  0022               	movlb	2	; select bank2
  3108  064B  150C               	bsf	12,2	;volatile
  3109                           
  3110                           ;interact.c: 26: LED_counter = 0;
  3111  064C  0020               	movlb	0	; select bank0
  3112  064D  01E3               	clrf	_LED_counter	;volatile
  3113  064E  0008               	return
  3114  064F                     __end_of_LED_set_state:	
  3115                           
  3116                           	psect	text10
  3117  003F                     __ptext10:	
  3118 ;; *************** function _GPS_read_speed *****************
  3119 ;; Defined at:
  3120 ;;		line 23 in file "GPS.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  buffer          6   31[BANK0 ] unsigned char [6]
  3125 ;;  read_speed_f    2   27[BANK0 ] unsigned short 
  3126 ;;  read_speed_i    2   25[BANK0 ] unsigned short 
  3127 ;;  m_char          1   39[BANK0 ] unsigned char 
  3128 ;;  i_buff          1   38[BANK0 ] unsigned char 
  3129 ;;  i_buff2         1   37[BANK0 ] unsigned char 
  3130 ;;  checksum        1   30[BANK0 ] unsigned char 
  3131 ;;  checksum2       1   29[BANK0 ] unsigned char 
  3132 ;;  no_more_chec    1   24[BANK0 ] unsigned char 
  3133 ;;  before_dot      1   23[BANK0 ] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      unsigned char 
  3136 ;; Registers used:
  3137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3143 ;;      Params:         0       0       0       0       0       0
  3144 ;;      Locals:         0      17       0       0       0       0
  3145 ;;      Temps:          0       2       0       0       0       0
  3146 ;;      Totals:         0      19       0       0       0       0
  3147 ;;Total ram usage:       19 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    7
  3150 ;; This function calls:
  3151 ;;		_EUSART_Read
  3152 ;;		___wmul
  3153 ;;		_convert_to_fp
  3154 ;; This function is called by:
  3155 ;;		_main
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _GPS_read_speed
  3161  003F                     _GPS_read_speed:	
  3162                           
  3163                           ;GPS.c: 27: unsigned char buffer[6];
  3164                           ;GPS.c: 28: unsigned char i_buff = 0;
  3165                           
  3166                           ;incstack = 0
  3167                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3168  003F  0020               	movlb	0	; select bank0
  3169  0040  01C6               	clrf	GPS_read_speed@i_buff
  3170                           
  3171                           ;GPS.c: 29: unsigned char checksum = 0x00;
  3172  0041  01BE               	clrf	GPS_read_speed@checksum
  3173                           
  3174                           ;GPS.c: 31: unsigned char m_char = 0x00;
  3175  0042  01C7               	clrf	GPS_read_speed@m_char
  3176  0043                     l2708:	
  3177                           ;GPS.c: 32: while (m_char != '$')
  3178                           
  3179  0043  3024               	movlw	36
  3180  0044  0647               	xorwf	GPS_read_speed@m_char,w
  3181  0045  1903               	btfsc	3,2
  3182  0046  2852               	goto	l2710
  3183                           
  3184                           ;GPS.c: 33: if(eusartRxCount!=0)
  3185  0047  0873               	movf	_eusartRxCount,w	;volatile
  3186  0048  1903               	btfsc	3,2
  3187  0049  2843               	goto	l2708
  3188                           
  3189                           ;GPS.c: 34: m_char=EUSART_Read();
  3190  004A  3186  264F  3180   	fcall	_EUSART_Read
  3191  004D  0020               	movlb	0	; select bank0
  3192  004E  00B5               	movwf	??_GPS_read_speed
  3193  004F  0835               	movf	??_GPS_read_speed,w
  3194  0050  00C7               	movwf	GPS_read_speed@m_char
  3195  0051  2843               	goto	l2708
  3196  0052                     l2710:	
  3197                           ;GPS.c: 38: while (1)
  3198                           
  3199                           
  3200                           ;GPS.c: 39: if (eusartRxCount!=0)
  3201  0052  0873               	movf	_eusartRxCount,w	;volatile
  3202  0053  1903               	btfsc	3,2
  3203  0054  2852               	goto	l2710
  3204                           
  3205                           ;GPS.c: 40: {
  3206                           ;GPS.c: 41: m_char=EUSART_Read();
  3207  0055  3186  264F  3180   	fcall	_EUSART_Read
  3208  0058  0020               	movlb	0	; select bank0
  3209  0059  00B5               	movwf	??_GPS_read_speed
  3210  005A  0835               	movf	??_GPS_read_speed,w
  3211  005B  00C7               	movwf	GPS_read_speed@m_char
  3212                           
  3213                           ;GPS.c: 42: checksum ^= m_char;
  3214  005C  0847               	movf	GPS_read_speed@m_char,w
  3215  005D  00B5               	movwf	??_GPS_read_speed
  3216  005E  0835               	movf	??_GPS_read_speed,w
  3217  005F  06BE               	xorwf	GPS_read_speed@checksum,f
  3218                           
  3219                           ;GPS.c: 43: if (m_char == ',')
  3220  0060  302C               	movlw	44
  3221  0061  0647               	xorwf	GPS_read_speed@m_char,w
  3222  0062  1903               	btfsc	3,2
  3223  0063  2876               	goto	l2732
  3224                           
  3225                           ;GPS.c: 45: else
  3226                           ;GPS.c: 46: {
  3227                           ;GPS.c: 47: buffer[i_buff++] = m_char;
  3228                           
  3229                           ;GPS.c: 44: break;
  3230  0064  0847               	movf	GPS_read_speed@m_char,w
  3231  0065  00B5               	movwf	??_GPS_read_speed
  3232  0066  0846               	movf	GPS_read_speed@i_buff,w
  3233  0067  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3234  0068  0086               	movwf	6
  3235  0069  0187               	clrf	7
  3236  006A  0835               	movf	??_GPS_read_speed,w
  3237  006B  0081               	movwf	1
  3238  006C  3001               	movlw	1
  3239  006D  00B5               	movwf	??_GPS_read_speed
  3240  006E  0835               	movf	??_GPS_read_speed,w
  3241  006F  07C6               	addwf	GPS_read_speed@i_buff,f
  3242                           
  3243                           ;GPS.c: 48: if (i_buff >= 6)
  3244  0070  3006               	movlw	6
  3245  0071  0246               	subwf	GPS_read_speed@i_buff,w
  3246  0072  1C03               	skipc
  3247  0073  2852               	goto	l2710
  3248                           
  3249                           ;GPS.c: 49: return 0;
  3250  0074  3000               	movlw	0
  3251  0075  0008               	return
  3252  0076                     l2732:	
  3253                           
  3254                           ;GPS.c: 50: }
  3255                           ;GPS.c: 51: }
  3256                           ;GPS.c: 53: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  3257  0076  3047               	movlw	71
  3258  0077  063F               	xorwf	GPS_read_speed@buffer,w
  3259  0078  1D03               	btfss	3,2
  3260  0079  288A               	goto	l2742
  3261  007A  3050               	movlw	80
  3262  007B  0640               	xorwf	GPS_read_speed@buffer+1,w
  3263  007C  1D03               	btfss	3,2
  3264  007D  288A               	goto	l2742
  3265  007E  3056               	movlw	86
  3266  007F  0641               	xorwf	GPS_read_speed@buffer+2,w
  3267  0080  1D03               	btfss	3,2
  3268  0081  288A               	goto	l2742
  3269  0082  3054               	movlw	84
  3270  0083  0642               	xorwf	GPS_read_speed@buffer+3,w
  3271  0084  1D03               	btfss	3,2
  3272  0085  288A               	goto	l2742
  3273  0086  3047               	movlw	71
  3274  0087  0643               	xorwf	GPS_read_speed@buffer+4,w
  3275  0088  1903               	btfsc	3,2
  3276  0089  288C               	goto	l2746
  3277  008A                     l2742:	
  3278                           
  3279                           ;GPS.c: 54: return 0;
  3280  008A  3000               	movlw	0
  3281  008B  0008               	return
  3282  008C                     l2746:	
  3283                           
  3284                           ;GPS.c: 55: i_buff = 0;
  3285  008C  01C6               	clrf	GPS_read_speed@i_buff
  3286  008D                     l2748:	
  3287                           ;GPS.c: 58: while (1)
  3288                           
  3289                           
  3290                           ;GPS.c: 59: if (eusartRxCount!=0)
  3291  008D  0873               	movf	_eusartRxCount,w	;volatile
  3292  008E  1903               	btfsc	3,2
  3293  008F  288D               	goto	l2748
  3294                           
  3295                           ;GPS.c: 60: {
  3296                           ;GPS.c: 61: m_char=EUSART_Read();
  3297  0090  3186  264F  3180   	fcall	_EUSART_Read
  3298  0093  0020               	movlb	0	; select bank0
  3299  0094  00B5               	movwf	??_GPS_read_speed
  3300  0095  0835               	movf	??_GPS_read_speed,w
  3301  0096  00C7               	movwf	GPS_read_speed@m_char
  3302                           
  3303                           ;GPS.c: 62: checksum ^= m_char;
  3304  0097  0847               	movf	GPS_read_speed@m_char,w
  3305  0098  00B5               	movwf	??_GPS_read_speed
  3306  0099  0835               	movf	??_GPS_read_speed,w
  3307  009A  06BE               	xorwf	GPS_read_speed@checksum,f
  3308                           
  3309                           ;GPS.c: 63: if (m_char == ',')
  3310  009B  302C               	movlw	44
  3311  009C  0647               	xorwf	GPS_read_speed@m_char,w
  3312  009D  1D03               	btfss	3,2
  3313  009E  288D               	goto	l2748
  3314  009F                     l2758:	
  3315                           ;GPS.c: 65: }
  3316                           ;GPS.c: 67: while (1)
  3317                           
  3318                           ;GPS.c: 64: break;
  3319                           
  3320                           
  3321                           ;GPS.c: 68: if (eusartRxCount!=0)
  3322  009F  0873               	movf	_eusartRxCount,w	;volatile
  3323  00A0  1903               	btfsc	3,2
  3324  00A1  289F               	goto	l2758
  3325                           
  3326                           ;GPS.c: 69: {
  3327                           ;GPS.c: 70: m_char=EUSART_Read();
  3328  00A2  3186  264F  3180   	fcall	_EUSART_Read
  3329  00A5  0020               	movlb	0	; select bank0
  3330  00A6  00B5               	movwf	??_GPS_read_speed
  3331  00A7  0835               	movf	??_GPS_read_speed,w
  3332  00A8  00C7               	movwf	GPS_read_speed@m_char
  3333                           
  3334                           ;GPS.c: 71: checksum ^= m_char;
  3335  00A9  0847               	movf	GPS_read_speed@m_char,w
  3336  00AA  00B5               	movwf	??_GPS_read_speed
  3337  00AB  0835               	movf	??_GPS_read_speed,w
  3338  00AC  06BE               	xorwf	GPS_read_speed@checksum,f
  3339                           
  3340                           ;GPS.c: 72: if (m_char == ',')
  3341  00AD  302C               	movlw	44
  3342  00AE  0647               	xorwf	GPS_read_speed@m_char,w
  3343  00AF  1903               	btfsc	3,2
  3344  00B0  28C3               	goto	l2780
  3345                           
  3346                           ;GPS.c: 74: else
  3347                           ;GPS.c: 75: {
  3348                           ;GPS.c: 76: buffer[i_buff++] = m_char;
  3349                           
  3350                           ;GPS.c: 73: break;
  3351  00B1  0847               	movf	GPS_read_speed@m_char,w
  3352  00B2  00B5               	movwf	??_GPS_read_speed
  3353  00B3  0846               	movf	GPS_read_speed@i_buff,w
  3354  00B4  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3355  00B5  0086               	movwf	6
  3356  00B6  0187               	clrf	7
  3357  00B7  0835               	movf	??_GPS_read_speed,w
  3358  00B8  0081               	movwf	1
  3359  00B9  3001               	movlw	1
  3360  00BA  00B5               	movwf	??_GPS_read_speed
  3361  00BB  0835               	movf	??_GPS_read_speed,w
  3362  00BC  07C6               	addwf	GPS_read_speed@i_buff,f
  3363                           
  3364                           ;GPS.c: 77: if (i_buff >= 6)
  3365  00BD  3006               	movlw	6
  3366  00BE  0246               	subwf	GPS_read_speed@i_buff,w
  3367  00BF  1C03               	skipc
  3368  00C0  289F               	goto	l2758
  3369                           
  3370                           ;GPS.c: 78: return 0;
  3371  00C1  3000               	movlw	0
  3372  00C2  0008               	return
  3373  00C3                     l2780:	
  3374                           
  3375                           ;GPS.c: 79: }
  3376                           ;GPS.c: 80: }
  3377                           ;GPS.c: 81: if ((buffer[0] != 'T')||(i_buff != 1))
  3378  00C3  3054               	movlw	84
  3379  00C4  063F               	xorwf	GPS_read_speed@buffer,w
  3380  00C5  1903               	btfsc	3,2
  3381  00C6  0346               	decf	GPS_read_speed@i_buff,w
  3382  00C7  1903               	btfsc	3,2
  3383  00C8  28CB               	goto	l2788
  3384                           
  3385                           ;GPS.c: 82: return 0;
  3386  00C9  3000               	movlw	0
  3387  00CA  0008               	return
  3388  00CB                     l2788:	
  3389                           
  3390                           ;GPS.c: 83: i_buff = 0;
  3391  00CB  01C6               	clrf	GPS_read_speed@i_buff
  3392  00CC                     l2790:	
  3393                           ;GPS.c: 86: while (1)
  3394                           
  3395                           
  3396                           ;GPS.c: 87: if (eusartRxCount!=0)
  3397  00CC  0873               	movf	_eusartRxCount,w	;volatile
  3398  00CD  1903               	btfsc	3,2
  3399  00CE  28CC               	goto	l2790
  3400                           
  3401                           ;GPS.c: 88: {
  3402                           ;GPS.c: 89: m_char=EUSART_Read();
  3403  00CF  3186  264F  3180   	fcall	_EUSART_Read
  3404  00D2  0020               	movlb	0	; select bank0
  3405  00D3  00B5               	movwf	??_GPS_read_speed
  3406  00D4  0835               	movf	??_GPS_read_speed,w
  3407  00D5  00C7               	movwf	GPS_read_speed@m_char
  3408                           
  3409                           ;GPS.c: 90: checksum ^= m_char;
  3410  00D6  0847               	movf	GPS_read_speed@m_char,w
  3411  00D7  00B5               	movwf	??_GPS_read_speed
  3412  00D8  0835               	movf	??_GPS_read_speed,w
  3413  00D9  06BE               	xorwf	GPS_read_speed@checksum,f
  3414                           
  3415                           ;GPS.c: 91: if (m_char == ',')
  3416  00DA  302C               	movlw	44
  3417  00DB  0647               	xorwf	GPS_read_speed@m_char,w
  3418  00DC  1D03               	btfss	3,2
  3419  00DD  28CC               	goto	l2790
  3420  00DE                     l2800:	
  3421                           ;GPS.c: 93: }
  3422                           ;GPS.c: 95: while (1)
  3423                           
  3424                           ;GPS.c: 92: break;
  3425                           
  3426                           
  3427                           ;GPS.c: 96: if (eusartRxCount!=0)
  3428  00DE  0873               	movf	_eusartRxCount,w	;volatile
  3429  00DF  1903               	btfsc	3,2
  3430  00E0  28DE               	goto	l2800
  3431                           
  3432                           ;GPS.c: 97: {
  3433                           ;GPS.c: 98: m_char=EUSART_Read();
  3434  00E1  3186  264F  3180   	fcall	_EUSART_Read
  3435  00E4  0020               	movlb	0	; select bank0
  3436  00E5  00B5               	movwf	??_GPS_read_speed
  3437  00E6  0835               	movf	??_GPS_read_speed,w
  3438  00E7  00C7               	movwf	GPS_read_speed@m_char
  3439                           
  3440                           ;GPS.c: 99: checksum ^= m_char;
  3441  00E8  0847               	movf	GPS_read_speed@m_char,w
  3442  00E9  00B5               	movwf	??_GPS_read_speed
  3443  00EA  0835               	movf	??_GPS_read_speed,w
  3444  00EB  06BE               	xorwf	GPS_read_speed@checksum,f
  3445                           
  3446                           ;GPS.c: 100: if (m_char == ',')
  3447  00EC  302C               	movlw	44
  3448  00ED  0647               	xorwf	GPS_read_speed@m_char,w
  3449  00EE  1903               	btfsc	3,2
  3450  00EF  2902               	goto	l2822
  3451                           
  3452                           ;GPS.c: 102: else
  3453                           ;GPS.c: 103: {
  3454                           ;GPS.c: 104: buffer[i_buff++] = m_char;
  3455                           
  3456                           ;GPS.c: 101: break;
  3457  00F0  0847               	movf	GPS_read_speed@m_char,w
  3458  00F1  00B5               	movwf	??_GPS_read_speed
  3459  00F2  0846               	movf	GPS_read_speed@i_buff,w
  3460  00F3  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3461  00F4  0086               	movwf	6
  3462  00F5  0187               	clrf	7
  3463  00F6  0835               	movf	??_GPS_read_speed,w
  3464  00F7  0081               	movwf	1
  3465  00F8  3001               	movlw	1
  3466  00F9  00B5               	movwf	??_GPS_read_speed
  3467  00FA  0835               	movf	??_GPS_read_speed,w
  3468  00FB  07C6               	addwf	GPS_read_speed@i_buff,f
  3469                           
  3470                           ;GPS.c: 105: if (i_buff >= 6)
  3471  00FC  3006               	movlw	6
  3472  00FD  0246               	subwf	GPS_read_speed@i_buff,w
  3473  00FE  1C03               	skipc
  3474  00FF  28DE               	goto	l2800
  3475                           
  3476                           ;GPS.c: 106: return 0;
  3477  0100  3000               	movlw	0
  3478  0101  0008               	return
  3479  0102                     l2822:	
  3480                           
  3481                           ;GPS.c: 107: }
  3482                           ;GPS.c: 108: }
  3483                           ;GPS.c: 109: if ((buffer[0] != 'M')||(i_buff != 1))
  3484  0102  304D               	movlw	77
  3485  0103  063F               	xorwf	GPS_read_speed@buffer,w
  3486  0104  1903               	btfsc	3,2
  3487  0105  0346               	decf	GPS_read_speed@i_buff,w
  3488  0106  1903               	btfsc	3,2
  3489  0107  290A               	goto	l2830
  3490                           
  3491                           ;GPS.c: 110: return 0;
  3492  0108  3000               	movlw	0
  3493  0109  0008               	return
  3494  010A                     l2830:	
  3495                           
  3496                           ;GPS.c: 111: i_buff = 0;
  3497  010A  01C6               	clrf	GPS_read_speed@i_buff
  3498  010B                     l2832:	
  3499                           ;GPS.c: 114: while (1)
  3500                           
  3501                           
  3502                           ;GPS.c: 115: if (eusartRxCount!=0)
  3503  010B  0873               	movf	_eusartRxCount,w	;volatile
  3504  010C  1903               	btfsc	3,2
  3505  010D  290B               	goto	l2832
  3506                           
  3507                           ;GPS.c: 116: {
  3508                           ;GPS.c: 117: m_char=EUSART_Read();
  3509  010E  3186  264F  3180   	fcall	_EUSART_Read
  3510  0111  0020               	movlb	0	; select bank0
  3511  0112  00B5               	movwf	??_GPS_read_speed
  3512  0113  0835               	movf	??_GPS_read_speed,w
  3513  0114  00C7               	movwf	GPS_read_speed@m_char
  3514                           
  3515                           ;GPS.c: 118: checksum ^= m_char;
  3516  0115  0847               	movf	GPS_read_speed@m_char,w
  3517  0116  00B5               	movwf	??_GPS_read_speed
  3518  0117  0835               	movf	??_GPS_read_speed,w
  3519  0118  06BE               	xorwf	GPS_read_speed@checksum,f
  3520                           
  3521                           ;GPS.c: 119: if (m_char == ',')
  3522  0119  302C               	movlw	44
  3523  011A  0647               	xorwf	GPS_read_speed@m_char,w
  3524  011B  1D03               	btfss	3,2
  3525  011C  290B               	goto	l2832
  3526  011D                     l2842:	
  3527                           ;GPS.c: 121: }
  3528                           ;GPS.c: 123: while (1)
  3529                           
  3530                           ;GPS.c: 120: break;
  3531                           
  3532                           
  3533                           ;GPS.c: 124: if (eusartRxCount!=0)
  3534  011D  0873               	movf	_eusartRxCount,w	;volatile
  3535  011E  1903               	btfsc	3,2
  3536  011F  291D               	goto	l2842
  3537                           
  3538                           ;GPS.c: 125: {
  3539                           ;GPS.c: 126: m_char=EUSART_Read();
  3540  0120  3186  264F  3180   	fcall	_EUSART_Read
  3541  0123  0020               	movlb	0	; select bank0
  3542  0124  00B5               	movwf	??_GPS_read_speed
  3543  0125  0835               	movf	??_GPS_read_speed,w
  3544  0126  00C7               	movwf	GPS_read_speed@m_char
  3545                           
  3546                           ;GPS.c: 127: checksum ^= m_char;
  3547  0127  0847               	movf	GPS_read_speed@m_char,w
  3548  0128  00B5               	movwf	??_GPS_read_speed
  3549  0129  0835               	movf	??_GPS_read_speed,w
  3550  012A  06BE               	xorwf	GPS_read_speed@checksum,f
  3551                           
  3552                           ;GPS.c: 128: if (m_char == ',')
  3553  012B  302C               	movlw	44
  3554  012C  0647               	xorwf	GPS_read_speed@m_char,w
  3555  012D  1903               	btfsc	3,2
  3556  012E  2941               	goto	l2864
  3557                           
  3558                           ;GPS.c: 130: else
  3559                           ;GPS.c: 131: {
  3560                           ;GPS.c: 132: buffer[i_buff++] = m_char;
  3561                           
  3562                           ;GPS.c: 129: break;
  3563  012F  0847               	movf	GPS_read_speed@m_char,w
  3564  0130  00B5               	movwf	??_GPS_read_speed
  3565  0131  0846               	movf	GPS_read_speed@i_buff,w
  3566  0132  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3567  0133  0086               	movwf	6
  3568  0134  0187               	clrf	7
  3569  0135  0835               	movf	??_GPS_read_speed,w
  3570  0136  0081               	movwf	1
  3571  0137  3001               	movlw	1
  3572  0138  00B5               	movwf	??_GPS_read_speed
  3573  0139  0835               	movf	??_GPS_read_speed,w
  3574  013A  07C6               	addwf	GPS_read_speed@i_buff,f
  3575                           
  3576                           ;GPS.c: 133: if (i_buff >= 6)
  3577  013B  3006               	movlw	6
  3578  013C  0246               	subwf	GPS_read_speed@i_buff,w
  3579  013D  1C03               	skipc
  3580  013E  291D               	goto	l2842
  3581                           
  3582                           ;GPS.c: 134: return 0;
  3583  013F  3000               	movlw	0
  3584  0140  0008               	return
  3585  0141                     l2864:	
  3586                           
  3587                           ;GPS.c: 135: }
  3588                           ;GPS.c: 136: }
  3589                           ;GPS.c: 137: if ((buffer[0] != 'N')||(i_buff != 1))
  3590  0141  304E               	movlw	78
  3591  0142  063F               	xorwf	GPS_read_speed@buffer,w
  3592  0143  1903               	btfsc	3,2
  3593  0144  0346               	decf	GPS_read_speed@i_buff,w
  3594  0145  1903               	btfsc	3,2
  3595  0146  2949               	goto	l2872
  3596                           
  3597                           ;GPS.c: 138: return 0;
  3598  0147  3000               	movlw	0
  3599  0148  0008               	return
  3600  0149                     l2872:	
  3601                           
  3602                           ;GPS.c: 139: i_buff = 0;
  3603  0149  01C6               	clrf	GPS_read_speed@i_buff
  3604  014A                     l2874:	
  3605                           ;GPS.c: 142: while (1)
  3606                           
  3607                           
  3608                           ;GPS.c: 143: if (eusartRxCount!=0)
  3609  014A  0873               	movf	_eusartRxCount,w	;volatile
  3610  014B  1903               	btfsc	3,2
  3611  014C  294A               	goto	l2874
  3612                           
  3613                           ;GPS.c: 144: {
  3614                           ;GPS.c: 145: m_char=EUSART_Read();
  3615  014D  3186  264F  3180   	fcall	_EUSART_Read
  3616  0150  0020               	movlb	0	; select bank0
  3617  0151  00B5               	movwf	??_GPS_read_speed
  3618  0152  0835               	movf	??_GPS_read_speed,w
  3619  0153  00C7               	movwf	GPS_read_speed@m_char
  3620                           
  3621                           ;GPS.c: 146: checksum ^= m_char;
  3622  0154  0847               	movf	GPS_read_speed@m_char,w
  3623  0155  00B5               	movwf	??_GPS_read_speed
  3624  0156  0835               	movf	??_GPS_read_speed,w
  3625  0157  06BE               	xorwf	GPS_read_speed@checksum,f
  3626                           
  3627                           ;GPS.c: 147: if (m_char == ',')
  3628  0158  302C               	movlw	44
  3629  0159  0647               	xorwf	GPS_read_speed@m_char,w
  3630  015A  1903               	btfsc	3,2
  3631  015B  296E               	goto	l2896
  3632                           
  3633                           ;GPS.c: 149: else
  3634                           ;GPS.c: 150: {
  3635                           ;GPS.c: 151: buffer[i_buff++] = m_char;
  3636                           
  3637                           ;GPS.c: 148: break;
  3638  015C  0847               	movf	GPS_read_speed@m_char,w
  3639  015D  00B5               	movwf	??_GPS_read_speed
  3640  015E  0846               	movf	GPS_read_speed@i_buff,w
  3641  015F  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3642  0160  0086               	movwf	6
  3643  0161  0187               	clrf	7
  3644  0162  0835               	movf	??_GPS_read_speed,w
  3645  0163  0081               	movwf	1
  3646  0164  3001               	movlw	1
  3647  0165  00B5               	movwf	??_GPS_read_speed
  3648  0166  0835               	movf	??_GPS_read_speed,w
  3649  0167  07C6               	addwf	GPS_read_speed@i_buff,f
  3650                           
  3651                           ;GPS.c: 152: if (i_buff >= 6)
  3652  0168  3006               	movlw	6
  3653  0169  0246               	subwf	GPS_read_speed@i_buff,w
  3654  016A  1C03               	skipc
  3655  016B  294A               	goto	l2874
  3656                           
  3657                           ;GPS.c: 153: return 0;
  3658  016C  3000               	movlw	0
  3659  016D  0008               	return
  3660  016E                     l2896:	
  3661                           
  3662                           ;GPS.c: 154: }
  3663                           ;GPS.c: 155: }
  3664                           ;GPS.c: 158: unsigned char i_buff2 = 0;
  3665  016E  01C5               	clrf	GPS_read_speed@i_buff2
  3666                           
  3667                           ;GPS.c: 159: unsigned short read_speed_int=0;
  3668  016F  01B9               	clrf	GPS_read_speed@read_speed_int
  3669  0170  01BA               	clrf	GPS_read_speed@read_speed_int+1
  3670                           
  3671                           ;GPS.c: 160: unsigned short read_speed_fra=0;
  3672  0171  01BB               	clrf	GPS_read_speed@read_speed_fra
  3673  0172  01BC               	clrf	GPS_read_speed@read_speed_fra+1
  3674                           
  3675                           ;GPS.c: 161: bool before_dot = 1;
  3676  0173  01B7               	clrf	GPS_read_speed@before_dot
  3677  0174  0AB7               	incf	GPS_read_speed@before_dot,f
  3678  0175                     l2924:	
  3679                           ;GPS.c: 162: while (i_buff2 < i_buff)
  3680                           
  3681  0175  0846               	movf	GPS_read_speed@i_buff,w
  3682  0176  0245               	subwf	GPS_read_speed@i_buff2,w
  3683  0177  1803               	btfsc	3,0
  3684  0178  29D8               	goto	l2926
  3685                           
  3686                           ;GPS.c: 163: if (buffer[i_buff2]=='.')
  3687  0179  0845               	movf	GPS_read_speed@i_buff2,w
  3688  017A  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3689  017B  0086               	movwf	6
  3690  017C  0187               	clrf	7
  3691  017D  302E               	movlw	46
  3692  017E  0601               	xorwf	1,w
  3693  017F  1D03               	btfss	3,2
  3694  0180  2983               	goto	l2906
  3695                           
  3696                           ;GPS.c: 164: {
  3697                           ;GPS.c: 165: before_dot = 0;
  3698  0181  01B7               	clrf	GPS_read_speed@before_dot
  3699  0182  29D3               	goto	l2922
  3700  0183                     l2906:	
  3701                           ;GPS.c: 167: }
  3702                           
  3703                           ;GPS.c: 166: i_buff2++;
  3704                           
  3705                           
  3706                           ;GPS.c: 168: else
  3707                           ;GPS.c: 169: {
  3708                           ;GPS.c: 170: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  3709  0183  0845               	movf	GPS_read_speed@i_buff2,w
  3710  0184  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3711  0185  0086               	movwf	6
  3712  0186  0187               	clrf	7
  3713  0187  3030               	movlw	48
  3714  0188  0201               	subwf	1,w
  3715  0189  1C03               	skipc
  3716  018A  2993               	goto	l2910
  3717  018B  0845               	movf	GPS_read_speed@i_buff2,w
  3718  018C  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3719  018D  0086               	movwf	6
  3720  018E  0187               	clrf	7
  3721  018F  303A               	movlw	58
  3722  0190  0201               	subwf	1,w
  3723  0191  1C03               	skipc
  3724  0192  2995               	goto	l2916
  3725  0193                     l2910:	
  3726                           
  3727                           ;GPS.c: 171: return 0;
  3728  0193  3000               	movlw	0
  3729  0194  0008               	return
  3730  0195                     l2916:	
  3731                           
  3732                           ;GPS.c: 172: else
  3733                           ;GPS.c: 173: {
  3734                           ;GPS.c: 174: if (before_dot)
  3735  0195  0837               	movf	GPS_read_speed@before_dot,w
  3736  0196  1903               	btfsc	3,2
  3737  0197  29B6               	goto	l2920
  3738                           
  3739                           ;GPS.c: 175: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  3740  0198  083A               	movf	GPS_read_speed@read_speed_int+1,w
  3741  0199  00A1               	movwf	___wmul@multiplier+1
  3742  019A  0839               	movf	GPS_read_speed@read_speed_int,w
  3743  019B  00A0               	movwf	___wmul@multiplier
  3744  019C  300A               	movlw	10
  3745  019D  00A2               	movwf	___wmul@multiplicand
  3746  019E  3000               	movlw	0
  3747  019F  00A3               	movwf	___wmul@multiplicand+1
  3748  01A0  3186  26AA  3180   	fcall	___wmul
  3749  01A3  0020               	movlb	0	; select bank0
  3750  01A4  0845               	movf	GPS_read_speed@i_buff2,w
  3751  01A5  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3752  01A6  0086               	movwf	6
  3753  01A7  0187               	clrf	7
  3754  01A8  0801               	movf	1,w
  3755  01A9  0720               	addwf	?___wmul,w
  3756  01AA  00B5               	movwf	??_GPS_read_speed
  3757  01AB  0821               	movf	?___wmul+1,w
  3758  01AC  1803               	skipnc
  3759  01AD  0A21               	incf	?___wmul+1,w
  3760  01AE  00B6               	movwf	??_GPS_read_speed+1
  3761  01AF  0835               	movf	??_GPS_read_speed,w
  3762  01B0  3ED0               	addlw	208
  3763  01B1  00B9               	movwf	GPS_read_speed@read_speed_int
  3764  01B2  30FF               	movlw	255
  3765  01B3  3D36               	addwfc	??_GPS_read_speed+1,w
  3766  01B4  00BA               	movwf	GPS_read_speed@read_speed_int+1
  3767  01B5  29D3               	goto	l2922
  3768  01B6                     l2920:	
  3769                           
  3770                           ;GPS.c: 176: else
  3771                           ;GPS.c: 177: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  3772  01B6  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  3773  01B7  00A1               	movwf	___wmul@multiplier+1
  3774  01B8  083B               	movf	GPS_read_speed@read_speed_fra,w
  3775  01B9  00A0               	movwf	___wmul@multiplier
  3776  01BA  300A               	movlw	10
  3777  01BB  00A2               	movwf	___wmul@multiplicand
  3778  01BC  3000               	movlw	0
  3779  01BD  00A3               	movwf	___wmul@multiplicand+1
  3780  01BE  3186  26AA  3180   	fcall	___wmul
  3781  01C1  0020               	movlb	0	; select bank0
  3782  01C2  0845               	movf	GPS_read_speed@i_buff2,w
  3783  01C3  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3784  01C4  0086               	movwf	6
  3785  01C5  0187               	clrf	7
  3786  01C6  0801               	movf	1,w
  3787  01C7  0720               	addwf	?___wmul,w
  3788  01C8  00B5               	movwf	??_GPS_read_speed
  3789  01C9  0821               	movf	?___wmul+1,w
  3790  01CA  1803               	skipnc
  3791  01CB  0A21               	incf	?___wmul+1,w
  3792  01CC  00B6               	movwf	??_GPS_read_speed+1
  3793  01CD  0835               	movf	??_GPS_read_speed,w
  3794  01CE  3ED0               	addlw	208
  3795  01CF  00BB               	movwf	GPS_read_speed@read_speed_fra
  3796  01D0  30FF               	movlw	255
  3797  01D1  3D36               	addwfc	??_GPS_read_speed+1,w
  3798  01D2  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  3799  01D3                     l2922:	
  3800                           
  3801                           ;GPS.c: 178: i_buff2++;
  3802  01D3  3001               	movlw	1
  3803  01D4  00B5               	movwf	??_GPS_read_speed
  3804  01D5  0835               	movf	??_GPS_read_speed,w
  3805  01D6  07C5               	addwf	GPS_read_speed@i_buff2,f
  3806  01D7  2975               	goto	l2924
  3807  01D8                     l2926:	
  3808                           
  3809                           ;GPS.c: 179: }
  3810                           ;GPS.c: 180: }
  3811                           ;GPS.c: 184: read_speed_fra *= 100;
  3812  01D8  3064               	movlw	100
  3813  01D9  00A0               	movwf	___wmul@multiplier
  3814  01DA  3000               	movlw	0
  3815  01DB  00A1               	movwf	___wmul@multiplier+1
  3816  01DC  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  3817  01DD  00A3               	movwf	___wmul@multiplicand+1
  3818  01DE  083B               	movf	GPS_read_speed@read_speed_fra,w
  3819  01DF  00A2               	movwf	___wmul@multiplicand
  3820  01E0  3186  26AA  3180   	fcall	___wmul
  3821  01E3  0020               	movlb	0	; select bank0
  3822  01E4  0821               	movf	?___wmul+1,w
  3823  01E5  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  3824  01E6  0820               	movf	?___wmul,w
  3825  01E7  00BB               	movwf	GPS_read_speed@read_speed_fra
  3826                           
  3827                           ;GPS.c: 187: i_buff = 0;
  3828  01E8  01C6               	clrf	GPS_read_speed@i_buff
  3829  01E9                     l2930:	
  3830                           ;GPS.c: 190: while (1)
  3831                           
  3832                           
  3833                           ;GPS.c: 191: if (eusartRxCount!=0)
  3834  01E9  0873               	movf	_eusartRxCount,w	;volatile
  3835  01EA  1903               	btfsc	3,2
  3836  01EB  29E9               	goto	l2930
  3837                           
  3838                           ;GPS.c: 192: {
  3839                           ;GPS.c: 193: m_char=EUSART_Read();
  3840  01EC  3186  264F  3180   	fcall	_EUSART_Read
  3841  01EF  0020               	movlb	0	; select bank0
  3842  01F0  00B5               	movwf	??_GPS_read_speed
  3843  01F1  0835               	movf	??_GPS_read_speed,w
  3844  01F2  00C7               	movwf	GPS_read_speed@m_char
  3845                           
  3846                           ;GPS.c: 194: checksum ^= m_char;
  3847  01F3  0847               	movf	GPS_read_speed@m_char,w
  3848  01F4  00B5               	movwf	??_GPS_read_speed
  3849  01F5  0835               	movf	??_GPS_read_speed,w
  3850  01F6  06BE               	xorwf	GPS_read_speed@checksum,f
  3851                           
  3852                           ;GPS.c: 195: if (m_char == ',')
  3853  01F7  302C               	movlw	44
  3854  01F8  0647               	xorwf	GPS_read_speed@m_char,w
  3855  01F9  1903               	btfsc	3,2
  3856  01FA  2A0D               	goto	l2952
  3857                           
  3858                           ;GPS.c: 197: else
  3859                           ;GPS.c: 198: {
  3860                           ;GPS.c: 199: buffer[i_buff++] = m_char;
  3861                           
  3862                           ;GPS.c: 196: break;
  3863  01FB  0847               	movf	GPS_read_speed@m_char,w
  3864  01FC  00B5               	movwf	??_GPS_read_speed
  3865  01FD  0846               	movf	GPS_read_speed@i_buff,w
  3866  01FE  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3867  01FF  0086               	movwf	6
  3868  0200  0187               	clrf	7
  3869  0201  0835               	movf	??_GPS_read_speed,w
  3870  0202  0081               	movwf	1
  3871  0203  3001               	movlw	1
  3872  0204  00B5               	movwf	??_GPS_read_speed
  3873  0205  0835               	movf	??_GPS_read_speed,w
  3874  0206  07C6               	addwf	GPS_read_speed@i_buff,f
  3875                           
  3876                           ;GPS.c: 200: if (i_buff >= 6)
  3877  0207  3006               	movlw	6
  3878  0208  0246               	subwf	GPS_read_speed@i_buff,w
  3879  0209  1C03               	skipc
  3880  020A  29E9               	goto	l2930
  3881                           
  3882                           ;GPS.c: 201: return 0;
  3883  020B  3000               	movlw	0
  3884  020C  0008               	return
  3885  020D                     l2952:	
  3886                           
  3887                           ;GPS.c: 202: }
  3888                           ;GPS.c: 203: }
  3889                           ;GPS.c: 204: if ((buffer[0] != 'K')||(i_buff != 1))
  3890  020D  304B               	movlw	75
  3891  020E  063F               	xorwf	GPS_read_speed@buffer,w
  3892  020F  1903               	btfsc	3,2
  3893  0210  0346               	decf	GPS_read_speed@i_buff,w
  3894  0211  1903               	btfsc	3,2
  3895  0212  2A15               	goto	l2960
  3896                           
  3897                           ;GPS.c: 205: return 0;
  3898  0213  3000               	movlw	0
  3899  0214  0008               	return
  3900  0215                     l2960:	
  3901                           
  3902                           ;GPS.c: 206: i_buff = 0;
  3903  0215  01C6               	clrf	GPS_read_speed@i_buff
  3904                           
  3905                           ;GPS.c: 209: bool no_more_checksum = 0;
  3906  0216  01B8               	clrf	GPS_read_speed@no_more_checksum
  3907  0217                     l2962:	
  3908                           ;GPS.c: 210: while (1)
  3909                           
  3910                           
  3911                           ;GPS.c: 211: if (eusartRxCount!=0)
  3912  0217  0873               	movf	_eusartRxCount,w	;volatile
  3913  0218  1903               	btfsc	3,2
  3914  0219  2A17               	goto	l2962
  3915                           
  3916                           ;GPS.c: 212: {
  3917                           ;GPS.c: 213: m_char=EUSART_Read();
  3918  021A  3186  264F  3180   	fcall	_EUSART_Read
  3919  021D  0020               	movlb	0	; select bank0
  3920  021E  00B5               	movwf	??_GPS_read_speed
  3921  021F  0835               	movf	??_GPS_read_speed,w
  3922  0220  00C7               	movwf	GPS_read_speed@m_char
  3923                           
  3924                           ;GPS.c: 214: if (m_char == '*')
  3925  0221  302A               	movlw	42
  3926  0222  0647               	xorwf	GPS_read_speed@m_char,w
  3927  0223  1D03               	btfss	3,2
  3928  0224  2A27               	goto	l2970
  3929                           
  3930                           ;GPS.c: 215: no_more_checksum = 1;
  3931  0225  01B8               	clrf	GPS_read_speed@no_more_checksum
  3932  0226  0AB8               	incf	GPS_read_speed@no_more_checksum,f
  3933  0227                     l2970:	
  3934                           
  3935                           ;GPS.c: 216: if (!no_more_checksum)
  3936  0227  0838               	movf	GPS_read_speed@no_more_checksum,w
  3937  0228  1D03               	btfss	3,2
  3938  0229  2A2E               	goto	l488
  3939                           
  3940                           ;GPS.c: 217: checksum ^= m_char;
  3941  022A  0847               	movf	GPS_read_speed@m_char,w
  3942  022B  00B5               	movwf	??_GPS_read_speed
  3943  022C  0835               	movf	??_GPS_read_speed,w
  3944  022D  06BE               	xorwf	GPS_read_speed@checksum,f
  3945  022E                     l488:	
  3946                           
  3947                           ;GPS.c: 218: if (m_char == 0x0D)
  3948  022E  300D               	movlw	13
  3949  022F  0647               	xorwf	GPS_read_speed@m_char,w
  3950  0230  1903               	btfsc	3,2
  3951  0231  2A44               	goto	l2988
  3952                           
  3953                           ;GPS.c: 220: else
  3954                           ;GPS.c: 221: {
  3955                           ;GPS.c: 222: buffer[i_buff++] = m_char;
  3956                           
  3957                           ;GPS.c: 219: break;
  3958  0232  0847               	movf	GPS_read_speed@m_char,w
  3959  0233  00B5               	movwf	??_GPS_read_speed
  3960  0234  0846               	movf	GPS_read_speed@i_buff,w
  3961  0235  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3962  0236  0086               	movwf	6
  3963  0237  0187               	clrf	7
  3964  0238  0835               	movf	??_GPS_read_speed,w
  3965  0239  0081               	movwf	1
  3966  023A  3001               	movlw	1
  3967  023B  00B5               	movwf	??_GPS_read_speed
  3968  023C  0835               	movf	??_GPS_read_speed,w
  3969  023D  07C6               	addwf	GPS_read_speed@i_buff,f
  3970                           
  3971                           ;GPS.c: 223: if (i_buff >= 6)
  3972  023E  3006               	movlw	6
  3973  023F  0246               	subwf	GPS_read_speed@i_buff,w
  3974  0240  1C03               	skipc
  3975  0241  2A17               	goto	l2962
  3976                           
  3977                           ;GPS.c: 224: return 0;
  3978  0242  3000               	movlw	0
  3979  0243  0008               	return
  3980  0244                     l2988:	
  3981                           
  3982                           ;GPS.c: 225: }
  3983                           ;GPS.c: 226: }
  3984                           ;GPS.c: 227: if ((buffer[1] != '*')||(i_buff != 4))
  3985  0244  302A               	movlw	42
  3986  0245  0640               	xorwf	GPS_read_speed@buffer+1,w
  3987  0246  1D03               	btfss	3,2
  3988  0247  2A4C               	goto	l2992
  3989  0248  3004               	movlw	4
  3990  0249  0646               	xorwf	GPS_read_speed@i_buff,w
  3991  024A  1903               	btfsc	3,2
  3992  024B  2A4E               	goto	l2996
  3993  024C                     l2992:	
  3994                           
  3995                           ;GPS.c: 228: return 0;
  3996  024C  3000               	movlw	0
  3997  024D  0008               	return
  3998  024E                     l2996:	
  3999                           
  4000                           ;GPS.c: 231: unsigned char checksum2 = 0;
  4001  024E  01BD               	clrf	GPS_read_speed@checksum2
  4002                           
  4003                           ;GPS.c: 232: if (buffer[2] > 0x39)
  4004  024F  303A               	movlw	58
  4005  0250  0241               	subwf	GPS_read_speed@buffer+2,w
  4006  0251  1C03               	skipc
  4007  0252  2A56               	goto	l3002
  4008                           
  4009                           ;GPS.c: 233: checksum2 = buffer[2] - 0x37;
  4010  0253  0841               	movf	GPS_read_speed@buffer+2,w
  4011  0254  3EC9               	addlw	201
  4012  0255  2A58               	goto	L1
  4013  0256                     l3002:	
  4014                           
  4015                           ;GPS.c: 234: else
  4016                           ;GPS.c: 235: checksum2 = buffer[2] - 0x30;
  4017  0256  0841               	movf	GPS_read_speed@buffer+2,w
  4018  0257  3ED0               	addlw	208
  4019  0258                     L1:	
  4020  0258  00B5               	movwf	??_GPS_read_speed
  4021  0259  0835               	movf	??_GPS_read_speed,w
  4022  025A  00BD               	movwf	GPS_read_speed@checksum2
  4023                           
  4024                           ;GPS.c: 236: checksum2 = checksum2 << 4;
  4025  025B  083D               	movf	GPS_read_speed@checksum2,w
  4026  025C  00B5               	movwf	??_GPS_read_speed
  4027  025D  3003               	movlw	3
  4028  025E                     u3565:	
  4029  025E  35B5               	lslf	??_GPS_read_speed,f
  4030  025F  3EFF               	addlw	-1
  4031  0260  1D03               	skipz
  4032  0261  2A5E               	goto	u3565
  4033  0262  3535               	lslf	??_GPS_read_speed,w
  4034  0263  00B6               	movwf	??_GPS_read_speed+1
  4035  0264  0836               	movf	??_GPS_read_speed+1,w
  4036  0265  00BD               	movwf	GPS_read_speed@checksum2
  4037                           
  4038                           ;GPS.c: 237: if (buffer[3] > 0x39)
  4039  0266  303A               	movlw	58
  4040  0267  0242               	subwf	GPS_read_speed@buffer+3,w
  4041  0268  1C03               	skipc
  4042  0269  2A6D               	goto	l3008
  4043                           
  4044                           ;GPS.c: 238: checksum2 += buffer[3] - 0x37;
  4045  026A  0842               	movf	GPS_read_speed@buffer+3,w
  4046  026B  3EC9               	addlw	201
  4047  026C  2A6F               	goto	L2
  4048  026D                     l3008:	
  4049                           
  4050                           ;GPS.c: 239: else
  4051                           ;GPS.c: 240: checksum2 += buffer[3] - 0x30;
  4052  026D  0842               	movf	GPS_read_speed@buffer+3,w
  4053  026E  3ED0               	addlw	208
  4054  026F                     L2:	
  4055  026F  00B5               	movwf	??_GPS_read_speed
  4056  0270  0835               	movf	??_GPS_read_speed,w
  4057  0271  07BD               	addwf	GPS_read_speed@checksum2,f
  4058                           
  4059                           ;GPS.c: 241: if (checksum == checksum2)
  4060  0272  083E               	movf	GPS_read_speed@checksum,w
  4061  0273  063D               	xorwf	GPS_read_speed@checksum2,w
  4062  0274  1D03               	skipz
  4063  0275  2A8B               	goto	l3020
  4064                           
  4065                           ;GPS.c: 242: {
  4066                           ;GPS.c: 243: speed = convert_to_fp(read_speed_int, read_speed_fra);
  4067  0276  083A               	movf	GPS_read_speed@read_speed_int+1,w
  4068  0277  00A1               	movwf	convert_to_fp@int_part+1
  4069  0278  0839               	movf	GPS_read_speed@read_speed_int,w
  4070  0279  00A0               	movwf	convert_to_fp@int_part
  4071  027A  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  4072  027B  00A3               	movwf	convert_to_fp@fract_part+1
  4073  027C  083B               	movf	GPS_read_speed@read_speed_fra,w
  4074  027D  00A2               	movwf	convert_to_fp@fract_part
  4075  027E  3183  2386         	fcall	_convert_to_fp
  4076  0280  0020               	movlb	0	; select bank0
  4077  0281  0823               	movf	?_convert_to_fp+3,w
  4078  0282  00DE               	movwf	_speed+3
  4079  0283  0822               	movf	?_convert_to_fp+2,w
  4080  0284  00DD               	movwf	_speed+2
  4081  0285  0821               	movf	?_convert_to_fp+1,w
  4082  0286  00DC               	movwf	_speed+1
  4083  0287  0820               	movf	?_convert_to_fp,w
  4084  0288  00DB               	movwf	_speed
  4085                           
  4086                           ;GPS.c: 244: return 1;
  4087  0289  3001               	movlw	1
  4088                           
  4089                           ;GPS.c: 245: }
  4090  028A  0008               	return
  4091  028B                     l3020:	
  4092                           
  4093                           ;GPS.c: 246: else
  4094                           ;GPS.c: 247: return 0;
  4095  028B  3000               	movlw	0
  4096  028C  0008               	return
  4097  028D                     __end_of_GPS_read_speed:	
  4098                           
  4099                           	psect	text11
  4100  0386                     __ptext11:	
  4101 ;; *************** function _convert_to_fp *****************
  4102 ;; Defined at:
  4103 ;;		line 15 in file "fixed_point.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  int_part        2    0[BANK0 ] short 
  4106 ;;  fract_part      2    2[BANK0 ] short 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  i_bit           1   14[BANK0 ] unsigned char 
  4109 ;;  res             4   17[BANK0 ] long 
  4110 ;;  tmp_left        2   15[BANK0 ] unsigned short 
  4111 ;;  res_fract       2   12[BANK0 ] unsigned short 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  4    0[BANK0 ] long 
  4114 ;; Registers used:
  4115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4121 ;;      Params:         0       4       0       0       0       0
  4122 ;;      Locals:         0       9       0       0       0       0
  4123 ;;      Temps:          0       8       0       0       0       0
  4124 ;;      Totals:         0      21       0       0       0       0
  4125 ;;Total ram usage:       21 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    6
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_GPS_read_speed
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function _convert_to_fp
  4137  0386                     _convert_to_fp:	
  4138                           
  4139                           ;fixed_point.c: 21: t_fp res = 0;
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  4143  0386  3000               	movlw	0
  4144  0387  0020               	movlb	0	; select bank0
  4145  0388  00B4               	movwf	convert_to_fp@res+3
  4146  0389  3000               	movlw	0
  4147  038A  00B3               	movwf	convert_to_fp@res+2
  4148  038B  3000               	movlw	0
  4149  038C  00B2               	movwf	convert_to_fp@res+1
  4150  038D  3000               	movlw	0
  4151  038E  00B1               	movwf	convert_to_fp@res
  4152                           
  4153                           ;fixed_point.c: 23: res = int_part;
  4154  038F  0820               	movf	convert_to_fp@int_part,w
  4155  0390  00B1               	movwf	convert_to_fp@res
  4156  0391  0821               	movf	convert_to_fp@int_part+1,w
  4157  0392  00B2               	movwf	convert_to_fp@res+1
  4158  0393  0D89               	rlf	9,f
  4159  0394  3B89               	subwfb	9,f
  4160  0395  0989               	comf	9,f
  4161  0396  00B3               	movwf	convert_to_fp@res+2
  4162  0397  00B4               	movwf	convert_to_fp@res+3
  4163                           
  4164                           ;fixed_point.c: 24: res = res << 16;
  4165  0398  0831               	movf	convert_to_fp@res,w
  4166  0399  00A4               	movwf	??_convert_to_fp
  4167  039A  0832               	movf	convert_to_fp@res+1,w
  4168  039B  00A5               	movwf	??_convert_to_fp+1
  4169  039C  0833               	movf	convert_to_fp@res+2,w
  4170  039D  00A6               	movwf	??_convert_to_fp+2
  4171  039E  0834               	movf	convert_to_fp@res+3,w
  4172  039F  00A7               	movwf	??_convert_to_fp+3
  4173  03A0  3010               	movlw	16
  4174  03A1                     u2835:	
  4175  03A1  35A4               	lslf	??_convert_to_fp,f
  4176  03A2  0DA5               	rlf	??_convert_to_fp+1,f
  4177  03A3  0DA6               	rlf	??_convert_to_fp+2,f
  4178  03A4  0DA7               	rlf	??_convert_to_fp+3,f
  4179  03A5  0B89               	decfsz	9,f
  4180  03A6  2BA1               	goto	u2835
  4181  03A7  0827               	movf	??_convert_to_fp+3,w
  4182  03A8  00B4               	movwf	convert_to_fp@res+3
  4183  03A9  0826               	movf	??_convert_to_fp+2,w
  4184  03AA  00B3               	movwf	convert_to_fp@res+2
  4185  03AB  0825               	movf	??_convert_to_fp+1,w
  4186  03AC  00B2               	movwf	convert_to_fp@res+1
  4187  03AD  0824               	movf	??_convert_to_fp,w
  4188  03AE  00B1               	movwf	convert_to_fp@res
  4189                           
  4190                           ;fixed_point.c: 26: unsigned short tmp_left = fract_part;
  4191  03AF  0823               	movf	convert_to_fp@fract_part+1,w
  4192  03B0  00B0               	movwf	convert_to_fp@tmp_left+1
  4193  03B1  0822               	movf	convert_to_fp@fract_part,w
  4194  03B2  00AF               	movwf	convert_to_fp@tmp_left
  4195                           
  4196                           ;fixed_point.c: 27: unsigned short res_fract = 0;
  4197  03B3  01AC               	clrf	convert_to_fp@res_fract
  4198  03B4  01AD               	clrf	convert_to_fp@res_fract+1
  4199                           
  4200                           ;fixed_point.c: 28: const unsigned short one = 1;
  4201                           ;fixed_point.c: 29: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  4202  03B5  01AE               	clrf	convert_to_fp@i_bit
  4203  03B6  3010               	movlw	16
  4204  03B7  022E               	subwf	convert_to_fp@i_bit,w
  4205  03B8  1803               	btfsc	3,0
  4206  03B9  2BEC               	goto	l268
  4207  03BA                     l2620:	
  4208                           
  4209                           ;fixed_point.c: 30: {
  4210                           ;fixed_point.c: 31: tmp_left = tmp_left << 1;
  4211  03BA  352F               	lslf	convert_to_fp@tmp_left,w
  4212  03BB  00AF               	movwf	convert_to_fp@tmp_left
  4213  03BC  0D30               	rlf	convert_to_fp@tmp_left+1,w
  4214  03BD  00B0               	movwf	convert_to_fp@tmp_left+1
  4215                           
  4216                           ;fixed_point.c: 32: if (tmp_left >= 10000)
  4217  03BE  3027               	movlw	39
  4218  03BF  0230               	subwf	convert_to_fp@tmp_left+1,w
  4219  03C0  3010               	movlw	16
  4220  03C1  1903               	skipnz
  4221  03C2  022F               	subwf	convert_to_fp@tmp_left,w
  4222  03C3  1C03               	skipc
  4223  03C4  2BE4               	goto	l2626
  4224                           
  4225                           ;fixed_point.c: 33: {
  4226                           ;fixed_point.c: 34: res_fract = res_fract | one<<(16-i_bit-1);
  4227  03C5  3025               	movlw	low (convert_to_fp@one| (0+32768))
  4228  03C6  0084               	movwf	4
  4229  03C7  3085               	movlw	high (convert_to_fp@one| (0+32768))
  4230  03C8  0085               	movwf	5
  4231  03C9  3F00               	moviw [0]fsr0
  4232  03CA  00A4               	movwf	??_convert_to_fp
  4233  03CB  3F01               	moviw [1]fsr0
  4234  03CC  00A5               	movwf	??_convert_to_fp+1
  4235  03CD  082E               	movf	convert_to_fp@i_bit,w
  4236  03CE  3E01               	addlw	1
  4237  03CF  3AFF               	xorlw	255
  4238  03D0  3E01               	addlw	1
  4239  03D1  3E10               	addlw	16
  4240  03D2  0A89               	incf	9,f
  4241  03D3  2BD6               	goto	u2864
  4242  03D4                     u2865:	
  4243  03D4  35A4               	lslf	??_convert_to_fp,f
  4244  03D5  0DA5               	rlf	??_convert_to_fp+1,f
  4245  03D6                     u2864:	
  4246  03D6  0B89               	decfsz	9,f
  4247  03D7  2BD4               	goto	u2865
  4248  03D8  082C               	movf	convert_to_fp@res_fract,w
  4249  03D9  0424               	iorwf	??_convert_to_fp,w
  4250  03DA  00AC               	movwf	convert_to_fp@res_fract
  4251  03DB  082D               	movf	convert_to_fp@res_fract+1,w
  4252  03DC  0425               	iorwf	??_convert_to_fp+1,w
  4253  03DD  00AD               	movwf	convert_to_fp@res_fract+1
  4254                           
  4255                           ;fixed_point.c: 35: tmp_left = tmp_left - 10000;
  4256  03DE  082F               	movf	convert_to_fp@tmp_left,w
  4257  03DF  3EF0               	addlw	240
  4258  03E0  00AF               	movwf	convert_to_fp@tmp_left
  4259  03E1  30D8               	movlw	216
  4260  03E2  3D30               	addwfc	convert_to_fp@tmp_left+1,w
  4261  03E3  00B0               	movwf	convert_to_fp@tmp_left+1
  4262  03E4                     l2626:	
  4263  03E4  3001               	movlw	1
  4264  03E5  00A4               	movwf	??_convert_to_fp
  4265  03E6  0824               	movf	??_convert_to_fp,w
  4266  03E7  07AE               	addwf	convert_to_fp@i_bit,f
  4267  03E8  3010               	movlw	16
  4268  03E9  022E               	subwf	convert_to_fp@i_bit,w
  4269  03EA  1C03               	skipc
  4270  03EB  2BBA               	goto	l2620
  4271  03EC                     l268:	
  4272                           
  4273                           ;fixed_point.c: 36: }
  4274                           ;fixed_point.c: 37: }
  4275                           ;fixed_point.c: 39: if (res < 0)
  4276  03EC  1FB4               	btfss	convert_to_fp@res+3,7
  4277  03ED  2C08               	goto	l2632
  4278                           
  4279                           ;fixed_point.c: 40: res = res - res_fract;
  4280  03EE  0831               	movf	convert_to_fp@res,w
  4281  03EF  00A4               	movwf	??_convert_to_fp
  4282  03F0  0832               	movf	convert_to_fp@res+1,w
  4283  03F1  00A5               	movwf	??_convert_to_fp+1
  4284  03F2  0833               	movf	convert_to_fp@res+2,w
  4285  03F3  00A6               	movwf	??_convert_to_fp+2
  4286  03F4  0834               	movf	convert_to_fp@res+3,w
  4287  03F5  00A7               	movwf	??_convert_to_fp+3
  4288  03F6  082C               	movf	convert_to_fp@res_fract,w
  4289  03F7  00A8               	movwf	??_convert_to_fp+4
  4290  03F8  082D               	movf	convert_to_fp@res_fract+1,w
  4291  03F9  00A9               	movwf	??_convert_to_fp+5
  4292  03FA  01AA               	clrf	??_convert_to_fp+6
  4293  03FB  01AB               	clrf	??_convert_to_fp+7
  4294  03FC  09A8               	comf	??_convert_to_fp+4,f
  4295  03FD  09A9               	comf	??_convert_to_fp+5,f
  4296  03FE  09AA               	comf	??_convert_to_fp+6,f
  4297  03FF  09AB               	comf	??_convert_to_fp+7,f
  4298  0400  0AA8               	incf	??_convert_to_fp+4,f
  4299  0401  1903               	skipnz
  4300  0402  0AA9               	incf	??_convert_to_fp+5,f
  4301  0403  1903               	skipnz
  4302  0404  0AAA               	incf	??_convert_to_fp+6,f
  4303  0405  1903               	skipnz
  4304  0406  0AAB               	incf	??_convert_to_fp+7,f
  4305  0407  2C16               	goto	L3
  4306  0408                     l2632:	
  4307                           
  4308                           ;fixed_point.c: 41: else
  4309                           ;fixed_point.c: 42: res = res + res_fract;
  4310  0408  0831               	movf	convert_to_fp@res,w
  4311  0409  00A4               	movwf	??_convert_to_fp
  4312  040A  0832               	movf	convert_to_fp@res+1,w
  4313  040B  00A5               	movwf	??_convert_to_fp+1
  4314  040C  0833               	movf	convert_to_fp@res+2,w
  4315  040D  00A6               	movwf	??_convert_to_fp+2
  4316  040E  0834               	movf	convert_to_fp@res+3,w
  4317  040F  00A7               	movwf	??_convert_to_fp+3
  4318  0410  082C               	movf	convert_to_fp@res_fract,w
  4319  0411  00A8               	movwf	??_convert_to_fp+4
  4320  0412  082D               	movf	convert_to_fp@res_fract+1,w
  4321  0413  00A9               	movwf	??_convert_to_fp+5
  4322  0414  01AA               	clrf	??_convert_to_fp+6
  4323  0415  01AB               	clrf	??_convert_to_fp+7
  4324  0416                     L3:	
  4325  0416  0828               	movf	??_convert_to_fp+4,w
  4326  0417  07A4               	addwf	??_convert_to_fp,f
  4327  0418  0829               	movf	??_convert_to_fp+5,w
  4328  0419  3DA5               	addwfc	??_convert_to_fp+1,f
  4329  041A  082A               	movf	??_convert_to_fp+6,w
  4330  041B  3DA6               	addwfc	??_convert_to_fp+2,f
  4331  041C  082B               	movf	??_convert_to_fp+7,w
  4332  041D  3DA7               	addwfc	??_convert_to_fp+3,f
  4333  041E  0827               	movf	??_convert_to_fp+3,w
  4334  041F  00B4               	movwf	convert_to_fp@res+3
  4335  0420  0826               	movf	??_convert_to_fp+2,w
  4336  0421  00B3               	movwf	convert_to_fp@res+2
  4337  0422  0825               	movf	??_convert_to_fp+1,w
  4338  0423  00B2               	movwf	convert_to_fp@res+1
  4339  0424  0824               	movf	??_convert_to_fp,w
  4340  0425  00B1               	movwf	convert_to_fp@res
  4341                           
  4342                           ;fixed_point.c: 43: return res;
  4343  0426  0834               	movf	convert_to_fp@res+3,w
  4344  0427  00A3               	movwf	?_convert_to_fp+3
  4345  0428  0833               	movf	convert_to_fp@res+2,w
  4346  0429  00A2               	movwf	?_convert_to_fp+2
  4347  042A  0832               	movf	convert_to_fp@res+1,w
  4348  042B  00A1               	movwf	?_convert_to_fp+1
  4349  042C  0831               	movf	convert_to_fp@res,w
  4350  042D  00A0               	movwf	?_convert_to_fp
  4351  042E  0008               	return
  4352  042F                     __end_of_convert_to_fp:	
  4353                           
  4354                           	psect	text12
  4355  06AA                     __ptext12:	
  4356 ;; *************** function ___wmul *****************
  4357 ;; Defined at:
  4358 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4361 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  product         2    4[BANK0 ] unsigned int 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  2    0[BANK0 ] unsigned int 
  4366 ;; Registers used:
  4367 ;;		wreg, status,2, status,0
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4373 ;;      Params:         0       4       0       0       0       0
  4374 ;;      Locals:         0       2       0       0       0       0
  4375 ;;      Temps:          0       0       0       0       0       0
  4376 ;;      Totals:         0       6       0       0       0       0
  4377 ;;Total ram usage:        6 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    6
  4380 ;; This function calls:
  4381 ;;		Nothing
  4382 ;; This function is called by:
  4383 ;;		_GPS_read_speed
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           
  4388                           ;psect for function ___wmul
  4389  06AA                     ___wmul:	
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4393  06AA  0020               	movlb	0	; select bank0
  4394  06AB  01A4               	clrf	___wmul@product
  4395  06AC  01A5               	clrf	___wmul@product+1
  4396  06AD                     l2644:	
  4397  06AD  1C20               	btfss	___wmul@multiplier,0
  4398  06AE  2EB3               	goto	l596
  4399  06AF  0822               	movf	___wmul@multiplicand,w
  4400  06B0  07A4               	addwf	___wmul@product,f
  4401  06B1  0823               	movf	___wmul@multiplicand+1,w
  4402  06B2  3DA5               	addwfc	___wmul@product+1,f
  4403  06B3                     l596:	
  4404  06B3  3001               	movlw	1
  4405  06B4                     u2915:	
  4406  06B4  35A2               	lslf	___wmul@multiplicand,f
  4407  06B5  0DA3               	rlf	___wmul@multiplicand+1,f
  4408  06B6  0B89               	decfsz	9,f
  4409  06B7  2EB4               	goto	u2915
  4410  06B8  3001               	movlw	1
  4411  06B9                     u2925:	
  4412  06B9  36A1               	lsrf	___wmul@multiplier+1,f
  4413  06BA  0CA0               	rrf	___wmul@multiplier,f
  4414  06BB  0B89               	decfsz	9,f
  4415  06BC  2EB9               	goto	u2925
  4416  06BD  0820               	movf	___wmul@multiplier,w
  4417  06BE  0421               	iorwf	___wmul@multiplier+1,w
  4418  06BF  1D03               	btfss	3,2
  4419  06C0  2EAD               	goto	l2644
  4420  06C1  0825               	movf	___wmul@product+1,w
  4421  06C2  00A1               	movwf	?___wmul+1
  4422  06C3  0824               	movf	___wmul@product,w
  4423  06C4  00A0               	movwf	?___wmul
  4424  06C5  0008               	return
  4425  06C6                     __end_of___wmul:	
  4426                           
  4427                           	psect	text13
  4428  064F                     __ptext13:	
  4429 ;; *************** function _EUSART_Read *****************
  4430 ;; Defined at:
  4431 ;;		line 112 in file "mcc_generated_files/eusart.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;		None
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;  readValue       1    1[BANK0 ] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  1    wreg      unsigned char 
  4438 ;; Registers used:
  4439 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4445 ;;      Params:         0       0       0       0       0       0
  4446 ;;      Locals:         0       1       0       0       0       0
  4447 ;;      Temps:          0       1       0       0       0       0
  4448 ;;      Totals:         0       2       0       0       0       0
  4449 ;;Total ram usage:        2 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    6
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_GPS_read_speed
  4456 ;;		_getch
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           
  4461                           ;psect for function _EUSART_Read
  4462  064F                     _EUSART_Read:	
  4463                           
  4464                           ;eusart.c: 114: uint8_t readValue = 0;
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4468  064F  0020               	movlb	0	; select bank0
  4469  0650  01A1               	clrf	EUSART_Read@readValue
  4470                           
  4471                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  4472  0651  0023               	movlb	3	; select bank3
  4473  0652  169D               	bsf	29,5	;volatile
  4474  0653                     l2588:	
  4475                           ;eusart.c: 120: {
  4476                           
  4477                           ;eusart.c: 119: while(0 == eusartRxCount)
  4478                           
  4479  0653  0873               	movf	_eusartRxCount,w	;volatile
  4480  0654  1903               	btfsc	3,2
  4481  0655  2E53               	goto	l2588
  4482                           
  4483                           ;eusart.c: 121: }
  4484                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  4485  0656  0021               	movlb	1	; select bank1
  4486  0657  1291               	bcf	17,5	;volatile
  4487                           
  4488                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  4489  0658  0020               	movlb	0	; select bank0
  4490  0659  086A               	movf	_eusartRxTail,w
  4491  065A  3E4B               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4492  065B  0086               	movwf	6
  4493  065C  0187               	clrf	7
  4494  065D  0801               	movf	1,w
  4495  065E  00A0               	movwf	??_EUSART_Read
  4496  065F  0820               	movf	??_EUSART_Read,w
  4497  0660  00A1               	movwf	EUSART_Read@readValue
  4498  0661  3001               	movlw	1
  4499  0662  00A0               	movwf	??_EUSART_Read
  4500  0663  0820               	movf	??_EUSART_Read,w
  4501  0664  07EA               	addwf	_eusartRxTail,f
  4502                           
  4503                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4504  0665  3008               	movlw	8
  4505  0666  026A               	subwf	_eusartRxTail,w
  4506  0667  1803               	btfsc	3,0
  4507                           
  4508                           ;eusart.c: 127: {
  4509                           ;eusart.c: 128: eusartRxTail = 0;
  4510  0668  01EA               	clrf	_eusartRxTail
  4511                           
  4512                           ;eusart.c: 129: }
  4513                           ;eusart.c: 130: eusartRxCount--;
  4514  0669  3001               	movlw	1
  4515  066A  02F3               	subwf	_eusartRxCount,f	;volatile
  4516                           
  4517                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  4518  066B  0021               	movlb	1	; select bank1
  4519  066C  1691               	bsf	17,5	;volatile
  4520                           
  4521                           ;eusart.c: 133: return readValue;
  4522  066D  0020               	movlb	0	; select bank0
  4523  066E  0821               	movf	EUSART_Read@readValue,w
  4524  066F  0008               	return
  4525  0670                     __end_of_EUSART_Read:	
  4526                           
  4527                           	psect	text14
  4528  056D                     __ptext14:	
  4529 ;; *************** function _GPS_Initialize *****************
  4530 ;; Defined at:
  4531 ;;		line 12 in file "GPS.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  tmp             1   13[BANK0 ] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4545 ;;      Params:         0       0       0       0       0       0
  4546 ;;      Locals:         0       1       0       0       0       0
  4547 ;;      Temps:          0       3       0       0       0       0
  4548 ;;      Totals:         0       4       0       0       0       0
  4549 ;;Total ram usage:        4 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    9
  4552 ;; This function calls:
  4553 ;;		_printf
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           
  4560                           ;psect for function _GPS_Initialize
  4561  056D                     _GPS_Initialize:	
  4562                           
  4563                           ;GPS.c: 14: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(3200
      +                          0000/4000.0)));};
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4567  056D  0020               	movlb	0	; select bank0
  4568  056E  01AD               	clrf	GPS_Initialize@tmp
  4569  056F  300A               	movlw	10
  4570  0570  022D               	subwf	GPS_Initialize@tmp,w
  4571  0571  1803               	btfsc	3,0
  4572  0572  2D88               	goto	l2696
  4573  0573                     l2690:	
  4574  0573  3005               	movlw	5
  4575  0574  00AC               	movwf	??_GPS_Initialize+2
  4576  0575  300F               	movlw	15
  4577  0576  00AB               	movwf	??_GPS_Initialize+1
  4578  0577  30F4               	movlw	244
  4579  0578  00AA               	movwf	??_GPS_Initialize
  4580  0579                     u3867:	
  4581  0579  0BAA               	decfsz	??_GPS_Initialize,f
  4582  057A  2D79               	goto	u3867
  4583  057B  0BAB               	decfsz	??_GPS_Initialize+1,f
  4584  057C  2D79               	goto	u3867
  4585  057D  0BAC               	decfsz	??_GPS_Initialize+2,f
  4586  057E  2D79               	goto	u3867
  4587  057F  3001               	movlw	1
  4588  0580  0020               	movlb	0	; select bank0
  4589  0581  00AA               	movwf	??_GPS_Initialize
  4590  0582  082A               	movf	??_GPS_Initialize,w
  4591  0583  07AD               	addwf	GPS_Initialize@tmp,f
  4592  0584  300A               	movlw	10
  4593  0585  022D               	subwf	GPS_Initialize@tmp,w
  4594  0586  1C03               	skipc
  4595  0587  2D73               	goto	l2690
  4596  0588                     l2696:	
  4597                           
  4598                           ;GPS.c: 16: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  4599  0588  3027               	movlw	low (STR_1| (0+32768))
  4600  0589  00A3               	movwf	printf@f
  4601  058A  3085               	movlw	high (STR_1| (0+32768))
  4602  058B  00A4               	movwf	printf@f+1
  4603  058C  3186  2670  3185   	fcall	_printf
  4604                           
  4605                           ;GPS.c: 17: _delay((unsigned long)((100)*(32000000/4000.0)));
  4606  058F  3005               	movlw	5
  4607  0590  0020               	movlb	0	; select bank0
  4608  0591  00AC               	movwf	??_GPS_Initialize+2
  4609  0592  300F               	movlw	15
  4610  0593  00AB               	movwf	??_GPS_Initialize+1
  4611  0594  30F4               	movlw	244
  4612  0595  00AA               	movwf	??_GPS_Initialize
  4613  0596                     u3877:	
  4614  0596  0BAA               	decfsz	??_GPS_Initialize,f
  4615  0597  2D96               	goto	u3877
  4616  0598  0BAB               	decfsz	??_GPS_Initialize+1,f
  4617  0599  2D96               	goto	u3877
  4618  059A  0BAC               	decfsz	??_GPS_Initialize+2,f
  4619  059B  2D96               	goto	u3877
  4620                           
  4621                           ;GPS.c: 19: printf("$PMTK220,100*2F\r\n");
  4622  059C  305B               	movlw	low (STR_2| (0+32768))
  4623  059D  0020               	movlb	0	; select bank0
  4624  059E  00A3               	movwf	printf@f
  4625  059F  3085               	movlw	high (STR_2| (0+32768))
  4626  05A0  00A4               	movwf	printf@f+1
  4627  05A1  3186  2670  3185   	fcall	_printf
  4628                           
  4629                           ;GPS.c: 20: _delay((unsigned long)((100)*(32000000/4000.0)));
  4630  05A4  3005               	movlw	5
  4631  05A5  0020               	movlb	0	; select bank0
  4632  05A6  00AC               	movwf	??_GPS_Initialize+2
  4633  05A7  300F               	movlw	15
  4634  05A8  00AB               	movwf	??_GPS_Initialize+1
  4635  05A9  30F4               	movlw	244
  4636  05AA  00AA               	movwf	??_GPS_Initialize
  4637  05AB                     u3887:	
  4638  05AB  0BAA               	decfsz	??_GPS_Initialize,f
  4639  05AC  2DAB               	goto	u3887
  4640  05AD  0BAB               	decfsz	??_GPS_Initialize+1,f
  4641  05AE  2DAB               	goto	u3887
  4642  05AF  0BAC               	decfsz	??_GPS_Initialize+2,f
  4643  05B0  2DAB               	goto	u3887
  4644  05B1  0008               	return
  4645  05B2                     __end_of_GPS_Initialize:	
  4646                           
  4647                           	psect	text15
  4648  0670                     __ptext15:	
  4649 ;; *************** function _printf *****************
  4650 ;; Defined at:
  4651 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  4654 ;;		 -> STR_2(18), STR_1(52), 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  tmpval          4    0        struct .
  4657 ;;  cp              2    0        PTR const unsigned char 
  4658 ;;  len             2    0        unsigned int 
  4659 ;;  val             2    0        unsigned int 
  4660 ;;  c               1    9[BANK0 ] char 
  4661 ;;  ap              1    8[BANK0 ] PTR void [1]
  4662 ;;		 -> ?_printf(2), 
  4663 ;;  flag            1    0        unsigned char 
  4664 ;;  prec            1    0        char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  2    3[BANK0 ] int 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4674 ;;      Params:         0       2       0       0       0       0
  4675 ;;      Locals:         0       2       0       0       0       0
  4676 ;;      Temps:          0       3       0       0       0       0
  4677 ;;      Totals:         0       7       0       0       0       0
  4678 ;;Total ram usage:        7 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    8
  4681 ;; This function calls:
  4682 ;;		_putch
  4683 ;; This function is called by:
  4684 ;;		_GPS_Initialize
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function _printf
  4690  0670                     _printf:	
  4691                           
  4692                           ;doprnt.c: 466: va_list ap;
  4693                           ;doprnt.c: 499: signed char c;
  4694                           ;doprnt.c: 506: signed char prec;
  4695                           ;doprnt.c: 508: unsigned char flag;
  4696                           ;doprnt.c: 523: union {
  4697                           ;doprnt.c: 524: unsigned long vd;
  4698                           ;doprnt.c: 525: double integ;
  4699                           ;doprnt.c: 526: } tmpval;
  4700                           ;doprnt.c: 528: unsigned int val;
  4701                           ;doprnt.c: 529: unsigned len;
  4702                           ;doprnt.c: 530: const char * cp;
  4703                           ;doprnt.c: 533: *ap = __va_start();
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4707  0670  3025               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4708  0671  0020               	movlb	0	; select bank0
  4709  0672  00A5               	movwf	??_printf
  4710  0673  0825               	movf	??_printf,w
  4711  0674  00A8               	movwf	printf@ap
  4712  0675                     l2640:	
  4713                           ;doprnt.c: 543: }
  4714                           ;doprnt.c: 1422: {
  4715                           
  4716                           ;doprnt.c: 542: continue;
  4717                           
  4718                           ;doprnt.c: 536: while(c = *f++) {
  4719                           
  4720  0675  0020               	movlb	0	; select bank0
  4721  0676  0824               	movf	printf@f+1,w
  4722  0677  00A6               	movwf	??_printf+1
  4723  0678  0823               	movf	printf@f,w
  4724  0679  00A5               	movwf	??_printf
  4725  067A  0AA3               	incf	printf@f,f
  4726  067B  1903               	skipnz
  4727  067C  0AA4               	incf	printf@f+1,f
  4728  067D  0825               	movf	??_printf,w
  4729  067E  0084               	movwf	4
  4730  067F  0826               	movf	??_printf+1,w
  4731  0680  0085               	movwf	5
  4732  0681  0800               	movf	0,w	;code access
  4733  0682  00A7               	movwf	??_printf+2
  4734  0683  0827               	movf	??_printf+2,w
  4735  0684  00A9               	movwf	printf@c
  4736  0685  0829               	movf	printf@c,w
  4737  0686  1903               	btfsc	3,2
  4738  0687  0008               	return
  4739                           
  4740                           ;doprnt.c: 540: {
  4741                           ;doprnt.c: 541: (putch(c) );
  4742  0688  0829               	movf	printf@c,w
  4743  0689  3187  2774  3186   	fcall	_putch
  4744  068C  2E75               	goto	l2640
  4745  068D                     __end_of_printf:	
  4746                           ;doprnt.c: 1469: }
  4747                           ;doprnt.c: 1533: }
  4748                           ;doprnt.c: 1540: return 0;
  4749                           ;	Return value of _printf is never used
  4750                           
  4751                           
  4752                           	psect	text16
  4753  0774                     __ptext16:	
  4754 ;; *************** function _putch *****************
  4755 ;; Defined at:
  4756 ;;		line 164 in file "mcc_generated_files/eusart.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  txData          1    wreg     unsigned char 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  txData          1    2[BANK0 ] unsigned char 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  1    wreg      void 
  4763 ;; Registers used:
  4764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4770 ;;      Params:         0       0       0       0       0       0
  4771 ;;      Locals:         0       1       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0       0
  4773 ;;      Totals:         0       1       0       0       0       0
  4774 ;;Total ram usage:        1 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    7
  4777 ;; This function calls:
  4778 ;;		_EUSART_Write
  4779 ;; This function is called by:
  4780 ;;		_printf
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           
  4785                           ;psect for function _putch
  4786  0774                     _putch:	
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4790                           ;putch@txData stored from wreg
  4791  0774  0020               	movlb	0	; select bank0
  4792  0775  00A2               	movwf	putch@txData
  4793                           
  4794                           ;eusart.c: 166: EUSART_Write(txData);
  4795  0776  0822               	movf	putch@txData,w
  4796  0777  3186  260A         	fcall	_EUSART_Write
  4797  0779  0008               	return
  4798  077A                     __end_of_putch:	
  4799                           
  4800                           	psect	text17
  4801  060A                     __ptext17:	
  4802 ;; *************** function _EUSART_Write *****************
  4803 ;; Defined at:
  4804 ;;		line 136 in file "mcc_generated_files/eusart.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  txData          1    wreg     unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  txData          1    1[BANK0 ] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4818 ;;      Params:         0       0       0       0       0       0
  4819 ;;      Locals:         0       1       0       0       0       0
  4820 ;;      Temps:          0       1       0       0       0       0
  4821 ;;      Totals:         0       2       0       0       0       0
  4822 ;;Total ram usage:        2 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    6
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_putch
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           
  4833                           ;psect for function _EUSART_Write
  4834  060A                     _EUSART_Write:	
  4835                           
  4836                           ;incstack = 0
  4837                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4838                           ;EUSART_Write@txData stored from wreg
  4839  060A  0020               	movlb	0	; select bank0
  4840  060B  00A1               	movwf	EUSART_Write@txData
  4841  060C                     l2514:	
  4842                           ;eusart.c: 139: {
  4843                           
  4844                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  4845                           
  4846  060C  086B               	movf	_eusartTxBufferRemaining,w	;volatile
  4847  060D  1903               	btfsc	3,2
  4848  060E  2E0C               	goto	l2514
  4849                           
  4850                           ;eusart.c: 140: }
  4851                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  4852  060F  0021               	movlb	1	; select bank1
  4853  0610  1A11               	btfsc	17,4	;volatile
  4854  0611  2E17               	goto	l167
  4855                           
  4856                           ;eusart.c: 143: {
  4857                           ;eusart.c: 144: TXREG = txData;
  4858  0612  0020               	movlb	0	; select bank0
  4859  0613  0821               	movf	EUSART_Write@txData,w
  4860  0614  0023               	movlb	3	; select bank3
  4861  0615  009A               	movwf	26	;volatile
  4862                           
  4863                           ;eusart.c: 145: }
  4864  0616  2E2B               	goto	l2528
  4865  0617                     l167:	
  4866                           
  4867                           ;eusart.c: 146: else
  4868                           ;eusart.c: 147: {
  4869                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  4870  0617  1211               	bcf	17,4	;volatile
  4871                           
  4872                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  4873  0618  0020               	movlb	0	; select bank0
  4874  0619  0821               	movf	EUSART_Write@txData,w
  4875  061A  00A0               	movwf	??_EUSART_Write
  4876  061B  086C               	movf	_eusartTxHead,w
  4877  061C  3E53               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4878  061D  0086               	movwf	6
  4879  061E  0187               	clrf	7
  4880  061F  0820               	movf	??_EUSART_Write,w
  4881  0620  0081               	movwf	1
  4882  0621  3001               	movlw	1
  4883  0622  00A0               	movwf	??_EUSART_Write
  4884  0623  0820               	movf	??_EUSART_Write,w
  4885  0624  07EC               	addwf	_eusartTxHead,f
  4886                           
  4887                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4888  0625  3008               	movlw	8
  4889  0626  026C               	subwf	_eusartTxHead,w
  4890  0627  1803               	btfsc	3,0
  4891                           
  4892                           ;eusart.c: 151: {
  4893                           ;eusart.c: 152: eusartTxHead = 0;
  4894  0628  01EC               	clrf	_eusartTxHead
  4895                           
  4896                           ;eusart.c: 153: }
  4897                           ;eusart.c: 154: eusartTxBufferRemaining--;
  4898  0629  3001               	movlw	1
  4899  062A  02EB               	subwf	_eusartTxBufferRemaining,f	;volatile
  4900  062B                     l2528:	
  4901                           
  4902                           ;eusart.c: 155: }
  4903                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  4904  062B  0021               	movlb	1	; select bank1
  4905  062C  1611               	bsf	17,4	;volatile
  4906  062D  0008               	return
  4907  062E                     __end_of_EUSART_Write:	
  4908                           
  4909                           	psect	intentry
  4910  0004                     __pintentry:	
  4911 ;; *************** function _INTERRUPT_InterruptManager *****************
  4912 ;; Defined at:
  4913 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;		None
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;		None
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4927 ;;      Params:         0       0       0       0       0       0
  4928 ;;      Locals:         0       0       0       0       0       0
  4929 ;;      Temps:          1       0       0       0       0       0
  4930 ;;      Totals:         1       0       0       0       0       0
  4931 ;;Total ram usage:        1 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    5
  4934 ;; This function calls:
  4935 ;;		_EUSART_Receive_ISR
  4936 ;;		_EUSART_Transmit_ISR
  4937 ;;		_TMR0_ISR
  4938 ;; This function is called by:
  4939 ;;		Interrupt level 1
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943  0004                     _INTERRUPT_InterruptManager:	
  4944                           
  4945                           ;incstack = 0
  4946  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4947                           
  4948                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4949  0005  3180               	pagesel	$
  4950  0006  0020               	movlb	0	; select bank0
  4951  0007  087F               	movf	127,w
  4952  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  4953                           
  4954                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4955  0009  1A8B               	btfsc	11,5	;volatile
  4956  000A  1D0B               	btfss	11,2	;volatile
  4957  000B  280F               	goto	i1l2398
  4958                           
  4959                           ;interrupt_manager.c: 55: {
  4960                           ;interrupt_manager.c: 56: TMR0_ISR();
  4961  000C  3187  2728  3180   	fcall	_TMR0_ISR
  4962  000F                     i1l2398:	
  4963                           
  4964                           ;interrupt_manager.c: 57: }
  4965                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4966  000F  1F0B               	btfss	11,6	;volatile
  4967  0010  281A               	goto	i1l2406
  4968  0011  0021               	movlb	1	; select bank1
  4969  0012  1E11               	btfss	17,4	;volatile
  4970  0013  281A               	goto	i1l2406
  4971  0014  0020               	movlb	0	; select bank0
  4972  0015  1E11               	btfss	17,4	;volatile
  4973  0016  281A               	goto	i1l2406
  4974                           
  4975                           ;interrupt_manager.c: 59: {
  4976                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  4977  0017  3186  268D  3180   	fcall	_EUSART_Transmit_ISR
  4978  001A                     i1l2406:	
  4979                           
  4980                           ;interrupt_manager.c: 61: }
  4981                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  4982  001A  1F0B               	btfss	11,6	;volatile
  4983  001B  2824               	goto	i1l73
  4984  001C  0021               	movlb	1	; select bank1
  4985  001D  1E91               	btfss	17,5	;volatile
  4986  001E  2824               	goto	i1l73
  4987  001F  0020               	movlb	0	; select bank0
  4988  0020  1E91               	btfss	17,5	;volatile
  4989  0021  2824               	goto	i1l73
  4990                           
  4991                           ;interrupt_manager.c: 63: {
  4992                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  4993  0022  3186  26E1         	fcall	_EUSART_Receive_ISR
  4994  0024                     i1l73:	
  4995                           ;interrupt_manager.c: 66: else
  4996                           ;interrupt_manager.c: 67: {
  4997                           
  4998                           ;interrupt_manager.c: 65: }
  4999                           
  5000  0024  0879               	movf	??_INTERRUPT_InterruptManager,w
  5001  0025  0020               	movlb	0	; select bank0
  5002  0026  00FF               	movwf	127
  5003  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5004  0028  0009               	retfie
  5005  0029                     __end_of_INTERRUPT_InterruptManager:	
  5006                           
  5007                           	psect	text19
  5008  0728                     __ptext19:	
  5009 ;; *************** function _TMR0_ISR *****************
  5010 ;; Defined at:
  5011 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;		None
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;		None
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  1    wreg      void 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0, pclath, cstack
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5025 ;;      Params:         0       0       0       0       0       0
  5026 ;;      Locals:         0       0       0       0       0       0
  5027 ;;      Temps:          0       0       0       0       0       0
  5028 ;;      Totals:         0       0       0       0       0       0
  5029 ;;Total ram usage:        0 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    4
  5032 ;; This function calls:
  5033 ;;		_TMR0_CallBack
  5034 ;; This function is called by:
  5035 ;;		_INTERRUPT_InterruptManager
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           
  5040                           ;psect for function _TMR0_ISR
  5041  0728                     _TMR0_ISR:	
  5042                           
  5043                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  5044                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  5045                           
  5046                           ;incstack = 0
  5047                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5048  0728  110B               	bcf	11,2	;volatile
  5049                           
  5050                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  5051  0729  0874               	movf	_timer0ReloadVal,w	;volatile
  5052  072A  0020               	movlb	0	; select bank0
  5053  072B  0095               	movwf	21	;volatile
  5054                           
  5055                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  5056  072C  3001               	movlw	1
  5057  072D  07DF               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  5058  072E  3000               	movlw	0
  5059  072F  3DE0               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  5060  0730  3000               	movlw	0
  5061  0731  0260               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  5062  0732  3002               	movlw	2
  5063  0733  1903               	skipnz
  5064  0734  025F               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  5065  0735  1C03               	skipc
  5066  0736  0008               	return
  5067                           
  5068                           ;tmr0.c: 119: {
  5069                           ;tmr0.c: 121: TMR0_CallBack();
  5070  0737  3187  2755         	fcall	_TMR0_CallBack
  5071                           
  5072                           ;tmr0.c: 124: CountCallBack = 0;
  5073  0739  0020               	movlb	0	; select bank0
  5074  073A  01DF               	clrf	TMR0_ISR@CountCallBack	;volatile
  5075  073B  01E0               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  5076  073C  0008               	return
  5077  073D                     __end_of_TMR0_ISR:	
  5078                           
  5079                           	psect	text20
  5080  0755                     __ptext20:	
  5081 ;; *************** function _TMR0_CallBack *****************
  5082 ;; Defined at:
  5083 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5097 ;;      Params:         0       0       0       0       0       0
  5098 ;;      Locals:         0       0       0       0       0       0
  5099 ;;      Temps:          0       0       0       0       0       0
  5100 ;;      Totals:         0       0       0       0       0       0
  5101 ;;Total ram usage:        0 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    3
  5104 ;; This function calls:
  5105 ;;		Absolute function
  5106 ;;		_TMR0_DefaultInterruptHandler
  5107 ;;		_my10msTimerISR
  5108 ;; This function is called by:
  5109 ;;		_TMR0_ISR
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _TMR0_CallBack
  5115  0755                     _TMR0_CallBack:	
  5116                           
  5117                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5121  0755  0020               	movlb	0	; select bank0
  5122  0756  0861               	movf	_TMR0_InterruptHandler,w
  5123  0757  0462               	iorwf	_TMR0_InterruptHandler+1,w
  5124  0758  1903               	btfsc	3,2
  5125  0759  0008               	return
  5126                           
  5127                           ;tmr0.c: 135: {
  5128                           ;tmr0.c: 136: TMR0_InterruptHandler();
  5129  075A  0862               	movf	_TMR0_InterruptHandler+1,w
  5130  075B  008A               	movwf	10
  5131  075C  0861               	movf	_TMR0_InterruptHandler,w
  5132  075D  000A               	callw
  5133  075E  3187               	pagesel	$
  5134  075F  0008               	return
  5135  0760                     __end_of_TMR0_CallBack:	
  5136                           
  5137                           	psect	text21
  5138  0781                     __ptext21:	
  5139 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5140 ;; Defined at:
  5141 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;		None
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		None
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5155 ;;      Params:         0       0       0       0       0       0
  5156 ;;      Locals:         0       0       0       0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0
  5158 ;;      Totals:         0       0       0       0       0       0
  5159 ;;Total ram usage:        0 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_TMR0_Initialize
  5165 ;;		_TMR0_CallBack
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           
  5170                           ;psect for function _TMR0_DefaultInterruptHandler
  5171  0781                     _TMR0_DefaultInterruptHandler:	
  5172                           
  5173                           ;incstack = 0
  5174                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5175  0781  0008               	return
  5176  0782                     __end_of_TMR0_DefaultInterruptHandler:	
  5177                           
  5178                           	psect	text22
  5179  077A                     __ptext22:	
  5180 ;; *************** function _my10msTimerISR *****************
  5181 ;; Defined at:
  5182 ;;		line 107 in file "main.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;		None
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0, pclath, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5196 ;;      Params:         0       0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0
  5199 ;;      Totals:         0       0       0       0       0       0
  5200 ;;Total ram usage:        0 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    2
  5203 ;; This function calls:
  5204 ;;		_LED_update_loop
  5205 ;;		_button_update_loop
  5206 ;; This function is called by:
  5207 ;;		_main
  5208 ;;		_TMR0_CallBack
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _my10msTimerISR
  5214  077A                     _my10msTimerISR:	
  5215                           
  5216                           ;main.c: 109: LED_update_loop();
  5217                           
  5218                           ;incstack = 0
  5219                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  5220  077A  3185  25E2  3187   	fcall	_LED_update_loop
  5221                           
  5222                           ;main.c: 110: button_update_loop();
  5223  077D  3184  24A4         	fcall	_button_update_loop
  5224  077F  0008               	return
  5225  0780                     __end_of_my10msTimerISR:	
  5226                           
  5227                           	psect	text23
  5228  04A4                     __ptext23:	
  5229 ;; *************** function _button_update_loop *****************
  5230 ;; Defined at:
  5231 ;;		line 78 in file "interact.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  current_stat    1    3[COMMON] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5245 ;;      Params:         0       0       0       0       0       0
  5246 ;;      Locals:         1       0       0       0       0       0
  5247 ;;      Temps:          2       0       0       0       0       0
  5248 ;;      Totals:         3       0       0       0       0       0
  5249 ;;Total ram usage:        3 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    1
  5252 ;; This function calls:
  5253 ;;		_get_button_state
  5254 ;; This function is called by:
  5255 ;;		_my10msTimerISR
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _button_update_loop
  5261  04A4                     _button_update_loop:	
  5262                           
  5263                           ;interact.c: 80: unsigned char current_state = get_button_state();
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  5267  04A4  3187  2749  3184   	fcall	_get_button_state
  5268  04A7  00F6               	movwf	??_button_update_loop
  5269  04A8  0876               	movf	??_button_update_loop,w
  5270  04A9  00F8               	movwf	button_update_loop@current_state
  5271                           
  5272                           ;interact.c: 81: if (!b_push_confirmed)
  5273  04AA  0020               	movlb	0	; select bank0
  5274  04AB  0867               	movf	_b_push_confirmed,w	;volatile
  5275  04AC  1D03               	btfss	3,2
  5276  04AD  2CD3               	goto	i1l1822
  5277                           
  5278                           ;interact.c: 82: {
  5279                           ;interact.c: 84: if (current_state != b_last_state)
  5280  04AE  0878               	movf	button_update_loop@current_state,w
  5281  04AF  00F6               	movwf	??_button_update_loop
  5282  04B0  01F7               	clrf	??_button_update_loop+1
  5283  04B1  0871               	movf	_b_last_state+1,w	;volatile
  5284  04B2  0677               	xorwf	??_button_update_loop+1,w
  5285  04B3  1D03               	skipz
  5286  04B4  2CB7               	goto	u149_25
  5287  04B5  0870               	movf	_b_last_state,w	;volatile
  5288  04B6  0676               	xorwf	??_button_update_loop,w
  5289  04B7                     u149_25:	
  5290  04B7  1903               	skipnz
  5291  04B8  2CC2               	goto	i1l1814
  5292                           
  5293                           ;interact.c: 85: {
  5294                           ;interact.c: 86: b_count_pressed = 0;
  5295  04B9  01F2               	clrf	_b_count_pressed	;volatile
  5296                           
  5297                           ;interact.c: 87: b_last_state = current_state;
  5298  04BA  0878               	movf	button_update_loop@current_state,w
  5299  04BB  00F6               	movwf	??_button_update_loop
  5300  04BC  01F7               	clrf	??_button_update_loop+1
  5301  04BD  0876               	movf	??_button_update_loop,w
  5302  04BE  00F0               	movwf	_b_last_state	;volatile
  5303  04BF  0877               	movf	??_button_update_loop+1,w
  5304  04C0  00F1               	movwf	_b_last_state+1	;volatile
  5305                           
  5306                           ;interact.c: 88: }
  5307  04C1  0008               	return
  5308  04C2                     i1l1814:	
  5309                           
  5310                           ;interact.c: 89: else if (b_last_state == 1)
  5311  04C2  0370               	decf	_b_last_state,w	;volatile
  5312  04C3  0471               	iorwf	_b_last_state+1,w	;volatile
  5313  04C4  1D03               	btfss	3,2
  5314  04C5  0008               	return
  5315                           
  5316                           ;interact.c: 90: {
  5317                           ;interact.c: 91: b_count_pressed++;
  5318  04C6  3001               	movlw	1
  5319  04C7  00F6               	movwf	??_button_update_loop
  5320  04C8  0876               	movf	??_button_update_loop,w
  5321  04C9  07F2               	addwf	_b_count_pressed,f	;volatile
  5322                           
  5323                           ;interact.c: 92: if (b_count_pressed > 5)
  5324  04CA  3006               	movlw	6
  5325  04CB  0272               	subwf	_b_count_pressed,w	;volatile
  5326  04CC  1C03               	skipc
  5327  04CD  0008               	return
  5328                           
  5329                           ;interact.c: 93: b_push_confirmed = 1;
  5330  04CE  3001               	movlw	1
  5331  04CF  00F6               	movwf	??_button_update_loop
  5332  04D0  0876               	movf	??_button_update_loop,w
  5333  04D1  00E7               	movwf	_b_push_confirmed	;volatile
  5334                           
  5335                           ;interact.c: 94: }
  5336                           ;interact.c: 95: }
  5337  04D2  0008               	return
  5338  04D3                     i1l1822:	
  5339                           
  5340                           ;interact.c: 96: else
  5341                           ;interact.c: 97: {
  5342                           ;interact.c: 98: if (current_state != b_last_state)
  5343  04D3  0878               	movf	button_update_loop@current_state,w
  5344  04D4  00F6               	movwf	??_button_update_loop
  5345  04D5  01F7               	clrf	??_button_update_loop+1
  5346  04D6  0871               	movf	_b_last_state+1,w	;volatile
  5347  04D7  0677               	xorwf	??_button_update_loop+1,w
  5348  04D8  1D03               	skipz
  5349  04D9  2CDC               	goto	u152_25
  5350  04DA  0870               	movf	_b_last_state,w	;volatile
  5351  04DB  0676               	xorwf	??_button_update_loop,w
  5352  04DC                     u152_25:	
  5353  04DC  1903               	skipnz
  5354  04DD  2CEB               	goto	i1l1830
  5355                           
  5356                           ;interact.c: 99: {
  5357                           ;interact.c: 100: b_count_released = 0;
  5358  04DE  01E5               	clrf	_b_count_released	;volatile
  5359                           
  5360                           ;interact.c: 101: b_last_state = current_state;
  5361  04DF  0878               	movf	button_update_loop@current_state,w
  5362  04E0  00F6               	movwf	??_button_update_loop
  5363  04E1  01F7               	clrf	??_button_update_loop+1
  5364  04E2  0876               	movf	??_button_update_loop,w
  5365  04E3  00F0               	movwf	_b_last_state	;volatile
  5366  04E4  0877               	movf	??_button_update_loop+1,w
  5367  04E5  00F1               	movwf	_b_last_state+1	;volatile
  5368                           
  5369                           ;interact.c: 102: b_has_once_been_released = 1;
  5370  04E6  3001               	movlw	1
  5371  04E7  00F6               	movwf	??_button_update_loop
  5372  04E8  0876               	movf	??_button_update_loop,w
  5373  04E9  00E6               	movwf	_b_has_once_been_released	;volatile
  5374                           
  5375                           ;interact.c: 103: }
  5376  04EA  0008               	return
  5377  04EB                     i1l1830:	
  5378                           
  5379                           ;interact.c: 104: else if ((b_last_state == 1)&&(!b_has_once_been_released))
  5380  04EB  0370               	decf	_b_last_state,w	;volatile
  5381  04EC  0471               	iorwf	_b_last_state+1,w	;volatile
  5382  04ED  1D03               	btfss	3,2
  5383  04EE  2CFF               	goto	i1l1840
  5384  04EF  0866               	movf	_b_has_once_been_released,w	;volatile
  5385  04F0  1D03               	btfss	3,2
  5386  04F1  2CFF               	goto	i1l1840
  5387                           
  5388                           ;interact.c: 105: {
  5389                           ;interact.c: 106: b_count_pressed++;
  5390  04F2  3001               	movlw	1
  5391  04F3  00F6               	movwf	??_button_update_loop
  5392  04F4  0876               	movf	??_button_update_loop,w
  5393  04F5  07F2               	addwf	_b_count_pressed,f	;volatile
  5394                           
  5395                           ;interact.c: 107: if (b_count_pressed >= 100)
  5396  04F6  3064               	movlw	100
  5397  04F7  0272               	subwf	_b_count_pressed,w	;volatile
  5398  04F8  1C03               	skipc
  5399  04F9  0008               	return
  5400                           
  5401                           ;interact.c: 108: b_confirmed_state = long_push;
  5402  04FA  3002               	movlw	2
  5403  04FB  00F6               	movwf	??_button_update_loop
  5404  04FC  0876               	movf	??_button_update_loop,w
  5405  04FD  00E4               	movwf	_b_confirmed_state	;volatile
  5406                           
  5407                           ;interact.c: 109: }
  5408  04FE  0008               	return
  5409  04FF                     i1l1840:	
  5410                           
  5411                           ;interact.c: 110: else if (b_last_state == 0)
  5412  04FF  0870               	movf	_b_last_state,w	;volatile
  5413  0500  0471               	iorwf	_b_last_state+1,w	;volatile
  5414  0501  1D03               	btfss	3,2
  5415  0502  0008               	return
  5416                           
  5417                           ;interact.c: 111: {
  5418                           ;interact.c: 112: b_count_released++;
  5419  0503  3001               	movlw	1
  5420  0504  00F6               	movwf	??_button_update_loop
  5421  0505  0876               	movf	??_button_update_loop,w
  5422  0506  07E5               	addwf	_b_count_released,f	;volatile
  5423                           
  5424                           ;interact.c: 113: if (b_count_released > 10)
  5425  0507  300B               	movlw	11
  5426  0508  0265               	subwf	_b_count_released,w	;volatile
  5427  0509  1C03               	skipc
  5428  050A  0008               	return
  5429                           
  5430                           ;interact.c: 114: if (b_count_pressed >= 75)
  5431  050B  304B               	movlw	75
  5432  050C  0272               	subwf	_b_count_pressed,w	;volatile
  5433  050D  1C03               	skipc
  5434  050E  2D14               	goto	i1l1850
  5435                           
  5436                           ;interact.c: 115: b_confirmed_state = long_push;
  5437  050F  3002               	movlw	2
  5438  0510  00F6               	movwf	??_button_update_loop
  5439  0511  0876               	movf	??_button_update_loop,w
  5440  0512  00E4               	movwf	_b_confirmed_state	;volatile
  5441  0513  0008               	return
  5442  0514                     i1l1850:	
  5443                           
  5444                           ;interact.c: 116: else
  5445                           ;interact.c: 117: b_confirmed_state = short_push;
  5446  0514  3001               	movlw	1
  5447  0515  00F6               	movwf	??_button_update_loop
  5448  0516  0876               	movf	??_button_update_loop,w
  5449  0517  00E4               	movwf	_b_confirmed_state	;volatile
  5450  0518  0008               	return
  5451  0519                     __end_of_button_update_loop:	
  5452                           
  5453                           	psect	text24
  5454  0749                     __ptext24:	
  5455 ;; *************** function _get_button_state *****************
  5456 ;; Defined at:
  5457 ;;		line 58 in file "interact.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  state           1    0[COMMON] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      unsigned char 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5471 ;;      Params:         0       0       0       0       0       0
  5472 ;;      Locals:         1       0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0
  5474 ;;      Totals:         1       0       0       0       0       0
  5475 ;;Total ram usage:        1 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_button_update_loop
  5481 ;;		_button_init
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _get_button_state
  5487  0749                     _get_button_state:	
  5488                           
  5489                           ;interact.c: 61: unsigned char state = PORTBbits.RB0;
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5493  0749  3000               	movlw	0
  5494  074A  0020               	movlb	0	; select bank0
  5495  074B  180D               	btfsc	13,0	;volatile
  5496  074C  3001               	movlw	1
  5497  074D  00F5               	movwf	get_button_state@state
  5498                           
  5499                           ;interact.c: 62: if (state == 1)
  5500  074E  0375               	decf	get_button_state@state,w
  5501  074F  1D03               	btfss	3,2
  5502  0750  2F53               	goto	i1l1756
  5503                           
  5504                           ;interact.c: 63: return 0;
  5505  0751  3000               	movlw	0
  5506  0752  0008               	return
  5507  0753                     i1l1756:	
  5508                           
  5509                           ;interact.c: 64: else return 1;
  5510  0753  3001               	movlw	1
  5511  0754  0008               	return
  5512  0755                     __end_of_get_button_state:	
  5513                           
  5514                           	psect	text25
  5515  05E2                     __ptext25:	
  5516 ;; *************** function _LED_update_loop *****************
  5517 ;; Defined at:
  5518 ;;		line 30 in file "interact.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;		None
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5532 ;;      Params:         0       0       0       0       0       0
  5533 ;;      Locals:         0       0       0       0       0       0
  5534 ;;      Temps:          1       0       0       0       0       0
  5535 ;;      Totals:         1       0       0       0       0       0
  5536 ;;Total ram usage:        1 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_my10msTimerISR
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _LED_update_loop
  5547  05E2                     _LED_update_loop:	
  5548                           
  5549                           ;interact.c: 32: if (LED_state == manual_mode)
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  5553  05E2  3004               	movlw	4
  5554  05E3  0020               	movlb	0	; select bank0
  5555  05E4  066F               	xorwf	_LED_state,w
  5556  05E5  1903               	btfsc	3,2
  5557  05E6  0008               	return
  5558                           
  5559                           ;interact.c: 34: else if (LED_state == slow_blinking)
  5560                           
  5561                           ;interact.c: 33: return;
  5562  05E7  3002               	movlw	2
  5563  05E8  066F               	xorwf	_LED_state,w
  5564  05E9  1D03               	btfss	3,2
  5565  05EA  2DF8               	goto	i1l1794
  5566                           
  5567                           ;interact.c: 35: {
  5568                           ;interact.c: 36: LED_counter++;
  5569  05EB  3001               	movlw	1
  5570  05EC  00F5               	movwf	??_LED_update_loop
  5571  05ED  0875               	movf	??_LED_update_loop,w
  5572  05EE  07E3               	addwf	_LED_counter,f	;volatile
  5573                           
  5574                           ;interact.c: 37: if (LED_counter >= 85)
  5575  05EF  3055               	movlw	85
  5576  05F0  0263               	subwf	_LED_counter,w	;volatile
  5577  05F1  1C03               	skipc
  5578  05F2  0008               	return
  5579                           
  5580                           ;interact.c: 38: {
  5581                           ;interact.c: 39: LED_counter = 0;
  5582  05F3  01E3               	clrf	_LED_counter	;volatile
  5583                           
  5584                           ;interact.c: 40: do { LATA2 = ~LATA2; } while(0);
  5585  05F4  3004               	movlw	4
  5586  05F5  0022               	movlb	2	; select bank2
  5587  05F6  068C               	xorwf	12,f
  5588                           
  5589                           ;interact.c: 41: }
  5590                           ;interact.c: 42: }
  5591  05F7  0008               	return
  5592  05F8                     i1l1794:	
  5593                           
  5594                           ;interact.c: 43: else if (LED_state == fast_blinking)
  5595  05F8  3003               	movlw	3
  5596  05F9  0020               	movlb	0	; select bank0
  5597  05FA  066F               	xorwf	_LED_state,w
  5598  05FB  1D03               	btfss	3,2
  5599  05FC  0008               	return
  5600                           
  5601                           ;interact.c: 44: {
  5602                           ;interact.c: 45: LED_counter++;
  5603  05FD  3001               	movlw	1
  5604  05FE  00F5               	movwf	??_LED_update_loop
  5605  05FF  0875               	movf	??_LED_update_loop,w
  5606  0600  07E3               	addwf	_LED_counter,f	;volatile
  5607                           
  5608                           ;interact.c: 46: if (LED_counter >= 20)
  5609  0601  3014               	movlw	20
  5610  0602  0263               	subwf	_LED_counter,w	;volatile
  5611  0603  1C03               	skipc
  5612  0604  0008               	return
  5613                           
  5614                           ;interact.c: 47: {
  5615                           ;interact.c: 48: LED_counter = 0;
  5616  0605  01E3               	clrf	_LED_counter	;volatile
  5617                           
  5618                           ;interact.c: 49: do { LATA2 = ~LATA2; } while(0);
  5619  0606  3004               	movlw	4
  5620  0607  0022               	movlb	2	; select bank2
  5621  0608  068C               	xorwf	12,f
  5622  0609  0008               	return
  5623  060A                     __end_of_LED_update_loop:	
  5624                           
  5625                           	psect	text26
  5626  068D                     __ptext26:	
  5627 ;; *************** function _EUSART_Transmit_ISR *****************
  5628 ;; Defined at:
  5629 ;;		line 169 in file "mcc_generated_files/eusart.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5643 ;;      Params:         0       0       0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0
  5645 ;;      Temps:          1       0       0       0       0       0
  5646 ;;      Totals:         1       0       0       0       0       0
  5647 ;;Total ram usage:        1 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_INTERRUPT_InterruptManager
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function _EUSART_Transmit_ISR
  5658  068D                     _EUSART_Transmit_ISR:	
  5659                           
  5660                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5661                           
  5662                           ;incstack = 0
  5663                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5664  068D  3008               	movlw	8
  5665  068E  0020               	movlb	0	; select bank0
  5666  068F  026B               	subwf	_eusartTxBufferRemaining,w	;volatile
  5667  0690  1803               	skipnc
  5668  0691  2EA7               	goto	i1l179
  5669                           
  5670                           ;eusart.c: 174: {
  5671                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  5672  0692  086D               	movf	_eusartTxTail,w
  5673  0693  3E53               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5674  0694  0086               	movwf	6
  5675  0695  0187               	clrf	7
  5676  0696  0801               	movf	1,w
  5677  0697  0023               	movlb	3	; select bank3
  5678  0698  009A               	movwf	26	;volatile
  5679  0699  3001               	movlw	1
  5680  069A  00F5               	movwf	??_EUSART_Transmit_ISR
  5681  069B  0875               	movf	??_EUSART_Transmit_ISR,w
  5682  069C  0020               	movlb	0	; select bank0
  5683  069D  07ED               	addwf	_eusartTxTail,f
  5684                           
  5685                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5686  069E  3008               	movlw	8
  5687  069F  026D               	subwf	_eusartTxTail,w
  5688  06A0  1803               	btfsc	3,0
  5689                           
  5690                           ;eusart.c: 177: {
  5691                           ;eusart.c: 178: eusartTxTail = 0;
  5692  06A1  01ED               	clrf	_eusartTxTail
  5693                           
  5694                           ;eusart.c: 179: }
  5695                           ;eusart.c: 180: eusartTxBufferRemaining++;
  5696  06A2  3001               	movlw	1
  5697  06A3  00F5               	movwf	??_EUSART_Transmit_ISR
  5698  06A4  0875               	movf	??_EUSART_Transmit_ISR,w
  5699  06A5  07EB               	addwf	_eusartTxBufferRemaining,f	;volatile
  5700                           
  5701                           ;eusart.c: 181: }
  5702  06A6  0008               	return
  5703  06A7                     i1l179:	
  5704                           
  5705                           ;eusart.c: 182: else
  5706                           ;eusart.c: 183: {
  5707                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  5708  06A7  0021               	movlb	1	; select bank1
  5709  06A8  1211               	bcf	17,4	;volatile
  5710  06A9  0008               	return
  5711  06AA                     __end_of_EUSART_Transmit_ISR:	
  5712                           
  5713                           	psect	text27
  5714  06E1                     __ptext27:	
  5715 ;; *************** function _EUSART_Receive_ISR *****************
  5716 ;; Defined at:
  5717 ;;		line 188 in file "mcc_generated_files/eusart.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      void 
  5724 ;; Registers used:
  5725 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5731 ;;      Params:         0       0       0       0       0       0
  5732 ;;      Locals:         0       0       0       0       0       0
  5733 ;;      Temps:          1       0       0       0       0       0
  5734 ;;      Totals:         1       0       0       0       0       0
  5735 ;;Total ram usage:        1 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; This function calls:
  5738 ;;		Nothing
  5739 ;; This function is called by:
  5740 ;;		_INTERRUPT_InterruptManager
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _EUSART_Receive_ISR
  5746  06E1                     _EUSART_Receive_ISR:	
  5747                           
  5748                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5752  06E1  0023               	movlb	3	; select bank3
  5753  06E2  1C9D               	btfss	29,1	;volatile
  5754  06E3  2EE6               	goto	i1l2024
  5755                           
  5756                           ;eusart.c: 192: {
  5757                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  5758  06E4  139D               	bcf	29,7	;volatile
  5759                           
  5760                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  5761  06E5  179D               	bsf	29,7	;volatile
  5762  06E6                     i1l2024:	
  5763                           
  5764                           ;eusart.c: 197: }
  5765                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  5766  06E6  0819               	movf	25,w	;volatile
  5767  06E7  00F5               	movwf	??_EUSART_Receive_ISR
  5768  06E8  0020               	movlb	0	; select bank0
  5769  06E9  0869               	movf	_eusartRxHead,w
  5770  06EA  3E4B               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5771  06EB  0086               	movwf	6
  5772  06EC  0187               	clrf	7
  5773  06ED  0875               	movf	??_EUSART_Receive_ISR,w
  5774  06EE  0081               	movwf	1
  5775  06EF  3001               	movlw	1
  5776  06F0  00F5               	movwf	??_EUSART_Receive_ISR
  5777  06F1  0875               	movf	??_EUSART_Receive_ISR,w
  5778  06F2  07E9               	addwf	_eusartRxHead,f
  5779                           
  5780                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5781  06F3  3008               	movlw	8
  5782  06F4  0269               	subwf	_eusartRxHead,w
  5783  06F5  1803               	btfsc	3,0
  5784                           
  5785                           ;eusart.c: 202: {
  5786                           ;eusart.c: 203: eusartRxHead = 0;
  5787  06F6  01E9               	clrf	_eusartRxHead
  5788                           
  5789                           ;eusart.c: 204: }
  5790                           ;eusart.c: 205: eusartRxCount++;
  5791  06F7  3001               	movlw	1
  5792  06F8  00F5               	movwf	??_EUSART_Receive_ISR
  5793  06F9  0875               	movf	??_EUSART_Receive_ISR,w
  5794  06FA  07F3               	addwf	_eusartRxCount,f	;volatile
  5795  06FB  0008               	return
  5796  06FC                     __end_of_EUSART_Receive_ISR:	
  5797  007E                     btemp	set	126	;btemp
  5798  007E                     int$flags	set	126
  5799  007E                     wtemp	set	126
  5800  007E                     wtemp0	set	126
  5801  0080                     wtemp1	set	128
  5802  0082                     wtemp2	set	130
  5803  0084                     wtemp3	set	132
  5804  0086                     wtemp4	set	134
  5805  0088                     wtemp5	set	136
  5806  007F                     wtemp6	set	127
  5807  007E                     ttemp	set	126
  5808  007E                     ttemp0	set	126
  5809  0081                     ttemp1	set	129
  5810  0084                     ttemp2	set	132
  5811  0087                     ttemp3	set	135
  5812  007F                     ttemp4	set	127
  5813  007E                     ltemp	set	126
  5814  007E                     ltemp0	set	126
  5815  0082                     ltemp1	set	130
  5816  0086                     ltemp2	set	134
  5817  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        1
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     43      80
    BANK1            80      1       1
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            32      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _multiply_fp->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_convert_to_fp
    _GPS_Initialize->_printf
    _printf->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6734
                                             40 BANK0      3     3      0
                                              0 BANK1      1     1      0
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    1467
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     656
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     161
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     161
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     161
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     155
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    4363
                                             21 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4     662
                                              0 BANK0     21    17      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     359
                                             10 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     291
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              4 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   3     3      0     112
                                              1 COMMON     3     3      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
   _LED_set_state
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _multiply_fp
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             160      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      1       1       8        1.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            20      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      5B      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Sep 20 07:14:14 2016

                             __CFG_CP$OFF 0000                                        l24 0765  
                     ___wmul@multiplicand 0022                           _timer0ReloadVal 0074  
                  __end_of_my10msTimerISR 0780                                       l333 064A  
                                     l167 0617                                       l268 03EC  
                                     l488 022E                                       l596 06B3  
                            __CFG_CPD$OFF 0000                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0075                              __CFG_LVP$OFF 0000  
                                    l3002 0256                                      l3020 028B  
                                    l3008 026D                                      l3054 045F  
                                    l3064 0495                                      l3048 0448  
                                    l2514 060C                                      l3058 046B  
                                    l2620 03BA                                      l3068 04A1  
                                    l2710 0052                                      l2528 062B  
                                    l2640 0675                                      l2632 0408  
                                    l2800 00DE                                      l2626 03E4  
                                    l2644 06AD                                      l2732 0076  
                                    l2708 0043                                      l2910 0193  
                                    l2830 010A                                      l2822 0102  
                                    l2742 008A                                      l2662 05C5  
                                    l2920 01B6                                      l2832 010B  
                                    l2690 0573                                      l2930 01E9  
                                    l2922 01D3                                      l2906 0183  
                                    l2842 011D                                      l2746 008C  
                                    l2658 05BB                                      l2588 0653  
                                    l2916 0195                                      l2924 0175  
                                    l2780 00C3                                      l2748 008D  
                                    l2676 063A                                      l2926 01D8  
                                    l2790 00CC                                      l2758 009F  
                                    l2678 0641                                      l2696 0588  
                                    l2960 0215                                      l2952 020D  
                                    l2872 0149                                      l2864 0141  
                                    l2970 0227                                      l2962 0217  
                                    l2874 014A                                      l2788 00CB  
                                    l2992 024C                                      l2896 016E  
                                    l2996 024E                                      l2988 0244  
                                    STR_1 0527                                      STR_2 055B  
                                    _LATA 010C                                      _LATB 010D  
                                    u3605 02B0                                      u3615 02CB  
                                    u3625 02E3                                      u2915 06B4  
                                    u2835 03A1                                      u3635 0313  
                                    u2925 06B9                                      u3565 025E  
                                    u3645 0367                                      u2864 03D6  
                                    u2865 03D4                                      u2955 05C6  
                                    u3595 0298                                      u2965 05CD  
                                    u3847 044F                                      i1l73 0024  
                                    u3857 049C                                      u3867 0579  
                                    u3877 0596                                      u3887 05AB  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _WPUA 020C                                      _WPUB 020D  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                  __end_of_GPS_read_speed 028D                                      _main 042F  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0029  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_MCLRE$ON 0000                   __end_of_TMR0_Initialize 0728  
                           __CFG_PLLEN$ON 0000            ??_TMR0_DefaultInterruptHandler 0075  
                           ?_EUSART_Write 0075            __size_of_OSCILLATOR_Initialize 0008  
           __end_of_OSCILLATOR_Initialize 0768                                     ?_main 0075  
                           _convert_to_fp 0386                             __CFG_WDTE$OFF 0000  
                                   _LATA2 0862                           ?_my10msTimerISR 0075  
                                   i1l179 06A7                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISB 008D                                     _TXREG 019A  
                                   _TXSTA 019E                          ??_GPS_Initialize 002A  
       __size_of_TMR0_SetInterruptHandler 0006                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0020                           __end_of_fp_x0_a 051D  
                         __end_of_fp_x0_b 0521                          __end_of_TMR0_ISR 073D  
                                   _speed 005B                                     _putch 0774  
                 __end_of_LED_update_loop 060A                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0075                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                           multiply_fp@n1 002C                             multiply_fp@n2 0030  
                         __initialization 002B                    __size_of_LED_set_state 0021  
                            __end_of_main 04A4                            ??_EUSART_Write 0020  
             ?_INTERRUPT_InterruptManager 0075                            ?_convert_to_fp 0020  
                                  ??_main 0048                              _b_last_state 0070  
                        _b_push_confirmed 0067                           _b_count_pressed 0072  
                                  _ANSELA 018C                                    ?_putch 0075  
                                  _ANSELB 018D                                    i1l2024 06E6  
                                  i1l2406 001A                                    i1l1830 04EB  
                                  i1l1814 04C2                                    i1l1822 04D3  
                                  i1l1840 04FF                                    i1l1850 0514  
                                  i1l1756 0753                                    i1l2398 000F  
                                  i1l1794 05F8                                    u152_25 04DC  
                                  u149_25 04B7                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                          __CFG_PWRTE$OFF 0000                        convert_to_fp@i_bit 002E  
                                  ___lmul 05B2                                    ___wmul 06AA  
                          __CFG_STVREN$ON 0000                       _EUSART_Transmit_ISR 068D  
                        ?_TMR0_Initialize 0075                __end_of_button_update_loop 0519  
                                  _printf 0670                             _LED_set_state 062E  
                   __end_of_TMR0_CallBack 0760  TMR0_SetInterruptHandler@InterruptHandler 0020  
               __size_of_get_button_state 000C                      ?_EUSART_Transmit_ISR 0075  
                  convert_to_fp@res_fract 002C                          ?_LED_update_loop 0075  
                            ?_multiply_fp 002C                      __size_of_EUSART_Read 0021  
                       _SYSTEM_Initialize 073D                   __end_of__initialization 003B  
                          multiply_fp@res 0042                        ?_SYSTEM_Initialize 0075  
                          __pcstackCOMMON 0075                              __pidataBANK0 0780  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0075  
                         ??_convert_to_fp 0024                             __end_of_putch 077A  
                          _OPTION_REGbits 0095                     TMR0_ISR@CountCallBack 005F  
                          ?_LED_set_state 0075                  _b_has_once_been_released 0066  
               __end_of_SYSTEM_Initialize 0749                     ??_EUSART_Transmit_ISR 0075  
                                 ??_putch 0022                                __pbssBANK0 004B  
                    __end_of_EUSART_Write 062E                          _b_count_released 0065  
             __size_of_EUSART_Receive_ISR 001B                                __pmaintext 042F  
        __end_of_TMR0_SetInterruptHandler 0774                                   ?___lmul 0020  
                                 ?___wmul 0020                                ??_TMR0_ISR 0079  
                        ??_my10msTimerISR 0079                                __pintentry 0004  
                                 _BAUDCON 019F                            ___lmul@product 0028  
                                 _APFCON0 011D                                   _APFCON1 011E  
                                 ?_printf 0023                     get_button_state@state 0075  
                           _eusartRxCount 0073                                   _OSCSTAT 009A  
                                 _OSCTUNE 0098                          ??_GPS_read_speed 0035  
                         __size_of___lmul 0030                           __size_of___wmul 001C  
                 convert_to_fp@fract_part 0022                                   _fp_x0_a 0519  
                                 _fp_x0_b 051D                                   __ptext1 028D  
                                 __ptext2 05B2                                   __ptext3 073D  
                                 __ptext4 0713                                   __ptext5 076E  
                                 __ptext6 06FC                                   __ptext7 0760  
                                 __ptext8 06C6                                   __ptext9 062E  
                         __size_of_printf 001D                           ??_LED_set_state 0020  
                   _OSCILLATOR_Initialize 0760              GPS_read_speed@read_speed_fra 003B  
                ??_PIN_MANAGER_Initialize 0020              GPS_read_speed@read_speed_int 0039  
              __size_of_SYSTEM_Initialize 000C                                   clrloop0 0769  
                        _get_button_state 0749                                   main@tmp 00A0  
                    end_of_initialization 003B                         __end_of_ratio_mph 0525  
                  LED_set_state@new_state 0021                                 _LED_state 006F  
                    __size_of_multiply_fp 00F9                         _EUSART_Initialize 06C6  
                      ?_EUSART_Initialize 0075                                 _RCSTAbits 019D  
                                 printf@c 0029                                   printf@f 0023  
                            __pstringtext 0519                       ??_EUSART_Initialize 0020  
                _TMR0_SetInterruptHandler 076E                                 _PORTBbits 000D  
                    GPS_read_speed@i_buff 0046                      GPS_read_speed@m_char 0047  
                    GPS_read_speed@buffer 003F                          __CFG_FOSC$INTOSC 0000  
                   __size_of_EUSART_Write 0024                        _button_update_loop 04A4  
               __end_of_EUSART_Initialize 06E1                   __size_of_GPS_Initialize 0045  
                     ?_button_update_loop 0075                            __end_of___lmul 05E2  
                          __end_of___wmul 06C6                              _EUSART_Write 060A  
                       __size_of_TMR0_ISR 0015                          convert_to_fp@one 0525  
                        convert_to_fp@res 0031                    ?_OSCILLATOR_Initialize 0075  
                    ??_button_update_loop 0076                            __end_of_printf 068D  
                     start_initialization 002B                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0017                             ??_EUSART_Read 0020  
                             putch@txData 0022                  __size_of_LED_update_loop 0028  
                                ??___lmul 0028                                  ??___wmul 0024  
                  __size_of_TMR0_CallBack 000B                               __pdataBANK0 006F  
                   convert_to_fp@int_part 0020                     __end_of_convert_to_fp 042F  
                                ??_printf 0025               __end_of_EUSART_Transmit_ISR 06AA  
                             __pbssCOMMON 0070                                 ___latbits 0001  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                   convert_to_fp@tmp_left 002F                __end_of_EUSART_Receive_ISR 06FC  
              __size_of_EUSART_Initialize 001B                       __end_of_EUSART_Read 0670  
                   _TMR0_InterruptHandler 0061                    _PIN_MANAGER_Initialize 06FC  
                    EUSART_Read@readValue 0021                  __end_of_get_button_state 0755  
                            _eusartRxHead 0069                              _eusartTxHead 006C  
                            _eusartRxTail 006A                              _eusartTxTail 006D  
            ??_INTERRUPT_InterruptManager 0079                   _eusartTxBufferRemaining 006B  
                           _TMR0_CallBack 0755                            __size_of_putch 0006  
                          _eusartRxBuffer 004B                         ??_TMR0_Initialize 0022  
                          _GPS_Initialize 056D                            _eusartTxBuffer 0053  
                          ___wmul@product 0024                                 clear_ram0 0768  
                                _PIE1bits 0091                                 _ratio_mph 0521  
     __size_of_INTERRUPT_InterruptManager 0025                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 0728  
                       ??_LED_update_loop 0075                         ___wmul@multiplier 0020  
                   __end_of_LED_set_state 064F                   __size_of_my10msTimerISR 0006  
                          ?_TMR0_CallBack 0075                               _EUSART_Read 064F  
                       ___lmul@multiplier 0020                    __end_of_GPS_Initialize 05B2  
                           ??_multiply_fp 0034                  __end_ofconvert_to_fp@one 0527  
          GPS_read_speed@no_more_checksum 0038                   __size_of_GPS_read_speed 024E  
                             _LED_counter 0063                         GPS_Initialize@tmp 002D  
                 ??_OSCILLATOR_Initialize 0020           button_update_loop@current_state 0078  
                GPS_read_speed@before_dot 0037                                  __ptext10 003F  
                                __ptext11 0386                                  __ptext20 0755  
                                __ptext12 06AA                                  __ptext21 0781  
                                __ptext13 064F                                  __ptext22 077A  
                                __ptext14 056D                                  __ptext23 04A4  
                                __ptext15 0670                                  __ptext24 0749  
                                __ptext16 0774                                  __ptext25 05E2  
                                __ptext17 060A                                  __ptext26 068D  
                                __ptext27 06E1                                  __ptext19 0728  
                         ?_GPS_Initialize 0075                         _b_confirmed_state 0064  
                           __size_of_main 0075      __end_of_TMR0_DefaultInterruptHandler 0782  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0781  
                     __end_of_multiply_fp 0386                                  int$flags 007E  
                     _b_release_confirmed 0068        __end_of_INTERRUPT_InterruptManager 0029  
              _INTERRUPT_InterruptManager 0004               __size_of_button_update_loop 0075  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0079  
                                intlevel1 0000                   ?_PIN_MANAGER_Initialize 0075  
                 GPS_read_speed@checksum2 003D                         __CFG_CLKOUTEN$OFF 0000  
           ?_TMR0_DefaultInterruptHandler 0075                                  printf@ap 0028  
                      _EUSART_Receive_ISR 06E1                         ?_get_button_state 0075  
                      ??_get_button_state 0075                                _OPTION_REG 0095  
                     ?_EUSART_Receive_ISR 0075                           _TMR0_Initialize 0713  
                  GPS_read_speed@checksum 003E                            _my10msTimerISR 077A  
                             _speed_units 006E                        EUSART_Write@txData 0021  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 0713  
                   GPS_read_speed@i_buff2 0045                               _multiply_fp 028D  
                  __size_of_convert_to_fp 00A9                      ??_EUSART_Receive_ISR 0075  
                          _GPS_read_speed 003F                           _LED_update_loop 05E2  



Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 19 09:17:08 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  0008                     	;# 
    27  0009                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  000D                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0014                     	;# 
    36  0015                     	;# 
    37  0016                     	;# 
    38  0016                     	;# 
    39  0017                     	;# 
    40  0018                     	;# 
    41  0019                     	;# 
    42  001A                     	;# 
    43  001B                     	;# 
    44  001C                     	;# 
    45  001E                     	;# 
    46  001F                     	;# 
    47  008C                     	;# 
    48  008D                     	;# 
    49  0091                     	;# 
    50  0092                     	;# 
    51  0093                     	;# 
    52  0094                     	;# 
    53  0095                     	;# 
    54  0096                     	;# 
    55  0097                     	;# 
    56  0098                     	;# 
    57  0099                     	;# 
    58  009A                     	;# 
    59  009B                     	;# 
    60  009B                     	;# 
    61  009C                     	;# 
    62  009D                     	;# 
    63  009E                     	;# 
    64  010C                     	;# 
    65  010D                     	;# 
    66  0111                     	;# 
    67  0112                     	;# 
    68  0113                     	;# 
    69  0114                     	;# 
    70  0115                     	;# 
    71  0116                     	;# 
    72  0117                     	;# 
    73  0118                     	;# 
    74  0119                     	;# 
    75  011A                     	;# 
    76  011B                     	;# 
    77  011D                     	;# 
    78  011E                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81  0191                     	;# 
    82  0191                     	;# 
    83  0192                     	;# 
    84  0193                     	;# 
    85  0193                     	;# 
    86  0193                     	;# 
    87  0194                     	;# 
    88  0195                     	;# 
    89  0196                     	;# 
    90  0199                     	;# 
    91  019A                     	;# 
    92  019B                     	;# 
    93  019B                     	;# 
    94  019B                     	;# 
    95  019B                     	;# 
    96  019C                     	;# 
    97  019C                     	;# 
    98  019D                     	;# 
    99  019E                     	;# 
   100  019F                     	;# 
   101  020C                     	;# 
   102  020D                     	;# 
   103  0211                     	;# 
   104  0211                     	;# 
   105  0212                     	;# 
   106  0212                     	;# 
   107  0213                     	;# 
   108  0213                     	;# 
   109  0214                     	;# 
   110  0214                     	;# 
   111  0215                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0216                     	;# 
   115  0216                     	;# 
   116  0217                     	;# 
   117  0217                     	;# 
   118  0219                     	;# 
   119  021A                     	;# 
   120  021B                     	;# 
   121  021C                     	;# 
   122  021D                     	;# 
   123  021E                     	;# 
   124  021F                     	;# 
   125  0291                     	;# 
   126  0291                     	;# 
   127  0292                     	;# 
   128  0293                     	;# 
   129  0294                     	;# 
   130  0295                     	;# 
   131  0295                     	;# 
   132  0296                     	;# 
   133  0298                     	;# 
   134  0298                     	;# 
   135  0299                     	;# 
   136  029A                     	;# 
   137  029B                     	;# 
   138  029C                     	;# 
   139  029C                     	;# 
   140  029D                     	;# 
   141  029E                     	;# 
   142  029E                     	;# 
   143  0311                     	;# 
   144  0311                     	;# 
   145  0312                     	;# 
   146  0313                     	;# 
   147  0318                     	;# 
   148  0318                     	;# 
   149  0319                     	;# 
   150  031A                     	;# 
   151  0394                     	;# 
   152  0395                     	;# 
   153  0396                     	;# 
   154  039A                     	;# 
   155  039C                     	;# 
   156  039D                     	;# 
   157  039E                     	;# 
   158  039F                     	;# 
   159  0415                     	;# 
   160  0416                     	;# 
   161  0417                     	;# 
   162  041C                     	;# 
   163  041D                     	;# 
   164  041E                     	;# 
   165  0FE4                     	;# 
   166  0FE5                     	;# 
   167  0FE6                     	;# 
   168  0FE7                     	;# 
   169  0FE8                     	;# 
   170  0FE9                     	;# 
   171  0FEA                     	;# 
   172  0FEB                     	;# 
   173  0FED                     	;# 
   174  0FEE                     	;# 
   175  0FEF                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0016                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001C                     	;# 
   203  001E                     	;# 
   204  001F                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0093                     	;# 
   210  0094                     	;# 
   211  0095                     	;# 
   212  0096                     	;# 
   213  0097                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009B                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  0111                     	;# 
   225  0112                     	;# 
   226  0113                     	;# 
   227  0114                     	;# 
   228  0115                     	;# 
   229  0116                     	;# 
   230  0117                     	;# 
   231  0118                     	;# 
   232  0119                     	;# 
   233  011A                     	;# 
   234  011B                     	;# 
   235  011D                     	;# 
   236  011E                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239  0191                     	;# 
   240  0191                     	;# 
   241  0192                     	;# 
   242  0193                     	;# 
   243  0193                     	;# 
   244  0193                     	;# 
   245  0194                     	;# 
   246  0195                     	;# 
   247  0196                     	;# 
   248  0199                     	;# 
   249  019A                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019C                     	;# 
   255  019C                     	;# 
   256  019D                     	;# 
   257  019E                     	;# 
   258  019F                     	;# 
   259  020C                     	;# 
   260  020D                     	;# 
   261  0211                     	;# 
   262  0211                     	;# 
   263  0212                     	;# 
   264  0212                     	;# 
   265  0213                     	;# 
   266  0213                     	;# 
   267  0214                     	;# 
   268  0214                     	;# 
   269  0215                     	;# 
   270  0215                     	;# 
   271  0215                     	;# 
   272  0216                     	;# 
   273  0216                     	;# 
   274  0217                     	;# 
   275  0217                     	;# 
   276  0219                     	;# 
   277  021A                     	;# 
   278  021B                     	;# 
   279  021C                     	;# 
   280  021D                     	;# 
   281  021E                     	;# 
   282  021F                     	;# 
   283  0291                     	;# 
   284  0291                     	;# 
   285  0292                     	;# 
   286  0293                     	;# 
   287  0294                     	;# 
   288  0295                     	;# 
   289  0295                     	;# 
   290  0296                     	;# 
   291  0298                     	;# 
   292  0298                     	;# 
   293  0299                     	;# 
   294  029A                     	;# 
   295  029B                     	;# 
   296  029C                     	;# 
   297  029C                     	;# 
   298  029D                     	;# 
   299  029E                     	;# 
   300  029E                     	;# 
   301  0311                     	;# 
   302  0311                     	;# 
   303  0312                     	;# 
   304  0313                     	;# 
   305  0318                     	;# 
   306  0318                     	;# 
   307  0319                     	;# 
   308  031A                     	;# 
   309  0394                     	;# 
   310  0395                     	;# 
   311  0396                     	;# 
   312  039A                     	;# 
   313  039C                     	;# 
   314  039D                     	;# 
   315  039E                     	;# 
   316  039F                     	;# 
   317  0415                     	;# 
   318  0416                     	;# 
   319  0417                     	;# 
   320  041C                     	;# 
   321  041D                     	;# 
   322  041E                     	;# 
   323  0FE4                     	;# 
   324  0FE5                     	;# 
   325  0FE6                     	;# 
   326  0FE7                     	;# 
   327  0FE8                     	;# 
   328  0FE9                     	;# 
   329  0FEA                     	;# 
   330  0FEB                     	;# 
   331  0FED                     	;# 
   332  0FEE                     	;# 
   333  0FEF                     	;# 
   334  0000                     	;# 
   335  0001                     	;# 
   336  0002                     	;# 
   337  0003                     	;# 
   338  0004                     	;# 
   339  0005                     	;# 
   340  0006                     	;# 
   341  0007                     	;# 
   342  0008                     	;# 
   343  0009                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000D                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0014                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0016                     	;# 
   355  0017                     	;# 
   356  0018                     	;# 
   357  0019                     	;# 
   358  001A                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001E                     	;# 
   362  001F                     	;# 
   363  008C                     	;# 
   364  008D                     	;# 
   365  0091                     	;# 
   366  0092                     	;# 
   367  0093                     	;# 
   368  0094                     	;# 
   369  0095                     	;# 
   370  0096                     	;# 
   371  0097                     	;# 
   372  0098                     	;# 
   373  0099                     	;# 
   374  009A                     	;# 
   375  009B                     	;# 
   376  009B                     	;# 
   377  009C                     	;# 
   378  009D                     	;# 
   379  009E                     	;# 
   380  010C                     	;# 
   381  010D                     	;# 
   382  0111                     	;# 
   383  0112                     	;# 
   384  0113                     	;# 
   385  0114                     	;# 
   386  0115                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  0118                     	;# 
   390  0119                     	;# 
   391  011A                     	;# 
   392  011B                     	;# 
   393  011D                     	;# 
   394  011E                     	;# 
   395  018C                     	;# 
   396  018D                     	;# 
   397  0191                     	;# 
   398  0191                     	;# 
   399  0192                     	;# 
   400  0193                     	;# 
   401  0193                     	;# 
   402  0193                     	;# 
   403  0194                     	;# 
   404  0195                     	;# 
   405  0196                     	;# 
   406  0199                     	;# 
   407  019A                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019C                     	;# 
   414  019D                     	;# 
   415  019E                     	;# 
   416  019F                     	;# 
   417  020C                     	;# 
   418  020D                     	;# 
   419  0211                     	;# 
   420  0211                     	;# 
   421  0212                     	;# 
   422  0212                     	;# 
   423  0213                     	;# 
   424  0213                     	;# 
   425  0214                     	;# 
   426  0214                     	;# 
   427  0215                     	;# 
   428  0215                     	;# 
   429  0215                     	;# 
   430  0216                     	;# 
   431  0216                     	;# 
   432  0217                     	;# 
   433  0217                     	;# 
   434  0219                     	;# 
   435  021A                     	;# 
   436  021B                     	;# 
   437  021C                     	;# 
   438  021D                     	;# 
   439  021E                     	;# 
   440  021F                     	;# 
   441  0291                     	;# 
   442  0291                     	;# 
   443  0292                     	;# 
   444  0293                     	;# 
   445  0294                     	;# 
   446  0295                     	;# 
   447  0295                     	;# 
   448  0296                     	;# 
   449  0298                     	;# 
   450  0298                     	;# 
   451  0299                     	;# 
   452  029A                     	;# 
   453  029B                     	;# 
   454  029C                     	;# 
   455  029C                     	;# 
   456  029D                     	;# 
   457  029E                     	;# 
   458  029E                     	;# 
   459  0311                     	;# 
   460  0311                     	;# 
   461  0312                     	;# 
   462  0313                     	;# 
   463  0318                     	;# 
   464  0318                     	;# 
   465  0319                     	;# 
   466  031A                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  039A                     	;# 
   471  039C                     	;# 
   472  039D                     	;# 
   473  039E                     	;# 
   474  039F                     	;# 
   475  0415                     	;# 
   476  0416                     	;# 
   477  0417                     	;# 
   478  041C                     	;# 
   479  041D                     	;# 
   480  041E                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  0011                     	;# 
   507  0012                     	;# 
   508  0013                     	;# 
   509  0014                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  001E                     	;# 
   520  001F                     	;# 
   521  008C                     	;# 
   522  008D                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0093                     	;# 
   526  0094                     	;# 
   527  0095                     	;# 
   528  0096                     	;# 
   529  0097                     	;# 
   530  0098                     	;# 
   531  0099                     	;# 
   532  009A                     	;# 
   533  009B                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  0111                     	;# 
   541  0112                     	;# 
   542  0113                     	;# 
   543  0114                     	;# 
   544  0115                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  0118                     	;# 
   548  0119                     	;# 
   549  011A                     	;# 
   550  011B                     	;# 
   551  011D                     	;# 
   552  011E                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  0191                     	;# 
   556  0191                     	;# 
   557  0192                     	;# 
   558  0193                     	;# 
   559  0193                     	;# 
   560  0193                     	;# 
   561  0194                     	;# 
   562  0195                     	;# 
   563  0196                     	;# 
   564  0199                     	;# 
   565  019A                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019C                     	;# 
   572  019D                     	;# 
   573  019E                     	;# 
   574  019F                     	;# 
   575  020C                     	;# 
   576  020D                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0216                     	;# 
   589  0216                     	;# 
   590  0217                     	;# 
   591  0217                     	;# 
   592  0219                     	;# 
   593  021A                     	;# 
   594  021B                     	;# 
   595  021C                     	;# 
   596  021D                     	;# 
   597  021E                     	;# 
   598  021F                     	;# 
   599  0291                     	;# 
   600  0291                     	;# 
   601  0292                     	;# 
   602  0293                     	;# 
   603  0294                     	;# 
   604  0295                     	;# 
   605  0295                     	;# 
   606  0296                     	;# 
   607  0298                     	;# 
   608  0298                     	;# 
   609  0299                     	;# 
   610  029A                     	;# 
   611  029B                     	;# 
   612  029C                     	;# 
   613  029C                     	;# 
   614  029D                     	;# 
   615  029E                     	;# 
   616  029E                     	;# 
   617  0311                     	;# 
   618  0311                     	;# 
   619  0312                     	;# 
   620  0313                     	;# 
   621  0318                     	;# 
   622  0318                     	;# 
   623  0319                     	;# 
   624  031A                     	;# 
   625  0394                     	;# 
   626  0395                     	;# 
   627  0396                     	;# 
   628  039A                     	;# 
   629  039C                     	;# 
   630  039D                     	;# 
   631  039E                     	;# 
   632  039F                     	;# 
   633  0415                     	;# 
   634  0416                     	;# 
   635  0417                     	;# 
   636  041C                     	;# 
   637  041D                     	;# 
   638  041E                     	;# 
   639  0FE4                     	;# 
   640  0FE5                     	;# 
   641  0FE6                     	;# 
   642  0FE7                     	;# 
   643  0FE8                     	;# 
   644  0FE9                     	;# 
   645  0FEA                     	;# 
   646  0FEB                     	;# 
   647  0FED                     	;# 
   648  0FEE                     	;# 
   649  0FEF                     	;# 
   650  0000                     	;# 
   651  0001                     	;# 
   652  0002                     	;# 
   653  0003                     	;# 
   654  0004                     	;# 
   655  0005                     	;# 
   656  0006                     	;# 
   657  0007                     	;# 
   658  0008                     	;# 
   659  0009                     	;# 
   660  000A                     	;# 
   661  000B                     	;# 
   662  000C                     	;# 
   663  000D                     	;# 
   664  0011                     	;# 
   665  0012                     	;# 
   666  0013                     	;# 
   667  0014                     	;# 
   668  0015                     	;# 
   669  0016                     	;# 
   670  0016                     	;# 
   671  0017                     	;# 
   672  0018                     	;# 
   673  0019                     	;# 
   674  001A                     	;# 
   675  001B                     	;# 
   676  001C                     	;# 
   677  001E                     	;# 
   678  001F                     	;# 
   679  008C                     	;# 
   680  008D                     	;# 
   681  0091                     	;# 
   682  0092                     	;# 
   683  0093                     	;# 
   684  0094                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  010C                     	;# 
   697  010D                     	;# 
   698  0111                     	;# 
   699  0112                     	;# 
   700  0113                     	;# 
   701  0114                     	;# 
   702  0115                     	;# 
   703  0116                     	;# 
   704  0117                     	;# 
   705  0118                     	;# 
   706  0119                     	;# 
   707  011A                     	;# 
   708  011B                     	;# 
   709  011D                     	;# 
   710  011E                     	;# 
   711  018C                     	;# 
   712  018D                     	;# 
   713  0191                     	;# 
   714  0191                     	;# 
   715  0192                     	;# 
   716  0193                     	;# 
   717  0193                     	;# 
   718  0193                     	;# 
   719  0194                     	;# 
   720  0195                     	;# 
   721  0196                     	;# 
   722  0199                     	;# 
   723  019A                     	;# 
   724  019B                     	;# 
   725  019B                     	;# 
   726  019B                     	;# 
   727  019B                     	;# 
   728  019C                     	;# 
   729  019C                     	;# 
   730  019D                     	;# 
   731  019E                     	;# 
   732  019F                     	;# 
   733  020C                     	;# 
   734  020D                     	;# 
   735  0211                     	;# 
   736  0211                     	;# 
   737  0212                     	;# 
   738  0212                     	;# 
   739  0213                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0214                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0215                     	;# 
   746  0216                     	;# 
   747  0216                     	;# 
   748  0217                     	;# 
   749  0217                     	;# 
   750  0219                     	;# 
   751  021A                     	;# 
   752  021B                     	;# 
   753  021C                     	;# 
   754  021D                     	;# 
   755  021E                     	;# 
   756  021F                     	;# 
   757  0291                     	;# 
   758  0291                     	;# 
   759  0292                     	;# 
   760  0293                     	;# 
   761  0294                     	;# 
   762  0295                     	;# 
   763  0295                     	;# 
   764  0296                     	;# 
   765  0298                     	;# 
   766  0298                     	;# 
   767  0299                     	;# 
   768  029A                     	;# 
   769  029B                     	;# 
   770  029C                     	;# 
   771  029C                     	;# 
   772  029D                     	;# 
   773  029E                     	;# 
   774  029E                     	;# 
   775  0311                     	;# 
   776  0311                     	;# 
   777  0312                     	;# 
   778  0313                     	;# 
   779  0318                     	;# 
   780  0318                     	;# 
   781  0319                     	;# 
   782  031A                     	;# 
   783  0394                     	;# 
   784  0395                     	;# 
   785  0396                     	;# 
   786  039A                     	;# 
   787  039C                     	;# 
   788  039D                     	;# 
   789  039E                     	;# 
   790  039F                     	;# 
   791  0415                     	;# 
   792  0416                     	;# 
   793  0417                     	;# 
   794  041C                     	;# 
   795  041D                     	;# 
   796  041E                     	;# 
   797  0FE4                     	;# 
   798  0FE5                     	;# 
   799  0FE6                     	;# 
   800  0FE7                     	;# 
   801  0FE8                     	;# 
   802  0FE9                     	;# 
   803  0FEA                     	;# 
   804  0FEB                     	;# 
   805  0FED                     	;# 
   806  0FEE                     	;# 
   807  0FEF                     	;# 
   808                           
   809                           	psect	idataBANK0
   810  054D                     __pidataBANK0:	
   811                           
   812                           ;initializer for _LED_state
   813  054D  3401               	retlw	1
   814                           
   815                           	psect	stringtext
   816  0800                     __pstringtext:	
   817  0800                     _fp_x0_a:	
   818  0800  34D0               	retlw	208
   819  0801  34D2               	retlw	210
   820  0802  3402               	retlw	2
   821  0803  3400               	retlw	0
   822  0804                     __end_of_fp_x0_a:	
   823  0804                     _fp_x0_b:	
   824  0804  34E4               	retlw	228
   825  0805  34E1               	retlw	225
   826  0806  3401               	retlw	1
   827  0807  3400               	retlw	0
   828  0808                     __end_of_fp_x0_b:	
   829  0808                     _ratio_mph:	
   830  0808  3414               	retlw	20
   831  0809  349F               	retlw	159
   832  080A  3400               	retlw	0
   833  080B  3400               	retlw	0
   834  080C                     __end_of_ratio_mph:	
   835  080C                     convert_to_fp@one:	
   836  080C  3401               	retlw	1
   837  080D  3400               	retlw	0
   838  080E                     __end_ofconvert_to_fp@one:	
   839  0095                     _OPTION_REGbits	set	149
   840  0099                     _OSCCON	set	153
   841  009A                     _OSCSTAT	set	154
   842  0098                     _OSCTUNE	set	152
   843  008C                     _TRISA	set	140
   844  008D                     _TRISB	set	141
   845  04D6                     _PLLR	set	1238
   846  011D                     _APFCON0	set	285
   847  011E                     _APFCON1	set	286
   848  010C                     _LATA	set	268
   849  010D                     _LATB	set	269
   850  018C                     _ANSELA	set	396
   851  018D                     _ANSELB	set	397
   852  020C                     _WPUA	set	524
   853  020D                     _WPUB	set	525
   854                           
   855                           ; #config settings
   856  0000                     
   857                           	psect	cinit
   858  07F1                     start_initialization:	
   859  07F1                     __initialization:	
   860                           
   861                           ; Initialize objects allocated to BANK0
   862  07F1  3185  254D         	fcall	__pidataBANK0	;fetch initializer
   863  07F3  00E6               	movwf	__pdataBANK0& (0+127)
   864                           
   865                           ; Clear objects allocated to COMMON
   866  07F4  01FC               	clrf	__pbssCOMMON& (0+127)
   867  07F5  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   868                           
   869                           ; Clear objects allocated to BANK0
   870  07F6  01DF               	clrf	__pbssBANK0& (0+127)
   871  07F7  01E0               	clrf	(__pbssBANK0+1)& (0+127)
   872  07F8  01E1               	clrf	(__pbssBANK0+2)& (0+127)
   873  07F9  01E2               	clrf	(__pbssBANK0+3)& (0+127)
   874  07FA  01E3               	clrf	(__pbssBANK0+4)& (0+127)
   875  07FB  01E4               	clrf	(__pbssBANK0+5)& (0+127)
   876  07FC  01E5               	clrf	(__pbssBANK0+6)& (0+127)
   877  07FD                     end_of_initialization:	
   878                           ;End of C runtime variable initialization code
   879                           
   880  07FD                     __end_of__initialization:	
   881  07FD  0020               	movlb	0
   882  07FE  3185  2D4E         	ljmp	_main	;jump to C main() function
   883                           
   884                           	psect	bssCOMMON
   885  007C                     __pbssCOMMON:	
   886  007C                     _b_last_state:	
   887  007C                     	ds	2
   888                           
   889                           	psect	bssBANK0
   890  005F                     __pbssBANK0:	
   891  005F                     _LED_counter:	
   892  005F                     	ds	1
   893  0060                     _b_confirmed_state:	
   894  0060                     	ds	1
   895  0061                     _b_count_pressed:	
   896  0061                     	ds	1
   897  0062                     _b_count_released:	
   898  0062                     	ds	1
   899  0063                     _b_has_once_been_released:	
   900  0063                     	ds	1
   901  0064                     _b_push_confirmed:	
   902  0064                     	ds	1
   903  0065                     _b_release_confirmed:	
   904  0065                     	ds	1
   905                           
   906                           	psect	dataBANK0
   907  0066                     __pdataBANK0:	
   908  0066                     _LED_state:	
   909  0066                     	ds	1
   910                           
   911                           	psect	cstackCOMMON
   912  0070                     __pcstackCOMMON:	
   913  0070                     ?_main:	
   914  0070                     ?_convert_to_fp:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  0070                     ?___lmul:	
   918                           ; 4 bytes @ 0x0
   919                           
   920  0070                     convert_to_fp@int_part:	
   921                           ; 4 bytes @ 0x0
   922                           
   923  0070                     ___lmul@multiplier:	
   924                           ; 2 bytes @ 0x0
   925                           
   926                           
   927                           ; 4 bytes @ 0x0
   928  0070                     	ds	2
   929  0072                     convert_to_fp@fract_part:	
   930                           
   931                           ; 2 bytes @ 0x2
   932  0072                     	ds	2
   933  0074                     ??_convert_to_fp:	
   934  0074                     ___lmul@multiplicand:	
   935                           ; 1 bytes @ 0x4
   936                           
   937                           
   938                           ; 4 bytes @ 0x4
   939  0074                     	ds	4
   940  0078                     ??___lmul:	
   941  0078                     ___lmul@product:	
   942                           ; 1 bytes @ 0x8
   943                           
   944                           
   945                           ; 4 bytes @ 0x8
   946  0078                     	ds	4
   947  007C                     ??_main:	
   948                           
   949                           	psect	cstackBANK0
   950  0020                     __pcstackBANK0:	
   951                           ; 1 bytes @ 0xC
   952                           
   953  0020                     ?_multiply_fp:	
   954  0020                     convert_to_fp@res_fract:	
   955                           ; 4 bytes @ 0x0
   956                           
   957  0020                     multiply_fp@n1:	
   958                           ; 2 bytes @ 0x0
   959                           
   960                           
   961                           ; 4 bytes @ 0x0
   962  0020                     	ds	2
   963  0022                     convert_to_fp@tmp_left:	
   964                           
   965                           ; 2 bytes @ 0x2
   966  0022                     	ds	2
   967  0024                     convert_to_fp@i_bit:	
   968  0024                     multiply_fp@n2:	
   969                           ; 1 bytes @ 0x4
   970                           
   971                           
   972                           ; 4 bytes @ 0x4
   973  0024                     	ds	1
   974  0025                     convert_to_fp@res:	
   975                           
   976                           ; 4 bytes @ 0x5
   977  0025                     	ds	3
   978  0028                     ??_multiply_fp:	
   979                           
   980                           ; 1 bytes @ 0x8
   981  0028                     	ds	14
   982  0036                     multiply_fp@res:	
   983                           
   984                           ; 4 bytes @ 0x16
   985  0036                     	ds	4
   986  003A                     multiply_fp@n1_fra:	
   987                           
   988                           ; 4 bytes @ 0x1A
   989  003A                     	ds	4
   990  003E                     multiply_fp@n2_fra:	
   991                           
   992                           ; 4 bytes @ 0x1E
   993  003E                     	ds	4
   994  0042                     ?_reciprocal_fp:	
   995  0042                     reciprocal_fp@n:	
   996                           ; 4 bytes @ 0x22
   997                           
   998                           
   999                           ; 4 bytes @ 0x22
  1000  0042                     	ds	4
  1001  0046                     ??_reciprocal_fp:	
  1002                           
  1003                           ; 1 bytes @ 0x26
  1004  0046                     	ds	8
  1005  004E                     _reciprocal_fp$584:	
  1006                           
  1007                           ; 4 bytes @ 0x2E
  1008  004E                     	ds	4
  1009  0052                     reciprocal_fp@i:	
  1010                           
  1011                           ; 1 bytes @ 0x32
  1012  0052                     	ds	1
  1013  0053                     reciprocal_fp@x:	
  1014                           
  1015                           ; 4 bytes @ 0x33
  1016  0053                     	ds	4
  1017  0057                     main@u:	
  1018                           
  1019                           ; 4 bytes @ 0x37
  1020  0057                     	ds	4
  1021  005B                     main@t:	
  1022                           
  1023                           ; 4 bytes @ 0x3B
  1024  005B                     	ds	4
  1025                           
  1026                           	psect	maintext
  1027  054E                     __pmaintext:	
  1028 ;;
  1029 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1030 ;;
  1031 ;; *************** function _main *****************
  1032 ;; Defined at:
  1033 ;;		line 59 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  t               4   59[BANK0 ] long 
  1038 ;;  u               4   55[BANK0 ] long 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : B1F/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1048 ;;      Params:         0       0       0       0       0       0
  1049 ;;      Locals:         0       8       0       0       0       0
  1050 ;;      Temps:          0       0       0       0       0       0
  1051 ;;      Totals:         0       8       0       0       0       0
  1052 ;;Total ram usage:        8 bytes
  1053 ;; Hardware stack levels required when called:    3
  1054 ;; This function calls:
  1055 ;;		_convert_to_fp
  1056 ;;		_reciprocal_fp
  1057 ;; This function is called by:
  1058 ;;		Startup code after reset
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           
  1063                           ;psect for function _main
  1064  054E                     _main:	
  1065                           
  1066                           ;main.c: 64: t_fp t = convert_to_fp(3, 4582);
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1070  054E  3003               	movlw	3
  1071  054F  00F0               	movwf	convert_to_fp@int_part
  1072  0550  3000               	movlw	0
  1073  0551  00F1               	movwf	convert_to_fp@int_part+1
  1074  0552  30E6               	movlw	230
  1075  0553  00F2               	movwf	convert_to_fp@fract_part
  1076  0554  3011               	movlw	17
  1077  0555  00F3               	movwf	convert_to_fp@fract_part+1
  1078  0556  3185  25A6  3185   	fcall	_convert_to_fp
  1079  0559  0873               	movf	?_convert_to_fp+3,w
  1080  055A  0020               	movlb	0	; select bank0
  1081  055B  00DE               	movwf	main@t+3
  1082  055C  0872               	movf	?_convert_to_fp+2,w
  1083  055D  00DD               	movwf	main@t+2
  1084  055E  0871               	movf	?_convert_to_fp+1,w
  1085  055F  00DC               	movwf	main@t+1
  1086  0560  0870               	movf	?_convert_to_fp,w
  1087  0561  00DB               	movwf	main@t
  1088                           
  1089                           ;main.c: 65: t_fp u = reciprocal_fp(t);
  1090  0562  085E               	movf	main@t+3,w
  1091  0563  00C5               	movwf	reciprocal_fp@n+3
  1092  0564  085D               	movf	main@t+2,w
  1093  0565  00C4               	movwf	reciprocal_fp@n+2
  1094  0566  085C               	movf	main@t+1,w
  1095  0567  00C3               	movwf	reciprocal_fp@n+1
  1096  0568  085B               	movf	main@t,w
  1097  0569  00C2               	movwf	reciprocal_fp@n
  1098  056A  3186  264F  3185   	fcall	_reciprocal_fp
  1099  056D  0020               	movlb	0	; select bank0
  1100  056E  0845               	movf	?_reciprocal_fp+3,w
  1101  056F  00DA               	movwf	main@u+3
  1102  0570  0844               	movf	?_reciprocal_fp+2,w
  1103  0571  00D9               	movwf	main@u+2
  1104  0572  0843               	movf	?_reciprocal_fp+1,w
  1105  0573  00D8               	movwf	main@u+1
  1106  0574  0842               	movf	?_reciprocal_fp,w
  1107  0575  00D7               	movwf	main@u
  1108  0576                     l77:	
  1109                           ;main.c: 85: while (1)
  1110                           
  1111                           
  1112                           ;main.c: 86: {
  1113  0576  2D76               	goto	l77
  1114  0577                     __end_of_main:	
  1115                           
  1116                           	psect	text1
  1117  064F                     __ptext1:	
  1118 ;; *************** function _reciprocal_fp *****************
  1119 ;; Defined at:
  1120 ;;		line 57 in file "fixed_point.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  n               4   34[BANK0 ] long 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  i               1   50[BANK0 ] unsigned char 
  1125 ;;  x               4   51[BANK0 ] long 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  4   34[BANK0 ] long 
  1128 ;; Registers used:
  1129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1135 ;;      Params:         0       4       0       0       0       0
  1136 ;;      Locals:         0       9       0       0       0       0
  1137 ;;      Temps:          0       8       0       0       0       0
  1138 ;;      Totals:         0      21       0       0       0       0
  1139 ;;Total ram usage:       21 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; Hardware stack levels required when called:    2
  1142 ;; This function calls:
  1143 ;;		_multiply_fp
  1144 ;; This function is called by:
  1145 ;;		_main
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           
  1150                           ;psect for function _reciprocal_fp
  1151  064F                     _reciprocal_fp:	
  1152                           
  1153                           ;fixed_point.c: 68: t_fp x = fp_x0_a - multiply_fp(fp_x0_b, n);
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in _reciprocal_fp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1157  064F  3000               	movlw	low (_fp_x0_a| (0+32768))
  1158  0650  0084               	movwf	4
  1159  0651  3088               	movlw	high (_fp_x0_a| (0+32768))
  1160  0652  0085               	movwf	5
  1161  0653  3F00               	moviw [0]fsr0
  1162  0654  0020               	movlb	0	; select bank0
  1163  0655  00C6               	movwf	??_reciprocal_fp
  1164  0656  3F01               	moviw [1]fsr0
  1165  0657  00C7               	movwf	??_reciprocal_fp+1
  1166  0658  3F02               	moviw [2]fsr0
  1167  0659  00C8               	movwf	??_reciprocal_fp+2
  1168  065A  3F03               	moviw [3]fsr0
  1169  065B  00C9               	movwf	??_reciprocal_fp+3
  1170  065C  3004               	movlw	low (_fp_x0_b| (0+32768))
  1171  065D  0084               	movwf	4
  1172  065E  3088               	movlw	high (_fp_x0_b| (0+32768))
  1173  065F  0085               	movwf	5
  1174  0660  3F00               	moviw [0]fsr0
  1175  0661  00A0               	movwf	multiply_fp@n1
  1176  0662  3F01               	moviw [1]fsr0
  1177  0663  00A1               	movwf	multiply_fp@n1+1
  1178  0664  3F02               	moviw [2]fsr0
  1179  0665  00A2               	movwf	multiply_fp@n1+2
  1180  0666  3F03               	moviw [3]fsr0
  1181  0667  00A3               	movwf	multiply_fp@n1+3
  1182  0668  0845               	movf	reciprocal_fp@n+3,w
  1183  0669  00A7               	movwf	multiply_fp@n2+3
  1184  066A  0844               	movf	reciprocal_fp@n+2,w
  1185  066B  00A6               	movwf	multiply_fp@n2+2
  1186  066C  0843               	movf	reciprocal_fp@n+1,w
  1187  066D  00A5               	movwf	multiply_fp@n2+1
  1188  066E  0842               	movf	reciprocal_fp@n,w
  1189  066F  00A4               	movwf	multiply_fp@n2
  1190  0670  3187  2700  3186   	fcall	_multiply_fp
  1191  0673  0020               	movlb	0	; select bank0
  1192  0674  0920               	comf	?_multiply_fp,w
  1193  0675  00CA               	movwf	??_reciprocal_fp+4
  1194  0676  0921               	comf	?_multiply_fp+1,w
  1195  0677  00CB               	movwf	??_reciprocal_fp+5
  1196  0678  0922               	comf	?_multiply_fp+2,w
  1197  0679  00CC               	movwf	??_reciprocal_fp+6
  1198  067A  0923               	comf	?_multiply_fp+3,w
  1199  067B  00CD               	movwf	??_reciprocal_fp+7
  1200  067C  0ACA               	incf	??_reciprocal_fp+4,f
  1201  067D  1903               	skipnz
  1202  067E  0ACB               	incf	??_reciprocal_fp+5,f
  1203  067F  1903               	skipnz
  1204  0680  0ACC               	incf	??_reciprocal_fp+6,f
  1205  0681  1903               	skipnz
  1206  0682  0ACD               	incf	??_reciprocal_fp+7,f
  1207  0683  084A               	movf	??_reciprocal_fp+4,w
  1208  0684  07C6               	addwf	??_reciprocal_fp,f
  1209  0685  084B               	movf	??_reciprocal_fp+5,w
  1210  0686  3DC7               	addwfc	??_reciprocal_fp+1,f
  1211  0687  084C               	movf	??_reciprocal_fp+6,w
  1212  0688  3DC8               	addwfc	??_reciprocal_fp+2,f
  1213  0689  084D               	movf	??_reciprocal_fp+7,w
  1214  068A  3DC9               	addwfc	??_reciprocal_fp+3,f
  1215  068B  0849               	movf	??_reciprocal_fp+3,w
  1216  068C  00D6               	movwf	reciprocal_fp@x+3
  1217  068D  0848               	movf	??_reciprocal_fp+2,w
  1218  068E  00D5               	movwf	reciprocal_fp@x+2
  1219  068F  0847               	movf	??_reciprocal_fp+1,w
  1220  0690  00D4               	movwf	reciprocal_fp@x+1
  1221  0691  0846               	movf	??_reciprocal_fp,w
  1222  0692  00D3               	movwf	reciprocal_fp@x
  1223                           
  1224                           ;fixed_point.c: 73: for (unsigned char i=0; i<=10; i++)
  1225  0693  01D2               	clrf	reciprocal_fp@i
  1226  0694  300B               	movlw	11
  1227  0695  0252               	subwf	reciprocal_fp@i,w
  1228  0696  1803               	btfsc	3,0
  1229  0697  2EF7               	goto	l924
  1230  0698                     l918:	
  1231                           
  1232                           ;fixed_point.c: 74: x = x + multiply_fp(x, (0x00010000 - multiply_fp(x, n)));
  1233  0698  0856               	movf	reciprocal_fp@x+3,w
  1234  0699  00A3               	movwf	multiply_fp@n1+3
  1235  069A  0855               	movf	reciprocal_fp@x+2,w
  1236  069B  00A2               	movwf	multiply_fp@n1+2
  1237  069C  0854               	movf	reciprocal_fp@x+1,w
  1238  069D  00A1               	movwf	multiply_fp@n1+1
  1239  069E  0853               	movf	reciprocal_fp@x,w
  1240  069F  00A0               	movwf	multiply_fp@n1
  1241  06A0  0845               	movf	reciprocal_fp@n+3,w
  1242  06A1  00A7               	movwf	multiply_fp@n2+3
  1243  06A2  0844               	movf	reciprocal_fp@n+2,w
  1244  06A3  00A6               	movwf	multiply_fp@n2+2
  1245  06A4  0843               	movf	reciprocal_fp@n+1,w
  1246  06A5  00A5               	movwf	multiply_fp@n2+1
  1247  06A6  0842               	movf	reciprocal_fp@n,w
  1248  06A7  00A4               	movwf	multiply_fp@n2
  1249  06A8  3187  2700  3186   	fcall	_multiply_fp
  1250  06AB  0020               	movlb	0	; select bank0
  1251  06AC  0920               	comf	?_multiply_fp,w
  1252  06AD  00C6               	movwf	??_reciprocal_fp
  1253  06AE  0921               	comf	?_multiply_fp+1,w
  1254  06AF  00C7               	movwf	??_reciprocal_fp+1
  1255  06B0  0922               	comf	?_multiply_fp+2,w
  1256  06B1  00C8               	movwf	??_reciprocal_fp+2
  1257  06B2  0923               	comf	?_multiply_fp+3,w
  1258  06B3  00C9               	movwf	??_reciprocal_fp+3
  1259  06B4  0AC6               	incf	??_reciprocal_fp,f
  1260  06B5  1903               	skipnz
  1261  06B6  0AC7               	incf	??_reciprocal_fp+1,f
  1262  06B7  1903               	skipnz
  1263  06B8  0AC8               	incf	??_reciprocal_fp+2,f
  1264  06B9  1903               	skipnz
  1265  06BA  0AC9               	incf	??_reciprocal_fp+3,f
  1266  06BB  3000               	movlw	0
  1267  06BC  0746               	addwf	??_reciprocal_fp,w
  1268  06BD  00CE               	movwf	_reciprocal_fp$584
  1269  06BE  3000               	movlw	0
  1270  06BF  3D47               	addwfc	??_reciprocal_fp+1,w
  1271  06C0  00CF               	movwf	_reciprocal_fp$584+1
  1272  06C1  3001               	movlw	1
  1273  06C2  3D48               	addwfc	??_reciprocal_fp+2,w
  1274  06C3  00D0               	movwf	_reciprocal_fp$584+2
  1275  06C4  3000               	movlw	0
  1276  06C5  3D49               	addwfc	??_reciprocal_fp+3,w
  1277  06C6  00D1               	movwf	_reciprocal_fp$584+3
  1278                           
  1279                           ;fixed_point.c: 74: x = x + multiply_fp(x, (0x00010000 - multiply_fp(x, n)));
  1280  06C7  0856               	movf	reciprocal_fp@x+3,w
  1281  06C8  00A3               	movwf	multiply_fp@n1+3
  1282  06C9  0855               	movf	reciprocal_fp@x+2,w
  1283  06CA  00A2               	movwf	multiply_fp@n1+2
  1284  06CB  0854               	movf	reciprocal_fp@x+1,w
  1285  06CC  00A1               	movwf	multiply_fp@n1+1
  1286  06CD  0853               	movf	reciprocal_fp@x,w
  1287  06CE  00A0               	movwf	multiply_fp@n1
  1288  06CF  0851               	movf	_reciprocal_fp$584+3,w
  1289  06D0  00A7               	movwf	multiply_fp@n2+3
  1290  06D1  0850               	movf	_reciprocal_fp$584+2,w
  1291  06D2  00A6               	movwf	multiply_fp@n2+2
  1292  06D3  084F               	movf	_reciprocal_fp$584+1,w
  1293  06D4  00A5               	movwf	multiply_fp@n2+1
  1294  06D5  084E               	movf	_reciprocal_fp$584,w
  1295  06D6  00A4               	movwf	multiply_fp@n2
  1296  06D7  3187  2700  3186   	fcall	_multiply_fp
  1297  06DA  0020               	movlb	0	; select bank0
  1298  06DB  0820               	movf	?_multiply_fp,w
  1299  06DC  0753               	addwf	reciprocal_fp@x,w
  1300  06DD  00C6               	movwf	??_reciprocal_fp
  1301  06DE  0821               	movf	?_multiply_fp+1,w
  1302  06DF  3D54               	addwfc	reciprocal_fp@x+1,w
  1303  06E0  00C7               	movwf	??_reciprocal_fp+1
  1304  06E1  0822               	movf	?_multiply_fp+2,w
  1305  06E2  3D55               	addwfc	reciprocal_fp@x+2,w
  1306  06E3  00C8               	movwf	??_reciprocal_fp+2
  1307  06E4  0823               	movf	?_multiply_fp+3,w
  1308  06E5  3D56               	addwfc	reciprocal_fp@x+3,w
  1309  06E6  00C9               	movwf	??_reciprocal_fp+3
  1310  06E7  0849               	movf	??_reciprocal_fp+3,w
  1311  06E8  00D6               	movwf	reciprocal_fp@x+3
  1312  06E9  0848               	movf	??_reciprocal_fp+2,w
  1313  06EA  00D5               	movwf	reciprocal_fp@x+2
  1314  06EB  0847               	movf	??_reciprocal_fp+1,w
  1315  06EC  00D4               	movwf	reciprocal_fp@x+1
  1316  06ED  0846               	movf	??_reciprocal_fp,w
  1317  06EE  00D3               	movwf	reciprocal_fp@x
  1318  06EF  3001               	movlw	1
  1319  06F0  00C6               	movwf	??_reciprocal_fp
  1320  06F1  0846               	movf	??_reciprocal_fp,w
  1321  06F2  07D2               	addwf	reciprocal_fp@i,f
  1322  06F3  300B               	movlw	11
  1323  06F4  0252               	subwf	reciprocal_fp@i,w
  1324  06F5  1C03               	skipc
  1325  06F6  2E98               	goto	l918
  1326  06F7                     l924:	
  1327                           
  1328                           ;fixed_point.c: 75: return x;
  1329  06F7  0856               	movf	reciprocal_fp@x+3,w
  1330  06F8  00C5               	movwf	?_reciprocal_fp+3
  1331  06F9  0855               	movf	reciprocal_fp@x+2,w
  1332  06FA  00C4               	movwf	?_reciprocal_fp+2
  1333  06FB  0854               	movf	reciprocal_fp@x+1,w
  1334  06FC  00C3               	movwf	?_reciprocal_fp+1
  1335  06FD  0853               	movf	reciprocal_fp@x,w
  1336  06FE  00C2               	movwf	?_reciprocal_fp
  1337  06FF  0008               	return
  1338  0700                     __end_of_reciprocal_fp:	
  1339                           
  1340                           	psect	text2
  1341  0700                     __ptext2:	
  1342 ;; *************** function _multiply_fp *****************
  1343 ;; Defined at:
  1344 ;;		line 45 in file "fixed_point.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  n1              4    0[BANK0 ] long 
  1347 ;;  n2              4    4[BANK0 ] long 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  n2_fra          4   30[BANK0 ] long 
  1350 ;;  n1_fra          4   26[BANK0 ] long 
  1351 ;;  res             4   22[BANK0 ] long 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  4    0[BANK0 ] long 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1361 ;;      Params:         0       8       0       0       0       0
  1362 ;;      Locals:         0      12       0       0       0       0
  1363 ;;      Temps:          0      14       0       0       0       0
  1364 ;;      Totals:         0      34       0       0       0       0
  1365 ;;Total ram usage:       34 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    1
  1368 ;; This function calls:
  1369 ;;		___lmul
  1370 ;; This function is called by:
  1371 ;;		_reciprocal_fp
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _multiply_fp
  1377  0700                     _multiply_fp:	
  1378                           
  1379                           ;fixed_point.c: 47: t_fp n1_fra, n2_fra;
  1380                           ;fixed_point.c: 48: n1_fra = n1 & 0x0000FFFF;
  1381                           
  1382                           ;incstack = 0
  1383                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  1384  0700  30FF               	movlw	255
  1385  0701  0020               	movlb	0	; select bank0
  1386  0702  0520               	andwf	multiply_fp@n1,w
  1387  0703  00BA               	movwf	multiply_fp@n1_fra
  1388  0704  30FF               	movlw	255
  1389  0705  0521               	andwf	multiply_fp@n1+1,w
  1390  0706  00BB               	movwf	multiply_fp@n1_fra+1
  1391  0707  3000               	movlw	0
  1392  0708  0522               	andwf	multiply_fp@n1+2,w
  1393  0709  00BC               	movwf	multiply_fp@n1_fra+2
  1394  070A  3000               	movlw	0
  1395  070B  0523               	andwf	multiply_fp@n1+3,w
  1396  070C  00BD               	movwf	multiply_fp@n1_fra+3
  1397                           
  1398                           ;fixed_point.c: 49: n2_fra = n2 & 0x0000FFFF;
  1399  070D  30FF               	movlw	255
  1400  070E  0524               	andwf	multiply_fp@n2,w
  1401  070F  00BE               	movwf	multiply_fp@n2_fra
  1402  0710  30FF               	movlw	255
  1403  0711  0525               	andwf	multiply_fp@n2+1,w
  1404  0712  00BF               	movwf	multiply_fp@n2_fra+1
  1405  0713  3000               	movlw	0
  1406  0714  0526               	andwf	multiply_fp@n2+2,w
  1407  0715  00C0               	movwf	multiply_fp@n2_fra+2
  1408  0716  3000               	movlw	0
  1409  0717  0527               	andwf	multiply_fp@n2+3,w
  1410  0718  00C1               	movwf	multiply_fp@n2_fra+3
  1411                           
  1412                           ;fixed_point.c: 50: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  1413  0719  0820               	movf	multiply_fp@n1,w
  1414  071A  00A8               	movwf	??_multiply_fp
  1415  071B  0821               	movf	multiply_fp@n1+1,w
  1416  071C  00A9               	movwf	??_multiply_fp+1
  1417  071D  0822               	movf	multiply_fp@n1+2,w
  1418  071E  00AA               	movwf	??_multiply_fp+2
  1419  071F  0823               	movf	multiply_fp@n1+3,w
  1420  0720  00AB               	movwf	??_multiply_fp+3
  1421  0721  3010               	movlw	16
  1422  0722  00AC               	movwf	??_multiply_fp+4
  1423  0723                     u455:	
  1424  0723  37AB               	asrf	??_multiply_fp+3,f
  1425  0724  0CAA               	rrf	??_multiply_fp+2,f
  1426  0725  0CA9               	rrf	??_multiply_fp+1,f
  1427  0726  0CA8               	rrf	??_multiply_fp,f
  1428  0727  0BAC               	decfsz	??_multiply_fp+4,f
  1429  0728  2F23               	goto	u455
  1430  0729  082B               	movf	??_multiply_fp+3,w
  1431  072A  00F3               	movwf	___lmul@multiplier+3
  1432  072B  082A               	movf	??_multiply_fp+2,w
  1433  072C  00F2               	movwf	___lmul@multiplier+2
  1434  072D  0829               	movf	??_multiply_fp+1,w
  1435  072E  00F1               	movwf	___lmul@multiplier+1
  1436  072F  0828               	movf	??_multiply_fp,w
  1437  0730  00F0               	movwf	___lmul@multiplier
  1438  0731  0824               	movf	multiply_fp@n2,w
  1439  0732  00AD               	movwf	??_multiply_fp+5
  1440  0733  0825               	movf	multiply_fp@n2+1,w
  1441  0734  00AE               	movwf	??_multiply_fp+6
  1442  0735  0826               	movf	multiply_fp@n2+2,w
  1443  0736  00AF               	movwf	??_multiply_fp+7
  1444  0737  0827               	movf	multiply_fp@n2+3,w
  1445  0738  00B0               	movwf	??_multiply_fp+8
  1446  0739  3010               	movlw	16
  1447  073A  00B1               	movwf	??_multiply_fp+9
  1448  073B                     u465:	
  1449  073B  37B0               	asrf	??_multiply_fp+8,f
  1450  073C  0CAF               	rrf	??_multiply_fp+7,f
  1451  073D  0CAE               	rrf	??_multiply_fp+6,f
  1452  073E  0CAD               	rrf	??_multiply_fp+5,f
  1453  073F  0BB1               	decfsz	??_multiply_fp+9,f
  1454  0740  2F3B               	goto	u465
  1455  0741  0830               	movf	??_multiply_fp+8,w
  1456  0742  00F7               	movwf	___lmul@multiplicand+3
  1457  0743  082F               	movf	??_multiply_fp+7,w
  1458  0744  00F6               	movwf	___lmul@multiplicand+2
  1459  0745  082E               	movf	??_multiply_fp+6,w
  1460  0746  00F5               	movwf	___lmul@multiplicand+1
  1461  0747  082D               	movf	??_multiply_fp+5,w
  1462  0748  00F4               	movwf	___lmul@multiplicand
  1463  0749  3185  2577  3187   	fcall	___lmul
  1464  074C  0870               	movf	?___lmul,w
  1465  074D  0020               	movlb	0	; select bank0
  1466  074E  00B2               	movwf	??_multiply_fp+10
  1467  074F  0871               	movf	?___lmul+1,w
  1468  0750  00B3               	movwf	??_multiply_fp+11
  1469  0751  0872               	movf	?___lmul+2,w
  1470  0752  00B4               	movwf	??_multiply_fp+12
  1471  0753  0873               	movf	?___lmul+3,w
  1472  0754  00B5               	movwf	??_multiply_fp+13
  1473  0755  3010               	movlw	16
  1474  0756                     u475:	
  1475  0756  35B2               	lslf	??_multiply_fp+10,f
  1476  0757  0DB3               	rlf	??_multiply_fp+11,f
  1477  0758  0DB4               	rlf	??_multiply_fp+12,f
  1478  0759  0DB5               	rlf	??_multiply_fp+13,f
  1479  075A  0B89               	decfsz	9,f
  1480  075B  2F56               	goto	u475
  1481  075C  0835               	movf	??_multiply_fp+13,w
  1482  075D  00B9               	movwf	multiply_fp@res+3
  1483  075E  0834               	movf	??_multiply_fp+12,w
  1484  075F  00B8               	movwf	multiply_fp@res+2
  1485  0760  0833               	movf	??_multiply_fp+11,w
  1486  0761  00B7               	movwf	multiply_fp@res+1
  1487  0762  0832               	movf	??_multiply_fp+10,w
  1488  0763  00B6               	movwf	multiply_fp@res
  1489                           
  1490                           ;fixed_point.c: 51: res+ = ((signed long long) (n1 >> 16) * (signed long long) n2_fra);
  1491  0764  0820               	movf	multiply_fp@n1,w
  1492  0765  00A8               	movwf	??_multiply_fp
  1493  0766  0821               	movf	multiply_fp@n1+1,w
  1494  0767  00A9               	movwf	??_multiply_fp+1
  1495  0768  0822               	movf	multiply_fp@n1+2,w
  1496  0769  00AA               	movwf	??_multiply_fp+2
  1497  076A  0823               	movf	multiply_fp@n1+3,w
  1498  076B  00AB               	movwf	??_multiply_fp+3
  1499  076C  3010               	movlw	16
  1500  076D  00AC               	movwf	??_multiply_fp+4
  1501  076E                     u485:	
  1502  076E  37AB               	asrf	??_multiply_fp+3,f
  1503  076F  0CAA               	rrf	??_multiply_fp+2,f
  1504  0770  0CA9               	rrf	??_multiply_fp+1,f
  1505  0771  0CA8               	rrf	??_multiply_fp,f
  1506  0772  0BAC               	decfsz	??_multiply_fp+4,f
  1507  0773  2F6E               	goto	u485
  1508  0774  082B               	movf	??_multiply_fp+3,w
  1509  0775  00F3               	movwf	___lmul@multiplier+3
  1510  0776  082A               	movf	??_multiply_fp+2,w
  1511  0777  00F2               	movwf	___lmul@multiplier+2
  1512  0778  0829               	movf	??_multiply_fp+1,w
  1513  0779  00F1               	movwf	___lmul@multiplier+1
  1514  077A  0828               	movf	??_multiply_fp,w
  1515  077B  00F0               	movwf	___lmul@multiplier
  1516  077C  0841               	movf	multiply_fp@n2_fra+3,w
  1517  077D  00F7               	movwf	___lmul@multiplicand+3
  1518  077E  0840               	movf	multiply_fp@n2_fra+2,w
  1519  077F  00F6               	movwf	___lmul@multiplicand+2
  1520  0780  083F               	movf	multiply_fp@n2_fra+1,w
  1521  0781  00F5               	movwf	___lmul@multiplicand+1
  1522  0782  083E               	movf	multiply_fp@n2_fra,w
  1523  0783  00F4               	movwf	___lmul@multiplicand
  1524  0784  3185  2577  3187   	fcall	___lmul
  1525  0787  0870               	movf	?___lmul,w
  1526  0788  0020               	movlb	0	; select bank0
  1527  0789  07B6               	addwf	multiply_fp@res,f
  1528  078A  0871               	movf	?___lmul+1,w
  1529  078B  3DB7               	addwfc	multiply_fp@res+1,f
  1530  078C  0872               	movf	?___lmul+2,w
  1531  078D  3DB8               	addwfc	multiply_fp@res+2,f
  1532  078E  0873               	movf	?___lmul+3,w
  1533  078F  3DB9               	addwfc	multiply_fp@res+3,f
  1534                           
  1535                           ;fixed_point.c: 52: res+ = ((signed long long) (n2 >> 16) * (signed long long) n1_fra);
  1536  0790  0824               	movf	multiply_fp@n2,w
  1537  0791  00A8               	movwf	??_multiply_fp
  1538  0792  0825               	movf	multiply_fp@n2+1,w
  1539  0793  00A9               	movwf	??_multiply_fp+1
  1540  0794  0826               	movf	multiply_fp@n2+2,w
  1541  0795  00AA               	movwf	??_multiply_fp+2
  1542  0796  0827               	movf	multiply_fp@n2+3,w
  1543  0797  00AB               	movwf	??_multiply_fp+3
  1544  0798  3010               	movlw	16
  1545  0799  00AC               	movwf	??_multiply_fp+4
  1546  079A                     u495:	
  1547  079A  37AB               	asrf	??_multiply_fp+3,f
  1548  079B  0CAA               	rrf	??_multiply_fp+2,f
  1549  079C  0CA9               	rrf	??_multiply_fp+1,f
  1550  079D  0CA8               	rrf	??_multiply_fp,f
  1551  079E  0BAC               	decfsz	??_multiply_fp+4,f
  1552  079F  2F9A               	goto	u495
  1553  07A0  082B               	movf	??_multiply_fp+3,w
  1554  07A1  00F3               	movwf	___lmul@multiplier+3
  1555  07A2  082A               	movf	??_multiply_fp+2,w
  1556  07A3  00F2               	movwf	___lmul@multiplier+2
  1557  07A4  0829               	movf	??_multiply_fp+1,w
  1558  07A5  00F1               	movwf	___lmul@multiplier+1
  1559  07A6  0828               	movf	??_multiply_fp,w
  1560  07A7  00F0               	movwf	___lmul@multiplier
  1561  07A8  083D               	movf	multiply_fp@n1_fra+3,w
  1562  07A9  00F7               	movwf	___lmul@multiplicand+3
  1563  07AA  083C               	movf	multiply_fp@n1_fra+2,w
  1564  07AB  00F6               	movwf	___lmul@multiplicand+2
  1565  07AC  083B               	movf	multiply_fp@n1_fra+1,w
  1566  07AD  00F5               	movwf	___lmul@multiplicand+1
  1567  07AE  083A               	movf	multiply_fp@n1_fra,w
  1568  07AF  00F4               	movwf	___lmul@multiplicand
  1569  07B0  3185  2577  3187   	fcall	___lmul
  1570  07B3  0870               	movf	?___lmul,w
  1571  07B4  0020               	movlb	0	; select bank0
  1572  07B5  07B6               	addwf	multiply_fp@res,f
  1573  07B6  0871               	movf	?___lmul+1,w
  1574  07B7  3DB7               	addwfc	multiply_fp@res+1,f
  1575  07B8  0872               	movf	?___lmul+2,w
  1576  07B9  3DB8               	addwfc	multiply_fp@res+2,f
  1577  07BA  0873               	movf	?___lmul+3,w
  1578  07BB  3DB9               	addwfc	multiply_fp@res+3,f
  1579                           
  1580                           ;fixed_point.c: 53: res+ = ((signed long long) n1_fra * (signed long long) n2_fra)>>16;
  1581  07BC  083D               	movf	multiply_fp@n1_fra+3,w
  1582  07BD  00F3               	movwf	___lmul@multiplier+3
  1583  07BE  083C               	movf	multiply_fp@n1_fra+2,w
  1584  07BF  00F2               	movwf	___lmul@multiplier+2
  1585  07C0  083B               	movf	multiply_fp@n1_fra+1,w
  1586  07C1  00F1               	movwf	___lmul@multiplier+1
  1587  07C2  083A               	movf	multiply_fp@n1_fra,w
  1588  07C3  00F0               	movwf	___lmul@multiplier
  1589  07C4  0841               	movf	multiply_fp@n2_fra+3,w
  1590  07C5  00F7               	movwf	___lmul@multiplicand+3
  1591  07C6  0840               	movf	multiply_fp@n2_fra+2,w
  1592  07C7  00F6               	movwf	___lmul@multiplicand+2
  1593  07C8  083F               	movf	multiply_fp@n2_fra+1,w
  1594  07C9  00F5               	movwf	___lmul@multiplicand+1
  1595  07CA  083E               	movf	multiply_fp@n2_fra,w
  1596  07CB  00F4               	movwf	___lmul@multiplicand
  1597  07CC  3185  2577  3187   	fcall	___lmul
  1598  07CF  0870               	movf	?___lmul,w
  1599  07D0  0020               	movlb	0	; select bank0
  1600  07D1  00A8               	movwf	??_multiply_fp
  1601  07D2  0871               	movf	?___lmul+1,w
  1602  07D3  00A9               	movwf	??_multiply_fp+1
  1603  07D4  0872               	movf	?___lmul+2,w
  1604  07D5  00AA               	movwf	??_multiply_fp+2
  1605  07D6  0873               	movf	?___lmul+3,w
  1606  07D7  00AB               	movwf	??_multiply_fp+3
  1607  07D8  3010               	movlw	16
  1608  07D9  00AC               	movwf	??_multiply_fp+4
  1609  07DA                     u505:	
  1610  07DA  37AB               	asrf	??_multiply_fp+3,f
  1611  07DB  0CAA               	rrf	??_multiply_fp+2,f
  1612  07DC  0CA9               	rrf	??_multiply_fp+1,f
  1613  07DD  0CA8               	rrf	??_multiply_fp,f
  1614  07DE  0BAC               	decfsz	??_multiply_fp+4,f
  1615  07DF  2FDA               	goto	u505
  1616  07E0  0828               	movf	??_multiply_fp,w
  1617  07E1  07B6               	addwf	multiply_fp@res,f
  1618  07E2  0829               	movf	??_multiply_fp+1,w
  1619  07E3  3DB7               	addwfc	multiply_fp@res+1,f
  1620  07E4  082A               	movf	??_multiply_fp+2,w
  1621  07E5  3DB8               	addwfc	multiply_fp@res+2,f
  1622  07E6  082B               	movf	??_multiply_fp+3,w
  1623  07E7  3DB9               	addwfc	multiply_fp@res+3,f
  1624                           
  1625                           ;fixed_point.c: 54: return res;
  1626  07E8  0839               	movf	multiply_fp@res+3,w
  1627  07E9  00A3               	movwf	?_multiply_fp+3
  1628  07EA  0838               	movf	multiply_fp@res+2,w
  1629  07EB  00A2               	movwf	?_multiply_fp+2
  1630  07EC  0837               	movf	multiply_fp@res+1,w
  1631  07ED  00A1               	movwf	?_multiply_fp+1
  1632  07EE  0836               	movf	multiply_fp@res,w
  1633  07EF  00A0               	movwf	?_multiply_fp
  1634  07F0  0008               	return
  1635  07F1                     __end_of_multiply_fp:	
  1636                           
  1637                           	psect	text3
  1638  0577                     __ptext3:	
  1639 ;; *************** function ___lmul *****************
  1640 ;; Defined at:
  1641 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul32.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  multiplier      4    0[COMMON] unsigned long 
  1644 ;;  multiplicand    4    4[COMMON] unsigned long 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  product         4    8[COMMON] unsigned long 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  4    0[COMMON] unsigned long 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1656 ;;      Params:         8       0       0       0       0       0
  1657 ;;      Locals:         4       0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0
  1659 ;;      Totals:        12       0       0       0       0       0
  1660 ;;Total ram usage:       12 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_multiply_fp
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function ___lmul
  1671  0577                     ___lmul:	
  1672                           
  1673                           ;incstack = 0
  1674                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1675  0577  3000               	movlw	0
  1676  0578  00FB               	movwf	___lmul@product+3
  1677  0579  3000               	movlw	0
  1678  057A  00FA               	movwf	___lmul@product+2
  1679  057B  3000               	movlw	0
  1680  057C  00F9               	movwf	___lmul@product+1
  1681  057D  3000               	movlw	0
  1682  057E  00F8               	movwf	___lmul@product
  1683  057F                     l856:	
  1684  057F  1C70               	btfss	___lmul@multiplier,0
  1685  0580  2D89               	goto	l860
  1686  0581  0874               	movf	___lmul@multiplicand,w
  1687  0582  07F8               	addwf	___lmul@product,f
  1688  0583  0875               	movf	___lmul@multiplicand+1,w
  1689  0584  3DF9               	addwfc	___lmul@product+1,f
  1690  0585  0876               	movf	___lmul@multiplicand+2,w
  1691  0586  3DFA               	addwfc	___lmul@product+2,f
  1692  0587  0877               	movf	___lmul@multiplicand+3,w
  1693  0588  3DFB               	addwfc	___lmul@product+3,f
  1694  0589                     l860:	
  1695  0589  3001               	movlw	1
  1696  058A                     u425:	
  1697  058A  35F4               	lslf	___lmul@multiplicand,f
  1698  058B  0DF5               	rlf	___lmul@multiplicand+1,f
  1699  058C  0DF6               	rlf	___lmul@multiplicand+2,f
  1700  058D  0DF7               	rlf	___lmul@multiplicand+3,f
  1701  058E  0B89               	decfsz	9,f
  1702  058F  2D8A               	goto	u425
  1703  0590  3001               	movlw	1
  1704  0591                     u435:	
  1705  0591  36F3               	lsrf	___lmul@multiplier+3,f
  1706  0592  0CF2               	rrf	___lmul@multiplier+2,f
  1707  0593  0CF1               	rrf	___lmul@multiplier+1,f
  1708  0594  0CF0               	rrf	___lmul@multiplier,f
  1709  0595  0B89               	decfsz	9,f
  1710  0596  2D91               	goto	u435
  1711  0597  0873               	movf	___lmul@multiplier+3,w
  1712  0598  0472               	iorwf	___lmul@multiplier+2,w
  1713  0599  0471               	iorwf	___lmul@multiplier+1,w
  1714  059A  0470               	iorwf	___lmul@multiplier,w
  1715  059B  1D03               	skipz
  1716  059C  2D7F               	goto	l856
  1717  059D  087B               	movf	___lmul@product+3,w
  1718  059E  00F3               	movwf	?___lmul+3
  1719  059F  087A               	movf	___lmul@product+2,w
  1720  05A0  00F2               	movwf	?___lmul+2
  1721  05A1  0879               	movf	___lmul@product+1,w
  1722  05A2  00F1               	movwf	?___lmul+1
  1723  05A3  0878               	movf	___lmul@product,w
  1724  05A4  00F0               	movwf	?___lmul
  1725  05A5  0008               	return
  1726  05A6                     __end_of___lmul:	
  1727                           
  1728                           	psect	text4
  1729  05A6                     __ptext4:	
  1730 ;; *************** function _convert_to_fp *****************
  1731 ;; Defined at:
  1732 ;;		line 13 in file "fixed_point.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  int_part        2    0[COMMON] short 
  1735 ;;  fract_part      2    2[COMMON] short 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  i_bit           1    4[BANK0 ] unsigned char 
  1738 ;;  res             4    5[BANK0 ] long 
  1739 ;;  tmp_left        2    2[BANK0 ] unsigned short 
  1740 ;;  res_fract       2    0[BANK0 ] unsigned short 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  4    0[COMMON] long 
  1743 ;; Registers used:
  1744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1750 ;;      Params:         4       0       0       0       0       0
  1751 ;;      Locals:         0       9       0       0       0       0
  1752 ;;      Temps:          8       0       0       0       0       0
  1753 ;;      Totals:        12       9       0       0       0       0
  1754 ;;Total ram usage:       21 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _convert_to_fp
  1765  05A6                     _convert_to_fp:	
  1766                           
  1767                           ;fixed_point.c: 20: t_fp res = 0;
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  1771  05A6  3000               	movlw	0
  1772  05A7  0020               	movlb	0	; select bank0
  1773  05A8  00A8               	movwf	convert_to_fp@res+3
  1774  05A9  3000               	movlw	0
  1775  05AA  00A7               	movwf	convert_to_fp@res+2
  1776  05AB  3000               	movlw	0
  1777  05AC  00A6               	movwf	convert_to_fp@res+1
  1778  05AD  3000               	movlw	0
  1779  05AE  00A5               	movwf	convert_to_fp@res
  1780                           
  1781                           ;fixed_point.c: 22: res = int_part;
  1782  05AF  0870               	movf	convert_to_fp@int_part,w
  1783  05B0  00A5               	movwf	convert_to_fp@res
  1784  05B1  0871               	movf	convert_to_fp@int_part+1,w
  1785  05B2  00A6               	movwf	convert_to_fp@res+1
  1786  05B3  0D89               	rlf	9,f
  1787  05B4  3B89               	subwfb	9,f
  1788  05B5  0989               	comf	9,f
  1789  05B6  00A7               	movwf	convert_to_fp@res+2
  1790  05B7  00A8               	movwf	convert_to_fp@res+3
  1791                           
  1792                           ;fixed_point.c: 23: res = res << 16;
  1793  05B8  0825               	movf	convert_to_fp@res,w
  1794  05B9  00F4               	movwf	??_convert_to_fp
  1795  05BA  0826               	movf	convert_to_fp@res+1,w
  1796  05BB  00F5               	movwf	??_convert_to_fp+1
  1797  05BC  0827               	movf	convert_to_fp@res+2,w
  1798  05BD  00F6               	movwf	??_convert_to_fp+2
  1799  05BE  0828               	movf	convert_to_fp@res+3,w
  1800  05BF  00F7               	movwf	??_convert_to_fp+3
  1801  05C0  3010               	movlw	16
  1802  05C1                     u515:	
  1803  05C1  35F4               	lslf	??_convert_to_fp,f
  1804  05C2  0DF5               	rlf	??_convert_to_fp+1,f
  1805  05C3  0DF6               	rlf	??_convert_to_fp+2,f
  1806  05C4  0DF7               	rlf	??_convert_to_fp+3,f
  1807  05C5  0B89               	decfsz	9,f
  1808  05C6  2DC1               	goto	u515
  1809  05C7  0877               	movf	??_convert_to_fp+3,w
  1810  05C8  00A8               	movwf	convert_to_fp@res+3
  1811  05C9  0876               	movf	??_convert_to_fp+2,w
  1812  05CA  00A7               	movwf	convert_to_fp@res+2
  1813  05CB  0875               	movf	??_convert_to_fp+1,w
  1814  05CC  00A6               	movwf	convert_to_fp@res+1
  1815  05CD  0874               	movf	??_convert_to_fp,w
  1816  05CE  00A5               	movwf	convert_to_fp@res
  1817                           
  1818                           ;fixed_point.c: 25: unsigned short tmp_left = fract_part;
  1819  05CF  0873               	movf	convert_to_fp@fract_part+1,w
  1820  05D0  00A3               	movwf	convert_to_fp@tmp_left+1
  1821  05D1  0872               	movf	convert_to_fp@fract_part,w
  1822  05D2  00A2               	movwf	convert_to_fp@tmp_left
  1823                           
  1824                           ;fixed_point.c: 26: unsigned short res_fract = 0;
  1825  05D3  01A0               	clrf	convert_to_fp@res_fract
  1826  05D4  01A1               	clrf	convert_to_fp@res_fract+1
  1827                           
  1828                           ;fixed_point.c: 27: const unsigned short one = 1;
  1829                           ;fixed_point.c: 28: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  1830  05D5  01A4               	clrf	convert_to_fp@i_bit
  1831  05D6  3010               	movlw	16
  1832  05D7  0224               	subwf	convert_to_fp@i_bit,w
  1833  05D8  1803               	btfsc	3,0
  1834  05D9  2E0C               	goto	l90
  1835  05DA                     l894:	
  1836                           
  1837                           ;fixed_point.c: 29: {
  1838                           ;fixed_point.c: 30: tmp_left = tmp_left << 1;
  1839  05DA  3522               	lslf	convert_to_fp@tmp_left,w
  1840  05DB  00A2               	movwf	convert_to_fp@tmp_left
  1841  05DC  0D23               	rlf	convert_to_fp@tmp_left+1,w
  1842  05DD  00A3               	movwf	convert_to_fp@tmp_left+1
  1843                           
  1844                           ;fixed_point.c: 31: if (tmp_left >= 10000)
  1845  05DE  3027               	movlw	39
  1846  05DF  0223               	subwf	convert_to_fp@tmp_left+1,w
  1847  05E0  3010               	movlw	16
  1848  05E1  1903               	skipnz
  1849  05E2  0222               	subwf	convert_to_fp@tmp_left,w
  1850  05E3  1C03               	skipc
  1851  05E4  2E04               	goto	l900
  1852                           
  1853                           ;fixed_point.c: 32: {
  1854                           ;fixed_point.c: 33: res_fract = res_fract | one<<(16-i_bit-1);
  1855  05E5  300C               	movlw	low (convert_to_fp@one| (0+32768))
  1856  05E6  0084               	movwf	4
  1857  05E7  3088               	movlw	high (convert_to_fp@one| (0+32768))
  1858  05E8  0085               	movwf	5
  1859  05E9  3F00               	moviw [0]fsr0
  1860  05EA  00F4               	movwf	??_convert_to_fp
  1861  05EB  3F01               	moviw [1]fsr0
  1862  05EC  00F5               	movwf	??_convert_to_fp+1
  1863  05ED  0824               	movf	convert_to_fp@i_bit,w
  1864  05EE  3E01               	addlw	1
  1865  05EF  3AFF               	xorlw	255
  1866  05F0  3E01               	addlw	1
  1867  05F1  3E10               	addlw	16
  1868  05F2  0A89               	incf	9,f
  1869  05F3  2DF6               	goto	u544
  1870  05F4                     u545:	
  1871  05F4  35F4               	lslf	??_convert_to_fp,f
  1872  05F5  0DF5               	rlf	??_convert_to_fp+1,f
  1873  05F6                     u544:	
  1874  05F6  0B89               	decfsz	9,f
  1875  05F7  2DF4               	goto	u545
  1876  05F8  0820               	movf	convert_to_fp@res_fract,w
  1877  05F9  0474               	iorwf	??_convert_to_fp,w
  1878  05FA  00A0               	movwf	convert_to_fp@res_fract
  1879  05FB  0821               	movf	convert_to_fp@res_fract+1,w
  1880  05FC  0475               	iorwf	??_convert_to_fp+1,w
  1881  05FD  00A1               	movwf	convert_to_fp@res_fract+1
  1882                           
  1883                           ;fixed_point.c: 34: tmp_left = tmp_left - 10000;
  1884  05FE  0822               	movf	convert_to_fp@tmp_left,w
  1885  05FF  3EF0               	addlw	240
  1886  0600  00A2               	movwf	convert_to_fp@tmp_left
  1887  0601  30D8               	movlw	216
  1888  0602  3D23               	addwfc	convert_to_fp@tmp_left+1,w
  1889  0603  00A3               	movwf	convert_to_fp@tmp_left+1
  1890  0604                     l900:	
  1891  0604  3001               	movlw	1
  1892  0605  00F4               	movwf	??_convert_to_fp
  1893  0606  0874               	movf	??_convert_to_fp,w
  1894  0607  07A4               	addwf	convert_to_fp@i_bit,f
  1895  0608  3010               	movlw	16
  1896  0609  0224               	subwf	convert_to_fp@i_bit,w
  1897  060A  1C03               	skipc
  1898  060B  2DDA               	goto	l894
  1899  060C                     l90:	
  1900                           
  1901                           ;fixed_point.c: 35: }
  1902                           ;fixed_point.c: 36: }
  1903                           ;fixed_point.c: 38: if (res < 0)
  1904  060C  1FA8               	btfss	convert_to_fp@res+3,7
  1905  060D  2E28               	goto	l906
  1906                           
  1907                           ;fixed_point.c: 39: res = res - res_fract;
  1908  060E  0825               	movf	convert_to_fp@res,w
  1909  060F  00F4               	movwf	??_convert_to_fp
  1910  0610  0826               	movf	convert_to_fp@res+1,w
  1911  0611  00F5               	movwf	??_convert_to_fp+1
  1912  0612  0827               	movf	convert_to_fp@res+2,w
  1913  0613  00F6               	movwf	??_convert_to_fp+2
  1914  0614  0828               	movf	convert_to_fp@res+3,w
  1915  0615  00F7               	movwf	??_convert_to_fp+3
  1916  0616  0820               	movf	convert_to_fp@res_fract,w
  1917  0617  00F8               	movwf	??_convert_to_fp+4
  1918  0618  0821               	movf	convert_to_fp@res_fract+1,w
  1919  0619  00F9               	movwf	??_convert_to_fp+5
  1920  061A  01FA               	clrf	??_convert_to_fp+6
  1921  061B  01FB               	clrf	??_convert_to_fp+7
  1922  061C  09F8               	comf	??_convert_to_fp+4,f
  1923  061D  09F9               	comf	??_convert_to_fp+5,f
  1924  061E  09FA               	comf	??_convert_to_fp+6,f
  1925  061F  09FB               	comf	??_convert_to_fp+7,f
  1926  0620  0AF8               	incf	??_convert_to_fp+4,f
  1927  0621  1903               	skipnz
  1928  0622  0AF9               	incf	??_convert_to_fp+5,f
  1929  0623  1903               	skipnz
  1930  0624  0AFA               	incf	??_convert_to_fp+6,f
  1931  0625  1903               	skipnz
  1932  0626  0AFB               	incf	??_convert_to_fp+7,f
  1933  0627  2E36               	goto	L1
  1934  0628                     l906:	
  1935                           
  1936                           ;fixed_point.c: 40: else
  1937                           ;fixed_point.c: 41: res = res + res_fract;
  1938  0628  0825               	movf	convert_to_fp@res,w
  1939  0629  00F4               	movwf	??_convert_to_fp
  1940  062A  0826               	movf	convert_to_fp@res+1,w
  1941  062B  00F5               	movwf	??_convert_to_fp+1
  1942  062C  0827               	movf	convert_to_fp@res+2,w
  1943  062D  00F6               	movwf	??_convert_to_fp+2
  1944  062E  0828               	movf	convert_to_fp@res+3,w
  1945  062F  00F7               	movwf	??_convert_to_fp+3
  1946  0630  0820               	movf	convert_to_fp@res_fract,w
  1947  0631  00F8               	movwf	??_convert_to_fp+4
  1948  0632  0821               	movf	convert_to_fp@res_fract+1,w
  1949  0633  00F9               	movwf	??_convert_to_fp+5
  1950  0634  01FA               	clrf	??_convert_to_fp+6
  1951  0635  01FB               	clrf	??_convert_to_fp+7
  1952  0636                     L1:	
  1953  0636  0878               	movf	??_convert_to_fp+4,w
  1954  0637  07F4               	addwf	??_convert_to_fp,f
  1955  0638  0879               	movf	??_convert_to_fp+5,w
  1956  0639  3DF5               	addwfc	??_convert_to_fp+1,f
  1957  063A  087A               	movf	??_convert_to_fp+6,w
  1958  063B  3DF6               	addwfc	??_convert_to_fp+2,f
  1959  063C  087B               	movf	??_convert_to_fp+7,w
  1960  063D  3DF7               	addwfc	??_convert_to_fp+3,f
  1961  063E  0877               	movf	??_convert_to_fp+3,w
  1962  063F  00A8               	movwf	convert_to_fp@res+3
  1963  0640  0876               	movf	??_convert_to_fp+2,w
  1964  0641  00A7               	movwf	convert_to_fp@res+2
  1965  0642  0875               	movf	??_convert_to_fp+1,w
  1966  0643  00A6               	movwf	convert_to_fp@res+1
  1967  0644  0874               	movf	??_convert_to_fp,w
  1968  0645  00A5               	movwf	convert_to_fp@res
  1969                           
  1970                           ;fixed_point.c: 42: return res;
  1971  0646  0828               	movf	convert_to_fp@res+3,w
  1972  0647  00F3               	movwf	?_convert_to_fp+3
  1973  0648  0827               	movf	convert_to_fp@res+2,w
  1974  0649  00F2               	movwf	?_convert_to_fp+2
  1975  064A  0826               	movf	convert_to_fp@res+1,w
  1976  064B  00F1               	movwf	?_convert_to_fp+1
  1977  064C  0825               	movf	convert_to_fp@res,w
  1978  064D  00F0               	movwf	?_convert_to_fp
  1979  064E  0008               	return
  1980  064F                     __end_of_convert_to_fp:	
  1981  007E                     btemp	set	126	;btemp
  1982  007E                     wtemp	set	126
  1983  007E                     wtemp0	set	126
  1984  0080                     wtemp1	set	128
  1985  0082                     wtemp2	set	130
  1986  0084                     wtemp3	set	132
  1987  0086                     wtemp4	set	134
  1988  0088                     wtemp5	set	136
  1989  007F                     wtemp6	set	127
  1990  007E                     ttemp	set	126
  1991  007E                     ttemp0	set	126
  1992  0081                     ttemp1	set	129
  1993  0084                     ttemp2	set	132
  1994  0087                     ttemp3	set	135
  1995  007F                     ttemp4	set	127
  1996  007E                     ltemp	set	126
  1997  007E                     ltemp0	set	126
  1998  0082                     ltemp1	set	130
  1999  0086                     ltemp2	set	134
  2000  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    14
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     63      71
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_convert_to_fp
    _multiply_fp->___lmul

Critical Paths under _main in BANK0

    _main->_reciprocal_fp
    _reciprocal_fp->_multiply_fp

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1832
                                             55 BANK0      8     8      0
                      _convert_to_fp
                      _reciprocal_fp
 ---------------------------------------------------------------------------------
 (1) _reciprocal_fp                                       21    17      4    1338
                                             34 BANK0     21    17      4
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (2) _multiply_fp                                         34    26      8    1082
                                              0 BANK0     34    26      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     516
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) _convert_to_fp                                       21    17      4     470
                                              0 COMMON    12     8      4
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convert_to_fp
   _reciprocal_fp
     _multiply_fp
       ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      55       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      55      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 19 09:17:08 2016

             __CFG_CP$OFF 0000                        l90 060C                        l77 0576  
                     l900 0604                       l906 0628                       l860 0589  
                     l924 06F7                       l918 0698                       l856 057F  
                     l894 05DA                       u425 058A                       u505 07DA  
            __CFG_CPD$OFF 0000                       u515 05C1                       u435 0591  
                     u455 0723                       u544 05F6                       u545 05F4  
                     u465 073B                       u475 0756                       u485 076E  
                     u495 079A              __CFG_BORV$LO 0000                       wreg 0009  
            __CFG_IESO$ON 0000     __end_of_reciprocal_fp 0700              __CFG_LVP$OFF 0000  
                    _LATA 010C                      _LATB 010D                      _PLLR 04D6  
                    _WPUA 020C                      _WPUB 020D              __CFG_WRT$OFF 0000  
           __CFG_FCMEN$ON 0000                      _main 054E                      fsr0h 0005  
                    fsr0l 0004                      btemp 007E             __CFG_BOREN$ON 0000  
                    ltemp 007E                      start 0002                      ttemp 007E  
                    wtemp 007E             __CFG_MCLRE$ON 0000             __CFG_PLLEN$ON 0000  
       _reciprocal_fp$584 004E                     ?_main 0070             _convert_to_fp 05A6  
           __CFG_WDTE$OFF 0000                     _TRISA 008C                     _TRISB 008D  
     ___lmul@multiplicand 0074           __end_of_fp_x0_a 0804           __end_of_fp_x0_b 0808  
                   main@t 005B                     main@u 0057                     ltemp0 007E  
                   ltemp1 0082                     ltemp2 0086                     ltemp3 0080  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
           multiply_fp@n1 0020             multiply_fp@n2 0024           __initialization 07F1  
            __end_of_main 0577            ?_convert_to_fp 0070                    ??_main 007C  
            _b_last_state 007C          _b_push_confirmed 0064           _b_count_pressed 0061  
                  _ANSELA 018C                    _ANSELB 018D                    _OSCCON 0099  
          __CFG_PWRTE$OFF 0000        convert_to_fp@i_bit 0024                    ___lmul 0577  
          __CFG_STVREN$ON 0000    convert_to_fp@res_fract 0020              ?_multiply_fp 0020  
 __end_of__initialization 07FD            multiply_fp@res 0036            __pcstackCOMMON 0070  
            __pidataBANK0 054D           ??_convert_to_fp 0074            _OPTION_REGbits 0095  
_b_has_once_been_released 0063                __pbssBANK0 005F          _b_count_released 0062  
              __pmaintext 054E                   ?___lmul 0070            ___lmul@product 0078  
                 _APFCON0 011D                   _APFCON1 011E                   _OSCSTAT 009A  
                 _OSCTUNE 0098           __size_of___lmul 002F    __size_of_reciprocal_fp 00B1  
 convert_to_fp@fract_part 0072                   _fp_x0_a 0800                   _fp_x0_b 0804  
                 __ptext1 064F                   __ptext2 0700                   __ptext3 0577  
                 __ptext4 05A6      end_of_initialization 07FD         __end_of_ratio_mph 080C  
               _LED_state 0066      __size_of_multiply_fp 00F1              __pstringtext 0800  
        __CFG_FOSC$INTOSC 0000             _reciprocal_fp 064F            __end_of___lmul 05A6  
        convert_to_fp@one 080C          convert_to_fp@res 0025            reciprocal_fp@i 0052  
     start_initialization 07F1            reciprocal_fp@n 0042            reciprocal_fp@x 0053  
          ?_reciprocal_fp 0042                  ??___lmul 0078               __pdataBANK0 0066  
   convert_to_fp@int_part 0070     __end_of_convert_to_fp 064F               __pbssCOMMON 007C  
               ___latbits 0001             __pcstackBANK0 0020     convert_to_fp@tmp_left 0022  
         ??_reciprocal_fp 0046                 _ratio_mph 0808         ___lmul@multiplier 0070  
           ??_multiply_fp 0028  __end_ofconvert_to_fp@one 080E               _LED_counter 005F  
       _b_confirmed_state 0060             __size_of_main 0029       __end_of_multiply_fp 07F1  
     _b_release_confirmed 0065         __CFG_CLKOUTEN$OFF 0000               _multiply_fp 0700  
  __size_of_convert_to_fp 00A9         multiply_fp@n1_fra 003A         multiply_fp@n2_fra 003E  

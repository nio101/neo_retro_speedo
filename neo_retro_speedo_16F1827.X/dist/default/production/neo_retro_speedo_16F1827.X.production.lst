

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Sep 21 09:15:43 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001C                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  008C                     	;# 
    76  008D                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0097                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  010C                     	;# 
    93  010D                     	;# 
    94  0111                     	;# 
    95  0112                     	;# 
    96  0113                     	;# 
    97  0114                     	;# 
    98  0115                     	;# 
    99  0116                     	;# 
   100  0117                     	;# 
   101  0118                     	;# 
   102  0119                     	;# 
   103  011A                     	;# 
   104  011B                     	;# 
   105  011D                     	;# 
   106  011E                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0191                     	;# 
   110  0191                     	;# 
   111  0192                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0194                     	;# 
   116  0195                     	;# 
   117  0196                     	;# 
   118  0199                     	;# 
   119  019A                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019B                     	;# 
   124  019C                     	;# 
   125  019C                     	;# 
   126  019D                     	;# 
   127  019E                     	;# 
   128  019F                     	;# 
   129  020C                     	;# 
   130  020D                     	;# 
   131  0211                     	;# 
   132  0211                     	;# 
   133  0212                     	;# 
   134  0212                     	;# 
   135  0213                     	;# 
   136  0213                     	;# 
   137  0214                     	;# 
   138  0214                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0215                     	;# 
   142  0216                     	;# 
   143  0216                     	;# 
   144  0217                     	;# 
   145  0217                     	;# 
   146  0219                     	;# 
   147  021A                     	;# 
   148  021B                     	;# 
   149  021C                     	;# 
   150  021D                     	;# 
   151  021E                     	;# 
   152  021F                     	;# 
   153  0291                     	;# 
   154  0291                     	;# 
   155  0292                     	;# 
   156  0293                     	;# 
   157  0294                     	;# 
   158  0295                     	;# 
   159  0295                     	;# 
   160  0296                     	;# 
   161  0298                     	;# 
   162  0298                     	;# 
   163  0299                     	;# 
   164  029A                     	;# 
   165  029B                     	;# 
   166  029C                     	;# 
   167  029C                     	;# 
   168  029D                     	;# 
   169  029E                     	;# 
   170  029E                     	;# 
   171  0311                     	;# 
   172  0311                     	;# 
   173  0312                     	;# 
   174  0313                     	;# 
   175  0318                     	;# 
   176  0318                     	;# 
   177  0319                     	;# 
   178  031A                     	;# 
   179  0394                     	;# 
   180  0395                     	;# 
   181  0396                     	;# 
   182  039A                     	;# 
   183  039C                     	;# 
   184  039D                     	;# 
   185  039E                     	;# 
   186  039F                     	;# 
   187  0415                     	;# 
   188  0416                     	;# 
   189  0417                     	;# 
   190  041C                     	;# 
   191  041D                     	;# 
   192  041E                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0014                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  001E                     	;# 
   232  001F                     	;# 
   233  008C                     	;# 
   234  008D                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0094                     	;# 
   239  0095                     	;# 
   240  0096                     	;# 
   241  0097                     	;# 
   242  0098                     	;# 
   243  0099                     	;# 
   244  009A                     	;# 
   245  009B                     	;# 
   246  009B                     	;# 
   247  009C                     	;# 
   248  009D                     	;# 
   249  009E                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  0111                     	;# 
   253  0112                     	;# 
   254  0113                     	;# 
   255  0114                     	;# 
   256  0115                     	;# 
   257  0116                     	;# 
   258  0117                     	;# 
   259  0118                     	;# 
   260  0119                     	;# 
   261  011A                     	;# 
   262  011B                     	;# 
   263  011D                     	;# 
   264  011E                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0191                     	;# 
   268  0191                     	;# 
   269  0192                     	;# 
   270  0193                     	;# 
   271  0193                     	;# 
   272  0193                     	;# 
   273  0194                     	;# 
   274  0195                     	;# 
   275  0196                     	;# 
   276  0199                     	;# 
   277  019A                     	;# 
   278  019B                     	;# 
   279  019B                     	;# 
   280  019B                     	;# 
   281  019B                     	;# 
   282  019C                     	;# 
   283  019C                     	;# 
   284  019D                     	;# 
   285  019E                     	;# 
   286  019F                     	;# 
   287  020C                     	;# 
   288  020D                     	;# 
   289  0211                     	;# 
   290  0211                     	;# 
   291  0212                     	;# 
   292  0212                     	;# 
   293  0213                     	;# 
   294  0213                     	;# 
   295  0214                     	;# 
   296  0214                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0215                     	;# 
   300  0216                     	;# 
   301  0216                     	;# 
   302  0217                     	;# 
   303  0217                     	;# 
   304  0219                     	;# 
   305  021A                     	;# 
   306  021B                     	;# 
   307  021C                     	;# 
   308  021D                     	;# 
   309  021E                     	;# 
   310  021F                     	;# 
   311  0291                     	;# 
   312  0291                     	;# 
   313  0292                     	;# 
   314  0293                     	;# 
   315  0294                     	;# 
   316  0295                     	;# 
   317  0295                     	;# 
   318  0296                     	;# 
   319  0298                     	;# 
   320  0298                     	;# 
   321  0299                     	;# 
   322  029A                     	;# 
   323  029B                     	;# 
   324  029C                     	;# 
   325  029C                     	;# 
   326  029D                     	;# 
   327  029E                     	;# 
   328  029E                     	;# 
   329  0311                     	;# 
   330  0311                     	;# 
   331  0312                     	;# 
   332  0313                     	;# 
   333  0318                     	;# 
   334  0318                     	;# 
   335  0319                     	;# 
   336  031A                     	;# 
   337  0394                     	;# 
   338  0395                     	;# 
   339  0396                     	;# 
   340  039A                     	;# 
   341  039C                     	;# 
   342  039D                     	;# 
   343  039E                     	;# 
   344  039F                     	;# 
   345  0415                     	;# 
   346  0416                     	;# 
   347  0417                     	;# 
   348  041C                     	;# 
   349  041D                     	;# 
   350  041E                     	;# 
   351  0FE4                     	;# 
   352  0FE5                     	;# 
   353  0FE6                     	;# 
   354  0FE7                     	;# 
   355  0FE8                     	;# 
   356  0FE9                     	;# 
   357  0FEA                     	;# 
   358  0FEB                     	;# 
   359  0FED                     	;# 
   360  0FEE                     	;# 
   361  0FEF                     	;# 
   362  0000                     	;# 
   363  0001                     	;# 
   364  0002                     	;# 
   365  0003                     	;# 
   366  0004                     	;# 
   367  0005                     	;# 
   368  0006                     	;# 
   369  0007                     	;# 
   370  0008                     	;# 
   371  0009                     	;# 
   372  000A                     	;# 
   373  000B                     	;# 
   374  000C                     	;# 
   375  000D                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0013                     	;# 
   379  0014                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0016                     	;# 
   383  0017                     	;# 
   384  0018                     	;# 
   385  0019                     	;# 
   386  001A                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  008C                     	;# 
   392  008D                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0093                     	;# 
   396  0094                     	;# 
   397  0095                     	;# 
   398  0096                     	;# 
   399  0097                     	;# 
   400  0098                     	;# 
   401  0099                     	;# 
   402  009A                     	;# 
   403  009B                     	;# 
   404  009B                     	;# 
   405  009C                     	;# 
   406  009D                     	;# 
   407  009E                     	;# 
   408  010C                     	;# 
   409  010D                     	;# 
   410  0111                     	;# 
   411  0112                     	;# 
   412  0113                     	;# 
   413  0114                     	;# 
   414  0115                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  0118                     	;# 
   418  0119                     	;# 
   419  011A                     	;# 
   420  011B                     	;# 
   421  011D                     	;# 
   422  011E                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019C                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019F                     	;# 
   445  020C                     	;# 
   446  020D                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0216                     	;# 
   459  0216                     	;# 
   460  0217                     	;# 
   461  0217                     	;# 
   462  0219                     	;# 
   463  021A                     	;# 
   464  021B                     	;# 
   465  021C                     	;# 
   466  021D                     	;# 
   467  021E                     	;# 
   468  021F                     	;# 
   469  0291                     	;# 
   470  0291                     	;# 
   471  0292                     	;# 
   472  0293                     	;# 
   473  0294                     	;# 
   474  0295                     	;# 
   475  0295                     	;# 
   476  0296                     	;# 
   477  0298                     	;# 
   478  0298                     	;# 
   479  0299                     	;# 
   480  029A                     	;# 
   481  029B                     	;# 
   482  029C                     	;# 
   483  029C                     	;# 
   484  029D                     	;# 
   485  029E                     	;# 
   486  029E                     	;# 
   487  0311                     	;# 
   488  0311                     	;# 
   489  0312                     	;# 
   490  0313                     	;# 
   491  0318                     	;# 
   492  0318                     	;# 
   493  0319                     	;# 
   494  031A                     	;# 
   495  0394                     	;# 
   496  0395                     	;# 
   497  0396                     	;# 
   498  039A                     	;# 
   499  039C                     	;# 
   500  039D                     	;# 
   501  039E                     	;# 
   502  039F                     	;# 
   503  0415                     	;# 
   504  0416                     	;# 
   505  0417                     	;# 
   506  041C                     	;# 
   507  041D                     	;# 
   508  041E                     	;# 
   509  0FE4                     	;# 
   510  0FE5                     	;# 
   511  0FE6                     	;# 
   512  0FE7                     	;# 
   513  0FE8                     	;# 
   514  0FE9                     	;# 
   515  0FEA                     	;# 
   516  0FEB                     	;# 
   517  0FED                     	;# 
   518  0FEE                     	;# 
   519  0FEF                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001C                     	;# 
   547  001E                     	;# 
   548  001F                     	;# 
   549  008C                     	;# 
   550  008D                     	;# 
   551  0091                     	;# 
   552  0092                     	;# 
   553  0093                     	;# 
   554  0094                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0097                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009A                     	;# 
   561  009B                     	;# 
   562  009B                     	;# 
   563  009C                     	;# 
   564  009D                     	;# 
   565  009E                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  0111                     	;# 
   569  0112                     	;# 
   570  0113                     	;# 
   571  0114                     	;# 
   572  0115                     	;# 
   573  0116                     	;# 
   574  0117                     	;# 
   575  0118                     	;# 
   576  0119                     	;# 
   577  011A                     	;# 
   578  011B                     	;# 
   579  011D                     	;# 
   580  011E                     	;# 
   581  018C                     	;# 
   582  018D                     	;# 
   583  0191                     	;# 
   584  0191                     	;# 
   585  0192                     	;# 
   586  0193                     	;# 
   587  0193                     	;# 
   588  0193                     	;# 
   589  0194                     	;# 
   590  0195                     	;# 
   591  0196                     	;# 
   592  0199                     	;# 
   593  019A                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  019C                     	;# 
   600  019D                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  020C                     	;# 
   604  020D                     	;# 
   605  0211                     	;# 
   606  0211                     	;# 
   607  0212                     	;# 
   608  0212                     	;# 
   609  0213                     	;# 
   610  0213                     	;# 
   611  0214                     	;# 
   612  0214                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0215                     	;# 
   616  0216                     	;# 
   617  0216                     	;# 
   618  0217                     	;# 
   619  0217                     	;# 
   620  0219                     	;# 
   621  021A                     	;# 
   622  021B                     	;# 
   623  021C                     	;# 
   624  021D                     	;# 
   625  021E                     	;# 
   626  021F                     	;# 
   627  0291                     	;# 
   628  0291                     	;# 
   629  0292                     	;# 
   630  0293                     	;# 
   631  0294                     	;# 
   632  0295                     	;# 
   633  0295                     	;# 
   634  0296                     	;# 
   635  0298                     	;# 
   636  0298                     	;# 
   637  0299                     	;# 
   638  029A                     	;# 
   639  029B                     	;# 
   640  029C                     	;# 
   641  029C                     	;# 
   642  029D                     	;# 
   643  029E                     	;# 
   644  029E                     	;# 
   645  0311                     	;# 
   646  0311                     	;# 
   647  0312                     	;# 
   648  0313                     	;# 
   649  0318                     	;# 
   650  0318                     	;# 
   651  0319                     	;# 
   652  031A                     	;# 
   653  0394                     	;# 
   654  0395                     	;# 
   655  0396                     	;# 
   656  039A                     	;# 
   657  039C                     	;# 
   658  039D                     	;# 
   659  039E                     	;# 
   660  039F                     	;# 
   661  0415                     	;# 
   662  0416                     	;# 
   663  0417                     	;# 
   664  041C                     	;# 
   665  041D                     	;# 
   666  041E                     	;# 
   667  0FE4                     	;# 
   668  0FE5                     	;# 
   669  0FE6                     	;# 
   670  0FE7                     	;# 
   671  0FE8                     	;# 
   672  0FE9                     	;# 
   673  0FEA                     	;# 
   674  0FEB                     	;# 
   675  0FED                     	;# 
   676  0FEE                     	;# 
   677  0FEF                     	;# 
   678  0000                     	;# 
   679  0001                     	;# 
   680  0002                     	;# 
   681  0003                     	;# 
   682  0004                     	;# 
   683  0005                     	;# 
   684  0006                     	;# 
   685  0007                     	;# 
   686  0008                     	;# 
   687  0009                     	;# 
   688  000A                     	;# 
   689  000B                     	;# 
   690  000C                     	;# 
   691  000D                     	;# 
   692  0011                     	;# 
   693  0012                     	;# 
   694  0013                     	;# 
   695  0014                     	;# 
   696  0015                     	;# 
   697  0016                     	;# 
   698  0016                     	;# 
   699  0017                     	;# 
   700  0018                     	;# 
   701  0019                     	;# 
   702  001A                     	;# 
   703  001B                     	;# 
   704  001C                     	;# 
   705  001E                     	;# 
   706  001F                     	;# 
   707  008C                     	;# 
   708  008D                     	;# 
   709  0091                     	;# 
   710  0092                     	;# 
   711  0093                     	;# 
   712  0094                     	;# 
   713  0095                     	;# 
   714  0096                     	;# 
   715  0097                     	;# 
   716  0098                     	;# 
   717  0099                     	;# 
   718  009A                     	;# 
   719  009B                     	;# 
   720  009B                     	;# 
   721  009C                     	;# 
   722  009D                     	;# 
   723  009E                     	;# 
   724  010C                     	;# 
   725  010D                     	;# 
   726  0111                     	;# 
   727  0112                     	;# 
   728  0113                     	;# 
   729  0114                     	;# 
   730  0115                     	;# 
   731  0116                     	;# 
   732  0117                     	;# 
   733  0118                     	;# 
   734  0119                     	;# 
   735  011A                     	;# 
   736  011B                     	;# 
   737  011D                     	;# 
   738  011E                     	;# 
   739  018C                     	;# 
   740  018D                     	;# 
   741  0191                     	;# 
   742  0191                     	;# 
   743  0192                     	;# 
   744  0193                     	;# 
   745  0193                     	;# 
   746  0193                     	;# 
   747  0194                     	;# 
   748  0195                     	;# 
   749  0196                     	;# 
   750  0199                     	;# 
   751  019A                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019C                     	;# 
   757  019C                     	;# 
   758  019D                     	;# 
   759  019E                     	;# 
   760  019F                     	;# 
   761  020C                     	;# 
   762  020D                     	;# 
   763  0211                     	;# 
   764  0211                     	;# 
   765  0212                     	;# 
   766  0212                     	;# 
   767  0213                     	;# 
   768  0213                     	;# 
   769  0214                     	;# 
   770  0214                     	;# 
   771  0215                     	;# 
   772  0215                     	;# 
   773  0215                     	;# 
   774  0216                     	;# 
   775  0216                     	;# 
   776  0217                     	;# 
   777  0217                     	;# 
   778  0219                     	;# 
   779  021A                     	;# 
   780  021B                     	;# 
   781  021C                     	;# 
   782  021D                     	;# 
   783  021E                     	;# 
   784  021F                     	;# 
   785  0291                     	;# 
   786  0291                     	;# 
   787  0292                     	;# 
   788  0293                     	;# 
   789  0294                     	;# 
   790  0295                     	;# 
   791  0295                     	;# 
   792  0296                     	;# 
   793  0298                     	;# 
   794  0298                     	;# 
   795  0299                     	;# 
   796  029A                     	;# 
   797  029B                     	;# 
   798  029C                     	;# 
   799  029C                     	;# 
   800  029D                     	;# 
   801  029E                     	;# 
   802  029E                     	;# 
   803  0311                     	;# 
   804  0311                     	;# 
   805  0312                     	;# 
   806  0313                     	;# 
   807  0318                     	;# 
   808  0318                     	;# 
   809  0319                     	;# 
   810  031A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  039A                     	;# 
   815  039C                     	;# 
   816  039D                     	;# 
   817  039E                     	;# 
   818  039F                     	;# 
   819  0415                     	;# 
   820  0416                     	;# 
   821  0417                     	;# 
   822  041C                     	;# 
   823  041D                     	;# 
   824  041E                     	;# 
   825  0FE4                     	;# 
   826  0FE5                     	;# 
   827  0FE6                     	;# 
   828  0FE7                     	;# 
   829  0FE8                     	;# 
   830  0FE9                     	;# 
   831  0FEA                     	;# 
   832  0FEB                     	;# 
   833  0FED                     	;# 
   834  0FEE                     	;# 
   835  0FEF                     	;# 
   836  0000                     	;# 
   837  0001                     	;# 
   838  0002                     	;# 
   839  0003                     	;# 
   840  0004                     	;# 
   841  0005                     	;# 
   842  0006                     	;# 
   843  0007                     	;# 
   844  0008                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0013                     	;# 
   853  0014                     	;# 
   854  0015                     	;# 
   855  0016                     	;# 
   856  0016                     	;# 
   857  0017                     	;# 
   858  0018                     	;# 
   859  0019                     	;# 
   860  001A                     	;# 
   861  001B                     	;# 
   862  001C                     	;# 
   863  001E                     	;# 
   864  001F                     	;# 
   865  008C                     	;# 
   866  008D                     	;# 
   867  0091                     	;# 
   868  0092                     	;# 
   869  0093                     	;# 
   870  0094                     	;# 
   871  0095                     	;# 
   872  0096                     	;# 
   873  0097                     	;# 
   874  0098                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  010C                     	;# 
   883  010D                     	;# 
   884  0111                     	;# 
   885  0112                     	;# 
   886  0113                     	;# 
   887  0114                     	;# 
   888  0115                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  0118                     	;# 
   892  0119                     	;# 
   893  011A                     	;# 
   894  011B                     	;# 
   895  011D                     	;# 
   896  011E                     	;# 
   897  018C                     	;# 
   898  018D                     	;# 
   899  0191                     	;# 
   900  0191                     	;# 
   901  0192                     	;# 
   902  0193                     	;# 
   903  0193                     	;# 
   904  0193                     	;# 
   905  0194                     	;# 
   906  0195                     	;# 
   907  0196                     	;# 
   908  0199                     	;# 
   909  019A                     	;# 
   910  019B                     	;# 
   911  019B                     	;# 
   912  019B                     	;# 
   913  019B                     	;# 
   914  019C                     	;# 
   915  019C                     	;# 
   916  019D                     	;# 
   917  019E                     	;# 
   918  019F                     	;# 
   919  020C                     	;# 
   920  020D                     	;# 
   921  0211                     	;# 
   922  0211                     	;# 
   923  0212                     	;# 
   924  0212                     	;# 
   925  0213                     	;# 
   926  0213                     	;# 
   927  0214                     	;# 
   928  0214                     	;# 
   929  0215                     	;# 
   930  0215                     	;# 
   931  0215                     	;# 
   932  0216                     	;# 
   933  0216                     	;# 
   934  0217                     	;# 
   935  0217                     	;# 
   936  0219                     	;# 
   937  021A                     	;# 
   938  021B                     	;# 
   939  021C                     	;# 
   940  021D                     	;# 
   941  021E                     	;# 
   942  021F                     	;# 
   943  0291                     	;# 
   944  0291                     	;# 
   945  0292                     	;# 
   946  0293                     	;# 
   947  0294                     	;# 
   948  0295                     	;# 
   949  0295                     	;# 
   950  0296                     	;# 
   951  0298                     	;# 
   952  0298                     	;# 
   953  0299                     	;# 
   954  029A                     	;# 
   955  029B                     	;# 
   956  029C                     	;# 
   957  029C                     	;# 
   958  029D                     	;# 
   959  029E                     	;# 
   960  029E                     	;# 
   961  0311                     	;# 
   962  0311                     	;# 
   963  0312                     	;# 
   964  0313                     	;# 
   965  0318                     	;# 
   966  0318                     	;# 
   967  0319                     	;# 
   968  031A                     	;# 
   969  0394                     	;# 
   970  0395                     	;# 
   971  0396                     	;# 
   972  039A                     	;# 
   973  039C                     	;# 
   974  039D                     	;# 
   975  039E                     	;# 
   976  039F                     	;# 
   977  0415                     	;# 
   978  0416                     	;# 
   979  0417                     	;# 
   980  041C                     	;# 
   981  041D                     	;# 
   982  041E                     	;# 
   983  0FE4                     	;# 
   984  0FE5                     	;# 
   985  0FE6                     	;# 
   986  0FE7                     	;# 
   987  0FE8                     	;# 
   988  0FE9                     	;# 
   989  0FEA                     	;# 
   990  0FEB                     	;# 
   991  0FED                     	;# 
   992  0FEE                     	;# 
   993  0FEF                     	;# 
   994  0000                     	;# 
   995  0001                     	;# 
   996  0002                     	;# 
   997  0003                     	;# 
   998  0004                     	;# 
   999  0005                     	;# 
  1000  0006                     	;# 
  1001  0007                     	;# 
  1002  0008                     	;# 
  1003  0009                     	;# 
  1004  000A                     	;# 
  1005  000B                     	;# 
  1006  000C                     	;# 
  1007  000D                     	;# 
  1008  0011                     	;# 
  1009  0012                     	;# 
  1010  0013                     	;# 
  1011  0014                     	;# 
  1012  0015                     	;# 
  1013  0016                     	;# 
  1014  0016                     	;# 
  1015  0017                     	;# 
  1016  0018                     	;# 
  1017  0019                     	;# 
  1018  001A                     	;# 
  1019  001B                     	;# 
  1020  001C                     	;# 
  1021  001E                     	;# 
  1022  001F                     	;# 
  1023  008C                     	;# 
  1024  008D                     	;# 
  1025  0091                     	;# 
  1026  0092                     	;# 
  1027  0093                     	;# 
  1028  0094                     	;# 
  1029  0095                     	;# 
  1030  0096                     	;# 
  1031  0097                     	;# 
  1032  0098                     	;# 
  1033  0099                     	;# 
  1034  009A                     	;# 
  1035  009B                     	;# 
  1036  009B                     	;# 
  1037  009C                     	;# 
  1038  009D                     	;# 
  1039  009E                     	;# 
  1040  010C                     	;# 
  1041  010D                     	;# 
  1042  0111                     	;# 
  1043  0112                     	;# 
  1044  0113                     	;# 
  1045  0114                     	;# 
  1046  0115                     	;# 
  1047  0116                     	;# 
  1048  0117                     	;# 
  1049  0118                     	;# 
  1050  0119                     	;# 
  1051  011A                     	;# 
  1052  011B                     	;# 
  1053  011D                     	;# 
  1054  011E                     	;# 
  1055  018C                     	;# 
  1056  018D                     	;# 
  1057  0191                     	;# 
  1058  0191                     	;# 
  1059  0192                     	;# 
  1060  0193                     	;# 
  1061  0193                     	;# 
  1062  0193                     	;# 
  1063  0194                     	;# 
  1064  0195                     	;# 
  1065  0196                     	;# 
  1066  0199                     	;# 
  1067  019A                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019B                     	;# 
  1072  019C                     	;# 
  1073  019C                     	;# 
  1074  019D                     	;# 
  1075  019E                     	;# 
  1076  019F                     	;# 
  1077  020C                     	;# 
  1078  020D                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  0291                     	;# 
  1102  0291                     	;# 
  1103  0292                     	;# 
  1104  0293                     	;# 
  1105  0294                     	;# 
  1106  0295                     	;# 
  1107  0295                     	;# 
  1108  0296                     	;# 
  1109  0298                     	;# 
  1110  0298                     	;# 
  1111  0299                     	;# 
  1112  029A                     	;# 
  1113  029B                     	;# 
  1114  029C                     	;# 
  1115  029C                     	;# 
  1116  029D                     	;# 
  1117  029E                     	;# 
  1118  029E                     	;# 
  1119  0311                     	;# 
  1120  0311                     	;# 
  1121  0312                     	;# 
  1122  0313                     	;# 
  1123  0318                     	;# 
  1124  0318                     	;# 
  1125  0319                     	;# 
  1126  031A                     	;# 
  1127  0394                     	;# 
  1128  0395                     	;# 
  1129  0396                     	;# 
  1130  039A                     	;# 
  1131  039C                     	;# 
  1132  039D                     	;# 
  1133  039E                     	;# 
  1134  039F                     	;# 
  1135  0415                     	;# 
  1136  0416                     	;# 
  1137  0417                     	;# 
  1138  041C                     	;# 
  1139  041D                     	;# 
  1140  041E                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  0011                     	;# 
  1167  0012                     	;# 
  1168  0013                     	;# 
  1169  0014                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  001E                     	;# 
  1180  001F                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0093                     	;# 
  1186  0094                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0098                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  0111                     	;# 
  1201  0112                     	;# 
  1202  0113                     	;# 
  1203  0114                     	;# 
  1204  0115                     	;# 
  1205  0116                     	;# 
  1206  0117                     	;# 
  1207  0118                     	;# 
  1208  0119                     	;# 
  1209  011A                     	;# 
  1210  011B                     	;# 
  1211  011D                     	;# 
  1212  011E                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020C                     	;# 
  1236  020D                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0219                     	;# 
  1253  021A                     	;# 
  1254  021B                     	;# 
  1255  021C                     	;# 
  1256  021D                     	;# 
  1257  021E                     	;# 
  1258  021F                     	;# 
  1259  0291                     	;# 
  1260  0291                     	;# 
  1261  0292                     	;# 
  1262  0293                     	;# 
  1263  0294                     	;# 
  1264  0295                     	;# 
  1265  0295                     	;# 
  1266  0296                     	;# 
  1267  0298                     	;# 
  1268  0298                     	;# 
  1269  0299                     	;# 
  1270  029A                     	;# 
  1271  029B                     	;# 
  1272  029C                     	;# 
  1273  029C                     	;# 
  1274  029D                     	;# 
  1275  029E                     	;# 
  1276  029E                     	;# 
  1277  0311                     	;# 
  1278  0311                     	;# 
  1279  0312                     	;# 
  1280  0313                     	;# 
  1281  0318                     	;# 
  1282  0318                     	;# 
  1283  0319                     	;# 
  1284  031A                     	;# 
  1285  0394                     	;# 
  1286  0395                     	;# 
  1287  0396                     	;# 
  1288  039A                     	;# 
  1289  039C                     	;# 
  1290  039D                     	;# 
  1291  039E                     	;# 
  1292  039F                     	;# 
  1293  0415                     	;# 
  1294  0416                     	;# 
  1295  0417                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310                           
  1311                           	psect	eeprom_data
  1312  0000  0011 0022 0033 0044 0055 0066 0077 0088 	db	17,34,51,68,85,102,119,136	;# 
  1313  0008  0049 00C8 0000 0000 0000 0000 0000 0000 	db	73,200,0,0,0,0,0,0	;# 
  1314  0000                     	;# 
  1315  0001                     	;# 
  1316  0002                     	;# 
  1317  0003                     	;# 
  1318  0004                     	;# 
  1319  0005                     	;# 
  1320  0006                     	;# 
  1321  0007                     	;# 
  1322  0008                     	;# 
  1323  0009                     	;# 
  1324  000A                     	;# 
  1325  000B                     	;# 
  1326  000C                     	;# 
  1327  000D                     	;# 
  1328  0011                     	;# 
  1329  0012                     	;# 
  1330  0013                     	;# 
  1331  0014                     	;# 
  1332  0015                     	;# 
  1333  0016                     	;# 
  1334  0016                     	;# 
  1335  0017                     	;# 
  1336  0018                     	;# 
  1337  0019                     	;# 
  1338  001A                     	;# 
  1339  001B                     	;# 
  1340  001C                     	;# 
  1341  001E                     	;# 
  1342  001F                     	;# 
  1343  008C                     	;# 
  1344  008D                     	;# 
  1345  0091                     	;# 
  1346  0092                     	;# 
  1347  0093                     	;# 
  1348  0094                     	;# 
  1349  0095                     	;# 
  1350  0096                     	;# 
  1351  0097                     	;# 
  1352  0098                     	;# 
  1353  0099                     	;# 
  1354  009A                     	;# 
  1355  009B                     	;# 
  1356  009B                     	;# 
  1357  009C                     	;# 
  1358  009D                     	;# 
  1359  009E                     	;# 
  1360  010C                     	;# 
  1361  010D                     	;# 
  1362  0111                     	;# 
  1363  0112                     	;# 
  1364  0113                     	;# 
  1365  0114                     	;# 
  1366  0115                     	;# 
  1367  0116                     	;# 
  1368  0117                     	;# 
  1369  0118                     	;# 
  1370  0119                     	;# 
  1371  011A                     	;# 
  1372  011B                     	;# 
  1373  011D                     	;# 
  1374  011E                     	;# 
  1375  018C                     	;# 
  1376  018D                     	;# 
  1377  0191                     	;# 
  1378  0191                     	;# 
  1379  0192                     	;# 
  1380  0193                     	;# 
  1381  0193                     	;# 
  1382  0193                     	;# 
  1383  0194                     	;# 
  1384  0195                     	;# 
  1385  0196                     	;# 
  1386  0199                     	;# 
  1387  019A                     	;# 
  1388  019B                     	;# 
  1389  019B                     	;# 
  1390  019B                     	;# 
  1391  019B                     	;# 
  1392  019C                     	;# 
  1393  019C                     	;# 
  1394  019D                     	;# 
  1395  019E                     	;# 
  1396  019F                     	;# 
  1397  020C                     	;# 
  1398  020D                     	;# 
  1399  0211                     	;# 
  1400  0211                     	;# 
  1401  0212                     	;# 
  1402  0212                     	;# 
  1403  0213                     	;# 
  1404  0213                     	;# 
  1405  0214                     	;# 
  1406  0214                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0216                     	;# 
  1411  0216                     	;# 
  1412  0217                     	;# 
  1413  0217                     	;# 
  1414  0219                     	;# 
  1415  021A                     	;# 
  1416  021B                     	;# 
  1417  021C                     	;# 
  1418  021D                     	;# 
  1419  021E                     	;# 
  1420  021F                     	;# 
  1421  0291                     	;# 
  1422  0291                     	;# 
  1423  0292                     	;# 
  1424  0293                     	;# 
  1425  0294                     	;# 
  1426  0295                     	;# 
  1427  0295                     	;# 
  1428  0296                     	;# 
  1429  0298                     	;# 
  1430  0298                     	;# 
  1431  0299                     	;# 
  1432  029A                     	;# 
  1433  029B                     	;# 
  1434  029C                     	;# 
  1435  029C                     	;# 
  1436  029D                     	;# 
  1437  029E                     	;# 
  1438  029E                     	;# 
  1439  0311                     	;# 
  1440  0311                     	;# 
  1441  0312                     	;# 
  1442  0313                     	;# 
  1443  0318                     	;# 
  1444  0318                     	;# 
  1445  0319                     	;# 
  1446  031A                     	;# 
  1447  0394                     	;# 
  1448  0395                     	;# 
  1449  0396                     	;# 
  1450  039A                     	;# 
  1451  039C                     	;# 
  1452  039D                     	;# 
  1453  039E                     	;# 
  1454  039F                     	;# 
  1455  0415                     	;# 
  1456  0416                     	;# 
  1457  0417                     	;# 
  1458  041C                     	;# 
  1459  041D                     	;# 
  1460  041E                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0013                     	;# 
  1489  0014                     	;# 
  1490  0015                     	;# 
  1491  0016                     	;# 
  1492  0016                     	;# 
  1493  0017                     	;# 
  1494  0018                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  001E                     	;# 
  1500  001F                     	;# 
  1501  008C                     	;# 
  1502  008D                     	;# 
  1503  0091                     	;# 
  1504  0092                     	;# 
  1505  0093                     	;# 
  1506  0094                     	;# 
  1507  0095                     	;# 
  1508  0096                     	;# 
  1509  0097                     	;# 
  1510  0098                     	;# 
  1511  0099                     	;# 
  1512  009A                     	;# 
  1513  009B                     	;# 
  1514  009B                     	;# 
  1515  009C                     	;# 
  1516  009D                     	;# 
  1517  009E                     	;# 
  1518  010C                     	;# 
  1519  010D                     	;# 
  1520  0111                     	;# 
  1521  0112                     	;# 
  1522  0113                     	;# 
  1523  0114                     	;# 
  1524  0115                     	;# 
  1525  0116                     	;# 
  1526  0117                     	;# 
  1527  0118                     	;# 
  1528  0119                     	;# 
  1529  011A                     	;# 
  1530  011B                     	;# 
  1531  011D                     	;# 
  1532  011E                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  0191                     	;# 
  1536  0191                     	;# 
  1537  0192                     	;# 
  1538  0193                     	;# 
  1539  0193                     	;# 
  1540  0193                     	;# 
  1541  0194                     	;# 
  1542  0195                     	;# 
  1543  0196                     	;# 
  1544  0199                     	;# 
  1545  019A                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019C                     	;# 
  1551  019C                     	;# 
  1552  019D                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  020C                     	;# 
  1556  020D                     	;# 
  1557  0211                     	;# 
  1558  0211                     	;# 
  1559  0212                     	;# 
  1560  0212                     	;# 
  1561  0213                     	;# 
  1562  0213                     	;# 
  1563  0214                     	;# 
  1564  0214                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0216                     	;# 
  1569  0216                     	;# 
  1570  0217                     	;# 
  1571  0217                     	;# 
  1572  0219                     	;# 
  1573  021A                     	;# 
  1574  021B                     	;# 
  1575  021C                     	;# 
  1576  021D                     	;# 
  1577  021E                     	;# 
  1578  021F                     	;# 
  1579  0291                     	;# 
  1580  0291                     	;# 
  1581  0292                     	;# 
  1582  0293                     	;# 
  1583  0294                     	;# 
  1584  0295                     	;# 
  1585  0295                     	;# 
  1586  0296                     	;# 
  1587  0298                     	;# 
  1588  0298                     	;# 
  1589  0299                     	;# 
  1590  029A                     	;# 
  1591  029B                     	;# 
  1592  029C                     	;# 
  1593  029C                     	;# 
  1594  029D                     	;# 
  1595  029E                     	;# 
  1596  029E                     	;# 
  1597  0311                     	;# 
  1598  0311                     	;# 
  1599  0312                     	;# 
  1600  0313                     	;# 
  1601  0318                     	;# 
  1602  0318                     	;# 
  1603  0319                     	;# 
  1604  031A                     	;# 
  1605  0394                     	;# 
  1606  0395                     	;# 
  1607  0396                     	;# 
  1608  039A                     	;# 
  1609  039C                     	;# 
  1610  039D                     	;# 
  1611  039E                     	;# 
  1612  039F                     	;# 
  1613  0415                     	;# 
  1614  0416                     	;# 
  1615  0417                     	;# 
  1616  041C                     	;# 
  1617  041D                     	;# 
  1618  041E                     	;# 
  1619  0FE4                     	;# 
  1620  0FE5                     	;# 
  1621  0FE6                     	;# 
  1622  0FE7                     	;# 
  1623  0FE8                     	;# 
  1624  0FE9                     	;# 
  1625  0FEA                     	;# 
  1626  0FEB                     	;# 
  1627  0FED                     	;# 
  1628  0FEE                     	;# 
  1629  0FEF                     	;# 
  1630  0000                     	;# 
  1631  0001                     	;# 
  1632  0002                     	;# 
  1633  0003                     	;# 
  1634  0004                     	;# 
  1635  0005                     	;# 
  1636  0006                     	;# 
  1637  0007                     	;# 
  1638  0008                     	;# 
  1639  0009                     	;# 
  1640  000A                     	;# 
  1641  000B                     	;# 
  1642  000C                     	;# 
  1643  000D                     	;# 
  1644  0011                     	;# 
  1645  0012                     	;# 
  1646  0013                     	;# 
  1647  0014                     	;# 
  1648  0015                     	;# 
  1649  0016                     	;# 
  1650  0016                     	;# 
  1651  0017                     	;# 
  1652  0018                     	;# 
  1653  0019                     	;# 
  1654  001A                     	;# 
  1655  001B                     	;# 
  1656  001C                     	;# 
  1657  001E                     	;# 
  1658  001F                     	;# 
  1659  008C                     	;# 
  1660  008D                     	;# 
  1661  0091                     	;# 
  1662  0092                     	;# 
  1663  0093                     	;# 
  1664  0094                     	;# 
  1665  0095                     	;# 
  1666  0096                     	;# 
  1667  0097                     	;# 
  1668  0098                     	;# 
  1669  0099                     	;# 
  1670  009A                     	;# 
  1671  009B                     	;# 
  1672  009B                     	;# 
  1673  009C                     	;# 
  1674  009D                     	;# 
  1675  009E                     	;# 
  1676  010C                     	;# 
  1677  010D                     	;# 
  1678  0111                     	;# 
  1679  0112                     	;# 
  1680  0113                     	;# 
  1681  0114                     	;# 
  1682  0115                     	;# 
  1683  0116                     	;# 
  1684  0117                     	;# 
  1685  0118                     	;# 
  1686  0119                     	;# 
  1687  011A                     	;# 
  1688  011B                     	;# 
  1689  011D                     	;# 
  1690  011E                     	;# 
  1691  018C                     	;# 
  1692  018D                     	;# 
  1693  0191                     	;# 
  1694  0191                     	;# 
  1695  0192                     	;# 
  1696  0193                     	;# 
  1697  0193                     	;# 
  1698  0193                     	;# 
  1699  0194                     	;# 
  1700  0195                     	;# 
  1701  0196                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019B                     	;# 
  1707  019B                     	;# 
  1708  019C                     	;# 
  1709  019C                     	;# 
  1710  019D                     	;# 
  1711  019E                     	;# 
  1712  019F                     	;# 
  1713  020C                     	;# 
  1714  020D                     	;# 
  1715  0211                     	;# 
  1716  0211                     	;# 
  1717  0212                     	;# 
  1718  0212                     	;# 
  1719  0213                     	;# 
  1720  0213                     	;# 
  1721  0214                     	;# 
  1722  0214                     	;# 
  1723  0215                     	;# 
  1724  0215                     	;# 
  1725  0215                     	;# 
  1726  0216                     	;# 
  1727  0216                     	;# 
  1728  0217                     	;# 
  1729  0217                     	;# 
  1730  0219                     	;# 
  1731  021A                     	;# 
  1732  021B                     	;# 
  1733  021C                     	;# 
  1734  021D                     	;# 
  1735  021E                     	;# 
  1736  021F                     	;# 
  1737  0291                     	;# 
  1738  0291                     	;# 
  1739  0292                     	;# 
  1740  0293                     	;# 
  1741  0294                     	;# 
  1742  0295                     	;# 
  1743  0295                     	;# 
  1744  0296                     	;# 
  1745  0298                     	;# 
  1746  0298                     	;# 
  1747  0299                     	;# 
  1748  029A                     	;# 
  1749  029B                     	;# 
  1750  029C                     	;# 
  1751  029C                     	;# 
  1752  029D                     	;# 
  1753  029E                     	;# 
  1754  029E                     	;# 
  1755  0311                     	;# 
  1756  0311                     	;# 
  1757  0312                     	;# 
  1758  0313                     	;# 
  1759  0318                     	;# 
  1760  0318                     	;# 
  1761  0319                     	;# 
  1762  031A                     	;# 
  1763  0394                     	;# 
  1764  0395                     	;# 
  1765  0396                     	;# 
  1766  039A                     	;# 
  1767  039C                     	;# 
  1768  039D                     	;# 
  1769  039E                     	;# 
  1770  039F                     	;# 
  1771  0415                     	;# 
  1772  0416                     	;# 
  1773  0417                     	;# 
  1774  041C                     	;# 
  1775  041D                     	;# 
  1776  041E                     	;# 
  1777  0FE4                     	;# 
  1778  0FE5                     	;# 
  1779  0FE6                     	;# 
  1780  0FE7                     	;# 
  1781  0FE8                     	;# 
  1782  0FE9                     	;# 
  1783  0FEA                     	;# 
  1784  0FEB                     	;# 
  1785  0FED                     	;# 
  1786  0FEE                     	;# 
  1787  0FEF                     	;# 
  1788  0000                     	;# 
  1789  0001                     	;# 
  1790  0002                     	;# 
  1791  0003                     	;# 
  1792  0004                     	;# 
  1793  0005                     	;# 
  1794  0006                     	;# 
  1795  0007                     	;# 
  1796  0008                     	;# 
  1797  0009                     	;# 
  1798  000A                     	;# 
  1799  000B                     	;# 
  1800  000C                     	;# 
  1801  000D                     	;# 
  1802  0011                     	;# 
  1803  0012                     	;# 
  1804  0013                     	;# 
  1805  0014                     	;# 
  1806  0015                     	;# 
  1807  0016                     	;# 
  1808  0016                     	;# 
  1809  0017                     	;# 
  1810  0018                     	;# 
  1811  0019                     	;# 
  1812  001A                     	;# 
  1813  001B                     	;# 
  1814  001C                     	;# 
  1815  001E                     	;# 
  1816  001F                     	;# 
  1817  008C                     	;# 
  1818  008D                     	;# 
  1819  0091                     	;# 
  1820  0092                     	;# 
  1821  0093                     	;# 
  1822  0094                     	;# 
  1823  0095                     	;# 
  1824  0096                     	;# 
  1825  0097                     	;# 
  1826  0098                     	;# 
  1827  0099                     	;# 
  1828  009A                     	;# 
  1829  009B                     	;# 
  1830  009B                     	;# 
  1831  009C                     	;# 
  1832  009D                     	;# 
  1833  009E                     	;# 
  1834  010C                     	;# 
  1835  010D                     	;# 
  1836  0111                     	;# 
  1837  0112                     	;# 
  1838  0113                     	;# 
  1839  0114                     	;# 
  1840  0115                     	;# 
  1841  0116                     	;# 
  1842  0117                     	;# 
  1843  0118                     	;# 
  1844  0119                     	;# 
  1845  011A                     	;# 
  1846  011B                     	;# 
  1847  011D                     	;# 
  1848  011E                     	;# 
  1849  018C                     	;# 
  1850  018D                     	;# 
  1851  0191                     	;# 
  1852  0191                     	;# 
  1853  0192                     	;# 
  1854  0193                     	;# 
  1855  0193                     	;# 
  1856  0193                     	;# 
  1857  0194                     	;# 
  1858  0195                     	;# 
  1859  0196                     	;# 
  1860  0199                     	;# 
  1861  019A                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019C                     	;# 
  1867  019C                     	;# 
  1868  019D                     	;# 
  1869  019E                     	;# 
  1870  019F                     	;# 
  1871  020C                     	;# 
  1872  020D                     	;# 
  1873  0211                     	;# 
  1874  0211                     	;# 
  1875  0212                     	;# 
  1876  0212                     	;# 
  1877  0213                     	;# 
  1878  0213                     	;# 
  1879  0214                     	;# 
  1880  0214                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0215                     	;# 
  1884  0216                     	;# 
  1885  0216                     	;# 
  1886  0217                     	;# 
  1887  0217                     	;# 
  1888  0219                     	;# 
  1889  021A                     	;# 
  1890  021B                     	;# 
  1891  021C                     	;# 
  1892  021D                     	;# 
  1893  021E                     	;# 
  1894  021F                     	;# 
  1895  0291                     	;# 
  1896  0291                     	;# 
  1897  0292                     	;# 
  1898  0293                     	;# 
  1899  0294                     	;# 
  1900  0295                     	;# 
  1901  0295                     	;# 
  1902  0296                     	;# 
  1903  0298                     	;# 
  1904  0298                     	;# 
  1905  0299                     	;# 
  1906  029A                     	;# 
  1907  029B                     	;# 
  1908  029C                     	;# 
  1909  029C                     	;# 
  1910  029D                     	;# 
  1911  029E                     	;# 
  1912  029E                     	;# 
  1913  0311                     	;# 
  1914  0311                     	;# 
  1915  0312                     	;# 
  1916  0313                     	;# 
  1917  0318                     	;# 
  1918  0318                     	;# 
  1919  0319                     	;# 
  1920  031A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  039A                     	;# 
  1925  039C                     	;# 
  1926  039D                     	;# 
  1927  039E                     	;# 
  1928  039F                     	;# 
  1929  0415                     	;# 
  1930  0416                     	;# 
  1931  0417                     	;# 
  1932  041C                     	;# 
  1933  041D                     	;# 
  1934  041E                     	;# 
  1935  0FE4                     	;# 
  1936  0FE5                     	;# 
  1937  0FE6                     	;# 
  1938  0FE7                     	;# 
  1939  0FE8                     	;# 
  1940  0FE9                     	;# 
  1941  0FEA                     	;# 
  1942  0FEB                     	;# 
  1943  0FED                     	;# 
  1944  0FEE                     	;# 
  1945  0FEF                     	;# 
  1946                           
  1947                           	psect	stringtext
  1948  05BD                     __pstringtext:	
  1949  05BD                     _fp_x0_a:	
  1950  05BD  34D0               	retlw	208
  1951  05BE  34D2               	retlw	210
  1952  05BF  3402               	retlw	2
  1953  05C0  3400               	retlw	0
  1954  05C1                     __end_of_fp_x0_a:	
  1955  05C1                     _fp_x0_b:	
  1956  05C1  34E4               	retlw	228
  1957  05C2  34E1               	retlw	225
  1958  05C3  3401               	retlw	1
  1959  05C4  3400               	retlw	0
  1960  05C5                     __end_of_fp_x0_b:	
  1961  05C5                     _ratio_mph:	
  1962  05C5  34F9               	retlw	249
  1963  05C6  349E               	retlw	158
  1964  05C7  3400               	retlw	0
  1965  05C8  3400               	retlw	0
  1966  05C9                     __end_of_ratio_mph:	
  1967  05C9                     convert_to_fp@one:	
  1968  05C9  3401               	retlw	1
  1969  05CA  3400               	retlw	0
  1970  05CB                     __end_ofconvert_to_fp@one:	
  1971  000B                     _INTCONbits	set	11
  1972  0011                     _PIR1bits	set	17
  1973  000D                     _PORTBbits	set	13
  1974  001B                     _PR2	set	27
  1975  001C                     _T2CON	set	28
  1976  001C                     _T2CONbits	set	28
  1977  0015                     _TMR0	set	21
  1978  001A                     _TMR2	set	26
  1979  0095                     _OPTION_REG	set	149
  1980  0095                     _OPTION_REGbits	set	149
  1981  0099                     _OSCCON	set	153
  1982  009A                     _OSCSTAT	set	154
  1983  0098                     _OSCTUNE	set	152
  1984  0091                     _PIE1bits	set	145
  1985  008C                     _TRISA	set	140
  1986  008D                     _TRISB	set	141
  1987  04D6                     _PLLR	set	1238
  1988  011D                     _APFCON0	set	285
  1989  011E                     _APFCON1	set	286
  1990  010C                     _LATA	set	268
  1991  010D                     _LATB	set	269
  1992  0862                     _LATA2	set	2146
  1993  018C                     _ANSELA	set	396
  1994  018D                     _ANSELB	set	397
  1995  019F                     _BAUDCON	set	415
  1996  0199                     _RCREG	set	409
  1997  019D                     _RCSTA	set	413
  1998  019D                     _RCSTAbits	set	413
  1999  019C                     _SPBRGH	set	412
  2000  019B                     _SPBRGL	set	411
  2001  019A                     _TXREG	set	410
  2002  019E                     _TXSTA	set	414
  2003  020C                     _WPUA	set	524
  2004  020D                     _WPUB	set	525
  2005  0293                     _CCP1CON	set	659
  2006  0292                     _CCPR1H	set	658
  2007  0291                     _CCPR1L	set	657
  2008  029E                     _CCPTMRS0bits	set	670
  2009  0295                     _ECCP1AS	set	661
  2010  0296                     _PSTR1CON	set	662
  2011  0294                     _PWM1CON	set	660
  2012  05CB                     STR_1:	
  2013  05CB  3424               	retlw	36	;'$'
  2014  05CC  3450               	retlw	80	;'P'
  2015  05CD  344D               	retlw	77	;'M'
  2016  05CE  3454               	retlw	84	;'T'
  2017  05CF  344B               	retlw	75	;'K'
  2018  05D0  3433               	retlw	51	;'3'
  2019  05D1  3431               	retlw	49	;'1'
  2020  05D2  3434               	retlw	52	;'4'
  2021  05D3  342C               	retlw	44	;','
  2022  05D4  3430               	retlw	48	;'0'
  2023  05D5  342C               	retlw	44	;','
  2024  05D6  3430               	retlw	48	;'0'
  2025  05D7  342C               	retlw	44	;','
  2026  05D8  3431               	retlw	49	;'1'
  2027  05D9  342C               	retlw	44	;','
  2028  05DA  3430               	retlw	48	;'0'
  2029  05DB  342C               	retlw	44	;','
  2030  05DC  3430               	retlw	48	;'0'
  2031  05DD  342C               	retlw	44	;','
  2032  05DE  3430               	retlw	48	;'0'
  2033  05DF  342C               	retlw	44	;','
  2034  05E0  3430               	retlw	48	;'0'
  2035  05E1  342C               	retlw	44	;','
  2036  05E2  3430               	retlw	48	;'0'
  2037  05E3  342C               	retlw	44	;','
  2038  05E4  3430               	retlw	48	;'0'
  2039  05E5  342C               	retlw	44	;','
  2040  05E6  3430               	retlw	48	;'0'
  2041  05E7  342C               	retlw	44	;','
  2042  05E8  3430               	retlw	48	;'0'
  2043  05E9  342C               	retlw	44	;','
  2044  05EA  3430               	retlw	48	;'0'
  2045  05EB  342C               	retlw	44	;','
  2046  05EC  3430               	retlw	48	;'0'
  2047  05ED  342C               	retlw	44	;','
  2048  05EE  3430               	retlw	48	;'0'
  2049  05EF  342C               	retlw	44	;','
  2050  05F0  3430               	retlw	48	;'0'
  2051  05F1  342C               	retlw	44	;','
  2052  05F2  3430               	retlw	48	;'0'
  2053  05F3  342C               	retlw	44	;','
  2054  05F4  3430               	retlw	48	;'0'
  2055  05F5  342C               	retlw	44	;','
  2056  05F6  3430               	retlw	48	;'0'
  2057  05F7  342C               	retlw	44	;','
  2058  05F8  3430               	retlw	48	;'0'
  2059  05F9  342A               	retlw	42	;'*'
  2060  05FA  3432               	retlw	50	;'2'
  2061  05FB  3439               	retlw	57	;'9'
  2062  05FC  340D               	retlw	13
  2063  05FD  340A               	retlw	10
  2064  05FE  3400               	retlw	0
  2065  05FF                     STR_2:	
  2066  05FF  3424               	retlw	36	;'$'
  2067  0600  3450               	retlw	80	;'P'
  2068  0601  344D               	retlw	77	;'M'
  2069  0602  3454               	retlw	84	;'T'
  2070  0603  344B               	retlw	75	;'K'
  2071  0604  3432               	retlw	50	;'2'
  2072  0605  3432               	retlw	50	;'2'
  2073  0606  3430               	retlw	48	;'0'
  2074  0607  342C               	retlw	44	;','
  2075  0608  3431               	retlw	49	;'1'
  2076  0609  3430               	retlw	48	;'0'
  2077  060A  3430               	retlw	48	;'0'
  2078  060B  342A               	retlw	42	;'*'
  2079  060C  3432               	retlw	50	;'2'
  2080  060D  3446               	retlw	70	;'F'
  2081  060E  340D               	retlw	13
  2082  060F  340A               	retlw	10
  2083  0610  3400               	retlw	0
  2084                           
  2085                           ; #config settings
  2086  0000                     
  2087                           	psect	cinit
  2088  002B                     start_initialization:	
  2089  002B                     __initialization:	
  2090                           
  2091                           ; Clear objects allocated to COMMON
  2092  002B  01F6               	clrf	__pbssCOMMON& (0+127)
  2093  002C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2094  002D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2095  002E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2096                           
  2097                           ; Clear objects allocated to BANK0
  2098  002F  3051               	movlw	low __pbssBANK0
  2099  0030  0084               	movwf	4
  2100  0031  3000               	movlw	high __pbssBANK0
  2101  0032  0085               	movwf	5
  2102  0033  301C               	movlw	28
  2103  0034  318F  27BD  3180   	fcall	clear_ram0
  2104                           
  2105                           ; Clear objects allocated to BANK1
  2106  0037  30A0               	movlw	low __pbssBANK1
  2107  0038  0084               	movwf	4
  2108  0039  3000               	movlw	high __pbssBANK1
  2109  003A  0085               	movwf	5
  2110  003B  3039               	movlw	57
  2111  003C  318F  27BD         	fcall	clear_ram0
  2112  003E                     end_of_initialization:	
  2113                           ;End of C runtime variable initialization code
  2114                           
  2115  003E                     __end_of__initialization:	
  2116  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2117  003F  0020               	movlb	0
  2118  0040  3182  2A90         	ljmp	_main	;jump to C main() function
  2119                           
  2120                           	psect	bssCOMMON
  2121  0076                     __pbssCOMMON:	
  2122  0076                     _m_LED:	
  2123  0076                     	ds	2
  2124  0078                     _eusartRxCount:	
  2125  0078                     	ds	1
  2126  0079                     _timer0ReloadVal:	
  2127  0079                     	ds	1
  2128                           
  2129                           	psect	bssBANK0
  2130  0051                     __pbssBANK0:	
  2131  0051                     _eusartTxBuffer:	
  2132  0051                     	ds	8
  2133  0059                     _m_button:	
  2134  0059                     	ds	7
  2135  0060                     _speed:	
  2136  0060                     	ds	4
  2137  0064                     TMR0_ISR@CountCallBack:	
  2138  0064                     	ds	2
  2139  0066                     _TMR0_InterruptHandler:	
  2140  0066                     	ds	2
  2141  0068                     _eusartRxHead:	
  2142  0068                     	ds	1
  2143  0069                     _eusartRxTail:	
  2144  0069                     	ds	1
  2145  006A                     _eusartTxBufferRemaining:	
  2146  006A                     	ds	1
  2147  006B                     _eusartTxHead:	
  2148  006B                     	ds	1
  2149  006C                     _eusartTxTail:	
  2150  006C                     	ds	1
  2151                           
  2152                           	psect	bssBANK1
  2153  00A0                     __pbssBANK1:	
  2154  00A0                     _conf:	
  2155  00A0                     	ds	49
  2156  00D1                     _eusartRxBuffer:	
  2157  00D1                     	ds	8
  2158                           
  2159                           	psect	clrtext
  2160  0FBD                     clear_ram0:	
  2161                           ;	Called with FSR0 containing the base address, and
  2162                           ;	WREG with the size to clear
  2163                           
  2164  0FBD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2165  0FBE                     clrloop0:	
  2166  0FBE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2167  0FBF  3101               	addfsr 0,1
  2168  0FC0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2169  0FC1  2FBE               	goto	clrloop0	;have we reached the end yet?
  2170  0FC2  3400               	retlw	0	;all done for this memory range, return
  2171                           
  2172                           	psect	cstackCOMMON
  2173  0070                     __pcstackCOMMON:	
  2174  0070                     ?_PIN_MANAGER_Initialize:	
  2175  0070                     ?_OSCILLATOR_Initialize:	
  2176                           ; 1 bytes @ 0x0
  2177                           
  2178  0070                     ?_EPWM1_Initialize:	
  2179                           ; 1 bytes @ 0x0
  2180                           
  2181  0070                     ?_TMR2_Initialize:	
  2182                           ; 1 bytes @ 0x0
  2183                           
  2184  0070                     ?_TMR0_Initialize:	
  2185                           ; 1 bytes @ 0x0
  2186                           
  2187  0070                     ?_EUSART_Initialize:	
  2188                           ; 1 bytes @ 0x0
  2189                           
  2190  0070                     ?_TMR0_ISR:	
  2191                           ; 1 bytes @ 0x0
  2192                           
  2193  0070                     ?_EUSART_Transmit_ISR:	
  2194                           ; 1 bytes @ 0x0
  2195                           
  2196  0070                     ??_EUSART_Transmit_ISR:	
  2197                           ; 1 bytes @ 0x0
  2198                           
  2199  0070                     ?_EUSART_Receive_ISR:	
  2200                           ; 1 bytes @ 0x0
  2201                           
  2202  0070                     ??_EUSART_Receive_ISR:	
  2203                           ; 1 bytes @ 0x0
  2204                           
  2205  0070                     ?_TMR0_DefaultInterruptHandler:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0070                     ??_TMR0_DefaultInterruptHandler:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0070                     ?_TMR0_CallBack:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0070                     ?_TMR2_StartTimer:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0070                     ?_LED_set_state:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0070                     ?_my10msTimerISR:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0070                     ?_GPS_Initialize:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0070                     ?_GPS_read_speed:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ?_LED_update_loop:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ??_LED_update_loop:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?_button_update_loop:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ?_SYSTEM_Initialize:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ?_INTERRUPT_InterruptManager:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ?_EUSART_Read:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ?_EUSART_Write:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?_putch:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0070                     ?_main:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0070                     ?_get_button_state:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0070                     ??_get_button_state:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0070                     get_button_state@state:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265                           
  2266                           ; 1 bytes @ 0x0
  2267  0070                     	ds	1
  2268  0071                     ??_button_update_loop:	
  2269                           
  2270                           ; 1 bytes @ 0x1
  2271  0071                     	ds	1
  2272  0072                     button_update_loop@current_state:	
  2273                           
  2274                           ; 1 bytes @ 0x2
  2275  0072                     	ds	1
  2276  0073                     ??_TMR0_ISR:	
  2277  0073                     ??_TMR0_CallBack:	
  2278                           ; 1 bytes @ 0x3
  2279                           
  2280  0073                     ??_my10msTimerISR:	
  2281                           ; 1 bytes @ 0x3
  2282                           
  2283  0073                     ??_INTERRUPT_InterruptManager:	
  2284                           ; 1 bytes @ 0x3
  2285                           
  2286                           
  2287                           ; 1 bytes @ 0x3
  2288  0073                     	ds	1
  2289  0074                     ??_PIN_MANAGER_Initialize:	
  2290  0074                     ??_OSCILLATOR_Initialize:	
  2291                           ; 1 bytes @ 0x4
  2292                           
  2293  0074                     ??_EPWM1_Initialize:	
  2294                           ; 1 bytes @ 0x4
  2295                           
  2296  0074                     ??_TMR2_Initialize:	
  2297                           ; 1 bytes @ 0x4
  2298                           
  2299  0074                     ??_EUSART_Initialize:	
  2300                           ; 1 bytes @ 0x4
  2301                           
  2302  0074                     ?_TMR0_SetInterruptHandler:	
  2303                           ; 1 bytes @ 0x4
  2304                           
  2305  0074                     ??_TMR2_StartTimer:	
  2306                           ; 1 bytes @ 0x4
  2307                           
  2308  0074                     ??_LED_set_state:	
  2309                           ; 1 bytes @ 0x4
  2310                           
  2311  0074                     ??_EUSART_Read:	
  2312                           ; 1 bytes @ 0x4
  2313                           
  2314  0074                     ??_EUSART_Write:	
  2315                           ; 1 bytes @ 0x4
  2316                           
  2317  0074                     ?_EPWM1_LoadDutyValue:	
  2318                           ; 1 bytes @ 0x4
  2319                           
  2320  0074                     ??___wmul:	
  2321                           ; 1 bytes @ 0x4
  2322                           
  2323  0074                     ??___lmul:	
  2324                           ; 1 bytes @ 0x4
  2325                           
  2326  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  2327                           ; 1 bytes @ 0x4
  2328                           
  2329  0074                     EPWM1_LoadDutyValue@dutyValue:	
  2330                           ; 2 bytes @ 0x4
  2331                           
  2332  0074                     ___wmul@product:	
  2333                           ; 2 bytes @ 0x4
  2334                           
  2335                           
  2336                           ; 2 bytes @ 0x4
  2337  0074                     	ds	1
  2338  0075                     EUSART_Read@readValue:	
  2339  0075                     EUSART_Write@txData:	
  2340                           ; 1 bytes @ 0x5
  2341                           
  2342  0075                     LED_set_state@new_state:	
  2343                           ; 1 bytes @ 0x5
  2344                           
  2345                           
  2346                           ; 1 bytes @ 0x5
  2347  0075                     	ds	1
  2348  0076                     ??_TMR0_SetInterruptHandler:	
  2349  0076                     ??_SYSTEM_Initialize:	
  2350                           ; 1 bytes @ 0x6
  2351                           
  2352  0076                     ??_putch:	
  2353                           ; 1 bytes @ 0x6
  2354                           
  2355                           
  2356                           	psect	cstackBANK0
  2357  0020                     __pcstackBANK0:	
  2358                           ; 1 bytes @ 0x6
  2359                           
  2360  0020                     ??_TMR0_Initialize:	
  2361  0020                     ??_EPWM1_LoadDutyValue:	
  2362                           ; 1 bytes @ 0x0
  2363                           
  2364  0020                     ?___wmul:	
  2365                           ; 1 bytes @ 0x0
  2366                           
  2367  0020                     ?_convert_to_fp:	
  2368                           ; 2 bytes @ 0x0
  2369                           
  2370  0020                     ?___lmul:	
  2371                           ; 4 bytes @ 0x0
  2372                           
  2373  0020                     putch@txData:	
  2374                           ; 4 bytes @ 0x0
  2375                           
  2376  0020                     convert_to_fp@int_part:	
  2377                           ; 1 bytes @ 0x0
  2378                           
  2379  0020                     ___wmul@multiplier:	
  2380                           ; 2 bytes @ 0x0
  2381                           
  2382  0020                     ___lmul@multiplier:	
  2383                           ; 2 bytes @ 0x0
  2384                           
  2385                           
  2386                           ; 4 bytes @ 0x0
  2387  0020                     	ds	1
  2388  0021                     ?_printf:	
  2389  0021                     printf@f:	
  2390                           ; 2 bytes @ 0x1
  2391                           
  2392                           
  2393                           ; 2 bytes @ 0x1
  2394  0021                     	ds	1
  2395  0022                     convert_to_fp@fract_part:	
  2396  0022                     ___wmul@multiplicand:	
  2397                           ; 2 bytes @ 0x2
  2398                           
  2399                           
  2400                           ; 2 bytes @ 0x2
  2401  0022                     	ds	1
  2402  0023                     ??_printf:	
  2403                           
  2404                           ; 1 bytes @ 0x3
  2405  0023                     	ds	1
  2406  0024                     ??_convert_to_fp:	
  2407  0024                     ___lmul@multiplicand:	
  2408                           ; 1 bytes @ 0x4
  2409                           
  2410                           
  2411                           ; 4 bytes @ 0x4
  2412  0024                     	ds	2
  2413  0026                     printf@ap:	
  2414                           
  2415                           ; 1 bytes @ 0x6
  2416  0026                     	ds	1
  2417  0027                     printf@c:	
  2418                           
  2419                           ; 1 bytes @ 0x7
  2420  0027                     	ds	1
  2421  0028                     ??_GPS_Initialize:	
  2422  0028                     ___lmul@product:	
  2423                           ; 1 bytes @ 0x8
  2424                           
  2425                           
  2426                           ; 4 bytes @ 0x8
  2427  0028                     	ds	3
  2428  002B                     GPS_Initialize@tmp:	
  2429                           
  2430                           ; 1 bytes @ 0xB
  2431  002B                     	ds	1
  2432  002C                     ?_multiply_fp:	
  2433  002C                     convert_to_fp@res_fract:	
  2434                           ; 4 bytes @ 0xC
  2435                           
  2436  002C                     multiply_fp@n1:	
  2437                           ; 2 bytes @ 0xC
  2438                           
  2439                           
  2440                           ; 4 bytes @ 0xC
  2441  002C                     	ds	2
  2442  002E                     convert_to_fp@i_bit:	
  2443                           
  2444                           ; 1 bytes @ 0xE
  2445  002E                     	ds	1
  2446  002F                     convert_to_fp@tmp_left:	
  2447                           
  2448                           ; 2 bytes @ 0xF
  2449  002F                     	ds	1
  2450  0030                     multiply_fp@n2:	
  2451                           
  2452                           ; 4 bytes @ 0x10
  2453  0030                     	ds	1
  2454  0031                     convert_to_fp@res:	
  2455                           
  2456                           ; 4 bytes @ 0x11
  2457  0031                     	ds	3
  2458  0034                     ??_multiply_fp:	
  2459                           
  2460                           ; 1 bytes @ 0x14
  2461  0034                     	ds	1
  2462  0035                     ??_GPS_read_speed:	
  2463                           
  2464                           ; 1 bytes @ 0x15
  2465  0035                     	ds	2
  2466  0037                     GPS_read_speed@before_dot:	
  2467                           
  2468                           ; 1 bytes @ 0x17
  2469  0037                     	ds	1
  2470  0038                     GPS_read_speed@no_more_checksum:	
  2471                           
  2472                           ; 1 bytes @ 0x18
  2473  0038                     	ds	1
  2474  0039                     GPS_read_speed@read_speed_int:	
  2475                           
  2476                           ; 2 bytes @ 0x19
  2477  0039                     	ds	2
  2478  003B                     GPS_read_speed@read_speed_fra:	
  2479                           
  2480                           ; 2 bytes @ 0x1B
  2481  003B                     	ds	2
  2482  003D                     GPS_read_speed@checksum2:	
  2483                           
  2484                           ; 1 bytes @ 0x1D
  2485  003D                     	ds	1
  2486  003E                     GPS_read_speed@checksum:	
  2487                           
  2488                           ; 1 bytes @ 0x1E
  2489  003E                     	ds	1
  2490  003F                     GPS_read_speed@buffer:	
  2491                           
  2492                           ; 6 bytes @ 0x1F
  2493  003F                     	ds	3
  2494  0042                     multiply_fp@res:	
  2495                           
  2496                           ; 4 bytes @ 0x22
  2497  0042                     	ds	3
  2498  0045                     GPS_read_speed@i_buff2:	
  2499                           
  2500                           ; 1 bytes @ 0x25
  2501  0045                     	ds	1
  2502  0046                     GPS_read_speed@i_buff:	
  2503                           
  2504                           ; 1 bytes @ 0x26
  2505  0046                     	ds	1
  2506  0047                     GPS_read_speed@m_char:	
  2507                           
  2508                           ; 1 bytes @ 0x27
  2509  0047                     	ds	1
  2510  0048                     ??_main:	
  2511                           
  2512                           ; 1 bytes @ 0x28
  2513  0048                     	ds	3
  2514  004B                     main@up:	
  2515                           
  2516                           ; 1 bytes @ 0x2B
  2517  004B                     	ds	1
  2518  004C                     main@tmp:	
  2519                           
  2520                           ; 1 bytes @ 0x2C
  2521  004C                     	ds	1
  2522  004D                     main@tmp_565:	
  2523                           
  2524                           ; 1 bytes @ 0x2D
  2525  004D                     	ds	1
  2526  004E                     main@tmp_566:	
  2527                           
  2528                           ; 1 bytes @ 0x2E
  2529  004E                     	ds	1
  2530  004F                     main@motor_load:	
  2531                           
  2532                           ; 2 bytes @ 0x2F
  2533  004F                     	ds	2
  2534                           
  2535                           	psect	maintext
  2536  0290                     __pmaintext:	
  2537 ;;
  2538 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2539 ;;
  2540 ;; *************** function _main *****************
  2541 ;; Defined at:
  2542 ;;		line 92 in file "main.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  tmp             1   46[BANK0 ] unsigned char 
  2547 ;;  tmp             1   45[BANK0 ] unsigned char 
  2548 ;;  tmp             1   44[BANK0 ] unsigned char 
  2549 ;;  motor_load      2   47[BANK0 ] unsigned int 
  2550 ;;  up              1   43[BANK0 ] unsigned char 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : B1F/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2560 ;;      Params:         0       0       0       0       0       0
  2561 ;;      Locals:         0       6       0       0       0       0
  2562 ;;      Temps:          0       3       0       0       0       0
  2563 ;;      Totals:         0       9       0       0       0       0
  2564 ;;Total ram usage:        9 bytes
  2565 ;; Hardware stack levels required when called:   10
  2566 ;; This function calls:
  2567 ;;		_EPWM1_LoadDutyValue
  2568 ;;		_GPS_Initialize
  2569 ;;		_GPS_read_speed
  2570 ;;		_LED_set_state
  2571 ;;		_SYSTEM_Initialize
  2572 ;;		_TMR0_SetInterruptHandler
  2573 ;;		_TMR2_StartTimer
  2574 ;;		_multiply_fp
  2575 ;; This function is called by:
  2576 ;;		Startup code after reset
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function _main
  2582  0290                     _main:	
  2583                           
  2584                           ;main.c: 94: conf.max_pwm = 0x00;
  2585                           
  2586                           ;incstack = 0
  2587                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2588  0290  0021               	movlb	1	; select bank1
  2589  0291  01A1               	clrf	(_conf^(0+128)+1)
  2590  0292  01A2               	clrf	((_conf+1)^(0+128)+1)
  2591                           
  2592                           ;main.c: 106: SYSTEM_Initialize();
  2593  0293  318F  27EE  3182   	fcall	_SYSTEM_Initialize
  2594                           
  2595                           ;main.c: 108: LED_set_state(manual_mode);
  2596  0296  3004               	movlw	4
  2597  0297  3186  26EE  3182   	fcall	_LED_set_state
  2598                           
  2599                           ;main.c: 109: do { LATA2 = 0; } while(0);
  2600  029A  0022               	movlb	2	; select bank2
  2601  029B  110C               	bcf	12,2	;volatile
  2602                           
  2603                           ;main.c: 111: TMR0_SetInterruptHandler(my10msTimerISR);
  2604  029C  30AB               	movlw	low _my10msTimerISR
  2605  029D  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2606  029E  300F               	movlw	high _my10msTimerISR
  2607  029F  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2608  02A0  318F  27B7  3182   	fcall	_TMR0_SetInterruptHandler
  2609                           
  2610                           ;main.c: 113: (INTCONbits.GIE = 1);
  2611  02A3  178B               	bsf	11,7	;volatile
  2612                           
  2613                           ;main.c: 115: (INTCONbits.PEIE = 1);
  2614  02A4  170B               	bsf	11,6	;volatile
  2615                           
  2616                           ;main.c: 117: uint16_t motor_load = 0;
  2617  02A5  0020               	movlb	0	; select bank0
  2618  02A6  01CF               	clrf	main@motor_load
  2619  02A7  01D0               	clrf	main@motor_load+1
  2620                           
  2621                           ;main.c: 118: EPWM1_LoadDutyValue(1023-motor_load);
  2622  02A8  094F               	comf	main@motor_load,w
  2623  02A9  00C8               	movwf	??_main
  2624  02AA  0950               	comf	main@motor_load+1,w
  2625  02AB  00C9               	movwf	??_main+1
  2626  02AC  0AC8               	incf	??_main,f
  2627  02AD  1903               	skipnz
  2628  02AE  0AC9               	incf	??_main+1,f
  2629  02AF  0848               	movf	??_main,w
  2630  02B0  3EFF               	addlw	255
  2631  02B1  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2632  02B2  3003               	movlw	3
  2633  02B3  3D49               	addwfc	??_main+1,w
  2634  02B4  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2635  02B5  3187  2761  3182   	fcall	_EPWM1_LoadDutyValue
  2636                           
  2637                           ;main.c: 119: TMR2_StartTimer();
  2638  02B8  318F  27A8  3182   	fcall	_TMR2_StartTimer
  2639                           
  2640                           ;main.c: 120: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2641  02BB  0020               	movlb	0	; select bank0
  2642  02BC  01CC               	clrf	main@tmp
  2643  02BD  3032               	movlw	50
  2644  02BE  024C               	subwf	main@tmp,w
  2645  02BF  1803               	btfsc	3,0
  2646  02C0  2AD6               	goto	l291
  2647  02C1                     l3237:	
  2648  02C1  3005               	movlw	5
  2649  02C2  00CA               	movwf	??_main+2
  2650  02C3  300F               	movlw	15
  2651  02C4  00C9               	movwf	??_main+1
  2652  02C5  30F4               	movlw	244
  2653  02C6  00C8               	movwf	??_main
  2654  02C7                     u4077:	
  2655  02C7  0BC8               	decfsz	??_main,f
  2656  02C8  2AC7               	goto	u4077
  2657  02C9  0BC9               	decfsz	??_main+1,f
  2658  02CA  2AC7               	goto	u4077
  2659  02CB  0BCA               	decfsz	??_main+2,f
  2660  02CC  2AC7               	goto	u4077
  2661  02CD  3001               	movlw	1
  2662  02CE  0020               	movlb	0	; select bank0
  2663  02CF  00C8               	movwf	??_main
  2664  02D0  0848               	movf	??_main,w
  2665  02D1  07CC               	addwf	main@tmp,f
  2666  02D2  3032               	movlw	50
  2667  02D3  024C               	subwf	main@tmp,w
  2668  02D4  1C03               	skipc
  2669  02D5  2AC1               	goto	l3237
  2670  02D6                     l291:	
  2671                           
  2672                           ;main.c: 122: bool up = 1;
  2673  02D6  01CB               	clrf	main@up
  2674  02D7  0ACB               	incf	main@up,f
  2675                           
  2676                           ;main.c: 142: EPWM1_LoadDutyValue(0);
  2677  02D8  3000               	movlw	0
  2678  02D9  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2679  02DA  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2680  02DB  3187  2761  3182   	fcall	_EPWM1_LoadDutyValue
  2681                           
  2682                           ;main.c: 143: _delay((unsigned long)((10)*(32000000/4000.0)));
  2683  02DE  3068               	movlw	104
  2684  02DF  0020               	movlb	0	; select bank0
  2685  02E0  00C9               	movwf	??_main+1
  2686  02E1  30E4               	movlw	228
  2687  02E2  00C8               	movwf	??_main
  2688  02E3                     u4087:	
  2689  02E3  0BC8               	decfsz	??_main,f
  2690  02E4  2AE3               	goto	u4087
  2691  02E5  0BC9               	decfsz	??_main+1,f
  2692  02E6  2AE3               	goto	u4087
  2693  02E7  0000               	nop
  2694                           
  2695                           ;main.c: 144: EPWM1_LoadDutyValue(1023-148);
  2696  02E8  306B               	movlw	107
  2697  02E9  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2698  02EA  3003               	movlw	3
  2699  02EB  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2700  02EC  3187  2761  3182   	fcall	_EPWM1_LoadDutyValue
  2701                           
  2702                           ;main.c: 145: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2703  02EF  0020               	movlb	0	; select bank0
  2704  02F0  01CD               	clrf	main@tmp_565
  2705  02F1  3032               	movlw	50
  2706  02F2  024D               	subwf	main@tmp_565,w
  2707  02F3  1803               	btfsc	3,0
  2708  02F4  2B0A               	goto	l3261
  2709  02F5                     l3255:	
  2710  02F5  3005               	movlw	5
  2711  02F6  00CA               	movwf	??_main+2
  2712  02F7  300F               	movlw	15
  2713  02F8  00C9               	movwf	??_main+1
  2714  02F9  30F4               	movlw	244
  2715  02FA  00C8               	movwf	??_main
  2716  02FB                     u4097:	
  2717  02FB  0BC8               	decfsz	??_main,f
  2718  02FC  2AFB               	goto	u4097
  2719  02FD  0BC9               	decfsz	??_main+1,f
  2720  02FE  2AFB               	goto	u4097
  2721  02FF  0BCA               	decfsz	??_main+2,f
  2722  0300  2AFB               	goto	u4097
  2723  0301  3001               	movlw	1
  2724  0302  0020               	movlb	0	; select bank0
  2725  0303  00C8               	movwf	??_main
  2726  0304  0848               	movf	??_main,w
  2727  0305  07CD               	addwf	main@tmp_565,f
  2728  0306  3032               	movlw	50
  2729  0307  024D               	subwf	main@tmp_565,w
  2730  0308  1C03               	skipc
  2731  0309  2AF5               	goto	l3255
  2732  030A                     l3261:	
  2733                           ;main.c: 146: while (1)
  2734                           
  2735                           
  2736                           ;main.c: 147: {
  2737                           ;main.c: 148: if (up == 1)
  2738  030A  0020               	movlb	0	; select bank0
  2739  030B  034B               	decf	main@up,w
  2740  030C  1D03               	btfss	3,2
  2741  030D  2B13               	goto	l3265
  2742                           
  2743                           ;main.c: 149: motor_load += 1;
  2744  030E  3001               	movlw	1
  2745  030F  07CF               	addwf	main@motor_load,f
  2746  0310  3000               	movlw	0
  2747  0311  3DD0               	addwfc	main@motor_load+1,f
  2748  0312  2B17               	goto	l296
  2749  0313                     l3265:	
  2750                           
  2751                           ;main.c: 150: else
  2752                           ;main.c: 151: motor_load -= 1;
  2753  0313  3001               	movlw	1
  2754  0314  02CF               	subwf	main@motor_load,f
  2755  0315  3000               	movlw	0
  2756  0316  3BD0               	subwfb	main@motor_load+1,f
  2757  0317                     l296:	
  2758                           
  2759                           ;main.c: 152: if (motor_load > 300)
  2760  0317  3001               	movlw	1
  2761  0318  0250               	subwf	main@motor_load+1,w
  2762  0319  302D               	movlw	45
  2763  031A  1903               	skipnz
  2764  031B  024F               	subwf	main@motor_load,w
  2765  031C  1C03               	skipc
  2766  031D  2B20               	goto	l3269
  2767                           
  2768                           ;main.c: 153: up = 0;
  2769  031E  01CB               	clrf	main@up
  2770  031F  2B58               	goto	l3291
  2771  0320                     l3269:	
  2772                           
  2773                           ;main.c: 154: else if (motor_load == 0)
  2774  0320  084F               	movf	main@motor_load,w
  2775  0321  0450               	iorwf	main@motor_load+1,w
  2776  0322  1D03               	btfss	3,2
  2777  0323  2B58               	goto	l3291
  2778                           
  2779                           ;main.c: 155: {
  2780                           ;main.c: 156: up = 1;
  2781  0324  01CB               	clrf	main@up
  2782  0325  0ACB               	incf	main@up,f
  2783                           
  2784                           ;main.c: 157: EPWM1_LoadDutyValue(1023);
  2785  0326  30FF               	movlw	255
  2786  0327  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2787  0328  3003               	movlw	3
  2788  0329  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2789  032A  3187  2761  3182   	fcall	_EPWM1_LoadDutyValue
  2790                           
  2791                           ;main.c: 158: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2792  032D  0020               	movlb	0	; select bank0
  2793  032E  01CE               	clrf	main@tmp_566
  2794  032F  3032               	movlw	50
  2795  0330  024E               	subwf	main@tmp_566,w
  2796  0331  1803               	btfsc	3,0
  2797  0332  2B48               	goto	l3287
  2798  0333                     l3281:	
  2799  0333  3005               	movlw	5
  2800  0334  00CA               	movwf	??_main+2
  2801  0335  300F               	movlw	15
  2802  0336  00C9               	movwf	??_main+1
  2803  0337  30F4               	movlw	244
  2804  0338  00C8               	movwf	??_main
  2805  0339                     u4107:	
  2806  0339  0BC8               	decfsz	??_main,f
  2807  033A  2B39               	goto	u4107
  2808  033B  0BC9               	decfsz	??_main+1,f
  2809  033C  2B39               	goto	u4107
  2810  033D  0BCA               	decfsz	??_main+2,f
  2811  033E  2B39               	goto	u4107
  2812  033F  3001               	movlw	1
  2813  0340  0020               	movlb	0	; select bank0
  2814  0341  00C8               	movwf	??_main
  2815  0342  0848               	movf	??_main,w
  2816  0343  07CE               	addwf	main@tmp_566,f
  2817  0344  3032               	movlw	50
  2818  0345  024E               	subwf	main@tmp_566,w
  2819  0346  1C03               	skipc
  2820  0347  2B33               	goto	l3281
  2821  0348                     l3287:	
  2822                           
  2823                           ;main.c: 160: EPWM1_LoadDutyValue(0);
  2824  0348  3000               	movlw	0
  2825  0349  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2826  034A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2827  034B  3187  2761  3182   	fcall	_EPWM1_LoadDutyValue
  2828                           
  2829                           ;main.c: 161: _delay((unsigned long)((10)*(32000000/4000.0)));
  2830  034E  3068               	movlw	104
  2831  034F  0020               	movlb	0	; select bank0
  2832  0350  00C9               	movwf	??_main+1
  2833  0351  30E4               	movlw	228
  2834  0352  00C8               	movwf	??_main
  2835  0353                     u4117:	
  2836  0353  0BC8               	decfsz	??_main,f
  2837  0354  2B53               	goto	u4117
  2838  0355  0BC9               	decfsz	??_main+1,f
  2839  0356  2B53               	goto	u4117
  2840  0357  0000               	nop
  2841  0358                     l3291:	
  2842                           
  2843                           ;main.c: 162: }
  2844                           ;main.c: 163: if (motor_load < 148)
  2845  0358  3000               	movlw	0
  2846  0359  0020               	movlb	0	; select bank0
  2847  035A  0250               	subwf	main@motor_load+1,w
  2848  035B  3094               	movlw	148
  2849  035C  1903               	skipnz
  2850  035D  024F               	subwf	main@motor_load,w
  2851  035E  1803               	skipnc
  2852  035F  2B64               	goto	l3295
  2853                           
  2854                           ;main.c: 164: EPWM1_LoadDutyValue(1023-135);
  2855  0360  3078               	movlw	120
  2856  0361  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2857  0362  3003               	movlw	3
  2858  0363  2B71               	goto	L1
  2859  0364                     l3295:	
  2860                           
  2861                           ;main.c: 165: else
  2862                           ;main.c: 166: EPWM1_LoadDutyValue(1023-motor_load);
  2863  0364  0020               	movlb	0	; select bank0
  2864  0365  094F               	comf	main@motor_load,w
  2865  0366  00C8               	movwf	??_main
  2866  0367  0950               	comf	main@motor_load+1,w
  2867  0368  00C9               	movwf	??_main+1
  2868  0369  0AC8               	incf	??_main,f
  2869  036A  1903               	skipnz
  2870  036B  0AC9               	incf	??_main+1,f
  2871  036C  0848               	movf	??_main,w
  2872  036D  3EFF               	addlw	255
  2873  036E  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2874  036F  3003               	movlw	3
  2875  0370  3D49               	addwfc	??_main+1,w
  2876  0371                     L1:	
  2877  0371  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2878  0372  3187  2761  3182   	fcall	_EPWM1_LoadDutyValue
  2879                           
  2880                           ;main.c: 167: _delay((unsigned long)((50)*(32000000/4000.0)));
  2881  0375  3003               	movlw	3
  2882  0376  0020               	movlb	0	; select bank0
  2883  0377  00CA               	movwf	??_main+2
  2884  0378  3008               	movlw	8
  2885  0379  00C9               	movwf	??_main+1
  2886  037A  3078               	movlw	120
  2887  037B  00C8               	movwf	??_main
  2888  037C                     u4127:	
  2889  037C  0BC8               	decfsz	??_main,f
  2890  037D  2B7C               	goto	u4127
  2891  037E  0BC9               	decfsz	??_main+1,f
  2892  037F  2B7C               	goto	u4127
  2893  0380  0BCA               	decfsz	??_main+2,f
  2894  0381  2B7C               	goto	u4127
  2895  0382  2B0A               	goto	l3261
  2896  0383                     l3303:	
  2897                           ;main.c: 174: while (1)
  2898                           
  2899                           ;main.c: 172: speed = 0;
  2900                           
  2901                           ;main.c: 168: }
  2902                           ;main.c: 170: GPS_Initialize();
  2903                           
  2904                           
  2905                           ;main.c: 175: {
  2906                           ;main.c: 177: if (GPS_read_speed())
  2907  0383  3180  2042  3182   	fcall	_GPS_read_speed
  2908  0386  3A00               	xorlw	0
  2909  0387  1903               	skipnz
  2910  0388  2B83               	goto	l3303
  2911                           
  2912                           ;main.c: 178: {
  2913                           ;main.c: 180: if (conf.use_mph > 0)
  2914  0389  0021               	movlb	1	; select bank1
  2915  038A  0820               	movf	_conf^(0+128),w
  2916  038B  1903               	btfsc	3,2
  2917  038C  2BAE               	goto	l3309
  2918                           
  2919                           ;main.c: 181: speed = multiply_fp(speed, ratio_mph);
  2920  038D  0020               	movlb	0	; select bank0
  2921  038E  0863               	movf	_speed+3,w
  2922  038F  00AF               	movwf	multiply_fp@n1+3
  2923  0390  0862               	movf	_speed+2,w
  2924  0391  00AE               	movwf	multiply_fp@n1+2
  2925  0392  0861               	movf	_speed+1,w
  2926  0393  00AD               	movwf	multiply_fp@n1+1
  2927  0394  0860               	movf	_speed,w
  2928  0395  00AC               	movwf	multiply_fp@n1
  2929  0396  30C5               	movlw	low (_ratio_mph| (0+32768))
  2930  0397  0084               	movwf	4
  2931  0398  3085               	movlw	high (_ratio_mph| (0+32768))
  2932  0399  0085               	movwf	5
  2933  039A  3F00               	moviw [0]fsr0
  2934  039B  00B0               	movwf	multiply_fp@n2
  2935  039C  3F01               	moviw [1]fsr0
  2936  039D  00B1               	movwf	multiply_fp@n2+1
  2937  039E  3F02               	moviw [2]fsr0
  2938  039F  00B2               	movwf	multiply_fp@n2+2
  2939  03A0  3F03               	moviw [3]fsr0
  2940  03A1  00B3               	movwf	multiply_fp@n2+3
  2941  03A2  3183  23BD  3182   	fcall	_multiply_fp
  2942  03A5  0020               	movlb	0	; select bank0
  2943  03A6  082F               	movf	?_multiply_fp+3,w
  2944  03A7  00E3               	movwf	_speed+3
  2945  03A8  082E               	movf	?_multiply_fp+2,w
  2946  03A9  00E2               	movwf	_speed+2
  2947  03AA  082D               	movf	?_multiply_fp+1,w
  2948  03AB  00E1               	movwf	_speed+1
  2949  03AC  082C               	movf	?_multiply_fp,w
  2950  03AD  00E0               	movwf	_speed
  2951  03AE                     l3309:	
  2952                           ;main.c: 183: do { LATA2 = 1; } while(0);
  2953                           
  2954  03AE  0022               	movlb	2	; select bank2
  2955  03AF  150C               	bsf	12,2	;volatile
  2956                           
  2957                           ;main.c: 184: _delay((unsigned long)((20)*(32000000/4000.0)));
  2958  03B0  30D0               	movlw	208
  2959  03B1  0020               	movlb	0	; select bank0
  2960  03B2  00C9               	movwf	??_main+1
  2961  03B3  30C9               	movlw	201
  2962  03B4  00C8               	movwf	??_main
  2963  03B5                     u4137:	
  2964  03B5  0BC8               	decfsz	??_main,f
  2965  03B6  2BB5               	goto	u4137
  2966  03B7  0BC9               	decfsz	??_main+1,f
  2967  03B8  2BB5               	goto	u4137
  2968  03B9  3200               	nop2
  2969                           
  2970                           ;main.c: 185: do { LATA2 = 0; } while(0);
  2971  03BA  0022               	movlb	2	; select bank2
  2972  03BB  110C               	bcf	12,2	;volatile
  2973  03BC  2B83               	goto	l3303
  2974  03BD                     __end_of_main:	
  2975                           
  2976                           	psect	text1
  2977  03BD                     __ptext1:	
  2978 ;; *************** function _multiply_fp *****************
  2979 ;; Defined at:
  2980 ;;		line 46 in file "fixed_point.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  n1              4   12[BANK0 ] long 
  2983 ;;  n2              4   16[BANK0 ] long 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  res             4   34[BANK0 ] long 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  4   12[BANK0 ] long 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0, pclath, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2995 ;;      Params:         0       8       0       0       0       0
  2996 ;;      Locals:         0       4       0       0       0       0
  2997 ;;      Temps:          0      14       0       0       0       0
  2998 ;;      Totals:         0      26       0       0       0       0
  2999 ;;Total ram usage:       26 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    7
  3002 ;; This function calls:
  3003 ;;		___lmul
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;;		_reciprocal_fp
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _multiply_fp
  3012  03BD                     _multiply_fp:	
  3013                           
  3014                           ;fixed_point.c: 50: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  3018  03BD  0020               	movlb	0	; select bank0
  3019  03BE  082C               	movf	multiply_fp@n1,w
  3020  03BF  00B4               	movwf	??_multiply_fp
  3021  03C0  082D               	movf	multiply_fp@n1+1,w
  3022  03C1  00B5               	movwf	??_multiply_fp+1
  3023  03C2  082E               	movf	multiply_fp@n1+2,w
  3024  03C3  00B6               	movwf	??_multiply_fp+2
  3025  03C4  082F               	movf	multiply_fp@n1+3,w
  3026  03C5  00B7               	movwf	??_multiply_fp+3
  3027  03C6  3010               	movlw	16
  3028  03C7  00B8               	movwf	??_multiply_fp+4
  3029  03C8                     u3745:	
  3030  03C8  37B7               	asrf	??_multiply_fp+3,f
  3031  03C9  0CB6               	rrf	??_multiply_fp+2,f
  3032  03CA  0CB5               	rrf	??_multiply_fp+1,f
  3033  03CB  0CB4               	rrf	??_multiply_fp,f
  3034  03CC  0BB8               	decfsz	??_multiply_fp+4,f
  3035  03CD  2BC8               	goto	u3745
  3036  03CE  0837               	movf	??_multiply_fp+3,w
  3037  03CF  00A3               	movwf	___lmul@multiplier+3
  3038  03D0  0836               	movf	??_multiply_fp+2,w
  3039  03D1  00A2               	movwf	___lmul@multiplier+2
  3040  03D2  0835               	movf	??_multiply_fp+1,w
  3041  03D3  00A1               	movwf	___lmul@multiplier+1
  3042  03D4  0834               	movf	??_multiply_fp,w
  3043  03D5  00A0               	movwf	___lmul@multiplier
  3044  03D6  0830               	movf	multiply_fp@n2,w
  3045  03D7  00B9               	movwf	??_multiply_fp+5
  3046  03D8  0831               	movf	multiply_fp@n2+1,w
  3047  03D9  00BA               	movwf	??_multiply_fp+6
  3048  03DA  0832               	movf	multiply_fp@n2+2,w
  3049  03DB  00BB               	movwf	??_multiply_fp+7
  3050  03DC  0833               	movf	multiply_fp@n2+3,w
  3051  03DD  00BC               	movwf	??_multiply_fp+8
  3052  03DE  3010               	movlw	16
  3053  03DF  00BD               	movwf	??_multiply_fp+9
  3054  03E0                     u3755:	
  3055  03E0  37BC               	asrf	??_multiply_fp+8,f
  3056  03E1  0CBB               	rrf	??_multiply_fp+7,f
  3057  03E2  0CBA               	rrf	??_multiply_fp+6,f
  3058  03E3  0CB9               	rrf	??_multiply_fp+5,f
  3059  03E4  0BBD               	decfsz	??_multiply_fp+9,f
  3060  03E5  2BE0               	goto	u3755
  3061  03E6  083C               	movf	??_multiply_fp+8,w
  3062  03E7  00A7               	movwf	___lmul@multiplicand+3
  3063  03E8  083B               	movf	??_multiply_fp+7,w
  3064  03E9  00A6               	movwf	___lmul@multiplicand+2
  3065  03EA  083A               	movf	??_multiply_fp+6,w
  3066  03EB  00A5               	movwf	___lmul@multiplicand+1
  3067  03EC  0839               	movf	??_multiply_fp+5,w
  3068  03ED  00A4               	movwf	___lmul@multiplicand
  3069  03EE  3186  2656  3183   	fcall	___lmul
  3070  03F1  0020               	movlb	0	; select bank0
  3071  03F2  0820               	movf	?___lmul,w
  3072  03F3  00BE               	movwf	??_multiply_fp+10
  3073  03F4  0821               	movf	?___lmul+1,w
  3074  03F5  00BF               	movwf	??_multiply_fp+11
  3075  03F6  0822               	movf	?___lmul+2,w
  3076  03F7  00C0               	movwf	??_multiply_fp+12
  3077  03F8  0823               	movf	?___lmul+3,w
  3078  03F9  00C1               	movwf	??_multiply_fp+13
  3079  03FA  3010               	movlw	16
  3080  03FB                     u3765:	
  3081  03FB  35BE               	lslf	??_multiply_fp+10,f
  3082  03FC  0DBF               	rlf	??_multiply_fp+11,f
  3083  03FD  0DC0               	rlf	??_multiply_fp+12,f
  3084  03FE  0DC1               	rlf	??_multiply_fp+13,f
  3085  03FF  0B89               	decfsz	9,f
  3086  0400  2BFB               	goto	u3765
  3087  0401  0841               	movf	??_multiply_fp+13,w
  3088  0402  00C5               	movwf	multiply_fp@res+3
  3089  0403  0840               	movf	??_multiply_fp+12,w
  3090  0404  00C4               	movwf	multiply_fp@res+2
  3091  0405  083F               	movf	??_multiply_fp+11,w
  3092  0406  00C3               	movwf	multiply_fp@res+1
  3093  0407  083E               	movf	??_multiply_fp+10,w
  3094  0408  00C2               	movwf	multiply_fp@res
  3095                           
  3096                           ;fixed_point.c: 51: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  3097  0409  082C               	movf	multiply_fp@n1,w
  3098  040A  00B4               	movwf	??_multiply_fp
  3099  040B  082D               	movf	multiply_fp@n1+1,w
  3100  040C  00B5               	movwf	??_multiply_fp+1
  3101  040D  082E               	movf	multiply_fp@n1+2,w
  3102  040E  00B6               	movwf	??_multiply_fp+2
  3103  040F  082F               	movf	multiply_fp@n1+3,w
  3104  0410  00B7               	movwf	??_multiply_fp+3
  3105  0411  3010               	movlw	16
  3106  0412  00B8               	movwf	??_multiply_fp+4
  3107  0413                     u3775:	
  3108  0413  37B7               	asrf	??_multiply_fp+3,f
  3109  0414  0CB6               	rrf	??_multiply_fp+2,f
  3110  0415  0CB5               	rrf	??_multiply_fp+1,f
  3111  0416  0CB4               	rrf	??_multiply_fp,f
  3112  0417  0BB8               	decfsz	??_multiply_fp+4,f
  3113  0418  2C13               	goto	u3775
  3114  0419  0837               	movf	??_multiply_fp+3,w
  3115  041A  00A3               	movwf	___lmul@multiplier+3
  3116  041B  0836               	movf	??_multiply_fp+2,w
  3117  041C  00A2               	movwf	___lmul@multiplier+2
  3118  041D  0835               	movf	??_multiply_fp+1,w
  3119  041E  00A1               	movwf	___lmul@multiplier+1
  3120  041F  0834               	movf	??_multiply_fp,w
  3121  0420  00A0               	movwf	___lmul@multiplier
  3122  0421  30FF               	movlw	255
  3123  0422  0530               	andwf	multiply_fp@n2,w
  3124  0423  00A4               	movwf	___lmul@multiplicand
  3125  0424  30FF               	movlw	255
  3126  0425  0531               	andwf	multiply_fp@n2+1,w
  3127  0426  00A5               	movwf	___lmul@multiplicand+1
  3128  0427  3000               	movlw	0
  3129  0428  0532               	andwf	multiply_fp@n2+2,w
  3130  0429  00A6               	movwf	___lmul@multiplicand+2
  3131  042A  3000               	movlw	0
  3132  042B  0533               	andwf	multiply_fp@n2+3,w
  3133  042C  00A7               	movwf	___lmul@multiplicand+3
  3134  042D  3186  2656  3183   	fcall	___lmul
  3135  0430  0020               	movlb	0	; select bank0
  3136  0431  0820               	movf	?___lmul,w
  3137  0432  07C2               	addwf	multiply_fp@res,f
  3138  0433  0821               	movf	?___lmul+1,w
  3139  0434  3DC3               	addwfc	multiply_fp@res+1,f
  3140  0435  0822               	movf	?___lmul+2,w
  3141  0436  3DC4               	addwfc	multiply_fp@res+2,f
  3142  0437  0823               	movf	?___lmul+3,w
  3143  0438  3DC5               	addwfc	multiply_fp@res+3,f
  3144                           
  3145                           ;fixed_point.c: 52: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  3146  0439  0830               	movf	multiply_fp@n2,w
  3147  043A  00B4               	movwf	??_multiply_fp
  3148  043B  0831               	movf	multiply_fp@n2+1,w
  3149  043C  00B5               	movwf	??_multiply_fp+1
  3150  043D  0832               	movf	multiply_fp@n2+2,w
  3151  043E  00B6               	movwf	??_multiply_fp+2
  3152  043F  0833               	movf	multiply_fp@n2+3,w
  3153  0440  00B7               	movwf	??_multiply_fp+3
  3154  0441  3010               	movlw	16
  3155  0442  00B8               	movwf	??_multiply_fp+4
  3156  0443                     u3785:	
  3157  0443  37B7               	asrf	??_multiply_fp+3,f
  3158  0444  0CB6               	rrf	??_multiply_fp+2,f
  3159  0445  0CB5               	rrf	??_multiply_fp+1,f
  3160  0446  0CB4               	rrf	??_multiply_fp,f
  3161  0447  0BB8               	decfsz	??_multiply_fp+4,f
  3162  0448  2C43               	goto	u3785
  3163  0449  0837               	movf	??_multiply_fp+3,w
  3164  044A  00A3               	movwf	___lmul@multiplier+3
  3165  044B  0836               	movf	??_multiply_fp+2,w
  3166  044C  00A2               	movwf	___lmul@multiplier+2
  3167  044D  0835               	movf	??_multiply_fp+1,w
  3168  044E  00A1               	movwf	___lmul@multiplier+1
  3169  044F  0834               	movf	??_multiply_fp,w
  3170  0450  00A0               	movwf	___lmul@multiplier
  3171  0451  30FF               	movlw	255
  3172  0452  052C               	andwf	multiply_fp@n1,w
  3173  0453  00A4               	movwf	___lmul@multiplicand
  3174  0454  30FF               	movlw	255
  3175  0455  052D               	andwf	multiply_fp@n1+1,w
  3176  0456  00A5               	movwf	___lmul@multiplicand+1
  3177  0457  3000               	movlw	0
  3178  0458  052E               	andwf	multiply_fp@n1+2,w
  3179  0459  00A6               	movwf	___lmul@multiplicand+2
  3180  045A  3000               	movlw	0
  3181  045B  052F               	andwf	multiply_fp@n1+3,w
  3182  045C  00A7               	movwf	___lmul@multiplicand+3
  3183  045D  3186  2656  3183   	fcall	___lmul
  3184  0460  0020               	movlb	0	; select bank0
  3185  0461  0820               	movf	?___lmul,w
  3186  0462  07C2               	addwf	multiply_fp@res,f
  3187  0463  0821               	movf	?___lmul+1,w
  3188  0464  3DC3               	addwfc	multiply_fp@res+1,f
  3189  0465  0822               	movf	?___lmul+2,w
  3190  0466  3DC4               	addwfc	multiply_fp@res+2,f
  3191  0467  0823               	movf	?___lmul+3,w
  3192  0468  3DC5               	addwfc	multiply_fp@res+3,f
  3193                           
  3194                           ;fixed_point.c: 53: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  3195  0469  30FF               	movlw	255
  3196  046A  00B4               	movwf	??_multiply_fp
  3197  046B  30FF               	movlw	255
  3198  046C  00B5               	movwf	??_multiply_fp+1
  3199  046D  3000               	movlw	0
  3200  046E  00B6               	movwf	??_multiply_fp+2
  3201  046F  3000               	movlw	0
  3202  0470  00B7               	movwf	??_multiply_fp+3
  3203  0471  30FF               	movlw	255
  3204  0472  052C               	andwf	multiply_fp@n1,w
  3205  0473  00A0               	movwf	___lmul@multiplier
  3206  0474  30FF               	movlw	255
  3207  0475  052D               	andwf	multiply_fp@n1+1,w
  3208  0476  00A1               	movwf	___lmul@multiplier+1
  3209  0477  3000               	movlw	0
  3210  0478  052E               	andwf	multiply_fp@n1+2,w
  3211  0479  00A2               	movwf	___lmul@multiplier+2
  3212  047A  3000               	movlw	0
  3213  047B  052F               	andwf	multiply_fp@n1+3,w
  3214  047C  00A3               	movwf	___lmul@multiplier+3
  3215  047D  30FF               	movlw	255
  3216  047E  0530               	andwf	multiply_fp@n2,w
  3217  047F  00A4               	movwf	___lmul@multiplicand
  3218  0480  30FF               	movlw	255
  3219  0481  0531               	andwf	multiply_fp@n2+1,w
  3220  0482  00A5               	movwf	___lmul@multiplicand+1
  3221  0483  3000               	movlw	0
  3222  0484  0532               	andwf	multiply_fp@n2+2,w
  3223  0485  00A6               	movwf	___lmul@multiplicand+2
  3224  0486  3000               	movlw	0
  3225  0487  0533               	andwf	multiply_fp@n2+3,w
  3226  0488  00A7               	movwf	___lmul@multiplicand+3
  3227  0489  3186  2656  3183   	fcall	___lmul
  3228  048C  0020               	movlb	0	; select bank0
  3229  048D  0820               	movf	?___lmul,w
  3230  048E  00B8               	movwf	??_multiply_fp+4
  3231  048F  0821               	movf	?___lmul+1,w
  3232  0490  00B9               	movwf	??_multiply_fp+5
  3233  0491  0822               	movf	?___lmul+2,w
  3234  0492  00BA               	movwf	??_multiply_fp+6
  3235  0493  0823               	movf	?___lmul+3,w
  3236  0494  00BB               	movwf	??_multiply_fp+7
  3237  0495  3010               	movlw	16
  3238  0496  00BC               	movwf	??_multiply_fp+8
  3239  0497                     u3795:	
  3240  0497  37BB               	asrf	??_multiply_fp+7,f
  3241  0498  0CBA               	rrf	??_multiply_fp+6,f
  3242  0499  0CB9               	rrf	??_multiply_fp+5,f
  3243  049A  0CB8               	rrf	??_multiply_fp+4,f
  3244  049B  0BBC               	decfsz	??_multiply_fp+8,f
  3245  049C  2C97               	goto	u3795
  3246  049D  0838               	movf	??_multiply_fp+4,w
  3247  049E  05B4               	andwf	??_multiply_fp,f
  3248  049F  0839               	movf	??_multiply_fp+5,w
  3249  04A0  05B5               	andwf	??_multiply_fp+1,f
  3250  04A1  083A               	movf	??_multiply_fp+6,w
  3251  04A2  05B6               	andwf	??_multiply_fp+2,f
  3252  04A3  083B               	movf	??_multiply_fp+7,w
  3253  04A4  05B7               	andwf	??_multiply_fp+3,f
  3254  04A5  0834               	movf	??_multiply_fp,w
  3255  04A6  07C2               	addwf	multiply_fp@res,f
  3256  04A7  0835               	movf	??_multiply_fp+1,w
  3257  04A8  3DC3               	addwfc	multiply_fp@res+1,f
  3258  04A9  0836               	movf	??_multiply_fp+2,w
  3259  04AA  3DC4               	addwfc	multiply_fp@res+2,f
  3260  04AB  0837               	movf	??_multiply_fp+3,w
  3261  04AC  3DC5               	addwfc	multiply_fp@res+3,f
  3262                           
  3263                           ;fixed_point.c: 54: return res;
  3264  04AD  0845               	movf	multiply_fp@res+3,w
  3265  04AE  00AF               	movwf	?_multiply_fp+3
  3266  04AF  0844               	movf	multiply_fp@res+2,w
  3267  04B0  00AE               	movwf	?_multiply_fp+2
  3268  04B1  0843               	movf	multiply_fp@res+1,w
  3269  04B2  00AD               	movwf	?_multiply_fp+1
  3270  04B3  0842               	movf	multiply_fp@res,w
  3271  04B4  00AC               	movwf	?_multiply_fp
  3272  04B5  0008               	return
  3273  04B6                     __end_of_multiply_fp:	
  3274                           
  3275                           	psect	text2
  3276  0656                     __ptext2:	
  3277 ;; *************** function ___lmul *****************
  3278 ;; Defined at:
  3279 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3282 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  product         4    8[BANK0 ] unsigned long 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  4    0[BANK0 ] unsigned long 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3294 ;;      Params:         0       8       0       0       0       0
  3295 ;;      Locals:         0       4       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0
  3297 ;;      Totals:         0      12       0       0       0       0
  3298 ;;Total ram usage:       12 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    6
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_multiply_fp
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function ___lmul
  3310  0656                     ___lmul:	
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3314  0656  3000               	movlw	0
  3315  0657  0020               	movlb	0	; select bank0
  3316  0658  00AB               	movwf	___lmul@product+3
  3317  0659  3000               	movlw	0
  3318  065A  00AA               	movwf	___lmul@product+2
  3319  065B  3000               	movlw	0
  3320  065C  00A9               	movwf	___lmul@product+1
  3321  065D  3000               	movlw	0
  3322  065E  00A8               	movwf	___lmul@product
  3323  065F                     l2851:	
  3324  065F  1C20               	btfss	___lmul@multiplier,0
  3325  0660  2E69               	goto	l2855
  3326  0661  0824               	movf	___lmul@multiplicand,w
  3327  0662  07A8               	addwf	___lmul@product,f
  3328  0663  0825               	movf	___lmul@multiplicand+1,w
  3329  0664  3DA9               	addwfc	___lmul@product+1,f
  3330  0665  0826               	movf	___lmul@multiplicand+2,w
  3331  0666  3DAA               	addwfc	___lmul@product+2,f
  3332  0667  0827               	movf	___lmul@multiplicand+3,w
  3333  0668  3DAB               	addwfc	___lmul@product+3,f
  3334  0669                     l2855:	
  3335  0669  3001               	movlw	1
  3336  066A                     u3135:	
  3337  066A  35A4               	lslf	___lmul@multiplicand,f
  3338  066B  0DA5               	rlf	___lmul@multiplicand+1,f
  3339  066C  0DA6               	rlf	___lmul@multiplicand+2,f
  3340  066D  0DA7               	rlf	___lmul@multiplicand+3,f
  3341  066E  0B89               	decfsz	9,f
  3342  066F  2E6A               	goto	u3135
  3343  0670  3001               	movlw	1
  3344  0671                     u3145:	
  3345  0671  36A3               	lsrf	___lmul@multiplier+3,f
  3346  0672  0CA2               	rrf	___lmul@multiplier+2,f
  3347  0673  0CA1               	rrf	___lmul@multiplier+1,f
  3348  0674  0CA0               	rrf	___lmul@multiplier,f
  3349  0675  0B89               	decfsz	9,f
  3350  0676  2E71               	goto	u3145
  3351  0677  0823               	movf	___lmul@multiplier+3,w
  3352  0678  0422               	iorwf	___lmul@multiplier+2,w
  3353  0679  0421               	iorwf	___lmul@multiplier+1,w
  3354  067A  0420               	iorwf	___lmul@multiplier,w
  3355  067B  1D03               	skipz
  3356  067C  2E5F               	goto	l2851
  3357  067D  082B               	movf	___lmul@product+3,w
  3358  067E  00A3               	movwf	?___lmul+3
  3359  067F  082A               	movf	___lmul@product+2,w
  3360  0680  00A2               	movwf	?___lmul+2
  3361  0681  0829               	movf	___lmul@product+1,w
  3362  0682  00A1               	movwf	?___lmul+1
  3363  0683  0828               	movf	___lmul@product,w
  3364  0684  00A0               	movwf	?___lmul
  3365  0685  0008               	return
  3366  0686                     __end_of___lmul:	
  3367                           
  3368                           	psect	text3
  3369  0FEE                     __ptext3:	
  3370 ;; *************** function _SYSTEM_Initialize *****************
  3371 ;; Defined at:
  3372 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;		None
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, pclath, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3386 ;;      Params:         0       0       0       0       0       0
  3387 ;;      Locals:         0       0       0       0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0
  3389 ;;      Totals:         0       0       0       0       0       0
  3390 ;;Total ram usage:        0 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    8
  3393 ;; This function calls:
  3394 ;;		_EPWM1_Initialize
  3395 ;;		_EUSART_Initialize
  3396 ;;		_OSCILLATOR_Initialize
  3397 ;;		_PIN_MANAGER_Initialize
  3398 ;;		_TMR0_Initialize
  3399 ;;		_TMR2_Initialize
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _SYSTEM_Initialize
  3407  0FEE                     _SYSTEM_Initialize:	
  3408                           
  3409                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3413  0FEE  3187  27B3  318F   	fcall	_PIN_MANAGER_Initialize
  3414                           
  3415                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3416  0FF1  318F  27C3  318F   	fcall	_OSCILLATOR_Initialize
  3417                           
  3418                           ;mcc.c: 74: EPWM1_Initialize();
  3419  0FF4  318F  27E0  318F   	fcall	_EPWM1_Initialize
  3420                           
  3421                           ;mcc.c: 75: TMR2_Initialize();
  3422  0FF7  318F  27CB  318F   	fcall	_TMR2_Initialize
  3423                           
  3424                           ;mcc.c: 76: TMR0_Initialize();
  3425  0FFA  3187  27CA  318F   	fcall	_TMR0_Initialize
  3426                           
  3427                           ;mcc.c: 77: EUSART_Initialize();
  3428  0FFD  3187  277D         	fcall	_EUSART_Initialize
  3429  0FFF  0008               	return
  3430  1000                     __end_of_SYSTEM_Initialize:	
  3431                           
  3432                           	psect	text4
  3433  0FCB                     __ptext4:	
  3434 ;; *************** function _TMR2_Initialize *****************
  3435 ;; Defined at:
  3436 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3450 ;;      Params:         0       0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0
  3453 ;;      Totals:         0       0       0       0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    7
  3457 ;; This function calls:
  3458 ;;		_TMR2_StartTimer
  3459 ;; This function is called by:
  3460 ;;		_SYSTEM_Initialize
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           
  3465                           ;psect for function _TMR2_Initialize
  3466  0FCB                     _TMR2_Initialize:	
  3467                           
  3468                           ;tmr2.c: 62: T2CON = 0x02;
  3469                           
  3470                           ;incstack = 0
  3471                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3472  0FCB  3002               	movlw	2
  3473  0FCC  0020               	movlb	0	; select bank0
  3474  0FCD  009C               	movwf	28	;volatile
  3475                           
  3476                           ;tmr2.c: 65: PR2 = 0xFF;
  3477  0FCE  30FF               	movlw	255
  3478  0FCF  009B               	movwf	27	;volatile
  3479                           
  3480                           ;tmr2.c: 68: TMR2 = 0x00;
  3481  0FD0  019A               	clrf	26	;volatile
  3482                           
  3483                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  3484  0FD1  1091               	bcf	17,1	;volatile
  3485                           
  3486                           ;tmr2.c: 74: TMR2_StartTimer();
  3487  0FD2  318F  27A8         	fcall	_TMR2_StartTimer
  3488  0FD4  0008               	return
  3489  0FD5                     __end_of_TMR2_Initialize:	
  3490                           
  3491                           	psect	text5
  3492  0FA8                     __ptext5:	
  3493 ;; *************** function _TMR2_StartTimer *****************
  3494 ;; Defined at:
  3495 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		None
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3509 ;;      Params:         0       0       0       0       0       0
  3510 ;;      Locals:         0       0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0
  3512 ;;      Totals:         0       0       0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    6
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_TMR2_Initialize
  3520 ;;		_main
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           
  3525                           ;psect for function _TMR2_StartTimer
  3526  0FA8                     _TMR2_StartTimer:	
  3527                           
  3528                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _TMR2_StartTimer: []
  3532  0FA8  0020               	movlb	0	; select bank0
  3533  0FA9  151C               	bsf	28,2	;volatile
  3534  0FAA  0008               	return
  3535  0FAB                     __end_of_TMR2_StartTimer:	
  3536                           
  3537                           	psect	text6
  3538  07CA                     __ptext6:	
  3539 ;; *************** function _TMR0_Initialize *****************
  3540 ;; Defined at:
  3541 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3555 ;;      Params:         0       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0
  3557 ;;      Temps:          0       1       0       0       0       0
  3558 ;;      Totals:         0       1       0       0       0       0
  3559 ;;Total ram usage:        1 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    7
  3562 ;; This function calls:
  3563 ;;		_TMR0_SetInterruptHandler
  3564 ;; This function is called by:
  3565 ;;		_SYSTEM_Initialize
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _TMR0_Initialize
  3571  07CA                     _TMR0_Initialize:	
  3572                           
  3573                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3577  07CA  0021               	movlb	1	; select bank1
  3578  07CB  0815               	movf	21,w	;volatile
  3579  07CC  39C0               	andlw	192
  3580  07CD  3817               	iorlw	23
  3581  07CE  0095               	movwf	21	;volatile
  3582                           
  3583                           ;tmr0.c: 71: TMR0 = 0x64;
  3584  07CF  3064               	movlw	100
  3585  07D0  0020               	movlb	0	; select bank0
  3586  07D1  0095               	movwf	21	;volatile
  3587                           
  3588                           ;tmr0.c: 74: timer0ReloadVal= 100;
  3589  07D2  3064               	movlw	100
  3590  07D3  00A0               	movwf	??_TMR0_Initialize
  3591  07D4  0820               	movf	??_TMR0_Initialize,w
  3592  07D5  00F9               	movwf	_timer0ReloadVal	;volatile
  3593                           
  3594                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  3595  07D6  110B               	bcf	11,2	;volatile
  3596                           
  3597                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  3598  07D7  168B               	bsf	11,5	;volatile
  3599                           
  3600                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3601  07D8  3003               	movlw	low _TMR0_DefaultInterruptHandler
  3602  07D9  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3603  07DA  3000               	movlw	high _TMR0_DefaultInterruptHandler
  3604  07DB  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3605  07DC  318F  27B7         	fcall	_TMR0_SetInterruptHandler
  3606  07DE  0008               	return
  3607  07DF                     __end_of_TMR0_Initialize:	
  3608                           
  3609                           	psect	text7
  3610  0FB7                     __ptext7:	
  3611 ;; *************** function _TMR0_SetInterruptHandler *****************
  3612 ;; Defined at:
  3613 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  InterruptHan    2    4[COMMON] PTR void 
  3616 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3628 ;;      Params:         2       0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0       0
  3630 ;;      Temps:          0       0       0       0       0       0
  3631 ;;      Totals:         2       0       0       0       0       0
  3632 ;;Total ram usage:        2 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    6
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_TMR0_Initialize
  3639 ;;		_main
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           
  3644                           ;psect for function _TMR0_SetInterruptHandler
  3645  0FB7                     _TMR0_SetInterruptHandler:	
  3646                           
  3647                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3651  0FB7  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3652  0FB8  0020               	movlb	0	; select bank0
  3653  0FB9  00E7               	movwf	_TMR0_InterruptHandler+1
  3654  0FBA  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3655  0FBB  00E6               	movwf	_TMR0_InterruptHandler
  3656  0FBC  0008               	return
  3657  0FBD                     __end_of_TMR0_SetInterruptHandler:	
  3658                           
  3659                           	psect	text8
  3660  07B3                     __ptext8:	
  3661 ;; *************** function _PIN_MANAGER_Initialize *****************
  3662 ;; Defined at:
  3663 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3677 ;;      Params:         0       0       0       0       0       0
  3678 ;;      Locals:         0       0       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0
  3680 ;;      Totals:         0       0       0       0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    6
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_SYSTEM_Initialize
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function _PIN_MANAGER_Initialize
  3693  07B3                     _PIN_MANAGER_Initialize:	
  3694                           
  3695                           ;pin_manager.c: 51: LATB = 0x0;
  3696                           
  3697                           ;incstack = 0
  3698                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3699  07B3  0022               	movlb	2	; select bank2
  3700  07B4  018D               	clrf	13	;volatile
  3701                           
  3702                           ;pin_manager.c: 52: LATA = 0x0;
  3703  07B5  018C               	clrf	12	;volatile
  3704                           
  3705                           ;pin_manager.c: 53: ANSELA = 0x1F;
  3706  07B6  301F               	movlw	31
  3707  07B7  0023               	movlb	3	; select bank3
  3708  07B8  008C               	movwf	12	;volatile
  3709                           
  3710                           ;pin_manager.c: 54: ANSELB = 0xF0;
  3711  07B9  30F0               	movlw	240
  3712  07BA  008D               	movwf	13	;volatile
  3713                           
  3714                           ;pin_manager.c: 55: WPUA = 0x20;
  3715  07BB  3020               	movlw	32
  3716  07BC  0024               	movlb	4	; select bank4
  3717  07BD  008C               	movwf	12	;volatile
  3718                           
  3719                           ;pin_manager.c: 56: WPUB = 0xFF;
  3720  07BE  30FF               	movlw	255
  3721  07BF  008D               	movwf	13	;volatile
  3722                           
  3723                           ;pin_manager.c: 57: TRISB = 0xF7;
  3724  07C0  30F7               	movlw	247
  3725  07C1  0021               	movlb	1	; select bank1
  3726  07C2  008D               	movwf	13	;volatile
  3727                           
  3728                           ;pin_manager.c: 58: TRISA = 0xFB;
  3729  07C3  30FB               	movlw	251
  3730  07C4  008C               	movwf	12	;volatile
  3731                           
  3732                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  3733  07C5  1395               	bcf	21,7	;volatile
  3734                           
  3735                           ;pin_manager.c: 61: APFCON0 = 0x00;
  3736  07C6  0022               	movlb	2	; select bank2
  3737  07C7  019D               	clrf	29	;volatile
  3738                           
  3739                           ;pin_manager.c: 62: APFCON1 = 0x00;
  3740  07C8  019E               	clrf	30	;volatile
  3741  07C9  0008               	return
  3742  07CA                     __end_of_PIN_MANAGER_Initialize:	
  3743                           
  3744                           	psect	text9
  3745  0FC3                     __ptext9:	
  3746 ;; *************** function _OSCILLATOR_Initialize *****************
  3747 ;; Defined at:
  3748 ;;		line 80 in file "mcc_generated_files/mcc.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3762 ;;      Params:         0       0       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0
  3765 ;;      Totals:         0       0       0       0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    6
  3769 ;; This function calls:
  3770 ;;		Nothing
  3771 ;; This function is called by:
  3772 ;;		_SYSTEM_Initialize
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           
  3777                           ;psect for function _OSCILLATOR_Initialize
  3778  0FC3                     _OSCILLATOR_Initialize:	
  3779                           
  3780                           ;mcc.c: 83: OSCCON = 0x70;
  3781                           
  3782                           ;incstack = 0
  3783                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3784  0FC3  3070               	movlw	112
  3785  0FC4  0021               	movlb	1	; select bank1
  3786  0FC5  0099               	movwf	25	;volatile
  3787                           
  3788                           ;mcc.c: 85: OSCSTAT = 0x00;
  3789  0FC6  019A               	clrf	26	;volatile
  3790                           
  3791                           ;mcc.c: 87: OSCTUNE = 0x00;
  3792  0FC7  0198               	clrf	24	;volatile
  3793  0FC8                     l28:	
  3794                           ;mcc.c: 92: {
  3795                           
  3796                           ;mcc.c: 91: while(PLLR == 0)
  3797                           
  3798  0FC8  1B1A               	btfsc	26,6	;volatile
  3799  0FC9  0008               	return
  3800  0FCA  2FC8               	goto	l28
  3801  0FCB                     __end_of_OSCILLATOR_Initialize:	
  3802                           
  3803                           	psect	text10
  3804  077D                     __ptext10:	
  3805 ;; *************** function _EUSART_Initialize *****************
  3806 ;; Defined at:
  3807 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3821 ;;      Params:         0       0       0       0       0       0
  3822 ;;      Locals:         0       0       0       0       0       0
  3823 ;;      Temps:          1       0       0       0       0       0
  3824 ;;      Totals:         1       0       0       0       0       0
  3825 ;;Total ram usage:        1 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    6
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_SYSTEM_Initialize
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _EUSART_Initialize
  3837  077D                     _EUSART_Initialize:	
  3838                           
  3839                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3843  077D  0021               	movlb	1	; select bank1
  3844  077E  1291               	bcf	17,5	;volatile
  3845                           
  3846                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  3847  077F  1211               	bcf	17,4	;volatile
  3848                           
  3849                           ;eusart.c: 84: BAUDCON = 0x08;
  3850  0780  3008               	movlw	8
  3851  0781  0023               	movlb	3	; select bank3
  3852  0782  009F               	movwf	31	;volatile
  3853                           
  3854                           ;eusart.c: 87: RCSTA = 0x90;
  3855  0783  3090               	movlw	144
  3856  0784  009D               	movwf	29	;volatile
  3857                           
  3858                           ;eusart.c: 90: TXSTA = 0x24;
  3859  0785  3024               	movlw	36
  3860  0786  009E               	movwf	30	;volatile
  3861                           
  3862                           ;eusart.c: 93: SPBRGL = 0x40;
  3863  0787  3040               	movlw	64
  3864  0788  009B               	movwf	27	;volatile
  3865                           
  3866                           ;eusart.c: 96: SPBRGH = 0x03;
  3867  0789  3003               	movlw	3
  3868  078A  009C               	movwf	28	;volatile
  3869                           
  3870                           ;eusart.c: 100: eusartTxHead = 0;
  3871  078B  0020               	movlb	0	; select bank0
  3872  078C  01EB               	clrf	_eusartTxHead
  3873                           
  3874                           ;eusart.c: 101: eusartTxTail = 0;
  3875  078D  01EC               	clrf	_eusartTxTail
  3876                           
  3877                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3878  078E  3008               	movlw	8
  3879  078F  00F4               	movwf	??_EUSART_Initialize
  3880  0790  0874               	movf	??_EUSART_Initialize,w
  3881  0791  00EA               	movwf	_eusartTxBufferRemaining	;volatile
  3882                           
  3883                           ;eusart.c: 104: eusartRxHead = 0;
  3884  0792  01E8               	clrf	_eusartRxHead
  3885                           
  3886                           ;eusart.c: 105: eusartRxTail = 0;
  3887  0793  01E9               	clrf	_eusartRxTail
  3888                           
  3889                           ;eusart.c: 106: eusartRxCount = 0;
  3890  0794  01F8               	clrf	_eusartRxCount	;volatile
  3891                           
  3892                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3893  0795  0021               	movlb	1	; select bank1
  3894  0796  1691               	bsf	17,5	;volatile
  3895  0797  0008               	return
  3896  0798                     __end_of_EUSART_Initialize:	
  3897                           
  3898                           	psect	text11
  3899  0FE0                     __ptext11:	
  3900 ;; *************** function _EPWM1_Initialize *****************
  3901 ;; Defined at:
  3902 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3916 ;;      Params:         0       0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0
  3919 ;;      Totals:         0       0       0       0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    6
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_SYSTEM_Initialize
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           
  3931                           ;psect for function _EPWM1_Initialize
  3932  0FE0                     _EPWM1_Initialize:	
  3933                           
  3934                           ;epwm1.c: 68: CCP1CON = 0x3C;
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
  3938  0FE0  303C               	movlw	60
  3939  0FE1  0025               	movlb	5	; select bank5
  3940  0FE2  0093               	movwf	19	;volatile
  3941                           
  3942                           ;epwm1.c: 71: ECCP1AS = 0x00;
  3943  0FE3  0195               	clrf	21	;volatile
  3944                           
  3945                           ;epwm1.c: 74: PWM1CON = 0x80;
  3946  0FE4  3080               	movlw	128
  3947  0FE5  0094               	movwf	20	;volatile
  3948                           
  3949                           ;epwm1.c: 77: PSTR1CON = 0x01;
  3950  0FE6  3001               	movlw	1
  3951  0FE7  0096               	movwf	22	;volatile
  3952                           
  3953                           ;epwm1.c: 80: CCPR1L = 0x7F;
  3954  0FE8  307F               	movlw	127
  3955  0FE9  0091               	movwf	17	;volatile
  3956                           
  3957                           ;epwm1.c: 83: CCPR1H = 0x00;
  3958  0FEA  0192               	clrf	18	;volatile
  3959                           
  3960                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  3961  0FEB  30FC               	movlw	-4
  3962  0FEC  059E               	andwf	30,f	;volatile
  3963  0FED  0008               	return
  3964  0FEE                     __end_of_EPWM1_Initialize:	
  3965                           
  3966                           	psect	text12
  3967  06EE                     __ptext12:	
  3968 ;; *************** function _LED_set_state *****************
  3969 ;; Defined at:
  3970 ;;		line 14 in file "interact.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  new_state       1    wreg     enum E2919
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  new_state       1    5[COMMON] enum E2919
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg, status,2, status,0
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3984 ;;      Params:         0       0       0       0       0       0
  3985 ;;      Locals:         1       0       0       0       0       0
  3986 ;;      Temps:          1       0       0       0       0       0
  3987 ;;      Totals:         2       0       0       0       0       0
  3988 ;;Total ram usage:        2 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    6
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_main
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _LED_set_state
  4000  06EE                     _LED_set_state:	
  4001                           
  4002                           ;incstack = 0
  4003                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  4004                           ;LED_set_state@new_state stored from wreg
  4005  06EE  00F5               	movwf	LED_set_state@new_state
  4006                           
  4007                           ;interact.c: 16: m_LED.state = new_state;
  4008  06EF  0875               	movf	LED_set_state@new_state,w
  4009  06F0  00F4               	movwf	??_LED_set_state
  4010  06F1  0874               	movf	??_LED_set_state,w
  4011  06F2  00F6               	movwf	_m_LED	;volatile
  4012                           
  4013                           ;interact.c: 17: m_LED.counter = 0;
  4014  06F3  01F7               	clrf	_m_LED+1	;volatile
  4015                           
  4016                           ;interact.c: 18: if (new_state == always_off)
  4017  06F4  0375               	decf	LED_set_state@new_state,w
  4018  06F5  1D03               	btfss	3,2
  4019  06F6  2EFA               	goto	l2229
  4020                           
  4021                           ;interact.c: 19: do { LATA2 = 0; } while(0);
  4022  06F7  0022               	movlb	2	; select bank2
  4023  06F8  110C               	bcf	12,2	;volatile
  4024  06F9  0008               	return
  4025  06FA                     l2229:	
  4026                           
  4027                           ;interact.c: 20: else if (new_state == always_on)
  4028  06FA  0875               	movf	LED_set_state@new_state,w
  4029  06FB  1D03               	btfss	3,2
  4030  06FC  2F00               	goto	l2231
  4031                           
  4032                           ;interact.c: 21: do { LATA2 = 1; } while(0);
  4033  06FD  0022               	movlb	2	; select bank2
  4034  06FE  150C               	bsf	12,2	;volatile
  4035  06FF  0008               	return
  4036  0700                     l2231:	
  4037                           
  4038                           ;interact.c: 22: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  4039  0700  3002               	movlw	2
  4040  0701  0675               	xorwf	LED_set_state@new_state,w
  4041  0702  1903               	btfsc	3,2
  4042  0703  2F08               	goto	l381
  4043  0704  3003               	movlw	3
  4044  0705  0675               	xorwf	LED_set_state@new_state,w
  4045  0706  1D03               	btfss	3,2
  4046  0707  0008               	return
  4047  0708                     l381:	
  4048                           ;interact.c: 23: do { LATA2 = 1; } while(0);
  4049                           
  4050  0708  0022               	movlb	2	; select bank2
  4051  0709  150C               	bsf	12,2	;volatile
  4052  070A  0008               	return
  4053  070B                     __end_of_LED_set_state:	
  4054                           
  4055                           	psect	text13
  4056  0042                     __ptext13:	
  4057 ;; *************** function _GPS_read_speed *****************
  4058 ;; Defined at:
  4059 ;;		line 23 in file "GPS.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  buffer          6   31[BANK0 ] unsigned char [6]
  4064 ;;  read_speed_f    2   27[BANK0 ] unsigned short 
  4065 ;;  read_speed_i    2   25[BANK0 ] unsigned short 
  4066 ;;  m_char          1   39[BANK0 ] unsigned char 
  4067 ;;  i_buff          1   38[BANK0 ] unsigned char 
  4068 ;;  i_buff2         1   37[BANK0 ] unsigned char 
  4069 ;;  checksum        1   30[BANK0 ] unsigned char 
  4070 ;;  checksum2       1   29[BANK0 ] unsigned char 
  4071 ;;  no_more_chec    1   24[BANK0 ] unsigned char 
  4072 ;;  before_dot      1   23[BANK0 ] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  1    wreg      unsigned char 
  4075 ;; Registers used:
  4076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4082 ;;      Params:         0       0       0       0       0       0
  4083 ;;      Locals:         0      17       0       0       0       0
  4084 ;;      Temps:          0       2       0       0       0       0
  4085 ;;      Totals:         0      19       0       0       0       0
  4086 ;;Total ram usage:       19 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    7
  4089 ;; This function calls:
  4090 ;;		_EUSART_Read
  4091 ;;		___wmul
  4092 ;;		_convert_to_fp
  4093 ;; This function is called by:
  4094 ;;		_main
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           
  4099                           ;psect for function _GPS_read_speed
  4100  0042                     _GPS_read_speed:	
  4101                           
  4102                           ;GPS.c: 27: unsigned char buffer[6];
  4103                           ;GPS.c: 28: unsigned char i_buff = 0;
  4104                           
  4105                           ;incstack = 0
  4106                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4107  0042  0020               	movlb	0	; select bank0
  4108  0043  01C6               	clrf	GPS_read_speed@i_buff
  4109                           
  4110                           ;GPS.c: 29: unsigned char checksum = 0x00;
  4111  0044  01BE               	clrf	GPS_read_speed@checksum
  4112                           
  4113                           ;GPS.c: 31: unsigned char m_char = 0x00;
  4114  0045  01C7               	clrf	GPS_read_speed@m_char
  4115  0046                     l2891:	
  4116                           ;GPS.c: 32: while (m_char != '$')
  4117                           
  4118  0046  3024               	movlw	36
  4119  0047  0647               	xorwf	GPS_read_speed@m_char,w
  4120  0048  1903               	btfsc	3,2
  4121  0049  2855               	goto	l2893
  4122                           
  4123                           ;GPS.c: 33: if(eusartRxCount!=0)
  4124  004A  0878               	movf	_eusartRxCount,w	;volatile
  4125  004B  1903               	btfsc	3,2
  4126  004C  2846               	goto	l2891
  4127                           
  4128                           ;GPS.c: 34: m_char=EUSART_Read();
  4129  004D  3186  26CF  3180   	fcall	_EUSART_Read
  4130  0050  0020               	movlb	0	; select bank0
  4131  0051  00B5               	movwf	??_GPS_read_speed
  4132  0052  0835               	movf	??_GPS_read_speed,w
  4133  0053  00C7               	movwf	GPS_read_speed@m_char
  4134  0054  2846               	goto	l2891
  4135  0055                     l2893:	
  4136                           ;GPS.c: 38: while (1)
  4137                           
  4138                           
  4139                           ;GPS.c: 39: if (eusartRxCount!=0)
  4140  0055  0878               	movf	_eusartRxCount,w	;volatile
  4141  0056  1903               	btfsc	3,2
  4142  0057  2855               	goto	l2893
  4143                           
  4144                           ;GPS.c: 40: {
  4145                           ;GPS.c: 41: m_char=EUSART_Read();
  4146  0058  3186  26CF  3180   	fcall	_EUSART_Read
  4147  005B  0020               	movlb	0	; select bank0
  4148  005C  00B5               	movwf	??_GPS_read_speed
  4149  005D  0835               	movf	??_GPS_read_speed,w
  4150  005E  00C7               	movwf	GPS_read_speed@m_char
  4151                           
  4152                           ;GPS.c: 42: checksum ^= m_char;
  4153  005F  0847               	movf	GPS_read_speed@m_char,w
  4154  0060  00B5               	movwf	??_GPS_read_speed
  4155  0061  0835               	movf	??_GPS_read_speed,w
  4156  0062  06BE               	xorwf	GPS_read_speed@checksum,f
  4157                           
  4158                           ;GPS.c: 43: if (m_char == ',')
  4159  0063  302C               	movlw	44
  4160  0064  0647               	xorwf	GPS_read_speed@m_char,w
  4161  0065  1903               	btfsc	3,2
  4162  0066  2879               	goto	l2915
  4163                           
  4164                           ;GPS.c: 45: else
  4165                           ;GPS.c: 46: {
  4166                           ;GPS.c: 47: buffer[i_buff++] = m_char;
  4167                           
  4168                           ;GPS.c: 44: break;
  4169  0067  0847               	movf	GPS_read_speed@m_char,w
  4170  0068  00B5               	movwf	??_GPS_read_speed
  4171  0069  0846               	movf	GPS_read_speed@i_buff,w
  4172  006A  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4173  006B  0086               	movwf	6
  4174  006C  0187               	clrf	7
  4175  006D  0835               	movf	??_GPS_read_speed,w
  4176  006E  0081               	movwf	1
  4177  006F  3001               	movlw	1
  4178  0070  00B5               	movwf	??_GPS_read_speed
  4179  0071  0835               	movf	??_GPS_read_speed,w
  4180  0072  07C6               	addwf	GPS_read_speed@i_buff,f
  4181                           
  4182                           ;GPS.c: 48: if (i_buff >= 6)
  4183  0073  3006               	movlw	6
  4184  0074  0246               	subwf	GPS_read_speed@i_buff,w
  4185  0075  1C03               	skipc
  4186  0076  2855               	goto	l2893
  4187                           
  4188                           ;GPS.c: 49: return 0;
  4189  0077  3000               	movlw	0
  4190  0078  0008               	return
  4191  0079                     l2915:	
  4192                           
  4193                           ;GPS.c: 50: }
  4194                           ;GPS.c: 51: }
  4195                           ;GPS.c: 53: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  4196  0079  3047               	movlw	71
  4197  007A  063F               	xorwf	GPS_read_speed@buffer,w
  4198  007B  1D03               	btfss	3,2
  4199  007C  288D               	goto	l2925
  4200  007D  3050               	movlw	80
  4201  007E  0640               	xorwf	GPS_read_speed@buffer+1,w
  4202  007F  1D03               	btfss	3,2
  4203  0080  288D               	goto	l2925
  4204  0081  3056               	movlw	86
  4205  0082  0641               	xorwf	GPS_read_speed@buffer+2,w
  4206  0083  1D03               	btfss	3,2
  4207  0084  288D               	goto	l2925
  4208  0085  3054               	movlw	84
  4209  0086  0642               	xorwf	GPS_read_speed@buffer+3,w
  4210  0087  1D03               	btfss	3,2
  4211  0088  288D               	goto	l2925
  4212  0089  3047               	movlw	71
  4213  008A  0643               	xorwf	GPS_read_speed@buffer+4,w
  4214  008B  1903               	btfsc	3,2
  4215  008C  288F               	goto	l2929
  4216  008D                     l2925:	
  4217                           
  4218                           ;GPS.c: 54: return 0;
  4219  008D  3000               	movlw	0
  4220  008E  0008               	return
  4221  008F                     l2929:	
  4222                           
  4223                           ;GPS.c: 55: i_buff = 0;
  4224  008F  01C6               	clrf	GPS_read_speed@i_buff
  4225  0090                     l2931:	
  4226                           ;GPS.c: 58: while (1)
  4227                           
  4228                           
  4229                           ;GPS.c: 59: if (eusartRxCount!=0)
  4230  0090  0878               	movf	_eusartRxCount,w	;volatile
  4231  0091  1903               	btfsc	3,2
  4232  0092  2890               	goto	l2931
  4233                           
  4234                           ;GPS.c: 60: {
  4235                           ;GPS.c: 61: m_char=EUSART_Read();
  4236  0093  3186  26CF  3180   	fcall	_EUSART_Read
  4237  0096  0020               	movlb	0	; select bank0
  4238  0097  00B5               	movwf	??_GPS_read_speed
  4239  0098  0835               	movf	??_GPS_read_speed,w
  4240  0099  00C7               	movwf	GPS_read_speed@m_char
  4241                           
  4242                           ;GPS.c: 62: checksum ^= m_char;
  4243  009A  0847               	movf	GPS_read_speed@m_char,w
  4244  009B  00B5               	movwf	??_GPS_read_speed
  4245  009C  0835               	movf	??_GPS_read_speed,w
  4246  009D  06BE               	xorwf	GPS_read_speed@checksum,f
  4247                           
  4248                           ;GPS.c: 63: if (m_char == ',')
  4249  009E  302C               	movlw	44
  4250  009F  0647               	xorwf	GPS_read_speed@m_char,w
  4251  00A0  1D03               	btfss	3,2
  4252  00A1  2890               	goto	l2931
  4253  00A2                     l2941:	
  4254                           ;GPS.c: 65: }
  4255                           ;GPS.c: 67: while (1)
  4256                           
  4257                           ;GPS.c: 64: break;
  4258                           
  4259                           
  4260                           ;GPS.c: 68: if (eusartRxCount!=0)
  4261  00A2  0878               	movf	_eusartRxCount,w	;volatile
  4262  00A3  1903               	btfsc	3,2
  4263  00A4  28A2               	goto	l2941
  4264                           
  4265                           ;GPS.c: 69: {
  4266                           ;GPS.c: 70: m_char=EUSART_Read();
  4267  00A5  3186  26CF  3180   	fcall	_EUSART_Read
  4268  00A8  0020               	movlb	0	; select bank0
  4269  00A9  00B5               	movwf	??_GPS_read_speed
  4270  00AA  0835               	movf	??_GPS_read_speed,w
  4271  00AB  00C7               	movwf	GPS_read_speed@m_char
  4272                           
  4273                           ;GPS.c: 71: checksum ^= m_char;
  4274  00AC  0847               	movf	GPS_read_speed@m_char,w
  4275  00AD  00B5               	movwf	??_GPS_read_speed
  4276  00AE  0835               	movf	??_GPS_read_speed,w
  4277  00AF  06BE               	xorwf	GPS_read_speed@checksum,f
  4278                           
  4279                           ;GPS.c: 72: if (m_char == ',')
  4280  00B0  302C               	movlw	44
  4281  00B1  0647               	xorwf	GPS_read_speed@m_char,w
  4282  00B2  1903               	btfsc	3,2
  4283  00B3  28C6               	goto	l2963
  4284                           
  4285                           ;GPS.c: 74: else
  4286                           ;GPS.c: 75: {
  4287                           ;GPS.c: 76: buffer[i_buff++] = m_char;
  4288                           
  4289                           ;GPS.c: 73: break;
  4290  00B4  0847               	movf	GPS_read_speed@m_char,w
  4291  00B5  00B5               	movwf	??_GPS_read_speed
  4292  00B6  0846               	movf	GPS_read_speed@i_buff,w
  4293  00B7  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4294  00B8  0086               	movwf	6
  4295  00B9  0187               	clrf	7
  4296  00BA  0835               	movf	??_GPS_read_speed,w
  4297  00BB  0081               	movwf	1
  4298  00BC  3001               	movlw	1
  4299  00BD  00B5               	movwf	??_GPS_read_speed
  4300  00BE  0835               	movf	??_GPS_read_speed,w
  4301  00BF  07C6               	addwf	GPS_read_speed@i_buff,f
  4302                           
  4303                           ;GPS.c: 77: if (i_buff >= 6)
  4304  00C0  3006               	movlw	6
  4305  00C1  0246               	subwf	GPS_read_speed@i_buff,w
  4306  00C2  1C03               	skipc
  4307  00C3  28A2               	goto	l2941
  4308                           
  4309                           ;GPS.c: 78: return 0;
  4310  00C4  3000               	movlw	0
  4311  00C5  0008               	return
  4312  00C6                     l2963:	
  4313                           
  4314                           ;GPS.c: 79: }
  4315                           ;GPS.c: 80: }
  4316                           ;GPS.c: 81: if ((buffer[0] != 'T')||(i_buff != 1))
  4317  00C6  3054               	movlw	84
  4318  00C7  063F               	xorwf	GPS_read_speed@buffer,w
  4319  00C8  1903               	btfsc	3,2
  4320  00C9  0346               	decf	GPS_read_speed@i_buff,w
  4321  00CA  1903               	btfsc	3,2
  4322  00CB  28CE               	goto	l2971
  4323                           
  4324                           ;GPS.c: 82: return 0;
  4325  00CC  3000               	movlw	0
  4326  00CD  0008               	return
  4327  00CE                     l2971:	
  4328                           
  4329                           ;GPS.c: 83: i_buff = 0;
  4330  00CE  01C6               	clrf	GPS_read_speed@i_buff
  4331  00CF                     l2973:	
  4332                           ;GPS.c: 86: while (1)
  4333                           
  4334                           
  4335                           ;GPS.c: 87: if (eusartRxCount!=0)
  4336  00CF  0878               	movf	_eusartRxCount,w	;volatile
  4337  00D0  1903               	btfsc	3,2
  4338  00D1  28CF               	goto	l2973
  4339                           
  4340                           ;GPS.c: 88: {
  4341                           ;GPS.c: 89: m_char=EUSART_Read();
  4342  00D2  3186  26CF  3180   	fcall	_EUSART_Read
  4343  00D5  0020               	movlb	0	; select bank0
  4344  00D6  00B5               	movwf	??_GPS_read_speed
  4345  00D7  0835               	movf	??_GPS_read_speed,w
  4346  00D8  00C7               	movwf	GPS_read_speed@m_char
  4347                           
  4348                           ;GPS.c: 90: checksum ^= m_char;
  4349  00D9  0847               	movf	GPS_read_speed@m_char,w
  4350  00DA  00B5               	movwf	??_GPS_read_speed
  4351  00DB  0835               	movf	??_GPS_read_speed,w
  4352  00DC  06BE               	xorwf	GPS_read_speed@checksum,f
  4353                           
  4354                           ;GPS.c: 91: if (m_char == ',')
  4355  00DD  302C               	movlw	44
  4356  00DE  0647               	xorwf	GPS_read_speed@m_char,w
  4357  00DF  1D03               	btfss	3,2
  4358  00E0  28CF               	goto	l2973
  4359  00E1                     l2983:	
  4360                           ;GPS.c: 93: }
  4361                           ;GPS.c: 95: while (1)
  4362                           
  4363                           ;GPS.c: 92: break;
  4364                           
  4365                           
  4366                           ;GPS.c: 96: if (eusartRxCount!=0)
  4367  00E1  0878               	movf	_eusartRxCount,w	;volatile
  4368  00E2  1903               	btfsc	3,2
  4369  00E3  28E1               	goto	l2983
  4370                           
  4371                           ;GPS.c: 97: {
  4372                           ;GPS.c: 98: m_char=EUSART_Read();
  4373  00E4  3186  26CF  3180   	fcall	_EUSART_Read
  4374  00E7  0020               	movlb	0	; select bank0
  4375  00E8  00B5               	movwf	??_GPS_read_speed
  4376  00E9  0835               	movf	??_GPS_read_speed,w
  4377  00EA  00C7               	movwf	GPS_read_speed@m_char
  4378                           
  4379                           ;GPS.c: 99: checksum ^= m_char;
  4380  00EB  0847               	movf	GPS_read_speed@m_char,w
  4381  00EC  00B5               	movwf	??_GPS_read_speed
  4382  00ED  0835               	movf	??_GPS_read_speed,w
  4383  00EE  06BE               	xorwf	GPS_read_speed@checksum,f
  4384                           
  4385                           ;GPS.c: 100: if (m_char == ',')
  4386  00EF  302C               	movlw	44
  4387  00F0  0647               	xorwf	GPS_read_speed@m_char,w
  4388  00F1  1903               	btfsc	3,2
  4389  00F2  2905               	goto	l3005
  4390                           
  4391                           ;GPS.c: 102: else
  4392                           ;GPS.c: 103: {
  4393                           ;GPS.c: 104: buffer[i_buff++] = m_char;
  4394                           
  4395                           ;GPS.c: 101: break;
  4396  00F3  0847               	movf	GPS_read_speed@m_char,w
  4397  00F4  00B5               	movwf	??_GPS_read_speed
  4398  00F5  0846               	movf	GPS_read_speed@i_buff,w
  4399  00F6  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4400  00F7  0086               	movwf	6
  4401  00F8  0187               	clrf	7
  4402  00F9  0835               	movf	??_GPS_read_speed,w
  4403  00FA  0081               	movwf	1
  4404  00FB  3001               	movlw	1
  4405  00FC  00B5               	movwf	??_GPS_read_speed
  4406  00FD  0835               	movf	??_GPS_read_speed,w
  4407  00FE  07C6               	addwf	GPS_read_speed@i_buff,f
  4408                           
  4409                           ;GPS.c: 105: if (i_buff >= 6)
  4410  00FF  3006               	movlw	6
  4411  0100  0246               	subwf	GPS_read_speed@i_buff,w
  4412  0101  1C03               	skipc
  4413  0102  28E1               	goto	l2983
  4414                           
  4415                           ;GPS.c: 106: return 0;
  4416  0103  3000               	movlw	0
  4417  0104  0008               	return
  4418  0105                     l3005:	
  4419                           
  4420                           ;GPS.c: 107: }
  4421                           ;GPS.c: 108: }
  4422                           ;GPS.c: 109: if ((buffer[0] != 'M')||(i_buff != 1))
  4423  0105  304D               	movlw	77
  4424  0106  063F               	xorwf	GPS_read_speed@buffer,w
  4425  0107  1903               	btfsc	3,2
  4426  0108  0346               	decf	GPS_read_speed@i_buff,w
  4427  0109  1903               	btfsc	3,2
  4428  010A  290D               	goto	l3013
  4429                           
  4430                           ;GPS.c: 110: return 0;
  4431  010B  3000               	movlw	0
  4432  010C  0008               	return
  4433  010D                     l3013:	
  4434                           
  4435                           ;GPS.c: 111: i_buff = 0;
  4436  010D  01C6               	clrf	GPS_read_speed@i_buff
  4437  010E                     l3015:	
  4438                           ;GPS.c: 114: while (1)
  4439                           
  4440                           
  4441                           ;GPS.c: 115: if (eusartRxCount!=0)
  4442  010E  0878               	movf	_eusartRxCount,w	;volatile
  4443  010F  1903               	btfsc	3,2
  4444  0110  290E               	goto	l3015
  4445                           
  4446                           ;GPS.c: 116: {
  4447                           ;GPS.c: 117: m_char=EUSART_Read();
  4448  0111  3186  26CF  3180   	fcall	_EUSART_Read
  4449  0114  0020               	movlb	0	; select bank0
  4450  0115  00B5               	movwf	??_GPS_read_speed
  4451  0116  0835               	movf	??_GPS_read_speed,w
  4452  0117  00C7               	movwf	GPS_read_speed@m_char
  4453                           
  4454                           ;GPS.c: 118: checksum ^= m_char;
  4455  0118  0847               	movf	GPS_read_speed@m_char,w
  4456  0119  00B5               	movwf	??_GPS_read_speed
  4457  011A  0835               	movf	??_GPS_read_speed,w
  4458  011B  06BE               	xorwf	GPS_read_speed@checksum,f
  4459                           
  4460                           ;GPS.c: 119: if (m_char == ',')
  4461  011C  302C               	movlw	44
  4462  011D  0647               	xorwf	GPS_read_speed@m_char,w
  4463  011E  1D03               	btfss	3,2
  4464  011F  290E               	goto	l3015
  4465  0120                     l3025:	
  4466                           ;GPS.c: 121: }
  4467                           ;GPS.c: 123: while (1)
  4468                           
  4469                           ;GPS.c: 120: break;
  4470                           
  4471                           
  4472                           ;GPS.c: 124: if (eusartRxCount!=0)
  4473  0120  0878               	movf	_eusartRxCount,w	;volatile
  4474  0121  1903               	btfsc	3,2
  4475  0122  2920               	goto	l3025
  4476                           
  4477                           ;GPS.c: 125: {
  4478                           ;GPS.c: 126: m_char=EUSART_Read();
  4479  0123  3186  26CF  3180   	fcall	_EUSART_Read
  4480  0126  0020               	movlb	0	; select bank0
  4481  0127  00B5               	movwf	??_GPS_read_speed
  4482  0128  0835               	movf	??_GPS_read_speed,w
  4483  0129  00C7               	movwf	GPS_read_speed@m_char
  4484                           
  4485                           ;GPS.c: 127: checksum ^= m_char;
  4486  012A  0847               	movf	GPS_read_speed@m_char,w
  4487  012B  00B5               	movwf	??_GPS_read_speed
  4488  012C  0835               	movf	??_GPS_read_speed,w
  4489  012D  06BE               	xorwf	GPS_read_speed@checksum,f
  4490                           
  4491                           ;GPS.c: 128: if (m_char == ',')
  4492  012E  302C               	movlw	44
  4493  012F  0647               	xorwf	GPS_read_speed@m_char,w
  4494  0130  1903               	btfsc	3,2
  4495  0131  2944               	goto	l3047
  4496                           
  4497                           ;GPS.c: 130: else
  4498                           ;GPS.c: 131: {
  4499                           ;GPS.c: 132: buffer[i_buff++] = m_char;
  4500                           
  4501                           ;GPS.c: 129: break;
  4502  0132  0847               	movf	GPS_read_speed@m_char,w
  4503  0133  00B5               	movwf	??_GPS_read_speed
  4504  0134  0846               	movf	GPS_read_speed@i_buff,w
  4505  0135  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4506  0136  0086               	movwf	6
  4507  0137  0187               	clrf	7
  4508  0138  0835               	movf	??_GPS_read_speed,w
  4509  0139  0081               	movwf	1
  4510  013A  3001               	movlw	1
  4511  013B  00B5               	movwf	??_GPS_read_speed
  4512  013C  0835               	movf	??_GPS_read_speed,w
  4513  013D  07C6               	addwf	GPS_read_speed@i_buff,f
  4514                           
  4515                           ;GPS.c: 133: if (i_buff >= 6)
  4516  013E  3006               	movlw	6
  4517  013F  0246               	subwf	GPS_read_speed@i_buff,w
  4518  0140  1C03               	skipc
  4519  0141  2920               	goto	l3025
  4520                           
  4521                           ;GPS.c: 134: return 0;
  4522  0142  3000               	movlw	0
  4523  0143  0008               	return
  4524  0144                     l3047:	
  4525                           
  4526                           ;GPS.c: 135: }
  4527                           ;GPS.c: 136: }
  4528                           ;GPS.c: 137: if ((buffer[0] != 'N')||(i_buff != 1))
  4529  0144  304E               	movlw	78
  4530  0145  063F               	xorwf	GPS_read_speed@buffer,w
  4531  0146  1903               	btfsc	3,2
  4532  0147  0346               	decf	GPS_read_speed@i_buff,w
  4533  0148  1903               	btfsc	3,2
  4534  0149  294C               	goto	l3055
  4535                           
  4536                           ;GPS.c: 138: return 0;
  4537  014A  3000               	movlw	0
  4538  014B  0008               	return
  4539  014C                     l3055:	
  4540                           
  4541                           ;GPS.c: 139: i_buff = 0;
  4542  014C  01C6               	clrf	GPS_read_speed@i_buff
  4543  014D                     l3057:	
  4544                           ;GPS.c: 142: while (1)
  4545                           
  4546                           
  4547                           ;GPS.c: 143: if (eusartRxCount!=0)
  4548  014D  0878               	movf	_eusartRxCount,w	;volatile
  4549  014E  1903               	btfsc	3,2
  4550  014F  294D               	goto	l3057
  4551                           
  4552                           ;GPS.c: 144: {
  4553                           ;GPS.c: 145: m_char=EUSART_Read();
  4554  0150  3186  26CF  3180   	fcall	_EUSART_Read
  4555  0153  0020               	movlb	0	; select bank0
  4556  0154  00B5               	movwf	??_GPS_read_speed
  4557  0155  0835               	movf	??_GPS_read_speed,w
  4558  0156  00C7               	movwf	GPS_read_speed@m_char
  4559                           
  4560                           ;GPS.c: 146: checksum ^= m_char;
  4561  0157  0847               	movf	GPS_read_speed@m_char,w
  4562  0158  00B5               	movwf	??_GPS_read_speed
  4563  0159  0835               	movf	??_GPS_read_speed,w
  4564  015A  06BE               	xorwf	GPS_read_speed@checksum,f
  4565                           
  4566                           ;GPS.c: 147: if (m_char == ',')
  4567  015B  302C               	movlw	44
  4568  015C  0647               	xorwf	GPS_read_speed@m_char,w
  4569  015D  1903               	btfsc	3,2
  4570  015E  2971               	goto	l3079
  4571                           
  4572                           ;GPS.c: 149: else
  4573                           ;GPS.c: 150: {
  4574                           ;GPS.c: 151: buffer[i_buff++] = m_char;
  4575                           
  4576                           ;GPS.c: 148: break;
  4577  015F  0847               	movf	GPS_read_speed@m_char,w
  4578  0160  00B5               	movwf	??_GPS_read_speed
  4579  0161  0846               	movf	GPS_read_speed@i_buff,w
  4580  0162  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4581  0163  0086               	movwf	6
  4582  0164  0187               	clrf	7
  4583  0165  0835               	movf	??_GPS_read_speed,w
  4584  0166  0081               	movwf	1
  4585  0167  3001               	movlw	1
  4586  0168  00B5               	movwf	??_GPS_read_speed
  4587  0169  0835               	movf	??_GPS_read_speed,w
  4588  016A  07C6               	addwf	GPS_read_speed@i_buff,f
  4589                           
  4590                           ;GPS.c: 152: if (i_buff >= 6)
  4591  016B  3006               	movlw	6
  4592  016C  0246               	subwf	GPS_read_speed@i_buff,w
  4593  016D  1C03               	skipc
  4594  016E  294D               	goto	l3057
  4595                           
  4596                           ;GPS.c: 153: return 0;
  4597  016F  3000               	movlw	0
  4598  0170  0008               	return
  4599  0171                     l3079:	
  4600                           
  4601                           ;GPS.c: 154: }
  4602                           ;GPS.c: 155: }
  4603                           ;GPS.c: 158: unsigned char i_buff2 = 0;
  4604  0171  01C5               	clrf	GPS_read_speed@i_buff2
  4605                           
  4606                           ;GPS.c: 159: unsigned short read_speed_int=0;
  4607  0172  01B9               	clrf	GPS_read_speed@read_speed_int
  4608  0173  01BA               	clrf	GPS_read_speed@read_speed_int+1
  4609                           
  4610                           ;GPS.c: 160: unsigned short read_speed_fra=0;
  4611  0174  01BB               	clrf	GPS_read_speed@read_speed_fra
  4612  0175  01BC               	clrf	GPS_read_speed@read_speed_fra+1
  4613                           
  4614                           ;GPS.c: 161: bool before_dot = 1;
  4615  0176  01B7               	clrf	GPS_read_speed@before_dot
  4616  0177  0AB7               	incf	GPS_read_speed@before_dot,f
  4617  0178                     l3107:	
  4618                           ;GPS.c: 162: while (i_buff2 < i_buff)
  4619                           
  4620  0178  0846               	movf	GPS_read_speed@i_buff,w
  4621  0179  0245               	subwf	GPS_read_speed@i_buff2,w
  4622  017A  1803               	btfsc	3,0
  4623  017B  29DB               	goto	l3109
  4624                           
  4625                           ;GPS.c: 163: if (buffer[i_buff2]=='.')
  4626  017C  0845               	movf	GPS_read_speed@i_buff2,w
  4627  017D  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4628  017E  0086               	movwf	6
  4629  017F  0187               	clrf	7
  4630  0180  302E               	movlw	46
  4631  0181  0601               	xorwf	1,w
  4632  0182  1D03               	btfss	3,2
  4633  0183  2986               	goto	l3089
  4634                           
  4635                           ;GPS.c: 164: {
  4636                           ;GPS.c: 165: before_dot = 0;
  4637  0184  01B7               	clrf	GPS_read_speed@before_dot
  4638  0185  29D6               	goto	l3105
  4639  0186                     l3089:	
  4640                           ;GPS.c: 167: }
  4641                           
  4642                           ;GPS.c: 166: i_buff2++;
  4643                           
  4644                           
  4645                           ;GPS.c: 168: else
  4646                           ;GPS.c: 169: {
  4647                           ;GPS.c: 170: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  4648  0186  0845               	movf	GPS_read_speed@i_buff2,w
  4649  0187  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4650  0188  0086               	movwf	6
  4651  0189  0187               	clrf	7
  4652  018A  3030               	movlw	48
  4653  018B  0201               	subwf	1,w
  4654  018C  1C03               	skipc
  4655  018D  2996               	goto	l3093
  4656  018E  0845               	movf	GPS_read_speed@i_buff2,w
  4657  018F  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4658  0190  0086               	movwf	6
  4659  0191  0187               	clrf	7
  4660  0192  303A               	movlw	58
  4661  0193  0201               	subwf	1,w
  4662  0194  1C03               	skipc
  4663  0195  2998               	goto	l3099
  4664  0196                     l3093:	
  4665                           
  4666                           ;GPS.c: 171: return 0;
  4667  0196  3000               	movlw	0
  4668  0197  0008               	return
  4669  0198                     l3099:	
  4670                           
  4671                           ;GPS.c: 172: else
  4672                           ;GPS.c: 173: {
  4673                           ;GPS.c: 174: if (before_dot)
  4674  0198  0837               	movf	GPS_read_speed@before_dot,w
  4675  0199  1903               	btfsc	3,2
  4676  019A  29B9               	goto	l3103
  4677                           
  4678                           ;GPS.c: 175: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  4679  019B  083A               	movf	GPS_read_speed@read_speed_int+1,w
  4680  019C  00A1               	movwf	___wmul@multiplier+1
  4681  019D  0839               	movf	GPS_read_speed@read_speed_int,w
  4682  019E  00A0               	movwf	___wmul@multiplier
  4683  019F  300A               	movlw	10
  4684  01A0  00A2               	movwf	___wmul@multiplicand
  4685  01A1  3000               	movlw	0
  4686  01A2  00A3               	movwf	___wmul@multiplicand+1
  4687  01A3  3187  2745  3180   	fcall	___wmul
  4688  01A6  0020               	movlb	0	; select bank0
  4689  01A7  0845               	movf	GPS_read_speed@i_buff2,w
  4690  01A8  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4691  01A9  0086               	movwf	6
  4692  01AA  0187               	clrf	7
  4693  01AB  0801               	movf	1,w
  4694  01AC  0720               	addwf	?___wmul,w
  4695  01AD  00B5               	movwf	??_GPS_read_speed
  4696  01AE  0821               	movf	?___wmul+1,w
  4697  01AF  1803               	skipnc
  4698  01B0  0A21               	incf	?___wmul+1,w
  4699  01B1  00B6               	movwf	??_GPS_read_speed+1
  4700  01B2  0835               	movf	??_GPS_read_speed,w
  4701  01B3  3ED0               	addlw	208
  4702  01B4  00B9               	movwf	GPS_read_speed@read_speed_int
  4703  01B5  30FF               	movlw	255
  4704  01B6  3D36               	addwfc	??_GPS_read_speed+1,w
  4705  01B7  00BA               	movwf	GPS_read_speed@read_speed_int+1
  4706  01B8  29D6               	goto	l3105
  4707  01B9                     l3103:	
  4708                           
  4709                           ;GPS.c: 176: else
  4710                           ;GPS.c: 177: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  4711  01B9  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  4712  01BA  00A1               	movwf	___wmul@multiplier+1
  4713  01BB  083B               	movf	GPS_read_speed@read_speed_fra,w
  4714  01BC  00A0               	movwf	___wmul@multiplier
  4715  01BD  300A               	movlw	10
  4716  01BE  00A2               	movwf	___wmul@multiplicand
  4717  01BF  3000               	movlw	0
  4718  01C0  00A3               	movwf	___wmul@multiplicand+1
  4719  01C1  3187  2745  3180   	fcall	___wmul
  4720  01C4  0020               	movlb	0	; select bank0
  4721  01C5  0845               	movf	GPS_read_speed@i_buff2,w
  4722  01C6  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4723  01C7  0086               	movwf	6
  4724  01C8  0187               	clrf	7
  4725  01C9  0801               	movf	1,w
  4726  01CA  0720               	addwf	?___wmul,w
  4727  01CB  00B5               	movwf	??_GPS_read_speed
  4728  01CC  0821               	movf	?___wmul+1,w
  4729  01CD  1803               	skipnc
  4730  01CE  0A21               	incf	?___wmul+1,w
  4731  01CF  00B6               	movwf	??_GPS_read_speed+1
  4732  01D0  0835               	movf	??_GPS_read_speed,w
  4733  01D1  3ED0               	addlw	208
  4734  01D2  00BB               	movwf	GPS_read_speed@read_speed_fra
  4735  01D3  30FF               	movlw	255
  4736  01D4  3D36               	addwfc	??_GPS_read_speed+1,w
  4737  01D5  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  4738  01D6                     l3105:	
  4739                           
  4740                           ;GPS.c: 178: i_buff2++;
  4741  01D6  3001               	movlw	1
  4742  01D7  00B5               	movwf	??_GPS_read_speed
  4743  01D8  0835               	movf	??_GPS_read_speed,w
  4744  01D9  07C5               	addwf	GPS_read_speed@i_buff2,f
  4745  01DA  2978               	goto	l3107
  4746  01DB                     l3109:	
  4747                           
  4748                           ;GPS.c: 179: }
  4749                           ;GPS.c: 180: }
  4750                           ;GPS.c: 184: read_speed_fra *= 100;
  4751  01DB  3064               	movlw	100
  4752  01DC  00A0               	movwf	___wmul@multiplier
  4753  01DD  3000               	movlw	0
  4754  01DE  00A1               	movwf	___wmul@multiplier+1
  4755  01DF  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  4756  01E0  00A3               	movwf	___wmul@multiplicand+1
  4757  01E1  083B               	movf	GPS_read_speed@read_speed_fra,w
  4758  01E2  00A2               	movwf	___wmul@multiplicand
  4759  01E3  3187  2745  3180   	fcall	___wmul
  4760  01E6  0020               	movlb	0	; select bank0
  4761  01E7  0821               	movf	?___wmul+1,w
  4762  01E8  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  4763  01E9  0820               	movf	?___wmul,w
  4764  01EA  00BB               	movwf	GPS_read_speed@read_speed_fra
  4765                           
  4766                           ;GPS.c: 187: i_buff = 0;
  4767  01EB  01C6               	clrf	GPS_read_speed@i_buff
  4768  01EC                     l3113:	
  4769                           ;GPS.c: 190: while (1)
  4770                           
  4771                           
  4772                           ;GPS.c: 191: if (eusartRxCount!=0)
  4773  01EC  0878               	movf	_eusartRxCount,w	;volatile
  4774  01ED  1903               	btfsc	3,2
  4775  01EE  29EC               	goto	l3113
  4776                           
  4777                           ;GPS.c: 192: {
  4778                           ;GPS.c: 193: m_char=EUSART_Read();
  4779  01EF  3186  26CF  3180   	fcall	_EUSART_Read
  4780  01F2  0020               	movlb	0	; select bank0
  4781  01F3  00B5               	movwf	??_GPS_read_speed
  4782  01F4  0835               	movf	??_GPS_read_speed,w
  4783  01F5  00C7               	movwf	GPS_read_speed@m_char
  4784                           
  4785                           ;GPS.c: 194: checksum ^= m_char;
  4786  01F6  0847               	movf	GPS_read_speed@m_char,w
  4787  01F7  00B5               	movwf	??_GPS_read_speed
  4788  01F8  0835               	movf	??_GPS_read_speed,w
  4789  01F9  06BE               	xorwf	GPS_read_speed@checksum,f
  4790                           
  4791                           ;GPS.c: 195: if (m_char == ',')
  4792  01FA  302C               	movlw	44
  4793  01FB  0647               	xorwf	GPS_read_speed@m_char,w
  4794  01FC  1903               	btfsc	3,2
  4795  01FD  2A10               	goto	l3135
  4796                           
  4797                           ;GPS.c: 197: else
  4798                           ;GPS.c: 198: {
  4799                           ;GPS.c: 199: buffer[i_buff++] = m_char;
  4800                           
  4801                           ;GPS.c: 196: break;
  4802  01FE  0847               	movf	GPS_read_speed@m_char,w
  4803  01FF  00B5               	movwf	??_GPS_read_speed
  4804  0200  0846               	movf	GPS_read_speed@i_buff,w
  4805  0201  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4806  0202  0086               	movwf	6
  4807  0203  0187               	clrf	7
  4808  0204  0835               	movf	??_GPS_read_speed,w
  4809  0205  0081               	movwf	1
  4810  0206  3001               	movlw	1
  4811  0207  00B5               	movwf	??_GPS_read_speed
  4812  0208  0835               	movf	??_GPS_read_speed,w
  4813  0209  07C6               	addwf	GPS_read_speed@i_buff,f
  4814                           
  4815                           ;GPS.c: 200: if (i_buff >= 6)
  4816  020A  3006               	movlw	6
  4817  020B  0246               	subwf	GPS_read_speed@i_buff,w
  4818  020C  1C03               	skipc
  4819  020D  29EC               	goto	l3113
  4820                           
  4821                           ;GPS.c: 201: return 0;
  4822  020E  3000               	movlw	0
  4823  020F  0008               	return
  4824  0210                     l3135:	
  4825                           
  4826                           ;GPS.c: 202: }
  4827                           ;GPS.c: 203: }
  4828                           ;GPS.c: 204: if ((buffer[0] != 'K')||(i_buff != 1))
  4829  0210  304B               	movlw	75
  4830  0211  063F               	xorwf	GPS_read_speed@buffer,w
  4831  0212  1903               	btfsc	3,2
  4832  0213  0346               	decf	GPS_read_speed@i_buff,w
  4833  0214  1903               	btfsc	3,2
  4834  0215  2A18               	goto	l3143
  4835                           
  4836                           ;GPS.c: 205: return 0;
  4837  0216  3000               	movlw	0
  4838  0217  0008               	return
  4839  0218                     l3143:	
  4840                           
  4841                           ;GPS.c: 206: i_buff = 0;
  4842  0218  01C6               	clrf	GPS_read_speed@i_buff
  4843                           
  4844                           ;GPS.c: 209: bool no_more_checksum = 0;
  4845  0219  01B8               	clrf	GPS_read_speed@no_more_checksum
  4846  021A                     l3145:	
  4847                           ;GPS.c: 210: while (1)
  4848                           
  4849                           
  4850                           ;GPS.c: 211: if (eusartRxCount!=0)
  4851  021A  0878               	movf	_eusartRxCount,w	;volatile
  4852  021B  1903               	btfsc	3,2
  4853  021C  2A1A               	goto	l3145
  4854                           
  4855                           ;GPS.c: 212: {
  4856                           ;GPS.c: 213: m_char=EUSART_Read();
  4857  021D  3186  26CF  3180   	fcall	_EUSART_Read
  4858  0220  0020               	movlb	0	; select bank0
  4859  0221  00B5               	movwf	??_GPS_read_speed
  4860  0222  0835               	movf	??_GPS_read_speed,w
  4861  0223  00C7               	movwf	GPS_read_speed@m_char
  4862                           
  4863                           ;GPS.c: 214: if (m_char == '*')
  4864  0224  302A               	movlw	42
  4865  0225  0647               	xorwf	GPS_read_speed@m_char,w
  4866  0226  1D03               	btfss	3,2
  4867  0227  2A2A               	goto	l3153
  4868                           
  4869                           ;GPS.c: 215: no_more_checksum = 1;
  4870  0228  01B8               	clrf	GPS_read_speed@no_more_checksum
  4871  0229  0AB8               	incf	GPS_read_speed@no_more_checksum,f
  4872  022A                     l3153:	
  4873                           
  4874                           ;GPS.c: 216: if (!no_more_checksum)
  4875  022A  0838               	movf	GPS_read_speed@no_more_checksum,w
  4876  022B  1D03               	btfss	3,2
  4877  022C  2A31               	goto	l536
  4878                           
  4879                           ;GPS.c: 217: checksum ^= m_char;
  4880  022D  0847               	movf	GPS_read_speed@m_char,w
  4881  022E  00B5               	movwf	??_GPS_read_speed
  4882  022F  0835               	movf	??_GPS_read_speed,w
  4883  0230  06BE               	xorwf	GPS_read_speed@checksum,f
  4884  0231                     l536:	
  4885                           
  4886                           ;GPS.c: 218: if (m_char == 0x0D)
  4887  0231  300D               	movlw	13
  4888  0232  0647               	xorwf	GPS_read_speed@m_char,w
  4889  0233  1903               	btfsc	3,2
  4890  0234  2A47               	goto	l3171
  4891                           
  4892                           ;GPS.c: 220: else
  4893                           ;GPS.c: 221: {
  4894                           ;GPS.c: 222: buffer[i_buff++] = m_char;
  4895                           
  4896                           ;GPS.c: 219: break;
  4897  0235  0847               	movf	GPS_read_speed@m_char,w
  4898  0236  00B5               	movwf	??_GPS_read_speed
  4899  0237  0846               	movf	GPS_read_speed@i_buff,w
  4900  0238  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4901  0239  0086               	movwf	6
  4902  023A  0187               	clrf	7
  4903  023B  0835               	movf	??_GPS_read_speed,w
  4904  023C  0081               	movwf	1
  4905  023D  3001               	movlw	1
  4906  023E  00B5               	movwf	??_GPS_read_speed
  4907  023F  0835               	movf	??_GPS_read_speed,w
  4908  0240  07C6               	addwf	GPS_read_speed@i_buff,f
  4909                           
  4910                           ;GPS.c: 223: if (i_buff >= 6)
  4911  0241  3006               	movlw	6
  4912  0242  0246               	subwf	GPS_read_speed@i_buff,w
  4913  0243  1C03               	skipc
  4914  0244  2A1A               	goto	l3145
  4915                           
  4916                           ;GPS.c: 224: return 0;
  4917  0245  3000               	movlw	0
  4918  0246  0008               	return
  4919  0247                     l3171:	
  4920                           
  4921                           ;GPS.c: 225: }
  4922                           ;GPS.c: 226: }
  4923                           ;GPS.c: 227: if ((buffer[1] != '*')||(i_buff != 4))
  4924  0247  302A               	movlw	42
  4925  0248  0640               	xorwf	GPS_read_speed@buffer+1,w
  4926  0249  1D03               	btfss	3,2
  4927  024A  2A4F               	goto	l3175
  4928  024B  3004               	movlw	4
  4929  024C  0646               	xorwf	GPS_read_speed@i_buff,w
  4930  024D  1903               	btfsc	3,2
  4931  024E  2A51               	goto	l3179
  4932  024F                     l3175:	
  4933                           
  4934                           ;GPS.c: 228: return 0;
  4935  024F  3000               	movlw	0
  4936  0250  0008               	return
  4937  0251                     l3179:	
  4938                           
  4939                           ;GPS.c: 231: unsigned char checksum2 = 0;
  4940  0251  01BD               	clrf	GPS_read_speed@checksum2
  4941                           
  4942                           ;GPS.c: 232: if (buffer[2] > 0x39)
  4943  0252  303A               	movlw	58
  4944  0253  0241               	subwf	GPS_read_speed@buffer+2,w
  4945  0254  1C03               	skipc
  4946  0255  2A59               	goto	l3185
  4947                           
  4948                           ;GPS.c: 233: checksum2 = buffer[2] - 0x37;
  4949  0256  0841               	movf	GPS_read_speed@buffer+2,w
  4950  0257  3EC9               	addlw	201
  4951  0258  2A5B               	goto	L2
  4952  0259                     l3185:	
  4953                           
  4954                           ;GPS.c: 234: else
  4955                           ;GPS.c: 235: checksum2 = buffer[2] - 0x30;
  4956  0259  0841               	movf	GPS_read_speed@buffer+2,w
  4957  025A  3ED0               	addlw	208
  4958  025B                     L2:	
  4959  025B  00B5               	movwf	??_GPS_read_speed
  4960  025C  0835               	movf	??_GPS_read_speed,w
  4961  025D  00BD               	movwf	GPS_read_speed@checksum2
  4962                           
  4963                           ;GPS.c: 236: checksum2 = checksum2 << 4;
  4964  025E  083D               	movf	GPS_read_speed@checksum2,w
  4965  025F  00B5               	movwf	??_GPS_read_speed
  4966  0260  3003               	movlw	3
  4967  0261                     u3715:	
  4968  0261  35B5               	lslf	??_GPS_read_speed,f
  4969  0262  3EFF               	addlw	-1
  4970  0263  1D03               	skipz
  4971  0264  2A61               	goto	u3715
  4972  0265  3535               	lslf	??_GPS_read_speed,w
  4973  0266  00B6               	movwf	??_GPS_read_speed+1
  4974  0267  0836               	movf	??_GPS_read_speed+1,w
  4975  0268  00BD               	movwf	GPS_read_speed@checksum2
  4976                           
  4977                           ;GPS.c: 237: if (buffer[3] > 0x39)
  4978  0269  303A               	movlw	58
  4979  026A  0242               	subwf	GPS_read_speed@buffer+3,w
  4980  026B  1C03               	skipc
  4981  026C  2A70               	goto	l3191
  4982                           
  4983                           ;GPS.c: 238: checksum2 += buffer[3] - 0x37;
  4984  026D  0842               	movf	GPS_read_speed@buffer+3,w
  4985  026E  3EC9               	addlw	201
  4986  026F  2A72               	goto	L3
  4987  0270                     l3191:	
  4988                           
  4989                           ;GPS.c: 239: else
  4990                           ;GPS.c: 240: checksum2 += buffer[3] - 0x30;
  4991  0270  0842               	movf	GPS_read_speed@buffer+3,w
  4992  0271  3ED0               	addlw	208
  4993  0272                     L3:	
  4994  0272  00B5               	movwf	??_GPS_read_speed
  4995  0273  0835               	movf	??_GPS_read_speed,w
  4996  0274  07BD               	addwf	GPS_read_speed@checksum2,f
  4997                           
  4998                           ;GPS.c: 241: if (checksum == checksum2)
  4999  0275  083E               	movf	GPS_read_speed@checksum,w
  5000  0276  063D               	xorwf	GPS_read_speed@checksum2,w
  5001  0277  1D03               	skipz
  5002  0278  2A8E               	goto	l3203
  5003                           
  5004                           ;GPS.c: 242: {
  5005                           ;GPS.c: 243: speed = convert_to_fp(read_speed_int, read_speed_fra);
  5006  0279  083A               	movf	GPS_read_speed@read_speed_int+1,w
  5007  027A  00A1               	movwf	convert_to_fp@int_part+1
  5008  027B  0839               	movf	GPS_read_speed@read_speed_int,w
  5009  027C  00A0               	movwf	convert_to_fp@int_part
  5010  027D  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  5011  027E  00A3               	movwf	convert_to_fp@fract_part+1
  5012  027F  083B               	movf	GPS_read_speed@read_speed_fra,w
  5013  0280  00A2               	movwf	convert_to_fp@fract_part
  5014  0281  3184  24B6         	fcall	_convert_to_fp
  5015  0283  0020               	movlb	0	; select bank0
  5016  0284  0823               	movf	?_convert_to_fp+3,w
  5017  0285  00E3               	movwf	_speed+3
  5018  0286  0822               	movf	?_convert_to_fp+2,w
  5019  0287  00E2               	movwf	_speed+2
  5020  0288  0821               	movf	?_convert_to_fp+1,w
  5021  0289  00E1               	movwf	_speed+1
  5022  028A  0820               	movf	?_convert_to_fp,w
  5023  028B  00E0               	movwf	_speed
  5024                           
  5025                           ;GPS.c: 244: return 1;
  5026  028C  3001               	movlw	1
  5027                           
  5028                           ;GPS.c: 245: }
  5029  028D  0008               	return
  5030  028E                     l3203:	
  5031                           
  5032                           ;GPS.c: 246: else
  5033                           ;GPS.c: 247: return 0;
  5034  028E  3000               	movlw	0
  5035  028F  0008               	return
  5036  0290                     __end_of_GPS_read_speed:	
  5037                           
  5038                           	psect	text14
  5039  04B6                     __ptext14:	
  5040 ;; *************** function _convert_to_fp *****************
  5041 ;; Defined at:
  5042 ;;		line 15 in file "fixed_point.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  int_part        2    0[BANK0 ] short 
  5045 ;;  fract_part      2    2[BANK0 ] short 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  i_bit           1   14[BANK0 ] unsigned char 
  5048 ;;  res             4   17[BANK0 ] long 
  5049 ;;  tmp_left        2   15[BANK0 ] unsigned short 
  5050 ;;  res_fract       2   12[BANK0 ] unsigned short 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  4    0[BANK0 ] long 
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5060 ;;      Params:         0       4       0       0       0       0
  5061 ;;      Locals:         0       9       0       0       0       0
  5062 ;;      Temps:          0       8       0       0       0       0
  5063 ;;      Totals:         0      21       0       0       0       0
  5064 ;;Total ram usage:       21 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    6
  5067 ;; This function calls:
  5068 ;;		Nothing
  5069 ;; This function is called by:
  5070 ;;		_GPS_read_speed
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _convert_to_fp
  5076  04B6                     _convert_to_fp:	
  5077                           
  5078                           ;fixed_point.c: 21: t_fp res = 0;
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  5082  04B6  3000               	movlw	0
  5083  04B7  0020               	movlb	0	; select bank0
  5084  04B8  00B4               	movwf	convert_to_fp@res+3
  5085  04B9  3000               	movlw	0
  5086  04BA  00B3               	movwf	convert_to_fp@res+2
  5087  04BB  3000               	movlw	0
  5088  04BC  00B2               	movwf	convert_to_fp@res+1
  5089  04BD  3000               	movlw	0
  5090  04BE  00B1               	movwf	convert_to_fp@res
  5091                           
  5092                           ;fixed_point.c: 23: res = int_part;
  5093  04BF  0820               	movf	convert_to_fp@int_part,w
  5094  04C0  00B1               	movwf	convert_to_fp@res
  5095  04C1  0821               	movf	convert_to_fp@int_part+1,w
  5096  04C2  00B2               	movwf	convert_to_fp@res+1
  5097  04C3  0D89               	rlf	9,f
  5098  04C4  3B89               	subwfb	9,f
  5099  04C5  0989               	comf	9,f
  5100  04C6  00B3               	movwf	convert_to_fp@res+2
  5101  04C7  00B4               	movwf	convert_to_fp@res+3
  5102                           
  5103                           ;fixed_point.c: 24: res = res << 16;
  5104  04C8  0831               	movf	convert_to_fp@res,w
  5105  04C9  00A4               	movwf	??_convert_to_fp
  5106  04CA  0832               	movf	convert_to_fp@res+1,w
  5107  04CB  00A5               	movwf	??_convert_to_fp+1
  5108  04CC  0833               	movf	convert_to_fp@res+2,w
  5109  04CD  00A6               	movwf	??_convert_to_fp+2
  5110  04CE  0834               	movf	convert_to_fp@res+3,w
  5111  04CF  00A7               	movwf	??_convert_to_fp+3
  5112  04D0  3010               	movlw	16
  5113  04D1                     u3015:	
  5114  04D1  35A4               	lslf	??_convert_to_fp,f
  5115  04D2  0DA5               	rlf	??_convert_to_fp+1,f
  5116  04D3  0DA6               	rlf	??_convert_to_fp+2,f
  5117  04D4  0DA7               	rlf	??_convert_to_fp+3,f
  5118  04D5  0B89               	decfsz	9,f
  5119  04D6  2CD1               	goto	u3015
  5120  04D7  0827               	movf	??_convert_to_fp+3,w
  5121  04D8  00B4               	movwf	convert_to_fp@res+3
  5122  04D9  0826               	movf	??_convert_to_fp+2,w
  5123  04DA  00B3               	movwf	convert_to_fp@res+2
  5124  04DB  0825               	movf	??_convert_to_fp+1,w
  5125  04DC  00B2               	movwf	convert_to_fp@res+1
  5126  04DD  0824               	movf	??_convert_to_fp,w
  5127  04DE  00B1               	movwf	convert_to_fp@res
  5128                           
  5129                           ;fixed_point.c: 26: unsigned short tmp_left = fract_part;
  5130  04DF  0823               	movf	convert_to_fp@fract_part+1,w
  5131  04E0  00B0               	movwf	convert_to_fp@tmp_left+1
  5132  04E1  0822               	movf	convert_to_fp@fract_part,w
  5133  04E2  00AF               	movwf	convert_to_fp@tmp_left
  5134                           
  5135                           ;fixed_point.c: 27: unsigned short res_fract = 0;
  5136  04E3  01AC               	clrf	convert_to_fp@res_fract
  5137  04E4  01AD               	clrf	convert_to_fp@res_fract+1
  5138                           
  5139                           ;fixed_point.c: 28: const unsigned short one = 1;
  5140                           ;fixed_point.c: 29: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  5141  04E5  01AE               	clrf	convert_to_fp@i_bit
  5142  04E6  3010               	movlw	16
  5143  04E7  022E               	subwf	convert_to_fp@i_bit,w
  5144  04E8  1803               	btfsc	3,0
  5145  04E9  2D1C               	goto	l330
  5146  04EA                     l2813:	
  5147                           
  5148                           ;fixed_point.c: 30: {
  5149                           ;fixed_point.c: 31: tmp_left = tmp_left << 1;
  5150  04EA  352F               	lslf	convert_to_fp@tmp_left,w
  5151  04EB  00AF               	movwf	convert_to_fp@tmp_left
  5152  04EC  0D30               	rlf	convert_to_fp@tmp_left+1,w
  5153  04ED  00B0               	movwf	convert_to_fp@tmp_left+1
  5154                           
  5155                           ;fixed_point.c: 32: if (tmp_left >= 10000)
  5156  04EE  3027               	movlw	39
  5157  04EF  0230               	subwf	convert_to_fp@tmp_left+1,w
  5158  04F0  3010               	movlw	16
  5159  04F1  1903               	skipnz
  5160  04F2  022F               	subwf	convert_to_fp@tmp_left,w
  5161  04F3  1C03               	skipc
  5162  04F4  2D14               	goto	l2819
  5163                           
  5164                           ;fixed_point.c: 33: {
  5165                           ;fixed_point.c: 34: res_fract = res_fract | one<<(16-i_bit-1);
  5166  04F5  30C9               	movlw	low (convert_to_fp@one| (0+32768))
  5167  04F6  0084               	movwf	4
  5168  04F7  3085               	movlw	high (convert_to_fp@one| (0+32768))
  5169  04F8  0085               	movwf	5
  5170  04F9  3F00               	moviw [0]fsr0
  5171  04FA  00A4               	movwf	??_convert_to_fp
  5172  04FB  3F01               	moviw [1]fsr0
  5173  04FC  00A5               	movwf	??_convert_to_fp+1
  5174  04FD  082E               	movf	convert_to_fp@i_bit,w
  5175  04FE  3E01               	addlw	1
  5176  04FF  3AFF               	xorlw	255
  5177  0500  3E01               	addlw	1
  5178  0501  3E10               	addlw	16
  5179  0502  0A89               	incf	9,f
  5180  0503  2D06               	goto	u3044
  5181  0504                     u3045:	
  5182  0504  35A4               	lslf	??_convert_to_fp,f
  5183  0505  0DA5               	rlf	??_convert_to_fp+1,f
  5184  0506                     u3044:	
  5185  0506  0B89               	decfsz	9,f
  5186  0507  2D04               	goto	u3045
  5187  0508  082C               	movf	convert_to_fp@res_fract,w
  5188  0509  0424               	iorwf	??_convert_to_fp,w
  5189  050A  00AC               	movwf	convert_to_fp@res_fract
  5190  050B  082D               	movf	convert_to_fp@res_fract+1,w
  5191  050C  0425               	iorwf	??_convert_to_fp+1,w
  5192  050D  00AD               	movwf	convert_to_fp@res_fract+1
  5193                           
  5194                           ;fixed_point.c: 35: tmp_left = tmp_left - 10000;
  5195  050E  082F               	movf	convert_to_fp@tmp_left,w
  5196  050F  3EF0               	addlw	240
  5197  0510  00AF               	movwf	convert_to_fp@tmp_left
  5198  0511  30D8               	movlw	216
  5199  0512  3D30               	addwfc	convert_to_fp@tmp_left+1,w
  5200  0513  00B0               	movwf	convert_to_fp@tmp_left+1
  5201  0514                     l2819:	
  5202  0514  3001               	movlw	1
  5203  0515  00A4               	movwf	??_convert_to_fp
  5204  0516  0824               	movf	??_convert_to_fp,w
  5205  0517  07AE               	addwf	convert_to_fp@i_bit,f
  5206  0518  3010               	movlw	16
  5207  0519  022E               	subwf	convert_to_fp@i_bit,w
  5208  051A  1C03               	skipc
  5209  051B  2CEA               	goto	l2813
  5210  051C                     l330:	
  5211                           
  5212                           ;fixed_point.c: 36: }
  5213                           ;fixed_point.c: 37: }
  5214                           ;fixed_point.c: 39: if (res < 0)
  5215  051C  1FB4               	btfss	convert_to_fp@res+3,7
  5216  051D  2D38               	goto	l2825
  5217                           
  5218                           ;fixed_point.c: 40: res = res - res_fract;
  5219  051E  0831               	movf	convert_to_fp@res,w
  5220  051F  00A4               	movwf	??_convert_to_fp
  5221  0520  0832               	movf	convert_to_fp@res+1,w
  5222  0521  00A5               	movwf	??_convert_to_fp+1
  5223  0522  0833               	movf	convert_to_fp@res+2,w
  5224  0523  00A6               	movwf	??_convert_to_fp+2
  5225  0524  0834               	movf	convert_to_fp@res+3,w
  5226  0525  00A7               	movwf	??_convert_to_fp+3
  5227  0526  082C               	movf	convert_to_fp@res_fract,w
  5228  0527  00A8               	movwf	??_convert_to_fp+4
  5229  0528  082D               	movf	convert_to_fp@res_fract+1,w
  5230  0529  00A9               	movwf	??_convert_to_fp+5
  5231  052A  01AA               	clrf	??_convert_to_fp+6
  5232  052B  01AB               	clrf	??_convert_to_fp+7
  5233  052C  09A8               	comf	??_convert_to_fp+4,f
  5234  052D  09A9               	comf	??_convert_to_fp+5,f
  5235  052E  09AA               	comf	??_convert_to_fp+6,f
  5236  052F  09AB               	comf	??_convert_to_fp+7,f
  5237  0530  0AA8               	incf	??_convert_to_fp+4,f
  5238  0531  1903               	skipnz
  5239  0532  0AA9               	incf	??_convert_to_fp+5,f
  5240  0533  1903               	skipnz
  5241  0534  0AAA               	incf	??_convert_to_fp+6,f
  5242  0535  1903               	skipnz
  5243  0536  0AAB               	incf	??_convert_to_fp+7,f
  5244  0537  2D46               	goto	L4
  5245  0538                     l2825:	
  5246                           
  5247                           ;fixed_point.c: 41: else
  5248                           ;fixed_point.c: 42: res = res + res_fract;
  5249  0538  0831               	movf	convert_to_fp@res,w
  5250  0539  00A4               	movwf	??_convert_to_fp
  5251  053A  0832               	movf	convert_to_fp@res+1,w
  5252  053B  00A5               	movwf	??_convert_to_fp+1
  5253  053C  0833               	movf	convert_to_fp@res+2,w
  5254  053D  00A6               	movwf	??_convert_to_fp+2
  5255  053E  0834               	movf	convert_to_fp@res+3,w
  5256  053F  00A7               	movwf	??_convert_to_fp+3
  5257  0540  082C               	movf	convert_to_fp@res_fract,w
  5258  0541  00A8               	movwf	??_convert_to_fp+4
  5259  0542  082D               	movf	convert_to_fp@res_fract+1,w
  5260  0543  00A9               	movwf	??_convert_to_fp+5
  5261  0544  01AA               	clrf	??_convert_to_fp+6
  5262  0545  01AB               	clrf	??_convert_to_fp+7
  5263  0546                     L4:	
  5264  0546  0828               	movf	??_convert_to_fp+4,w
  5265  0547  07A4               	addwf	??_convert_to_fp,f
  5266  0548  0829               	movf	??_convert_to_fp+5,w
  5267  0549  3DA5               	addwfc	??_convert_to_fp+1,f
  5268  054A  082A               	movf	??_convert_to_fp+6,w
  5269  054B  3DA6               	addwfc	??_convert_to_fp+2,f
  5270  054C  082B               	movf	??_convert_to_fp+7,w
  5271  054D  3DA7               	addwfc	??_convert_to_fp+3,f
  5272  054E  0827               	movf	??_convert_to_fp+3,w
  5273  054F  00B4               	movwf	convert_to_fp@res+3
  5274  0550  0826               	movf	??_convert_to_fp+2,w
  5275  0551  00B3               	movwf	convert_to_fp@res+2
  5276  0552  0825               	movf	??_convert_to_fp+1,w
  5277  0553  00B2               	movwf	convert_to_fp@res+1
  5278  0554  0824               	movf	??_convert_to_fp,w
  5279  0555  00B1               	movwf	convert_to_fp@res
  5280                           
  5281                           ;fixed_point.c: 43: return res;
  5282  0556  0834               	movf	convert_to_fp@res+3,w
  5283  0557  00A3               	movwf	?_convert_to_fp+3
  5284  0558  0833               	movf	convert_to_fp@res+2,w
  5285  0559  00A2               	movwf	?_convert_to_fp+2
  5286  055A  0832               	movf	convert_to_fp@res+1,w
  5287  055B  00A1               	movwf	?_convert_to_fp+1
  5288  055C  0831               	movf	convert_to_fp@res,w
  5289  055D  00A0               	movwf	?_convert_to_fp
  5290  055E  0008               	return
  5291  055F                     __end_of_convert_to_fp:	
  5292                           
  5293                           	psect	text15
  5294  0745                     __ptext15:	
  5295 ;; *************** function ___wmul *****************
  5296 ;; Defined at:
  5297 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5300 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  product         2    4[COMMON] unsigned int 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  2    0[BANK0 ] unsigned int 
  5305 ;; Registers used:
  5306 ;;		wreg, status,2, status,0
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5312 ;;      Params:         0       4       0       0       0       0
  5313 ;;      Locals:         2       0       0       0       0       0
  5314 ;;      Temps:          0       0       0       0       0       0
  5315 ;;      Totals:         2       4       0       0       0       0
  5316 ;;Total ram usage:        6 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    6
  5319 ;; This function calls:
  5320 ;;		Nothing
  5321 ;; This function is called by:
  5322 ;;		_GPS_read_speed
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           
  5327                           ;psect for function ___wmul
  5328  0745                     ___wmul:	
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5332  0745  01F4               	clrf	___wmul@product
  5333  0746  01F5               	clrf	___wmul@product+1
  5334  0747                     l2837:	
  5335  0747  0020               	movlb	0	; select bank0
  5336  0748  1C20               	btfss	___wmul@multiplier,0
  5337  0749  2F4E               	goto	l649
  5338  074A  0822               	movf	___wmul@multiplicand,w
  5339  074B  07F4               	addwf	___wmul@product,f
  5340  074C  0823               	movf	___wmul@multiplicand+1,w
  5341  074D  3DF5               	addwfc	___wmul@product+1,f
  5342  074E                     l649:	
  5343  074E  3001               	movlw	1
  5344  074F                     u3095:	
  5345  074F  35A2               	lslf	___wmul@multiplicand,f
  5346  0750  0DA3               	rlf	___wmul@multiplicand+1,f
  5347  0751  0B89               	decfsz	9,f
  5348  0752  2F4F               	goto	u3095
  5349  0753  3001               	movlw	1
  5350  0754                     u3105:	
  5351  0754  36A1               	lsrf	___wmul@multiplier+1,f
  5352  0755  0CA0               	rrf	___wmul@multiplier,f
  5353  0756  0B89               	decfsz	9,f
  5354  0757  2F54               	goto	u3105
  5355  0758  0820               	movf	___wmul@multiplier,w
  5356  0759  0421               	iorwf	___wmul@multiplier+1,w
  5357  075A  1D03               	btfss	3,2
  5358  075B  2F47               	goto	l2837
  5359  075C  0875               	movf	___wmul@product+1,w
  5360  075D  00A1               	movwf	?___wmul+1
  5361  075E  0874               	movf	___wmul@product,w
  5362  075F  00A0               	movwf	?___wmul
  5363  0760  0008               	return
  5364  0761                     __end_of___wmul:	
  5365                           
  5366                           	psect	text16
  5367  06CF                     __ptext16:	
  5368 ;; *************** function _EUSART_Read *****************
  5369 ;; Defined at:
  5370 ;;		line 112 in file "mcc_generated_files/eusart.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;  readValue       1    5[COMMON] unsigned char 
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  1    wreg      unsigned char 
  5377 ;; Registers used:
  5378 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5384 ;;      Params:         0       0       0       0       0       0
  5385 ;;      Locals:         1       0       0       0       0       0
  5386 ;;      Temps:          1       0       0       0       0       0
  5387 ;;      Totals:         2       0       0       0       0       0
  5388 ;;Total ram usage:        2 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    6
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		_GPS_read_speed
  5395 ;;		_getch
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function _EUSART_Read
  5401  06CF                     _EUSART_Read:	
  5402                           
  5403                           ;eusart.c: 114: uint8_t readValue = 0;
  5404                           
  5405                           ;incstack = 0
  5406                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5407  06CF  01F5               	clrf	EUSART_Read@readValue
  5408                           
  5409                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  5410  06D0  0023               	movlb	3	; select bank3
  5411  06D1  169D               	bsf	29,5	;volatile
  5412  06D2                     l2103:	
  5413                           ;eusart.c: 120: {
  5414                           
  5415                           ;eusart.c: 119: while(0 == eusartRxCount)
  5416                           
  5417  06D2  0878               	movf	_eusartRxCount,w	;volatile
  5418  06D3  1903               	btfsc	3,2
  5419  06D4  2ED2               	goto	l2103
  5420                           
  5421                           ;eusart.c: 121: }
  5422                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  5423  06D5  0021               	movlb	1	; select bank1
  5424  06D6  1291               	bcf	17,5	;volatile
  5425                           
  5426                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  5427  06D7  0020               	movlb	0	; select bank0
  5428  06D8  0869               	movf	_eusartRxTail,w
  5429  06D9  3ED1               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5430  06DA  0086               	movwf	6
  5431  06DB  0187               	clrf	7
  5432  06DC  0801               	movf	1,w
  5433  06DD  00F4               	movwf	??_EUSART_Read
  5434  06DE  0874               	movf	??_EUSART_Read,w
  5435  06DF  00F5               	movwf	EUSART_Read@readValue
  5436  06E0  3001               	movlw	1
  5437  06E1  00F4               	movwf	??_EUSART_Read
  5438  06E2  0874               	movf	??_EUSART_Read,w
  5439  06E3  07E9               	addwf	_eusartRxTail,f
  5440                           
  5441                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  5442  06E4  3008               	movlw	8
  5443  06E5  0269               	subwf	_eusartRxTail,w
  5444  06E6  1803               	btfsc	3,0
  5445                           
  5446                           ;eusart.c: 127: {
  5447                           ;eusart.c: 128: eusartRxTail = 0;
  5448  06E7  01E9               	clrf	_eusartRxTail
  5449                           
  5450                           ;eusart.c: 129: }
  5451                           ;eusart.c: 130: eusartRxCount--;
  5452  06E8  3001               	movlw	1
  5453  06E9  02F8               	subwf	_eusartRxCount,f	;volatile
  5454                           
  5455                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  5456  06EA  0021               	movlb	1	; select bank1
  5457  06EB  1691               	bsf	17,5	;volatile
  5458                           
  5459                           ;eusart.c: 133: return readValue;
  5460  06EC  0875               	movf	EUSART_Read@readValue,w
  5461  06ED  0008               	return
  5462  06EE                     __end_of_EUSART_Read:	
  5463                           
  5464                           	psect	text17
  5465  0611                     __ptext17:	
  5466 ;; *************** function _GPS_Initialize *****************
  5467 ;; Defined at:
  5468 ;;		line 12 in file "GPS.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  tmp             1   11[BANK0 ] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5482 ;;      Params:         0       0       0       0       0       0
  5483 ;;      Locals:         0       1       0       0       0       0
  5484 ;;      Temps:          0       3       0       0       0       0
  5485 ;;      Totals:         0       4       0       0       0       0
  5486 ;;Total ram usage:        4 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    9
  5489 ;; This function calls:
  5490 ;;		_printf
  5491 ;; This function is called by:
  5492 ;;		_main
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _GPS_Initialize
  5498  0611                     _GPS_Initialize:	
  5499                           
  5500                           ;GPS.c: 14: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(3200
      +                          0000/4000.0)));};
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5504  0611  0020               	movlb	0	; select bank0
  5505  0612  01AB               	clrf	GPS_Initialize@tmp
  5506  0613  300A               	movlw	10
  5507  0614  022B               	subwf	GPS_Initialize@tmp,w
  5508  0615  1803               	btfsc	3,0
  5509  0616  2E2C               	goto	l2879
  5510  0617                     l2873:	
  5511  0617  3005               	movlw	5
  5512  0618  00AA               	movwf	??_GPS_Initialize+2
  5513  0619  300F               	movlw	15
  5514  061A  00A9               	movwf	??_GPS_Initialize+1
  5515  061B  30F4               	movlw	244
  5516  061C  00A8               	movwf	??_GPS_Initialize
  5517  061D                     u4147:	
  5518  061D  0BA8               	decfsz	??_GPS_Initialize,f
  5519  061E  2E1D               	goto	u4147
  5520  061F  0BA9               	decfsz	??_GPS_Initialize+1,f
  5521  0620  2E1D               	goto	u4147
  5522  0621  0BAA               	decfsz	??_GPS_Initialize+2,f
  5523  0622  2E1D               	goto	u4147
  5524  0623  3001               	movlw	1
  5525  0624  0020               	movlb	0	; select bank0
  5526  0625  00A8               	movwf	??_GPS_Initialize
  5527  0626  0828               	movf	??_GPS_Initialize,w
  5528  0627  07AB               	addwf	GPS_Initialize@tmp,f
  5529  0628  300A               	movlw	10
  5530  0629  022B               	subwf	GPS_Initialize@tmp,w
  5531  062A  1C03               	skipc
  5532  062B  2E17               	goto	l2873
  5533  062C                     l2879:	
  5534                           
  5535                           ;GPS.c: 16: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  5536  062C  30CB               	movlw	low (STR_1| (0+32768))
  5537  062D  00A1               	movwf	printf@f
  5538  062E  3085               	movlw	high (STR_1| (0+32768))
  5539  062F  00A2               	movwf	printf@f+1
  5540  0630  3187  270B  3186   	fcall	_printf
  5541                           
  5542                           ;GPS.c: 17: _delay((unsigned long)((100)*(32000000/4000.0)));
  5543  0633  3005               	movlw	5
  5544  0634  0020               	movlb	0	; select bank0
  5545  0635  00AA               	movwf	??_GPS_Initialize+2
  5546  0636  300F               	movlw	15
  5547  0637  00A9               	movwf	??_GPS_Initialize+1
  5548  0638  30F4               	movlw	244
  5549  0639  00A8               	movwf	??_GPS_Initialize
  5550  063A                     u4157:	
  5551  063A  0BA8               	decfsz	??_GPS_Initialize,f
  5552  063B  2E3A               	goto	u4157
  5553  063C  0BA9               	decfsz	??_GPS_Initialize+1,f
  5554  063D  2E3A               	goto	u4157
  5555  063E  0BAA               	decfsz	??_GPS_Initialize+2,f
  5556  063F  2E3A               	goto	u4157
  5557                           
  5558                           ;GPS.c: 19: printf("$PMTK220,100*2F\r\n");
  5559  0640  30FF               	movlw	low (STR_2| (0+32768))
  5560  0641  0020               	movlb	0	; select bank0
  5561  0642  00A1               	movwf	printf@f
  5562  0643  3085               	movlw	high (STR_2| (0+32768))
  5563  0644  00A2               	movwf	printf@f+1
  5564  0645  3187  270B  3186   	fcall	_printf
  5565                           
  5566                           ;GPS.c: 20: _delay((unsigned long)((100)*(32000000/4000.0)));
  5567  0648  3005               	movlw	5
  5568  0649  0020               	movlb	0	; select bank0
  5569  064A  00AA               	movwf	??_GPS_Initialize+2
  5570  064B  300F               	movlw	15
  5571  064C  00A9               	movwf	??_GPS_Initialize+1
  5572  064D  30F4               	movlw	244
  5573  064E  00A8               	movwf	??_GPS_Initialize
  5574  064F                     u4167:	
  5575  064F  0BA8               	decfsz	??_GPS_Initialize,f
  5576  0650  2E4F               	goto	u4167
  5577  0651  0BA9               	decfsz	??_GPS_Initialize+1,f
  5578  0652  2E4F               	goto	u4167
  5579  0653  0BAA               	decfsz	??_GPS_Initialize+2,f
  5580  0654  2E4F               	goto	u4167
  5581  0655  0008               	return
  5582  0656                     __end_of_GPS_Initialize:	
  5583                           
  5584                           	psect	text18
  5585  070B                     __ptext18:	
  5586 ;; *************** function _printf *****************
  5587 ;; Defined at:
  5588 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  5591 ;;		 -> STR_2(18), STR_1(52), 
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;  tmpval          4    0        struct .
  5594 ;;  cp              2    0        PTR const unsigned char 
  5595 ;;  len             2    0        unsigned int 
  5596 ;;  val             2    0        unsigned int 
  5597 ;;  c               1    7[BANK0 ] char 
  5598 ;;  ap              1    6[BANK0 ] PTR void [1]
  5599 ;;		 -> ?_printf(2), 
  5600 ;;  flag            1    0        unsigned char 
  5601 ;;  prec            1    0        char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  2    1[BANK0 ] int 
  5604 ;; Registers used:
  5605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5611 ;;      Params:         0       2       0       0       0       0
  5612 ;;      Locals:         0       2       0       0       0       0
  5613 ;;      Temps:          0       3       0       0       0       0
  5614 ;;      Totals:         0       7       0       0       0       0
  5615 ;;Total ram usage:        7 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    8
  5618 ;; This function calls:
  5619 ;;		_putch
  5620 ;; This function is called by:
  5621 ;;		_GPS_Initialize
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           
  5626                           ;psect for function _printf
  5627  070B                     _printf:	
  5628                           
  5629                           ;doprnt.c: 466: va_list ap;
  5630                           ;doprnt.c: 499: signed char c;
  5631                           ;doprnt.c: 506: signed char prec;
  5632                           ;doprnt.c: 508: unsigned char flag;
  5633                           ;doprnt.c: 523: union {
  5634                           ;doprnt.c: 524: unsigned long vd;
  5635                           ;doprnt.c: 525: double integ;
  5636                           ;doprnt.c: 526: } tmpval;
  5637                           ;doprnt.c: 528: unsigned int val;
  5638                           ;doprnt.c: 529: unsigned len;
  5639                           ;doprnt.c: 530: const char * cp;
  5640                           ;doprnt.c: 533: *ap = __va_start();
  5641                           
  5642                           ;incstack = 0
  5643                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5644  070B  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5645  070C  0020               	movlb	0	; select bank0
  5646  070D  00A3               	movwf	??_printf
  5647  070E  0823               	movf	??_printf,w
  5648  070F  00A6               	movwf	printf@ap
  5649  0710                     l2833:	
  5650                           ;doprnt.c: 543: }
  5651                           ;doprnt.c: 1422: {
  5652                           
  5653                           ;doprnt.c: 542: continue;
  5654                           
  5655                           ;doprnt.c: 536: while(c = *f++) {
  5656                           
  5657  0710  0020               	movlb	0	; select bank0
  5658  0711  0822               	movf	printf@f+1,w
  5659  0712  00A4               	movwf	??_printf+1
  5660  0713  0821               	movf	printf@f,w
  5661  0714  00A3               	movwf	??_printf
  5662  0715  0AA1               	incf	printf@f,f
  5663  0716  1903               	skipnz
  5664  0717  0AA2               	incf	printf@f+1,f
  5665  0718  0823               	movf	??_printf,w
  5666  0719  0084               	movwf	4
  5667  071A  0824               	movf	??_printf+1,w
  5668  071B  0085               	movwf	5
  5669  071C  0800               	movf	0,w	;code access
  5670  071D  00A5               	movwf	??_printf+2
  5671  071E  0825               	movf	??_printf+2,w
  5672  071F  00A7               	movwf	printf@c
  5673  0720  0827               	movf	printf@c,w
  5674  0721  1903               	btfsc	3,2
  5675  0722  0008               	return
  5676                           
  5677                           ;doprnt.c: 540: {
  5678                           ;doprnt.c: 541: (putch(c) );
  5679  0723  0827               	movf	printf@c,w
  5680  0724  318F  27B1  3187   	fcall	_putch
  5681  0727  2F10               	goto	l2833
  5682  0728                     __end_of_printf:	
  5683                           ;doprnt.c: 1469: }
  5684                           ;doprnt.c: 1533: }
  5685                           ;doprnt.c: 1540: return 0;
  5686                           ;	Return value of _printf is never used
  5687                           
  5688                           
  5689                           	psect	text19
  5690  0FB1                     __ptext19:	
  5691 ;; *************** function _putch *****************
  5692 ;; Defined at:
  5693 ;;		line 164 in file "mcc_generated_files/eusart.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  txData          1    wreg     unsigned char 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  txData          1    0[BANK0 ] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5707 ;;      Params:         0       0       0       0       0       0
  5708 ;;      Locals:         0       1       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0
  5710 ;;      Totals:         0       1       0       0       0       0
  5711 ;;Total ram usage:        1 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    7
  5714 ;; This function calls:
  5715 ;;		_EUSART_Write
  5716 ;; This function is called by:
  5717 ;;		_printf
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           
  5722                           ;psect for function _putch
  5723  0FB1                     _putch:	
  5724                           
  5725                           ;incstack = 0
  5726                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5727                           ;putch@txData stored from wreg
  5728  0FB1  0020               	movlb	0	; select bank0
  5729  0FB2  00A0               	movwf	putch@txData
  5730                           
  5731                           ;eusart.c: 166: EUSART_Write(txData);
  5732  0FB3  0820               	movf	putch@txData,w
  5733  0FB4  3186  26AC         	fcall	_EUSART_Write
  5734  0FB6  0008               	return
  5735  0FB7                     __end_of_putch:	
  5736                           
  5737                           	psect	text20
  5738  06AC                     __ptext20:	
  5739 ;; *************** function _EUSART_Write *****************
  5740 ;; Defined at:
  5741 ;;		line 136 in file "mcc_generated_files/eusart.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  txData          1    wreg     unsigned char 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  txData          1    5[COMMON] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5755 ;;      Params:         0       0       0       0       0       0
  5756 ;;      Locals:         1       0       0       0       0       0
  5757 ;;      Temps:          1       0       0       0       0       0
  5758 ;;      Totals:         2       0       0       0       0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    6
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_putch
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _EUSART_Write
  5771  06AC                     _EUSART_Write:	
  5772                           
  5773                           ;incstack = 0
  5774                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5775                           ;EUSART_Write@txData stored from wreg
  5776  06AC  00F5               	movwf	EUSART_Write@txData
  5777  06AD                     l2769:	
  5778                           ;eusart.c: 139: {
  5779                           
  5780                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  5781                           
  5782  06AD  0020               	movlb	0	; select bank0
  5783  06AE  086A               	movf	_eusartTxBufferRemaining,w	;volatile
  5784  06AF  1903               	btfsc	3,2
  5785  06B0  2EAD               	goto	l2769
  5786                           
  5787                           ;eusart.c: 140: }
  5788                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  5789  06B1  0021               	movlb	1	; select bank1
  5790  06B2  1A11               	btfsc	17,4	;volatile
  5791  06B3  2EB8               	goto	l171
  5792                           
  5793                           ;eusart.c: 143: {
  5794                           ;eusart.c: 144: TXREG = txData;
  5795  06B4  0875               	movf	EUSART_Write@txData,w
  5796  06B5  0023               	movlb	3	; select bank3
  5797  06B6  009A               	movwf	26	;volatile
  5798                           
  5799                           ;eusart.c: 145: }
  5800  06B7  2ECC               	goto	l2783
  5801  06B8                     l171:	
  5802                           
  5803                           ;eusart.c: 146: else
  5804                           ;eusart.c: 147: {
  5805                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  5806  06B8  1211               	bcf	17,4	;volatile
  5807                           
  5808                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  5809  06B9  0875               	movf	EUSART_Write@txData,w
  5810  06BA  00F4               	movwf	??_EUSART_Write
  5811  06BB  0020               	movlb	0	; select bank0
  5812  06BC  086B               	movf	_eusartTxHead,w
  5813  06BD  3E51               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5814  06BE  0086               	movwf	6
  5815  06BF  0187               	clrf	7
  5816  06C0  0874               	movf	??_EUSART_Write,w
  5817  06C1  0081               	movwf	1
  5818  06C2  3001               	movlw	1
  5819  06C3  00F4               	movwf	??_EUSART_Write
  5820  06C4  0874               	movf	??_EUSART_Write,w
  5821  06C5  07EB               	addwf	_eusartTxHead,f
  5822                           
  5823                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5824  06C6  3008               	movlw	8
  5825  06C7  026B               	subwf	_eusartTxHead,w
  5826  06C8  1803               	btfsc	3,0
  5827                           
  5828                           ;eusart.c: 151: {
  5829                           ;eusart.c: 152: eusartTxHead = 0;
  5830  06C9  01EB               	clrf	_eusartTxHead
  5831                           
  5832                           ;eusart.c: 153: }
  5833                           ;eusart.c: 154: eusartTxBufferRemaining--;
  5834  06CA  3001               	movlw	1
  5835  06CB  02EA               	subwf	_eusartTxBufferRemaining,f	;volatile
  5836  06CC                     l2783:	
  5837                           
  5838                           ;eusart.c: 155: }
  5839                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  5840  06CC  0021               	movlb	1	; select bank1
  5841  06CD  1611               	bsf	17,4	;volatile
  5842  06CE  0008               	return
  5843  06CF                     __end_of_EUSART_Write:	
  5844                           
  5845                           	psect	text21
  5846  0761                     __ptext21:	
  5847 ;; *************** function _EPWM1_LoadDutyValue *****************
  5848 ;; Defined at:
  5849 ;;		line 90 in file "mcc_generated_files/epwm1.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;  dutyValue       2    4[COMMON] unsigned int 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;		None
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5863 ;;      Params:         2       0       0       0       0       0
  5864 ;;      Locals:         0       0       0       0       0       0
  5865 ;;      Temps:          0       2       0       0       0       0
  5866 ;;      Totals:         2       2       0       0       0       0
  5867 ;;Total ram usage:        4 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    6
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_main
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           
  5878                           ;psect for function _EPWM1_LoadDutyValue
  5879  0761                     _EPWM1_LoadDutyValue:	
  5880                           
  5881                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _EPWM1_LoadDutyValue: [wreg+status,2+status,0]
  5885  0761  0875               	movf	EPWM1_LoadDutyValue@dutyValue+1,w
  5886  0762  0020               	movlb	0	; select bank0
  5887  0763  00A1               	movwf	??_EPWM1_LoadDutyValue+1
  5888  0764  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5889  0765  00A0               	movwf	??_EPWM1_LoadDutyValue
  5890  0766  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5891  0767  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5892  0768  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5893  0769  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5894  076A  0820               	movf	??_EPWM1_LoadDutyValue,w
  5895  076B  0025               	movlb	5	; select bank5
  5896  076C  0091               	movwf	17	;volatile
  5897                           
  5898                           ;epwm1.c: 96: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5899  076D  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5900  076E  3903               	andlw	3
  5901  076F  0020               	movlb	0	; select bank0
  5902  0770  00A0               	movwf	??_EPWM1_LoadDutyValue
  5903  0771  3004               	movlw	4
  5904  0772                     u3165:	
  5905  0772  35A0               	lslf	??_EPWM1_LoadDutyValue,f
  5906  0773  0B89               	decfsz	9,f
  5907  0774  2F72               	goto	u3165
  5908  0775  0025               	movlb	5	; select bank5
  5909  0776  0813               	movf	19,w	;volatile
  5910  0777  39CF               	andlw	207
  5911  0778  0020               	movlb	0	; select bank0
  5912  0779  0420               	iorwf	??_EPWM1_LoadDutyValue,w
  5913  077A  0025               	movlb	5	; select bank5
  5914  077B  0093               	movwf	19	;volatile
  5915  077C  0008               	return
  5916  077D                     __end_of_EPWM1_LoadDutyValue:	
  5917                           
  5918                           	psect	intentry
  5919  0004                     __pintentry:	
  5920 ;; *************** function _INTERRUPT_InterruptManager *****************
  5921 ;; Defined at:
  5922 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5936 ;;      Params:         0       0       0       0       0       0
  5937 ;;      Locals:         0       0       0       0       0       0
  5938 ;;      Temps:          1       0       0       0       0       0
  5939 ;;      Totals:         1       0       0       0       0       0
  5940 ;;Total ram usage:        1 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    5
  5943 ;; This function calls:
  5944 ;;		_EUSART_Receive_ISR
  5945 ;;		_EUSART_Transmit_ISR
  5946 ;;		_TMR0_ISR
  5947 ;; This function is called by:
  5948 ;;		Interrupt level 1
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952  0004                     _INTERRUPT_InterruptManager:	
  5953                           
  5954                           ;incstack = 0
  5955  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5956                           
  5957                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5958  0005  3180               	pagesel	$
  5959  0006  0020               	movlb	0	; select bank0
  5960  0007  087F               	movf	127,w
  5961  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  5962                           
  5963                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5964  0009  1A8B               	btfsc	11,5	;volatile
  5965  000A  1D0B               	btfss	11,2	;volatile
  5966  000B  280F               	goto	i1l2587
  5967                           
  5968                           ;interrupt_manager.c: 55: {
  5969                           ;interrupt_manager.c: 56: TMR0_ISR();
  5970  000C  3187  27DF  3180   	fcall	_TMR0_ISR
  5971  000F                     i1l2587:	
  5972                           
  5973                           ;interrupt_manager.c: 57: }
  5974                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  5975  000F  1F0B               	btfss	11,6	;volatile
  5976  0010  281A               	goto	i1l2595
  5977  0011  0021               	movlb	1	; select bank1
  5978  0012  1E11               	btfss	17,4	;volatile
  5979  0013  281A               	goto	i1l2595
  5980  0014  0020               	movlb	0	; select bank0
  5981  0015  1E11               	btfss	17,4	;volatile
  5982  0016  281A               	goto	i1l2595
  5983                           
  5984                           ;interrupt_manager.c: 59: {
  5985                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  5986  0017  3187  2728  3180   	fcall	_EUSART_Transmit_ISR
  5987  001A                     i1l2595:	
  5988                           
  5989                           ;interrupt_manager.c: 61: }
  5990                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  5991  001A  1F0B               	btfss	11,6	;volatile
  5992  001B  2824               	goto	i1l77
  5993  001C  0021               	movlb	1	; select bank1
  5994  001D  1E91               	btfss	17,5	;volatile
  5995  001E  2824               	goto	i1l77
  5996  001F  0020               	movlb	0	; select bank0
  5997  0020  1E91               	btfss	17,5	;volatile
  5998  0021  2824               	goto	i1l77
  5999                           
  6000                           ;interrupt_manager.c: 63: {
  6001                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  6002  0022  3187  2798         	fcall	_EUSART_Receive_ISR
  6003  0024                     i1l77:	
  6004                           ;interrupt_manager.c: 66: else
  6005                           ;interrupt_manager.c: 67: {
  6006                           
  6007                           ;interrupt_manager.c: 65: }
  6008                           
  6009  0024  0873               	movf	??_INTERRUPT_InterruptManager,w
  6010  0025  0020               	movlb	0	; select bank0
  6011  0026  00FF               	movwf	127
  6012  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6013  0028  0009               	retfie
  6014  0029                     __end_of_INTERRUPT_InterruptManager:	
  6015                           
  6016                           	psect	text23
  6017  07DF                     __ptext23:	
  6018 ;; *************** function _TMR0_ISR *****************
  6019 ;; Defined at:
  6020 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;		None
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;		None
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		wreg, status,2, status,0, pclath, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6034 ;;      Params:         0       0       0       0       0       0
  6035 ;;      Locals:         0       0       0       0       0       0
  6036 ;;      Temps:          0       0       0       0       0       0
  6037 ;;      Totals:         0       0       0       0       0       0
  6038 ;;Total ram usage:        0 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    4
  6041 ;; This function calls:
  6042 ;;		_TMR0_CallBack
  6043 ;; This function is called by:
  6044 ;;		_INTERRUPT_InterruptManager
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function _TMR0_ISR
  6050  07DF                     _TMR0_ISR:	
  6051                           
  6052                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  6053                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  6054                           
  6055                           ;incstack = 0
  6056                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  6057  07DF  110B               	bcf	11,2	;volatile
  6058                           
  6059                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  6060  07E0  0879               	movf	_timer0ReloadVal,w	;volatile
  6061  07E1  0020               	movlb	0	; select bank0
  6062  07E2  0095               	movwf	21	;volatile
  6063                           
  6064                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  6065  07E3  3001               	movlw	1
  6066  07E4  07E4               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  6067  07E5  3000               	movlw	0
  6068  07E6  3DE5               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  6069  07E7  3000               	movlw	0
  6070  07E8  0265               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  6071  07E9  3002               	movlw	2
  6072  07EA  1903               	skipnz
  6073  07EB  0264               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  6074  07EC  1C03               	skipc
  6075  07ED  0008               	return
  6076                           
  6077                           ;tmr0.c: 119: {
  6078                           ;tmr0.c: 121: TMR0_CallBack();
  6079  07EE  318F  27D5         	fcall	_TMR0_CallBack
  6080                           
  6081                           ;tmr0.c: 124: CountCallBack = 0;
  6082  07F0  0020               	movlb	0	; select bank0
  6083  07F1  01E4               	clrf	TMR0_ISR@CountCallBack	;volatile
  6084  07F2  01E5               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  6085  07F3  0008               	return
  6086  07F4                     __end_of_TMR0_ISR:	
  6087                           
  6088                           	psect	text24
  6089  0FD5                     __ptext24:	
  6090 ;; *************** function _TMR0_CallBack *****************
  6091 ;; Defined at:
  6092 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, status,0, pclath, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6106 ;;      Params:         0       0       0       0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0
  6109 ;;      Totals:         0       0       0       0       0       0
  6110 ;;Total ram usage:        0 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    3
  6113 ;; This function calls:
  6114 ;;		Absolute function
  6115 ;;		_TMR0_DefaultInterruptHandler
  6116 ;;		_my10msTimerISR
  6117 ;; This function is called by:
  6118 ;;		_TMR0_ISR
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           
  6123                           ;psect for function _TMR0_CallBack
  6124  0FD5                     _TMR0_CallBack:	
  6125                           
  6126                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  6127                           
  6128                           ;incstack = 0
  6129                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6130  0FD5  0020               	movlb	0	; select bank0
  6131  0FD6  0866               	movf	_TMR0_InterruptHandler,w
  6132  0FD7  0467               	iorwf	_TMR0_InterruptHandler+1,w
  6133  0FD8  1903               	btfsc	3,2
  6134  0FD9  0008               	return
  6135                           
  6136                           ;tmr0.c: 135: {
  6137                           ;tmr0.c: 136: TMR0_InterruptHandler();
  6138  0FDA  0867               	movf	_TMR0_InterruptHandler+1,w
  6139  0FDB  008A               	movwf	10
  6140  0FDC  0866               	movf	_TMR0_InterruptHandler,w
  6141  0FDD  000A               	callw
  6142  0FDE  318F               	pagesel	$
  6143  0FDF  0008               	return
  6144  0FE0                     __end_of_TMR0_CallBack:	
  6145                           
  6146                           	psect	text25
  6147  0003                     __ptext25:	
  6148 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6149 ;; Defined at:
  6150 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		None
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6164 ;;      Params:         0       0       0       0       0       0
  6165 ;;      Locals:         0       0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0
  6167 ;;      Totals:         0       0       0       0       0       0
  6168 ;;Total ram usage:        0 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_TMR0_Initialize
  6174 ;;		_TMR0_CallBack
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           
  6179                           ;psect for function _TMR0_DefaultInterruptHandler
  6180  0003                     _TMR0_DefaultInterruptHandler:	
  6181                           
  6182                           ;incstack = 0
  6183                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  6184  0003  0008               	return
  6185  0004                     __end_of_TMR0_DefaultInterruptHandler:	
  6186                           
  6187                           	psect	text26
  6188  0FAB                     __ptext26:	
  6189 ;; *************** function _my10msTimerISR *****************
  6190 ;; Defined at:
  6191 ;;		line 194 in file "main.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0, pclath, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6205 ;;      Params:         0       0       0       0       0       0
  6206 ;;      Locals:         0       0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0       0
  6208 ;;      Totals:         0       0       0       0       0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    2
  6212 ;; This function calls:
  6213 ;;		_LED_update_loop
  6214 ;;		_button_update_loop
  6215 ;; This function is called by:
  6216 ;;		_main
  6217 ;;		_TMR0_CallBack
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _my10msTimerISR
  6223  0FAB                     _my10msTimerISR:	
  6224                           
  6225                           ;main.c: 196: LED_update_loop();
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  6229  0FAB  3186  2686  318F   	fcall	_LED_update_loop
  6230                           
  6231                           ;main.c: 197: button_update_loop();
  6232  0FAE  3185  255F         	fcall	_button_update_loop
  6233  0FB0  0008               	return
  6234  0FB1                     __end_of_my10msTimerISR:	
  6235                           
  6236                           	psect	text27
  6237  055F                     __ptext27:	
  6238 ;; *************** function _button_update_loop *****************
  6239 ;; Defined at:
  6240 ;;		line 74 in file "interact.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;		None
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  current_stat    1    2[COMMON] unsigned char 
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  1    wreg      void 
  6247 ;; Registers used:
  6248 ;;		wreg, status,2, status,0, pclath, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6254 ;;      Params:         0       0       0       0       0       0
  6255 ;;      Locals:         1       0       0       0       0       0
  6256 ;;      Temps:          1       0       0       0       0       0
  6257 ;;      Totals:         2       0       0       0       0       0
  6258 ;;Total ram usage:        2 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    1
  6261 ;; This function calls:
  6262 ;;		_get_button_state
  6263 ;; This function is called by:
  6264 ;;		_my10msTimerISR
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _button_update_loop
  6270  055F                     _button_update_loop:	
  6271                           
  6272                           ;interact.c: 76: unsigned char current_state = get_button_state();
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  6276  055F  3187  27F4  3185   	fcall	_get_button_state
  6277  0562  00F1               	movwf	??_button_update_loop
  6278  0563  0871               	movf	??_button_update_loop,w
  6279  0564  00F2               	movwf	button_update_loop@current_state
  6280                           
  6281                           ;interact.c: 77: if (!m_button.push_confirmed)
  6282  0565  0020               	movlb	0	; select bank0
  6283  0566  085C               	movf	_m_button+3,w	;volatile
  6284  0567  1D03               	btfss	3,2
  6285  0568  2D83               	goto	i1l1987
  6286                           
  6287                           ;interact.c: 78: {
  6288                           ;interact.c: 80: if (current_state != m_button.last_state)
  6289  0569  085E               	movf	_m_button+5,w	;volatile
  6290  056A  0672               	xorwf	button_update_loop@current_state,w
  6291  056B  1903               	skipnz
  6292  056C  2D73               	goto	i1l1979
  6293                           
  6294                           ;interact.c: 81: {
  6295                           ;interact.c: 82: m_button.count_pressed = 0;
  6296  056D  01DA               	clrf	_m_button+1	;volatile
  6297                           
  6298                           ;interact.c: 83: m_button.last_state = current_state;
  6299  056E  0872               	movf	button_update_loop@current_state,w
  6300  056F  00F1               	movwf	??_button_update_loop
  6301  0570  0871               	movf	??_button_update_loop,w
  6302  0571  00DE               	movwf	_m_button+5	;volatile
  6303                           
  6304                           ;interact.c: 84: }
  6305  0572  0008               	return
  6306  0573                     i1l1979:	
  6307                           
  6308                           ;interact.c: 85: else if (m_button.last_state == 1)
  6309  0573  035E               	decf	_m_button+5,w	;volatile
  6310  0574  1D03               	btfss	3,2
  6311  0575  0008               	return
  6312                           
  6313                           ;interact.c: 86: {
  6314                           ;interact.c: 87: m_button.count_pressed++;
  6315  0576  3001               	movlw	1
  6316  0577  00F1               	movwf	??_button_update_loop
  6317  0578  0871               	movf	??_button_update_loop,w
  6318  0579  07DA               	addwf	_m_button+1,f	;volatile
  6319                           
  6320                           ;interact.c: 88: if (m_button.count_pressed > 5)
  6321  057A  3006               	movlw	6
  6322  057B  025A               	subwf	_m_button+1,w	;volatile
  6323  057C  1C03               	skipc
  6324  057D  0008               	return
  6325                           
  6326                           ;interact.c: 89: m_button.push_confirmed = 1;
  6327  057E  3001               	movlw	1
  6328  057F  00F1               	movwf	??_button_update_loop
  6329  0580  0871               	movf	??_button_update_loop,w
  6330  0581  00DC               	movwf	_m_button+3	;volatile
  6331                           
  6332                           ;interact.c: 90: }
  6333                           ;interact.c: 91: }
  6334  0582  0008               	return
  6335  0583                     i1l1987:	
  6336                           
  6337                           ;interact.c: 92: else
  6338                           ;interact.c: 93: {
  6339                           ;interact.c: 94: if (current_state != m_button.last_state)
  6340  0583  085E               	movf	_m_button+5,w	;volatile
  6341  0584  0672               	xorwf	button_update_loop@current_state,w
  6342  0585  1903               	skipnz
  6343  0586  2D91               	goto	i1l1995
  6344                           
  6345                           ;interact.c: 95: {
  6346                           ;interact.c: 96: m_button.count_released = 0;
  6347  0587  01DB               	clrf	_m_button+2	;volatile
  6348                           
  6349                           ;interact.c: 97: m_button.last_state = current_state;
  6350  0588  0872               	movf	button_update_loop@current_state,w
  6351  0589  00F1               	movwf	??_button_update_loop
  6352  058A  0871               	movf	??_button_update_loop,w
  6353  058B  00DE               	movwf	_m_button+5	;volatile
  6354                           
  6355                           ;interact.c: 98: m_button.has_once_been_released = 1;
  6356  058C  3001               	movlw	1
  6357  058D  00F1               	movwf	??_button_update_loop
  6358  058E  0871               	movf	??_button_update_loop,w
  6359  058F  00DF               	movwf	_m_button+6	;volatile
  6360                           
  6361                           ;interact.c: 99: }
  6362  0590  0008               	return
  6363  0591                     i1l1995:	
  6364                           
  6365                           ;interact.c: 100: else if ((m_button.last_state == 1)&&(!m_button.has_once_been_released
      +                          ))
  6366  0591  035E               	decf	_m_button+5,w	;volatile
  6367  0592  1D03               	btfss	3,2
  6368  0593  2DA4               	goto	i1l2005
  6369  0594  085F               	movf	_m_button+6,w	;volatile
  6370  0595  1D03               	btfss	3,2
  6371  0596  2DA4               	goto	i1l2005
  6372                           
  6373                           ;interact.c: 101: {
  6374                           ;interact.c: 102: m_button.count_pressed++;
  6375  0597  3001               	movlw	1
  6376  0598  00F1               	movwf	??_button_update_loop
  6377  0599  0871               	movf	??_button_update_loop,w
  6378  059A  07DA               	addwf	_m_button+1,f	;volatile
  6379                           
  6380                           ;interact.c: 103: if (m_button.count_pressed >= 100)
  6381  059B  3064               	movlw	100
  6382  059C  025A               	subwf	_m_button+1,w	;volatile
  6383  059D  1C03               	skipc
  6384  059E  0008               	return
  6385                           
  6386                           ;interact.c: 104: m_button.confirmed_state = long_push;
  6387  059F  3002               	movlw	2
  6388  05A0  00F1               	movwf	??_button_update_loop
  6389  05A1  0871               	movf	??_button_update_loop,w
  6390  05A2  00D9               	movwf	_m_button	;volatile
  6391                           
  6392                           ;interact.c: 105: }
  6393  05A3  0008               	return
  6394  05A4                     i1l2005:	
  6395                           
  6396                           ;interact.c: 106: else if (m_button.last_state == 0)
  6397  05A4  085E               	movf	_m_button+5,w	;volatile
  6398  05A5  1D03               	btfss	3,2
  6399  05A6  0008               	return
  6400                           
  6401                           ;interact.c: 107: {
  6402                           ;interact.c: 108: m_button.count_released++;
  6403  05A7  3001               	movlw	1
  6404  05A8  00F1               	movwf	??_button_update_loop
  6405  05A9  0871               	movf	??_button_update_loop,w
  6406  05AA  07DB               	addwf	_m_button+2,f	;volatile
  6407                           
  6408                           ;interact.c: 109: if (m_button.count_released > 10)
  6409  05AB  300B               	movlw	11
  6410  05AC  025B               	subwf	_m_button+2,w	;volatile
  6411  05AD  1C03               	skipc
  6412  05AE  0008               	return
  6413                           
  6414                           ;interact.c: 110: if (m_button.count_pressed >= 75)
  6415  05AF  304B               	movlw	75
  6416  05B0  025A               	subwf	_m_button+1,w	;volatile
  6417  05B1  1C03               	skipc
  6418  05B2  2DB8               	goto	i1l2015
  6419                           
  6420                           ;interact.c: 111: m_button.confirmed_state = long_push;
  6421  05B3  3002               	movlw	2
  6422  05B4  00F1               	movwf	??_button_update_loop
  6423  05B5  0871               	movf	??_button_update_loop,w
  6424  05B6  00D9               	movwf	_m_button	;volatile
  6425  05B7  0008               	return
  6426  05B8                     i1l2015:	
  6427                           
  6428                           ;interact.c: 112: else
  6429                           ;interact.c: 113: m_button.confirmed_state = short_push;
  6430  05B8  3001               	movlw	1
  6431  05B9  00F1               	movwf	??_button_update_loop
  6432  05BA  0871               	movf	??_button_update_loop,w
  6433  05BB  00D9               	movwf	_m_button	;volatile
  6434  05BC  0008               	return
  6435  05BD                     __end_of_button_update_loop:	
  6436                           
  6437                           	psect	text28
  6438  07F4                     __ptext28:	
  6439 ;; *************** function _get_button_state *****************
  6440 ;; Defined at:
  6441 ;;		line 54 in file "interact.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  state           1    0[COMMON] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      unsigned char 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6455 ;;      Params:         0       0       0       0       0       0
  6456 ;;      Locals:         1       0       0       0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0
  6458 ;;      Totals:         1       0       0       0       0       0
  6459 ;;Total ram usage:        1 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_button_update_loop
  6465 ;;		_button_init
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _get_button_state
  6471  07F4                     _get_button_state:	
  6472                           
  6473                           ;interact.c: 57: unsigned char state = PORTBbits.RB0;
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  6477  07F4  3000               	movlw	0
  6478  07F5  0020               	movlb	0	; select bank0
  6479  07F6  180D               	btfsc	13,0	;volatile
  6480  07F7  3001               	movlw	1
  6481  07F8  00F0               	movwf	get_button_state@state
  6482                           
  6483                           ;interact.c: 58: if (state == 1)
  6484  07F9  0370               	decf	get_button_state@state,w
  6485  07FA  1D03               	btfss	3,2
  6486  07FB  2FFE               	goto	i1l1921
  6487                           
  6488                           ;interact.c: 59: return 0;
  6489  07FC  3000               	movlw	0
  6490  07FD  0008               	return
  6491  07FE                     i1l1921:	
  6492                           
  6493                           ;interact.c: 60: else return 1;
  6494  07FE  3001               	movlw	1
  6495  07FF  0008               	return
  6496  0800                     __end_of_get_button_state:	
  6497                           
  6498                           	psect	text29
  6499  0686                     __ptext29:	
  6500 ;; *************** function _LED_update_loop *****************
  6501 ;; Defined at:
  6502 ;;		line 26 in file "interact.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1    wreg      void 
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, status,0
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6516 ;;      Params:         0       0       0       0       0       0
  6517 ;;      Locals:         0       0       0       0       0       0
  6518 ;;      Temps:          1       0       0       0       0       0
  6519 ;;      Totals:         1       0       0       0       0       0
  6520 ;;Total ram usage:        1 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_my10msTimerISR
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _LED_update_loop
  6531  0686                     _LED_update_loop:	
  6532                           
  6533                           ;interact.c: 28: if (m_LED.state == manual_mode)
  6534                           
  6535                           ;incstack = 0
  6536                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  6537  0686  3004               	movlw	4
  6538  0687  0676               	xorwf	_m_LED,w	;volatile
  6539  0688  1903               	btfsc	3,2
  6540  0689  0008               	return
  6541                           
  6542                           ;interact.c: 30: else if (m_LED.state == slow_blinking)
  6543                           
  6544                           ;interact.c: 29: return;
  6545  068A  3002               	movlw	2
  6546  068B  0676               	xorwf	_m_LED,w	;volatile
  6547  068C  1D03               	btfss	3,2
  6548  068D  2E9B               	goto	i1l1959
  6549                           
  6550                           ;interact.c: 31: {
  6551                           ;interact.c: 32: m_LED.counter++;
  6552  068E  3001               	movlw	1
  6553  068F  00F0               	movwf	??_LED_update_loop
  6554  0690  0870               	movf	??_LED_update_loop,w
  6555  0691  07F7               	addwf	_m_LED+1,f	;volatile
  6556                           
  6557                           ;interact.c: 33: if (m_LED.counter >= 85)
  6558  0692  3055               	movlw	85
  6559  0693  0277               	subwf	_m_LED+1,w	;volatile
  6560  0694  1C03               	skipc
  6561  0695  0008               	return
  6562                           
  6563                           ;interact.c: 34: {
  6564                           ;interact.c: 35: m_LED.counter = 0;
  6565  0696  01F7               	clrf	_m_LED+1	;volatile
  6566                           
  6567                           ;interact.c: 36: do { LATA2 = ~LATA2; } while(0);
  6568  0697  3004               	movlw	4
  6569  0698  0022               	movlb	2	; select bank2
  6570  0699  068C               	xorwf	12,f
  6571                           
  6572                           ;interact.c: 37: }
  6573                           ;interact.c: 38: }
  6574  069A  0008               	return
  6575  069B                     i1l1959:	
  6576                           
  6577                           ;interact.c: 39: else if (m_LED.state == fast_blinking)
  6578  069B  3003               	movlw	3
  6579  069C  0676               	xorwf	_m_LED,w	;volatile
  6580  069D  1D03               	btfss	3,2
  6581  069E  0008               	return
  6582                           
  6583                           ;interact.c: 40: {
  6584                           ;interact.c: 41: m_LED.counter++;
  6585  069F  3001               	movlw	1
  6586  06A0  00F0               	movwf	??_LED_update_loop
  6587  06A1  0870               	movf	??_LED_update_loop,w
  6588  06A2  07F7               	addwf	_m_LED+1,f	;volatile
  6589                           
  6590                           ;interact.c: 42: if (m_LED.counter >= 20)
  6591  06A3  3014               	movlw	20
  6592  06A4  0277               	subwf	_m_LED+1,w	;volatile
  6593  06A5  1C03               	skipc
  6594  06A6  0008               	return
  6595                           
  6596                           ;interact.c: 43: {
  6597                           ;interact.c: 44: m_LED.counter = 0;
  6598  06A7  01F7               	clrf	_m_LED+1	;volatile
  6599                           
  6600                           ;interact.c: 45: do { LATA2 = ~LATA2; } while(0);
  6601  06A8  3004               	movlw	4
  6602  06A9  0022               	movlb	2	; select bank2
  6603  06AA  068C               	xorwf	12,f
  6604  06AB  0008               	return
  6605  06AC                     __end_of_LED_update_loop:	
  6606                           
  6607                           	psect	text30
  6608  0728                     __ptext30:	
  6609 ;; *************** function _EUSART_Transmit_ISR *****************
  6610 ;; Defined at:
  6611 ;;		line 169 in file "mcc_generated_files/eusart.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;		None
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;		None
  6616 ;; Return value:  Size  Location     Type
  6617 ;;                  1    wreg      void 
  6618 ;; Registers used:
  6619 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6625 ;;      Params:         0       0       0       0       0       0
  6626 ;;      Locals:         0       0       0       0       0       0
  6627 ;;      Temps:          1       0       0       0       0       0
  6628 ;;      Totals:         1       0       0       0       0       0
  6629 ;;Total ram usage:        1 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_INTERRUPT_InterruptManager
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _EUSART_Transmit_ISR
  6640  0728                     _EUSART_Transmit_ISR:	
  6641                           
  6642                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6646  0728  3008               	movlw	8
  6647  0729  0020               	movlb	0	; select bank0
  6648  072A  026A               	subwf	_eusartTxBufferRemaining,w	;volatile
  6649  072B  1803               	skipnc
  6650  072C  2F42               	goto	i1l183
  6651                           
  6652                           ;eusart.c: 174: {
  6653                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  6654  072D  086C               	movf	_eusartTxTail,w
  6655  072E  3E51               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6656  072F  0086               	movwf	6
  6657  0730  0187               	clrf	7
  6658  0731  0801               	movf	1,w
  6659  0732  0023               	movlb	3	; select bank3
  6660  0733  009A               	movwf	26	;volatile
  6661  0734  3001               	movlw	1
  6662  0735  00F0               	movwf	??_EUSART_Transmit_ISR
  6663  0736  0870               	movf	??_EUSART_Transmit_ISR,w
  6664  0737  0020               	movlb	0	; select bank0
  6665  0738  07EC               	addwf	_eusartTxTail,f
  6666                           
  6667                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6668  0739  3008               	movlw	8
  6669  073A  026C               	subwf	_eusartTxTail,w
  6670  073B  1803               	btfsc	3,0
  6671                           
  6672                           ;eusart.c: 177: {
  6673                           ;eusart.c: 178: eusartTxTail = 0;
  6674  073C  01EC               	clrf	_eusartTxTail
  6675                           
  6676                           ;eusart.c: 179: }
  6677                           ;eusart.c: 180: eusartTxBufferRemaining++;
  6678  073D  3001               	movlw	1
  6679  073E  00F0               	movwf	??_EUSART_Transmit_ISR
  6680  073F  0870               	movf	??_EUSART_Transmit_ISR,w
  6681  0740  07EA               	addwf	_eusartTxBufferRemaining,f	;volatile
  6682                           
  6683                           ;eusart.c: 181: }
  6684  0741  0008               	return
  6685  0742                     i1l183:	
  6686                           
  6687                           ;eusart.c: 182: else
  6688                           ;eusart.c: 183: {
  6689                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  6690  0742  0021               	movlb	1	; select bank1
  6691  0743  1211               	bcf	17,4	;volatile
  6692  0744  0008               	return
  6693  0745                     __end_of_EUSART_Transmit_ISR:	
  6694                           
  6695                           	psect	text31
  6696  0798                     __ptext31:	
  6697 ;; *************** function _EUSART_Receive_ISR *****************
  6698 ;; Defined at:
  6699 ;;		line 188 in file "mcc_generated_files/eusart.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  1    wreg      void 
  6706 ;; Registers used:
  6707 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6713 ;;      Params:         0       0       0       0       0       0
  6714 ;;      Locals:         0       0       0       0       0       0
  6715 ;;      Temps:          1       0       0       0       0       0
  6716 ;;      Totals:         1       0       0       0       0       0
  6717 ;;Total ram usage:        1 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; This function calls:
  6720 ;;		Nothing
  6721 ;; This function is called by:
  6722 ;;		_INTERRUPT_InterruptManager
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _EUSART_Receive_ISR
  6728  0798                     _EUSART_Receive_ISR:	
  6729                           
  6730                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6734  0798  0023               	movlb	3	; select bank3
  6735  0799  1C9D               	btfss	29,1	;volatile
  6736  079A  2F9D               	goto	i1l2211
  6737                           
  6738                           ;eusart.c: 192: {
  6739                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  6740  079B  139D               	bcf	29,7	;volatile
  6741                           
  6742                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  6743  079C  179D               	bsf	29,7	;volatile
  6744  079D                     i1l2211:	
  6745                           
  6746                           ;eusart.c: 197: }
  6747                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  6748  079D  0819               	movf	25,w	;volatile
  6749  079E  00F0               	movwf	??_EUSART_Receive_ISR
  6750  079F  0020               	movlb	0	; select bank0
  6751  07A0  0868               	movf	_eusartRxHead,w
  6752  07A1  3ED1               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6753  07A2  0086               	movwf	6
  6754  07A3  0187               	clrf	7
  6755  07A4  0870               	movf	??_EUSART_Receive_ISR,w
  6756  07A5  0081               	movwf	1
  6757  07A6  3001               	movlw	1
  6758  07A7  00F0               	movwf	??_EUSART_Receive_ISR
  6759  07A8  0870               	movf	??_EUSART_Receive_ISR,w
  6760  07A9  07E8               	addwf	_eusartRxHead,f
  6761                           
  6762                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  6763  07AA  3008               	movlw	8
  6764  07AB  0268               	subwf	_eusartRxHead,w
  6765  07AC  1803               	btfsc	3,0
  6766                           
  6767                           ;eusart.c: 202: {
  6768                           ;eusart.c: 203: eusartRxHead = 0;
  6769  07AD  01E8               	clrf	_eusartRxHead
  6770                           
  6771                           ;eusart.c: 204: }
  6772                           ;eusart.c: 205: eusartRxCount++;
  6773  07AE  3001               	movlw	1
  6774  07AF  00F0               	movwf	??_EUSART_Receive_ISR
  6775  07B0  0870               	movf	??_EUSART_Receive_ISR,w
  6776  07B1  07F8               	addwf	_eusartRxCount,f	;volatile
  6777  07B2  0008               	return
  6778  07B3                     __end_of_EUSART_Receive_ISR:	
  6779  007E                     btemp	set	126	;btemp
  6780  007E                     int$flags	set	126
  6781  007E                     wtemp	set	126
  6782  007E                     wtemp0	set	126
  6783  0080                     wtemp1	set	128
  6784  0082                     wtemp2	set	130
  6785  0084                     wtemp3	set	132
  6786  0086                     wtemp4	set	134
  6787  0088                     wtemp5	set	136
  6788  007F                     wtemp6	set	127
  6789  007E                     ttemp	set	126
  6790  007E                     ttemp0	set	126
  6791  0081                     ttemp1	set	129
  6792  0084                     ttemp2	set	132
  6793  0087                     ttemp3	set	135
  6794  007F                     ttemp4	set	127
  6795  007E                     ltemp	set	126
  6796  007E                     ltemp0	set	126
  6797  0082                     ltemp1	set	130
  6798  0086                     ltemp2	set	134
  6799  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     49      77
    BANK1            80      0      57
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_EPWM1_LoadDutyValue
    _main->_LED_set_state
    _main->_TMR0_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _multiply_fp->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->_convert_to_fp
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    7467
                                             40 BANK0      9     9      0
                _EPWM1_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    1467
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     656
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     128
                   _EPWM1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     128
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     128
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     110
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    4350
                                             21 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4     662
                                              0 BANK0     21    17      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     359
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     291
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM1_LoadDutyValue                                  4     2      2     517
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   2     2      0     112
                                              1 COMMON     2     2      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   _multiply_fp
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      90       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     31      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      39       8       71.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      90      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Sep 21 09:15:43 2016

                             __CFG_CP$OFF 0000                                        l28 0FC8  
                     ___wmul@multiplicand 0022                           _timer0ReloadVal 0079  
                  __end_of_my10msTimerISR 0FB1                                       l330 051C  
                                     l171 06B8                                       l291 02D6  
                                     l381 0708                                       l536 0231  
                                     l296 0317                                       l649 074E  
                                     _PR2 001B                              __CFG_CPD$OFF 0000  
                         _TMR2_Initialize 0FCB                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0070                              __CFG_LVP$OFF 0000  
                                    l2103 06D2                                      l3013 010D  
                                    l3005 0105                                      l3103 01B9  
                                    l3015 010E                                      l2231 0700  
                                    l3113 01EC                                      l3105 01D6  
                                    l3025 0120                                      l3203 028E  
                                    l3107 0178                                      l3109 01DB  
                                    l2229 06FA                                      l3143 0218  
                                    l3135 0210                                      l3055 014C  
                                    l3047 0144                                      l3303 0383  
                                    l3153 022A                                      l3145 021A  
                                    l3057 014D                                      l3171 0247  
                                    l3093 0196                                      l3309 03AE  
                                    l3261 030A                                      l3237 02C1  
                                    l3191 0270                                      l3175 024F  
                                    l3079 0171                                      l3255 02F5  
                                    l3185 0259                                      l3089 0186  
                                    l3281 0333                                      l3265 0313  
                                    l3179 0251                                      l3099 0198  
                                    l3291 0358                                      l2813 04EA  
                                    l3269 0320                                      l3295 0364  
                                    l3287 0348                                      l2833 0710  
                                    l2825 0538                                      l2819 0514  
                                    l2931 0090                                      l2915 0079  
                                    l2851 065F                                      l2837 0747  
                                    l2941 00A2                                      l2925 008D  
                                    l2783 06CC                                      l2855 0669  
                                    l2769 06AD                                      l2873 0617  
                                    l2929 008F                                      l2971 00CE  
                                    l2963 00C6                                      l2891 0046  
                                    l2973 00CF                                      l2893 0055  
                                    l2879 062C                                      l2983 00E1  
                                    STR_1 05CB                                      STR_2 05FF  
                                    _LATA 010C                                      _LATB 010D  
                                    u3015 04D1                                      u3105 0754  
                                    u3044 0506                                      u3045 0504  
                                    u3135 066A                                      u3145 0671  
                                    u4107 0339                                      u3165 0772  
                                    u4117 0353                                      u3095 074F  
                                    u4127 037C                                      u4137 03B5  
                                    u4147 061D                                      u4157 063A  
                                    u4077 02C7                                      u4167 064F  
                                    u4087 02E3                                      u4097 02FB  
                                    u3715 0261                                      u3745 03C8  
                                    u3755 03E0                                      u3765 03FB  
                                    u3775 0413                                      u3785 0443  
                                    u3795 0497                                      i1l77 0024  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                    __end_of_GPS_read_speed 0290  
                             main@tmp_565 004D                               main@tmp_566 004E  
                                    _conf 00A0                                      _main 0290  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0029  
                                    ttemp 007E                                      wtemp 007E  
                   ??_EPWM1_LoadDutyValue 0020                             __CFG_MCLRE$ON 0000  
                 __end_of_TMR0_Initialize 07DF                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0070                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0008             __end_of_OSCILLATOR_Initialize 0FCB  
                                   ?_main 0070                             _convert_to_fp 04B6  
                           __CFG_WDTE$OFF 0000                                     _T2CON 001C  
                                   _LATA2 0862                           ?_my10msTimerISR 0070  
                                   i1l183 0742                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISB 008D                                     _TXREG 019A  
                                   _TXSTA 019E                          ??_GPS_Initialize 0028  
       __size_of_TMR0_SetInterruptHandler 0006                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0074                           __end_of_fp_x0_a 05C1  
                         __end_of_fp_x0_b 05C5                          __end_of_TMR0_ISR 07F4  
                                   _m_LED 0076                                     _speed 0060  
                                   _putch 0FB1                   __end_of_LED_update_loop 06AC  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                           ?_GPS_read_speed 0070  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           _TMR2_StartTimer 0FA8  
                           multiply_fp@n1 002C                             multiply_fp@n2 0030  
                         __initialization 002B                    __size_of_LED_set_state 001D  
                            __end_of_main 03BD                            ??_EUSART_Write 0074  
                 __end_of_TMR2_Initialize 0FD5               ?_INTERRUPT_InterruptManager 0070  
                          ?_convert_to_fp 0020                                    ??_main 0048  
                                  _CCPR1H 0292                                    _CCPR1L 0291  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELB 018D                                    i1l2005 05A4  
                                  i1l2015 05B8                                    i1l2211 079D  
                                  i1l1921 07FE                                    i1l2595 001A  
                                  i1l2587 000F                                    i1l1959 069B  
                                  i1l1995 0591                                    i1l1979 0573  
                                  i1l1987 0583                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                          __CFG_PWRTE$OFF 0000                        convert_to_fp@i_bit 002E  
                            _CCPTMRS0bits 029E                                    ___lmul 0656  
                                  ___wmul 0745                            __CFG_STVREN$ON 0000  
                     _EUSART_Transmit_ISR 0728                          ?_TMR0_Initialize 0070  
              __end_of_button_update_loop 05BD                                    _printf 070B  
                                  main@up 004B                             _LED_set_state 06EE  
                   __end_of_TMR0_CallBack 0FE0                   __end_of_TMR2_StartTimer 0FAB  
TMR0_SetInterruptHandler@InterruptHandler 0074                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0070                    convert_to_fp@res_fract 002C  
                        ?_LED_update_loop 0070                              ?_multiply_fp 002C  
                    __size_of_EUSART_Read 001F                         _SYSTEM_Initialize 0FEE  
                 __end_of__initialization 003E                            multiply_fp@res 0042  
                      ?_SYSTEM_Initialize 0070                         ?_EPWM1_Initialize 0070  
                          __pcstackCOMMON 0070                       ??_SYSTEM_Initialize 0076  
                               ?_TMR0_ISR 0070                        ??_EPWM1_Initialize 0074  
                         ??_convert_to_fp 0024                             __end_of_putch 0FB7  
                        ?_TMR2_Initialize 0070                            _OPTION_REGbits 0095  
                   TMR0_ISR@CountCallBack 0064                            ?_LED_set_state 0070  
               __end_of_SYSTEM_Initialize 1000                     ??_EUSART_Transmit_ISR 0070  
                                 ??_putch 0076                                __pbssBANK0 0051  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 06CF  
             __size_of_EUSART_Receive_ISR 001B                                __pmaintext 0290  
        __end_of_TMR0_SetInterruptHandler 0FBD                                   ?___lmul 0020  
                                 ?___wmul 0020                                ??_TMR0_ISR 0073  
                        ??_my10msTimerISR 0073                                __pintentry 0004  
                                 _CCP1CON 0293                                   _ECCP1AS 0295  
                                 _BAUDCON 019F                            ___lmul@product 0028  
                                 _APFCON0 011D                                   _APFCON1 011E  
                                 ?_printf 0021                     get_button_state@state 0070  
                           _eusartRxCount 0078                                   _OSCSTAT 009A  
                                 _OSCTUNE 0098                                   _PWM1CON 0294  
                        ??_GPS_read_speed 0035                          ?_TMR2_StartTimer 0070  
             __end_of_EPWM1_LoadDutyValue 077D                           __size_of___lmul 0030  
                         __size_of___wmul 001C                   convert_to_fp@fract_part 0022  
                                 _fp_x0_a 05BD                                   _fp_x0_b 05C1  
                                 __ptext1 03BD                                   __ptext2 0656  
                                 __ptext3 0FEE                                   __ptext4 0FCB  
                                 __ptext5 0FA8                                   __ptext6 07CA  
                                 __ptext7 0FB7                                   __ptext8 07B3  
                                 __ptext9 0FC3                           __size_of_printf 001D  
                         ??_LED_set_state 0074                     _OSCILLATOR_Initialize 0FC3  
                               _T2CONbits 001C              GPS_read_speed@read_speed_fra 003B  
                ??_PIN_MANAGER_Initialize 0074              GPS_read_speed@read_speed_int 0039  
              __size_of_SYSTEM_Initialize 0012                                   clrloop0 0FBE  
                        _get_button_state 07F4                                   main@tmp 004C  
                          main@motor_load 004F                      end_of_initialization 003E  
                       __end_of_ratio_mph 05C9                    LED_set_state@new_state 0075  
                    __size_of_multiply_fp 00F9                         _EUSART_Initialize 077D  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0027                                   printf@f 0021  
                            __pstringtext 05BD                       ??_EUSART_Initialize 0074  
                _TMR0_SetInterruptHandler 0FB7                                 _PORTBbits 000D  
                    GPS_read_speed@i_buff 0046                      GPS_read_speed@m_char 0047  
                    GPS_read_speed@buffer 003F                          __CFG_FOSC$INTOSC 0000  
                   __size_of_EUSART_Write 0023                        _button_update_loop 055F  
               __end_of_EUSART_Initialize 0798                   __size_of_GPS_Initialize 0045  
                     ?_button_update_loop 0070                            __end_of___lmul 0686  
                          __end_of___wmul 0761                              _EUSART_Write 06AC  
                       __size_of_TMR0_ISR 0015                          convert_to_fp@one 05C9  
                        convert_to_fp@res 0031                    ?_OSCILLATOR_Initialize 0070  
                    ??_button_update_loop 0071                            __end_of_printf 0728  
                     start_initialization 002B                 __size_of_EPWM1_Initialize 000E  
                __size_of_TMR0_Initialize 0015           __size_of_PIN_MANAGER_Initialize 0017  
                           ??_EUSART_Read 0074                               putch@txData 0020  
            EPWM1_LoadDutyValue@dutyValue 0074                  __size_of_LED_update_loop 0026  
                                ??___lmul 0074                                  ??___wmul 0074  
                  __size_of_TMR0_CallBack 000B                     convert_to_fp@int_part 0020  
                   __end_of_convert_to_fp 055F                                  ??_printf 0023  
             __end_of_EUSART_Transmit_ISR 0745                               __pbssCOMMON 0076  
                               ___latbits 0001                             __pcstackBANK0 0020  
                   convert_to_fp@tmp_left 002F                  __size_of_TMR2_Initialize 000A  
              __end_of_EUSART_Receive_ISR 07B3                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 06EE                     _TMR0_InterruptHandler 0066  
                  _PIN_MANAGER_Initialize 07B3                      EUSART_Read@readValue 0075  
                __end_of_get_button_state 0800                              _eusartRxHead 0068  
                            _eusartTxHead 006B                              _eusartRxTail 0069  
                            _eusartTxTail 006C              ??_INTERRUPT_InterruptManager 0073  
                 _eusartTxBufferRemaining 006A                             _TMR0_CallBack 0FD5  
                          __size_of_putch 0006                            _eusartRxBuffer 00D1  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 0611  
                          _eusartTxBuffer 0051                            ___wmul@product 0074  
                               clear_ram0 0FBD                                  _PIE1bits 0091  
                               _ratio_mph 05C5                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0025                ??_TMR0_SetInterruptHandler 0076  
                                _PIR1bits 0011              __size_of_EPWM1_LoadDutyValue 001C  
                                _TMR0_ISR 07DF                                  _PSTR1CON 0296  
                       ??_LED_update_loop 0070                         ___wmul@multiplier 0020  
                        _EPWM1_Initialize 0FE0                     __end_of_LED_set_state 070B  
                 __size_of_my10msTimerISR 0006                            ?_TMR0_CallBack 0070  
                             _EUSART_Read 06CF                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 0656                             ??_multiply_fp 0034  
                __end_ofconvert_to_fp@one 05CB            GPS_read_speed@no_more_checksum 0038  
                       ??_TMR2_Initialize 0074                   __size_of_GPS_read_speed 024E  
                       GPS_Initialize@tmp 002B                   ??_OSCILLATOR_Initialize 0074  
         button_update_loop@current_state 0072                  GPS_read_speed@before_dot 0037  
                                __ptext10 077D                                  __ptext11 0FE0  
                                __ptext20 06AC                                  __ptext12 06EE  
                                __ptext21 0761                                  __ptext13 0042  
                                __ptext30 0728                                  __ptext14 04B6  
                                __ptext31 0798                                  __ptext23 07DF  
                                __ptext15 0745                                  __ptext24 0FD5  
                                __ptext16 06CF                                  __ptext25 0003  
                                __ptext17 0611                                  __ptext26 0FAB  
                                __ptext18 070B                                  __ptext27 055F  
                                __ptext19 0FB1                                  __ptext28 07F4  
                                __ptext29 0686                           ?_GPS_Initialize 0070  
                                _m_button 0059                             __size_of_main 012D  
    __end_of_TMR0_DefaultInterruptHandler 0004     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0003                       __end_of_multiply_fp 04B6  
                                int$flags 007E                         ??_TMR2_StartTimer 0074  
      __end_of_INTERRUPT_InterruptManager 0029                _INTERRUPT_InterruptManager 0004  
             __size_of_button_update_loop 005E                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0073                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0070                   GPS_read_speed@checksum2 003D  
                       __CFG_CLKOUTEN$OFF 0000             ?_TMR0_DefaultInterruptHandler 0070  
                                printf@ap 0026                        _EUSART_Receive_ISR 0798  
                       ?_get_button_state 0070                        ??_get_button_state 0070  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0070  
                         _TMR0_Initialize 07CA                    GPS_read_speed@checksum 003E  
                          _my10msTimerISR 0FAB                       _EPWM1_LoadDutyValue 0761  
                      EUSART_Write@txData 0075              __size_of_EUSART_Transmit_ISR 001D  
          __end_of_PIN_MANAGER_Initialize 07CA                     GPS_read_speed@i_buff2 0045  
                             _multiply_fp 03BD                    __size_of_convert_to_fp 00A9  
                    ??_EUSART_Receive_ISR 0070                            _GPS_read_speed 0042  
                         _LED_update_loop 0686                  __end_of_EPWM1_Initialize 0FEE  
                    ?_EPWM1_LoadDutyValue 0074  

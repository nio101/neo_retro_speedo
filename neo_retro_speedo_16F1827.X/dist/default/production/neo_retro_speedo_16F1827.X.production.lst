

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Sep 20 09:36:43 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0014                     	;# 
    60  0015                     	;# 
    61  0016                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001C                     	;# 
    69  001E                     	;# 
    70  001F                     	;# 
    71  008C                     	;# 
    72  008D                     	;# 
    73  0091                     	;# 
    74  0092                     	;# 
    75  0093                     	;# 
    76  0094                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0097                     	;# 
    80  0098                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  0111                     	;# 
    91  0112                     	;# 
    92  0113                     	;# 
    93  0114                     	;# 
    94  0115                     	;# 
    95  0116                     	;# 
    96  0117                     	;# 
    97  0118                     	;# 
    98  0119                     	;# 
    99  011A                     	;# 
   100  011B                     	;# 
   101  011D                     	;# 
   102  011E                     	;# 
   103  018C                     	;# 
   104  018D                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0194                     	;# 
   112  0195                     	;# 
   113  0196                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019C                     	;# 
   121  019C                     	;# 
   122  019D                     	;# 
   123  019E                     	;# 
   124  019F                     	;# 
   125  020C                     	;# 
   126  020D                     	;# 
   127  0211                     	;# 
   128  0211                     	;# 
   129  0212                     	;# 
   130  0212                     	;# 
   131  0213                     	;# 
   132  0213                     	;# 
   133  0214                     	;# 
   134  0214                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0216                     	;# 
   139  0216                     	;# 
   140  0217                     	;# 
   141  0217                     	;# 
   142  0219                     	;# 
   143  021A                     	;# 
   144  021B                     	;# 
   145  021C                     	;# 
   146  021D                     	;# 
   147  021E                     	;# 
   148  021F                     	;# 
   149  0291                     	;# 
   150  0291                     	;# 
   151  0292                     	;# 
   152  0293                     	;# 
   153  0294                     	;# 
   154  0295                     	;# 
   155  0295                     	;# 
   156  0296                     	;# 
   157  0298                     	;# 
   158  0298                     	;# 
   159  0299                     	;# 
   160  029A                     	;# 
   161  029B                     	;# 
   162  029C                     	;# 
   163  029C                     	;# 
   164  029D                     	;# 
   165  029E                     	;# 
   166  029E                     	;# 
   167  0311                     	;# 
   168  0311                     	;# 
   169  0312                     	;# 
   170  0313                     	;# 
   171  0318                     	;# 
   172  0318                     	;# 
   173  0319                     	;# 
   174  031A                     	;# 
   175  0394                     	;# 
   176  0395                     	;# 
   177  0396                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0415                     	;# 
   184  0416                     	;# 
   185  0417                     	;# 
   186  041C                     	;# 
   187  041D                     	;# 
   188  041E                     	;# 
   189  0FE4                     	;# 
   190  0FE5                     	;# 
   191  0FE6                     	;# 
   192  0FE7                     	;# 
   193  0FE8                     	;# 
   194  0FE9                     	;# 
   195  0FEA                     	;# 
   196  0FEB                     	;# 
   197  0FED                     	;# 
   198  0FEE                     	;# 
   199  0FEF                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0013                     	;# 
   217  0014                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  001E                     	;# 
   228  001F                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0094                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011A                     	;# 
   258  011B                     	;# 
   259  011D                     	;# 
   260  011E                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0194                     	;# 
   270  0195                     	;# 
   271  0196                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019C                     	;# 
   279  019C                     	;# 
   280  019D                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  0211                     	;# 
   286  0211                     	;# 
   287  0212                     	;# 
   288  0212                     	;# 
   289  0213                     	;# 
   290  0213                     	;# 
   291  0214                     	;# 
   292  0214                     	;# 
   293  0215                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0216                     	;# 
   297  0216                     	;# 
   298  0217                     	;# 
   299  0217                     	;# 
   300  0219                     	;# 
   301  021A                     	;# 
   302  021B                     	;# 
   303  021C                     	;# 
   304  021D                     	;# 
   305  021E                     	;# 
   306  021F                     	;# 
   307  0291                     	;# 
   308  0291                     	;# 
   309  0292                     	;# 
   310  0293                     	;# 
   311  0294                     	;# 
   312  0295                     	;# 
   313  0295                     	;# 
   314  0296                     	;# 
   315  0298                     	;# 
   316  0298                     	;# 
   317  0299                     	;# 
   318  029A                     	;# 
   319  029B                     	;# 
   320  029C                     	;# 
   321  029C                     	;# 
   322  029D                     	;# 
   323  029E                     	;# 
   324  029E                     	;# 
   325  0311                     	;# 
   326  0311                     	;# 
   327  0312                     	;# 
   328  0313                     	;# 
   329  0318                     	;# 
   330  0318                     	;# 
   331  0319                     	;# 
   332  031A                     	;# 
   333  0394                     	;# 
   334  0395                     	;# 
   335  0396                     	;# 
   336  039A                     	;# 
   337  039C                     	;# 
   338  039D                     	;# 
   339  039E                     	;# 
   340  039F                     	;# 
   341  0415                     	;# 
   342  0416                     	;# 
   343  0417                     	;# 
   344  041C                     	;# 
   345  041D                     	;# 
   346  041E                     	;# 
   347  0FE4                     	;# 
   348  0FE5                     	;# 
   349  0FE6                     	;# 
   350  0FE7                     	;# 
   351  0FE8                     	;# 
   352  0FE9                     	;# 
   353  0FEA                     	;# 
   354  0FEB                     	;# 
   355  0FED                     	;# 
   356  0FEE                     	;# 
   357  0FEF                     	;# 
   358  0000                     	;# 
   359  0001                     	;# 
   360  0002                     	;# 
   361  0003                     	;# 
   362  0004                     	;# 
   363  0005                     	;# 
   364  0006                     	;# 
   365  0007                     	;# 
   366  0008                     	;# 
   367  0009                     	;# 
   368  000A                     	;# 
   369  000B                     	;# 
   370  000C                     	;# 
   371  000D                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  001E                     	;# 
   386  001F                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009B                     	;# 
   401  009C                     	;# 
   402  009D                     	;# 
   403  009E                     	;# 
   404  010C                     	;# 
   405  010D                     	;# 
   406  0111                     	;# 
   407  0112                     	;# 
   408  0113                     	;# 
   409  0114                     	;# 
   410  0115                     	;# 
   411  0116                     	;# 
   412  0117                     	;# 
   413  0118                     	;# 
   414  0119                     	;# 
   415  011A                     	;# 
   416  011B                     	;# 
   417  011D                     	;# 
   418  011E                     	;# 
   419  018C                     	;# 
   420  018D                     	;# 
   421  0191                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  0193                     	;# 
   425  0193                     	;# 
   426  0193                     	;# 
   427  0194                     	;# 
   428  0195                     	;# 
   429  0196                     	;# 
   430  0199                     	;# 
   431  019A                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019C                     	;# 
   437  019C                     	;# 
   438  019D                     	;# 
   439  019E                     	;# 
   440  019F                     	;# 
   441  020C                     	;# 
   442  020D                     	;# 
   443  0211                     	;# 
   444  0211                     	;# 
   445  0212                     	;# 
   446  0212                     	;# 
   447  0213                     	;# 
   448  0213                     	;# 
   449  0214                     	;# 
   450  0214                     	;# 
   451  0215                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0216                     	;# 
   455  0216                     	;# 
   456  0217                     	;# 
   457  0217                     	;# 
   458  0219                     	;# 
   459  021A                     	;# 
   460  021B                     	;# 
   461  021C                     	;# 
   462  021D                     	;# 
   463  021E                     	;# 
   464  021F                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0294                     	;# 
   470  0295                     	;# 
   471  0295                     	;# 
   472  0296                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  029B                     	;# 
   478  029C                     	;# 
   479  029C                     	;# 
   480  029D                     	;# 
   481  029E                     	;# 
   482  029E                     	;# 
   483  0311                     	;# 
   484  0311                     	;# 
   485  0312                     	;# 
   486  0313                     	;# 
   487  0318                     	;# 
   488  0318                     	;# 
   489  0319                     	;# 
   490  031A                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  039A                     	;# 
   495  039C                     	;# 
   496  039D                     	;# 
   497  039E                     	;# 
   498  039F                     	;# 
   499  0415                     	;# 
   500  0416                     	;# 
   501  0417                     	;# 
   502  041C                     	;# 
   503  041D                     	;# 
   504  041E                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  0011                     	;# 
   531  0012                     	;# 
   532  0013                     	;# 
   533  0014                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001B                     	;# 
   542  001C                     	;# 
   543  001E                     	;# 
   544  001F                     	;# 
   545  008C                     	;# 
   546  008D                     	;# 
   547  0091                     	;# 
   548  0092                     	;# 
   549  0093                     	;# 
   550  0094                     	;# 
   551  0095                     	;# 
   552  0096                     	;# 
   553  0097                     	;# 
   554  0098                     	;# 
   555  0099                     	;# 
   556  009A                     	;# 
   557  009B                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  010C                     	;# 
   563  010D                     	;# 
   564  0111                     	;# 
   565  0112                     	;# 
   566  0113                     	;# 
   567  0114                     	;# 
   568  0115                     	;# 
   569  0116                     	;# 
   570  0117                     	;# 
   571  0118                     	;# 
   572  0119                     	;# 
   573  011A                     	;# 
   574  011B                     	;# 
   575  011D                     	;# 
   576  011E                     	;# 
   577  018C                     	;# 
   578  018D                     	;# 
   579  0191                     	;# 
   580  0191                     	;# 
   581  0192                     	;# 
   582  0193                     	;# 
   583  0193                     	;# 
   584  0193                     	;# 
   585  0194                     	;# 
   586  0195                     	;# 
   587  0196                     	;# 
   588  0199                     	;# 
   589  019A                     	;# 
   590  019B                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019C                     	;# 
   595  019C                     	;# 
   596  019D                     	;# 
   597  019E                     	;# 
   598  019F                     	;# 
   599  020C                     	;# 
   600  020D                     	;# 
   601  0211                     	;# 
   602  0211                     	;# 
   603  0212                     	;# 
   604  0212                     	;# 
   605  0213                     	;# 
   606  0213                     	;# 
   607  0214                     	;# 
   608  0214                     	;# 
   609  0215                     	;# 
   610  0215                     	;# 
   611  0215                     	;# 
   612  0216                     	;# 
   613  0216                     	;# 
   614  0217                     	;# 
   615  0217                     	;# 
   616  0219                     	;# 
   617  021A                     	;# 
   618  021B                     	;# 
   619  021C                     	;# 
   620  021D                     	;# 
   621  021E                     	;# 
   622  021F                     	;# 
   623  0291                     	;# 
   624  0291                     	;# 
   625  0292                     	;# 
   626  0293                     	;# 
   627  0294                     	;# 
   628  0295                     	;# 
   629  0295                     	;# 
   630  0296                     	;# 
   631  0298                     	;# 
   632  0298                     	;# 
   633  0299                     	;# 
   634  029A                     	;# 
   635  029B                     	;# 
   636  029C                     	;# 
   637  029C                     	;# 
   638  029D                     	;# 
   639  029E                     	;# 
   640  029E                     	;# 
   641  0311                     	;# 
   642  0311                     	;# 
   643  0312                     	;# 
   644  0313                     	;# 
   645  0318                     	;# 
   646  0318                     	;# 
   647  0319                     	;# 
   648  031A                     	;# 
   649  0394                     	;# 
   650  0395                     	;# 
   651  0396                     	;# 
   652  039A                     	;# 
   653  039C                     	;# 
   654  039D                     	;# 
   655  039E                     	;# 
   656  039F                     	;# 
   657  0415                     	;# 
   658  0416                     	;# 
   659  0417                     	;# 
   660  041C                     	;# 
   661  041D                     	;# 
   662  041E                     	;# 
   663  0FE4                     	;# 
   664  0FE5                     	;# 
   665  0FE6                     	;# 
   666  0FE7                     	;# 
   667  0FE8                     	;# 
   668  0FE9                     	;# 
   669  0FEA                     	;# 
   670  0FEB                     	;# 
   671  0FED                     	;# 
   672  0FEE                     	;# 
   673  0FEF                     	;# 
   674  0000                     	;# 
   675  0001                     	;# 
   676  0002                     	;# 
   677  0003                     	;# 
   678  0004                     	;# 
   679  0005                     	;# 
   680  0006                     	;# 
   681  0007                     	;# 
   682  0008                     	;# 
   683  0009                     	;# 
   684  000A                     	;# 
   685  000B                     	;# 
   686  000C                     	;# 
   687  000D                     	;# 
   688  0011                     	;# 
   689  0012                     	;# 
   690  0013                     	;# 
   691  0014                     	;# 
   692  0015                     	;# 
   693  0016                     	;# 
   694  0016                     	;# 
   695  0017                     	;# 
   696  0018                     	;# 
   697  0019                     	;# 
   698  001A                     	;# 
   699  001B                     	;# 
   700  001C                     	;# 
   701  001E                     	;# 
   702  001F                     	;# 
   703  008C                     	;# 
   704  008D                     	;# 
   705  0091                     	;# 
   706  0092                     	;# 
   707  0093                     	;# 
   708  0094                     	;# 
   709  0095                     	;# 
   710  0096                     	;# 
   711  0097                     	;# 
   712  0098                     	;# 
   713  0099                     	;# 
   714  009A                     	;# 
   715  009B                     	;# 
   716  009B                     	;# 
   717  009C                     	;# 
   718  009D                     	;# 
   719  009E                     	;# 
   720  010C                     	;# 
   721  010D                     	;# 
   722  0111                     	;# 
   723  0112                     	;# 
   724  0113                     	;# 
   725  0114                     	;# 
   726  0115                     	;# 
   727  0116                     	;# 
   728  0117                     	;# 
   729  0118                     	;# 
   730  0119                     	;# 
   731  011A                     	;# 
   732  011B                     	;# 
   733  011D                     	;# 
   734  011E                     	;# 
   735  018C                     	;# 
   736  018D                     	;# 
   737  0191                     	;# 
   738  0191                     	;# 
   739  0192                     	;# 
   740  0193                     	;# 
   741  0193                     	;# 
   742  0193                     	;# 
   743  0194                     	;# 
   744  0195                     	;# 
   745  0196                     	;# 
   746  0199                     	;# 
   747  019A                     	;# 
   748  019B                     	;# 
   749  019B                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019C                     	;# 
   753  019C                     	;# 
   754  019D                     	;# 
   755  019E                     	;# 
   756  019F                     	;# 
   757  020C                     	;# 
   758  020D                     	;# 
   759  0211                     	;# 
   760  0211                     	;# 
   761  0212                     	;# 
   762  0212                     	;# 
   763  0213                     	;# 
   764  0213                     	;# 
   765  0214                     	;# 
   766  0214                     	;# 
   767  0215                     	;# 
   768  0215                     	;# 
   769  0215                     	;# 
   770  0216                     	;# 
   771  0216                     	;# 
   772  0217                     	;# 
   773  0217                     	;# 
   774  0219                     	;# 
   775  021A                     	;# 
   776  021B                     	;# 
   777  021C                     	;# 
   778  021D                     	;# 
   779  021E                     	;# 
   780  021F                     	;# 
   781  0291                     	;# 
   782  0291                     	;# 
   783  0292                     	;# 
   784  0293                     	;# 
   785  0294                     	;# 
   786  0295                     	;# 
   787  0295                     	;# 
   788  0296                     	;# 
   789  0298                     	;# 
   790  0298                     	;# 
   791  0299                     	;# 
   792  029A                     	;# 
   793  029B                     	;# 
   794  029C                     	;# 
   795  029C                     	;# 
   796  029D                     	;# 
   797  029E                     	;# 
   798  029E                     	;# 
   799  0311                     	;# 
   800  0311                     	;# 
   801  0312                     	;# 
   802  0313                     	;# 
   803  0318                     	;# 
   804  0318                     	;# 
   805  0319                     	;# 
   806  031A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  039A                     	;# 
   811  039C                     	;# 
   812  039D                     	;# 
   813  039E                     	;# 
   814  039F                     	;# 
   815  0415                     	;# 
   816  0416                     	;# 
   817  0417                     	;# 
   818  041C                     	;# 
   819  041D                     	;# 
   820  041E                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0013                     	;# 
   849  0014                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  001E                     	;# 
   860  001F                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0093                     	;# 
   866  0094                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0098                     	;# 
   871  0099                     	;# 
   872  009A                     	;# 
   873  009B                     	;# 
   874  009B                     	;# 
   875  009C                     	;# 
   876  009D                     	;# 
   877  009E                     	;# 
   878  010C                     	;# 
   879  010D                     	;# 
   880  0111                     	;# 
   881  0112                     	;# 
   882  0113                     	;# 
   883  0114                     	;# 
   884  0115                     	;# 
   885  0116                     	;# 
   886  0117                     	;# 
   887  0118                     	;# 
   888  0119                     	;# 
   889  011A                     	;# 
   890  011B                     	;# 
   891  011D                     	;# 
   892  011E                     	;# 
   893  018C                     	;# 
   894  018D                     	;# 
   895  0191                     	;# 
   896  0191                     	;# 
   897  0192                     	;# 
   898  0193                     	;# 
   899  0193                     	;# 
   900  0193                     	;# 
   901  0194                     	;# 
   902  0195                     	;# 
   903  0196                     	;# 
   904  0199                     	;# 
   905  019A                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019C                     	;# 
   911  019C                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019F                     	;# 
   915  020C                     	;# 
   916  020D                     	;# 
   917  0211                     	;# 
   918  0211                     	;# 
   919  0212                     	;# 
   920  0212                     	;# 
   921  0213                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  0219                     	;# 
   933  021A                     	;# 
   934  021B                     	;# 
   935  021C                     	;# 
   936  021D                     	;# 
   937  021E                     	;# 
   938  021F                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0298                     	;# 
   948  0298                     	;# 
   949  0299                     	;# 
   950  029A                     	;# 
   951  029B                     	;# 
   952  029C                     	;# 
   953  029C                     	;# 
   954  029D                     	;# 
   955  029E                     	;# 
   956  029E                     	;# 
   957  0311                     	;# 
   958  0311                     	;# 
   959  0312                     	;# 
   960  0313                     	;# 
   961  0318                     	;# 
   962  0318                     	;# 
   963  0319                     	;# 
   964  031A                     	;# 
   965  0394                     	;# 
   966  0395                     	;# 
   967  0396                     	;# 
   968  039A                     	;# 
   969  039C                     	;# 
   970  039D                     	;# 
   971  039E                     	;# 
   972  039F                     	;# 
   973  0415                     	;# 
   974  0416                     	;# 
   975  0417                     	;# 
   976  041C                     	;# 
   977  041D                     	;# 
   978  041E                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990                           
   991                           	psect	eeprom_data
   992  0000  0011 0022 0033 0044 0055 0066 0077 0088 	db	17,34,51,68,85,102,119,136	;# 
   993  0008  0049 00C8 0000 0000 0000 0000 0000 0000 	db	73,200,0,0,0,0,0,0	;# 
   994  0000                     	;# 
   995  0001                     	;# 
   996  0002                     	;# 
   997  0003                     	;# 
   998  0004                     	;# 
   999  0005                     	;# 
  1000  0006                     	;# 
  1001  0007                     	;# 
  1002  0008                     	;# 
  1003  0009                     	;# 
  1004  000A                     	;# 
  1005  000B                     	;# 
  1006  000C                     	;# 
  1007  000D                     	;# 
  1008  0011                     	;# 
  1009  0012                     	;# 
  1010  0013                     	;# 
  1011  0014                     	;# 
  1012  0015                     	;# 
  1013  0016                     	;# 
  1014  0016                     	;# 
  1015  0017                     	;# 
  1016  0018                     	;# 
  1017  0019                     	;# 
  1018  001A                     	;# 
  1019  001B                     	;# 
  1020  001C                     	;# 
  1021  001E                     	;# 
  1022  001F                     	;# 
  1023  008C                     	;# 
  1024  008D                     	;# 
  1025  0091                     	;# 
  1026  0092                     	;# 
  1027  0093                     	;# 
  1028  0094                     	;# 
  1029  0095                     	;# 
  1030  0096                     	;# 
  1031  0097                     	;# 
  1032  0098                     	;# 
  1033  0099                     	;# 
  1034  009A                     	;# 
  1035  009B                     	;# 
  1036  009B                     	;# 
  1037  009C                     	;# 
  1038  009D                     	;# 
  1039  009E                     	;# 
  1040  010C                     	;# 
  1041  010D                     	;# 
  1042  0111                     	;# 
  1043  0112                     	;# 
  1044  0113                     	;# 
  1045  0114                     	;# 
  1046  0115                     	;# 
  1047  0116                     	;# 
  1048  0117                     	;# 
  1049  0118                     	;# 
  1050  0119                     	;# 
  1051  011A                     	;# 
  1052  011B                     	;# 
  1053  011D                     	;# 
  1054  011E                     	;# 
  1055  018C                     	;# 
  1056  018D                     	;# 
  1057  0191                     	;# 
  1058  0191                     	;# 
  1059  0192                     	;# 
  1060  0193                     	;# 
  1061  0193                     	;# 
  1062  0193                     	;# 
  1063  0194                     	;# 
  1064  0195                     	;# 
  1065  0196                     	;# 
  1066  0199                     	;# 
  1067  019A                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019B                     	;# 
  1072  019C                     	;# 
  1073  019C                     	;# 
  1074  019D                     	;# 
  1075  019E                     	;# 
  1076  019F                     	;# 
  1077  020C                     	;# 
  1078  020D                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  0291                     	;# 
  1102  0291                     	;# 
  1103  0292                     	;# 
  1104  0293                     	;# 
  1105  0294                     	;# 
  1106  0295                     	;# 
  1107  0295                     	;# 
  1108  0296                     	;# 
  1109  0298                     	;# 
  1110  0298                     	;# 
  1111  0299                     	;# 
  1112  029A                     	;# 
  1113  029B                     	;# 
  1114  029C                     	;# 
  1115  029C                     	;# 
  1116  029D                     	;# 
  1117  029E                     	;# 
  1118  029E                     	;# 
  1119  0311                     	;# 
  1120  0311                     	;# 
  1121  0312                     	;# 
  1122  0313                     	;# 
  1123  0318                     	;# 
  1124  0318                     	;# 
  1125  0319                     	;# 
  1126  031A                     	;# 
  1127  0394                     	;# 
  1128  0395                     	;# 
  1129  0396                     	;# 
  1130  039A                     	;# 
  1131  039C                     	;# 
  1132  039D                     	;# 
  1133  039E                     	;# 
  1134  039F                     	;# 
  1135  0415                     	;# 
  1136  0416                     	;# 
  1137  0417                     	;# 
  1138  041C                     	;# 
  1139  041D                     	;# 
  1140  041E                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  0011                     	;# 
  1167  0012                     	;# 
  1168  0013                     	;# 
  1169  0014                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  001E                     	;# 
  1180  001F                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0093                     	;# 
  1186  0094                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0098                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  0111                     	;# 
  1201  0112                     	;# 
  1202  0113                     	;# 
  1203  0114                     	;# 
  1204  0115                     	;# 
  1205  0116                     	;# 
  1206  0117                     	;# 
  1207  0118                     	;# 
  1208  0119                     	;# 
  1209  011A                     	;# 
  1210  011B                     	;# 
  1211  011D                     	;# 
  1212  011E                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020C                     	;# 
  1236  020D                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0219                     	;# 
  1253  021A                     	;# 
  1254  021B                     	;# 
  1255  021C                     	;# 
  1256  021D                     	;# 
  1257  021E                     	;# 
  1258  021F                     	;# 
  1259  0291                     	;# 
  1260  0291                     	;# 
  1261  0292                     	;# 
  1262  0293                     	;# 
  1263  0294                     	;# 
  1264  0295                     	;# 
  1265  0295                     	;# 
  1266  0296                     	;# 
  1267  0298                     	;# 
  1268  0298                     	;# 
  1269  0299                     	;# 
  1270  029A                     	;# 
  1271  029B                     	;# 
  1272  029C                     	;# 
  1273  029C                     	;# 
  1274  029D                     	;# 
  1275  029E                     	;# 
  1276  029E                     	;# 
  1277  0311                     	;# 
  1278  0311                     	;# 
  1279  0312                     	;# 
  1280  0313                     	;# 
  1281  0318                     	;# 
  1282  0318                     	;# 
  1283  0319                     	;# 
  1284  031A                     	;# 
  1285  0394                     	;# 
  1286  0395                     	;# 
  1287  0396                     	;# 
  1288  039A                     	;# 
  1289  039C                     	;# 
  1290  039D                     	;# 
  1291  039E                     	;# 
  1292  039F                     	;# 
  1293  0415                     	;# 
  1294  0416                     	;# 
  1295  0417                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0013                     	;# 
  1327  0014                     	;# 
  1328  0015                     	;# 
  1329  0016                     	;# 
  1330  0016                     	;# 
  1331  0017                     	;# 
  1332  0018                     	;# 
  1333  0019                     	;# 
  1334  001A                     	;# 
  1335  001B                     	;# 
  1336  001C                     	;# 
  1337  001E                     	;# 
  1338  001F                     	;# 
  1339  008C                     	;# 
  1340  008D                     	;# 
  1341  0091                     	;# 
  1342  0092                     	;# 
  1343  0093                     	;# 
  1344  0094                     	;# 
  1345  0095                     	;# 
  1346  0096                     	;# 
  1347  0097                     	;# 
  1348  0098                     	;# 
  1349  0099                     	;# 
  1350  009A                     	;# 
  1351  009B                     	;# 
  1352  009B                     	;# 
  1353  009C                     	;# 
  1354  009D                     	;# 
  1355  009E                     	;# 
  1356  010C                     	;# 
  1357  010D                     	;# 
  1358  0111                     	;# 
  1359  0112                     	;# 
  1360  0113                     	;# 
  1361  0114                     	;# 
  1362  0115                     	;# 
  1363  0116                     	;# 
  1364  0117                     	;# 
  1365  0118                     	;# 
  1366  0119                     	;# 
  1367  011A                     	;# 
  1368  011B                     	;# 
  1369  011D                     	;# 
  1370  011E                     	;# 
  1371  018C                     	;# 
  1372  018D                     	;# 
  1373  0191                     	;# 
  1374  0191                     	;# 
  1375  0192                     	;# 
  1376  0193                     	;# 
  1377  0193                     	;# 
  1378  0193                     	;# 
  1379  0194                     	;# 
  1380  0195                     	;# 
  1381  0196                     	;# 
  1382  0199                     	;# 
  1383  019A                     	;# 
  1384  019B                     	;# 
  1385  019B                     	;# 
  1386  019B                     	;# 
  1387  019B                     	;# 
  1388  019C                     	;# 
  1389  019C                     	;# 
  1390  019D                     	;# 
  1391  019E                     	;# 
  1392  019F                     	;# 
  1393  020C                     	;# 
  1394  020D                     	;# 
  1395  0211                     	;# 
  1396  0211                     	;# 
  1397  0212                     	;# 
  1398  0212                     	;# 
  1399  0213                     	;# 
  1400  0213                     	;# 
  1401  0214                     	;# 
  1402  0214                     	;# 
  1403  0215                     	;# 
  1404  0215                     	;# 
  1405  0215                     	;# 
  1406  0216                     	;# 
  1407  0216                     	;# 
  1408  0217                     	;# 
  1409  0217                     	;# 
  1410  0219                     	;# 
  1411  021A                     	;# 
  1412  021B                     	;# 
  1413  021C                     	;# 
  1414  021D                     	;# 
  1415  021E                     	;# 
  1416  021F                     	;# 
  1417  0291                     	;# 
  1418  0291                     	;# 
  1419  0292                     	;# 
  1420  0293                     	;# 
  1421  0294                     	;# 
  1422  0295                     	;# 
  1423  0295                     	;# 
  1424  0296                     	;# 
  1425  0298                     	;# 
  1426  0298                     	;# 
  1427  0299                     	;# 
  1428  029A                     	;# 
  1429  029B                     	;# 
  1430  029C                     	;# 
  1431  029C                     	;# 
  1432  029D                     	;# 
  1433  029E                     	;# 
  1434  029E                     	;# 
  1435  0311                     	;# 
  1436  0311                     	;# 
  1437  0312                     	;# 
  1438  0313                     	;# 
  1439  0318                     	;# 
  1440  0318                     	;# 
  1441  0319                     	;# 
  1442  031A                     	;# 
  1443  0394                     	;# 
  1444  0395                     	;# 
  1445  0396                     	;# 
  1446  039A                     	;# 
  1447  039C                     	;# 
  1448  039D                     	;# 
  1449  039E                     	;# 
  1450  039F                     	;# 
  1451  0415                     	;# 
  1452  0416                     	;# 
  1453  0417                     	;# 
  1454  041C                     	;# 
  1455  041D                     	;# 
  1456  041E                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  0011                     	;# 
  1483  0012                     	;# 
  1484  0013                     	;# 
  1485  0014                     	;# 
  1486  0015                     	;# 
  1487  0016                     	;# 
  1488  0016                     	;# 
  1489  0017                     	;# 
  1490  0018                     	;# 
  1491  0019                     	;# 
  1492  001A                     	;# 
  1493  001B                     	;# 
  1494  001C                     	;# 
  1495  001E                     	;# 
  1496  001F                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  0091                     	;# 
  1500  0092                     	;# 
  1501  0093                     	;# 
  1502  0094                     	;# 
  1503  0095                     	;# 
  1504  0096                     	;# 
  1505  0097                     	;# 
  1506  0098                     	;# 
  1507  0099                     	;# 
  1508  009A                     	;# 
  1509  009B                     	;# 
  1510  009B                     	;# 
  1511  009C                     	;# 
  1512  009D                     	;# 
  1513  009E                     	;# 
  1514  010C                     	;# 
  1515  010D                     	;# 
  1516  0111                     	;# 
  1517  0112                     	;# 
  1518  0113                     	;# 
  1519  0114                     	;# 
  1520  0115                     	;# 
  1521  0116                     	;# 
  1522  0117                     	;# 
  1523  0118                     	;# 
  1524  0119                     	;# 
  1525  011A                     	;# 
  1526  011B                     	;# 
  1527  011D                     	;# 
  1528  011E                     	;# 
  1529  018C                     	;# 
  1530  018D                     	;# 
  1531  0191                     	;# 
  1532  0191                     	;# 
  1533  0192                     	;# 
  1534  0193                     	;# 
  1535  0193                     	;# 
  1536  0193                     	;# 
  1537  0194                     	;# 
  1538  0195                     	;# 
  1539  0196                     	;# 
  1540  0199                     	;# 
  1541  019A                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019C                     	;# 
  1547  019C                     	;# 
  1548  019D                     	;# 
  1549  019E                     	;# 
  1550  019F                     	;# 
  1551  020C                     	;# 
  1552  020D                     	;# 
  1553  0211                     	;# 
  1554  0211                     	;# 
  1555  0212                     	;# 
  1556  0212                     	;# 
  1557  0213                     	;# 
  1558  0213                     	;# 
  1559  0214                     	;# 
  1560  0214                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0216                     	;# 
  1565  0216                     	;# 
  1566  0217                     	;# 
  1567  0217                     	;# 
  1568  0219                     	;# 
  1569  021A                     	;# 
  1570  021B                     	;# 
  1571  021C                     	;# 
  1572  021D                     	;# 
  1573  021E                     	;# 
  1574  021F                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0294                     	;# 
  1580  0295                     	;# 
  1581  0295                     	;# 
  1582  0296                     	;# 
  1583  0298                     	;# 
  1584  0298                     	;# 
  1585  0299                     	;# 
  1586  029A                     	;# 
  1587  029B                     	;# 
  1588  029C                     	;# 
  1589  029C                     	;# 
  1590  029D                     	;# 
  1591  029E                     	;# 
  1592  029E                     	;# 
  1593  0311                     	;# 
  1594  0311                     	;# 
  1595  0312                     	;# 
  1596  0313                     	;# 
  1597  0318                     	;# 
  1598  0318                     	;# 
  1599  0319                     	;# 
  1600  031A                     	;# 
  1601  0394                     	;# 
  1602  0395                     	;# 
  1603  0396                     	;# 
  1604  039A                     	;# 
  1605  039C                     	;# 
  1606  039D                     	;# 
  1607  039E                     	;# 
  1608  039F                     	;# 
  1609  0415                     	;# 
  1610  0416                     	;# 
  1611  0417                     	;# 
  1612  041C                     	;# 
  1613  041D                     	;# 
  1614  041E                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626                           
  1627                           	psect	stringtext
  1628  04EB                     __pstringtext:	
  1629  04EB                     _fp_x0_a:	
  1630  04EB  34D0               	retlw	208
  1631  04EC  34D2               	retlw	210
  1632  04ED  3402               	retlw	2
  1633  04EE  3400               	retlw	0
  1634  04EF                     __end_of_fp_x0_a:	
  1635  04EF                     _fp_x0_b:	
  1636  04EF  34E4               	retlw	228
  1637  04F0  34E1               	retlw	225
  1638  04F1  3401               	retlw	1
  1639  04F2  3400               	retlw	0
  1640  04F3                     __end_of_fp_x0_b:	
  1641  04F3                     _ratio_mph:	
  1642  04F3  34F9               	retlw	249
  1643  04F4  349E               	retlw	158
  1644  04F5  3400               	retlw	0
  1645  04F6  3400               	retlw	0
  1646  04F7                     __end_of_ratio_mph:	
  1647  04F7                     convert_to_fp@one:	
  1648  04F7  3401               	retlw	1
  1649  04F8  3400               	retlw	0
  1650  04F9                     __end_ofconvert_to_fp@one:	
  1651  000B                     _INTCONbits	set	11
  1652  0011                     _PIR1bits	set	17
  1653  000D                     _PORTBbits	set	13
  1654  0015                     _TMR0	set	21
  1655  0095                     _OPTION_REG	set	149
  1656  0095                     _OPTION_REGbits	set	149
  1657  0099                     _OSCCON	set	153
  1658  009A                     _OSCSTAT	set	154
  1659  0098                     _OSCTUNE	set	152
  1660  0091                     _PIE1bits	set	145
  1661  008C                     _TRISA	set	140
  1662  008D                     _TRISB	set	141
  1663  04D6                     _PLLR	set	1238
  1664  011D                     _APFCON0	set	285
  1665  011E                     _APFCON1	set	286
  1666  010C                     _LATA	set	268
  1667  010D                     _LATB	set	269
  1668  0862                     _LATA2	set	2146
  1669  018C                     _ANSELA	set	396
  1670  018D                     _ANSELB	set	397
  1671  019F                     _BAUDCON	set	415
  1672  0199                     _RCREG	set	409
  1673  019D                     _RCSTA	set	413
  1674  019D                     _RCSTAbits	set	413
  1675  019C                     _SPBRGH	set	412
  1676  019B                     _SPBRGL	set	411
  1677  019A                     _TXREG	set	410
  1678  019E                     _TXSTA	set	414
  1679  020C                     _WPUA	set	524
  1680  020D                     _WPUB	set	525
  1681  04F9                     STR_1:	
  1682  04F9  3424               	retlw	36	;'$'
  1683  04FA  3450               	retlw	80	;'P'
  1684  04FB  344D               	retlw	77	;'M'
  1685  04FC  3454               	retlw	84	;'T'
  1686  04FD  344B               	retlw	75	;'K'
  1687  04FE  3433               	retlw	51	;'3'
  1688  04FF  3431               	retlw	49	;'1'
  1689  0500  3434               	retlw	52	;'4'
  1690  0501  342C               	retlw	44	;','
  1691  0502  3430               	retlw	48	;'0'
  1692  0503  342C               	retlw	44	;','
  1693  0504  3430               	retlw	48	;'0'
  1694  0505  342C               	retlw	44	;','
  1695  0506  3431               	retlw	49	;'1'
  1696  0507  342C               	retlw	44	;','
  1697  0508  3430               	retlw	48	;'0'
  1698  0509  342C               	retlw	44	;','
  1699  050A  3430               	retlw	48	;'0'
  1700  050B  342C               	retlw	44	;','
  1701  050C  3430               	retlw	48	;'0'
  1702  050D  342C               	retlw	44	;','
  1703  050E  3430               	retlw	48	;'0'
  1704  050F  342C               	retlw	44	;','
  1705  0510  3430               	retlw	48	;'0'
  1706  0511  342C               	retlw	44	;','
  1707  0512  3430               	retlw	48	;'0'
  1708  0513  342C               	retlw	44	;','
  1709  0514  3430               	retlw	48	;'0'
  1710  0515  342C               	retlw	44	;','
  1711  0516  3430               	retlw	48	;'0'
  1712  0517  342C               	retlw	44	;','
  1713  0518  3430               	retlw	48	;'0'
  1714  0519  342C               	retlw	44	;','
  1715  051A  3430               	retlw	48	;'0'
  1716  051B  342C               	retlw	44	;','
  1717  051C  3430               	retlw	48	;'0'
  1718  051D  342C               	retlw	44	;','
  1719  051E  3430               	retlw	48	;'0'
  1720  051F  342C               	retlw	44	;','
  1721  0520  3430               	retlw	48	;'0'
  1722  0521  342C               	retlw	44	;','
  1723  0522  3430               	retlw	48	;'0'
  1724  0523  342C               	retlw	44	;','
  1725  0524  3430               	retlw	48	;'0'
  1726  0525  342C               	retlw	44	;','
  1727  0526  3430               	retlw	48	;'0'
  1728  0527  342A               	retlw	42	;'*'
  1729  0528  3432               	retlw	50	;'2'
  1730  0529  3439               	retlw	57	;'9'
  1731  052A  340D               	retlw	13
  1732  052B  340A               	retlw	10
  1733  052C  3400               	retlw	0
  1734  052D                     STR_2:	
  1735  052D  3424               	retlw	36	;'$'
  1736  052E  3450               	retlw	80	;'P'
  1737  052F  344D               	retlw	77	;'M'
  1738  0530  3454               	retlw	84	;'T'
  1739  0531  344B               	retlw	75	;'K'
  1740  0532  3432               	retlw	50	;'2'
  1741  0533  3432               	retlw	50	;'2'
  1742  0534  3430               	retlw	48	;'0'
  1743  0535  342C               	retlw	44	;','
  1744  0536  3431               	retlw	49	;'1'
  1745  0537  3430               	retlw	48	;'0'
  1746  0538  3430               	retlw	48	;'0'
  1747  0539  342A               	retlw	42	;'*'
  1748  053A  3432               	retlw	50	;'2'
  1749  053B  3446               	retlw	70	;'F'
  1750  053C  340D               	retlw	13
  1751  053D  340A               	retlw	10
  1752  053E  3400               	retlw	0
  1753                           
  1754                           ; #config settings
  1755  0000                     
  1756                           	psect	cinit
  1757  002B                     start_initialization:	
  1758  002B                     __initialization:	
  1759                           
  1760                           ; Clear objects allocated to COMMON
  1761  002B  01F6               	clrf	__pbssCOMMON& (0+127)
  1762  002C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1763  002D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1764  002E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1765                           
  1766                           ; Clear objects allocated to BANK0
  1767  002F  304A               	movlw	low __pbssBANK0
  1768  0030  0084               	movwf	4
  1769  0031  3000               	movlw	high __pbssBANK0
  1770  0032  0085               	movwf	5
  1771  0033  3024               	movlw	36
  1772  0034  3187  2731  3180   	fcall	clear_ram0
  1773                           
  1774                           ; Clear objects allocated to BANK1
  1775  0037  30A0               	movlw	low __pbssBANK1
  1776  0038  0084               	movwf	4
  1777  0039  3000               	movlw	high __pbssBANK1
  1778  003A  0085               	movwf	5
  1779  003B  3031               	movlw	49
  1780  003C  3187  2731         	fcall	clear_ram0
  1781  003E                     end_of_initialization:	
  1782                           ;End of C runtime variable initialization code
  1783                           
  1784  003E                     __end_of__initialization:	
  1785  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1786  003F  0020               	movlb	0
  1787  0040  3184  2C90         	ljmp	_main	;jump to C main() function
  1788                           
  1789                           	psect	bssCOMMON
  1790  0076                     __pbssCOMMON:	
  1791  0076                     _m_LED:	
  1792  0076                     	ds	2
  1793  0078                     _eusartRxCount:	
  1794  0078                     	ds	1
  1795  0079                     _timer0ReloadVal:	
  1796  0079                     	ds	1
  1797                           
  1798                           	psect	bssBANK0
  1799  004A                     __pbssBANK0:	
  1800  004A                     _eusartRxBuffer:	
  1801  004A                     	ds	8
  1802  0052                     _eusartTxBuffer:	
  1803  0052                     	ds	8
  1804  005A                     _m_button:	
  1805  005A                     	ds	7
  1806  0061                     _speed:	
  1807  0061                     	ds	4
  1808  0065                     TMR0_ISR@CountCallBack:	
  1809  0065                     	ds	2
  1810  0067                     _TMR0_InterruptHandler:	
  1811  0067                     	ds	2
  1812  0069                     _eusartRxHead:	
  1813  0069                     	ds	1
  1814  006A                     _eusartRxTail:	
  1815  006A                     	ds	1
  1816  006B                     _eusartTxBufferRemaining:	
  1817  006B                     	ds	1
  1818  006C                     _eusartTxHead:	
  1819  006C                     	ds	1
  1820  006D                     _eusartTxTail:	
  1821  006D                     	ds	1
  1822                           
  1823                           	psect	bssBANK1
  1824  00A0                     __pbssBANK1:	
  1825  00A0                     _conf:	
  1826  00A0                     	ds	49
  1827                           
  1828                           	psect	clrtext
  1829  0731                     clear_ram0:	
  1830                           ;	Called with FSR0 containing the base address, and
  1831                           ;	WREG with the size to clear
  1832                           
  1833  0731  0064               	clrwdt	;clear the watchdog before getting into this loop
  1834  0732                     clrloop0:	
  1835  0732  0180               	clrf	0	;clear RAM location pointed to by FSR
  1836  0733  3101               	addfsr 0,1
  1837  0734  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1838  0735  2F32               	goto	clrloop0	;have we reached the end yet?
  1839  0736  3400               	retlw	0	;all done for this memory range, return
  1840                           
  1841                           	psect	cstackCOMMON
  1842  0070                     __pcstackCOMMON:	
  1843  0070                     ?_PIN_MANAGER_Initialize:	
  1844  0070                     ?_OSCILLATOR_Initialize:	
  1845                           ; 1 bytes @ 0x0
  1846                           
  1847  0070                     ?_TMR0_Initialize:	
  1848                           ; 1 bytes @ 0x0
  1849                           
  1850  0070                     ?_EUSART_Initialize:	
  1851                           ; 1 bytes @ 0x0
  1852                           
  1853  0070                     ?_TMR0_ISR:	
  1854                           ; 1 bytes @ 0x0
  1855                           
  1856  0070                     ?_EUSART_Transmit_ISR:	
  1857                           ; 1 bytes @ 0x0
  1858                           
  1859  0070                     ??_EUSART_Transmit_ISR:	
  1860                           ; 1 bytes @ 0x0
  1861                           
  1862  0070                     ?_EUSART_Receive_ISR:	
  1863                           ; 1 bytes @ 0x0
  1864                           
  1865  0070                     ??_EUSART_Receive_ISR:	
  1866                           ; 1 bytes @ 0x0
  1867                           
  1868  0070                     ?_TMR0_DefaultInterruptHandler:	
  1869                           ; 1 bytes @ 0x0
  1870                           
  1871  0070                     ??_TMR0_DefaultInterruptHandler:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  0070                     ?_TMR0_CallBack:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0070                     ?_LED_set_state:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  0070                     ?_my10msTimerISR:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  0070                     ?_GPS_Initialize:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  0070                     ?_GPS_read_speed:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  0070                     ?_LED_update_loop:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892  0070                     ??_LED_update_loop:	
  1893                           ; 1 bytes @ 0x0
  1894                           
  1895  0070                     ?_button_update_loop:	
  1896                           ; 1 bytes @ 0x0
  1897                           
  1898  0070                     ?_SYSTEM_Initialize:	
  1899                           ; 1 bytes @ 0x0
  1900                           
  1901  0070                     ?_INTERRUPT_InterruptManager:	
  1902                           ; 1 bytes @ 0x0
  1903                           
  1904  0070                     ?_EUSART_Read:	
  1905                           ; 1 bytes @ 0x0
  1906                           
  1907  0070                     ?_EUSART_Write:	
  1908                           ; 1 bytes @ 0x0
  1909                           
  1910  0070                     ?_putch:	
  1911                           ; 1 bytes @ 0x0
  1912                           
  1913  0070                     ?_main:	
  1914                           ; 1 bytes @ 0x0
  1915                           
  1916  0070                     ?_get_button_state:	
  1917                           ; 1 bytes @ 0x0
  1918                           
  1919  0070                     ??_get_button_state:	
  1920                           ; 1 bytes @ 0x0
  1921                           
  1922  0070                     get_button_state@state:	
  1923                           ; 1 bytes @ 0x0
  1924                           
  1925                           
  1926                           ; 1 bytes @ 0x0
  1927  0070                     	ds	1
  1928  0071                     ??_button_update_loop:	
  1929                           
  1930                           ; 1 bytes @ 0x1
  1931  0071                     	ds	1
  1932  0072                     button_update_loop@current_state:	
  1933                           
  1934                           ; 1 bytes @ 0x2
  1935  0072                     	ds	1
  1936  0073                     ??_TMR0_ISR:	
  1937  0073                     ??_TMR0_CallBack:	
  1938                           ; 1 bytes @ 0x3
  1939                           
  1940  0073                     ??_my10msTimerISR:	
  1941                           ; 1 bytes @ 0x3
  1942                           
  1943  0073                     ??_INTERRUPT_InterruptManager:	
  1944                           ; 1 bytes @ 0x3
  1945                           
  1946                           
  1947                           ; 1 bytes @ 0x3
  1948  0073                     	ds	1
  1949  0074                     ??_PIN_MANAGER_Initialize:	
  1950  0074                     ??_OSCILLATOR_Initialize:	
  1951                           ; 1 bytes @ 0x4
  1952                           
  1953  0074                     ??_EUSART_Initialize:	
  1954                           ; 1 bytes @ 0x4
  1955                           
  1956  0074                     ?_TMR0_SetInterruptHandler:	
  1957                           ; 1 bytes @ 0x4
  1958                           
  1959  0074                     ??_LED_set_state:	
  1960                           ; 1 bytes @ 0x4
  1961                           
  1962  0074                     ??_EUSART_Read:	
  1963                           ; 1 bytes @ 0x4
  1964                           
  1965  0074                     ??_EUSART_Write:	
  1966                           ; 1 bytes @ 0x4
  1967                           
  1968  0074                     ??___wmul:	
  1969                           ; 1 bytes @ 0x4
  1970                           
  1971  0074                     ??___lmul:	
  1972                           ; 1 bytes @ 0x4
  1973                           
  1974  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  1975                           ; 1 bytes @ 0x4
  1976                           
  1977  0074                     ___wmul@product:	
  1978                           ; 2 bytes @ 0x4
  1979                           
  1980                           
  1981                           ; 2 bytes @ 0x4
  1982  0074                     	ds	1
  1983  0075                     EUSART_Read@readValue:	
  1984  0075                     EUSART_Write@txData:	
  1985                           ; 1 bytes @ 0x5
  1986                           
  1987  0075                     LED_set_state@new_state:	
  1988                           ; 1 bytes @ 0x5
  1989                           
  1990                           
  1991                           ; 1 bytes @ 0x5
  1992  0075                     	ds	1
  1993  0076                     ??_TMR0_SetInterruptHandler:	
  1994  0076                     ??_SYSTEM_Initialize:	
  1995                           ; 1 bytes @ 0x6
  1996                           
  1997  0076                     ??_putch:	
  1998                           ; 1 bytes @ 0x6
  1999                           
  2000                           
  2001                           	psect	cstackBANK0
  2002  0020                     __pcstackBANK0:	
  2003                           ; 1 bytes @ 0x6
  2004                           
  2005  0020                     ??_TMR0_Initialize:	
  2006  0020                     ?___wmul:	
  2007                           ; 1 bytes @ 0x0
  2008                           
  2009  0020                     ?_convert_to_fp:	
  2010                           ; 2 bytes @ 0x0
  2011                           
  2012  0020                     ?___lmul:	
  2013                           ; 4 bytes @ 0x0
  2014                           
  2015  0020                     putch@txData:	
  2016                           ; 4 bytes @ 0x0
  2017                           
  2018  0020                     convert_to_fp@int_part:	
  2019                           ; 1 bytes @ 0x0
  2020                           
  2021  0020                     ___wmul@multiplier:	
  2022                           ; 2 bytes @ 0x0
  2023                           
  2024  0020                     ___lmul@multiplier:	
  2025                           ; 2 bytes @ 0x0
  2026                           
  2027                           
  2028                           ; 4 bytes @ 0x0
  2029  0020                     	ds	1
  2030  0021                     ?_printf:	
  2031  0021                     printf@f:	
  2032                           ; 2 bytes @ 0x1
  2033                           
  2034                           
  2035                           ; 2 bytes @ 0x1
  2036  0021                     	ds	1
  2037  0022                     convert_to_fp@fract_part:	
  2038  0022                     ___wmul@multiplicand:	
  2039                           ; 2 bytes @ 0x2
  2040                           
  2041                           
  2042                           ; 2 bytes @ 0x2
  2043  0022                     	ds	1
  2044  0023                     ??_printf:	
  2045                           
  2046                           ; 1 bytes @ 0x3
  2047  0023                     	ds	1
  2048  0024                     ??_convert_to_fp:	
  2049  0024                     ___lmul@multiplicand:	
  2050                           ; 1 bytes @ 0x4
  2051                           
  2052                           
  2053                           ; 4 bytes @ 0x4
  2054  0024                     	ds	2
  2055  0026                     printf@ap:	
  2056                           
  2057                           ; 1 bytes @ 0x6
  2058  0026                     	ds	1
  2059  0027                     printf@c:	
  2060                           
  2061                           ; 1 bytes @ 0x7
  2062  0027                     	ds	1
  2063  0028                     ??_GPS_Initialize:	
  2064  0028                     ___lmul@product:	
  2065                           ; 1 bytes @ 0x8
  2066                           
  2067                           
  2068                           ; 4 bytes @ 0x8
  2069  0028                     	ds	3
  2070  002B                     GPS_Initialize@tmp:	
  2071                           
  2072                           ; 1 bytes @ 0xB
  2073  002B                     	ds	1
  2074  002C                     ?_multiply_fp:	
  2075  002C                     convert_to_fp@res_fract:	
  2076                           ; 4 bytes @ 0xC
  2077                           
  2078  002C                     multiply_fp@n1:	
  2079                           ; 2 bytes @ 0xC
  2080                           
  2081                           
  2082                           ; 4 bytes @ 0xC
  2083  002C                     	ds	2
  2084  002E                     convert_to_fp@i_bit:	
  2085                           
  2086                           ; 1 bytes @ 0xE
  2087  002E                     	ds	1
  2088  002F                     convert_to_fp@tmp_left:	
  2089                           
  2090                           ; 2 bytes @ 0xF
  2091  002F                     	ds	1
  2092  0030                     multiply_fp@n2:	
  2093                           
  2094                           ; 4 bytes @ 0x10
  2095  0030                     	ds	1
  2096  0031                     convert_to_fp@res:	
  2097                           
  2098                           ; 4 bytes @ 0x11
  2099  0031                     	ds	3
  2100  0034                     ??_multiply_fp:	
  2101                           
  2102                           ; 1 bytes @ 0x14
  2103  0034                     	ds	1
  2104  0035                     ??_GPS_read_speed:	
  2105                           
  2106                           ; 1 bytes @ 0x15
  2107  0035                     	ds	2
  2108  0037                     GPS_read_speed@before_dot:	
  2109                           
  2110                           ; 1 bytes @ 0x17
  2111  0037                     	ds	1
  2112  0038                     GPS_read_speed@no_more_checksum:	
  2113                           
  2114                           ; 1 bytes @ 0x18
  2115  0038                     	ds	1
  2116  0039                     GPS_read_speed@read_speed_int:	
  2117                           
  2118                           ; 2 bytes @ 0x19
  2119  0039                     	ds	2
  2120  003B                     GPS_read_speed@read_speed_fra:	
  2121                           
  2122                           ; 2 bytes @ 0x1B
  2123  003B                     	ds	2
  2124  003D                     GPS_read_speed@checksum2:	
  2125                           
  2126                           ; 1 bytes @ 0x1D
  2127  003D                     	ds	1
  2128  003E                     GPS_read_speed@checksum:	
  2129                           
  2130                           ; 1 bytes @ 0x1E
  2131  003E                     	ds	1
  2132  003F                     GPS_read_speed@buffer:	
  2133                           
  2134                           ; 6 bytes @ 0x1F
  2135  003F                     	ds	3
  2136  0042                     multiply_fp@res:	
  2137                           
  2138                           ; 4 bytes @ 0x22
  2139  0042                     	ds	3
  2140  0045                     GPS_read_speed@i_buff2:	
  2141                           
  2142                           ; 1 bytes @ 0x25
  2143  0045                     	ds	1
  2144  0046                     GPS_read_speed@i_buff:	
  2145                           
  2146                           ; 1 bytes @ 0x26
  2147  0046                     	ds	1
  2148  0047                     GPS_read_speed@m_char:	
  2149                           
  2150                           ; 1 bytes @ 0x27
  2151  0047                     	ds	1
  2152  0048                     ??_main:	
  2153                           
  2154                           ; 1 bytes @ 0x28
  2155  0048                     	ds	2
  2156                           
  2157                           	psect	maintext
  2158  0490                     __pmaintext:	
  2159 ;;
  2160 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2161 ;;
  2162 ;; *************** function _main *****************
  2163 ;; Defined at:
  2164 ;;		line 92 in file "main.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;		None
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : B1F/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2178 ;;      Params:         0       0       0       0       0       0
  2179 ;;      Locals:         0       0       0       0       0       0
  2180 ;;      Temps:          0       2       0       0       0       0
  2181 ;;      Totals:         0       2       0       0       0       0
  2182 ;;Total ram usage:        2 bytes
  2183 ;; Hardware stack levels required when called:   10
  2184 ;; This function calls:
  2185 ;;		_GPS_Initialize
  2186 ;;		_GPS_read_speed
  2187 ;;		_LED_set_state
  2188 ;;		_SYSTEM_Initialize
  2189 ;;		_TMR0_SetInterruptHandler
  2190 ;;		_multiply_fp
  2191 ;; This function is called by:
  2192 ;;		Startup code after reset
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _main
  2198  0490                     _main:	
  2199                           
  2200                           ;main.c: 94: conf.max_pwm = 0x00;
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2204  0490  0021               	movlb	1	; select bank1
  2205  0491  01A1               	clrf	(_conf^(0+128)+1)
  2206  0492  01A2               	clrf	((_conf+1)^(0+128)+1)
  2207                           
  2208                           ;main.c: 106: SYSTEM_Initialize();
  2209  0493  3187  2706  3184   	fcall	_SYSTEM_Initialize
  2210                           
  2211                           ;main.c: 108: LED_set_state(manual_mode);
  2212  0496  3004               	movlw	4
  2213  0497  3186  261C  3184   	fcall	_LED_set_state
  2214                           
  2215                           ;main.c: 109: do { LATA2 = 0; } while(0);
  2216  049A  0022               	movlb	2	; select bank2
  2217  049B  110C               	bcf	12,2	;volatile
  2218                           
  2219                           ;main.c: 111: TMR0_SetInterruptHandler(my10msTimerISR);
  2220  049C  3043               	movlw	low _my10msTimerISR
  2221  049D  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2222  049E  3007               	movlw	high _my10msTimerISR
  2223  049F  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2224  04A0  3187  2737  3184   	fcall	_TMR0_SetInterruptHandler
  2225                           
  2226                           ;main.c: 113: (INTCONbits.GIE = 1);
  2227  04A3  178B               	bsf	11,7	;volatile
  2228                           
  2229                           ;main.c: 115: (INTCONbits.PEIE = 1);
  2230  04A4  170B               	bsf	11,6	;volatile
  2231                           
  2232                           ;main.c: 117: GPS_Initialize();
  2233  04A5  3185  253F  3184   	fcall	_GPS_Initialize
  2234                           
  2235                           ;main.c: 119: speed = 0;
  2236  04A8  3000               	movlw	0
  2237  04A9  0020               	movlb	0	; select bank0
  2238  04AA  00E4               	movwf	_speed+3
  2239  04AB  3000               	movlw	0
  2240  04AC  00E3               	movwf	_speed+2
  2241  04AD  3000               	movlw	0
  2242  04AE  00E2               	movwf	_speed+1
  2243  04AF  3000               	movlw	0
  2244  04B0  00E1               	movwf	_speed
  2245  04B1                     l2943:	
  2246                           ;main.c: 121: while (1)
  2247                           
  2248                           
  2249                           ;main.c: 122: {
  2250                           ;main.c: 124: if (GPS_read_speed())
  2251  04B1  3180  2042  3184   	fcall	_GPS_read_speed
  2252  04B4  3A00               	xorlw	0
  2253  04B5  1903               	skipnz
  2254  04B6  2CB1               	goto	l2943
  2255                           
  2256                           ;main.c: 125: {
  2257                           ;main.c: 127: if (conf.use_mph > 0)
  2258  04B7  0021               	movlb	1	; select bank1
  2259  04B8  0820               	movf	_conf^(0+128),w
  2260  04B9  1903               	btfsc	3,2
  2261  04BA  2CDC               	goto	l2949
  2262                           
  2263                           ;main.c: 128: speed = multiply_fp(speed, ratio_mph);
  2264  04BB  0020               	movlb	0	; select bank0
  2265  04BC  0864               	movf	_speed+3,w
  2266  04BD  00AF               	movwf	multiply_fp@n1+3
  2267  04BE  0863               	movf	_speed+2,w
  2268  04BF  00AE               	movwf	multiply_fp@n1+2
  2269  04C0  0862               	movf	_speed+1,w
  2270  04C1  00AD               	movwf	multiply_fp@n1+1
  2271  04C2  0861               	movf	_speed,w
  2272  04C3  00AC               	movwf	multiply_fp@n1
  2273  04C4  30F3               	movlw	low (_ratio_mph| (0+32768))
  2274  04C5  0084               	movwf	4
  2275  04C6  3084               	movlw	high (_ratio_mph| (0+32768))
  2276  04C7  0085               	movwf	5
  2277  04C8  3F00               	moviw [0]fsr0
  2278  04C9  00B0               	movwf	multiply_fp@n2
  2279  04CA  3F01               	moviw [1]fsr0
  2280  04CB  00B1               	movwf	multiply_fp@n2+1
  2281  04CC  3F02               	moviw [2]fsr0
  2282  04CD  00B2               	movwf	multiply_fp@n2+2
  2283  04CE  3F03               	moviw [3]fsr0
  2284  04CF  00B3               	movwf	multiply_fp@n2+3
  2285  04D0  3182  2290  3184   	fcall	_multiply_fp
  2286  04D3  0020               	movlb	0	; select bank0
  2287  04D4  082F               	movf	?_multiply_fp+3,w
  2288  04D5  00E4               	movwf	_speed+3
  2289  04D6  082E               	movf	?_multiply_fp+2,w
  2290  04D7  00E3               	movwf	_speed+2
  2291  04D8  082D               	movf	?_multiply_fp+1,w
  2292  04D9  00E2               	movwf	_speed+1
  2293  04DA  082C               	movf	?_multiply_fp,w
  2294  04DB  00E1               	movwf	_speed
  2295  04DC                     l2949:	
  2296                           ;main.c: 130: do { LATA2 = 1; } while(0);
  2297                           
  2298  04DC  0022               	movlb	2	; select bank2
  2299  04DD  150C               	bsf	12,2	;volatile
  2300                           
  2301                           ;main.c: 131: _delay((unsigned long)((20)*(32000000/4000.0)));
  2302  04DE  30D0               	movlw	208
  2303  04DF  0020               	movlb	0	; select bank0
  2304  04E0  00C9               	movwf	??_main+1
  2305  04E1  30C9               	movlw	201
  2306  04E2  00C8               	movwf	??_main
  2307  04E3                     u3737:	
  2308  04E3  0BC8               	decfsz	??_main,f
  2309  04E4  2CE3               	goto	u3737
  2310  04E5  0BC9               	decfsz	??_main+1,f
  2311  04E6  2CE3               	goto	u3737
  2312  04E7  3200               	nop2
  2313                           
  2314                           ;main.c: 132: do { LATA2 = 0; } while(0);
  2315  04E8  0022               	movlb	2	; select bank2
  2316  04E9  110C               	bcf	12,2	;volatile
  2317  04EA  2CB1               	goto	l2943
  2318  04EB                     __end_of_main:	
  2319                           
  2320                           	psect	text1
  2321  0290                     __ptext1:	
  2322 ;; *************** function _multiply_fp *****************
  2323 ;; Defined at:
  2324 ;;		line 46 in file "fixed_point.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  n1              4   12[BANK0 ] long 
  2327 ;;  n2              4   16[BANK0 ] long 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  res             4   34[BANK0 ] long 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  4   12[BANK0 ] long 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0, pclath, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2339 ;;      Params:         0       8       0       0       0       0
  2340 ;;      Locals:         0       4       0       0       0       0
  2341 ;;      Temps:          0      14       0       0       0       0
  2342 ;;      Totals:         0      26       0       0       0       0
  2343 ;;Total ram usage:       26 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    7
  2346 ;; This function calls:
  2347 ;;		___lmul
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;;		_reciprocal_fp
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           
  2355                           ;psect for function _multiply_fp
  2356  0290                     _multiply_fp:	
  2357                           
  2358                           ;fixed_point.c: 50: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  2362  0290  0020               	movlb	0	; select bank0
  2363  0291  082C               	movf	multiply_fp@n1,w
  2364  0292  00B4               	movwf	??_multiply_fp
  2365  0293  082D               	movf	multiply_fp@n1+1,w
  2366  0294  00B5               	movwf	??_multiply_fp+1
  2367  0295  082E               	movf	multiply_fp@n1+2,w
  2368  0296  00B6               	movwf	??_multiply_fp+2
  2369  0297  082F               	movf	multiply_fp@n1+3,w
  2370  0298  00B7               	movwf	??_multiply_fp+3
  2371  0299  3010               	movlw	16
  2372  029A  00B8               	movwf	??_multiply_fp+4
  2373  029B                     u3505:	
  2374  029B  37B7               	asrf	??_multiply_fp+3,f
  2375  029C  0CB6               	rrf	??_multiply_fp+2,f
  2376  029D  0CB5               	rrf	??_multiply_fp+1,f
  2377  029E  0CB4               	rrf	??_multiply_fp,f
  2378  029F  0BB8               	decfsz	??_multiply_fp+4,f
  2379  02A0  2A9B               	goto	u3505
  2380  02A1  0837               	movf	??_multiply_fp+3,w
  2381  02A2  00A3               	movwf	___lmul@multiplier+3
  2382  02A3  0836               	movf	??_multiply_fp+2,w
  2383  02A4  00A2               	movwf	___lmul@multiplier+2
  2384  02A5  0835               	movf	??_multiply_fp+1,w
  2385  02A6  00A1               	movwf	___lmul@multiplier+1
  2386  02A7  0834               	movf	??_multiply_fp,w
  2387  02A8  00A0               	movwf	___lmul@multiplier
  2388  02A9  0830               	movf	multiply_fp@n2,w
  2389  02AA  00B9               	movwf	??_multiply_fp+5
  2390  02AB  0831               	movf	multiply_fp@n2+1,w
  2391  02AC  00BA               	movwf	??_multiply_fp+6
  2392  02AD  0832               	movf	multiply_fp@n2+2,w
  2393  02AE  00BB               	movwf	??_multiply_fp+7
  2394  02AF  0833               	movf	multiply_fp@n2+3,w
  2395  02B0  00BC               	movwf	??_multiply_fp+8
  2396  02B1  3010               	movlw	16
  2397  02B2  00BD               	movwf	??_multiply_fp+9
  2398  02B3                     u3515:	
  2399  02B3  37BC               	asrf	??_multiply_fp+8,f
  2400  02B4  0CBB               	rrf	??_multiply_fp+7,f
  2401  02B5  0CBA               	rrf	??_multiply_fp+6,f
  2402  02B6  0CB9               	rrf	??_multiply_fp+5,f
  2403  02B7  0BBD               	decfsz	??_multiply_fp+9,f
  2404  02B8  2AB3               	goto	u3515
  2405  02B9  083C               	movf	??_multiply_fp+8,w
  2406  02BA  00A7               	movwf	___lmul@multiplicand+3
  2407  02BB  083B               	movf	??_multiply_fp+7,w
  2408  02BC  00A6               	movwf	___lmul@multiplicand+2
  2409  02BD  083A               	movf	??_multiply_fp+6,w
  2410  02BE  00A5               	movwf	___lmul@multiplicand+1
  2411  02BF  0839               	movf	??_multiply_fp+5,w
  2412  02C0  00A4               	movwf	___lmul@multiplicand
  2413  02C1  3185  2584  3182   	fcall	___lmul
  2414  02C4  0020               	movlb	0	; select bank0
  2415  02C5  0820               	movf	?___lmul,w
  2416  02C6  00BE               	movwf	??_multiply_fp+10
  2417  02C7  0821               	movf	?___lmul+1,w
  2418  02C8  00BF               	movwf	??_multiply_fp+11
  2419  02C9  0822               	movf	?___lmul+2,w
  2420  02CA  00C0               	movwf	??_multiply_fp+12
  2421  02CB  0823               	movf	?___lmul+3,w
  2422  02CC  00C1               	movwf	??_multiply_fp+13
  2423  02CD  3010               	movlw	16
  2424  02CE                     u3525:	
  2425  02CE  35BE               	lslf	??_multiply_fp+10,f
  2426  02CF  0DBF               	rlf	??_multiply_fp+11,f
  2427  02D0  0DC0               	rlf	??_multiply_fp+12,f
  2428  02D1  0DC1               	rlf	??_multiply_fp+13,f
  2429  02D2  0B89               	decfsz	9,f
  2430  02D3  2ACE               	goto	u3525
  2431  02D4  0841               	movf	??_multiply_fp+13,w
  2432  02D5  00C5               	movwf	multiply_fp@res+3
  2433  02D6  0840               	movf	??_multiply_fp+12,w
  2434  02D7  00C4               	movwf	multiply_fp@res+2
  2435  02D8  083F               	movf	??_multiply_fp+11,w
  2436  02D9  00C3               	movwf	multiply_fp@res+1
  2437  02DA  083E               	movf	??_multiply_fp+10,w
  2438  02DB  00C2               	movwf	multiply_fp@res
  2439                           
  2440                           ;fixed_point.c: 51: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  2441  02DC  082C               	movf	multiply_fp@n1,w
  2442  02DD  00B4               	movwf	??_multiply_fp
  2443  02DE  082D               	movf	multiply_fp@n1+1,w
  2444  02DF  00B5               	movwf	??_multiply_fp+1
  2445  02E0  082E               	movf	multiply_fp@n1+2,w
  2446  02E1  00B6               	movwf	??_multiply_fp+2
  2447  02E2  082F               	movf	multiply_fp@n1+3,w
  2448  02E3  00B7               	movwf	??_multiply_fp+3
  2449  02E4  3010               	movlw	16
  2450  02E5  00B8               	movwf	??_multiply_fp+4
  2451  02E6                     u3535:	
  2452  02E6  37B7               	asrf	??_multiply_fp+3,f
  2453  02E7  0CB6               	rrf	??_multiply_fp+2,f
  2454  02E8  0CB5               	rrf	??_multiply_fp+1,f
  2455  02E9  0CB4               	rrf	??_multiply_fp,f
  2456  02EA  0BB8               	decfsz	??_multiply_fp+4,f
  2457  02EB  2AE6               	goto	u3535
  2458  02EC  0837               	movf	??_multiply_fp+3,w
  2459  02ED  00A3               	movwf	___lmul@multiplier+3
  2460  02EE  0836               	movf	??_multiply_fp+2,w
  2461  02EF  00A2               	movwf	___lmul@multiplier+2
  2462  02F0  0835               	movf	??_multiply_fp+1,w
  2463  02F1  00A1               	movwf	___lmul@multiplier+1
  2464  02F2  0834               	movf	??_multiply_fp,w
  2465  02F3  00A0               	movwf	___lmul@multiplier
  2466  02F4  30FF               	movlw	255
  2467  02F5  0530               	andwf	multiply_fp@n2,w
  2468  02F6  00A4               	movwf	___lmul@multiplicand
  2469  02F7  30FF               	movlw	255
  2470  02F8  0531               	andwf	multiply_fp@n2+1,w
  2471  02F9  00A5               	movwf	___lmul@multiplicand+1
  2472  02FA  3000               	movlw	0
  2473  02FB  0532               	andwf	multiply_fp@n2+2,w
  2474  02FC  00A6               	movwf	___lmul@multiplicand+2
  2475  02FD  3000               	movlw	0
  2476  02FE  0533               	andwf	multiply_fp@n2+3,w
  2477  02FF  00A7               	movwf	___lmul@multiplicand+3
  2478  0300  3185  2584  3182   	fcall	___lmul
  2479  0303  0020               	movlb	0	; select bank0
  2480  0304  0820               	movf	?___lmul,w
  2481  0305  07C2               	addwf	multiply_fp@res,f
  2482  0306  0821               	movf	?___lmul+1,w
  2483  0307  3DC3               	addwfc	multiply_fp@res+1,f
  2484  0308  0822               	movf	?___lmul+2,w
  2485  0309  3DC4               	addwfc	multiply_fp@res+2,f
  2486  030A  0823               	movf	?___lmul+3,w
  2487  030B  3DC5               	addwfc	multiply_fp@res+3,f
  2488                           
  2489                           ;fixed_point.c: 52: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  2490  030C  0830               	movf	multiply_fp@n2,w
  2491  030D  00B4               	movwf	??_multiply_fp
  2492  030E  0831               	movf	multiply_fp@n2+1,w
  2493  030F  00B5               	movwf	??_multiply_fp+1
  2494  0310  0832               	movf	multiply_fp@n2+2,w
  2495  0311  00B6               	movwf	??_multiply_fp+2
  2496  0312  0833               	movf	multiply_fp@n2+3,w
  2497  0313  00B7               	movwf	??_multiply_fp+3
  2498  0314  3010               	movlw	16
  2499  0315  00B8               	movwf	??_multiply_fp+4
  2500  0316                     u3545:	
  2501  0316  37B7               	asrf	??_multiply_fp+3,f
  2502  0317  0CB6               	rrf	??_multiply_fp+2,f
  2503  0318  0CB5               	rrf	??_multiply_fp+1,f
  2504  0319  0CB4               	rrf	??_multiply_fp,f
  2505  031A  0BB8               	decfsz	??_multiply_fp+4,f
  2506  031B  2B16               	goto	u3545
  2507  031C  0837               	movf	??_multiply_fp+3,w
  2508  031D  00A3               	movwf	___lmul@multiplier+3
  2509  031E  0836               	movf	??_multiply_fp+2,w
  2510  031F  00A2               	movwf	___lmul@multiplier+2
  2511  0320  0835               	movf	??_multiply_fp+1,w
  2512  0321  00A1               	movwf	___lmul@multiplier+1
  2513  0322  0834               	movf	??_multiply_fp,w
  2514  0323  00A0               	movwf	___lmul@multiplier
  2515  0324  30FF               	movlw	255
  2516  0325  052C               	andwf	multiply_fp@n1,w
  2517  0326  00A4               	movwf	___lmul@multiplicand
  2518  0327  30FF               	movlw	255
  2519  0328  052D               	andwf	multiply_fp@n1+1,w
  2520  0329  00A5               	movwf	___lmul@multiplicand+1
  2521  032A  3000               	movlw	0
  2522  032B  052E               	andwf	multiply_fp@n1+2,w
  2523  032C  00A6               	movwf	___lmul@multiplicand+2
  2524  032D  3000               	movlw	0
  2525  032E  052F               	andwf	multiply_fp@n1+3,w
  2526  032F  00A7               	movwf	___lmul@multiplicand+3
  2527  0330  3185  2584  3182   	fcall	___lmul
  2528  0333  0020               	movlb	0	; select bank0
  2529  0334  0820               	movf	?___lmul,w
  2530  0335  07C2               	addwf	multiply_fp@res,f
  2531  0336  0821               	movf	?___lmul+1,w
  2532  0337  3DC3               	addwfc	multiply_fp@res+1,f
  2533  0338  0822               	movf	?___lmul+2,w
  2534  0339  3DC4               	addwfc	multiply_fp@res+2,f
  2535  033A  0823               	movf	?___lmul+3,w
  2536  033B  3DC5               	addwfc	multiply_fp@res+3,f
  2537                           
  2538                           ;fixed_point.c: 53: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  2539  033C  30FF               	movlw	255
  2540  033D  00B4               	movwf	??_multiply_fp
  2541  033E  30FF               	movlw	255
  2542  033F  00B5               	movwf	??_multiply_fp+1
  2543  0340  3000               	movlw	0
  2544  0341  00B6               	movwf	??_multiply_fp+2
  2545  0342  3000               	movlw	0
  2546  0343  00B7               	movwf	??_multiply_fp+3
  2547  0344  30FF               	movlw	255
  2548  0345  052C               	andwf	multiply_fp@n1,w
  2549  0346  00A0               	movwf	___lmul@multiplier
  2550  0347  30FF               	movlw	255
  2551  0348  052D               	andwf	multiply_fp@n1+1,w
  2552  0349  00A1               	movwf	___lmul@multiplier+1
  2553  034A  3000               	movlw	0
  2554  034B  052E               	andwf	multiply_fp@n1+2,w
  2555  034C  00A2               	movwf	___lmul@multiplier+2
  2556  034D  3000               	movlw	0
  2557  034E  052F               	andwf	multiply_fp@n1+3,w
  2558  034F  00A3               	movwf	___lmul@multiplier+3
  2559  0350  30FF               	movlw	255
  2560  0351  0530               	andwf	multiply_fp@n2,w
  2561  0352  00A4               	movwf	___lmul@multiplicand
  2562  0353  30FF               	movlw	255
  2563  0354  0531               	andwf	multiply_fp@n2+1,w
  2564  0355  00A5               	movwf	___lmul@multiplicand+1
  2565  0356  3000               	movlw	0
  2566  0357  0532               	andwf	multiply_fp@n2+2,w
  2567  0358  00A6               	movwf	___lmul@multiplicand+2
  2568  0359  3000               	movlw	0
  2569  035A  0533               	andwf	multiply_fp@n2+3,w
  2570  035B  00A7               	movwf	___lmul@multiplicand+3
  2571  035C  3185  2584  3182   	fcall	___lmul
  2572  035F  0020               	movlb	0	; select bank0
  2573  0360  0820               	movf	?___lmul,w
  2574  0361  00B8               	movwf	??_multiply_fp+4
  2575  0362  0821               	movf	?___lmul+1,w
  2576  0363  00B9               	movwf	??_multiply_fp+5
  2577  0364  0822               	movf	?___lmul+2,w
  2578  0365  00BA               	movwf	??_multiply_fp+6
  2579  0366  0823               	movf	?___lmul+3,w
  2580  0367  00BB               	movwf	??_multiply_fp+7
  2581  0368  3010               	movlw	16
  2582  0369  00BC               	movwf	??_multiply_fp+8
  2583  036A                     u3555:	
  2584  036A  37BB               	asrf	??_multiply_fp+7,f
  2585  036B  0CBA               	rrf	??_multiply_fp+6,f
  2586  036C  0CB9               	rrf	??_multiply_fp+5,f
  2587  036D  0CB8               	rrf	??_multiply_fp+4,f
  2588  036E  0BBC               	decfsz	??_multiply_fp+8,f
  2589  036F  2B6A               	goto	u3555
  2590  0370  0838               	movf	??_multiply_fp+4,w
  2591  0371  05B4               	andwf	??_multiply_fp,f
  2592  0372  0839               	movf	??_multiply_fp+5,w
  2593  0373  05B5               	andwf	??_multiply_fp+1,f
  2594  0374  083A               	movf	??_multiply_fp+6,w
  2595  0375  05B6               	andwf	??_multiply_fp+2,f
  2596  0376  083B               	movf	??_multiply_fp+7,w
  2597  0377  05B7               	andwf	??_multiply_fp+3,f
  2598  0378  0834               	movf	??_multiply_fp,w
  2599  0379  07C2               	addwf	multiply_fp@res,f
  2600  037A  0835               	movf	??_multiply_fp+1,w
  2601  037B  3DC3               	addwfc	multiply_fp@res+1,f
  2602  037C  0836               	movf	??_multiply_fp+2,w
  2603  037D  3DC4               	addwfc	multiply_fp@res+2,f
  2604  037E  0837               	movf	??_multiply_fp+3,w
  2605  037F  3DC5               	addwfc	multiply_fp@res+3,f
  2606                           
  2607                           ;fixed_point.c: 54: return res;
  2608  0380  0845               	movf	multiply_fp@res+3,w
  2609  0381  00AF               	movwf	?_multiply_fp+3
  2610  0382  0844               	movf	multiply_fp@res+2,w
  2611  0383  00AE               	movwf	?_multiply_fp+2
  2612  0384  0843               	movf	multiply_fp@res+1,w
  2613  0385  00AD               	movwf	?_multiply_fp+1
  2614  0386  0842               	movf	multiply_fp@res,w
  2615  0387  00AC               	movwf	?_multiply_fp
  2616  0388  0008               	return
  2617  0389                     __end_of_multiply_fp:	
  2618                           
  2619                           	psect	text2
  2620  0584                     __ptext2:	
  2621 ;; *************** function ___lmul *****************
  2622 ;; Defined at:
  2623 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul32.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2626 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  product         4    8[BANK0 ] unsigned long 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  4    0[BANK0 ] unsigned long 
  2631 ;; Registers used:
  2632 ;;		wreg, status,2, status,0
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2638 ;;      Params:         0       8       0       0       0       0
  2639 ;;      Locals:         0       4       0       0       0       0
  2640 ;;      Temps:          0       0       0       0       0       0
  2641 ;;      Totals:         0      12       0       0       0       0
  2642 ;;Total ram usage:       12 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    6
  2645 ;; This function calls:
  2646 ;;		Nothing
  2647 ;; This function is called by:
  2648 ;;		_multiply_fp
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function ___lmul
  2654  0584                     ___lmul:	
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2658  0584  3000               	movlw	0
  2659  0585  0020               	movlb	0	; select bank0
  2660  0586  00AB               	movwf	___lmul@product+3
  2661  0587  3000               	movlw	0
  2662  0588  00AA               	movwf	___lmul@product+2
  2663  0589  3000               	movlw	0
  2664  058A  00A9               	movwf	___lmul@product+1
  2665  058B  3000               	movlw	0
  2666  058C  00A8               	movwf	___lmul@product
  2667  058D                     l2565:	
  2668  058D  1C20               	btfss	___lmul@multiplier,0
  2669  058E  2D97               	goto	l2569
  2670  058F  0824               	movf	___lmul@multiplicand,w
  2671  0590  07A8               	addwf	___lmul@product,f
  2672  0591  0825               	movf	___lmul@multiplicand+1,w
  2673  0592  3DA9               	addwfc	___lmul@product+1,f
  2674  0593  0826               	movf	___lmul@multiplicand+2,w
  2675  0594  3DAA               	addwfc	___lmul@product+2,f
  2676  0595  0827               	movf	___lmul@multiplicand+3,w
  2677  0596  3DAB               	addwfc	___lmul@product+3,f
  2678  0597                     l2569:	
  2679  0597  3001               	movlw	1
  2680  0598                     u2905:	
  2681  0598  35A4               	lslf	___lmul@multiplicand,f
  2682  0599  0DA5               	rlf	___lmul@multiplicand+1,f
  2683  059A  0DA6               	rlf	___lmul@multiplicand+2,f
  2684  059B  0DA7               	rlf	___lmul@multiplicand+3,f
  2685  059C  0B89               	decfsz	9,f
  2686  059D  2D98               	goto	u2905
  2687  059E  3001               	movlw	1
  2688  059F                     u2915:	
  2689  059F  36A3               	lsrf	___lmul@multiplier+3,f
  2690  05A0  0CA2               	rrf	___lmul@multiplier+2,f
  2691  05A1  0CA1               	rrf	___lmul@multiplier+1,f
  2692  05A2  0CA0               	rrf	___lmul@multiplier,f
  2693  05A3  0B89               	decfsz	9,f
  2694  05A4  2D9F               	goto	u2915
  2695  05A5  0823               	movf	___lmul@multiplier+3,w
  2696  05A6  0422               	iorwf	___lmul@multiplier+2,w
  2697  05A7  0421               	iorwf	___lmul@multiplier+1,w
  2698  05A8  0420               	iorwf	___lmul@multiplier,w
  2699  05A9  1D03               	skipz
  2700  05AA  2D8D               	goto	l2565
  2701  05AB  082B               	movf	___lmul@product+3,w
  2702  05AC  00A3               	movwf	?___lmul+3
  2703  05AD  082A               	movf	___lmul@product+2,w
  2704  05AE  00A2               	movwf	?___lmul+2
  2705  05AF  0829               	movf	___lmul@product+1,w
  2706  05B0  00A1               	movwf	?___lmul+1
  2707  05B1  0828               	movf	___lmul@product,w
  2708  05B2  00A0               	movwf	?___lmul
  2709  05B3  0008               	return
  2710  05B4                     __end_of___lmul:	
  2711                           
  2712                           	psect	text3
  2713  0706                     __ptext3:	
  2714 ;; *************** function _SYSTEM_Initialize *****************
  2715 ;; Defined at:
  2716 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;		None
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      void 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2730 ;;      Params:         0       0       0       0       0       0
  2731 ;;      Locals:         0       0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0
  2733 ;;      Totals:         0       0       0       0       0       0
  2734 ;;Total ram usage:        0 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    8
  2737 ;; This function calls:
  2738 ;;		_EUSART_Initialize
  2739 ;;		_OSCILLATOR_Initialize
  2740 ;;		_PIN_MANAGER_Initialize
  2741 ;;		_TMR0_Initialize
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           
  2748                           ;psect for function _SYSTEM_Initialize
  2749  0706                     _SYSTEM_Initialize:	
  2750                           
  2751                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2755  0706  3186  26C5  3187   	fcall	_PIN_MANAGER_Initialize
  2756                           
  2757                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2758  0709  3187  2729  3187   	fcall	_OSCILLATOR_Initialize
  2759                           
  2760                           ;mcc.c: 74: TMR0_Initialize();
  2761  070C  3186  26DC  3187   	fcall	_TMR0_Initialize
  2762                           
  2763                           ;mcc.c: 75: EUSART_Initialize();
  2764  070F  3186  268F         	fcall	_EUSART_Initialize
  2765  0711  0008               	return
  2766  0712                     __end_of_SYSTEM_Initialize:	
  2767                           
  2768                           	psect	text4
  2769  06DC                     __ptext4:	
  2770 ;; *************** function _TMR0_Initialize *****************
  2771 ;; Defined at:
  2772 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2, status,0, pclath, cstack
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2786 ;;      Params:         0       0       0       0       0       0
  2787 ;;      Locals:         0       0       0       0       0       0
  2788 ;;      Temps:          0       1       0       0       0       0
  2789 ;;      Totals:         0       1       0       0       0       0
  2790 ;;Total ram usage:        1 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    7
  2793 ;; This function calls:
  2794 ;;		_TMR0_SetInterruptHandler
  2795 ;; This function is called by:
  2796 ;;		_SYSTEM_Initialize
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _TMR0_Initialize
  2802  06DC                     _TMR0_Initialize:	
  2803                           
  2804                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2808  06DC  0021               	movlb	1	; select bank1
  2809  06DD  0815               	movf	21,w	;volatile
  2810  06DE  39C0               	andlw	192
  2811  06DF  3817               	iorlw	23
  2812  06E0  0095               	movwf	21	;volatile
  2813                           
  2814                           ;tmr0.c: 71: TMR0 = 0x64;
  2815  06E1  3064               	movlw	100
  2816  06E2  0020               	movlb	0	; select bank0
  2817  06E3  0095               	movwf	21	;volatile
  2818                           
  2819                           ;tmr0.c: 74: timer0ReloadVal= 100;
  2820  06E4  3064               	movlw	100
  2821  06E5  00A0               	movwf	??_TMR0_Initialize
  2822  06E6  0820               	movf	??_TMR0_Initialize,w
  2823  06E7  00F9               	movwf	_timer0ReloadVal	;volatile
  2824                           
  2825                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  2826  06E8  110B               	bcf	11,2	;volatile
  2827                           
  2828                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  2829  06E9  168B               	bsf	11,5	;volatile
  2830                           
  2831                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2832  06EA  3049               	movlw	low _TMR0_DefaultInterruptHandler
  2833  06EB  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2834  06EC  3007               	movlw	high _TMR0_DefaultInterruptHandler
  2835  06ED  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2836  06EE  3187  2737         	fcall	_TMR0_SetInterruptHandler
  2837  06F0  0008               	return
  2838  06F1                     __end_of_TMR0_Initialize:	
  2839                           
  2840                           	psect	text5
  2841  0737                     __ptext5:	
  2842 ;; *************** function _TMR0_SetInterruptHandler *****************
  2843 ;; Defined at:
  2844 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  InterruptHan    2    4[COMMON] PTR void 
  2847 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2859 ;;      Params:         2       0       0       0       0       0
  2860 ;;      Locals:         0       0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0
  2862 ;;      Totals:         2       0       0       0       0       0
  2863 ;;Total ram usage:        2 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    6
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_TMR0_Initialize
  2870 ;;		_main
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _TMR0_SetInterruptHandler
  2876  0737                     _TMR0_SetInterruptHandler:	
  2877                           
  2878                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2882  0737  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2883  0738  0020               	movlb	0	; select bank0
  2884  0739  00E8               	movwf	_TMR0_InterruptHandler+1
  2885  073A  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2886  073B  00E7               	movwf	_TMR0_InterruptHandler
  2887  073C  0008               	return
  2888  073D                     __end_of_TMR0_SetInterruptHandler:	
  2889                           
  2890                           	psect	text6
  2891  06C5                     __ptext6:	
  2892 ;; *************** function _PIN_MANAGER_Initialize *****************
  2893 ;; Defined at:
  2894 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2908 ;;      Params:         0       0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0
  2911 ;;      Totals:         0       0       0       0       0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    6
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_SYSTEM_Initialize
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _PIN_MANAGER_Initialize
  2924  06C5                     _PIN_MANAGER_Initialize:	
  2925                           
  2926                           ;pin_manager.c: 51: LATB = 0x0;
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2930  06C5  0022               	movlb	2	; select bank2
  2931  06C6  018D               	clrf	13	;volatile
  2932                           
  2933                           ;pin_manager.c: 52: LATA = 0x0;
  2934  06C7  018C               	clrf	12	;volatile
  2935                           
  2936                           ;pin_manager.c: 53: ANSELA = 0x1F;
  2937  06C8  301F               	movlw	31
  2938  06C9  0023               	movlb	3	; select bank3
  2939  06CA  008C               	movwf	12	;volatile
  2940                           
  2941                           ;pin_manager.c: 54: ANSELB = 0xF8;
  2942  06CB  30F8               	movlw	248
  2943  06CC  008D               	movwf	13	;volatile
  2944                           
  2945                           ;pin_manager.c: 55: WPUA = 0x20;
  2946  06CD  3020               	movlw	32
  2947  06CE  0024               	movlb	4	; select bank4
  2948  06CF  008C               	movwf	12	;volatile
  2949                           
  2950                           ;pin_manager.c: 56: WPUB = 0xFF;
  2951  06D0  30FF               	movlw	255
  2952  06D1  008D               	movwf	13	;volatile
  2953                           
  2954                           ;pin_manager.c: 57: TRISB = 0xFF;
  2955  06D2  30FF               	movlw	255
  2956  06D3  0021               	movlb	1	; select bank1
  2957  06D4  008D               	movwf	13	;volatile
  2958                           
  2959                           ;pin_manager.c: 58: TRISA = 0xFB;
  2960  06D5  30FB               	movlw	251
  2961  06D6  008C               	movwf	12	;volatile
  2962                           
  2963                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  2964  06D7  1395               	bcf	21,7	;volatile
  2965                           
  2966                           ;pin_manager.c: 61: APFCON0 = 0x00;
  2967  06D8  0022               	movlb	2	; select bank2
  2968  06D9  019D               	clrf	29	;volatile
  2969                           
  2970                           ;pin_manager.c: 62: APFCON1 = 0x00;
  2971  06DA  019E               	clrf	30	;volatile
  2972  06DB  0008               	return
  2973  06DC                     __end_of_PIN_MANAGER_Initialize:	
  2974                           
  2975                           	psect	text7
  2976  0729                     __ptext7:	
  2977 ;; *************** function _OSCILLATOR_Initialize *****************
  2978 ;; Defined at:
  2979 ;;		line 78 in file "mcc_generated_files/mcc.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2993 ;;      Params:         0       0       0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0
  2996 ;;      Totals:         0       0       0       0       0       0
  2997 ;;Total ram usage:        0 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    6
  3000 ;; This function calls:
  3001 ;;		Nothing
  3002 ;; This function is called by:
  3003 ;;		_SYSTEM_Initialize
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _OSCILLATOR_Initialize
  3009  0729                     _OSCILLATOR_Initialize:	
  3010                           
  3011                           ;mcc.c: 81: OSCCON = 0x70;
  3012                           
  3013                           ;incstack = 0
  3014                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3015  0729  3070               	movlw	112
  3016  072A  0021               	movlb	1	; select bank1
  3017  072B  0099               	movwf	25	;volatile
  3018                           
  3019                           ;mcc.c: 83: OSCSTAT = 0x00;
  3020  072C  019A               	clrf	26	;volatile
  3021                           
  3022                           ;mcc.c: 85: OSCTUNE = 0x00;
  3023  072D  0198               	clrf	24	;volatile
  3024  072E                     l24:	
  3025                           ;mcc.c: 90: {
  3026                           
  3027                           ;mcc.c: 89: while(PLLR == 0)
  3028                           
  3029  072E  1B1A               	btfsc	26,6	;volatile
  3030  072F  0008               	return
  3031  0730  2F2E               	goto	l24
  3032  0731                     __end_of_OSCILLATOR_Initialize:	
  3033                           
  3034                           	psect	text8
  3035  068F                     __ptext8:	
  3036 ;; *************** function _EUSART_Initialize *****************
  3037 ;; Defined at:
  3038 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3052 ;;      Params:         0       0       0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0       0
  3054 ;;      Temps:          1       0       0       0       0       0
  3055 ;;      Totals:         1       0       0       0       0       0
  3056 ;;Total ram usage:        1 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    6
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_SYSTEM_Initialize
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           
  3067                           ;psect for function _EUSART_Initialize
  3068  068F                     _EUSART_Initialize:	
  3069                           
  3070                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3074  068F  0021               	movlb	1	; select bank1
  3075  0690  1291               	bcf	17,5	;volatile
  3076                           
  3077                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  3078  0691  1211               	bcf	17,4	;volatile
  3079                           
  3080                           ;eusart.c: 84: BAUDCON = 0x08;
  3081  0692  3008               	movlw	8
  3082  0693  0023               	movlb	3	; select bank3
  3083  0694  009F               	movwf	31	;volatile
  3084                           
  3085                           ;eusart.c: 87: RCSTA = 0x90;
  3086  0695  3090               	movlw	144
  3087  0696  009D               	movwf	29	;volatile
  3088                           
  3089                           ;eusart.c: 90: TXSTA = 0x24;
  3090  0697  3024               	movlw	36
  3091  0698  009E               	movwf	30	;volatile
  3092                           
  3093                           ;eusart.c: 93: SPBRGL = 0x40;
  3094  0699  3040               	movlw	64
  3095  069A  009B               	movwf	27	;volatile
  3096                           
  3097                           ;eusart.c: 96: SPBRGH = 0x03;
  3098  069B  3003               	movlw	3
  3099  069C  009C               	movwf	28	;volatile
  3100                           
  3101                           ;eusart.c: 100: eusartTxHead = 0;
  3102  069D  0020               	movlb	0	; select bank0
  3103  069E  01EC               	clrf	_eusartTxHead
  3104                           
  3105                           ;eusart.c: 101: eusartTxTail = 0;
  3106  069F  01ED               	clrf	_eusartTxTail
  3107                           
  3108                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3109  06A0  3008               	movlw	8
  3110  06A1  00F4               	movwf	??_EUSART_Initialize
  3111  06A2  0874               	movf	??_EUSART_Initialize,w
  3112  06A3  00EB               	movwf	_eusartTxBufferRemaining	;volatile
  3113                           
  3114                           ;eusart.c: 104: eusartRxHead = 0;
  3115  06A4  01E9               	clrf	_eusartRxHead
  3116                           
  3117                           ;eusart.c: 105: eusartRxTail = 0;
  3118  06A5  01EA               	clrf	_eusartRxTail
  3119                           
  3120                           ;eusart.c: 106: eusartRxCount = 0;
  3121  06A6  01F8               	clrf	_eusartRxCount	;volatile
  3122                           
  3123                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3124  06A7  0021               	movlb	1	; select bank1
  3125  06A8  1691               	bsf	17,5	;volatile
  3126  06A9  0008               	return
  3127  06AA                     __end_of_EUSART_Initialize:	
  3128                           
  3129                           	psect	text9
  3130  061C                     __ptext9:	
  3131 ;; *************** function _LED_set_state *****************
  3132 ;; Defined at:
  3133 ;;		line 14 in file "interact.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  new_state       1    wreg     enum E2901
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  new_state       1    5[COMMON] enum E2901
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3147 ;;      Params:         0       0       0       0       0       0
  3148 ;;      Locals:         1       0       0       0       0       0
  3149 ;;      Temps:          1       0       0       0       0       0
  3150 ;;      Totals:         2       0       0       0       0       0
  3151 ;;Total ram usage:        2 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    6
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function _LED_set_state
  3163  061C                     _LED_set_state:	
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  3167                           ;LED_set_state@new_state stored from wreg
  3168  061C  00F5               	movwf	LED_set_state@new_state
  3169                           
  3170                           ;interact.c: 16: m_LED.state = new_state;
  3171  061D  0875               	movf	LED_set_state@new_state,w
  3172  061E  00F4               	movwf	??_LED_set_state
  3173  061F  0874               	movf	??_LED_set_state,w
  3174  0620  00F6               	movwf	_m_LED	;volatile
  3175                           
  3176                           ;interact.c: 17: m_LED.counter = 0;
  3177  0621  01F7               	clrf	_m_LED+1	;volatile
  3178                           
  3179                           ;interact.c: 18: if (new_state == always_off)
  3180  0622  0375               	decf	LED_set_state@new_state,w
  3181  0623  1D03               	btfss	3,2
  3182  0624  2E28               	goto	l2015
  3183                           
  3184                           ;interact.c: 19: do { LATA2 = 0; } while(0);
  3185  0625  0022               	movlb	2	; select bank2
  3186  0626  110C               	bcf	12,2	;volatile
  3187  0627  0008               	return
  3188  0628                     l2015:	
  3189                           
  3190                           ;interact.c: 20: else if (new_state == always_on)
  3191  0628  0875               	movf	LED_set_state@new_state,w
  3192  0629  1D03               	btfss	3,2
  3193  062A  2E2E               	goto	l2017
  3194                           
  3195                           ;interact.c: 21: do { LATA2 = 1; } while(0);
  3196  062B  0022               	movlb	2	; select bank2
  3197  062C  150C               	bsf	12,2	;volatile
  3198  062D  0008               	return
  3199  062E                     l2017:	
  3200                           
  3201                           ;interact.c: 22: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  3202  062E  3002               	movlw	2
  3203  062F  0675               	xorwf	LED_set_state@new_state,w
  3204  0630  1903               	btfsc	3,2
  3205  0631  2E36               	goto	l303
  3206  0632  3003               	movlw	3
  3207  0633  0675               	xorwf	LED_set_state@new_state,w
  3208  0634  1D03               	btfss	3,2
  3209  0635  0008               	return
  3210  0636                     l303:	
  3211                           ;interact.c: 23: do { LATA2 = 1; } while(0);
  3212                           
  3213  0636  0022               	movlb	2	; select bank2
  3214  0637  150C               	bsf	12,2	;volatile
  3215  0638  0008               	return
  3216  0639                     __end_of_LED_set_state:	
  3217                           
  3218                           	psect	text10
  3219  0042                     __ptext10:	
  3220 ;; *************** function _GPS_read_speed *****************
  3221 ;; Defined at:
  3222 ;;		line 23 in file "GPS.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  buffer          6   31[BANK0 ] unsigned char [6]
  3227 ;;  read_speed_f    2   27[BANK0 ] unsigned short 
  3228 ;;  read_speed_i    2   25[BANK0 ] unsigned short 
  3229 ;;  m_char          1   39[BANK0 ] unsigned char 
  3230 ;;  i_buff          1   38[BANK0 ] unsigned char 
  3231 ;;  i_buff2         1   37[BANK0 ] unsigned char 
  3232 ;;  checksum        1   30[BANK0 ] unsigned char 
  3233 ;;  checksum2       1   29[BANK0 ] unsigned char 
  3234 ;;  no_more_chec    1   24[BANK0 ] unsigned char 
  3235 ;;  before_dot      1   23[BANK0 ] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      unsigned char 
  3238 ;; Registers used:
  3239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3245 ;;      Params:         0       0       0       0       0       0
  3246 ;;      Locals:         0      17       0       0       0       0
  3247 ;;      Temps:          0       2       0       0       0       0
  3248 ;;      Totals:         0      19       0       0       0       0
  3249 ;;Total ram usage:       19 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    7
  3252 ;; This function calls:
  3253 ;;		_EUSART_Read
  3254 ;;		___wmul
  3255 ;;		_convert_to_fp
  3256 ;; This function is called by:
  3257 ;;		_main
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           
  3262                           ;psect for function _GPS_read_speed
  3263  0042                     _GPS_read_speed:	
  3264                           
  3265                           ;GPS.c: 27: unsigned char buffer[6];
  3266                           ;GPS.c: 28: unsigned char i_buff = 0;
  3267                           
  3268                           ;incstack = 0
  3269                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3270  0042  0020               	movlb	0	; select bank0
  3271  0043  01C6               	clrf	GPS_read_speed@i_buff
  3272                           
  3273                           ;GPS.c: 29: unsigned char checksum = 0x00;
  3274  0044  01BE               	clrf	GPS_read_speed@checksum
  3275                           
  3276                           ;GPS.c: 31: unsigned char m_char = 0x00;
  3277  0045  01C7               	clrf	GPS_read_speed@m_char
  3278  0046                     l2603:	
  3279                           ;GPS.c: 32: while (m_char != '$')
  3280                           
  3281  0046  3024               	movlw	36
  3282  0047  0647               	xorwf	GPS_read_speed@m_char,w
  3283  0048  1903               	btfsc	3,2
  3284  0049  2855               	goto	l2605
  3285                           
  3286                           ;GPS.c: 33: if(eusartRxCount!=0)
  3287  004A  0878               	movf	_eusartRxCount,w	;volatile
  3288  004B  1903               	btfsc	3,2
  3289  004C  2846               	goto	l2603
  3290                           
  3291                           ;GPS.c: 34: m_char=EUSART_Read();
  3292  004D  3185  25FD  3180   	fcall	_EUSART_Read
  3293  0050  0020               	movlb	0	; select bank0
  3294  0051  00B5               	movwf	??_GPS_read_speed
  3295  0052  0835               	movf	??_GPS_read_speed,w
  3296  0053  00C7               	movwf	GPS_read_speed@m_char
  3297  0054  2846               	goto	l2603
  3298  0055                     l2605:	
  3299                           ;GPS.c: 38: while (1)
  3300                           
  3301                           
  3302                           ;GPS.c: 39: if (eusartRxCount!=0)
  3303  0055  0878               	movf	_eusartRxCount,w	;volatile
  3304  0056  1903               	btfsc	3,2
  3305  0057  2855               	goto	l2605
  3306                           
  3307                           ;GPS.c: 40: {
  3308                           ;GPS.c: 41: m_char=EUSART_Read();
  3309  0058  3185  25FD  3180   	fcall	_EUSART_Read
  3310  005B  0020               	movlb	0	; select bank0
  3311  005C  00B5               	movwf	??_GPS_read_speed
  3312  005D  0835               	movf	??_GPS_read_speed,w
  3313  005E  00C7               	movwf	GPS_read_speed@m_char
  3314                           
  3315                           ;GPS.c: 42: checksum ^= m_char;
  3316  005F  0847               	movf	GPS_read_speed@m_char,w
  3317  0060  00B5               	movwf	??_GPS_read_speed
  3318  0061  0835               	movf	??_GPS_read_speed,w
  3319  0062  06BE               	xorwf	GPS_read_speed@checksum,f
  3320                           
  3321                           ;GPS.c: 43: if (m_char == ',')
  3322  0063  302C               	movlw	44
  3323  0064  0647               	xorwf	GPS_read_speed@m_char,w
  3324  0065  1903               	btfsc	3,2
  3325  0066  2879               	goto	l2627
  3326                           
  3327                           ;GPS.c: 45: else
  3328                           ;GPS.c: 46: {
  3329                           ;GPS.c: 47: buffer[i_buff++] = m_char;
  3330                           
  3331                           ;GPS.c: 44: break;
  3332  0067  0847               	movf	GPS_read_speed@m_char,w
  3333  0068  00B5               	movwf	??_GPS_read_speed
  3334  0069  0846               	movf	GPS_read_speed@i_buff,w
  3335  006A  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3336  006B  0086               	movwf	6
  3337  006C  0187               	clrf	7
  3338  006D  0835               	movf	??_GPS_read_speed,w
  3339  006E  0081               	movwf	1
  3340  006F  3001               	movlw	1
  3341  0070  00B5               	movwf	??_GPS_read_speed
  3342  0071  0835               	movf	??_GPS_read_speed,w
  3343  0072  07C6               	addwf	GPS_read_speed@i_buff,f
  3344                           
  3345                           ;GPS.c: 48: if (i_buff >= 6)
  3346  0073  3006               	movlw	6
  3347  0074  0246               	subwf	GPS_read_speed@i_buff,w
  3348  0075  1C03               	skipc
  3349  0076  2855               	goto	l2605
  3350                           
  3351                           ;GPS.c: 49: return 0;
  3352  0077  3000               	movlw	0
  3353  0078  0008               	return
  3354  0079                     l2627:	
  3355                           
  3356                           ;GPS.c: 50: }
  3357                           ;GPS.c: 51: }
  3358                           ;GPS.c: 53: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  3359  0079  3047               	movlw	71
  3360  007A  063F               	xorwf	GPS_read_speed@buffer,w
  3361  007B  1D03               	btfss	3,2
  3362  007C  288D               	goto	l2637
  3363  007D  3050               	movlw	80
  3364  007E  0640               	xorwf	GPS_read_speed@buffer+1,w
  3365  007F  1D03               	btfss	3,2
  3366  0080  288D               	goto	l2637
  3367  0081  3056               	movlw	86
  3368  0082  0641               	xorwf	GPS_read_speed@buffer+2,w
  3369  0083  1D03               	btfss	3,2
  3370  0084  288D               	goto	l2637
  3371  0085  3054               	movlw	84
  3372  0086  0642               	xorwf	GPS_read_speed@buffer+3,w
  3373  0087  1D03               	btfss	3,2
  3374  0088  288D               	goto	l2637
  3375  0089  3047               	movlw	71
  3376  008A  0643               	xorwf	GPS_read_speed@buffer+4,w
  3377  008B  1903               	btfsc	3,2
  3378  008C  288F               	goto	l2641
  3379  008D                     l2637:	
  3380                           
  3381                           ;GPS.c: 54: return 0;
  3382  008D  3000               	movlw	0
  3383  008E  0008               	return
  3384  008F                     l2641:	
  3385                           
  3386                           ;GPS.c: 55: i_buff = 0;
  3387  008F  01C6               	clrf	GPS_read_speed@i_buff
  3388  0090                     l2643:	
  3389                           ;GPS.c: 58: while (1)
  3390                           
  3391                           
  3392                           ;GPS.c: 59: if (eusartRxCount!=0)
  3393  0090  0878               	movf	_eusartRxCount,w	;volatile
  3394  0091  1903               	btfsc	3,2
  3395  0092  2890               	goto	l2643
  3396                           
  3397                           ;GPS.c: 60: {
  3398                           ;GPS.c: 61: m_char=EUSART_Read();
  3399  0093  3185  25FD  3180   	fcall	_EUSART_Read
  3400  0096  0020               	movlb	0	; select bank0
  3401  0097  00B5               	movwf	??_GPS_read_speed
  3402  0098  0835               	movf	??_GPS_read_speed,w
  3403  0099  00C7               	movwf	GPS_read_speed@m_char
  3404                           
  3405                           ;GPS.c: 62: checksum ^= m_char;
  3406  009A  0847               	movf	GPS_read_speed@m_char,w
  3407  009B  00B5               	movwf	??_GPS_read_speed
  3408  009C  0835               	movf	??_GPS_read_speed,w
  3409  009D  06BE               	xorwf	GPS_read_speed@checksum,f
  3410                           
  3411                           ;GPS.c: 63: if (m_char == ',')
  3412  009E  302C               	movlw	44
  3413  009F  0647               	xorwf	GPS_read_speed@m_char,w
  3414  00A0  1D03               	btfss	3,2
  3415  00A1  2890               	goto	l2643
  3416  00A2                     l2653:	
  3417                           ;GPS.c: 65: }
  3418                           ;GPS.c: 67: while (1)
  3419                           
  3420                           ;GPS.c: 64: break;
  3421                           
  3422                           
  3423                           ;GPS.c: 68: if (eusartRxCount!=0)
  3424  00A2  0878               	movf	_eusartRxCount,w	;volatile
  3425  00A3  1903               	btfsc	3,2
  3426  00A4  28A2               	goto	l2653
  3427                           
  3428                           ;GPS.c: 69: {
  3429                           ;GPS.c: 70: m_char=EUSART_Read();
  3430  00A5  3185  25FD  3180   	fcall	_EUSART_Read
  3431  00A8  0020               	movlb	0	; select bank0
  3432  00A9  00B5               	movwf	??_GPS_read_speed
  3433  00AA  0835               	movf	??_GPS_read_speed,w
  3434  00AB  00C7               	movwf	GPS_read_speed@m_char
  3435                           
  3436                           ;GPS.c: 71: checksum ^= m_char;
  3437  00AC  0847               	movf	GPS_read_speed@m_char,w
  3438  00AD  00B5               	movwf	??_GPS_read_speed
  3439  00AE  0835               	movf	??_GPS_read_speed,w
  3440  00AF  06BE               	xorwf	GPS_read_speed@checksum,f
  3441                           
  3442                           ;GPS.c: 72: if (m_char == ',')
  3443  00B0  302C               	movlw	44
  3444  00B1  0647               	xorwf	GPS_read_speed@m_char,w
  3445  00B2  1903               	btfsc	3,2
  3446  00B3  28C6               	goto	l2675
  3447                           
  3448                           ;GPS.c: 74: else
  3449                           ;GPS.c: 75: {
  3450                           ;GPS.c: 76: buffer[i_buff++] = m_char;
  3451                           
  3452                           ;GPS.c: 73: break;
  3453  00B4  0847               	movf	GPS_read_speed@m_char,w
  3454  00B5  00B5               	movwf	??_GPS_read_speed
  3455  00B6  0846               	movf	GPS_read_speed@i_buff,w
  3456  00B7  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3457  00B8  0086               	movwf	6
  3458  00B9  0187               	clrf	7
  3459  00BA  0835               	movf	??_GPS_read_speed,w
  3460  00BB  0081               	movwf	1
  3461  00BC  3001               	movlw	1
  3462  00BD  00B5               	movwf	??_GPS_read_speed
  3463  00BE  0835               	movf	??_GPS_read_speed,w
  3464  00BF  07C6               	addwf	GPS_read_speed@i_buff,f
  3465                           
  3466                           ;GPS.c: 77: if (i_buff >= 6)
  3467  00C0  3006               	movlw	6
  3468  00C1  0246               	subwf	GPS_read_speed@i_buff,w
  3469  00C2  1C03               	skipc
  3470  00C3  28A2               	goto	l2653
  3471                           
  3472                           ;GPS.c: 78: return 0;
  3473  00C4  3000               	movlw	0
  3474  00C5  0008               	return
  3475  00C6                     l2675:	
  3476                           
  3477                           ;GPS.c: 79: }
  3478                           ;GPS.c: 80: }
  3479                           ;GPS.c: 81: if ((buffer[0] != 'T')||(i_buff != 1))
  3480  00C6  3054               	movlw	84
  3481  00C7  063F               	xorwf	GPS_read_speed@buffer,w
  3482  00C8  1903               	btfsc	3,2
  3483  00C9  0346               	decf	GPS_read_speed@i_buff,w
  3484  00CA  1903               	btfsc	3,2
  3485  00CB  28CE               	goto	l2683
  3486                           
  3487                           ;GPS.c: 82: return 0;
  3488  00CC  3000               	movlw	0
  3489  00CD  0008               	return
  3490  00CE                     l2683:	
  3491                           
  3492                           ;GPS.c: 83: i_buff = 0;
  3493  00CE  01C6               	clrf	GPS_read_speed@i_buff
  3494  00CF                     l2685:	
  3495                           ;GPS.c: 86: while (1)
  3496                           
  3497                           
  3498                           ;GPS.c: 87: if (eusartRxCount!=0)
  3499  00CF  0878               	movf	_eusartRxCount,w	;volatile
  3500  00D0  1903               	btfsc	3,2
  3501  00D1  28CF               	goto	l2685
  3502                           
  3503                           ;GPS.c: 88: {
  3504                           ;GPS.c: 89: m_char=EUSART_Read();
  3505  00D2  3185  25FD  3180   	fcall	_EUSART_Read
  3506  00D5  0020               	movlb	0	; select bank0
  3507  00D6  00B5               	movwf	??_GPS_read_speed
  3508  00D7  0835               	movf	??_GPS_read_speed,w
  3509  00D8  00C7               	movwf	GPS_read_speed@m_char
  3510                           
  3511                           ;GPS.c: 90: checksum ^= m_char;
  3512  00D9  0847               	movf	GPS_read_speed@m_char,w
  3513  00DA  00B5               	movwf	??_GPS_read_speed
  3514  00DB  0835               	movf	??_GPS_read_speed,w
  3515  00DC  06BE               	xorwf	GPS_read_speed@checksum,f
  3516                           
  3517                           ;GPS.c: 91: if (m_char == ',')
  3518  00DD  302C               	movlw	44
  3519  00DE  0647               	xorwf	GPS_read_speed@m_char,w
  3520  00DF  1D03               	btfss	3,2
  3521  00E0  28CF               	goto	l2685
  3522  00E1                     l2695:	
  3523                           ;GPS.c: 93: }
  3524                           ;GPS.c: 95: while (1)
  3525                           
  3526                           ;GPS.c: 92: break;
  3527                           
  3528                           
  3529                           ;GPS.c: 96: if (eusartRxCount!=0)
  3530  00E1  0878               	movf	_eusartRxCount,w	;volatile
  3531  00E2  1903               	btfsc	3,2
  3532  00E3  28E1               	goto	l2695
  3533                           
  3534                           ;GPS.c: 97: {
  3535                           ;GPS.c: 98: m_char=EUSART_Read();
  3536  00E4  3185  25FD  3180   	fcall	_EUSART_Read
  3537  00E7  0020               	movlb	0	; select bank0
  3538  00E8  00B5               	movwf	??_GPS_read_speed
  3539  00E9  0835               	movf	??_GPS_read_speed,w
  3540  00EA  00C7               	movwf	GPS_read_speed@m_char
  3541                           
  3542                           ;GPS.c: 99: checksum ^= m_char;
  3543  00EB  0847               	movf	GPS_read_speed@m_char,w
  3544  00EC  00B5               	movwf	??_GPS_read_speed
  3545  00ED  0835               	movf	??_GPS_read_speed,w
  3546  00EE  06BE               	xorwf	GPS_read_speed@checksum,f
  3547                           
  3548                           ;GPS.c: 100: if (m_char == ',')
  3549  00EF  302C               	movlw	44
  3550  00F0  0647               	xorwf	GPS_read_speed@m_char,w
  3551  00F1  1903               	btfsc	3,2
  3552  00F2  2905               	goto	l2717
  3553                           
  3554                           ;GPS.c: 102: else
  3555                           ;GPS.c: 103: {
  3556                           ;GPS.c: 104: buffer[i_buff++] = m_char;
  3557                           
  3558                           ;GPS.c: 101: break;
  3559  00F3  0847               	movf	GPS_read_speed@m_char,w
  3560  00F4  00B5               	movwf	??_GPS_read_speed
  3561  00F5  0846               	movf	GPS_read_speed@i_buff,w
  3562  00F6  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3563  00F7  0086               	movwf	6
  3564  00F8  0187               	clrf	7
  3565  00F9  0835               	movf	??_GPS_read_speed,w
  3566  00FA  0081               	movwf	1
  3567  00FB  3001               	movlw	1
  3568  00FC  00B5               	movwf	??_GPS_read_speed
  3569  00FD  0835               	movf	??_GPS_read_speed,w
  3570  00FE  07C6               	addwf	GPS_read_speed@i_buff,f
  3571                           
  3572                           ;GPS.c: 105: if (i_buff >= 6)
  3573  00FF  3006               	movlw	6
  3574  0100  0246               	subwf	GPS_read_speed@i_buff,w
  3575  0101  1C03               	skipc
  3576  0102  28E1               	goto	l2695
  3577                           
  3578                           ;GPS.c: 106: return 0;
  3579  0103  3000               	movlw	0
  3580  0104  0008               	return
  3581  0105                     l2717:	
  3582                           
  3583                           ;GPS.c: 107: }
  3584                           ;GPS.c: 108: }
  3585                           ;GPS.c: 109: if ((buffer[0] != 'M')||(i_buff != 1))
  3586  0105  304D               	movlw	77
  3587  0106  063F               	xorwf	GPS_read_speed@buffer,w
  3588  0107  1903               	btfsc	3,2
  3589  0108  0346               	decf	GPS_read_speed@i_buff,w
  3590  0109  1903               	btfsc	3,2
  3591  010A  290D               	goto	l2725
  3592                           
  3593                           ;GPS.c: 110: return 0;
  3594  010B  3000               	movlw	0
  3595  010C  0008               	return
  3596  010D                     l2725:	
  3597                           
  3598                           ;GPS.c: 111: i_buff = 0;
  3599  010D  01C6               	clrf	GPS_read_speed@i_buff
  3600  010E                     l2727:	
  3601                           ;GPS.c: 114: while (1)
  3602                           
  3603                           
  3604                           ;GPS.c: 115: if (eusartRxCount!=0)
  3605  010E  0878               	movf	_eusartRxCount,w	;volatile
  3606  010F  1903               	btfsc	3,2
  3607  0110  290E               	goto	l2727
  3608                           
  3609                           ;GPS.c: 116: {
  3610                           ;GPS.c: 117: m_char=EUSART_Read();
  3611  0111  3185  25FD  3180   	fcall	_EUSART_Read
  3612  0114  0020               	movlb	0	; select bank0
  3613  0115  00B5               	movwf	??_GPS_read_speed
  3614  0116  0835               	movf	??_GPS_read_speed,w
  3615  0117  00C7               	movwf	GPS_read_speed@m_char
  3616                           
  3617                           ;GPS.c: 118: checksum ^= m_char;
  3618  0118  0847               	movf	GPS_read_speed@m_char,w
  3619  0119  00B5               	movwf	??_GPS_read_speed
  3620  011A  0835               	movf	??_GPS_read_speed,w
  3621  011B  06BE               	xorwf	GPS_read_speed@checksum,f
  3622                           
  3623                           ;GPS.c: 119: if (m_char == ',')
  3624  011C  302C               	movlw	44
  3625  011D  0647               	xorwf	GPS_read_speed@m_char,w
  3626  011E  1D03               	btfss	3,2
  3627  011F  290E               	goto	l2727
  3628  0120                     l2737:	
  3629                           ;GPS.c: 121: }
  3630                           ;GPS.c: 123: while (1)
  3631                           
  3632                           ;GPS.c: 120: break;
  3633                           
  3634                           
  3635                           ;GPS.c: 124: if (eusartRxCount!=0)
  3636  0120  0878               	movf	_eusartRxCount,w	;volatile
  3637  0121  1903               	btfsc	3,2
  3638  0122  2920               	goto	l2737
  3639                           
  3640                           ;GPS.c: 125: {
  3641                           ;GPS.c: 126: m_char=EUSART_Read();
  3642  0123  3185  25FD  3180   	fcall	_EUSART_Read
  3643  0126  0020               	movlb	0	; select bank0
  3644  0127  00B5               	movwf	??_GPS_read_speed
  3645  0128  0835               	movf	??_GPS_read_speed,w
  3646  0129  00C7               	movwf	GPS_read_speed@m_char
  3647                           
  3648                           ;GPS.c: 127: checksum ^= m_char;
  3649  012A  0847               	movf	GPS_read_speed@m_char,w
  3650  012B  00B5               	movwf	??_GPS_read_speed
  3651  012C  0835               	movf	??_GPS_read_speed,w
  3652  012D  06BE               	xorwf	GPS_read_speed@checksum,f
  3653                           
  3654                           ;GPS.c: 128: if (m_char == ',')
  3655  012E  302C               	movlw	44
  3656  012F  0647               	xorwf	GPS_read_speed@m_char,w
  3657  0130  1903               	btfsc	3,2
  3658  0131  2944               	goto	l2759
  3659                           
  3660                           ;GPS.c: 130: else
  3661                           ;GPS.c: 131: {
  3662                           ;GPS.c: 132: buffer[i_buff++] = m_char;
  3663                           
  3664                           ;GPS.c: 129: break;
  3665  0132  0847               	movf	GPS_read_speed@m_char,w
  3666  0133  00B5               	movwf	??_GPS_read_speed
  3667  0134  0846               	movf	GPS_read_speed@i_buff,w
  3668  0135  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3669  0136  0086               	movwf	6
  3670  0137  0187               	clrf	7
  3671  0138  0835               	movf	??_GPS_read_speed,w
  3672  0139  0081               	movwf	1
  3673  013A  3001               	movlw	1
  3674  013B  00B5               	movwf	??_GPS_read_speed
  3675  013C  0835               	movf	??_GPS_read_speed,w
  3676  013D  07C6               	addwf	GPS_read_speed@i_buff,f
  3677                           
  3678                           ;GPS.c: 133: if (i_buff >= 6)
  3679  013E  3006               	movlw	6
  3680  013F  0246               	subwf	GPS_read_speed@i_buff,w
  3681  0140  1C03               	skipc
  3682  0141  2920               	goto	l2737
  3683                           
  3684                           ;GPS.c: 134: return 0;
  3685  0142  3000               	movlw	0
  3686  0143  0008               	return
  3687  0144                     l2759:	
  3688                           
  3689                           ;GPS.c: 135: }
  3690                           ;GPS.c: 136: }
  3691                           ;GPS.c: 137: if ((buffer[0] != 'N')||(i_buff != 1))
  3692  0144  304E               	movlw	78
  3693  0145  063F               	xorwf	GPS_read_speed@buffer,w
  3694  0146  1903               	btfsc	3,2
  3695  0147  0346               	decf	GPS_read_speed@i_buff,w
  3696  0148  1903               	btfsc	3,2
  3697  0149  294C               	goto	l2767
  3698                           
  3699                           ;GPS.c: 138: return 0;
  3700  014A  3000               	movlw	0
  3701  014B  0008               	return
  3702  014C                     l2767:	
  3703                           
  3704                           ;GPS.c: 139: i_buff = 0;
  3705  014C  01C6               	clrf	GPS_read_speed@i_buff
  3706  014D                     l2769:	
  3707                           ;GPS.c: 142: while (1)
  3708                           
  3709                           
  3710                           ;GPS.c: 143: if (eusartRxCount!=0)
  3711  014D  0878               	movf	_eusartRxCount,w	;volatile
  3712  014E  1903               	btfsc	3,2
  3713  014F  294D               	goto	l2769
  3714                           
  3715                           ;GPS.c: 144: {
  3716                           ;GPS.c: 145: m_char=EUSART_Read();
  3717  0150  3185  25FD  3180   	fcall	_EUSART_Read
  3718  0153  0020               	movlb	0	; select bank0
  3719  0154  00B5               	movwf	??_GPS_read_speed
  3720  0155  0835               	movf	??_GPS_read_speed,w
  3721  0156  00C7               	movwf	GPS_read_speed@m_char
  3722                           
  3723                           ;GPS.c: 146: checksum ^= m_char;
  3724  0157  0847               	movf	GPS_read_speed@m_char,w
  3725  0158  00B5               	movwf	??_GPS_read_speed
  3726  0159  0835               	movf	??_GPS_read_speed,w
  3727  015A  06BE               	xorwf	GPS_read_speed@checksum,f
  3728                           
  3729                           ;GPS.c: 147: if (m_char == ',')
  3730  015B  302C               	movlw	44
  3731  015C  0647               	xorwf	GPS_read_speed@m_char,w
  3732  015D  1903               	btfsc	3,2
  3733  015E  2971               	goto	l2791
  3734                           
  3735                           ;GPS.c: 149: else
  3736                           ;GPS.c: 150: {
  3737                           ;GPS.c: 151: buffer[i_buff++] = m_char;
  3738                           
  3739                           ;GPS.c: 148: break;
  3740  015F  0847               	movf	GPS_read_speed@m_char,w
  3741  0160  00B5               	movwf	??_GPS_read_speed
  3742  0161  0846               	movf	GPS_read_speed@i_buff,w
  3743  0162  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3744  0163  0086               	movwf	6
  3745  0164  0187               	clrf	7
  3746  0165  0835               	movf	??_GPS_read_speed,w
  3747  0166  0081               	movwf	1
  3748  0167  3001               	movlw	1
  3749  0168  00B5               	movwf	??_GPS_read_speed
  3750  0169  0835               	movf	??_GPS_read_speed,w
  3751  016A  07C6               	addwf	GPS_read_speed@i_buff,f
  3752                           
  3753                           ;GPS.c: 152: if (i_buff >= 6)
  3754  016B  3006               	movlw	6
  3755  016C  0246               	subwf	GPS_read_speed@i_buff,w
  3756  016D  1C03               	skipc
  3757  016E  294D               	goto	l2769
  3758                           
  3759                           ;GPS.c: 153: return 0;
  3760  016F  3000               	movlw	0
  3761  0170  0008               	return
  3762  0171                     l2791:	
  3763                           
  3764                           ;GPS.c: 154: }
  3765                           ;GPS.c: 155: }
  3766                           ;GPS.c: 158: unsigned char i_buff2 = 0;
  3767  0171  01C5               	clrf	GPS_read_speed@i_buff2
  3768                           
  3769                           ;GPS.c: 159: unsigned short read_speed_int=0;
  3770  0172  01B9               	clrf	GPS_read_speed@read_speed_int
  3771  0173  01BA               	clrf	GPS_read_speed@read_speed_int+1
  3772                           
  3773                           ;GPS.c: 160: unsigned short read_speed_fra=0;
  3774  0174  01BB               	clrf	GPS_read_speed@read_speed_fra
  3775  0175  01BC               	clrf	GPS_read_speed@read_speed_fra+1
  3776                           
  3777                           ;GPS.c: 161: bool before_dot = 1;
  3778  0176  01B7               	clrf	GPS_read_speed@before_dot
  3779  0177  0AB7               	incf	GPS_read_speed@before_dot,f
  3780  0178                     l2819:	
  3781                           ;GPS.c: 162: while (i_buff2 < i_buff)
  3782                           
  3783  0178  0846               	movf	GPS_read_speed@i_buff,w
  3784  0179  0245               	subwf	GPS_read_speed@i_buff2,w
  3785  017A  1803               	btfsc	3,0
  3786  017B  29DB               	goto	l2821
  3787                           
  3788                           ;GPS.c: 163: if (buffer[i_buff2]=='.')
  3789  017C  0845               	movf	GPS_read_speed@i_buff2,w
  3790  017D  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3791  017E  0086               	movwf	6
  3792  017F  0187               	clrf	7
  3793  0180  302E               	movlw	46
  3794  0181  0601               	xorwf	1,w
  3795  0182  1D03               	btfss	3,2
  3796  0183  2986               	goto	l2801
  3797                           
  3798                           ;GPS.c: 164: {
  3799                           ;GPS.c: 165: before_dot = 0;
  3800  0184  01B7               	clrf	GPS_read_speed@before_dot
  3801  0185  29D6               	goto	l2817
  3802  0186                     l2801:	
  3803                           ;GPS.c: 167: }
  3804                           
  3805                           ;GPS.c: 166: i_buff2++;
  3806                           
  3807                           
  3808                           ;GPS.c: 168: else
  3809                           ;GPS.c: 169: {
  3810                           ;GPS.c: 170: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  3811  0186  0845               	movf	GPS_read_speed@i_buff2,w
  3812  0187  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3813  0188  0086               	movwf	6
  3814  0189  0187               	clrf	7
  3815  018A  3030               	movlw	48
  3816  018B  0201               	subwf	1,w
  3817  018C  1C03               	skipc
  3818  018D  2996               	goto	l2805
  3819  018E  0845               	movf	GPS_read_speed@i_buff2,w
  3820  018F  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3821  0190  0086               	movwf	6
  3822  0191  0187               	clrf	7
  3823  0192  303A               	movlw	58
  3824  0193  0201               	subwf	1,w
  3825  0194  1C03               	skipc
  3826  0195  2998               	goto	l2811
  3827  0196                     l2805:	
  3828                           
  3829                           ;GPS.c: 171: return 0;
  3830  0196  3000               	movlw	0
  3831  0197  0008               	return
  3832  0198                     l2811:	
  3833                           
  3834                           ;GPS.c: 172: else
  3835                           ;GPS.c: 173: {
  3836                           ;GPS.c: 174: if (before_dot)
  3837  0198  0837               	movf	GPS_read_speed@before_dot,w
  3838  0199  1903               	btfsc	3,2
  3839  019A  29B9               	goto	l2815
  3840                           
  3841                           ;GPS.c: 175: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  3842  019B  083A               	movf	GPS_read_speed@read_speed_int+1,w
  3843  019C  00A1               	movwf	___wmul@multiplier+1
  3844  019D  0839               	movf	GPS_read_speed@read_speed_int,w
  3845  019E  00A0               	movwf	___wmul@multiplier
  3846  019F  300A               	movlw	10
  3847  01A0  00A2               	movwf	___wmul@multiplicand
  3848  01A1  3000               	movlw	0
  3849  01A2  00A3               	movwf	___wmul@multiplicand+1
  3850  01A3  3186  2673  3180   	fcall	___wmul
  3851  01A6  0020               	movlb	0	; select bank0
  3852  01A7  0845               	movf	GPS_read_speed@i_buff2,w
  3853  01A8  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3854  01A9  0086               	movwf	6
  3855  01AA  0187               	clrf	7
  3856  01AB  0801               	movf	1,w
  3857  01AC  0720               	addwf	?___wmul,w
  3858  01AD  00B5               	movwf	??_GPS_read_speed
  3859  01AE  0821               	movf	?___wmul+1,w
  3860  01AF  1803               	skipnc
  3861  01B0  0A21               	incf	?___wmul+1,w
  3862  01B1  00B6               	movwf	??_GPS_read_speed+1
  3863  01B2  0835               	movf	??_GPS_read_speed,w
  3864  01B3  3ED0               	addlw	208
  3865  01B4  00B9               	movwf	GPS_read_speed@read_speed_int
  3866  01B5  30FF               	movlw	255
  3867  01B6  3D36               	addwfc	??_GPS_read_speed+1,w
  3868  01B7  00BA               	movwf	GPS_read_speed@read_speed_int+1
  3869  01B8  29D6               	goto	l2817
  3870  01B9                     l2815:	
  3871                           
  3872                           ;GPS.c: 176: else
  3873                           ;GPS.c: 177: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  3874  01B9  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  3875  01BA  00A1               	movwf	___wmul@multiplier+1
  3876  01BB  083B               	movf	GPS_read_speed@read_speed_fra,w
  3877  01BC  00A0               	movwf	___wmul@multiplier
  3878  01BD  300A               	movlw	10
  3879  01BE  00A2               	movwf	___wmul@multiplicand
  3880  01BF  3000               	movlw	0
  3881  01C0  00A3               	movwf	___wmul@multiplicand+1
  3882  01C1  3186  2673  3180   	fcall	___wmul
  3883  01C4  0020               	movlb	0	; select bank0
  3884  01C5  0845               	movf	GPS_read_speed@i_buff2,w
  3885  01C6  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3886  01C7  0086               	movwf	6
  3887  01C8  0187               	clrf	7
  3888  01C9  0801               	movf	1,w
  3889  01CA  0720               	addwf	?___wmul,w
  3890  01CB  00B5               	movwf	??_GPS_read_speed
  3891  01CC  0821               	movf	?___wmul+1,w
  3892  01CD  1803               	skipnc
  3893  01CE  0A21               	incf	?___wmul+1,w
  3894  01CF  00B6               	movwf	??_GPS_read_speed+1
  3895  01D0  0835               	movf	??_GPS_read_speed,w
  3896  01D1  3ED0               	addlw	208
  3897  01D2  00BB               	movwf	GPS_read_speed@read_speed_fra
  3898  01D3  30FF               	movlw	255
  3899  01D4  3D36               	addwfc	??_GPS_read_speed+1,w
  3900  01D5  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  3901  01D6                     l2817:	
  3902                           
  3903                           ;GPS.c: 178: i_buff2++;
  3904  01D6  3001               	movlw	1
  3905  01D7  00B5               	movwf	??_GPS_read_speed
  3906  01D8  0835               	movf	??_GPS_read_speed,w
  3907  01D9  07C5               	addwf	GPS_read_speed@i_buff2,f
  3908  01DA  2978               	goto	l2819
  3909  01DB                     l2821:	
  3910                           
  3911                           ;GPS.c: 179: }
  3912                           ;GPS.c: 180: }
  3913                           ;GPS.c: 184: read_speed_fra *= 100;
  3914  01DB  3064               	movlw	100
  3915  01DC  00A0               	movwf	___wmul@multiplier
  3916  01DD  3000               	movlw	0
  3917  01DE  00A1               	movwf	___wmul@multiplier+1
  3918  01DF  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  3919  01E0  00A3               	movwf	___wmul@multiplicand+1
  3920  01E1  083B               	movf	GPS_read_speed@read_speed_fra,w
  3921  01E2  00A2               	movwf	___wmul@multiplicand
  3922  01E3  3186  2673  3180   	fcall	___wmul
  3923  01E6  0020               	movlb	0	; select bank0
  3924  01E7  0821               	movf	?___wmul+1,w
  3925  01E8  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  3926  01E9  0820               	movf	?___wmul,w
  3927  01EA  00BB               	movwf	GPS_read_speed@read_speed_fra
  3928                           
  3929                           ;GPS.c: 187: i_buff = 0;
  3930  01EB  01C6               	clrf	GPS_read_speed@i_buff
  3931  01EC                     l2825:	
  3932                           ;GPS.c: 190: while (1)
  3933                           
  3934                           
  3935                           ;GPS.c: 191: if (eusartRxCount!=0)
  3936  01EC  0878               	movf	_eusartRxCount,w	;volatile
  3937  01ED  1903               	btfsc	3,2
  3938  01EE  29EC               	goto	l2825
  3939                           
  3940                           ;GPS.c: 192: {
  3941                           ;GPS.c: 193: m_char=EUSART_Read();
  3942  01EF  3185  25FD  3180   	fcall	_EUSART_Read
  3943  01F2  0020               	movlb	0	; select bank0
  3944  01F3  00B5               	movwf	??_GPS_read_speed
  3945  01F4  0835               	movf	??_GPS_read_speed,w
  3946  01F5  00C7               	movwf	GPS_read_speed@m_char
  3947                           
  3948                           ;GPS.c: 194: checksum ^= m_char;
  3949  01F6  0847               	movf	GPS_read_speed@m_char,w
  3950  01F7  00B5               	movwf	??_GPS_read_speed
  3951  01F8  0835               	movf	??_GPS_read_speed,w
  3952  01F9  06BE               	xorwf	GPS_read_speed@checksum,f
  3953                           
  3954                           ;GPS.c: 195: if (m_char == ',')
  3955  01FA  302C               	movlw	44
  3956  01FB  0647               	xorwf	GPS_read_speed@m_char,w
  3957  01FC  1903               	btfsc	3,2
  3958  01FD  2A10               	goto	l2847
  3959                           
  3960                           ;GPS.c: 197: else
  3961                           ;GPS.c: 198: {
  3962                           ;GPS.c: 199: buffer[i_buff++] = m_char;
  3963                           
  3964                           ;GPS.c: 196: break;
  3965  01FE  0847               	movf	GPS_read_speed@m_char,w
  3966  01FF  00B5               	movwf	??_GPS_read_speed
  3967  0200  0846               	movf	GPS_read_speed@i_buff,w
  3968  0201  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3969  0202  0086               	movwf	6
  3970  0203  0187               	clrf	7
  3971  0204  0835               	movf	??_GPS_read_speed,w
  3972  0205  0081               	movwf	1
  3973  0206  3001               	movlw	1
  3974  0207  00B5               	movwf	??_GPS_read_speed
  3975  0208  0835               	movf	??_GPS_read_speed,w
  3976  0209  07C6               	addwf	GPS_read_speed@i_buff,f
  3977                           
  3978                           ;GPS.c: 200: if (i_buff >= 6)
  3979  020A  3006               	movlw	6
  3980  020B  0246               	subwf	GPS_read_speed@i_buff,w
  3981  020C  1C03               	skipc
  3982  020D  29EC               	goto	l2825
  3983                           
  3984                           ;GPS.c: 201: return 0;
  3985  020E  3000               	movlw	0
  3986  020F  0008               	return
  3987  0210                     l2847:	
  3988                           
  3989                           ;GPS.c: 202: }
  3990                           ;GPS.c: 203: }
  3991                           ;GPS.c: 204: if ((buffer[0] != 'K')||(i_buff != 1))
  3992  0210  304B               	movlw	75
  3993  0211  063F               	xorwf	GPS_read_speed@buffer,w
  3994  0212  1903               	btfsc	3,2
  3995  0213  0346               	decf	GPS_read_speed@i_buff,w
  3996  0214  1903               	btfsc	3,2
  3997  0215  2A18               	goto	l2855
  3998                           
  3999                           ;GPS.c: 205: return 0;
  4000  0216  3000               	movlw	0
  4001  0217  0008               	return
  4002  0218                     l2855:	
  4003                           
  4004                           ;GPS.c: 206: i_buff = 0;
  4005  0218  01C6               	clrf	GPS_read_speed@i_buff
  4006                           
  4007                           ;GPS.c: 209: bool no_more_checksum = 0;
  4008  0219  01B8               	clrf	GPS_read_speed@no_more_checksum
  4009  021A                     l2857:	
  4010                           ;GPS.c: 210: while (1)
  4011                           
  4012                           
  4013                           ;GPS.c: 211: if (eusartRxCount!=0)
  4014  021A  0878               	movf	_eusartRxCount,w	;volatile
  4015  021B  1903               	btfsc	3,2
  4016  021C  2A1A               	goto	l2857
  4017                           
  4018                           ;GPS.c: 212: {
  4019                           ;GPS.c: 213: m_char=EUSART_Read();
  4020  021D  3185  25FD  3180   	fcall	_EUSART_Read
  4021  0220  0020               	movlb	0	; select bank0
  4022  0221  00B5               	movwf	??_GPS_read_speed
  4023  0222  0835               	movf	??_GPS_read_speed,w
  4024  0223  00C7               	movwf	GPS_read_speed@m_char
  4025                           
  4026                           ;GPS.c: 214: if (m_char == '*')
  4027  0224  302A               	movlw	42
  4028  0225  0647               	xorwf	GPS_read_speed@m_char,w
  4029  0226  1D03               	btfss	3,2
  4030  0227  2A2A               	goto	l2865
  4031                           
  4032                           ;GPS.c: 215: no_more_checksum = 1;
  4033  0228  01B8               	clrf	GPS_read_speed@no_more_checksum
  4034  0229  0AB8               	incf	GPS_read_speed@no_more_checksum,f
  4035  022A                     l2865:	
  4036                           
  4037                           ;GPS.c: 216: if (!no_more_checksum)
  4038  022A  0838               	movf	GPS_read_speed@no_more_checksum,w
  4039  022B  1D03               	btfss	3,2
  4040  022C  2A31               	goto	l458
  4041                           
  4042                           ;GPS.c: 217: checksum ^= m_char;
  4043  022D  0847               	movf	GPS_read_speed@m_char,w
  4044  022E  00B5               	movwf	??_GPS_read_speed
  4045  022F  0835               	movf	??_GPS_read_speed,w
  4046  0230  06BE               	xorwf	GPS_read_speed@checksum,f
  4047  0231                     l458:	
  4048                           
  4049                           ;GPS.c: 218: if (m_char == 0x0D)
  4050  0231  300D               	movlw	13
  4051  0232  0647               	xorwf	GPS_read_speed@m_char,w
  4052  0233  1903               	btfsc	3,2
  4053  0234  2A47               	goto	l2883
  4054                           
  4055                           ;GPS.c: 220: else
  4056                           ;GPS.c: 221: {
  4057                           ;GPS.c: 222: buffer[i_buff++] = m_char;
  4058                           
  4059                           ;GPS.c: 219: break;
  4060  0235  0847               	movf	GPS_read_speed@m_char,w
  4061  0236  00B5               	movwf	??_GPS_read_speed
  4062  0237  0846               	movf	GPS_read_speed@i_buff,w
  4063  0238  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4064  0239  0086               	movwf	6
  4065  023A  0187               	clrf	7
  4066  023B  0835               	movf	??_GPS_read_speed,w
  4067  023C  0081               	movwf	1
  4068  023D  3001               	movlw	1
  4069  023E  00B5               	movwf	??_GPS_read_speed
  4070  023F  0835               	movf	??_GPS_read_speed,w
  4071  0240  07C6               	addwf	GPS_read_speed@i_buff,f
  4072                           
  4073                           ;GPS.c: 223: if (i_buff >= 6)
  4074  0241  3006               	movlw	6
  4075  0242  0246               	subwf	GPS_read_speed@i_buff,w
  4076  0243  1C03               	skipc
  4077  0244  2A1A               	goto	l2857
  4078                           
  4079                           ;GPS.c: 224: return 0;
  4080  0245  3000               	movlw	0
  4081  0246  0008               	return
  4082  0247                     l2883:	
  4083                           
  4084                           ;GPS.c: 225: }
  4085                           ;GPS.c: 226: }
  4086                           ;GPS.c: 227: if ((buffer[1] != '*')||(i_buff != 4))
  4087  0247  302A               	movlw	42
  4088  0248  0640               	xorwf	GPS_read_speed@buffer+1,w
  4089  0249  1D03               	btfss	3,2
  4090  024A  2A4F               	goto	l2887
  4091  024B  3004               	movlw	4
  4092  024C  0646               	xorwf	GPS_read_speed@i_buff,w
  4093  024D  1903               	btfsc	3,2
  4094  024E  2A51               	goto	l2891
  4095  024F                     l2887:	
  4096                           
  4097                           ;GPS.c: 228: return 0;
  4098  024F  3000               	movlw	0
  4099  0250  0008               	return
  4100  0251                     l2891:	
  4101                           
  4102                           ;GPS.c: 231: unsigned char checksum2 = 0;
  4103  0251  01BD               	clrf	GPS_read_speed@checksum2
  4104                           
  4105                           ;GPS.c: 232: if (buffer[2] > 0x39)
  4106  0252  303A               	movlw	58
  4107  0253  0241               	subwf	GPS_read_speed@buffer+2,w
  4108  0254  1C03               	skipc
  4109  0255  2A59               	goto	l2897
  4110                           
  4111                           ;GPS.c: 233: checksum2 = buffer[2] - 0x37;
  4112  0256  0841               	movf	GPS_read_speed@buffer+2,w
  4113  0257  3EC9               	addlw	201
  4114  0258  2A5B               	goto	L1
  4115  0259                     l2897:	
  4116                           
  4117                           ;GPS.c: 234: else
  4118                           ;GPS.c: 235: checksum2 = buffer[2] - 0x30;
  4119  0259  0841               	movf	GPS_read_speed@buffer+2,w
  4120  025A  3ED0               	addlw	208
  4121  025B                     L1:	
  4122  025B  00B5               	movwf	??_GPS_read_speed
  4123  025C  0835               	movf	??_GPS_read_speed,w
  4124  025D  00BD               	movwf	GPS_read_speed@checksum2
  4125                           
  4126                           ;GPS.c: 236: checksum2 = checksum2 << 4;
  4127  025E  083D               	movf	GPS_read_speed@checksum2,w
  4128  025F  00B5               	movwf	??_GPS_read_speed
  4129  0260  3003               	movlw	3
  4130  0261                     u3475:	
  4131  0261  35B5               	lslf	??_GPS_read_speed,f
  4132  0262  3EFF               	addlw	-1
  4133  0263  1D03               	skipz
  4134  0264  2A61               	goto	u3475
  4135  0265  3535               	lslf	??_GPS_read_speed,w
  4136  0266  00B6               	movwf	??_GPS_read_speed+1
  4137  0267  0836               	movf	??_GPS_read_speed+1,w
  4138  0268  00BD               	movwf	GPS_read_speed@checksum2
  4139                           
  4140                           ;GPS.c: 237: if (buffer[3] > 0x39)
  4141  0269  303A               	movlw	58
  4142  026A  0242               	subwf	GPS_read_speed@buffer+3,w
  4143  026B  1C03               	skipc
  4144  026C  2A70               	goto	l2903
  4145                           
  4146                           ;GPS.c: 238: checksum2 += buffer[3] - 0x37;
  4147  026D  0842               	movf	GPS_read_speed@buffer+3,w
  4148  026E  3EC9               	addlw	201
  4149  026F  2A72               	goto	L2
  4150  0270                     l2903:	
  4151                           
  4152                           ;GPS.c: 239: else
  4153                           ;GPS.c: 240: checksum2 += buffer[3] - 0x30;
  4154  0270  0842               	movf	GPS_read_speed@buffer+3,w
  4155  0271  3ED0               	addlw	208
  4156  0272                     L2:	
  4157  0272  00B5               	movwf	??_GPS_read_speed
  4158  0273  0835               	movf	??_GPS_read_speed,w
  4159  0274  07BD               	addwf	GPS_read_speed@checksum2,f
  4160                           
  4161                           ;GPS.c: 241: if (checksum == checksum2)
  4162  0275  083E               	movf	GPS_read_speed@checksum,w
  4163  0276  063D               	xorwf	GPS_read_speed@checksum2,w
  4164  0277  1D03               	skipz
  4165  0278  2A8E               	goto	l2915
  4166                           
  4167                           ;GPS.c: 242: {
  4168                           ;GPS.c: 243: speed = convert_to_fp(read_speed_int, read_speed_fra);
  4169  0279  083A               	movf	GPS_read_speed@read_speed_int+1,w
  4170  027A  00A1               	movwf	convert_to_fp@int_part+1
  4171  027B  0839               	movf	GPS_read_speed@read_speed_int,w
  4172  027C  00A0               	movwf	convert_to_fp@int_part
  4173  027D  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  4174  027E  00A3               	movwf	convert_to_fp@fract_part+1
  4175  027F  083B               	movf	GPS_read_speed@read_speed_fra,w
  4176  0280  00A2               	movwf	convert_to_fp@fract_part
  4177  0281  3183  2389         	fcall	_convert_to_fp
  4178  0283  0020               	movlb	0	; select bank0
  4179  0284  0823               	movf	?_convert_to_fp+3,w
  4180  0285  00E4               	movwf	_speed+3
  4181  0286  0822               	movf	?_convert_to_fp+2,w
  4182  0287  00E3               	movwf	_speed+2
  4183  0288  0821               	movf	?_convert_to_fp+1,w
  4184  0289  00E2               	movwf	_speed+1
  4185  028A  0820               	movf	?_convert_to_fp,w
  4186  028B  00E1               	movwf	_speed
  4187                           
  4188                           ;GPS.c: 244: return 1;
  4189  028C  3001               	movlw	1
  4190                           
  4191                           ;GPS.c: 245: }
  4192  028D  0008               	return
  4193  028E                     l2915:	
  4194                           
  4195                           ;GPS.c: 246: else
  4196                           ;GPS.c: 247: return 0;
  4197  028E  3000               	movlw	0
  4198  028F  0008               	return
  4199  0290                     __end_of_GPS_read_speed:	
  4200                           
  4201                           	psect	text11
  4202  0389                     __ptext11:	
  4203 ;; *************** function _convert_to_fp *****************
  4204 ;; Defined at:
  4205 ;;		line 15 in file "fixed_point.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  int_part        2    0[BANK0 ] short 
  4208 ;;  fract_part      2    2[BANK0 ] short 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  i_bit           1   14[BANK0 ] unsigned char 
  4211 ;;  res             4   17[BANK0 ] long 
  4212 ;;  tmp_left        2   15[BANK0 ] unsigned short 
  4213 ;;  res_fract       2   12[BANK0 ] unsigned short 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  4    0[BANK0 ] long 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4223 ;;      Params:         0       4       0       0       0       0
  4224 ;;      Locals:         0       9       0       0       0       0
  4225 ;;      Temps:          0       8       0       0       0       0
  4226 ;;      Totals:         0      21       0       0       0       0
  4227 ;;Total ram usage:       21 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    6
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_GPS_read_speed
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _convert_to_fp
  4239  0389                     _convert_to_fp:	
  4240                           
  4241                           ;fixed_point.c: 21: t_fp res = 0;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  4245  0389  3000               	movlw	0
  4246  038A  0020               	movlb	0	; select bank0
  4247  038B  00B4               	movwf	convert_to_fp@res+3
  4248  038C  3000               	movlw	0
  4249  038D  00B3               	movwf	convert_to_fp@res+2
  4250  038E  3000               	movlw	0
  4251  038F  00B2               	movwf	convert_to_fp@res+1
  4252  0390  3000               	movlw	0
  4253  0391  00B1               	movwf	convert_to_fp@res
  4254                           
  4255                           ;fixed_point.c: 23: res = int_part;
  4256  0392  0820               	movf	convert_to_fp@int_part,w
  4257  0393  00B1               	movwf	convert_to_fp@res
  4258  0394  0821               	movf	convert_to_fp@int_part+1,w
  4259  0395  00B2               	movwf	convert_to_fp@res+1
  4260  0396  0D89               	rlf	9,f
  4261  0397  3B89               	subwfb	9,f
  4262  0398  0989               	comf	9,f
  4263  0399  00B3               	movwf	convert_to_fp@res+2
  4264  039A  00B4               	movwf	convert_to_fp@res+3
  4265                           
  4266                           ;fixed_point.c: 24: res = res << 16;
  4267  039B  0831               	movf	convert_to_fp@res,w
  4268  039C  00A4               	movwf	??_convert_to_fp
  4269  039D  0832               	movf	convert_to_fp@res+1,w
  4270  039E  00A5               	movwf	??_convert_to_fp+1
  4271  039F  0833               	movf	convert_to_fp@res+2,w
  4272  03A0  00A6               	movwf	??_convert_to_fp+2
  4273  03A1  0834               	movf	convert_to_fp@res+3,w
  4274  03A2  00A7               	movwf	??_convert_to_fp+3
  4275  03A3  3010               	movlw	16
  4276  03A4                     u2785:	
  4277  03A4  35A4               	lslf	??_convert_to_fp,f
  4278  03A5  0DA5               	rlf	??_convert_to_fp+1,f
  4279  03A6  0DA6               	rlf	??_convert_to_fp+2,f
  4280  03A7  0DA7               	rlf	??_convert_to_fp+3,f
  4281  03A8  0B89               	decfsz	9,f
  4282  03A9  2BA4               	goto	u2785
  4283  03AA  0827               	movf	??_convert_to_fp+3,w
  4284  03AB  00B4               	movwf	convert_to_fp@res+3
  4285  03AC  0826               	movf	??_convert_to_fp+2,w
  4286  03AD  00B3               	movwf	convert_to_fp@res+2
  4287  03AE  0825               	movf	??_convert_to_fp+1,w
  4288  03AF  00B2               	movwf	convert_to_fp@res+1
  4289  03B0  0824               	movf	??_convert_to_fp,w
  4290  03B1  00B1               	movwf	convert_to_fp@res
  4291                           
  4292                           ;fixed_point.c: 26: unsigned short tmp_left = fract_part;
  4293  03B2  0823               	movf	convert_to_fp@fract_part+1,w
  4294  03B3  00B0               	movwf	convert_to_fp@tmp_left+1
  4295  03B4  0822               	movf	convert_to_fp@fract_part,w
  4296  03B5  00AF               	movwf	convert_to_fp@tmp_left
  4297                           
  4298                           ;fixed_point.c: 27: unsigned short res_fract = 0;
  4299  03B6  01AC               	clrf	convert_to_fp@res_fract
  4300  03B7  01AD               	clrf	convert_to_fp@res_fract+1
  4301                           
  4302                           ;fixed_point.c: 28: const unsigned short one = 1;
  4303                           ;fixed_point.c: 29: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  4304  03B8  01AE               	clrf	convert_to_fp@i_bit
  4305  03B9  3010               	movlw	16
  4306  03BA  022E               	subwf	convert_to_fp@i_bit,w
  4307  03BB  1803               	btfsc	3,0
  4308  03BC  2BEF               	goto	l252
  4309  03BD                     l2527:	
  4310                           
  4311                           ;fixed_point.c: 30: {
  4312                           ;fixed_point.c: 31: tmp_left = tmp_left << 1;
  4313  03BD  352F               	lslf	convert_to_fp@tmp_left,w
  4314  03BE  00AF               	movwf	convert_to_fp@tmp_left
  4315  03BF  0D30               	rlf	convert_to_fp@tmp_left+1,w
  4316  03C0  00B0               	movwf	convert_to_fp@tmp_left+1
  4317                           
  4318                           ;fixed_point.c: 32: if (tmp_left >= 10000)
  4319  03C1  3027               	movlw	39
  4320  03C2  0230               	subwf	convert_to_fp@tmp_left+1,w
  4321  03C3  3010               	movlw	16
  4322  03C4  1903               	skipnz
  4323  03C5  022F               	subwf	convert_to_fp@tmp_left,w
  4324  03C6  1C03               	skipc
  4325  03C7  2BE7               	goto	l2533
  4326                           
  4327                           ;fixed_point.c: 33: {
  4328                           ;fixed_point.c: 34: res_fract = res_fract | one<<(16-i_bit-1);
  4329  03C8  30F7               	movlw	low (convert_to_fp@one| (0+32768))
  4330  03C9  0084               	movwf	4
  4331  03CA  3084               	movlw	high (convert_to_fp@one| (0+32768))
  4332  03CB  0085               	movwf	5
  4333  03CC  3F00               	moviw [0]fsr0
  4334  03CD  00A4               	movwf	??_convert_to_fp
  4335  03CE  3F01               	moviw [1]fsr0
  4336  03CF  00A5               	movwf	??_convert_to_fp+1
  4337  03D0  082E               	movf	convert_to_fp@i_bit,w
  4338  03D1  3E01               	addlw	1
  4339  03D2  3AFF               	xorlw	255
  4340  03D3  3E01               	addlw	1
  4341  03D4  3E10               	addlw	16
  4342  03D5  0A89               	incf	9,f
  4343  03D6  2BD9               	goto	u2814
  4344  03D7                     u2815:	
  4345  03D7  35A4               	lslf	??_convert_to_fp,f
  4346  03D8  0DA5               	rlf	??_convert_to_fp+1,f
  4347  03D9                     u2814:	
  4348  03D9  0B89               	decfsz	9,f
  4349  03DA  2BD7               	goto	u2815
  4350  03DB  082C               	movf	convert_to_fp@res_fract,w
  4351  03DC  0424               	iorwf	??_convert_to_fp,w
  4352  03DD  00AC               	movwf	convert_to_fp@res_fract
  4353  03DE  082D               	movf	convert_to_fp@res_fract+1,w
  4354  03DF  0425               	iorwf	??_convert_to_fp+1,w
  4355  03E0  00AD               	movwf	convert_to_fp@res_fract+1
  4356                           
  4357                           ;fixed_point.c: 35: tmp_left = tmp_left - 10000;
  4358  03E1  082F               	movf	convert_to_fp@tmp_left,w
  4359  03E2  3EF0               	addlw	240
  4360  03E3  00AF               	movwf	convert_to_fp@tmp_left
  4361  03E4  30D8               	movlw	216
  4362  03E5  3D30               	addwfc	convert_to_fp@tmp_left+1,w
  4363  03E6  00B0               	movwf	convert_to_fp@tmp_left+1
  4364  03E7                     l2533:	
  4365  03E7  3001               	movlw	1
  4366  03E8  00A4               	movwf	??_convert_to_fp
  4367  03E9  0824               	movf	??_convert_to_fp,w
  4368  03EA  07AE               	addwf	convert_to_fp@i_bit,f
  4369  03EB  3010               	movlw	16
  4370  03EC  022E               	subwf	convert_to_fp@i_bit,w
  4371  03ED  1C03               	skipc
  4372  03EE  2BBD               	goto	l2527
  4373  03EF                     l252:	
  4374                           
  4375                           ;fixed_point.c: 36: }
  4376                           ;fixed_point.c: 37: }
  4377                           ;fixed_point.c: 39: if (res < 0)
  4378  03EF  1FB4               	btfss	convert_to_fp@res+3,7
  4379  03F0  2C0B               	goto	l2539
  4380                           
  4381                           ;fixed_point.c: 40: res = res - res_fract;
  4382  03F1  0831               	movf	convert_to_fp@res,w
  4383  03F2  00A4               	movwf	??_convert_to_fp
  4384  03F3  0832               	movf	convert_to_fp@res+1,w
  4385  03F4  00A5               	movwf	??_convert_to_fp+1
  4386  03F5  0833               	movf	convert_to_fp@res+2,w
  4387  03F6  00A6               	movwf	??_convert_to_fp+2
  4388  03F7  0834               	movf	convert_to_fp@res+3,w
  4389  03F8  00A7               	movwf	??_convert_to_fp+3
  4390  03F9  082C               	movf	convert_to_fp@res_fract,w
  4391  03FA  00A8               	movwf	??_convert_to_fp+4
  4392  03FB  082D               	movf	convert_to_fp@res_fract+1,w
  4393  03FC  00A9               	movwf	??_convert_to_fp+5
  4394  03FD  01AA               	clrf	??_convert_to_fp+6
  4395  03FE  01AB               	clrf	??_convert_to_fp+7
  4396  03FF  09A8               	comf	??_convert_to_fp+4,f
  4397  0400  09A9               	comf	??_convert_to_fp+5,f
  4398  0401  09AA               	comf	??_convert_to_fp+6,f
  4399  0402  09AB               	comf	??_convert_to_fp+7,f
  4400  0403  0AA8               	incf	??_convert_to_fp+4,f
  4401  0404  1903               	skipnz
  4402  0405  0AA9               	incf	??_convert_to_fp+5,f
  4403  0406  1903               	skipnz
  4404  0407  0AAA               	incf	??_convert_to_fp+6,f
  4405  0408  1903               	skipnz
  4406  0409  0AAB               	incf	??_convert_to_fp+7,f
  4407  040A  2C19               	goto	L3
  4408  040B                     l2539:	
  4409                           
  4410                           ;fixed_point.c: 41: else
  4411                           ;fixed_point.c: 42: res = res + res_fract;
  4412  040B  0831               	movf	convert_to_fp@res,w
  4413  040C  00A4               	movwf	??_convert_to_fp
  4414  040D  0832               	movf	convert_to_fp@res+1,w
  4415  040E  00A5               	movwf	??_convert_to_fp+1
  4416  040F  0833               	movf	convert_to_fp@res+2,w
  4417  0410  00A6               	movwf	??_convert_to_fp+2
  4418  0411  0834               	movf	convert_to_fp@res+3,w
  4419  0412  00A7               	movwf	??_convert_to_fp+3
  4420  0413  082C               	movf	convert_to_fp@res_fract,w
  4421  0414  00A8               	movwf	??_convert_to_fp+4
  4422  0415  082D               	movf	convert_to_fp@res_fract+1,w
  4423  0416  00A9               	movwf	??_convert_to_fp+5
  4424  0417  01AA               	clrf	??_convert_to_fp+6
  4425  0418  01AB               	clrf	??_convert_to_fp+7
  4426  0419                     L3:	
  4427  0419  0828               	movf	??_convert_to_fp+4,w
  4428  041A  07A4               	addwf	??_convert_to_fp,f
  4429  041B  0829               	movf	??_convert_to_fp+5,w
  4430  041C  3DA5               	addwfc	??_convert_to_fp+1,f
  4431  041D  082A               	movf	??_convert_to_fp+6,w
  4432  041E  3DA6               	addwfc	??_convert_to_fp+2,f
  4433  041F  082B               	movf	??_convert_to_fp+7,w
  4434  0420  3DA7               	addwfc	??_convert_to_fp+3,f
  4435  0421  0827               	movf	??_convert_to_fp+3,w
  4436  0422  00B4               	movwf	convert_to_fp@res+3
  4437  0423  0826               	movf	??_convert_to_fp+2,w
  4438  0424  00B3               	movwf	convert_to_fp@res+2
  4439  0425  0825               	movf	??_convert_to_fp+1,w
  4440  0426  00B2               	movwf	convert_to_fp@res+1
  4441  0427  0824               	movf	??_convert_to_fp,w
  4442  0428  00B1               	movwf	convert_to_fp@res
  4443                           
  4444                           ;fixed_point.c: 43: return res;
  4445  0429  0834               	movf	convert_to_fp@res+3,w
  4446  042A  00A3               	movwf	?_convert_to_fp+3
  4447  042B  0833               	movf	convert_to_fp@res+2,w
  4448  042C  00A2               	movwf	?_convert_to_fp+2
  4449  042D  0832               	movf	convert_to_fp@res+1,w
  4450  042E  00A1               	movwf	?_convert_to_fp+1
  4451  042F  0831               	movf	convert_to_fp@res,w
  4452  0430  00A0               	movwf	?_convert_to_fp
  4453  0431  0008               	return
  4454  0432                     __end_of_convert_to_fp:	
  4455                           
  4456                           	psect	text12
  4457  0673                     __ptext12:	
  4458 ;; *************** function ___wmul *****************
  4459 ;; Defined at:
  4460 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4463 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  product         2    4[COMMON] unsigned int 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  2    0[BANK0 ] unsigned int 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4475 ;;      Params:         0       4       0       0       0       0
  4476 ;;      Locals:         2       0       0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0
  4478 ;;      Totals:         2       4       0       0       0       0
  4479 ;;Total ram usage:        6 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    6
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_GPS_read_speed
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function ___wmul
  4491  0673                     ___wmul:	
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4495  0673  01F4               	clrf	___wmul@product
  4496  0674  01F5               	clrf	___wmul@product+1
  4497  0675                     l2551:	
  4498  0675  0020               	movlb	0	; select bank0
  4499  0676  1C20               	btfss	___wmul@multiplier,0
  4500  0677  2E7C               	goto	l571
  4501  0678  0822               	movf	___wmul@multiplicand,w
  4502  0679  07F4               	addwf	___wmul@product,f
  4503  067A  0823               	movf	___wmul@multiplicand+1,w
  4504  067B  3DF5               	addwfc	___wmul@product+1,f
  4505  067C                     l571:	
  4506  067C  3001               	movlw	1
  4507  067D                     u2865:	
  4508  067D  35A2               	lslf	___wmul@multiplicand,f
  4509  067E  0DA3               	rlf	___wmul@multiplicand+1,f
  4510  067F  0B89               	decfsz	9,f
  4511  0680  2E7D               	goto	u2865
  4512  0681  3001               	movlw	1
  4513  0682                     u2875:	
  4514  0682  36A1               	lsrf	___wmul@multiplier+1,f
  4515  0683  0CA0               	rrf	___wmul@multiplier,f
  4516  0684  0B89               	decfsz	9,f
  4517  0685  2E82               	goto	u2875
  4518  0686  0820               	movf	___wmul@multiplier,w
  4519  0687  0421               	iorwf	___wmul@multiplier+1,w
  4520  0688  1D03               	btfss	3,2
  4521  0689  2E75               	goto	l2551
  4522  068A  0875               	movf	___wmul@product+1,w
  4523  068B  00A1               	movwf	?___wmul+1
  4524  068C  0874               	movf	___wmul@product,w
  4525  068D  00A0               	movwf	?___wmul
  4526  068E  0008               	return
  4527  068F                     __end_of___wmul:	
  4528                           
  4529                           	psect	text13
  4530  05FD                     __ptext13:	
  4531 ;; *************** function _EUSART_Read *****************
  4532 ;; Defined at:
  4533 ;;		line 112 in file "mcc_generated_files/eusart.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  readValue       1    5[COMMON] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      unsigned char 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4547 ;;      Params:         0       0       0       0       0       0
  4548 ;;      Locals:         1       0       0       0       0       0
  4549 ;;      Temps:          1       0       0       0       0       0
  4550 ;;      Totals:         2       0       0       0       0       0
  4551 ;;Total ram usage:        2 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    6
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		_GPS_read_speed
  4558 ;;		_getch
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _EUSART_Read
  4564  05FD                     _EUSART_Read:	
  4565                           
  4566                           ;eusart.c: 114: uint8_t readValue = 0;
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4570  05FD  01F5               	clrf	EUSART_Read@readValue
  4571                           
  4572                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  4573  05FE  0023               	movlb	3	; select bank3
  4574  05FF  169D               	bsf	29,5	;volatile
  4575  0600                     l1891:	
  4576                           ;eusart.c: 120: {
  4577                           
  4578                           ;eusart.c: 119: while(0 == eusartRxCount)
  4579                           
  4580  0600  0878               	movf	_eusartRxCount,w	;volatile
  4581  0601  1903               	btfsc	3,2
  4582  0602  2E00               	goto	l1891
  4583                           
  4584                           ;eusart.c: 121: }
  4585                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  4586  0603  0021               	movlb	1	; select bank1
  4587  0604  1291               	bcf	17,5	;volatile
  4588                           
  4589                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  4590  0605  0020               	movlb	0	; select bank0
  4591  0606  086A               	movf	_eusartRxTail,w
  4592  0607  3E4A               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4593  0608  0086               	movwf	6
  4594  0609  0187               	clrf	7
  4595  060A  0801               	movf	1,w
  4596  060B  00F4               	movwf	??_EUSART_Read
  4597  060C  0874               	movf	??_EUSART_Read,w
  4598  060D  00F5               	movwf	EUSART_Read@readValue
  4599  060E  3001               	movlw	1
  4600  060F  00F4               	movwf	??_EUSART_Read
  4601  0610  0874               	movf	??_EUSART_Read,w
  4602  0611  07EA               	addwf	_eusartRxTail,f
  4603                           
  4604                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4605  0612  3008               	movlw	8
  4606  0613  026A               	subwf	_eusartRxTail,w
  4607  0614  1803               	btfsc	3,0
  4608                           
  4609                           ;eusart.c: 127: {
  4610                           ;eusart.c: 128: eusartRxTail = 0;
  4611  0615  01EA               	clrf	_eusartRxTail
  4612                           
  4613                           ;eusart.c: 129: }
  4614                           ;eusart.c: 130: eusartRxCount--;
  4615  0616  3001               	movlw	1
  4616  0617  02F8               	subwf	_eusartRxCount,f	;volatile
  4617                           
  4618                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  4619  0618  0021               	movlb	1	; select bank1
  4620  0619  1691               	bsf	17,5	;volatile
  4621                           
  4622                           ;eusart.c: 133: return readValue;
  4623  061A  0875               	movf	EUSART_Read@readValue,w
  4624  061B  0008               	return
  4625  061C                     __end_of_EUSART_Read:	
  4626                           
  4627                           	psect	text14
  4628  053F                     __ptext14:	
  4629 ;; *************** function _GPS_Initialize *****************
  4630 ;; Defined at:
  4631 ;;		line 12 in file "GPS.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  tmp             1   11[BANK0 ] unsigned char 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4645 ;;      Params:         0       0       0       0       0       0
  4646 ;;      Locals:         0       1       0       0       0       0
  4647 ;;      Temps:          0       3       0       0       0       0
  4648 ;;      Totals:         0       4       0       0       0       0
  4649 ;;Total ram usage:        4 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    9
  4652 ;; This function calls:
  4653 ;;		_printf
  4654 ;; This function is called by:
  4655 ;;		_main
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _GPS_Initialize
  4661  053F                     _GPS_Initialize:	
  4662                           
  4663                           ;GPS.c: 14: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(3200
      +                          0000/4000.0)));};
  4664                           
  4665                           ;incstack = 0
  4666                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4667  053F  0020               	movlb	0	; select bank0
  4668  0540  01AB               	clrf	GPS_Initialize@tmp
  4669  0541  300A               	movlw	10
  4670  0542  022B               	subwf	GPS_Initialize@tmp,w
  4671  0543  1803               	btfsc	3,0
  4672  0544  2D5A               	goto	l2591
  4673  0545                     l2585:	
  4674  0545  3005               	movlw	5
  4675  0546  00AA               	movwf	??_GPS_Initialize+2
  4676  0547  300F               	movlw	15
  4677  0548  00A9               	movwf	??_GPS_Initialize+1
  4678  0549  30F4               	movlw	244
  4679  054A  00A8               	movwf	??_GPS_Initialize
  4680  054B                     u3747:	
  4681  054B  0BA8               	decfsz	??_GPS_Initialize,f
  4682  054C  2D4B               	goto	u3747
  4683  054D  0BA9               	decfsz	??_GPS_Initialize+1,f
  4684  054E  2D4B               	goto	u3747
  4685  054F  0BAA               	decfsz	??_GPS_Initialize+2,f
  4686  0550  2D4B               	goto	u3747
  4687  0551  3001               	movlw	1
  4688  0552  0020               	movlb	0	; select bank0
  4689  0553  00A8               	movwf	??_GPS_Initialize
  4690  0554  0828               	movf	??_GPS_Initialize,w
  4691  0555  07AB               	addwf	GPS_Initialize@tmp,f
  4692  0556  300A               	movlw	10
  4693  0557  022B               	subwf	GPS_Initialize@tmp,w
  4694  0558  1C03               	skipc
  4695  0559  2D45               	goto	l2585
  4696  055A                     l2591:	
  4697                           
  4698                           ;GPS.c: 16: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  4699  055A  30F9               	movlw	low (STR_1| (0+32768))
  4700  055B  00A1               	movwf	printf@f
  4701  055C  3084               	movlw	high (STR_1| (0+32768))
  4702  055D  00A2               	movwf	printf@f+1
  4703  055E  3186  2639  3185   	fcall	_printf
  4704                           
  4705                           ;GPS.c: 17: _delay((unsigned long)((100)*(32000000/4000.0)));
  4706  0561  3005               	movlw	5
  4707  0562  0020               	movlb	0	; select bank0
  4708  0563  00AA               	movwf	??_GPS_Initialize+2
  4709  0564  300F               	movlw	15
  4710  0565  00A9               	movwf	??_GPS_Initialize+1
  4711  0566  30F4               	movlw	244
  4712  0567  00A8               	movwf	??_GPS_Initialize
  4713  0568                     u3757:	
  4714  0568  0BA8               	decfsz	??_GPS_Initialize,f
  4715  0569  2D68               	goto	u3757
  4716  056A  0BA9               	decfsz	??_GPS_Initialize+1,f
  4717  056B  2D68               	goto	u3757
  4718  056C  0BAA               	decfsz	??_GPS_Initialize+2,f
  4719  056D  2D68               	goto	u3757
  4720                           
  4721                           ;GPS.c: 19: printf("$PMTK220,100*2F\r\n");
  4722  056E  302D               	movlw	low (STR_2| (0+32768))
  4723  056F  0020               	movlb	0	; select bank0
  4724  0570  00A1               	movwf	printf@f
  4725  0571  3085               	movlw	high (STR_2| (0+32768))
  4726  0572  00A2               	movwf	printf@f+1
  4727  0573  3186  2639  3185   	fcall	_printf
  4728                           
  4729                           ;GPS.c: 20: _delay((unsigned long)((100)*(32000000/4000.0)));
  4730  0576  3005               	movlw	5
  4731  0577  0020               	movlb	0	; select bank0
  4732  0578  00AA               	movwf	??_GPS_Initialize+2
  4733  0579  300F               	movlw	15
  4734  057A  00A9               	movwf	??_GPS_Initialize+1
  4735  057B  30F4               	movlw	244
  4736  057C  00A8               	movwf	??_GPS_Initialize
  4737  057D                     u3767:	
  4738  057D  0BA8               	decfsz	??_GPS_Initialize,f
  4739  057E  2D7D               	goto	u3767
  4740  057F  0BA9               	decfsz	??_GPS_Initialize+1,f
  4741  0580  2D7D               	goto	u3767
  4742  0581  0BAA               	decfsz	??_GPS_Initialize+2,f
  4743  0582  2D7D               	goto	u3767
  4744  0583  0008               	return
  4745  0584                     __end_of_GPS_Initialize:	
  4746                           
  4747                           	psect	text15
  4748  0639                     __ptext15:	
  4749 ;; *************** function _printf *****************
  4750 ;; Defined at:
  4751 ;;		line 464 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  4754 ;;		 -> STR_2(18), STR_1(52), 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  tmpval          4    0        struct .
  4757 ;;  cp              2    0        PTR const unsigned char 
  4758 ;;  len             2    0        unsigned int 
  4759 ;;  val             2    0        unsigned int 
  4760 ;;  c               1    7[BANK0 ] char 
  4761 ;;  ap              1    6[BANK0 ] PTR void [1]
  4762 ;;		 -> ?_printf(2), 
  4763 ;;  flag            1    0        unsigned char 
  4764 ;;  prec            1    0        char 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  2    1[BANK0 ] int 
  4767 ;; Registers used:
  4768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4774 ;;      Params:         0       2       0       0       0       0
  4775 ;;      Locals:         0       2       0       0       0       0
  4776 ;;      Temps:          0       3       0       0       0       0
  4777 ;;      Totals:         0       7       0       0       0       0
  4778 ;;Total ram usage:        7 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    8
  4781 ;; This function calls:
  4782 ;;		_putch
  4783 ;; This function is called by:
  4784 ;;		_GPS_Initialize
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           
  4789                           ;psect for function _printf
  4790  0639                     _printf:	
  4791                           
  4792                           ;doprnt.c: 466: va_list ap;
  4793                           ;doprnt.c: 499: signed char c;
  4794                           ;doprnt.c: 506: signed char prec;
  4795                           ;doprnt.c: 508: unsigned char flag;
  4796                           ;doprnt.c: 523: union {
  4797                           ;doprnt.c: 524: unsigned long vd;
  4798                           ;doprnt.c: 525: double integ;
  4799                           ;doprnt.c: 526: } tmpval;
  4800                           ;doprnt.c: 528: unsigned int val;
  4801                           ;doprnt.c: 529: unsigned len;
  4802                           ;doprnt.c: 530: const char * cp;
  4803                           ;doprnt.c: 533: *ap = __va_start();
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4807  0639  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4808  063A  0020               	movlb	0	; select bank0
  4809  063B  00A3               	movwf	??_printf
  4810  063C  0823               	movf	??_printf,w
  4811  063D  00A6               	movwf	printf@ap
  4812  063E                     l2547:	
  4813                           ;doprnt.c: 543: }
  4814                           ;doprnt.c: 1422: {
  4815                           
  4816                           ;doprnt.c: 542: continue;
  4817                           
  4818                           ;doprnt.c: 536: while(c = *f++) {
  4819                           
  4820  063E  0020               	movlb	0	; select bank0
  4821  063F  0822               	movf	printf@f+1,w
  4822  0640  00A4               	movwf	??_printf+1
  4823  0641  0821               	movf	printf@f,w
  4824  0642  00A3               	movwf	??_printf
  4825  0643  0AA1               	incf	printf@f,f
  4826  0644  1903               	skipnz
  4827  0645  0AA2               	incf	printf@f+1,f
  4828  0646  0823               	movf	??_printf,w
  4829  0647  0084               	movwf	4
  4830  0648  0824               	movf	??_printf+1,w
  4831  0649  0085               	movwf	5
  4832  064A  0800               	movf	0,w	;code access
  4833  064B  00A5               	movwf	??_printf+2
  4834  064C  0825               	movf	??_printf+2,w
  4835  064D  00A7               	movwf	printf@c
  4836  064E  0827               	movf	printf@c,w
  4837  064F  1903               	btfsc	3,2
  4838  0650  0008               	return
  4839                           
  4840                           ;doprnt.c: 540: {
  4841                           ;doprnt.c: 541: (putch(c) );
  4842  0651  0827               	movf	printf@c,w
  4843  0652  3187  273D  3186   	fcall	_putch
  4844  0655  2E3E               	goto	l2547
  4845  0656                     __end_of_printf:	
  4846                           ;doprnt.c: 1469: }
  4847                           ;doprnt.c: 1533: }
  4848                           ;doprnt.c: 1540: return 0;
  4849                           ;	Return value of _printf is never used
  4850                           
  4851                           
  4852                           	psect	text16
  4853  073D                     __ptext16:	
  4854 ;; *************** function _putch *****************
  4855 ;; Defined at:
  4856 ;;		line 164 in file "mcc_generated_files/eusart.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  txData          1    wreg     unsigned char 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  txData          1    0[BANK0 ] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4870 ;;      Params:         0       0       0       0       0       0
  4871 ;;      Locals:         0       1       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0
  4873 ;;      Totals:         0       1       0       0       0       0
  4874 ;;Total ram usage:        1 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    7
  4877 ;; This function calls:
  4878 ;;		_EUSART_Write
  4879 ;; This function is called by:
  4880 ;;		_printf
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _putch
  4886  073D                     _putch:	
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4890                           ;putch@txData stored from wreg
  4891  073D  0020               	movlb	0	; select bank0
  4892  073E  00A0               	movwf	putch@txData
  4893                           
  4894                           ;eusart.c: 166: EUSART_Write(txData);
  4895  073F  0820               	movf	putch@txData,w
  4896  0740  3185  25DA         	fcall	_EUSART_Write
  4897  0742  0008               	return
  4898  0743                     __end_of_putch:	
  4899                           
  4900                           	psect	text17
  4901  05DA                     __ptext17:	
  4902 ;; *************** function _EUSART_Write *****************
  4903 ;; Defined at:
  4904 ;;		line 136 in file "mcc_generated_files/eusart.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  txData          1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  txData          1    5[COMMON] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4918 ;;      Params:         0       0       0       0       0       0
  4919 ;;      Locals:         1       0       0       0       0       0
  4920 ;;      Temps:          1       0       0       0       0       0
  4921 ;;      Totals:         2       0       0       0       0       0
  4922 ;;Total ram usage:        2 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    6
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_putch
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _EUSART_Write
  4934  05DA                     _EUSART_Write:	
  4935                           
  4936                           ;incstack = 0
  4937                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4938                           ;EUSART_Write@txData stored from wreg
  4939  05DA  00F5               	movwf	EUSART_Write@txData
  4940  05DB                     l2483:	
  4941                           ;eusart.c: 139: {
  4942                           
  4943                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  4944                           
  4945  05DB  0020               	movlb	0	; select bank0
  4946  05DC  086B               	movf	_eusartTxBufferRemaining,w	;volatile
  4947  05DD  1903               	btfsc	3,2
  4948  05DE  2DDB               	goto	l2483
  4949                           
  4950                           ;eusart.c: 140: }
  4951                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  4952  05DF  0021               	movlb	1	; select bank1
  4953  05E0  1A11               	btfsc	17,4	;volatile
  4954  05E1  2DE6               	goto	l167
  4955                           
  4956                           ;eusart.c: 143: {
  4957                           ;eusart.c: 144: TXREG = txData;
  4958  05E2  0875               	movf	EUSART_Write@txData,w
  4959  05E3  0023               	movlb	3	; select bank3
  4960  05E4  009A               	movwf	26	;volatile
  4961                           
  4962                           ;eusart.c: 145: }
  4963  05E5  2DFA               	goto	l2497
  4964  05E6                     l167:	
  4965                           
  4966                           ;eusart.c: 146: else
  4967                           ;eusart.c: 147: {
  4968                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  4969  05E6  1211               	bcf	17,4	;volatile
  4970                           
  4971                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  4972  05E7  0875               	movf	EUSART_Write@txData,w
  4973  05E8  00F4               	movwf	??_EUSART_Write
  4974  05E9  0020               	movlb	0	; select bank0
  4975  05EA  086C               	movf	_eusartTxHead,w
  4976  05EB  3E52               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4977  05EC  0086               	movwf	6
  4978  05ED  0187               	clrf	7
  4979  05EE  0874               	movf	??_EUSART_Write,w
  4980  05EF  0081               	movwf	1
  4981  05F0  3001               	movlw	1
  4982  05F1  00F4               	movwf	??_EUSART_Write
  4983  05F2  0874               	movf	??_EUSART_Write,w
  4984  05F3  07EC               	addwf	_eusartTxHead,f
  4985                           
  4986                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4987  05F4  3008               	movlw	8
  4988  05F5  026C               	subwf	_eusartTxHead,w
  4989  05F6  1803               	btfsc	3,0
  4990                           
  4991                           ;eusart.c: 151: {
  4992                           ;eusart.c: 152: eusartTxHead = 0;
  4993  05F7  01EC               	clrf	_eusartTxHead
  4994                           
  4995                           ;eusart.c: 153: }
  4996                           ;eusart.c: 154: eusartTxBufferRemaining--;
  4997  05F8  3001               	movlw	1
  4998  05F9  02EB               	subwf	_eusartTxBufferRemaining,f	;volatile
  4999  05FA                     l2497:	
  5000                           
  5001                           ;eusart.c: 155: }
  5002                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  5003  05FA  0021               	movlb	1	; select bank1
  5004  05FB  1611               	bsf	17,4	;volatile
  5005  05FC  0008               	return
  5006  05FD                     __end_of_EUSART_Write:	
  5007                           
  5008                           	psect	intentry
  5009  0004                     __pintentry:	
  5010 ;; *************** function _INTERRUPT_InterruptManager *****************
  5011 ;; Defined at:
  5012 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;		None
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;		None
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  1    wreg      void 
  5019 ;; Registers used:
  5020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5026 ;;      Params:         0       0       0       0       0       0
  5027 ;;      Locals:         0       0       0       0       0       0
  5028 ;;      Temps:          1       0       0       0       0       0
  5029 ;;      Totals:         1       0       0       0       0       0
  5030 ;;Total ram usage:        1 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    5
  5033 ;; This function calls:
  5034 ;;		_EUSART_Receive_ISR
  5035 ;;		_EUSART_Transmit_ISR
  5036 ;;		_TMR0_ISR
  5037 ;; This function is called by:
  5038 ;;		Interrupt level 1
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042  0004                     _INTERRUPT_InterruptManager:	
  5043                           
  5044                           ;incstack = 0
  5045  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5046                           
  5047                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5048  0005  3180               	pagesel	$
  5049  0006  0020               	movlb	0	; select bank0
  5050  0007  087F               	movf	127,w
  5051  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  5052                           
  5053                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5054  0009  1A8B               	btfsc	11,5	;volatile
  5055  000A  1D0B               	btfss	11,2	;volatile
  5056  000B  280F               	goto	i1l2373
  5057                           
  5058                           ;interrupt_manager.c: 55: {
  5059                           ;interrupt_manager.c: 56: TMR0_ISR();
  5060  000C  3186  26F1  3180   	fcall	_TMR0_ISR
  5061  000F                     i1l2373:	
  5062                           
  5063                           ;interrupt_manager.c: 57: }
  5064                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  5065  000F  1F0B               	btfss	11,6	;volatile
  5066  0010  281A               	goto	i1l2381
  5067  0011  0021               	movlb	1	; select bank1
  5068  0012  1E11               	btfss	17,4	;volatile
  5069  0013  281A               	goto	i1l2381
  5070  0014  0020               	movlb	0	; select bank0
  5071  0015  1E11               	btfss	17,4	;volatile
  5072  0016  281A               	goto	i1l2381
  5073                           
  5074                           ;interrupt_manager.c: 59: {
  5075                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  5076  0017  3186  2656  3180   	fcall	_EUSART_Transmit_ISR
  5077  001A                     i1l2381:	
  5078                           
  5079                           ;interrupt_manager.c: 61: }
  5080                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  5081  001A  1F0B               	btfss	11,6	;volatile
  5082  001B  2824               	goto	i1l73
  5083  001C  0021               	movlb	1	; select bank1
  5084  001D  1E91               	btfss	17,5	;volatile
  5085  001E  2824               	goto	i1l73
  5086  001F  0020               	movlb	0	; select bank0
  5087  0020  1E91               	btfss	17,5	;volatile
  5088  0021  2824               	goto	i1l73
  5089                           
  5090                           ;interrupt_manager.c: 63: {
  5091                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  5092  0022  3186  26AA         	fcall	_EUSART_Receive_ISR
  5093  0024                     i1l73:	
  5094                           ;interrupt_manager.c: 66: else
  5095                           ;interrupt_manager.c: 67: {
  5096                           
  5097                           ;interrupt_manager.c: 65: }
  5098                           
  5099  0024  0873               	movf	??_INTERRUPT_InterruptManager,w
  5100  0025  0020               	movlb	0	; select bank0
  5101  0026  00FF               	movwf	127
  5102  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5103  0028  0009               	retfie
  5104  0029                     __end_of_INTERRUPT_InterruptManager:	
  5105                           
  5106                           	psect	text19
  5107  06F1                     __ptext19:	
  5108 ;; *************** function _TMR0_ISR *****************
  5109 ;; Defined at:
  5110 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;		None
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      void 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0, pclath, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5124 ;;      Params:         0       0       0       0       0       0
  5125 ;;      Locals:         0       0       0       0       0       0
  5126 ;;      Temps:          0       0       0       0       0       0
  5127 ;;      Totals:         0       0       0       0       0       0
  5128 ;;Total ram usage:        0 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    4
  5131 ;; This function calls:
  5132 ;;		_TMR0_CallBack
  5133 ;; This function is called by:
  5134 ;;		_INTERRUPT_InterruptManager
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _TMR0_ISR
  5140  06F1                     _TMR0_ISR:	
  5141                           
  5142                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  5143                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  5144                           
  5145                           ;incstack = 0
  5146                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5147  06F1  110B               	bcf	11,2	;volatile
  5148                           
  5149                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  5150  06F2  0879               	movf	_timer0ReloadVal,w	;volatile
  5151  06F3  0020               	movlb	0	; select bank0
  5152  06F4  0095               	movwf	21	;volatile
  5153                           
  5154                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  5155  06F5  3001               	movlw	1
  5156  06F6  07E5               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  5157  06F7  3000               	movlw	0
  5158  06F8  3DE6               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  5159  06F9  3000               	movlw	0
  5160  06FA  0266               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  5161  06FB  3002               	movlw	2
  5162  06FC  1903               	skipnz
  5163  06FD  0265               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  5164  06FE  1C03               	skipc
  5165  06FF  0008               	return
  5166                           
  5167                           ;tmr0.c: 119: {
  5168                           ;tmr0.c: 121: TMR0_CallBack();
  5169  0700  3187  271E         	fcall	_TMR0_CallBack
  5170                           
  5171                           ;tmr0.c: 124: CountCallBack = 0;
  5172  0702  0020               	movlb	0	; select bank0
  5173  0703  01E5               	clrf	TMR0_ISR@CountCallBack	;volatile
  5174  0704  01E6               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  5175  0705  0008               	return
  5176  0706                     __end_of_TMR0_ISR:	
  5177                           
  5178                           	psect	text20
  5179  071E                     __ptext20:	
  5180 ;; *************** function _TMR0_CallBack *****************
  5181 ;; Defined at:
  5182 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;		None
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0, pclath, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5196 ;;      Params:         0       0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0
  5199 ;;      Totals:         0       0       0       0       0       0
  5200 ;;Total ram usage:        0 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    3
  5203 ;; This function calls:
  5204 ;;		Absolute function
  5205 ;;		_TMR0_DefaultInterruptHandler
  5206 ;;		_my10msTimerISR
  5207 ;; This function is called by:
  5208 ;;		_TMR0_ISR
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _TMR0_CallBack
  5214  071E                     _TMR0_CallBack:	
  5215                           
  5216                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  5217                           
  5218                           ;incstack = 0
  5219                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5220  071E  0020               	movlb	0	; select bank0
  5221  071F  0867               	movf	_TMR0_InterruptHandler,w
  5222  0720  0468               	iorwf	_TMR0_InterruptHandler+1,w
  5223  0721  1903               	btfsc	3,2
  5224  0722  0008               	return
  5225                           
  5226                           ;tmr0.c: 135: {
  5227                           ;tmr0.c: 136: TMR0_InterruptHandler();
  5228  0723  0868               	movf	_TMR0_InterruptHandler+1,w
  5229  0724  008A               	movwf	10
  5230  0725  0867               	movf	_TMR0_InterruptHandler,w
  5231  0726  000A               	callw
  5232  0727  3187               	pagesel	$
  5233  0728  0008               	return
  5234  0729                     __end_of_TMR0_CallBack:	
  5235                           
  5236                           	psect	text21
  5237  0749                     __ptext21:	
  5238 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5239 ;; Defined at:
  5240 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		None
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5254 ;;      Params:         0       0       0       0       0       0
  5255 ;;      Locals:         0       0       0       0       0       0
  5256 ;;      Temps:          0       0       0       0       0       0
  5257 ;;      Totals:         0       0       0       0       0       0
  5258 ;;Total ram usage:        0 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_TMR0_Initialize
  5264 ;;		_TMR0_CallBack
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           
  5269                           ;psect for function _TMR0_DefaultInterruptHandler
  5270  0749                     _TMR0_DefaultInterruptHandler:	
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5274  0749  0008               	return
  5275  074A                     __end_of_TMR0_DefaultInterruptHandler:	
  5276                           
  5277                           	psect	text22
  5278  0743                     __ptext22:	
  5279 ;; *************** function _my10msTimerISR *****************
  5280 ;; Defined at:
  5281 ;;		line 141 in file "main.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, pclath, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5295 ;;      Params:         0       0       0       0       0       0
  5296 ;;      Locals:         0       0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0
  5298 ;;      Totals:         0       0       0       0       0       0
  5299 ;;Total ram usage:        0 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    2
  5302 ;; This function calls:
  5303 ;;		_LED_update_loop
  5304 ;;		_button_update_loop
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;;		_TMR0_CallBack
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _my10msTimerISR
  5313  0743                     _my10msTimerISR:	
  5314                           
  5315                           ;main.c: 143: LED_update_loop();
  5316                           
  5317                           ;incstack = 0
  5318                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  5319  0743  3185  25B4  3187   	fcall	_LED_update_loop
  5320                           
  5321                           ;main.c: 144: button_update_loop();
  5322  0746  3184  2432         	fcall	_button_update_loop
  5323  0748  0008               	return
  5324  0749                     __end_of_my10msTimerISR:	
  5325                           
  5326                           	psect	text23
  5327  0432                     __ptext23:	
  5328 ;; *************** function _button_update_loop *****************
  5329 ;; Defined at:
  5330 ;;		line 74 in file "interact.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  current_stat    1    2[COMMON] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5344 ;;      Params:         0       0       0       0       0       0
  5345 ;;      Locals:         1       0       0       0       0       0
  5346 ;;      Temps:          1       0       0       0       0       0
  5347 ;;      Totals:         2       0       0       0       0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    1
  5351 ;; This function calls:
  5352 ;;		_get_button_state
  5353 ;; This function is called by:
  5354 ;;		_my10msTimerISR
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _button_update_loop
  5360  0432                     _button_update_loop:	
  5361                           
  5362                           ;interact.c: 76: unsigned char current_state = get_button_state();
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  5366  0432  3187  2712  3184   	fcall	_get_button_state
  5367  0435  00F1               	movwf	??_button_update_loop
  5368  0436  0871               	movf	??_button_update_loop,w
  5369  0437  00F2               	movwf	button_update_loop@current_state
  5370                           
  5371                           ;interact.c: 77: if (!m_button.push_confirmed)
  5372  0438  0020               	movlb	0	; select bank0
  5373  0439  085D               	movf	_m_button+3,w	;volatile
  5374  043A  1D03               	btfss	3,2
  5375  043B  2C56               	goto	i1l1797
  5376                           
  5377                           ;interact.c: 78: {
  5378                           ;interact.c: 80: if (current_state != m_button.last_state)
  5379  043C  085F               	movf	_m_button+5,w	;volatile
  5380  043D  0672               	xorwf	button_update_loop@current_state,w
  5381  043E  1903               	skipnz
  5382  043F  2C46               	goto	i1l1789
  5383                           
  5384                           ;interact.c: 81: {
  5385                           ;interact.c: 82: m_button.count_pressed = 0;
  5386  0440  01DB               	clrf	_m_button+1	;volatile
  5387                           
  5388                           ;interact.c: 83: m_button.last_state = current_state;
  5389  0441  0872               	movf	button_update_loop@current_state,w
  5390  0442  00F1               	movwf	??_button_update_loop
  5391  0443  0871               	movf	??_button_update_loop,w
  5392  0444  00DF               	movwf	_m_button+5	;volatile
  5393                           
  5394                           ;interact.c: 84: }
  5395  0445  0008               	return
  5396  0446                     i1l1789:	
  5397                           
  5398                           ;interact.c: 85: else if (m_button.last_state == 1)
  5399  0446  035F               	decf	_m_button+5,w	;volatile
  5400  0447  1D03               	btfss	3,2
  5401  0448  0008               	return
  5402                           
  5403                           ;interact.c: 86: {
  5404                           ;interact.c: 87: m_button.count_pressed++;
  5405  0449  3001               	movlw	1
  5406  044A  00F1               	movwf	??_button_update_loop
  5407  044B  0871               	movf	??_button_update_loop,w
  5408  044C  07DB               	addwf	_m_button+1,f	;volatile
  5409                           
  5410                           ;interact.c: 88: if (m_button.count_pressed > 5)
  5411  044D  3006               	movlw	6
  5412  044E  025B               	subwf	_m_button+1,w	;volatile
  5413  044F  1C03               	skipc
  5414  0450  0008               	return
  5415                           
  5416                           ;interact.c: 89: m_button.push_confirmed = 1;
  5417  0451  3001               	movlw	1
  5418  0452  00F1               	movwf	??_button_update_loop
  5419  0453  0871               	movf	??_button_update_loop,w
  5420  0454  00DD               	movwf	_m_button+3	;volatile
  5421                           
  5422                           ;interact.c: 90: }
  5423                           ;interact.c: 91: }
  5424  0455  0008               	return
  5425  0456                     i1l1797:	
  5426                           
  5427                           ;interact.c: 92: else
  5428                           ;interact.c: 93: {
  5429                           ;interact.c: 94: if (current_state != m_button.last_state)
  5430  0456  085F               	movf	_m_button+5,w	;volatile
  5431  0457  0672               	xorwf	button_update_loop@current_state,w
  5432  0458  1903               	skipnz
  5433  0459  2C64               	goto	i1l1805
  5434                           
  5435                           ;interact.c: 95: {
  5436                           ;interact.c: 96: m_button.count_released = 0;
  5437  045A  01DC               	clrf	_m_button+2	;volatile
  5438                           
  5439                           ;interact.c: 97: m_button.last_state = current_state;
  5440  045B  0872               	movf	button_update_loop@current_state,w
  5441  045C  00F1               	movwf	??_button_update_loop
  5442  045D  0871               	movf	??_button_update_loop,w
  5443  045E  00DF               	movwf	_m_button+5	;volatile
  5444                           
  5445                           ;interact.c: 98: m_button.has_once_been_released = 1;
  5446  045F  3001               	movlw	1
  5447  0460  00F1               	movwf	??_button_update_loop
  5448  0461  0871               	movf	??_button_update_loop,w
  5449  0462  00E0               	movwf	_m_button+6	;volatile
  5450                           
  5451                           ;interact.c: 99: }
  5452  0463  0008               	return
  5453  0464                     i1l1805:	
  5454                           
  5455                           ;interact.c: 100: else if ((m_button.last_state == 1)&&(!m_button.has_once_been_released
      +                          ))
  5456  0464  035F               	decf	_m_button+5,w	;volatile
  5457  0465  1D03               	btfss	3,2
  5458  0466  2C77               	goto	i1l1815
  5459  0467  0860               	movf	_m_button+6,w	;volatile
  5460  0468  1D03               	btfss	3,2
  5461  0469  2C77               	goto	i1l1815
  5462                           
  5463                           ;interact.c: 101: {
  5464                           ;interact.c: 102: m_button.count_pressed++;
  5465  046A  3001               	movlw	1
  5466  046B  00F1               	movwf	??_button_update_loop
  5467  046C  0871               	movf	??_button_update_loop,w
  5468  046D  07DB               	addwf	_m_button+1,f	;volatile
  5469                           
  5470                           ;interact.c: 103: if (m_button.count_pressed >= 100)
  5471  046E  3064               	movlw	100
  5472  046F  025B               	subwf	_m_button+1,w	;volatile
  5473  0470  1C03               	skipc
  5474  0471  0008               	return
  5475                           
  5476                           ;interact.c: 104: m_button.confirmed_state = long_push;
  5477  0472  3002               	movlw	2
  5478  0473  00F1               	movwf	??_button_update_loop
  5479  0474  0871               	movf	??_button_update_loop,w
  5480  0475  00DA               	movwf	_m_button	;volatile
  5481                           
  5482                           ;interact.c: 105: }
  5483  0476  0008               	return
  5484  0477                     i1l1815:	
  5485                           
  5486                           ;interact.c: 106: else if (m_button.last_state == 0)
  5487  0477  085F               	movf	_m_button+5,w	;volatile
  5488  0478  1D03               	btfss	3,2
  5489  0479  0008               	return
  5490                           
  5491                           ;interact.c: 107: {
  5492                           ;interact.c: 108: m_button.count_released++;
  5493  047A  3001               	movlw	1
  5494  047B  00F1               	movwf	??_button_update_loop
  5495  047C  0871               	movf	??_button_update_loop,w
  5496  047D  07DC               	addwf	_m_button+2,f	;volatile
  5497                           
  5498                           ;interact.c: 109: if (m_button.count_released > 10)
  5499  047E  300B               	movlw	11
  5500  047F  025C               	subwf	_m_button+2,w	;volatile
  5501  0480  1C03               	skipc
  5502  0481  0008               	return
  5503                           
  5504                           ;interact.c: 110: if (m_button.count_pressed >= 75)
  5505  0482  304B               	movlw	75
  5506  0483  025B               	subwf	_m_button+1,w	;volatile
  5507  0484  1C03               	skipc
  5508  0485  2C8B               	goto	i1l1825
  5509                           
  5510                           ;interact.c: 111: m_button.confirmed_state = long_push;
  5511  0486  3002               	movlw	2
  5512  0487  00F1               	movwf	??_button_update_loop
  5513  0488  0871               	movf	??_button_update_loop,w
  5514  0489  00DA               	movwf	_m_button	;volatile
  5515  048A  0008               	return
  5516  048B                     i1l1825:	
  5517                           
  5518                           ;interact.c: 112: else
  5519                           ;interact.c: 113: m_button.confirmed_state = short_push;
  5520  048B  3001               	movlw	1
  5521  048C  00F1               	movwf	??_button_update_loop
  5522  048D  0871               	movf	??_button_update_loop,w
  5523  048E  00DA               	movwf	_m_button	;volatile
  5524  048F  0008               	return
  5525  0490                     __end_of_button_update_loop:	
  5526                           
  5527                           	psect	text24
  5528  0712                     __ptext24:	
  5529 ;; *************** function _get_button_state *****************
  5530 ;; Defined at:
  5531 ;;		line 54 in file "interact.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  state           1    0[COMMON] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      unsigned char 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5545 ;;      Params:         0       0       0       0       0       0
  5546 ;;      Locals:         1       0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0
  5548 ;;      Totals:         1       0       0       0       0       0
  5549 ;;Total ram usage:        1 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_button_update_loop
  5555 ;;		_button_init
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _get_button_state
  5561  0712                     _get_button_state:	
  5562                           
  5563                           ;interact.c: 57: unsigned char state = PORTBbits.RB0;
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5567  0712  3000               	movlw	0
  5568  0713  0020               	movlb	0	; select bank0
  5569  0714  180D               	btfsc	13,0	;volatile
  5570  0715  3001               	movlw	1
  5571  0716  00F0               	movwf	get_button_state@state
  5572                           
  5573                           ;interact.c: 58: if (state == 1)
  5574  0717  0370               	decf	get_button_state@state,w
  5575  0718  1D03               	btfss	3,2
  5576  0719  2F1C               	goto	i1l1731
  5577                           
  5578                           ;interact.c: 59: return 0;
  5579  071A  3000               	movlw	0
  5580  071B  0008               	return
  5581  071C                     i1l1731:	
  5582                           
  5583                           ;interact.c: 60: else return 1;
  5584  071C  3001               	movlw	1
  5585  071D  0008               	return
  5586  071E                     __end_of_get_button_state:	
  5587                           
  5588                           	psect	text25
  5589  05B4                     __ptext25:	
  5590 ;; *************** function _LED_update_loop *****************
  5591 ;; Defined at:
  5592 ;;		line 26 in file "interact.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5606 ;;      Params:         0       0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0
  5608 ;;      Temps:          1       0       0       0       0       0
  5609 ;;      Totals:         1       0       0       0       0       0
  5610 ;;Total ram usage:        1 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_my10msTimerISR
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function _LED_update_loop
  5621  05B4                     _LED_update_loop:	
  5622                           
  5623                           ;interact.c: 28: if (m_LED.state == manual_mode)
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  5627  05B4  3004               	movlw	4
  5628  05B5  0676               	xorwf	_m_LED,w	;volatile
  5629  05B6  1903               	btfsc	3,2
  5630  05B7  0008               	return
  5631                           
  5632                           ;interact.c: 30: else if (m_LED.state == slow_blinking)
  5633                           
  5634                           ;interact.c: 29: return;
  5635  05B8  3002               	movlw	2
  5636  05B9  0676               	xorwf	_m_LED,w	;volatile
  5637  05BA  1D03               	btfss	3,2
  5638  05BB  2DC9               	goto	i1l1769
  5639                           
  5640                           ;interact.c: 31: {
  5641                           ;interact.c: 32: m_LED.counter++;
  5642  05BC  3001               	movlw	1
  5643  05BD  00F0               	movwf	??_LED_update_loop
  5644  05BE  0870               	movf	??_LED_update_loop,w
  5645  05BF  07F7               	addwf	_m_LED+1,f	;volatile
  5646                           
  5647                           ;interact.c: 33: if (m_LED.counter >= 85)
  5648  05C0  3055               	movlw	85
  5649  05C1  0277               	subwf	_m_LED+1,w	;volatile
  5650  05C2  1C03               	skipc
  5651  05C3  0008               	return
  5652                           
  5653                           ;interact.c: 34: {
  5654                           ;interact.c: 35: m_LED.counter = 0;
  5655  05C4  01F7               	clrf	_m_LED+1	;volatile
  5656                           
  5657                           ;interact.c: 36: do { LATA2 = ~LATA2; } while(0);
  5658  05C5  3004               	movlw	4
  5659  05C6  0022               	movlb	2	; select bank2
  5660  05C7  068C               	xorwf	12,f
  5661                           
  5662                           ;interact.c: 37: }
  5663                           ;interact.c: 38: }
  5664  05C8  0008               	return
  5665  05C9                     i1l1769:	
  5666                           
  5667                           ;interact.c: 39: else if (m_LED.state == fast_blinking)
  5668  05C9  3003               	movlw	3
  5669  05CA  0676               	xorwf	_m_LED,w	;volatile
  5670  05CB  1D03               	btfss	3,2
  5671  05CC  0008               	return
  5672                           
  5673                           ;interact.c: 40: {
  5674                           ;interact.c: 41: m_LED.counter++;
  5675  05CD  3001               	movlw	1
  5676  05CE  00F0               	movwf	??_LED_update_loop
  5677  05CF  0870               	movf	??_LED_update_loop,w
  5678  05D0  07F7               	addwf	_m_LED+1,f	;volatile
  5679                           
  5680                           ;interact.c: 42: if (m_LED.counter >= 20)
  5681  05D1  3014               	movlw	20
  5682  05D2  0277               	subwf	_m_LED+1,w	;volatile
  5683  05D3  1C03               	skipc
  5684  05D4  0008               	return
  5685                           
  5686                           ;interact.c: 43: {
  5687                           ;interact.c: 44: m_LED.counter = 0;
  5688  05D5  01F7               	clrf	_m_LED+1	;volatile
  5689                           
  5690                           ;interact.c: 45: do { LATA2 = ~LATA2; } while(0);
  5691  05D6  3004               	movlw	4
  5692  05D7  0022               	movlb	2	; select bank2
  5693  05D8  068C               	xorwf	12,f
  5694  05D9  0008               	return
  5695  05DA                     __end_of_LED_update_loop:	
  5696                           
  5697                           	psect	text26
  5698  0656                     __ptext26:	
  5699 ;; *************** function _EUSART_Transmit_ISR *****************
  5700 ;; Defined at:
  5701 ;;		line 169 in file "mcc_generated_files/eusart.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      void 
  5708 ;; Registers used:
  5709 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5715 ;;      Params:         0       0       0       0       0       0
  5716 ;;      Locals:         0       0       0       0       0       0
  5717 ;;      Temps:          1       0       0       0       0       0
  5718 ;;      Totals:         1       0       0       0       0       0
  5719 ;;Total ram usage:        1 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_INTERRUPT_InterruptManager
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function _EUSART_Transmit_ISR
  5730  0656                     _EUSART_Transmit_ISR:	
  5731                           
  5732                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5733                           
  5734                           ;incstack = 0
  5735                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5736  0656  3008               	movlw	8
  5737  0657  0020               	movlb	0	; select bank0
  5738  0658  026B               	subwf	_eusartTxBufferRemaining,w	;volatile
  5739  0659  1803               	skipnc
  5740  065A  2E70               	goto	i1l179
  5741                           
  5742                           ;eusart.c: 174: {
  5743                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  5744  065B  086D               	movf	_eusartTxTail,w
  5745  065C  3E52               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5746  065D  0086               	movwf	6
  5747  065E  0187               	clrf	7
  5748  065F  0801               	movf	1,w
  5749  0660  0023               	movlb	3	; select bank3
  5750  0661  009A               	movwf	26	;volatile
  5751  0662  3001               	movlw	1
  5752  0663  00F0               	movwf	??_EUSART_Transmit_ISR
  5753  0664  0870               	movf	??_EUSART_Transmit_ISR,w
  5754  0665  0020               	movlb	0	; select bank0
  5755  0666  07ED               	addwf	_eusartTxTail,f
  5756                           
  5757                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5758  0667  3008               	movlw	8
  5759  0668  026D               	subwf	_eusartTxTail,w
  5760  0669  1803               	btfsc	3,0
  5761                           
  5762                           ;eusart.c: 177: {
  5763                           ;eusart.c: 178: eusartTxTail = 0;
  5764  066A  01ED               	clrf	_eusartTxTail
  5765                           
  5766                           ;eusart.c: 179: }
  5767                           ;eusart.c: 180: eusartTxBufferRemaining++;
  5768  066B  3001               	movlw	1
  5769  066C  00F0               	movwf	??_EUSART_Transmit_ISR
  5770  066D  0870               	movf	??_EUSART_Transmit_ISR,w
  5771  066E  07EB               	addwf	_eusartTxBufferRemaining,f	;volatile
  5772                           
  5773                           ;eusart.c: 181: }
  5774  066F  0008               	return
  5775  0670                     i1l179:	
  5776                           
  5777                           ;eusart.c: 182: else
  5778                           ;eusart.c: 183: {
  5779                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  5780  0670  0021               	movlb	1	; select bank1
  5781  0671  1211               	bcf	17,4	;volatile
  5782  0672  0008               	return
  5783  0673                     __end_of_EUSART_Transmit_ISR:	
  5784                           
  5785                           	psect	text27
  5786  06AA                     __ptext27:	
  5787 ;; *************** function _EUSART_Receive_ISR *****************
  5788 ;; Defined at:
  5789 ;;		line 188 in file "mcc_generated_files/eusart.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5803 ;;      Params:         0       0       0       0       0       0
  5804 ;;      Locals:         0       0       0       0       0       0
  5805 ;;      Temps:          1       0       0       0       0       0
  5806 ;;      Totals:         1       0       0       0       0       0
  5807 ;;Total ram usage:        1 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_INTERRUPT_InterruptManager
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _EUSART_Receive_ISR
  5818  06AA                     _EUSART_Receive_ISR:	
  5819                           
  5820                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5824  06AA  0023               	movlb	3	; select bank3
  5825  06AB  1C9D               	btfss	29,1	;volatile
  5826  06AC  2EAF               	goto	i1l1999
  5827                           
  5828                           ;eusart.c: 192: {
  5829                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  5830  06AD  139D               	bcf	29,7	;volatile
  5831                           
  5832                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  5833  06AE  179D               	bsf	29,7	;volatile
  5834  06AF                     i1l1999:	
  5835                           
  5836                           ;eusart.c: 197: }
  5837                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  5838  06AF  0819               	movf	25,w	;volatile
  5839  06B0  00F0               	movwf	??_EUSART_Receive_ISR
  5840  06B1  0020               	movlb	0	; select bank0
  5841  06B2  0869               	movf	_eusartRxHead,w
  5842  06B3  3E4A               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5843  06B4  0086               	movwf	6
  5844  06B5  0187               	clrf	7
  5845  06B6  0870               	movf	??_EUSART_Receive_ISR,w
  5846  06B7  0081               	movwf	1
  5847  06B8  3001               	movlw	1
  5848  06B9  00F0               	movwf	??_EUSART_Receive_ISR
  5849  06BA  0870               	movf	??_EUSART_Receive_ISR,w
  5850  06BB  07E9               	addwf	_eusartRxHead,f
  5851                           
  5852                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5853  06BC  3008               	movlw	8
  5854  06BD  0269               	subwf	_eusartRxHead,w
  5855  06BE  1803               	btfsc	3,0
  5856                           
  5857                           ;eusart.c: 202: {
  5858                           ;eusart.c: 203: eusartRxHead = 0;
  5859  06BF  01E9               	clrf	_eusartRxHead
  5860                           
  5861                           ;eusart.c: 204: }
  5862                           ;eusart.c: 205: eusartRxCount++;
  5863  06C0  3001               	movlw	1
  5864  06C1  00F0               	movwf	??_EUSART_Receive_ISR
  5865  06C2  0870               	movf	??_EUSART_Receive_ISR,w
  5866  06C3  07F8               	addwf	_eusartRxCount,f	;volatile
  5867  06C4  0008               	return
  5868  06C5                     __end_of_EUSART_Receive_ISR:	
  5869  007E                     btemp	set	126	;btemp
  5870  007E                     int$flags	set	126
  5871  007E                     wtemp	set	126
  5872  007E                     wtemp0	set	126
  5873  0080                     wtemp1	set	128
  5874  0082                     wtemp2	set	130
  5875  0084                     wtemp3	set	132
  5876  0086                     wtemp4	set	134
  5877  0088                     wtemp5	set	136
  5878  007F                     wtemp6	set	127
  5879  007E                     ttemp	set	126
  5880  007E                     ttemp0	set	126
  5881  0081                     ttemp1	set	129
  5882  0084                     ttemp2	set	132
  5883  0087                     ttemp3	set	135
  5884  007F                     ttemp4	set	127
  5885  007E                     ltemp	set	126
  5886  007E                     ltemp0	set	126
  5887  0082                     ltemp1	set	130
  5888  0086                     ltemp2	set	134
  5889  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     42      78
    BANK1            80      0      49
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_LED_set_state
    _main->_TMR0_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _multiply_fp->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->_convert_to_fp
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6542
                                             40 BANK0      2     2      0
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    1467
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     656
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     128
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     128
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     128
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     110
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    4350
                                             21 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4     662
                                              0 BANK0     21    17      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     359
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     291
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   2     2      0     112
                                              1 COMMON     2     2      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
   _LED_set_state
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _multiply_fp
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      89       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2A      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      31       8       61.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      89      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Sep 20 09:36:43 2016

                             __CFG_CP$OFF 0000                                        l24 072E  
                     ___wmul@multiplicand 0022                           _timer0ReloadVal 0079  
                                     l303 0636                    __end_of_my10msTimerISR 0749  
                                     l252 03EF                                       l167 05E6  
                                     l458 0231                                       l571 067C  
                            __CFG_CPD$OFF 0000                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0070                              __CFG_LVP$OFF 0000  
                                    l2015 0628                                      l2017 062E  
                                    l2603 0046                                      l2533 03E7  
                                    l2605 0055                                      l2551 0675  
                                    l2527 03BD                                      l2801 0186  
                                    l2641 008F                                      l2483 05DB  
                                    l2547 063E                                      l2539 040B  
                                    l2811 0198                                      l2643 0090  
                                    l2627 0079                                      l2821 01DB  
                                    l2805 0196                                      l2725 010D  
                                    l2717 0105                                      l2653 00A2  
                                    l2637 008D                                      l2565 058D  
                                    l2591 055A                                      l2903 0270  
                                    l2815 01B9                                      l2727 010E  
                                    l2497 05FA                                      l2585 0545  
                                    l2825 01EC                                      l2817 01D6  
                                    l2737 0120                                      l2569 0597  
                                    l1891 0600                                      l2915 028E  
                                    l2819 0178                                      l2683 00CE  
                                    l2675 00C6                                      l2685 00CF  
                                    l2855 0218                                      l2847 0210  
                                    l2791 0171                                      l2767 014C  
                                    l2759 0144                                      l2695 00E1  
                                    l2943 04B1                                      l2865 022A  
                                    l2857 021A                                      l2769 014D  
                                    l2891 0251                                      l2883 0247  
                                    l2949 04DC                                      l2887 024F  
                                    l2897 0259                                      STR_1 04F9  
                                    STR_2 052D                                      _LATA 010C  
                                    _LATB 010D                                      u3505 029B  
                                    u3515 02B3                                      u3525 02CE  
                                    u2814 03D9                                      u2815 03D7  
                                    u3535 02E6                                      u2905 0598  
                                    u3545 0316                                      u3475 0261  
                                    u2915 059F                                      u3555 036A  
                                    u2865 067D                                      u2785 03A4  
                                    u3737 04E3                                      u3747 054B  
                                    u2875 0682                                      u3757 0568  
                                    u3767 057D                                      i1l73 0024  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _WPUA 020C                                      _WPUB 020D  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                  __end_of_GPS_read_speed 0290                                      _conf 00A0  
                                    _main 0490                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      ltemp 007E  
                                    start 0029                                      ttemp 007E  
                                    wtemp 007E                             __CFG_MCLRE$ON 0000  
                 __end_of_TMR0_Initialize 06F1                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0070                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0008             __end_of_OSCILLATOR_Initialize 0731  
                                   ?_main 0070                             _convert_to_fp 0389  
                           __CFG_WDTE$OFF 0000                                     _LATA2 0862  
                         ?_my10msTimerISR 0070                                     i1l179 0670  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 0028         __size_of_TMR0_SetInterruptHandler 0006  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0074  
                         __end_of_fp_x0_a 04EF                           __end_of_fp_x0_b 04F3  
                        __end_of_TMR0_ISR 0706                                     _m_LED 0076  
                                   _speed 0061                                     _putch 073D  
                 __end_of_LED_update_loop 05DA                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0070                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                           multiply_fp@n1 002C                             multiply_fp@n2 0030  
                         __initialization 002B                    __size_of_LED_set_state 001D  
                            __end_of_main 04EB                            ??_EUSART_Write 0074  
             ?_INTERRUPT_InterruptManager 0070                            ?_convert_to_fp 0020  
                                  ??_main 0048                                    _ANSELA 018C  
                                  ?_putch 0070                                    _ANSELB 018D  
                                  i1l1731 071C                                    i1l1805 0464  
                                  i1l2381 001A                                    i1l2373 000F  
                                  i1l1815 0477                                    i1l1825 048B  
                                  i1l1769 05C9                                    i1l1789 0446  
                                  i1l1797 0456                                    i1l1999 06AF  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                            __CFG_PWRTE$OFF 0000  
                      convert_to_fp@i_bit 002E                                    ___lmul 0584  
                                  ___wmul 0673                            __CFG_STVREN$ON 0000  
                     _EUSART_Transmit_ISR 0656                          ?_TMR0_Initialize 0070  
              __end_of_button_update_loop 0490                                    _printf 0639  
                           _LED_set_state 061C                     __end_of_TMR0_CallBack 0729  
TMR0_SetInterruptHandler@InterruptHandler 0074                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0070                    convert_to_fp@res_fract 002C  
                        ?_LED_update_loop 0070                              ?_multiply_fp 002C  
                    __size_of_EUSART_Read 001F                         _SYSTEM_Initialize 0706  
                 __end_of__initialization 003E                            multiply_fp@res 0042  
                      ?_SYSTEM_Initialize 0070                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0076                                 ?_TMR0_ISR 0070  
                         ??_convert_to_fp 0024                             __end_of_putch 0743  
                          _OPTION_REGbits 0095                     TMR0_ISR@CountCallBack 0065  
                          ?_LED_set_state 0070                 __end_of_SYSTEM_Initialize 0712  
                   ??_EUSART_Transmit_ISR 0070                                   ??_putch 0076  
                              __pbssBANK0 004A                                __pbssBANK1 00A0  
                    __end_of_EUSART_Write 05FD               __size_of_EUSART_Receive_ISR 001B  
                              __pmaintext 0490          __end_of_TMR0_SetInterruptHandler 073D  
                                 ?___lmul 0020                                   ?___wmul 0020  
                              ??_TMR0_ISR 0073                          ??_my10msTimerISR 0073  
                              __pintentry 0004                                   _BAUDCON 019F  
                          ___lmul@product 0028                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0021  
                   get_button_state@state 0070                             _eusartRxCount 0078  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                        ??_GPS_read_speed 0035                           __size_of___lmul 0030  
                         __size_of___wmul 001C                   convert_to_fp@fract_part 0022  
                                 _fp_x0_a 04EB                                   _fp_x0_b 04EF  
                                 __ptext1 0290                                   __ptext2 0584  
                                 __ptext3 0706                                   __ptext4 06DC  
                                 __ptext5 0737                                   __ptext6 06C5  
                                 __ptext7 0729                                   __ptext8 068F  
                                 __ptext9 061C                           __size_of_printf 001D  
                         ??_LED_set_state 0074                     _OSCILLATOR_Initialize 0729  
            GPS_read_speed@read_speed_fra 003B                  ??_PIN_MANAGER_Initialize 0074  
            GPS_read_speed@read_speed_int 0039                __size_of_SYSTEM_Initialize 000C  
                                 clrloop0 0732                          _get_button_state 0712  
                    end_of_initialization 003E                         __end_of_ratio_mph 04F7  
                  LED_set_state@new_state 0075                      __size_of_multiply_fp 00F9  
                       _EUSART_Initialize 068F                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@c 0027  
                                 printf@f 0021                              __pstringtext 04EB  
                     ??_EUSART_Initialize 0074                  _TMR0_SetInterruptHandler 0737  
                               _PORTBbits 000D                      GPS_read_speed@i_buff 0046  
                    GPS_read_speed@m_char 0047                      GPS_read_speed@buffer 003F  
                        __CFG_FOSC$INTOSC 0000                     __size_of_EUSART_Write 0023  
                      _button_update_loop 0432                 __end_of_EUSART_Initialize 06AA  
                 __size_of_GPS_Initialize 0045                       ?_button_update_loop 0070  
                          __end_of___lmul 05B4                            __end_of___wmul 068F  
                            _EUSART_Write 05DA                         __size_of_TMR0_ISR 0015  
                        convert_to_fp@one 04F7                          convert_to_fp@res 0031  
                  ?_OSCILLATOR_Initialize 0070                      ??_button_update_loop 0071  
                          __end_of_printf 0656                       start_initialization 002B  
                __size_of_TMR0_Initialize 0015           __size_of_PIN_MANAGER_Initialize 0017  
                           ??_EUSART_Read 0074                               putch@txData 0020  
                __size_of_LED_update_loop 0026                                  ??___lmul 0074  
                                ??___wmul 0074                    __size_of_TMR0_CallBack 000B  
                   convert_to_fp@int_part 0020                     __end_of_convert_to_fp 0432  
                                ??_printf 0023               __end_of_EUSART_Transmit_ISR 0673  
                             __pbssCOMMON 0076                                 ___latbits 0001  
                           __pcstackBANK0 0020                     convert_to_fp@tmp_left 002F  
              __end_of_EUSART_Receive_ISR 06C5                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 061C                     _TMR0_InterruptHandler 0067  
                  _PIN_MANAGER_Initialize 06C5                      EUSART_Read@readValue 0075  
                __end_of_get_button_state 071E                              _eusartRxHead 0069  
                            _eusartTxHead 006C                              _eusartRxTail 006A  
                            _eusartTxTail 006D              ??_INTERRUPT_InterruptManager 0073  
                 _eusartTxBufferRemaining 006B                             _TMR0_CallBack 071E  
                          __size_of_putch 0006                            _eusartRxBuffer 004A  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 053F  
                          _eusartTxBuffer 0052                            ___wmul@product 0074  
                               clear_ram0 0731                                  _PIE1bits 0091  
                               _ratio_mph 04F3       __size_of_INTERRUPT_InterruptManager 0025  
              ??_TMR0_SetInterruptHandler 0076                                  _PIR1bits 0011  
                                _TMR0_ISR 06F1                         ??_LED_update_loop 0070  
                       ___wmul@multiplier 0020                     __end_of_LED_set_state 0639  
                 __size_of_my10msTimerISR 0006                            ?_TMR0_CallBack 0070  
                             _EUSART_Read 05FD                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 0584                             ??_multiply_fp 0034  
                __end_ofconvert_to_fp@one 04F9            GPS_read_speed@no_more_checksum 0038  
                 __size_of_GPS_read_speed 024E                         GPS_Initialize@tmp 002B  
                 ??_OSCILLATOR_Initialize 0074           button_update_loop@current_state 0072  
                GPS_read_speed@before_dot 0037                                  __ptext10 0042  
                                __ptext11 0389                                  __ptext20 071E  
                                __ptext12 0673                                  __ptext21 0749  
                                __ptext13 05FD                                  __ptext22 0743  
                                __ptext14 053F                                  __ptext23 0432  
                                __ptext15 0639                                  __ptext24 0712  
                                __ptext16 073D                                  __ptext25 05B4  
                                __ptext17 05DA                                  __ptext26 0656  
                                __ptext27 06AA                                  __ptext19 06F1  
                         ?_GPS_Initialize 0070                                  _m_button 005A  
                           __size_of_main 005B      __end_of_TMR0_DefaultInterruptHandler 074A  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0749  
                     __end_of_multiply_fp 0389                                  int$flags 007E  
      __end_of_INTERRUPT_InterruptManager 0029                _INTERRUPT_InterruptManager 0004  
             __size_of_button_update_loop 005E                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0073                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0070                   GPS_read_speed@checksum2 003D  
                       __CFG_CLKOUTEN$OFF 0000             ?_TMR0_DefaultInterruptHandler 0070  
                                printf@ap 0026                        _EUSART_Receive_ISR 06AA  
                       ?_get_button_state 0070                        ??_get_button_state 0070  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0070  
                         _TMR0_Initialize 06DC                    GPS_read_speed@checksum 003E  
                          _my10msTimerISR 0743                        EUSART_Write@txData 0075  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 06DC  
                   GPS_read_speed@i_buff2 0045                               _multiply_fp 0290  
                  __size_of_convert_to_fp 00A9                      ??_EUSART_Receive_ISR 0070  
                          _GPS_read_speed 0042                           _LED_update_loop 05B4  

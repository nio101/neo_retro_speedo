

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 22 16:54:16 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	dabs	1,0x7E,2
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  008C                     	;# 
    87  008D                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009B                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  0111                     	;# 
   106  0112                     	;# 
   107  0113                     	;# 
   108  0114                     	;# 
   109  0115                     	;# 
   110  0116                     	;# 
   111  0117                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011A                     	;# 
   115  011B                     	;# 
   116  011D                     	;# 
   117  011E                     	;# 
   118  018C                     	;# 
   119  018D                     	;# 
   120  0191                     	;# 
   121  0191                     	;# 
   122  0192                     	;# 
   123  0193                     	;# 
   124  0193                     	;# 
   125  0193                     	;# 
   126  0194                     	;# 
   127  0195                     	;# 
   128  0196                     	;# 
   129  0199                     	;# 
   130  019A                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019C                     	;# 
   136  019C                     	;# 
   137  019D                     	;# 
   138  019E                     	;# 
   139  019F                     	;# 
   140  020C                     	;# 
   141  020D                     	;# 
   142  0211                     	;# 
   143  0211                     	;# 
   144  0212                     	;# 
   145  0212                     	;# 
   146  0213                     	;# 
   147  0213                     	;# 
   148  0214                     	;# 
   149  0214                     	;# 
   150  0215                     	;# 
   151  0215                     	;# 
   152  0215                     	;# 
   153  0216                     	;# 
   154  0216                     	;# 
   155  0217                     	;# 
   156  0217                     	;# 
   157  0219                     	;# 
   158  021A                     	;# 
   159  021B                     	;# 
   160  021C                     	;# 
   161  021D                     	;# 
   162  021E                     	;# 
   163  021F                     	;# 
   164  0291                     	;# 
   165  0291                     	;# 
   166  0292                     	;# 
   167  0293                     	;# 
   168  0294                     	;# 
   169  0295                     	;# 
   170  0295                     	;# 
   171  0296                     	;# 
   172  0298                     	;# 
   173  0298                     	;# 
   174  0299                     	;# 
   175  029A                     	;# 
   176  029B                     	;# 
   177  029C                     	;# 
   178  029C                     	;# 
   179  029D                     	;# 
   180  029E                     	;# 
   181  029E                     	;# 
   182  0311                     	;# 
   183  0311                     	;# 
   184  0312                     	;# 
   185  0313                     	;# 
   186  0318                     	;# 
   187  0318                     	;# 
   188  0319                     	;# 
   189  031A                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  039A                     	;# 
   194  039C                     	;# 
   195  039D                     	;# 
   196  039E                     	;# 
   197  039F                     	;# 
   198  0415                     	;# 
   199  0416                     	;# 
   200  0417                     	;# 
   201  041C                     	;# 
   202  041D                     	;# 
   203  041E                     	;# 
   204  0FE4                     	;# 
   205  0FE5                     	;# 
   206  0FE6                     	;# 
   207  0FE7                     	;# 
   208  0FE8                     	;# 
   209  0FE9                     	;# 
   210  0FEA                     	;# 
   211  0FEB                     	;# 
   212  0FED                     	;# 
   213  0FEE                     	;# 
   214  0FEF                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  008C                     	;# 
   245  008D                     	;# 
   246  0091                     	;# 
   247  0092                     	;# 
   248  0093                     	;# 
   249  0094                     	;# 
   250  0095                     	;# 
   251  0096                     	;# 
   252  0097                     	;# 
   253  0098                     	;# 
   254  0099                     	;# 
   255  009A                     	;# 
   256  009B                     	;# 
   257  009B                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009E                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  0111                     	;# 
   264  0112                     	;# 
   265  0113                     	;# 
   266  0114                     	;# 
   267  0115                     	;# 
   268  0116                     	;# 
   269  0117                     	;# 
   270  0118                     	;# 
   271  0119                     	;# 
   272  011A                     	;# 
   273  011B                     	;# 
   274  011D                     	;# 
   275  011E                     	;# 
   276  018C                     	;# 
   277  018D                     	;# 
   278  0191                     	;# 
   279  0191                     	;# 
   280  0192                     	;# 
   281  0193                     	;# 
   282  0193                     	;# 
   283  0193                     	;# 
   284  0194                     	;# 
   285  0195                     	;# 
   286  0196                     	;# 
   287  0199                     	;# 
   288  019A                     	;# 
   289  019B                     	;# 
   290  019B                     	;# 
   291  019B                     	;# 
   292  019B                     	;# 
   293  019C                     	;# 
   294  019C                     	;# 
   295  019D                     	;# 
   296  019E                     	;# 
   297  019F                     	;# 
   298  020C                     	;# 
   299  020D                     	;# 
   300  0211                     	;# 
   301  0211                     	;# 
   302  0212                     	;# 
   303  0212                     	;# 
   304  0213                     	;# 
   305  0213                     	;# 
   306  0214                     	;# 
   307  0214                     	;# 
   308  0215                     	;# 
   309  0215                     	;# 
   310  0215                     	;# 
   311  0216                     	;# 
   312  0216                     	;# 
   313  0217                     	;# 
   314  0217                     	;# 
   315  0219                     	;# 
   316  021A                     	;# 
   317  021B                     	;# 
   318  021C                     	;# 
   319  021D                     	;# 
   320  021E                     	;# 
   321  021F                     	;# 
   322  0291                     	;# 
   323  0291                     	;# 
   324  0292                     	;# 
   325  0293                     	;# 
   326  0294                     	;# 
   327  0295                     	;# 
   328  0295                     	;# 
   329  0296                     	;# 
   330  0298                     	;# 
   331  0298                     	;# 
   332  0299                     	;# 
   333  029A                     	;# 
   334  029B                     	;# 
   335  029C                     	;# 
   336  029C                     	;# 
   337  029D                     	;# 
   338  029E                     	;# 
   339  029E                     	;# 
   340  0311                     	;# 
   341  0311                     	;# 
   342  0312                     	;# 
   343  0313                     	;# 
   344  0318                     	;# 
   345  0318                     	;# 
   346  0319                     	;# 
   347  031A                     	;# 
   348  0394                     	;# 
   349  0395                     	;# 
   350  0396                     	;# 
   351  039A                     	;# 
   352  039C                     	;# 
   353  039D                     	;# 
   354  039E                     	;# 
   355  039F                     	;# 
   356  0415                     	;# 
   357  0416                     	;# 
   358  0417                     	;# 
   359  041C                     	;# 
   360  041D                     	;# 
   361  041E                     	;# 
   362  0FE4                     	;# 
   363  0FE5                     	;# 
   364  0FE6                     	;# 
   365  0FE7                     	;# 
   366  0FE8                     	;# 
   367  0FE9                     	;# 
   368  0FEA                     	;# 
   369  0FEB                     	;# 
   370  0FED                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  000D                     	;# 
   387  0011                     	;# 
   388  0012                     	;# 
   389  0013                     	;# 
   390  0014                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  0091                     	;# 
   405  0092                     	;# 
   406  0093                     	;# 
   407  0094                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0097                     	;# 
   411  0098                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  0111                     	;# 
   422  0112                     	;# 
   423  0113                     	;# 
   424  0114                     	;# 
   425  0115                     	;# 
   426  0116                     	;# 
   427  0117                     	;# 
   428  0118                     	;# 
   429  0119                     	;# 
   430  011A                     	;# 
   431  011B                     	;# 
   432  011D                     	;# 
   433  011E                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  0191                     	;# 
   437  0191                     	;# 
   438  0192                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0199                     	;# 
   446  019A                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019C                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019F                     	;# 
   456  020C                     	;# 
   457  020D                     	;# 
   458  0211                     	;# 
   459  0211                     	;# 
   460  0212                     	;# 
   461  0212                     	;# 
   462  0213                     	;# 
   463  0213                     	;# 
   464  0214                     	;# 
   465  0214                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0216                     	;# 
   470  0216                     	;# 
   471  0217                     	;# 
   472  0217                     	;# 
   473  0219                     	;# 
   474  021A                     	;# 
   475  021B                     	;# 
   476  021C                     	;# 
   477  021D                     	;# 
   478  021E                     	;# 
   479  021F                     	;# 
   480  0291                     	;# 
   481  0291                     	;# 
   482  0292                     	;# 
   483  0293                     	;# 
   484  0294                     	;# 
   485  0295                     	;# 
   486  0295                     	;# 
   487  0296                     	;# 
   488  0298                     	;# 
   489  0298                     	;# 
   490  0299                     	;# 
   491  029A                     	;# 
   492  029B                     	;# 
   493  029C                     	;# 
   494  029C                     	;# 
   495  029D                     	;# 
   496  029E                     	;# 
   497  029E                     	;# 
   498  0311                     	;# 
   499  0311                     	;# 
   500  0312                     	;# 
   501  0313                     	;# 
   502  0318                     	;# 
   503  0318                     	;# 
   504  0319                     	;# 
   505  031A                     	;# 
   506  0394                     	;# 
   507  0395                     	;# 
   508  0396                     	;# 
   509  039A                     	;# 
   510  039C                     	;# 
   511  039D                     	;# 
   512  039E                     	;# 
   513  039F                     	;# 
   514  0415                     	;# 
   515  0416                     	;# 
   516  0417                     	;# 
   517  041C                     	;# 
   518  041D                     	;# 
   519  041E                     	;# 
   520  0FE4                     	;# 
   521  0FE5                     	;# 
   522  0FE6                     	;# 
   523  0FE7                     	;# 
   524  0FE8                     	;# 
   525  0FE9                     	;# 
   526  0FEA                     	;# 
   527  0FEB                     	;# 
   528  0FED                     	;# 
   529  0FEE                     	;# 
   530  0FEF                     	;# 
   531  0000                     	;# 
   532  0001                     	;# 
   533  0002                     	;# 
   534  0003                     	;# 
   535  0004                     	;# 
   536  0005                     	;# 
   537  0006                     	;# 
   538  0007                     	;# 
   539  0008                     	;# 
   540  0009                     	;# 
   541  000A                     	;# 
   542  000B                     	;# 
   543  000C                     	;# 
   544  000D                     	;# 
   545  0011                     	;# 
   546  0012                     	;# 
   547  0013                     	;# 
   548  0014                     	;# 
   549  0015                     	;# 
   550  0016                     	;# 
   551  0016                     	;# 
   552  0017                     	;# 
   553  0018                     	;# 
   554  0019                     	;# 
   555  001A                     	;# 
   556  001B                     	;# 
   557  001C                     	;# 
   558  001E                     	;# 
   559  001F                     	;# 
   560  008C                     	;# 
   561  008D                     	;# 
   562  0091                     	;# 
   563  0092                     	;# 
   564  0093                     	;# 
   565  0094                     	;# 
   566  0095                     	;# 
   567  0096                     	;# 
   568  0097                     	;# 
   569  0098                     	;# 
   570  0099                     	;# 
   571  009A                     	;# 
   572  009B                     	;# 
   573  009B                     	;# 
   574  009C                     	;# 
   575  009D                     	;# 
   576  009E                     	;# 
   577  010C                     	;# 
   578  010D                     	;# 
   579  0111                     	;# 
   580  0112                     	;# 
   581  0113                     	;# 
   582  0114                     	;# 
   583  0115                     	;# 
   584  0116                     	;# 
   585  0117                     	;# 
   586  0118                     	;# 
   587  0119                     	;# 
   588  011A                     	;# 
   589  011B                     	;# 
   590  011D                     	;# 
   591  011E                     	;# 
   592  018C                     	;# 
   593  018D                     	;# 
   594  0191                     	;# 
   595  0191                     	;# 
   596  0192                     	;# 
   597  0193                     	;# 
   598  0193                     	;# 
   599  0193                     	;# 
   600  0194                     	;# 
   601  0195                     	;# 
   602  0196                     	;# 
   603  0199                     	;# 
   604  019A                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019C                     	;# 
   610  019C                     	;# 
   611  019D                     	;# 
   612  019E                     	;# 
   613  019F                     	;# 
   614  020C                     	;# 
   615  020D                     	;# 
   616  0211                     	;# 
   617  0211                     	;# 
   618  0212                     	;# 
   619  0212                     	;# 
   620  0213                     	;# 
   621  0213                     	;# 
   622  0214                     	;# 
   623  0214                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0215                     	;# 
   627  0216                     	;# 
   628  0216                     	;# 
   629  0217                     	;# 
   630  0217                     	;# 
   631  0219                     	;# 
   632  021A                     	;# 
   633  021B                     	;# 
   634  021C                     	;# 
   635  021D                     	;# 
   636  021E                     	;# 
   637  021F                     	;# 
   638  0291                     	;# 
   639  0291                     	;# 
   640  0292                     	;# 
   641  0293                     	;# 
   642  0294                     	;# 
   643  0295                     	;# 
   644  0295                     	;# 
   645  0296                     	;# 
   646  0298                     	;# 
   647  0298                     	;# 
   648  0299                     	;# 
   649  029A                     	;# 
   650  029B                     	;# 
   651  029C                     	;# 
   652  029C                     	;# 
   653  029D                     	;# 
   654  029E                     	;# 
   655  029E                     	;# 
   656  0311                     	;# 
   657  0311                     	;# 
   658  0312                     	;# 
   659  0313                     	;# 
   660  0318                     	;# 
   661  0318                     	;# 
   662  0319                     	;# 
   663  031A                     	;# 
   664  0394                     	;# 
   665  0395                     	;# 
   666  0396                     	;# 
   667  039A                     	;# 
   668  039C                     	;# 
   669  039D                     	;# 
   670  039E                     	;# 
   671  039F                     	;# 
   672  0415                     	;# 
   673  0416                     	;# 
   674  0417                     	;# 
   675  041C                     	;# 
   676  041D                     	;# 
   677  041E                     	;# 
   678  0FE4                     	;# 
   679  0FE5                     	;# 
   680  0FE6                     	;# 
   681  0FE7                     	;# 
   682  0FE8                     	;# 
   683  0FE9                     	;# 
   684  0FEA                     	;# 
   685  0FEB                     	;# 
   686  0FED                     	;# 
   687  0FEE                     	;# 
   688  0FEF                     	;# 
   689  0000                     	;# 
   690  0001                     	;# 
   691  0002                     	;# 
   692  0003                     	;# 
   693  0004                     	;# 
   694  0005                     	;# 
   695  0006                     	;# 
   696  0007                     	;# 
   697  0008                     	;# 
   698  0009                     	;# 
   699  000A                     	;# 
   700  000B                     	;# 
   701  000C                     	;# 
   702  000D                     	;# 
   703  0011                     	;# 
   704  0012                     	;# 
   705  0013                     	;# 
   706  0014                     	;# 
   707  0015                     	;# 
   708  0016                     	;# 
   709  0016                     	;# 
   710  0017                     	;# 
   711  0018                     	;# 
   712  0019                     	;# 
   713  001A                     	;# 
   714  001B                     	;# 
   715  001C                     	;# 
   716  001E                     	;# 
   717  001F                     	;# 
   718  008C                     	;# 
   719  008D                     	;# 
   720  0091                     	;# 
   721  0092                     	;# 
   722  0093                     	;# 
   723  0094                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0098                     	;# 
   728  0099                     	;# 
   729  009A                     	;# 
   730  009B                     	;# 
   731  009B                     	;# 
   732  009C                     	;# 
   733  009D                     	;# 
   734  009E                     	;# 
   735  010C                     	;# 
   736  010D                     	;# 
   737  0111                     	;# 
   738  0112                     	;# 
   739  0113                     	;# 
   740  0114                     	;# 
   741  0115                     	;# 
   742  0116                     	;# 
   743  0117                     	;# 
   744  0118                     	;# 
   745  0119                     	;# 
   746  011A                     	;# 
   747  011B                     	;# 
   748  011D                     	;# 
   749  011E                     	;# 
   750  018C                     	;# 
   751  018D                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0193                     	;# 
   758  0194                     	;# 
   759  0195                     	;# 
   760  0196                     	;# 
   761  0199                     	;# 
   762  019A                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019C                     	;# 
   768  019C                     	;# 
   769  019D                     	;# 
   770  019E                     	;# 
   771  019F                     	;# 
   772  020C                     	;# 
   773  020D                     	;# 
   774  0211                     	;# 
   775  0211                     	;# 
   776  0212                     	;# 
   777  0212                     	;# 
   778  0213                     	;# 
   779  0213                     	;# 
   780  0214                     	;# 
   781  0214                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0216                     	;# 
   786  0216                     	;# 
   787  0217                     	;# 
   788  0217                     	;# 
   789  0219                     	;# 
   790  021A                     	;# 
   791  021B                     	;# 
   792  021C                     	;# 
   793  021D                     	;# 
   794  021E                     	;# 
   795  021F                     	;# 
   796  0291                     	;# 
   797  0291                     	;# 
   798  0292                     	;# 
   799  0293                     	;# 
   800  0294                     	;# 
   801  0295                     	;# 
   802  0295                     	;# 
   803  0296                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  029B                     	;# 
   809  029C                     	;# 
   810  029C                     	;# 
   811  029D                     	;# 
   812  029E                     	;# 
   813  029E                     	;# 
   814  0311                     	;# 
   815  0311                     	;# 
   816  0312                     	;# 
   817  0313                     	;# 
   818  0318                     	;# 
   819  0318                     	;# 
   820  0319                     	;# 
   821  031A                     	;# 
   822  0394                     	;# 
   823  0395                     	;# 
   824  0396                     	;# 
   825  039A                     	;# 
   826  039C                     	;# 
   827  039D                     	;# 
   828  039E                     	;# 
   829  039F                     	;# 
   830  0415                     	;# 
   831  0416                     	;# 
   832  0417                     	;# 
   833  041C                     	;# 
   834  041D                     	;# 
   835  041E                     	;# 
   836  0FE4                     	;# 
   837  0FE5                     	;# 
   838  0FE6                     	;# 
   839  0FE7                     	;# 
   840  0FE8                     	;# 
   841  0FE9                     	;# 
   842  0FEA                     	;# 
   843  0FEB                     	;# 
   844  0FED                     	;# 
   845  0FEE                     	;# 
   846  0FEF                     	;# 
   847  0000                     	;# 
   848  0001                     	;# 
   849  0002                     	;# 
   850  0003                     	;# 
   851  0004                     	;# 
   852  0005                     	;# 
   853  0006                     	;# 
   854  0007                     	;# 
   855  0008                     	;# 
   856  0009                     	;# 
   857  000A                     	;# 
   858  000B                     	;# 
   859  000C                     	;# 
   860  000D                     	;# 
   861  0011                     	;# 
   862  0012                     	;# 
   863  0013                     	;# 
   864  0014                     	;# 
   865  0015                     	;# 
   866  0016                     	;# 
   867  0016                     	;# 
   868  0017                     	;# 
   869  0018                     	;# 
   870  0019                     	;# 
   871  001A                     	;# 
   872  001B                     	;# 
   873  001C                     	;# 
   874  001E                     	;# 
   875  001F                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  0091                     	;# 
   879  0092                     	;# 
   880  0093                     	;# 
   881  0094                     	;# 
   882  0095                     	;# 
   883  0096                     	;# 
   884  0097                     	;# 
   885  0098                     	;# 
   886  0099                     	;# 
   887  009A                     	;# 
   888  009B                     	;# 
   889  009B                     	;# 
   890  009C                     	;# 
   891  009D                     	;# 
   892  009E                     	;# 
   893  010C                     	;# 
   894  010D                     	;# 
   895  0111                     	;# 
   896  0112                     	;# 
   897  0113                     	;# 
   898  0114                     	;# 
   899  0115                     	;# 
   900  0116                     	;# 
   901  0117                     	;# 
   902  0118                     	;# 
   903  0119                     	;# 
   904  011A                     	;# 
   905  011B                     	;# 
   906  011D                     	;# 
   907  011E                     	;# 
   908  018C                     	;# 
   909  018D                     	;# 
   910  0191                     	;# 
   911  0191                     	;# 
   912  0192                     	;# 
   913  0193                     	;# 
   914  0193                     	;# 
   915  0193                     	;# 
   916  0194                     	;# 
   917  0195                     	;# 
   918  0196                     	;# 
   919  0199                     	;# 
   920  019A                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019B                     	;# 
   925  019C                     	;# 
   926  019C                     	;# 
   927  019D                     	;# 
   928  019E                     	;# 
   929  019F                     	;# 
   930  020C                     	;# 
   931  020D                     	;# 
   932  0211                     	;# 
   933  0211                     	;# 
   934  0212                     	;# 
   935  0212                     	;# 
   936  0213                     	;# 
   937  0213                     	;# 
   938  0214                     	;# 
   939  0214                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0215                     	;# 
   943  0216                     	;# 
   944  0216                     	;# 
   945  0217                     	;# 
   946  0217                     	;# 
   947  0219                     	;# 
   948  021A                     	;# 
   949  021B                     	;# 
   950  021C                     	;# 
   951  021D                     	;# 
   952  021E                     	;# 
   953  021F                     	;# 
   954  0291                     	;# 
   955  0291                     	;# 
   956  0292                     	;# 
   957  0293                     	;# 
   958  0294                     	;# 
   959  0295                     	;# 
   960  0295                     	;# 
   961  0296                     	;# 
   962  0298                     	;# 
   963  0298                     	;# 
   964  0299                     	;# 
   965  029A                     	;# 
   966  029B                     	;# 
   967  029C                     	;# 
   968  029C                     	;# 
   969  029D                     	;# 
   970  029E                     	;# 
   971  029E                     	;# 
   972  0311                     	;# 
   973  0311                     	;# 
   974  0312                     	;# 
   975  0313                     	;# 
   976  0318                     	;# 
   977  0318                     	;# 
   978  0319                     	;# 
   979  031A                     	;# 
   980  0394                     	;# 
   981  0395                     	;# 
   982  0396                     	;# 
   983  039A                     	;# 
   984  039C                     	;# 
   985  039D                     	;# 
   986  039E                     	;# 
   987  039F                     	;# 
   988  0415                     	;# 
   989  0416                     	;# 
   990  0417                     	;# 
   991  041C                     	;# 
   992  041D                     	;# 
   993  041E                     	;# 
   994  0FE4                     	;# 
   995  0FE5                     	;# 
   996  0FE6                     	;# 
   997  0FE7                     	;# 
   998  0FE8                     	;# 
   999  0FE9                     	;# 
  1000  0FEA                     	;# 
  1001  0FEB                     	;# 
  1002  0FED                     	;# 
  1003  0FEE                     	;# 
  1004  0FEF                     	;# 
  1005  0000                     	;# 
  1006  0001                     	;# 
  1007  0002                     	;# 
  1008  0003                     	;# 
  1009  0004                     	;# 
  1010  0005                     	;# 
  1011  0006                     	;# 
  1012  0007                     	;# 
  1013  0008                     	;# 
  1014  0009                     	;# 
  1015  000A                     	;# 
  1016  000B                     	;# 
  1017  000C                     	;# 
  1018  000D                     	;# 
  1019  0011                     	;# 
  1020  0012                     	;# 
  1021  0013                     	;# 
  1022  0014                     	;# 
  1023  0015                     	;# 
  1024  0016                     	;# 
  1025  0016                     	;# 
  1026  0017                     	;# 
  1027  0018                     	;# 
  1028  0019                     	;# 
  1029  001A                     	;# 
  1030  001B                     	;# 
  1031  001C                     	;# 
  1032  001E                     	;# 
  1033  001F                     	;# 
  1034  008C                     	;# 
  1035  008D                     	;# 
  1036  0091                     	;# 
  1037  0092                     	;# 
  1038  0093                     	;# 
  1039  0094                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0098                     	;# 
  1044  0099                     	;# 
  1045  009A                     	;# 
  1046  009B                     	;# 
  1047  009B                     	;# 
  1048  009C                     	;# 
  1049  009D                     	;# 
  1050  009E                     	;# 
  1051  010C                     	;# 
  1052  010D                     	;# 
  1053  0111                     	;# 
  1054  0112                     	;# 
  1055  0113                     	;# 
  1056  0114                     	;# 
  1057  0115                     	;# 
  1058  0116                     	;# 
  1059  0117                     	;# 
  1060  0118                     	;# 
  1061  0119                     	;# 
  1062  011A                     	;# 
  1063  011B                     	;# 
  1064  011D                     	;# 
  1065  011E                     	;# 
  1066  018C                     	;# 
  1067  018D                     	;# 
  1068  0191                     	;# 
  1069  0191                     	;# 
  1070  0192                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0193                     	;# 
  1074  0194                     	;# 
  1075  0195                     	;# 
  1076  0196                     	;# 
  1077  0199                     	;# 
  1078  019A                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019B                     	;# 
  1083  019C                     	;# 
  1084  019C                     	;# 
  1085  019D                     	;# 
  1086  019E                     	;# 
  1087  019F                     	;# 
  1088  020C                     	;# 
  1089  020D                     	;# 
  1090  0211                     	;# 
  1091  0211                     	;# 
  1092  0212                     	;# 
  1093  0212                     	;# 
  1094  0213                     	;# 
  1095  0213                     	;# 
  1096  0214                     	;# 
  1097  0214                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0216                     	;# 
  1102  0216                     	;# 
  1103  0217                     	;# 
  1104  0217                     	;# 
  1105  0219                     	;# 
  1106  021A                     	;# 
  1107  021B                     	;# 
  1108  021C                     	;# 
  1109  021D                     	;# 
  1110  021E                     	;# 
  1111  021F                     	;# 
  1112  0291                     	;# 
  1113  0291                     	;# 
  1114  0292                     	;# 
  1115  0293                     	;# 
  1116  0294                     	;# 
  1117  0295                     	;# 
  1118  0295                     	;# 
  1119  0296                     	;# 
  1120  0298                     	;# 
  1121  0298                     	;# 
  1122  0299                     	;# 
  1123  029A                     	;# 
  1124  029B                     	;# 
  1125  029C                     	;# 
  1126  029C                     	;# 
  1127  029D                     	;# 
  1128  029E                     	;# 
  1129  029E                     	;# 
  1130  0311                     	;# 
  1131  0311                     	;# 
  1132  0312                     	;# 
  1133  0313                     	;# 
  1134  0318                     	;# 
  1135  0318                     	;# 
  1136  0319                     	;# 
  1137  031A                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  039A                     	;# 
  1142  039C                     	;# 
  1143  039D                     	;# 
  1144  039E                     	;# 
  1145  039F                     	;# 
  1146  0415                     	;# 
  1147  0416                     	;# 
  1148  0417                     	;# 
  1149  041C                     	;# 
  1150  041D                     	;# 
  1151  041E                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  0011                     	;# 
  1178  0012                     	;# 
  1179  0013                     	;# 
  1180  0014                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  001E                     	;# 
  1191  001F                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0093                     	;# 
  1197  0094                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0098                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  0111                     	;# 
  1212  0112                     	;# 
  1213  0113                     	;# 
  1214  0114                     	;# 
  1215  0115                     	;# 
  1216  0116                     	;# 
  1217  0117                     	;# 
  1218  0118                     	;# 
  1219  0119                     	;# 
  1220  011A                     	;# 
  1221  011B                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  0191                     	;# 
  1227  0191                     	;# 
  1228  0192                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0194                     	;# 
  1233  0195                     	;# 
  1234  0196                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  019C                     	;# 
  1243  019D                     	;# 
  1244  019E                     	;# 
  1245  019F                     	;# 
  1246  020C                     	;# 
  1247  020D                     	;# 
  1248  0211                     	;# 
  1249  0211                     	;# 
  1250  0212                     	;# 
  1251  0212                     	;# 
  1252  0213                     	;# 
  1253  0213                     	;# 
  1254  0214                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0216                     	;# 
  1260  0216                     	;# 
  1261  0217                     	;# 
  1262  0217                     	;# 
  1263  0219                     	;# 
  1264  021A                     	;# 
  1265  021B                     	;# 
  1266  021C                     	;# 
  1267  021D                     	;# 
  1268  021E                     	;# 
  1269  021F                     	;# 
  1270  0291                     	;# 
  1271  0291                     	;# 
  1272  0292                     	;# 
  1273  0293                     	;# 
  1274  0294                     	;# 
  1275  0295                     	;# 
  1276  0295                     	;# 
  1277  0296                     	;# 
  1278  0298                     	;# 
  1279  0298                     	;# 
  1280  0299                     	;# 
  1281  029A                     	;# 
  1282  029B                     	;# 
  1283  029C                     	;# 
  1284  029C                     	;# 
  1285  029D                     	;# 
  1286  029E                     	;# 
  1287  029E                     	;# 
  1288  0311                     	;# 
  1289  0311                     	;# 
  1290  0312                     	;# 
  1291  0313                     	;# 
  1292  0318                     	;# 
  1293  0318                     	;# 
  1294  0319                     	;# 
  1295  031A                     	;# 
  1296  0394                     	;# 
  1297  0395                     	;# 
  1298  0396                     	;# 
  1299  039A                     	;# 
  1300  039C                     	;# 
  1301  039D                     	;# 
  1302  039E                     	;# 
  1303  039F                     	;# 
  1304  0415                     	;# 
  1305  0416                     	;# 
  1306  0417                     	;# 
  1307  041C                     	;# 
  1308  041D                     	;# 
  1309  041E                     	;# 
  1310  0FE4                     	;# 
  1311  0FE5                     	;# 
  1312  0FE6                     	;# 
  1313  0FE7                     	;# 
  1314  0FE8                     	;# 
  1315  0FE9                     	;# 
  1316  0FEA                     	;# 
  1317  0FEB                     	;# 
  1318  0FED                     	;# 
  1319  0FEE                     	;# 
  1320  0FEF                     	;# 
  1321  0000                     	;# 
  1322  0001                     	;# 
  1323  0002                     	;# 
  1324  0003                     	;# 
  1325  0004                     	;# 
  1326  0005                     	;# 
  1327  0006                     	;# 
  1328  0007                     	;# 
  1329  0008                     	;# 
  1330  0009                     	;# 
  1331  000A                     	;# 
  1332  000B                     	;# 
  1333  000C                     	;# 
  1334  000D                     	;# 
  1335  0011                     	;# 
  1336  0012                     	;# 
  1337  0013                     	;# 
  1338  0014                     	;# 
  1339  0015                     	;# 
  1340  0016                     	;# 
  1341  0016                     	;# 
  1342  0017                     	;# 
  1343  0018                     	;# 
  1344  0019                     	;# 
  1345  001A                     	;# 
  1346  001B                     	;# 
  1347  001C                     	;# 
  1348  001E                     	;# 
  1349  001F                     	;# 
  1350  008C                     	;# 
  1351  008D                     	;# 
  1352  0091                     	;# 
  1353  0092                     	;# 
  1354  0093                     	;# 
  1355  0094                     	;# 
  1356  0095                     	;# 
  1357  0096                     	;# 
  1358  0097                     	;# 
  1359  0098                     	;# 
  1360  0099                     	;# 
  1361  009A                     	;# 
  1362  009B                     	;# 
  1363  009B                     	;# 
  1364  009C                     	;# 
  1365  009D                     	;# 
  1366  009E                     	;# 
  1367  010C                     	;# 
  1368  010D                     	;# 
  1369  0111                     	;# 
  1370  0112                     	;# 
  1371  0113                     	;# 
  1372  0114                     	;# 
  1373  0115                     	;# 
  1374  0116                     	;# 
  1375  0117                     	;# 
  1376  0118                     	;# 
  1377  0119                     	;# 
  1378  011A                     	;# 
  1379  011B                     	;# 
  1380  011D                     	;# 
  1381  011E                     	;# 
  1382  018C                     	;# 
  1383  018D                     	;# 
  1384  0191                     	;# 
  1385  0191                     	;# 
  1386  0192                     	;# 
  1387  0193                     	;# 
  1388  0193                     	;# 
  1389  0193                     	;# 
  1390  0194                     	;# 
  1391  0195                     	;# 
  1392  0196                     	;# 
  1393  0199                     	;# 
  1394  019A                     	;# 
  1395  019B                     	;# 
  1396  019B                     	;# 
  1397  019B                     	;# 
  1398  019B                     	;# 
  1399  019C                     	;# 
  1400  019C                     	;# 
  1401  019D                     	;# 
  1402  019E                     	;# 
  1403  019F                     	;# 
  1404  020C                     	;# 
  1405  020D                     	;# 
  1406  0211                     	;# 
  1407  0211                     	;# 
  1408  0212                     	;# 
  1409  0212                     	;# 
  1410  0213                     	;# 
  1411  0213                     	;# 
  1412  0214                     	;# 
  1413  0214                     	;# 
  1414  0215                     	;# 
  1415  0215                     	;# 
  1416  0215                     	;# 
  1417  0216                     	;# 
  1418  0216                     	;# 
  1419  0217                     	;# 
  1420  0217                     	;# 
  1421  0219                     	;# 
  1422  021A                     	;# 
  1423  021B                     	;# 
  1424  021C                     	;# 
  1425  021D                     	;# 
  1426  021E                     	;# 
  1427  021F                     	;# 
  1428  0291                     	;# 
  1429  0291                     	;# 
  1430  0292                     	;# 
  1431  0293                     	;# 
  1432  0294                     	;# 
  1433  0295                     	;# 
  1434  0295                     	;# 
  1435  0296                     	;# 
  1436  0298                     	;# 
  1437  0298                     	;# 
  1438  0299                     	;# 
  1439  029A                     	;# 
  1440  029B                     	;# 
  1441  029C                     	;# 
  1442  029C                     	;# 
  1443  029D                     	;# 
  1444  029E                     	;# 
  1445  029E                     	;# 
  1446  0311                     	;# 
  1447  0311                     	;# 
  1448  0312                     	;# 
  1449  0313                     	;# 
  1450  0318                     	;# 
  1451  0318                     	;# 
  1452  0319                     	;# 
  1453  031A                     	;# 
  1454  0394                     	;# 
  1455  0395                     	;# 
  1456  0396                     	;# 
  1457  039A                     	;# 
  1458  039C                     	;# 
  1459  039D                     	;# 
  1460  039E                     	;# 
  1461  039F                     	;# 
  1462  0415                     	;# 
  1463  0416                     	;# 
  1464  0417                     	;# 
  1465  041C                     	;# 
  1466  041D                     	;# 
  1467  041E                     	;# 
  1468  0FE4                     	;# 
  1469  0FE5                     	;# 
  1470  0FE6                     	;# 
  1471  0FE7                     	;# 
  1472  0FE8                     	;# 
  1473  0FE9                     	;# 
  1474  0FEA                     	;# 
  1475  0FEB                     	;# 
  1476  0FED                     	;# 
  1477  0FEE                     	;# 
  1478  0FEF                     	;# 
  1479  0000                     	;# 
  1480  0001                     	;# 
  1481  0002                     	;# 
  1482  0003                     	;# 
  1483  0004                     	;# 
  1484  0005                     	;# 
  1485  0006                     	;# 
  1486  0007                     	;# 
  1487  0008                     	;# 
  1488  0009                     	;# 
  1489  000A                     	;# 
  1490  000B                     	;# 
  1491  000C                     	;# 
  1492  000D                     	;# 
  1493  0011                     	;# 
  1494  0012                     	;# 
  1495  0013                     	;# 
  1496  0014                     	;# 
  1497  0015                     	;# 
  1498  0016                     	;# 
  1499  0016                     	;# 
  1500  0017                     	;# 
  1501  0018                     	;# 
  1502  0019                     	;# 
  1503  001A                     	;# 
  1504  001B                     	;# 
  1505  001C                     	;# 
  1506  001E                     	;# 
  1507  001F                     	;# 
  1508  008C                     	;# 
  1509  008D                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0094                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0098                     	;# 
  1518  0099                     	;# 
  1519  009A                     	;# 
  1520  009B                     	;# 
  1521  009B                     	;# 
  1522  009C                     	;# 
  1523  009D                     	;# 
  1524  009E                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  0111                     	;# 
  1528  0112                     	;# 
  1529  0113                     	;# 
  1530  0114                     	;# 
  1531  0115                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  0118                     	;# 
  1535  0119                     	;# 
  1536  011A                     	;# 
  1537  011B                     	;# 
  1538  011D                     	;# 
  1539  011E                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020C                     	;# 
  1563  020D                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0219                     	;# 
  1580  021A                     	;# 
  1581  021B                     	;# 
  1582  021C                     	;# 
  1583  021D                     	;# 
  1584  021E                     	;# 
  1585  021F                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0294                     	;# 
  1591  0295                     	;# 
  1592  0295                     	;# 
  1593  0296                     	;# 
  1594  0298                     	;# 
  1595  0298                     	;# 
  1596  0299                     	;# 
  1597  029A                     	;# 
  1598  029B                     	;# 
  1599  029C                     	;# 
  1600  029C                     	;# 
  1601  029D                     	;# 
  1602  029E                     	;# 
  1603  029E                     	;# 
  1604  0311                     	;# 
  1605  0311                     	;# 
  1606  0312                     	;# 
  1607  0313                     	;# 
  1608  0318                     	;# 
  1609  0318                     	;# 
  1610  0319                     	;# 
  1611  031A                     	;# 
  1612  0394                     	;# 
  1613  0395                     	;# 
  1614  0396                     	;# 
  1615  039A                     	;# 
  1616  039C                     	;# 
  1617  039D                     	;# 
  1618  039E                     	;# 
  1619  039F                     	;# 
  1620  0415                     	;# 
  1621  0416                     	;# 
  1622  0417                     	;# 
  1623  041C                     	;# 
  1624  041D                     	;# 
  1625  041E                     	;# 
  1626  0FE4                     	;# 
  1627  0FE5                     	;# 
  1628  0FE6                     	;# 
  1629  0FE7                     	;# 
  1630  0FE8                     	;# 
  1631  0FE9                     	;# 
  1632  0FEA                     	;# 
  1633  0FEB                     	;# 
  1634  0FED                     	;# 
  1635  0FEE                     	;# 
  1636  0FEF                     	;# 
  1637  0000                     	;# 
  1638  0001                     	;# 
  1639  0002                     	;# 
  1640  0003                     	;# 
  1641  0004                     	;# 
  1642  0005                     	;# 
  1643  0006                     	;# 
  1644  0007                     	;# 
  1645  0008                     	;# 
  1646  0009                     	;# 
  1647  000A                     	;# 
  1648  000B                     	;# 
  1649  000C                     	;# 
  1650  000D                     	;# 
  1651  0011                     	;# 
  1652  0012                     	;# 
  1653  0013                     	;# 
  1654  0014                     	;# 
  1655  0015                     	;# 
  1656  0016                     	;# 
  1657  0016                     	;# 
  1658  0017                     	;# 
  1659  0018                     	;# 
  1660  0019                     	;# 
  1661  001A                     	;# 
  1662  001B                     	;# 
  1663  001C                     	;# 
  1664  001E                     	;# 
  1665  001F                     	;# 
  1666  008C                     	;# 
  1667  008D                     	;# 
  1668  0091                     	;# 
  1669  0092                     	;# 
  1670  0093                     	;# 
  1671  0094                     	;# 
  1672  0095                     	;# 
  1673  0096                     	;# 
  1674  0097                     	;# 
  1675  0098                     	;# 
  1676  0099                     	;# 
  1677  009A                     	;# 
  1678  009B                     	;# 
  1679  009B                     	;# 
  1680  009C                     	;# 
  1681  009D                     	;# 
  1682  009E                     	;# 
  1683  010C                     	;# 
  1684  010D                     	;# 
  1685  0111                     	;# 
  1686  0112                     	;# 
  1687  0113                     	;# 
  1688  0114                     	;# 
  1689  0115                     	;# 
  1690  0116                     	;# 
  1691  0117                     	;# 
  1692  0118                     	;# 
  1693  0119                     	;# 
  1694  011A                     	;# 
  1695  011B                     	;# 
  1696  011D                     	;# 
  1697  011E                     	;# 
  1698  018C                     	;# 
  1699  018D                     	;# 
  1700  0191                     	;# 
  1701  0191                     	;# 
  1702  0192                     	;# 
  1703  0193                     	;# 
  1704  0193                     	;# 
  1705  0193                     	;# 
  1706  0194                     	;# 
  1707  0195                     	;# 
  1708  0196                     	;# 
  1709  0199                     	;# 
  1710  019A                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019B                     	;# 
  1715  019C                     	;# 
  1716  019C                     	;# 
  1717  019D                     	;# 
  1718  019E                     	;# 
  1719  019F                     	;# 
  1720  020C                     	;# 
  1721  020D                     	;# 
  1722  0211                     	;# 
  1723  0211                     	;# 
  1724  0212                     	;# 
  1725  0212                     	;# 
  1726  0213                     	;# 
  1727  0213                     	;# 
  1728  0214                     	;# 
  1729  0214                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0216                     	;# 
  1734  0216                     	;# 
  1735  0217                     	;# 
  1736  0217                     	;# 
  1737  0219                     	;# 
  1738  021A                     	;# 
  1739  021B                     	;# 
  1740  021C                     	;# 
  1741  021D                     	;# 
  1742  021E                     	;# 
  1743  021F                     	;# 
  1744  0291                     	;# 
  1745  0291                     	;# 
  1746  0292                     	;# 
  1747  0293                     	;# 
  1748  0294                     	;# 
  1749  0295                     	;# 
  1750  0295                     	;# 
  1751  0296                     	;# 
  1752  0298                     	;# 
  1753  0298                     	;# 
  1754  0299                     	;# 
  1755  029A                     	;# 
  1756  029B                     	;# 
  1757  029C                     	;# 
  1758  029C                     	;# 
  1759  029D                     	;# 
  1760  029E                     	;# 
  1761  029E                     	;# 
  1762  0311                     	;# 
  1763  0311                     	;# 
  1764  0312                     	;# 
  1765  0313                     	;# 
  1766  0318                     	;# 
  1767  0318                     	;# 
  1768  0319                     	;# 
  1769  031A                     	;# 
  1770  0394                     	;# 
  1771  0395                     	;# 
  1772  0396                     	;# 
  1773  039A                     	;# 
  1774  039C                     	;# 
  1775  039D                     	;# 
  1776  039E                     	;# 
  1777  039F                     	;# 
  1778  0415                     	;# 
  1779  0416                     	;# 
  1780  0417                     	;# 
  1781  041C                     	;# 
  1782  041D                     	;# 
  1783  041E                     	;# 
  1784  0FE4                     	;# 
  1785  0FE5                     	;# 
  1786  0FE6                     	;# 
  1787  0FE7                     	;# 
  1788  0FE8                     	;# 
  1789  0FE9                     	;# 
  1790  0FEA                     	;# 
  1791  0FEB                     	;# 
  1792  0FED                     	;# 
  1793  0FEE                     	;# 
  1794  0FEF                     	;# 
  1795  0000                     	;# 
  1796  0001                     	;# 
  1797  0002                     	;# 
  1798  0003                     	;# 
  1799  0004                     	;# 
  1800  0005                     	;# 
  1801  0006                     	;# 
  1802  0007                     	;# 
  1803  0008                     	;# 
  1804  0009                     	;# 
  1805  000A                     	;# 
  1806  000B                     	;# 
  1807  000C                     	;# 
  1808  000D                     	;# 
  1809  0011                     	;# 
  1810  0012                     	;# 
  1811  0013                     	;# 
  1812  0014                     	;# 
  1813  0015                     	;# 
  1814  0016                     	;# 
  1815  0016                     	;# 
  1816  0017                     	;# 
  1817  0018                     	;# 
  1818  0019                     	;# 
  1819  001A                     	;# 
  1820  001B                     	;# 
  1821  001C                     	;# 
  1822  001E                     	;# 
  1823  001F                     	;# 
  1824  008C                     	;# 
  1825  008D                     	;# 
  1826  0091                     	;# 
  1827  0092                     	;# 
  1828  0093                     	;# 
  1829  0094                     	;# 
  1830  0095                     	;# 
  1831  0096                     	;# 
  1832  0097                     	;# 
  1833  0098                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  010C                     	;# 
  1842  010D                     	;# 
  1843  0111                     	;# 
  1844  0112                     	;# 
  1845  0113                     	;# 
  1846  0114                     	;# 
  1847  0115                     	;# 
  1848  0116                     	;# 
  1849  0117                     	;# 
  1850  0118                     	;# 
  1851  0119                     	;# 
  1852  011A                     	;# 
  1853  011B                     	;# 
  1854  011D                     	;# 
  1855  011E                     	;# 
  1856  018C                     	;# 
  1857  018D                     	;# 
  1858  0191                     	;# 
  1859  0191                     	;# 
  1860  0192                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0193                     	;# 
  1864  0194                     	;# 
  1865  0195                     	;# 
  1866  0196                     	;# 
  1867  0199                     	;# 
  1868  019A                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019B                     	;# 
  1873  019C                     	;# 
  1874  019C                     	;# 
  1875  019D                     	;# 
  1876  019E                     	;# 
  1877  019F                     	;# 
  1878  020C                     	;# 
  1879  020D                     	;# 
  1880  0211                     	;# 
  1881  0211                     	;# 
  1882  0212                     	;# 
  1883  0212                     	;# 
  1884  0213                     	;# 
  1885  0213                     	;# 
  1886  0214                     	;# 
  1887  0214                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0216                     	;# 
  1892  0216                     	;# 
  1893  0217                     	;# 
  1894  0217                     	;# 
  1895  0219                     	;# 
  1896  021A                     	;# 
  1897  021B                     	;# 
  1898  021C                     	;# 
  1899  021D                     	;# 
  1900  021E                     	;# 
  1901  021F                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  029B                     	;# 
  1915  029C                     	;# 
  1916  029C                     	;# 
  1917  029D                     	;# 
  1918  029E                     	;# 
  1919  029E                     	;# 
  1920  0311                     	;# 
  1921  0311                     	;# 
  1922  0312                     	;# 
  1923  0313                     	;# 
  1924  0318                     	;# 
  1925  0318                     	;# 
  1926  0319                     	;# 
  1927  031A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  039A                     	;# 
  1932  039C                     	;# 
  1933  039D                     	;# 
  1934  039E                     	;# 
  1935  039F                     	;# 
  1936  0415                     	;# 
  1937  0416                     	;# 
  1938  0417                     	;# 
  1939  041C                     	;# 
  1940  041D                     	;# 
  1941  041E                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0013                     	;# 
  1970  0014                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  001E                     	;# 
  1981  001F                     	;# 
  1982  008C                     	;# 
  1983  008D                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0093                     	;# 
  1987  0094                     	;# 
  1988  0095                     	;# 
  1989  0096                     	;# 
  1990  0097                     	;# 
  1991  0098                     	;# 
  1992  0099                     	;# 
  1993  009A                     	;# 
  1994  009B                     	;# 
  1995  009B                     	;# 
  1996  009C                     	;# 
  1997  009D                     	;# 
  1998  009E                     	;# 
  1999  010C                     	;# 
  2000  010D                     	;# 
  2001  0111                     	;# 
  2002  0112                     	;# 
  2003  0113                     	;# 
  2004  0114                     	;# 
  2005  0115                     	;# 
  2006  0116                     	;# 
  2007  0117                     	;# 
  2008  0118                     	;# 
  2009  0119                     	;# 
  2010  011A                     	;# 
  2011  011B                     	;# 
  2012  011D                     	;# 
  2013  011E                     	;# 
  2014  018C                     	;# 
  2015  018D                     	;# 
  2016  0191                     	;# 
  2017  0191                     	;# 
  2018  0192                     	;# 
  2019  0193                     	;# 
  2020  0193                     	;# 
  2021  0193                     	;# 
  2022  0194                     	;# 
  2023  0195                     	;# 
  2024  0196                     	;# 
  2025  0199                     	;# 
  2026  019A                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019E                     	;# 
  2035  019F                     	;# 
  2036  020C                     	;# 
  2037  020D                     	;# 
  2038  0211                     	;# 
  2039  0211                     	;# 
  2040  0212                     	;# 
  2041  0212                     	;# 
  2042  0213                     	;# 
  2043  0213                     	;# 
  2044  0214                     	;# 
  2045  0214                     	;# 
  2046  0215                     	;# 
  2047  0215                     	;# 
  2048  0215                     	;# 
  2049  0216                     	;# 
  2050  0216                     	;# 
  2051  0217                     	;# 
  2052  0217                     	;# 
  2053  0219                     	;# 
  2054  021A                     	;# 
  2055  021B                     	;# 
  2056  021C                     	;# 
  2057  021D                     	;# 
  2058  021E                     	;# 
  2059  021F                     	;# 
  2060  0291                     	;# 
  2061  0291                     	;# 
  2062  0292                     	;# 
  2063  0293                     	;# 
  2064  0294                     	;# 
  2065  0295                     	;# 
  2066  0295                     	;# 
  2067  0296                     	;# 
  2068  0298                     	;# 
  2069  0298                     	;# 
  2070  0299                     	;# 
  2071  029A                     	;# 
  2072  029B                     	;# 
  2073  029C                     	;# 
  2074  029C                     	;# 
  2075  029D                     	;# 
  2076  029E                     	;# 
  2077  029E                     	;# 
  2078  0311                     	;# 
  2079  0311                     	;# 
  2080  0312                     	;# 
  2081  0313                     	;# 
  2082  0318                     	;# 
  2083  0318                     	;# 
  2084  0319                     	;# 
  2085  031A                     	;# 
  2086  0394                     	;# 
  2087  0395                     	;# 
  2088  0396                     	;# 
  2089  039A                     	;# 
  2090  039C                     	;# 
  2091  039D                     	;# 
  2092  039E                     	;# 
  2093  039F                     	;# 
  2094  0415                     	;# 
  2095  0416                     	;# 
  2096  0417                     	;# 
  2097  041C                     	;# 
  2098  041D                     	;# 
  2099  041E                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111  0000                     	;# 
  2112  0001                     	;# 
  2113  0002                     	;# 
  2114  0003                     	;# 
  2115  0004                     	;# 
  2116  0005                     	;# 
  2117  0006                     	;# 
  2118  0007                     	;# 
  2119  0008                     	;# 
  2120  0009                     	;# 
  2121  000A                     	;# 
  2122  000B                     	;# 
  2123  000C                     	;# 
  2124  000D                     	;# 
  2125  0011                     	;# 
  2126  0012                     	;# 
  2127  0013                     	;# 
  2128  0014                     	;# 
  2129  0015                     	;# 
  2130  0016                     	;# 
  2131  0016                     	;# 
  2132  0017                     	;# 
  2133  0018                     	;# 
  2134  0019                     	;# 
  2135  001A                     	;# 
  2136  001B                     	;# 
  2137  001C                     	;# 
  2138  001E                     	;# 
  2139  001F                     	;# 
  2140  008C                     	;# 
  2141  008D                     	;# 
  2142  0091                     	;# 
  2143  0092                     	;# 
  2144  0093                     	;# 
  2145  0094                     	;# 
  2146  0095                     	;# 
  2147  0096                     	;# 
  2148  0097                     	;# 
  2149  0098                     	;# 
  2150  0099                     	;# 
  2151  009A                     	;# 
  2152  009B                     	;# 
  2153  009B                     	;# 
  2154  009C                     	;# 
  2155  009D                     	;# 
  2156  009E                     	;# 
  2157  010C                     	;# 
  2158  010D                     	;# 
  2159  0111                     	;# 
  2160  0112                     	;# 
  2161  0113                     	;# 
  2162  0114                     	;# 
  2163  0115                     	;# 
  2164  0116                     	;# 
  2165  0117                     	;# 
  2166  0118                     	;# 
  2167  0119                     	;# 
  2168  011A                     	;# 
  2169  011B                     	;# 
  2170  011D                     	;# 
  2171  011E                     	;# 
  2172  018C                     	;# 
  2173  018D                     	;# 
  2174  0191                     	;# 
  2175  0191                     	;# 
  2176  0192                     	;# 
  2177  0193                     	;# 
  2178  0193                     	;# 
  2179  0193                     	;# 
  2180  0194                     	;# 
  2181  0195                     	;# 
  2182  0196                     	;# 
  2183  0199                     	;# 
  2184  019A                     	;# 
  2185  019B                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019B                     	;# 
  2189  019C                     	;# 
  2190  019C                     	;# 
  2191  019D                     	;# 
  2192  019E                     	;# 
  2193  019F                     	;# 
  2194  020C                     	;# 
  2195  020D                     	;# 
  2196  0211                     	;# 
  2197  0211                     	;# 
  2198  0212                     	;# 
  2199  0212                     	;# 
  2200  0213                     	;# 
  2201  0213                     	;# 
  2202  0214                     	;# 
  2203  0214                     	;# 
  2204  0215                     	;# 
  2205  0215                     	;# 
  2206  0215                     	;# 
  2207  0216                     	;# 
  2208  0216                     	;# 
  2209  0217                     	;# 
  2210  0217                     	;# 
  2211  0219                     	;# 
  2212  021A                     	;# 
  2213  021B                     	;# 
  2214  021C                     	;# 
  2215  021D                     	;# 
  2216  021E                     	;# 
  2217  021F                     	;# 
  2218  0291                     	;# 
  2219  0291                     	;# 
  2220  0292                     	;# 
  2221  0293                     	;# 
  2222  0294                     	;# 
  2223  0295                     	;# 
  2224  0295                     	;# 
  2225  0296                     	;# 
  2226  0298                     	;# 
  2227  0298                     	;# 
  2228  0299                     	;# 
  2229  029A                     	;# 
  2230  029B                     	;# 
  2231  029C                     	;# 
  2232  029C                     	;# 
  2233  029D                     	;# 
  2234  029E                     	;# 
  2235  029E                     	;# 
  2236  0311                     	;# 
  2237  0311                     	;# 
  2238  0312                     	;# 
  2239  0313                     	;# 
  2240  0318                     	;# 
  2241  0318                     	;# 
  2242  0319                     	;# 
  2243  031A                     	;# 
  2244  0394                     	;# 
  2245  0395                     	;# 
  2246  0396                     	;# 
  2247  039A                     	;# 
  2248  039C                     	;# 
  2249  039D                     	;# 
  2250  039E                     	;# 
  2251  039F                     	;# 
  2252  0415                     	;# 
  2253  0416                     	;# 
  2254  0417                     	;# 
  2255  041C                     	;# 
  2256  041D                     	;# 
  2257  041E                     	;# 
  2258  0FE4                     	;# 
  2259  0FE5                     	;# 
  2260  0FE6                     	;# 
  2261  0FE7                     	;# 
  2262  0FE8                     	;# 
  2263  0FE9                     	;# 
  2264  0FEA                     	;# 
  2265  0FEB                     	;# 
  2266  0FED                     	;# 
  2267  0FEE                     	;# 
  2268  0FEF                     	;# 
  2269                           
  2270                           	psect	stringtext
  2271  07C5                     __pstringtext:	
  2272  07C5                     _fp_x0_a:	
  2273  07C5  34D0               	retlw	208
  2274  07C6  34D2               	retlw	210
  2275  07C7  3402               	retlw	2
  2276  07C8  3400               	retlw	0
  2277  07C9                     __end_of_fp_x0_a:	
  2278  07C9                     _fp_x0_b:	
  2279  07C9  34E4               	retlw	228
  2280  07CA  34E1               	retlw	225
  2281  07CB  3401               	retlw	1
  2282  07CC  3400               	retlw	0
  2283  07CD                     __end_of_fp_x0_b:	
  2284  07CD                     _ratio_mph:	
  2285  07CD  34F9               	retlw	249
  2286  07CE  349E               	retlw	158
  2287  07CF  3400               	retlw	0
  2288  07D0  3400               	retlw	0
  2289  07D1                     __end_of_ratio_mph:	
  2290  07D1                     convert_to_fp@one:	
  2291  07D1  3401               	retlw	1
  2292  07D2  3400               	retlw	0
  2293  07D3                     __end_ofconvert_to_fp@one:	
  2294  000B                     _INTCONbits	set	11
  2295  0011                     _PIR1bits	set	17
  2296  000D                     _PORTBbits	set	13
  2297  001B                     _PR2	set	27
  2298  001C                     _T2CON	set	28
  2299  001C                     _T2CONbits	set	28
  2300  0015                     _TMR0	set	21
  2301  001A                     _TMR2	set	26
  2302  0095                     _OPTION_REG	set	149
  2303  0095                     _OPTION_REGbits	set	149
  2304  0099                     _OSCCON	set	153
  2305  009A                     _OSCSTAT	set	154
  2306  0098                     _OSCTUNE	set	152
  2307  0091                     _PIE1bits	set	145
  2308  008C                     _TRISA	set	140
  2309  008D                     _TRISB	set	141
  2310  04D6                     _PLLR	set	1238
  2311  011D                     _APFCON0	set	285
  2312  011E                     _APFCON1	set	286
  2313  010C                     _LATA	set	268
  2314  010D                     _LATB	set	269
  2315  0862                     _LATA2	set	2146
  2316  018C                     _ANSELA	set	396
  2317  018D                     _ANSELB	set	397
  2318  019F                     _BAUDCON	set	415
  2319  0192                     _EEADRH	set	402
  2320  0191                     _EEADRL	set	401
  2321  0195                     _EECON1bits	set	405
  2322  0196                     _EECON2	set	406
  2323  0194                     _EEDATH	set	404
  2324  0193                     _EEDATL	set	403
  2325  0199                     _RCREG	set	409
  2326  019D                     _RCSTA	set	413
  2327  019D                     _RCSTAbits	set	413
  2328  019C                     _SPBRGH	set	412
  2329  019B                     _SPBRGL	set	411
  2330  019A                     _TXREG	set	410
  2331  019E                     _TXSTA	set	414
  2332  020C                     _WPUA	set	524
  2333  020D                     _WPUB	set	525
  2334  0293                     _CCP1CON	set	659
  2335  0292                     _CCPR1H	set	658
  2336  0291                     _CCPR1L	set	657
  2337  029E                     _CCPTMRS0bits	set	670
  2338  0295                     _ECCP1AS	set	661
  2339  0296                     _PSTR1CON	set	662
  2340  0294                     _PWM1CON	set	660
  2341  07D3                     STR_1:	
  2342  07D3  3424               	retlw	36	;'$'
  2343  07D4  3450               	retlw	80	;'P'
  2344  07D5  344D               	retlw	77	;'M'
  2345  07D6  3454               	retlw	84	;'T'
  2346  07D7  344B               	retlw	75	;'K'
  2347  07D8  3433               	retlw	51	;'3'
  2348  07D9  3431               	retlw	49	;'1'
  2349  07DA  3434               	retlw	52	;'4'
  2350  07DB  342C               	retlw	44	;','
  2351  07DC  3430               	retlw	48	;'0'
  2352  07DD  342C               	retlw	44	;','
  2353  07DE  3430               	retlw	48	;'0'
  2354  07DF  342C               	retlw	44	;','
  2355  07E0  3431               	retlw	49	;'1'
  2356  07E1  342C               	retlw	44	;','
  2357  07E2  3430               	retlw	48	;'0'
  2358  07E3  342C               	retlw	44	;','
  2359  07E4  3430               	retlw	48	;'0'
  2360  07E5  342C               	retlw	44	;','
  2361  07E6  3430               	retlw	48	;'0'
  2362  07E7  342C               	retlw	44	;','
  2363  07E8  3430               	retlw	48	;'0'
  2364  07E9  342C               	retlw	44	;','
  2365  07EA  3430               	retlw	48	;'0'
  2366  07EB  342C               	retlw	44	;','
  2367  07EC  3430               	retlw	48	;'0'
  2368  07ED  342C               	retlw	44	;','
  2369  07EE  3430               	retlw	48	;'0'
  2370  07EF  342C               	retlw	44	;','
  2371  07F0  3430               	retlw	48	;'0'
  2372  07F1  342C               	retlw	44	;','
  2373  07F2  3430               	retlw	48	;'0'
  2374  07F3  342C               	retlw	44	;','
  2375  07F4  3430               	retlw	48	;'0'
  2376  07F5  342C               	retlw	44	;','
  2377  07F6  3430               	retlw	48	;'0'
  2378  07F7  342C               	retlw	44	;','
  2379  07F8  3430               	retlw	48	;'0'
  2380  07F9  342C               	retlw	44	;','
  2381  07FA  3430               	retlw	48	;'0'
  2382  07FB  342C               	retlw	44	;','
  2383  07FC  3430               	retlw	48	;'0'
  2384  07FD  342C               	retlw	44	;','
  2385  07FE  3430               	retlw	48	;'0'
  2386  07FF  342C               	retlw	44	;','
  2387  0800  3430               	retlw	48	;'0'
  2388  0801  342A               	retlw	42	;'*'
  2389  0802  3432               	retlw	50	;'2'
  2390  0803  3439               	retlw	57	;'9'
  2391  0804  340D               	retlw	13
  2392  0805  340A               	retlw	10
  2393  0806  3400               	retlw	0
  2394  0807                     STR_2:	
  2395  0807  3424               	retlw	36	;'$'
  2396  0808  3450               	retlw	80	;'P'
  2397  0809  344D               	retlw	77	;'M'
  2398  080A  3454               	retlw	84	;'T'
  2399  080B  344B               	retlw	75	;'K'
  2400  080C  3432               	retlw	50	;'2'
  2401  080D  3432               	retlw	50	;'2'
  2402  080E  3430               	retlw	48	;'0'
  2403  080F  342C               	retlw	44	;','
  2404  0810  3431               	retlw	49	;'1'
  2405  0811  3430               	retlw	48	;'0'
  2406  0812  3430               	retlw	48	;'0'
  2407  0813  342A               	retlw	42	;'*'
  2408  0814  3432               	retlw	50	;'2'
  2409  0815  3446               	retlw	70	;'F'
  2410  0816  340D               	retlw	13
  2411  0817  340A               	retlw	10
  2412  0818  3400               	retlw	0
  2413                           
  2414                           ; #config settings
  2415  0000                     
  2416                           	psect	cinit
  2417  002B                     start_initialization:	
  2418  002B                     __initialization:	
  2419                           
  2420                           ; Clear objects allocated to COMMON
  2421  002B  01F6               	clrf	__pbssCOMMON& (0+127)
  2422  002C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2423  002D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2424  002E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2425                           
  2426                           ; Clear objects allocated to BANK0
  2427  002F  3054               	movlw	low __pbssBANK0
  2428  0030  0084               	movwf	4
  2429  0031  3000               	movlw	high __pbssBANK0
  2430  0032  0085               	movwf	5
  2431  0033  300A               	movlw	10
  2432  0034  3189  2148  3180   	fcall	clear_ram0
  2433                           
  2434                           ; Clear objects allocated to BANK1
  2435  0037  30A0               	movlw	low __pbssBANK1
  2436  0038  0084               	movwf	4
  2437  0039  3000               	movlw	high __pbssBANK1
  2438  003A  0085               	movwf	5
  2439  003B  304D               	movlw	77
  2440  003C  3189  2148         	fcall	clear_ram0
  2441  003E                     end_of_initialization:	
  2442                           ;End of C runtime variable initialization code
  2443                           
  2444  003E                     __end_of__initialization:	
  2445  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2446  003F  0020               	movlb	0
  2447  0040  3180  2842         	ljmp	_main	;jump to C main() function
  2448                           
  2449                           	psect	bssCOMMON
  2450  0076                     __pbssCOMMON:	
  2451  0076                     _m_LED:	
  2452  0076                     	ds	2
  2453  0078                     _eusartRxCount:	
  2454  0078                     	ds	1
  2455  0079                     _timer0ReloadVal:	
  2456  0079                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  0054                     __pbssBANK0:	
  2460  0054                     _m_button:	
  2461  0054                     	ds	7
  2462  005B                     _eusartTxBufferRemaining:	
  2463  005B                     	ds	1
  2464  005C                     _eusartTxHead:	
  2465  005C                     	ds	1
  2466  005D                     _eusartTxTail:	
  2467  005D                     	ds	1
  2468                           
  2469                           	psect	bssBANK1
  2470  00A0                     __pbssBANK1:	
  2471  00A0                     _eusartRxBuffer:	
  2472  00A0                     	ds	8
  2473  00A8                     _eusartTxBuffer:	
  2474  00A8                     	ds	8
  2475  00B0                     _speed:	
  2476  00B0                     	ds	4
  2477  00B4                     TMR0_ISR@CountCallBack:	
  2478  00B4                     	ds	2
  2479  00B6                     _TMR0_InterruptHandler:	
  2480  00B6                     	ds	2
  2481  00B8                     _motor:	
  2482  00B8                     	ds	2
  2483  00BA                     _eusartRxHead:	
  2484  00BA                     	ds	1
  2485  00BB                     _eusartRxTail:	
  2486  00BB                     	ds	1
  2487  00BC                     _m_conf:	
  2488  00BC                     	ds	47
  2489  00EB                     _m_crc:	
  2490  00EB                     	ds	2
  2491                           
  2492                           	psect	clrtext
  2493  0948                     clear_ram0:	
  2494                           ;	Called with FSR0 containing the base address, and
  2495                           ;	WREG with the size to clear
  2496                           
  2497  0948  0064               	clrwdt	;clear the watchdog before getting into this loop
  2498  0949                     clrloop0:	
  2499  0949  0180               	clrf	0	;clear RAM location pointed to by FSR
  2500  094A  3101               	addfsr 0,1
  2501  094B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2502  094C  2949               	goto	clrloop0	;have we reached the end yet?
  2503  094D  3400               	retlw	0	;all done for this memory range, return
  2504                           
  2505                           	psect	cstackBANK2
  2506  0120                     __pcstackBANK2:	
  2507  0120                     main@fp_motor:	
  2508                           
  2509                           ; 4 bytes @ 0x0
  2510  0120                     	ds	4
  2511  0124                     main@done:	
  2512                           
  2513                           ; 1 bytes @ 0x4
  2514  0124                     	ds	1
  2515  0125                     main@speed_int:	
  2516                           
  2517                           ; 2 bytes @ 0x5
  2518  0125                     	ds	2
  2519  0127                     main@tmp:	
  2520                           
  2521                           ; 4 bytes @ 0x7
  2522  0127                     	ds	4
  2523  012B                     main@a:	
  2524                           
  2525                           ; 4 bytes @ 0xB
  2526  012B                     	ds	4
  2527  012F                     main@b:	
  2528                           
  2529                           ; 4 bytes @ 0xF
  2530  012F                     	ds	4
  2531  0133                     main@new_motor:	
  2532                           
  2533                           ; 2 bytes @ 0x13
  2534  0133                     	ds	2
  2535  0135                     main@i:	
  2536                           
  2537                           ; 1 bytes @ 0x15
  2538  0135                     	ds	1
  2539                           
  2540                           	psect	cstackCOMMON
  2541  0070                     __pcstackCOMMON:	
  2542  0070                     ?_PIN_MANAGER_Initialize:	
  2543  0070                     ?_OSCILLATOR_Initialize:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_EPWM1_Initialize:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_TMR2_Initialize:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ?_TMR0_Initialize:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ?_EUSART_Initialize:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_TMR0_ISR:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ?_EUSART_Transmit_ISR:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ??_EUSART_Transmit_ISR:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_EUSART_Receive_ISR:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ??_EUSART_Receive_ISR:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_TMR0_DefaultInterruptHandler:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ??_TMR0_DefaultInterruptHandler:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_TMR0_CallBack:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_TMR2_StartTimer:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_LED_set_state:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_my10msTimerISR:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_load_calibration_from_EEPROM:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_button_init:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ?_perform_calibration:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_write_calibration_to_EEPROM:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?_GPS_Initialize:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ?_GPS_read_speed:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_LED_update_loop:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ??_LED_update_loop:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_button_update_loop:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_SYSTEM_Initialize:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_INTERRUPT_InterruptManager:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_EUSART_Read:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_EUSART_Write:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_putch:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_DATAEE_ReadByte:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_main:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_multiple_fast_blink:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_get_button_state:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?i1_get_button_state:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ??i1_get_button_state:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     i1get_button_state@state:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654                           
  2655                           ; 1 bytes @ 0x0
  2656  0070                     	ds	1
  2657  0071                     ??_button_update_loop:	
  2658                           
  2659                           ; 1 bytes @ 0x1
  2660  0071                     	ds	1
  2661  0072                     button_update_loop@current_state:	
  2662                           
  2663                           ; 1 bytes @ 0x2
  2664  0072                     	ds	1
  2665  0073                     ??_TMR0_ISR:	
  2666  0073                     ??_TMR0_CallBack:	
  2667                           ; 1 bytes @ 0x3
  2668                           
  2669  0073                     ??_my10msTimerISR:	
  2670                           ; 1 bytes @ 0x3
  2671                           
  2672  0073                     ??_INTERRUPT_InterruptManager:	
  2673                           ; 1 bytes @ 0x3
  2674                           
  2675                           
  2676                           ; 1 bytes @ 0x3
  2677  0073                     	ds	1
  2678  0074                     ??_PIN_MANAGER_Initialize:	
  2679  0074                     ??_OSCILLATOR_Initialize:	
  2680                           ; 1 bytes @ 0x4
  2681                           
  2682  0074                     ??_EPWM1_Initialize:	
  2683                           ; 1 bytes @ 0x4
  2684                           
  2685  0074                     ??_TMR2_Initialize:	
  2686                           ; 1 bytes @ 0x4
  2687                           
  2688  0074                     ??_EUSART_Initialize:	
  2689                           ; 1 bytes @ 0x4
  2690                           
  2691  0074                     ?_TMR0_SetInterruptHandler:	
  2692                           ; 1 bytes @ 0x4
  2693                           
  2694  0074                     ??_TMR2_StartTimer:	
  2695                           ; 1 bytes @ 0x4
  2696                           
  2697  0074                     ??_LED_set_state:	
  2698                           ; 1 bytes @ 0x4
  2699                           
  2700  0074                     ?_delay_ms:	
  2701                           ; 1 bytes @ 0x4
  2702                           
  2703  0074                     ??_EUSART_Read:	
  2704                           ; 1 bytes @ 0x4
  2705                           
  2706  0074                     ??_EUSART_Write:	
  2707                           ; 1 bytes @ 0x4
  2708                           
  2709  0074                     ?_EPWM1_LoadDutyValue:	
  2710                           ; 1 bytes @ 0x4
  2711                           
  2712  0074                     ?_DATAEE_WriteByte:	
  2713                           ; 1 bytes @ 0x4
  2714                           
  2715  0074                     ??_DATAEE_ReadByte:	
  2716                           ; 1 bytes @ 0x4
  2717                           
  2718  0074                     ??_get_button_state:	
  2719                           ; 1 bytes @ 0x4
  2720                           
  2721  0074                     ??___wmul:	
  2722                           ; 1 bytes @ 0x4
  2723                           
  2724  0074                     ??___lmul:	
  2725                           ; 1 bytes @ 0x4
  2726                           
  2727  0074                     DATAEE_WriteByte@bData:	
  2728                           ; 1 bytes @ 0x4
  2729                           
  2730  0074                     DATAEE_ReadByte@bAdd:	
  2731                           ; 1 bytes @ 0x4
  2732                           
  2733  0074                     get_button_state@state:	
  2734                           ; 1 bytes @ 0x4
  2735                           
  2736  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  2737                           ; 1 bytes @ 0x4
  2738                           
  2739  0074                     EPWM1_LoadDutyValue@dutyValue:	
  2740                           ; 2 bytes @ 0x4
  2741                           
  2742  0074                     delay_ms@milliseconds:	
  2743                           ; 2 bytes @ 0x4
  2744                           
  2745  0074                     ___wmul@product:	
  2746                           ; 2 bytes @ 0x4
  2747                           
  2748                           
  2749                           ; 2 bytes @ 0x4
  2750  0074                     	ds	1
  2751  0075                     ??_load_calibration_from_EEPROM:	
  2752  0075                     ??_button_init:	
  2753                           ; 1 bytes @ 0x5
  2754                           
  2755  0075                     ??_write_calibration_to_EEPROM:	
  2756                           ; 1 bytes @ 0x5
  2757                           
  2758  0075                     ??_DATAEE_WriteByte:	
  2759                           ; 1 bytes @ 0x5
  2760                           
  2761  0075                     EUSART_Read@readValue:	
  2762                           ; 1 bytes @ 0x5
  2763                           
  2764  0075                     EUSART_Write@txData:	
  2765                           ; 1 bytes @ 0x5
  2766                           
  2767  0075                     LED_set_state@new_state:	
  2768                           ; 1 bytes @ 0x5
  2769                           
  2770                           
  2771                           ; 1 bytes @ 0x5
  2772  0075                     	ds	1
  2773  0076                     ??_TMR0_SetInterruptHandler:	
  2774  0076                     ??_SYSTEM_Initialize:	
  2775                           ; 1 bytes @ 0x6
  2776                           
  2777  0076                     ??_putch:	
  2778                           ; 1 bytes @ 0x6
  2779                           
  2780                           
  2781                           	psect	cstackBANK0
  2782  0020                     __pcstackBANK0:	
  2783                           ; 1 bytes @ 0x6
  2784                           
  2785  0020                     ??_TMR0_Initialize:	
  2786  0020                     ??_delay_ms:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0020                     ??_EPWM1_LoadDutyValue:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0020                     ??_multiple_fast_blink:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0020                     ?_crc_update:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0020                     ?___wmul:	
  2799                           ; 2 bytes @ 0x0
  2800                           
  2801  0020                     ?___lmul:	
  2802                           ; 2 bytes @ 0x0
  2803                           
  2804  0020                     putch@txData:	
  2805                           ; 4 bytes @ 0x0
  2806                           
  2807  0020                     DATAEE_WriteByte@bAdd:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0020                     crc_update@old_crc:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0020                     ___wmul@multiplier:	
  2814                           ; 2 bytes @ 0x0
  2815                           
  2816  0020                     ___lmul@multiplier:	
  2817                           ; 2 bytes @ 0x0
  2818                           
  2819                           
  2820                           ; 4 bytes @ 0x0
  2821  0020                     	ds	1
  2822  0021                     ?_printf:	
  2823  0021                     DATAEE_WriteByte@GIEBitValue:	
  2824                           ; 2 bytes @ 0x1
  2825                           
  2826  0021                     printf@f:	
  2827                           ; 1 bytes @ 0x1
  2828                           
  2829                           
  2830                           ; 2 bytes @ 0x1
  2831  0021                     	ds	1
  2832  0022                     crc_update@data:	
  2833  0022                     ___wmul@multiplicand:	
  2834                           ; 1 bytes @ 0x2
  2835                           
  2836                           
  2837                           ; 2 bytes @ 0x2
  2838  0022                     	ds	1
  2839  0023                     ??_printf:	
  2840  0023                     ??_crc_update:	
  2841                           ; 1 bytes @ 0x3
  2842                           
  2843  0023                     multiple_fast_blink@times:	
  2844                           ; 1 bytes @ 0x3
  2845                           
  2846                           
  2847                           ; 1 bytes @ 0x3
  2848  0023                     	ds	1
  2849  0024                     ?_convert_to_fp:	
  2850  0024                     multiple_fast_blink@i:	
  2851                           ; 4 bytes @ 0x4
  2852                           
  2853  0024                     convert_to_fp@int_part:	
  2854                           ; 1 bytes @ 0x4
  2855                           
  2856  0024                     ___lmul@multiplicand:	
  2857                           ; 2 bytes @ 0x4
  2858                           
  2859                           
  2860                           ; 4 bytes @ 0x4
  2861  0024                     	ds	1
  2862  0025                     ??_perform_calibration:	
  2863                           
  2864                           ; 1 bytes @ 0x5
  2865  0025                     	ds	1
  2866  0026                     printf@ap:	
  2867  0026                     convert_to_fp@fract_part:	
  2868                           ; 1 bytes @ 0x6
  2869                           
  2870                           
  2871                           ; 2 bytes @ 0x6
  2872  0026                     	ds	1
  2873  0027                     printf@c:	
  2874                           
  2875                           ; 1 bytes @ 0x7
  2876  0027                     	ds	1
  2877  0028                     ??_GPS_Initialize:	
  2878  0028                     ??_convert_to_fp:	
  2879                           ; 1 bytes @ 0x8
  2880                           
  2881  0028                     perform_calibration@done:	
  2882                           ; 1 bytes @ 0x8
  2883                           
  2884  0028                     ___lmul@product:	
  2885                           ; 1 bytes @ 0x8
  2886                           
  2887                           
  2888                           ; 4 bytes @ 0x8
  2889  0028                     	ds	1
  2890  0029                     perform_calibration@replay:	
  2891                           
  2892                           ; 1 bytes @ 0x9
  2893  0029                     	ds	1
  2894  002A                     perform_calibration@__delay_tmp:	
  2895                           
  2896                           ; 1 bytes @ 0xA
  2897  002A                     	ds	1
  2898  002B                     GPS_Initialize@__delay_tmp:	
  2899  002B                     perform_calibration@__delay_tmp_906:	
  2900                           ; 1 bytes @ 0xB
  2901                           
  2902                           
  2903                           ; 1 bytes @ 0xB
  2904  002B                     	ds	1
  2905  002C                     ?_multiply_fp:	
  2906  002C                     perform_calibration@__delay_tmp_909:	
  2907                           ; 4 bytes @ 0xC
  2908                           
  2909  002C                     multiply_fp@n1:	
  2910                           ; 1 bytes @ 0xC
  2911                           
  2912                           
  2913                           ; 4 bytes @ 0xC
  2914  002C                     	ds	1
  2915  002D                     perform_calibration@__delay_tmp_910:	
  2916  002D                     crc_update@crc:	
  2917                           ; 1 bytes @ 0xD
  2918                           
  2919                           
  2920                           ; 2 bytes @ 0xD
  2921  002D                     	ds	1
  2922  002E                     perform_calibration@__delay_tmp_912:	
  2923                           
  2924                           ; 1 bytes @ 0xE
  2925  002E                     	ds	1
  2926  002F                     perform_calibration@__delay_tmp_913:	
  2927  002F                     crc_update@x:	
  2928                           ; 1 bytes @ 0xF
  2929                           
  2930                           
  2931                           ; 2 bytes @ 0xF
  2932  002F                     	ds	1
  2933  0030                     perform_calibration@i:	
  2934  0030                     convert_to_fp@res_fract:	
  2935                           ; 1 bytes @ 0x10
  2936                           
  2937  0030                     multiply_fp@n2:	
  2938                           ; 2 bytes @ 0x10
  2939                           
  2940                           
  2941                           ; 4 bytes @ 0x10
  2942  0030                     	ds	1
  2943  0031                     write_calibration_to_EEPROM@addr:	
  2944  0031                     load_calibration_from_EEPROM@crc:	
  2945                           ; 1 bytes @ 0x11
  2946                           
  2947  0031                     perform_calibration@m_motor:	
  2948                           ; 2 bytes @ 0x11
  2949                           
  2950                           
  2951                           ; 2 bytes @ 0x11
  2952  0031                     	ds	1
  2953  0032                     convert_to_fp@i_bit:	
  2954  0032                     write_calibration_to_EEPROM@p:	
  2955                           ; 1 bytes @ 0x12
  2956                           
  2957                           
  2958                           ; 1 bytes @ 0x12
  2959  0032                     	ds	1
  2960  0033                     load_calibration_from_EEPROM@addr:	
  2961  0033                     write_calibration_to_EEPROM@i:	
  2962                           ; 1 bytes @ 0x13
  2963                           
  2964  0033                     convert_to_fp@tmp_left:	
  2965                           ; 1 bytes @ 0x13
  2966                           
  2967                           
  2968                           ; 2 bytes @ 0x13
  2969  0033                     	ds	1
  2970  0034                     ??_multiply_fp:	
  2971  0034                     load_calibration_from_EEPROM@p:	
  2972                           ; 1 bytes @ 0x14
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x14
  2976  0034                     	ds	1
  2977  0035                     load_calibration_from_EEPROM@i:	
  2978  0035                     convert_to_fp@res:	
  2979                           ; 1 bytes @ 0x15
  2980                           
  2981                           
  2982                           ; 4 bytes @ 0x15
  2983  0035                     	ds	4
  2984  0039                     ??_GPS_read_speed:	
  2985  0039                     ?_integer_part:	
  2986                           ; 1 bytes @ 0x19
  2987                           
  2988  0039                     integer_part@n:	
  2989                           ; 2 bytes @ 0x19
  2990                           
  2991                           
  2992                           ; 4 bytes @ 0x19
  2993  0039                     	ds	2
  2994  003B                     GPS_read_speed@before_dot:	
  2995                           
  2996                           ; 1 bytes @ 0x1B
  2997  003B                     	ds	1
  2998  003C                     GPS_read_speed@no_more_checksum:	
  2999                           
  3000                           ; 1 bytes @ 0x1C
  3001  003C                     	ds	1
  3002  003D                     ??_integer_part:	
  3003  003D                     GPS_read_speed@read_speed_int:	
  3004                           ; 1 bytes @ 0x1D
  3005                           
  3006                           
  3007                           ; 2 bytes @ 0x1D
  3008  003D                     	ds	2
  3009  003F                     GPS_read_speed@read_speed_fra:	
  3010                           
  3011                           ; 2 bytes @ 0x1F
  3012  003F                     	ds	2
  3013  0041                     GPS_read_speed@checksum2:	
  3014                           
  3015                           ; 1 bytes @ 0x21
  3016  0041                     	ds	1
  3017  0042                     GPS_read_speed@checksum:	
  3018  0042                     multiply_fp@res:	
  3019                           ; 1 bytes @ 0x22
  3020                           
  3021  0042                     integer_part@and_a_half:	
  3022                           ; 4 bytes @ 0x22
  3023                           
  3024                           
  3025                           ; 4 bytes @ 0x22
  3026  0042                     	ds	1
  3027  0043                     GPS_read_speed@buffer:	
  3028                           
  3029                           ; 6 bytes @ 0x23
  3030  0043                     	ds	3
  3031  0046                     integer_part@neg:	
  3032                           
  3033                           ; 1 bytes @ 0x26
  3034  0046                     	ds	1
  3035  0047                     integer_part@int_part:	
  3036                           
  3037                           ; 2 bytes @ 0x27
  3038  0047                     	ds	2
  3039  0049                     GPS_read_speed@i_buff2:	
  3040                           
  3041                           ; 1 bytes @ 0x29
  3042  0049                     	ds	1
  3043  004A                     GPS_read_speed@i_buff:	
  3044                           
  3045                           ; 1 bytes @ 0x2A
  3046  004A                     	ds	1
  3047  004B                     GPS_read_speed@m_char:	
  3048                           
  3049                           ; 1 bytes @ 0x2B
  3050  004B                     	ds	1
  3051  004C                     ??_main:	
  3052                           
  3053                           ; 1 bytes @ 0x2C
  3054  004C                     	ds	8
  3055                           
  3056                           	psect	maintext
  3057  0042                     __pmaintext:	
  3058 ;;
  3059 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  3060 ;;
  3061 ;; *************** function _main *****************
  3062 ;; Defined at:
  3063 ;;		line 70 in file "main.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  b               4   15[BANK2 ] long 
  3068 ;;  a               4   11[BANK2 ] long 
  3069 ;;  tmp             4    7[BANK2 ] long 
  3070 ;;  fp_motor        4    0[BANK2 ] long 
  3071 ;;  new_motor       2   19[BANK2 ] unsigned short 
  3072 ;;  speed_int       2    5[BANK2 ] unsigned short 
  3073 ;;  i               1   21[BANK2 ] unsigned char 
  3074 ;;  done            1    4[BANK2 ] unsigned char 
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : B1F/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3084 ;;      Params:         0       0       0       0       0       0
  3085 ;;      Locals:         0       0       0      22       0       0
  3086 ;;      Temps:          0       8       0       0       0       0
  3087 ;;      Totals:         0       8       0      22       0       0
  3088 ;;Total ram usage:       30 bytes
  3089 ;; Hardware stack levels required when called:   10
  3090 ;; This function calls:
  3091 ;;		_EPWM1_LoadDutyValue
  3092 ;;		_GPS_Initialize
  3093 ;;		_GPS_read_speed
  3094 ;;		_LED_set_state
  3095 ;;		_SYSTEM_Initialize
  3096 ;;		_TMR0_SetInterruptHandler
  3097 ;;		_TMR2_StartTimer
  3098 ;;		___wmul
  3099 ;;		_button_init
  3100 ;;		_convert_to_fp
  3101 ;;		_delay_ms
  3102 ;;		_integer_part
  3103 ;;		_load_calibration_from_EEPROM
  3104 ;;		_multiply_fp
  3105 ;;		_perform_calibration
  3106 ;;		_write_calibration_to_EEPROM
  3107 ;; This function is called by:
  3108 ;;		Startup code after reset
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           
  3113                           ;psect for function _main
  3114  0042                     _main:	
  3115                           
  3116                           ;main.c: 73: SYSTEM_Initialize();
  3117                           
  3118                           ;incstack = 0
  3119                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3120  0042  3189  21AA  3180   	fcall	_SYSTEM_Initialize
  3121                           
  3122                           ;main.c: 75: LED_set_state(manual_mode);
  3123  0045  3004               	movlw	4
  3124  0046  318A  22D6  3180   	fcall	_LED_set_state
  3125                           
  3126                           ;main.c: 76: do { LATA2 = 0; } while(0);
  3127  0049  0022               	movlb	2	; select bank2
  3128  004A  110C               	bcf	12,2	;volatile
  3129                           
  3130                           ;main.c: 78: EPWM1_LoadDutyValue(1023);
  3131  004B  30FF               	movlw	255
  3132  004C  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3133  004D  3003               	movlw	3
  3134  004E  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3135  004F  318A  2263  3180   	fcall	_EPWM1_LoadDutyValue
  3136                           
  3137                           ;main.c: 80: TMR2_StartTimer();
  3138  0052  3189  2133  3180   	fcall	_TMR2_StartTimer
  3139                           
  3140                           ;main.c: 81: TMR0_SetInterruptHandler(my10msTimerISR);
  3141  0055  3036               	movlw	low _my10msTimerISR
  3142  0056  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3143  0057  3009               	movlw	high _my10msTimerISR
  3144  0058  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3145  0059  3189  2142  3180   	fcall	_TMR0_SetInterruptHandler
  3146                           
  3147                           ;main.c: 83: (INTCONbits.GIE = 1);
  3148  005C  178B               	bsf	11,7	;volatile
  3149                           
  3150                           ;main.c: 85: (INTCONbits.PEIE = 1);
  3151  005D  170B               	bsf	11,6	;volatile
  3152                           
  3153                           ;main.c: 88: if (!load_calibration_from_EEPROM())
  3154  005E  318D  2592  3180   	fcall	_load_calibration_from_EEPROM
  3155  0061  3A00               	xorlw	0
  3156  0062  1D03               	skipz
  3157  0063  287B               	goto	l4788
  3158                           
  3159                           ;main.c: 89: {
  3160                           ;main.c: 91: LED_set_state(slow_blinking);
  3161  0064  3002               	movlw	2
  3162  0065  318A  22D6  3180   	fcall	_LED_set_state
  3163  0068                     L4:	
  3164                           
  3165                           ;main.c: 92: button_init();
  3166  0068  3189  218F  3180   	fcall	_button_init
  3167  006B                     l4784:	
  3168                           ;main.c: 93: while (m_button.confirmed_state != long_push)
  3169                           
  3170  006B  3002               	movlw	2
  3171  006C  0020               	movlb	0	; select bank0
  3172  006D  0654               	xorwf	_m_button,w	;volatile
  3173  006E  1903               	btfsc	3,2
  3174  006F  2875               	goto	l4786
  3175                           
  3176                           ;main.c: 94: {
  3177                           ;main.c: 95: if (m_button.confirmed_state == short_push)
  3178  0070  0020               	movlb	0	; select bank0
  3179  0071  0354               	decf	_m_button,w	;volatile
  3180  0072  1D03               	btfss	3,2
  3181  0073  286B               	goto	l4784
  3182  0074  2868               	goto	L4
  3183  0075                     l4786:	
  3184                           ;main.c: 96: button_init();
  3185                           
  3186                           
  3187                           ;main.c: 97: }
  3188                           ;main.c: 98: perform_calibration();
  3189  0075  318E  2601  3180   	fcall	_perform_calibration
  3190                           
  3191                           ;main.c: 99: write_calibration_to_EEPROM();
  3192  0078  318C  24BF  3180   	fcall	_write_calibration_to_EEPROM
  3193  007B                     l4788:	
  3194                           
  3195                           ;main.c: 100: }
  3196                           ;main.c: 102: GPS_Initialize();
  3197  007B  318B  23CD  3180   	fcall	_GPS_Initialize
  3198                           
  3199                           ;main.c: 103: speed = 0;
  3200  007E  3000               	movlw	0
  3201  007F  0021               	movlb	1	; select bank1
  3202  0080  00B3               	movwf	(_speed+3)^(0+128)
  3203  0081  3000               	movlw	0
  3204  0082  00B2               	movwf	(_speed+2)^(0+128)
  3205  0083  3000               	movlw	0
  3206  0084  00B1               	movwf	(_speed+1)^(0+128)
  3207  0085  3000               	movlw	0
  3208  0086  00B0               	movwf	_speed^(0+128)
  3209                           
  3210                           ;main.c: 104: motor = 0;
  3211  0087  01B8               	clrf	_motor^(0+128)
  3212  0088  01B9               	clrf	(_motor+1)^(0+128)
  3213  0089                     L1:	
  3214                           
  3215                           ;main.c: 106: button_init();
  3216  0089  3189  218F  3180   	fcall	_button_init
  3217  008C                     l4796:	
  3218                           ;main.c: 107: unsigned short new_motor, speed_int;
  3219                           ;main.c: 108: t_fp a, b, tmp, fp_motor;
  3220                           ;main.c: 109: unsigned char i;
  3221                           ;main.c: 110: bool done;
  3222                           ;main.c: 111: while (1)
  3223                           
  3224                           
  3225                           ;main.c: 112: {
  3226                           ;main.c: 114: if (GPS_read_speed())
  3227  008C  3183  23CE  3180   	fcall	_GPS_read_speed
  3228  008F  3A00               	xorlw	0
  3229  0090  1903               	skipnz
  3230  0091  2BA7               	goto	l4880
  3231                           
  3232                           ;main.c: 115: {
  3233                           ;main.c: 117: if (m_conf.use_mph > 0)
  3234  0092  0021               	movlb	1	; select bank1
  3235  0093  083C               	movf	_m_conf^(0+128),w
  3236  0094  1903               	btfsc	3,2
  3237  0095  28CB               	goto	l4806
  3238                           
  3239                           ;main.c: 118: {
  3240                           ;main.c: 119: speed = multiply_fp(speed, ratio_mph);
  3241  0096  0833               	movf	(_speed+3)^(0+128),w
  3242  0097  0020               	movlb	0	; select bank0
  3243  0098  00AF               	movwf	multiply_fp@n1+3
  3244  0099  0021               	movlb	1	; select bank1
  3245  009A  0832               	movf	(_speed+2)^(0+128),w
  3246  009B  0020               	movlb	0	; select bank0
  3247  009C  00AE               	movwf	multiply_fp@n1+2
  3248  009D  0021               	movlb	1	; select bank1
  3249  009E  0831               	movf	(_speed+1)^(0+128),w
  3250  009F  0020               	movlb	0	; select bank0
  3251  00A0  00AD               	movwf	multiply_fp@n1+1
  3252  00A1  0021               	movlb	1	; select bank1
  3253  00A2  0830               	movf	_speed^(0+128),w
  3254  00A3  0020               	movlb	0	; select bank0
  3255  00A4  00AC               	movwf	multiply_fp@n1
  3256  00A5  30CD               	movlw	low (_ratio_mph| (0+32768))
  3257  00A6  0084               	movwf	4
  3258  00A7  3087               	movlw	high (_ratio_mph| (0+32768))
  3259  00A8  0085               	movwf	5
  3260  00A9  3F00               	moviw [0]fsr0
  3261  00AA  00B0               	movwf	multiply_fp@n2
  3262  00AB  3F01               	moviw [1]fsr0
  3263  00AC  00B1               	movwf	multiply_fp@n2+1
  3264  00AD  3F02               	moviw [2]fsr0
  3265  00AE  00B2               	movwf	multiply_fp@n2+2
  3266  00AF  3F03               	moviw [3]fsr0
  3267  00B0  00B3               	movwf	multiply_fp@n2+3
  3268  00B1  3186  2623  3180   	fcall	_multiply_fp
  3269  00B4  0020               	movlb	0	; select bank0
  3270  00B5  082F               	movf	?_multiply_fp+3,w
  3271  00B6  0021               	movlb	1	; select bank1
  3272  00B7  00B3               	movwf	(_speed+3)^(0+128)
  3273  00B8  0020               	movlb	0	; select bank0
  3274  00B9  082E               	movf	?_multiply_fp+2,w
  3275  00BA  0021               	movlb	1	; select bank1
  3276  00BB  00B2               	movwf	(_speed+2)^(0+128)
  3277  00BC  0020               	movlb	0	; select bank0
  3278  00BD  082D               	movf	?_multiply_fp+1,w
  3279  00BE  0021               	movlb	1	; select bank1
  3280  00BF  00B1               	movwf	(_speed+1)^(0+128)
  3281  00C0  0020               	movlb	0	; select bank0
  3282  00C1  082C               	movf	?_multiply_fp,w
  3283  00C2  0021               	movlb	1	; select bank1
  3284  00C3  00B0               	movwf	_speed^(0+128)
  3285                           
  3286                           ;main.c: 120: if (speed < 0x00010000)
  3287  00C4  1BB3               	btfsc	(_speed+3)^(0+128),7
  3288  00C5  28D4               	goto	l4808
  3289  00C6  0833               	movf	(_speed+3)^(0+128),w
  3290  00C7  1D03               	btfss	3,2
  3291  00C8  28DC               	goto	l4810
  3292  00C9  3001               	movlw	1
  3293  00CA  28D1               	goto	L5
  3294  00CB                     l4806:	
  3295                           ;main.c: 122: }
  3296                           
  3297                           ;main.c: 121: speed = 0;
  3298                           
  3299                           
  3300                           ;main.c: 123: else
  3301                           ;main.c: 124: if (speed < 0x00020000)
  3302  00CB  1BB3               	btfsc	(_speed+3)^(0+128),7
  3303  00CC  28D4               	goto	l4808
  3304  00CD  0833               	movf	(_speed+3)^(0+128),w
  3305  00CE  1D03               	btfss	3,2
  3306  00CF  28DC               	goto	l4810
  3307  00D0  3002               	movlw	2
  3308  00D1                     L5:	
  3309  00D1  0232               	subwf	(_speed+2)^(0+128),w
  3310  00D2  1803               	btfsc	3,0
  3311  00D3  28DC               	goto	l4810
  3312  00D4                     l4808:	
  3313                           
  3314                           ;main.c: 125: speed = 0;
  3315  00D4  3000               	movlw	0
  3316  00D5  00B3               	movwf	(_speed+3)^(0+128)
  3317  00D6  3000               	movlw	0
  3318  00D7  00B2               	movwf	(_speed+2)^(0+128)
  3319  00D8  3000               	movlw	0
  3320  00D9  00B1               	movwf	(_speed+1)^(0+128)
  3321  00DA  3000               	movlw	0
  3322  00DB  00B0               	movwf	_speed^(0+128)
  3323  00DC                     l4810:	
  3324                           ;main.c: 129: do { LATA2 = 1; } while(0);
  3325                           
  3326  00DC  0022               	movlb	2	; select bank2
  3327  00DD  150C               	bsf	12,2	;volatile
  3328                           
  3329                           ;main.c: 130: _delay((unsigned long)((20)*(32000000/4000.0)));
  3330  00DE  30D0               	movlw	208
  3331  00DF  0020               	movlb	0	; select bank0
  3332  00E0  00CD               	movwf	??_main+1
  3333  00E1  30C9               	movlw	201
  3334  00E2  00CC               	movwf	??_main
  3335  00E3                     u5927:	
  3336  00E3  0BCC               	decfsz	??_main,f
  3337  00E4  28E3               	goto	u5927
  3338  00E5  0BCD               	decfsz	??_main+1,f
  3339  00E6  28E3               	goto	u5927
  3340  00E7  3200               	nop2
  3341                           
  3342                           ;main.c: 131: do { LATA2 = 0; } while(0);
  3343  00E8  0022               	movlb	2	; select bank2
  3344  00E9  110C               	bcf	12,2	;volatile
  3345                           
  3346                           ;main.c: 135: speed_int = integer_part(speed);
  3347  00EA  0021               	movlb	1	; select bank1
  3348  00EB  0833               	movf	(_speed+3)^(0+128),w
  3349  00EC  0020               	movlb	0	; select bank0
  3350  00ED  00BC               	movwf	integer_part@n+3
  3351  00EE  0021               	movlb	1	; select bank1
  3352  00EF  0832               	movf	(_speed+2)^(0+128),w
  3353  00F0  0020               	movlb	0	; select bank0
  3354  00F1  00BB               	movwf	integer_part@n+2
  3355  00F2  0021               	movlb	1	; select bank1
  3356  00F3  0831               	movf	(_speed+1)^(0+128),w
  3357  00F4  0020               	movlb	0	; select bank0
  3358  00F5  00BA               	movwf	integer_part@n+1
  3359  00F6  0021               	movlb	1	; select bank1
  3360  00F7  0830               	movf	_speed^(0+128),w
  3361  00F8  0020               	movlb	0	; select bank0
  3362  00F9  00B9               	movwf	integer_part@n
  3363  00FA  318D  2527  3180   	fcall	_integer_part
  3364  00FD  0020               	movlb	0	; select bank0
  3365  00FE  083A               	movf	?_integer_part+1,w
  3366  00FF  0022               	movlb	2	; select bank2
  3367  0100  00A6               	movwf	(main@speed_int+1)^(0+256)
  3368  0101  0020               	movlb	0	; select bank0
  3369  0102  0839               	movf	?_integer_part,w
  3370  0103  0022               	movlb	2	; select bank2
  3371  0104  00A5               	movwf	main@speed_int^(0+256)
  3372                           
  3373                           ;main.c: 136: i = 1;
  3374  0105  01B5               	clrf	main@i^(0+256)
  3375  0106  0AB5               	incf	main@i^(0+256),f
  3376                           
  3377                           ;main.c: 137: done = (speed == 0);
  3378  0107  0021               	movlb	1	; select bank1
  3379  0108  0833               	movf	(_speed+3)^(0+128),w
  3380  0109  0432               	iorwf	(_speed+2)^(0+128),w
  3381  010A  0431               	iorwf	(_speed+1)^(0+128),w
  3382  010B  0430               	iorwf	_speed^(0+128),w
  3383  010C  1D03               	btfss	3,2
  3384  010D  2910               	goto	u5630
  3385  010E  3001               	movlw	1
  3386  010F  2911               	goto	u5640
  3387  0110                     u5630:	
  3388  0110  3000               	movlw	0
  3389  0111                     u5640:	
  3390  0111  0020               	movlb	0	; select bank0
  3391  0112  00CC               	movwf	??_main
  3392  0113  084C               	movf	??_main,w
  3393  0114  0022               	movlb	2	; select bank2
  3394  0115  00A4               	movwf	main@done^(0+256)
  3395                           
  3396                           ;main.c: 138: while ((i<m_conf.nb_steps)&&(!done))
  3397  0116  2B29               	goto	l4852
  3398  0117                     l4820:	
  3399                           
  3400                           ;main.c: 139: {
  3401                           ;main.c: 140: if (speed_int >= 10*(m_conf.nb_steps-i))
  3402  0117  0835               	movf	main@i^(0+256),w
  3403  0118  0020               	movlb	0	; select bank0
  3404  0119  00CC               	movwf	??_main
  3405  011A  01CD               	clrf	??_main+1
  3406  011B  09CC               	comf	??_main,f
  3407  011C  09CD               	comf	??_main+1,f
  3408  011D  0ACC               	incf	??_main,f
  3409  011E  1903               	skipnz
  3410  011F  0ACD               	incf	??_main+1,f
  3411  0120  0021               	movlb	1	; select bank1
  3412  0121  083F               	movf	(_m_conf^(0+128)+3),w
  3413  0122  0020               	movlb	0	; select bank0
  3414  0123  074C               	addwf	??_main,w
  3415  0124  00A0               	movwf	___wmul@multiplier
  3416  0125  084D               	movf	??_main+1,w
  3417  0126  1803               	skipnc
  3418  0127  0A4D               	incf	??_main+1,w
  3419  0128  00A1               	movwf	___wmul@multiplier+1
  3420  0129  300A               	movlw	10
  3421  012A  00A2               	movwf	___wmul@multiplicand
  3422  012B  3000               	movlw	0
  3423  012C  00A3               	movwf	___wmul@multiplicand+1
  3424  012D  318A  2247  3180   	fcall	___wmul
  3425  0130  0020               	movlb	0	; select bank0
  3426  0131  0821               	movf	?___wmul+1,w
  3427  0132  0022               	movlb	2	; select bank2
  3428  0133  0226               	subwf	(main@speed_int+1)^(0+256),w
  3429  0134  1D03               	skipz
  3430  0135  293A               	goto	u5655
  3431  0136  0020               	movlb	0	; select bank0
  3432  0137  0820               	movf	?___wmul,w
  3433  0138  0022               	movlb	2	; select bank2
  3434  0139  0225               	subwf	main@speed_int^(0+256),w
  3435  013A                     u5655:	
  3436  013A  1C03               	skipc
  3437  013B  2B09               	goto	l4844
  3438                           
  3439                           ;main.c: 141: {
  3440                           ;main.c: 142: if (speed_int == 10*(m_conf.nb_steps-i))
  3441  013C  0835               	movf	main@i^(0+256),w
  3442  013D  0020               	movlb	0	; select bank0
  3443  013E  00CC               	movwf	??_main
  3444  013F  01CD               	clrf	??_main+1
  3445  0140  09CC               	comf	??_main,f
  3446  0141  09CD               	comf	??_main+1,f
  3447  0142  0ACC               	incf	??_main,f
  3448  0143  1903               	skipnz
  3449  0144  0ACD               	incf	??_main+1,f
  3450  0145  0021               	movlb	1	; select bank1
  3451  0146  083F               	movf	(_m_conf^(0+128)+3),w
  3452  0147  0020               	movlb	0	; select bank0
  3453  0148  074C               	addwf	??_main,w
  3454  0149  00A0               	movwf	___wmul@multiplier
  3455  014A  084D               	movf	??_main+1,w
  3456  014B  1803               	skipnc
  3457  014C  0A4D               	incf	??_main+1,w
  3458  014D  00A1               	movwf	___wmul@multiplier+1
  3459  014E  300A               	movlw	10
  3460  014F  00A2               	movwf	___wmul@multiplicand
  3461  0150  3000               	movlw	0
  3462  0151  00A3               	movwf	___wmul@multiplicand+1
  3463  0152  318A  2247  3180   	fcall	___wmul
  3464  0155  0022               	movlb	2	; select bank2
  3465  0156  0826               	movf	(main@speed_int+1)^(0+256),w
  3466  0157  0020               	movlb	0	; select bank0
  3467  0158  0621               	xorwf	?___wmul+1,w
  3468  0159  1D03               	skipz
  3469  015A  295F               	goto	u5665
  3470  015B  0022               	movlb	2	; select bank2
  3471  015C  0825               	movf	main@speed_int^(0+256),w
  3472  015D  0020               	movlb	0	; select bank0
  3473  015E  0620               	xorwf	?___wmul,w
  3474  015F                     u5665:	
  3475  015F  1D03               	skipz
  3476  0160  296B               	goto	l4826
  3477                           
  3478                           ;main.c: 143: new_motor = m_conf.ref_pwm[i];
  3479  0161  0022               	movlb	2	; select bank2
  3480  0162  3535               	lslf	main@i^(0+256),w
  3481  0163  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3482  0164  0086               	movwf	6
  3483  0165  0187               	clrf	7
  3484  0166  3F40               	moviw [0]fsr1
  3485  0167  00B3               	movwf	main@new_motor^(0+256)
  3486  0168  3F41               	moviw [1]fsr1
  3487  0169  00B4               	movwf	(main@new_motor+1)^(0+256)
  3488  016A  2B21               	goto	l4848
  3489  016B                     l4826:	
  3490                           
  3491                           ;main.c: 144: else
  3492                           ;main.c: 145: {
  3493                           ;main.c: 146: a = convert_to_fp((m_conf.ref_pwm[i-1]-m_conf.ref_pwm[i]),0);
  3494  016B  0022               	movlb	2	; select bank2
  3495  016C  3535               	lslf	main@i^(0+256),w
  3496  016D  3EFE               	addlw	254
  3497  016E  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3498  016F  0086               	movwf	6
  3499  0170  0187               	clrf	7
  3500  0171  3535               	lslf	main@i^(0+256),w
  3501  0172  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3502  0173  0084               	movwf	4
  3503  0174  0185               	clrf	5
  3504  0175  3F00               	moviw [0]fsr0
  3505  0176  0020               	movlb	0	; select bank0
  3506  0177  00CC               	movwf	??_main
  3507  0178  3F01               	moviw [1]fsr0
  3508  0179  00CD               	movwf	??_main+1
  3509  017A  09CC               	comf	??_main,f
  3510  017B  09CD               	comf	??_main+1,f
  3511  017C  0ACC               	incf	??_main,f
  3512  017D  1903               	skipnz
  3513  017E  0ACD               	incf	??_main+1,f
  3514  017F  3F40               	moviw [0]fsr1
  3515  0180  074C               	addwf	??_main,w
  3516  0181  00A4               	movwf	convert_to_fp@int_part
  3517  0182  3F41               	moviw [1]fsr1
  3518  0183  3D4D               	addwfc	??_main+1,w
  3519  0184  00A5               	movwf	convert_to_fp@int_part+1
  3520  0185  3000               	movlw	0
  3521  0186  00A6               	movwf	convert_to_fp@fract_part
  3522  0187  00A7               	movwf	convert_to_fp@fract_part+1
  3523  0188  3187  271C  3180   	fcall	_convert_to_fp
  3524  018B  0020               	movlb	0	; select bank0
  3525  018C  0827               	movf	?_convert_to_fp+3,w
  3526  018D  0022               	movlb	2	; select bank2
  3527  018E  00AE               	movwf	(main@a+3)^(0+256)
  3528  018F  0020               	movlb	0	; select bank0
  3529  0190  0826               	movf	?_convert_to_fp+2,w
  3530  0191  0022               	movlb	2	; select bank2
  3531  0192  00AD               	movwf	(main@a+2)^(0+256)
  3532  0193  0020               	movlb	0	; select bank0
  3533  0194  0825               	movf	?_convert_to_fp+1,w
  3534  0195  0022               	movlb	2	; select bank2
  3535  0196  00AC               	movwf	(main@a+1)^(0+256)
  3536  0197  0020               	movlb	0	; select bank0
  3537  0198  0824               	movf	?_convert_to_fp,w
  3538  0199  0022               	movlb	2	; select bank2
  3539  019A  00AB               	movwf	main@a^(0+256)
  3540                           
  3541                           ;main.c: 147: tmp = convert_to_fp(0,1000);
  3542  019B  3000               	movlw	0
  3543  019C  0020               	movlb	0	; select bank0
  3544  019D  00A4               	movwf	convert_to_fp@int_part
  3545  019E  00A5               	movwf	convert_to_fp@int_part+1
  3546  019F  30E8               	movlw	232
  3547  01A0  00A6               	movwf	convert_to_fp@fract_part
  3548  01A1  3003               	movlw	3
  3549  01A2  00A7               	movwf	convert_to_fp@fract_part+1
  3550  01A3  3187  271C  3180   	fcall	_convert_to_fp
  3551  01A6  0020               	movlb	0	; select bank0
  3552  01A7  0827               	movf	?_convert_to_fp+3,w
  3553  01A8  0022               	movlb	2	; select bank2
  3554  01A9  00AA               	movwf	(main@tmp+3)^(0+256)
  3555  01AA  0020               	movlb	0	; select bank0
  3556  01AB  0826               	movf	?_convert_to_fp+2,w
  3557  01AC  0022               	movlb	2	; select bank2
  3558  01AD  00A9               	movwf	(main@tmp+2)^(0+256)
  3559  01AE  0020               	movlb	0	; select bank0
  3560  01AF  0825               	movf	?_convert_to_fp+1,w
  3561  01B0  0022               	movlb	2	; select bank2
  3562  01B1  00A8               	movwf	(main@tmp+1)^(0+256)
  3563  01B2  0020               	movlb	0	; select bank0
  3564  01B3  0824               	movf	?_convert_to_fp,w
  3565  01B4  0022               	movlb	2	; select bank2
  3566  01B5  00A7               	movwf	main@tmp^(0+256)
  3567                           
  3568                           ;main.c: 149: a = multiply_fp(a, tmp);
  3569  01B6  082E               	movf	(main@a+3)^(0+256),w
  3570  01B7  0020               	movlb	0	; select bank0
  3571  01B8  00AF               	movwf	multiply_fp@n1+3
  3572  01B9  0022               	movlb	2	; select bank2
  3573  01BA  082D               	movf	(main@a+2)^(0+256),w
  3574  01BB  0020               	movlb	0	; select bank0
  3575  01BC  00AE               	movwf	multiply_fp@n1+2
  3576  01BD  0022               	movlb	2	; select bank2
  3577  01BE  082C               	movf	(main@a+1)^(0+256),w
  3578  01BF  0020               	movlb	0	; select bank0
  3579  01C0  00AD               	movwf	multiply_fp@n1+1
  3580  01C1  0022               	movlb	2	; select bank2
  3581  01C2  082B               	movf	main@a^(0+256),w
  3582  01C3  0020               	movlb	0	; select bank0
  3583  01C4  00AC               	movwf	multiply_fp@n1
  3584  01C5  0022               	movlb	2	; select bank2
  3585  01C6  082A               	movf	(main@tmp+3)^(0+256),w
  3586  01C7  0020               	movlb	0	; select bank0
  3587  01C8  00B3               	movwf	multiply_fp@n2+3
  3588  01C9  0022               	movlb	2	; select bank2
  3589  01CA  0829               	movf	(main@tmp+2)^(0+256),w
  3590  01CB  0020               	movlb	0	; select bank0
  3591  01CC  00B2               	movwf	multiply_fp@n2+2
  3592  01CD  0022               	movlb	2	; select bank2
  3593  01CE  0828               	movf	(main@tmp+1)^(0+256),w
  3594  01CF  0020               	movlb	0	; select bank0
  3595  01D0  00B1               	movwf	multiply_fp@n2+1
  3596  01D1  0022               	movlb	2	; select bank2
  3597  01D2  0827               	movf	main@tmp^(0+256),w
  3598  01D3  0020               	movlb	0	; select bank0
  3599  01D4  00B0               	movwf	multiply_fp@n2
  3600  01D5  3186  2623  3180   	fcall	_multiply_fp
  3601  01D8  0020               	movlb	0	; select bank0
  3602  01D9  082F               	movf	?_multiply_fp+3,w
  3603  01DA  0022               	movlb	2	; select bank2
  3604  01DB  00AE               	movwf	(main@a+3)^(0+256)
  3605  01DC  0020               	movlb	0	; select bank0
  3606  01DD  082E               	movf	?_multiply_fp+2,w
  3607  01DE  0022               	movlb	2	; select bank2
  3608  01DF  00AD               	movwf	(main@a+2)^(0+256)
  3609  01E0  0020               	movlb	0	; select bank0
  3610  01E1  082D               	movf	?_multiply_fp+1,w
  3611  01E2  0022               	movlb	2	; select bank2
  3612  01E3  00AC               	movwf	(main@a+1)^(0+256)
  3613  01E4  0020               	movlb	0	; select bank0
  3614  01E5  082C               	movf	?_multiply_fp,w
  3615  01E6  0022               	movlb	2	; select bank2
  3616  01E7  00AB               	movwf	main@a^(0+256)
  3617                           
  3618                           ;main.c: 150: b = convert_to_fp(10*(m_conf.nb_steps-i), 0);
  3619  01E8  0835               	movf	main@i^(0+256),w
  3620  01E9  0020               	movlb	0	; select bank0
  3621  01EA  00CC               	movwf	??_main
  3622  01EB  01CD               	clrf	??_main+1
  3623  01EC  09CC               	comf	??_main,f
  3624  01ED  09CD               	comf	??_main+1,f
  3625  01EE  0ACC               	incf	??_main,f
  3626  01EF  1903               	skipnz
  3627  01F0  0ACD               	incf	??_main+1,f
  3628  01F1  0021               	movlb	1	; select bank1
  3629  01F2  083F               	movf	(_m_conf^(0+128)+3),w
  3630  01F3  0020               	movlb	0	; select bank0
  3631  01F4  074C               	addwf	??_main,w
  3632  01F5  00A0               	movwf	___wmul@multiplier
  3633  01F6  084D               	movf	??_main+1,w
  3634  01F7  1803               	skipnc
  3635  01F8  0A4D               	incf	??_main+1,w
  3636  01F9  00A1               	movwf	___wmul@multiplier+1
  3637  01FA  300A               	movlw	10
  3638  01FB  00A2               	movwf	___wmul@multiplicand
  3639  01FC  3000               	movlw	0
  3640  01FD  00A3               	movwf	___wmul@multiplicand+1
  3641  01FE  318A  2247  3180   	fcall	___wmul
  3642  0201  0020               	movlb	0	; select bank0
  3643  0202  0821               	movf	?___wmul+1,w
  3644  0203  00A5               	movwf	convert_to_fp@int_part+1
  3645  0204  0820               	movf	?___wmul,w
  3646  0205  00A4               	movwf	convert_to_fp@int_part
  3647  0206  3000               	movlw	0
  3648  0207  00A6               	movwf	convert_to_fp@fract_part
  3649  0208  00A7               	movwf	convert_to_fp@fract_part+1
  3650  0209  3187  271C  3180   	fcall	_convert_to_fp
  3651  020C  0020               	movlb	0	; select bank0
  3652  020D  0827               	movf	?_convert_to_fp+3,w
  3653  020E  0022               	movlb	2	; select bank2
  3654  020F  00B2               	movwf	(main@b+3)^(0+256)
  3655  0210  0020               	movlb	0	; select bank0
  3656  0211  0826               	movf	?_convert_to_fp+2,w
  3657  0212  0022               	movlb	2	; select bank2
  3658  0213  00B1               	movwf	(main@b+2)^(0+256)
  3659  0214  0020               	movlb	0	; select bank0
  3660  0215  0825               	movf	?_convert_to_fp+1,w
  3661  0216  0022               	movlb	2	; select bank2
  3662  0217  00B0               	movwf	(main@b+1)^(0+256)
  3663  0218  0020               	movlb	0	; select bank0
  3664  0219  0824               	movf	?_convert_to_fp,w
  3665  021A  0022               	movlb	2	; select bank2
  3666  021B  00AF               	movwf	main@b^(0+256)
  3667                           
  3668                           ;main.c: 151: b = multiply_fp(a, b);
  3669  021C  082E               	movf	(main@a+3)^(0+256),w
  3670  021D  0020               	movlb	0	; select bank0
  3671  021E  00AF               	movwf	multiply_fp@n1+3
  3672  021F  0022               	movlb	2	; select bank2
  3673  0220  082D               	movf	(main@a+2)^(0+256),w
  3674  0221  0020               	movlb	0	; select bank0
  3675  0222  00AE               	movwf	multiply_fp@n1+2
  3676  0223  0022               	movlb	2	; select bank2
  3677  0224  082C               	movf	(main@a+1)^(0+256),w
  3678  0225  0020               	movlb	0	; select bank0
  3679  0226  00AD               	movwf	multiply_fp@n1+1
  3680  0227  0022               	movlb	2	; select bank2
  3681  0228  082B               	movf	main@a^(0+256),w
  3682  0229  0020               	movlb	0	; select bank0
  3683  022A  00AC               	movwf	multiply_fp@n1
  3684  022B  0022               	movlb	2	; select bank2
  3685  022C  0832               	movf	(main@b+3)^(0+256),w
  3686  022D  0020               	movlb	0	; select bank0
  3687  022E  00B3               	movwf	multiply_fp@n2+3
  3688  022F  0022               	movlb	2	; select bank2
  3689  0230  0831               	movf	(main@b+2)^(0+256),w
  3690  0231  0020               	movlb	0	; select bank0
  3691  0232  00B2               	movwf	multiply_fp@n2+2
  3692  0233  0022               	movlb	2	; select bank2
  3693  0234  0830               	movf	(main@b+1)^(0+256),w
  3694  0235  0020               	movlb	0	; select bank0
  3695  0236  00B1               	movwf	multiply_fp@n2+1
  3696  0237  0022               	movlb	2	; select bank2
  3697  0238  082F               	movf	main@b^(0+256),w
  3698  0239  0020               	movlb	0	; select bank0
  3699  023A  00B0               	movwf	multiply_fp@n2
  3700  023B  3186  2623  3180   	fcall	_multiply_fp
  3701  023E  0020               	movlb	0	; select bank0
  3702  023F  082F               	movf	?_multiply_fp+3,w
  3703  0240  0022               	movlb	2	; select bank2
  3704  0241  00B2               	movwf	(main@b+3)^(0+256)
  3705  0242  0020               	movlb	0	; select bank0
  3706  0243  082E               	movf	?_multiply_fp+2,w
  3707  0244  0022               	movlb	2	; select bank2
  3708  0245  00B1               	movwf	(main@b+2)^(0+256)
  3709  0246  0020               	movlb	0	; select bank0
  3710  0247  082D               	movf	?_multiply_fp+1,w
  3711  0248  0022               	movlb	2	; select bank2
  3712  0249  00B0               	movwf	(main@b+1)^(0+256)
  3713  024A  0020               	movlb	0	; select bank0
  3714  024B  082C               	movf	?_multiply_fp,w
  3715  024C  0022               	movlb	2	; select bank2
  3716  024D  00AF               	movwf	main@b^(0+256)
  3717                           
  3718                           ;main.c: 152: tmp = convert_to_fp(m_conf.ref_pwm[i], 0);
  3719  024E  3535               	lslf	main@i^(0+256),w
  3720  024F  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3721  0250  0086               	movwf	6
  3722  0251  0187               	clrf	7
  3723  0252  3F40               	moviw [0]fsr1
  3724  0253  0020               	movlb	0	; select bank0
  3725  0254  00A4               	movwf	convert_to_fp@int_part
  3726  0255  3F41               	moviw [1]fsr1
  3727  0256  00A5               	movwf	convert_to_fp@int_part+1
  3728  0257  3000               	movlw	0
  3729  0258  00A6               	movwf	convert_to_fp@fract_part
  3730  0259  00A7               	movwf	convert_to_fp@fract_part+1
  3731  025A  3187  271C  3180   	fcall	_convert_to_fp
  3732  025D  0020               	movlb	0	; select bank0
  3733  025E  0827               	movf	?_convert_to_fp+3,w
  3734  025F  0022               	movlb	2	; select bank2
  3735  0260  00AA               	movwf	(main@tmp+3)^(0+256)
  3736  0261  0020               	movlb	0	; select bank0
  3737  0262  0826               	movf	?_convert_to_fp+2,w
  3738  0263  0022               	movlb	2	; select bank2
  3739  0264  00A9               	movwf	(main@tmp+2)^(0+256)
  3740  0265  0020               	movlb	0	; select bank0
  3741  0266  0825               	movf	?_convert_to_fp+1,w
  3742  0267  0022               	movlb	2	; select bank2
  3743  0268  00A8               	movwf	(main@tmp+1)^(0+256)
  3744  0269  0020               	movlb	0	; select bank0
  3745  026A  0824               	movf	?_convert_to_fp,w
  3746  026B  0022               	movlb	2	; select bank2
  3747  026C  00A7               	movwf	main@tmp^(0+256)
  3748                           
  3749                           ;main.c: 153: b = tmp - b;
  3750  026D  0827               	movf	main@tmp^(0+256),w
  3751  026E  0020               	movlb	0	; select bank0
  3752  026F  00CC               	movwf	??_main
  3753  0270  0022               	movlb	2	; select bank2
  3754  0271  0828               	movf	(main@tmp+1)^(0+256),w
  3755  0272  0020               	movlb	0	; select bank0
  3756  0273  00CD               	movwf	??_main+1
  3757  0274  0022               	movlb	2	; select bank2
  3758  0275  0829               	movf	(main@tmp+2)^(0+256),w
  3759  0276  0020               	movlb	0	; select bank0
  3760  0277  00CE               	movwf	??_main+2
  3761  0278  0022               	movlb	2	; select bank2
  3762  0279  082A               	movf	(main@tmp+3)^(0+256),w
  3763  027A  0020               	movlb	0	; select bank0
  3764  027B  00CF               	movwf	??_main+3
  3765  027C  0022               	movlb	2	; select bank2
  3766  027D  092F               	comf	main@b^(0+256),w
  3767  027E  0020               	movlb	0	; select bank0
  3768  027F  00D0               	movwf	??_main+4
  3769  0280  0022               	movlb	2	; select bank2
  3770  0281  0930               	comf	(main@b+1)^(0+256),w
  3771  0282  0020               	movlb	0	; select bank0
  3772  0283  00D1               	movwf	??_main+5
  3773  0284  0022               	movlb	2	; select bank2
  3774  0285  0931               	comf	(main@b+2)^(0+256),w
  3775  0286  0020               	movlb	0	; select bank0
  3776  0287  00D2               	movwf	??_main+6
  3777  0288  0022               	movlb	2	; select bank2
  3778  0289  0932               	comf	(main@b+3)^(0+256),w
  3779  028A  0020               	movlb	0	; select bank0
  3780  028B  00D3               	movwf	??_main+7
  3781  028C  0AD0               	incf	??_main+4,f
  3782  028D  1903               	skipnz
  3783  028E  0AD1               	incf	??_main+5,f
  3784  028F  1903               	skipnz
  3785  0290  0AD2               	incf	??_main+6,f
  3786  0291  1903               	skipnz
  3787  0292  0AD3               	incf	??_main+7,f
  3788  0293  0850               	movf	??_main+4,w
  3789  0294  07CC               	addwf	??_main,f
  3790  0295  0851               	movf	??_main+5,w
  3791  0296  3DCD               	addwfc	??_main+1,f
  3792  0297  0852               	movf	??_main+6,w
  3793  0298  3DCE               	addwfc	??_main+2,f
  3794  0299  0853               	movf	??_main+7,w
  3795  029A  3DCF               	addwfc	??_main+3,f
  3796  029B  084F               	movf	??_main+3,w
  3797  029C  0022               	movlb	2	; select bank2
  3798  029D  00B2               	movwf	(main@b+3)^(0+256)
  3799  029E  0020               	movlb	0	; select bank0
  3800  029F  084E               	movf	??_main+2,w
  3801  02A0  0022               	movlb	2	; select bank2
  3802  02A1  00B1               	movwf	(main@b+2)^(0+256)
  3803  02A2  0020               	movlb	0	; select bank0
  3804  02A3  084D               	movf	??_main+1,w
  3805  02A4  0022               	movlb	2	; select bank2
  3806  02A5  00B0               	movwf	(main@b+1)^(0+256)
  3807  02A6  0020               	movlb	0	; select bank0
  3808  02A7  084C               	movf	??_main,w
  3809  02A8  0022               	movlb	2	; select bank2
  3810  02A9  00AF               	movwf	main@b^(0+256)
  3811                           
  3812                           ;main.c: 155: fp_motor = multiply_fp(a, speed) + b;
  3813  02AA  082E               	movf	(main@a+3)^(0+256),w
  3814  02AB  0020               	movlb	0	; select bank0
  3815  02AC  00AF               	movwf	multiply_fp@n1+3
  3816  02AD  0022               	movlb	2	; select bank2
  3817  02AE  082D               	movf	(main@a+2)^(0+256),w
  3818  02AF  0020               	movlb	0	; select bank0
  3819  02B0  00AE               	movwf	multiply_fp@n1+2
  3820  02B1  0022               	movlb	2	; select bank2
  3821  02B2  082C               	movf	(main@a+1)^(0+256),w
  3822  02B3  0020               	movlb	0	; select bank0
  3823  02B4  00AD               	movwf	multiply_fp@n1+1
  3824  02B5  0022               	movlb	2	; select bank2
  3825  02B6  082B               	movf	main@a^(0+256),w
  3826  02B7  0020               	movlb	0	; select bank0
  3827  02B8  00AC               	movwf	multiply_fp@n1
  3828  02B9  0021               	movlb	1	; select bank1
  3829  02BA  0833               	movf	(_speed+3)^(0+128),w
  3830  02BB  0020               	movlb	0	; select bank0
  3831  02BC  00B3               	movwf	multiply_fp@n2+3
  3832  02BD  0021               	movlb	1	; select bank1
  3833  02BE  0832               	movf	(_speed+2)^(0+128),w
  3834  02BF  0020               	movlb	0	; select bank0
  3835  02C0  00B2               	movwf	multiply_fp@n2+2
  3836  02C1  0021               	movlb	1	; select bank1
  3837  02C2  0831               	movf	(_speed+1)^(0+128),w
  3838  02C3  0020               	movlb	0	; select bank0
  3839  02C4  00B1               	movwf	multiply_fp@n2+1
  3840  02C5  0021               	movlb	1	; select bank1
  3841  02C6  0830               	movf	_speed^(0+128),w
  3842  02C7  0020               	movlb	0	; select bank0
  3843  02C8  00B0               	movwf	multiply_fp@n2
  3844  02C9  3186  2623  3180   	fcall	_multiply_fp
  3845  02CC  0020               	movlb	0	; select bank0
  3846  02CD  082C               	movf	?_multiply_fp,w
  3847  02CE  0022               	movlb	2	; select bank2
  3848  02CF  072F               	addwf	main@b^(0+256),w
  3849  02D0  0020               	movlb	0	; select bank0
  3850  02D1  00CC               	movwf	??_main
  3851  02D2  082D               	movf	?_multiply_fp+1,w
  3852  02D3  0022               	movlb	2	; select bank2
  3853  02D4  3D30               	addwfc	(main@b+1)^(0+256),w
  3854  02D5  0020               	movlb	0	; select bank0
  3855  02D6  00CD               	movwf	??_main+1
  3856  02D7  082E               	movf	?_multiply_fp+2,w
  3857  02D8  0022               	movlb	2	; select bank2
  3858  02D9  3D31               	addwfc	(main@b+2)^(0+256),w
  3859  02DA  0020               	movlb	0	; select bank0
  3860  02DB  00CE               	movwf	??_main+2
  3861  02DC  082F               	movf	?_multiply_fp+3,w
  3862  02DD  0022               	movlb	2	; select bank2
  3863  02DE  3D32               	addwfc	(main@b+3)^(0+256),w
  3864  02DF  0020               	movlb	0	; select bank0
  3865  02E0  00CF               	movwf	??_main+3
  3866  02E1  084F               	movf	??_main+3,w
  3867  02E2  0022               	movlb	2	; select bank2
  3868  02E3  00A3               	movwf	(main@fp_motor+3)^(0+256)
  3869  02E4  0020               	movlb	0	; select bank0
  3870  02E5  084E               	movf	??_main+2,w
  3871  02E6  0022               	movlb	2	; select bank2
  3872  02E7  00A2               	movwf	(main@fp_motor+2)^(0+256)
  3873  02E8  0020               	movlb	0	; select bank0
  3874  02E9  084D               	movf	??_main+1,w
  3875  02EA  0022               	movlb	2	; select bank2
  3876  02EB  00A1               	movwf	(main@fp_motor+1)^(0+256)
  3877  02EC  0020               	movlb	0	; select bank0
  3878  02ED  084C               	movf	??_main,w
  3879  02EE  0022               	movlb	2	; select bank2
  3880  02EF  00A0               	movwf	main@fp_motor^(0+256)
  3881                           
  3882                           ;main.c: 156: new_motor = integer_part(fp_motor);
  3883  02F0  0823               	movf	(main@fp_motor+3)^(0+256),w
  3884  02F1  0020               	movlb	0	; select bank0
  3885  02F2  00BC               	movwf	integer_part@n+3
  3886  02F3  0022               	movlb	2	; select bank2
  3887  02F4  0822               	movf	(main@fp_motor+2)^(0+256),w
  3888  02F5  0020               	movlb	0	; select bank0
  3889  02F6  00BB               	movwf	integer_part@n+2
  3890  02F7  0022               	movlb	2	; select bank2
  3891  02F8  0821               	movf	(main@fp_motor+1)^(0+256),w
  3892  02F9  0020               	movlb	0	; select bank0
  3893  02FA  00BA               	movwf	integer_part@n+1
  3894  02FB  0022               	movlb	2	; select bank2
  3895  02FC  0820               	movf	main@fp_motor^(0+256),w
  3896  02FD  0020               	movlb	0	; select bank0
  3897  02FE  00B9               	movwf	integer_part@n
  3898  02FF  318D  2527  3180   	fcall	_integer_part
  3899  0302  0020               	movlb	0	; select bank0
  3900  0303  083A               	movf	?_integer_part+1,w
  3901  0304  0022               	movlb	2	; select bank2
  3902  0305  00B4               	movwf	(main@new_motor+1)^(0+256)
  3903  0306  0020               	movlb	0	; select bank0
  3904  0307  0839               	movf	?_integer_part,w
  3905  0308  2B1F               	goto	L2
  3906  0309                     l4844:	
  3907                           ;main.c: 159: }
  3908                           
  3909                           ;main.c: 157: }
  3910                           ;main.c: 158: done = 1;
  3911                           
  3912                           
  3913                           ;main.c: 160: else if (i == (m_conf.nb_steps-1))
  3914  0309  0021               	movlb	1	; select bank1
  3915  030A  083F               	movf	(_m_conf^(0+128)+3),w
  3916  030B  3EFF               	addlw	255
  3917  030C  0020               	movlb	0	; select bank0
  3918  030D  00CC               	movwf	??_main
  3919  030E  30FF               	movlw	255
  3920  030F  1803               	skipnc
  3921  0310  3000               	movlw	0
  3922  0311  00CD               	movwf	??_main+1
  3923  0312  0022               	movlb	2	; select bank2
  3924  0313  0835               	movf	main@i^(0+256),w
  3925  0314  0020               	movlb	0	; select bank0
  3926  0315  064C               	xorwf	??_main,w
  3927  0316  044D               	iorwf	??_main+1,w
  3928  0317  1D03               	skipz
  3929  0318  2B23               	goto	l4850
  3930                           
  3931                           ;main.c: 161: {
  3932                           ;main.c: 162: new_motor = m_conf.low_speed_pwm;
  3933  0319  0021               	movlb	1	; select bank1
  3934  031A  0869               	movf	((_m_conf+1)^(0+128)+44),w
  3935  031B  0022               	movlb	2	; select bank2
  3936  031C  00B4               	movwf	(main@new_motor+1)^(0+256)
  3937  031D  0021               	movlb	1	; select bank1
  3938  031E  0868               	movf	(_m_conf^(0+128)+44),w
  3939  031F                     L2:	
  3940  031F  0022               	movlb	2	; select bank2
  3941  0320  00B3               	movwf	main@new_motor^(0+256)
  3942  0321                     l4848:	
  3943                           
  3944                           ;main.c: 163: done = 1;
  3945  0321  01A4               	clrf	main@done^(0+256)
  3946  0322  0AA4               	incf	main@done^(0+256),f
  3947  0323                     l4850:	
  3948                           
  3949                           ;main.c: 164: }
  3950                           ;main.c: 165: i++;
  3951  0323  3001               	movlw	1
  3952  0324  0020               	movlb	0	; select bank0
  3953  0325  00CC               	movwf	??_main
  3954  0326  084C               	movf	??_main,w
  3955  0327  0022               	movlb	2	; select bank2
  3956  0328  07B5               	addwf	main@i^(0+256),f
  3957  0329                     l4852:	
  3958  0329  0021               	movlb	1	; select bank1
  3959  032A  083F               	movf	(_m_conf^(0+128)+3),w
  3960  032B  0022               	movlb	2	; select bank2
  3961  032C  0235               	subwf	main@i^(0+256),w
  3962  032D  1803               	skipnc
  3963  032E  2B32               	goto	l4856
  3964  032F  0824               	movf	main@done^(0+256),w
  3965  0330  1903               	btfsc	3,2
  3966  0331  2917               	goto	l4820
  3967  0332                     l4856:	
  3968                           
  3969                           ;main.c: 166: }
  3970                           ;main.c: 167: if (speed == 0)
  3971  0332  0021               	movlb	1	; select bank1
  3972  0333  0833               	movf	(_speed+3)^(0+128),w
  3973  0334  0432               	iorwf	(_speed+2)^(0+128),w
  3974  0335  0431               	iorwf	(_speed+1)^(0+128),w
  3975  0336  0430               	iorwf	_speed^(0+128),w
  3976  0337  1D03               	skipz
  3977  0338  2B3F               	goto	l4862
  3978                           
  3979                           ;main.c: 168: {
  3980                           ;main.c: 169: motor = 0;
  3981  0339  01B8               	clrf	_motor^(0+128)
  3982  033A  01B9               	clrf	(_motor+1)^(0+128)
  3983                           
  3984                           ;main.c: 170: EPWM1_LoadDutyValue(1023);
  3985  033B  30FF               	movlw	255
  3986  033C  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3987  033D  3003               	movlw	3
  3988  033E  2BA3               	goto	L3
  3989  033F                     l4862:	
  3990                           ;main.c: 171: }
  3991                           
  3992                           
  3993                           ;main.c: 172: else
  3994                           ;main.c: 173: {
  3995                           ;main.c: 175: if (new_motor > m_conf.max_pwm)
  3996  033F  0022               	movlb	2	; select bank2
  3997  0340  0834               	movf	(main@new_motor+1)^(0+256),w
  3998  0341  0021               	movlb	1	; select bank1
  3999  0342  023E               	subwf	((_m_conf+1)^(0+128)+1),w
  4000  0343  1D03               	skipz
  4001  0344  2B49               	goto	u5715
  4002  0345  0022               	movlb	2	; select bank2
  4003  0346  0833               	movf	main@new_motor^(0+256),w
  4004  0347  0021               	movlb	1	; select bank1
  4005  0348  023D               	subwf	(_m_conf^(0+128)+1),w
  4006  0349                     u5715:	
  4007  0349  1803               	skipnc
  4008  034A  2B52               	goto	l4866
  4009                           
  4010                           ;main.c: 176: new_motor = m_conf.max_pwm;
  4011  034B  083E               	movf	((_m_conf+1)^(0+128)+1),w
  4012  034C  0022               	movlb	2	; select bank2
  4013  034D  00B4               	movwf	(main@new_motor+1)^(0+256)
  4014  034E  0021               	movlb	1	; select bank1
  4015  034F  083D               	movf	(_m_conf^(0+128)+1),w
  4016  0350  0022               	movlb	2	; select bank2
  4017  0351  00B3               	movwf	main@new_motor^(0+256)
  4018  0352                     l4866:	
  4019                           
  4020                           ;main.c: 177: if ((new_motor > 0)&&(new_motor < m_conf.ref_pwm[m_conf.nb_steps-1]))
  4021  0352  0022               	movlb	2	; select bank2
  4022  0353  0833               	movf	main@new_motor^(0+256),w
  4023  0354  0434               	iorwf	(main@new_motor+1)^(0+256),w
  4024  0355  1903               	btfsc	3,2
  4025  0356  2B75               	goto	l4872
  4026  0357  0021               	movlb	1	; select bank1
  4027  0358  353F               	lslf	(_m_conf^(0+128)+3),w
  4028  0359  3EFE               	addlw	254
  4029  035A  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4030  035B  0086               	movwf	6
  4031  035C  0187               	clrf	7
  4032  035D  3F40               	moviw [0]fsr1
  4033  035E  0020               	movlb	0	; select bank0
  4034  035F  00CC               	movwf	??_main
  4035  0360  3F41               	moviw [1]fsr1
  4036  0361  00CD               	movwf	??_main+1
  4037  0362  084D               	movf	??_main+1,w
  4038  0363  0022               	movlb	2	; select bank2
  4039  0364  0234               	subwf	(main@new_motor+1)^(0+256),w
  4040  0365  1D03               	skipz
  4041  0366  2B6B               	goto	u5735
  4042  0367  0020               	movlb	0	; select bank0
  4043  0368  084C               	movf	??_main,w
  4044  0369  0022               	movlb	2	; select bank2
  4045  036A  0233               	subwf	main@new_motor^(0+256),w
  4046  036B                     u5735:	
  4047  036B  1803               	skipnc
  4048  036C  2B75               	goto	l4872
  4049                           
  4050                           ;main.c: 178: new_motor = m_conf.low_speed_pwm;
  4051  036D  0021               	movlb	1	; select bank1
  4052  036E  0869               	movf	((_m_conf+1)^(0+128)+44),w
  4053  036F  0022               	movlb	2	; select bank2
  4054  0370  00B4               	movwf	(main@new_motor+1)^(0+256)
  4055  0371  0021               	movlb	1	; select bank1
  4056  0372  0868               	movf	(_m_conf^(0+128)+44),w
  4057  0373  0022               	movlb	2	; select bank2
  4058  0374  00B3               	movwf	main@new_motor^(0+256)
  4059  0375                     l4872:	
  4060                           
  4061                           ;main.c: 180: if (motor == 0)
  4062  0375  0021               	movlb	1	; select bank1
  4063  0376  0838               	movf	_motor^(0+128),w
  4064  0377  0439               	iorwf	(_motor+1)^(0+128),w
  4065  0378  1D03               	btfss	3,2
  4066  0379  2B8C               	goto	l4876
  4067                           
  4068                           ;main.c: 181: {
  4069                           ;main.c: 182: EPWM1_LoadDutyValue(0);
  4070  037A  3000               	movlw	0
  4071  037B  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4072  037C  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4073  037D  318A  2263  3180   	fcall	_EPWM1_LoadDutyValue
  4074                           
  4075                           ;main.c: 183: delay_ms(m_conf.impulse_duration);
  4076  0380  0021               	movlb	1	; select bank1
  4077  0381  086A               	movf	(_m_conf^(0+128)+46),w
  4078  0382  0020               	movlb	0	; select bank0
  4079  0383  00CC               	movwf	??_main
  4080  0384  01CD               	clrf	??_main+1
  4081  0385  084C               	movf	??_main,w
  4082  0386  00F4               	movwf	delay_ms@milliseconds
  4083  0387  084D               	movf	??_main+1,w
  4084  0388  00F5               	movwf	delay_ms@milliseconds+1
  4085  0389  3189  21BC  3180   	fcall	_delay_ms
  4086  038C                     l4876:	
  4087                           
  4088                           ;main.c: 184: }
  4089                           ;main.c: 186: motor = new_motor;
  4090  038C  0022               	movlb	2	; select bank2
  4091  038D  0834               	movf	(main@new_motor+1)^(0+256),w
  4092  038E  0021               	movlb	1	; select bank1
  4093  038F  00B9               	movwf	(_motor+1)^(0+128)
  4094  0390  0022               	movlb	2	; select bank2
  4095  0391  0833               	movf	main@new_motor^(0+256),w
  4096  0392  0021               	movlb	1	; select bank1
  4097  0393  00B8               	movwf	_motor^(0+128)
  4098                           
  4099                           ;main.c: 187: EPWM1_LoadDutyValue(1023 - motor);
  4100  0394  0938               	comf	_motor^(0+128),w
  4101  0395  0020               	movlb	0	; select bank0
  4102  0396  00CC               	movwf	??_main
  4103  0397  0021               	movlb	1	; select bank1
  4104  0398  0939               	comf	(_motor+1)^(0+128),w
  4105  0399  0020               	movlb	0	; select bank0
  4106  039A  00CD               	movwf	??_main+1
  4107  039B  0ACC               	incf	??_main,f
  4108  039C  1903               	skipnz
  4109  039D  0ACD               	incf	??_main+1,f
  4110  039E  084C               	movf	??_main,w
  4111  039F  3EFF               	addlw	255
  4112  03A0  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4113  03A1  3003               	movlw	3
  4114  03A2  3D4D               	addwfc	??_main+1,w
  4115  03A3                     L3:	
  4116  03A3  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4117  03A4  318A  2263  3180   	fcall	_EPWM1_LoadDutyValue
  4118  03A7                     l4880:	
  4119                           
  4120                           ;main.c: 188: }
  4121                           ;main.c: 189: }
  4122                           ;main.c: 194: if (m_button.confirmed_state == long_push)
  4123  03A7  3002               	movlw	2
  4124  03A8  0020               	movlb	0	; select bank0
  4125  03A9  0654               	xorwf	_m_button,w	;volatile
  4126  03AA  1D03               	btfss	3,2
  4127  03AB  2BC9               	goto	l4890
  4128                           
  4129                           ;main.c: 195: {
  4130                           ;main.c: 196: motor = 0;
  4131  03AC  0021               	movlb	1	; select bank1
  4132  03AD  01B8               	clrf	_motor^(0+128)
  4133  03AE  01B9               	clrf	(_motor+1)^(0+128)
  4134                           
  4135                           ;main.c: 197: EPWM1_LoadDutyValue(1023-motor);
  4136  03AF  0938               	comf	_motor^(0+128),w
  4137  03B0  0020               	movlb	0	; select bank0
  4138  03B1  00CC               	movwf	??_main
  4139  03B2  0021               	movlb	1	; select bank1
  4140  03B3  0939               	comf	(_motor+1)^(0+128),w
  4141  03B4  0020               	movlb	0	; select bank0
  4142  03B5  00CD               	movwf	??_main+1
  4143  03B6  0ACC               	incf	??_main,f
  4144  03B7  1903               	skipnz
  4145  03B8  0ACD               	incf	??_main+1,f
  4146  03B9  084C               	movf	??_main,w
  4147  03BA  3EFF               	addlw	255
  4148  03BB  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4149  03BC  3003               	movlw	3
  4150  03BD  3D4D               	addwfc	??_main+1,w
  4151  03BE  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4152  03BF  318A  2263  3180   	fcall	_EPWM1_LoadDutyValue
  4153                           
  4154                           ;main.c: 199: perform_calibration();
  4155  03C2  318E  2601  3180   	fcall	_perform_calibration
  4156                           
  4157                           ;main.c: 200: write_calibration_to_EEPROM();
  4158  03C5  318C  24BF  3180   	fcall	_write_calibration_to_EEPROM
  4159                           
  4160                           ;main.c: 201: }
  4161  03C8  288C               	goto	l4796
  4162  03C9                     l4890:	
  4163                           
  4164                           ;main.c: 202: else if (m_button.confirmed_state == short_push)
  4165  03C9  0020               	movlb	0	; select bank0
  4166  03CA  0354               	decf	_m_button,w	;volatile
  4167  03CB  1D03               	btfss	3,2
  4168  03CC  288C               	goto	l4796
  4169  03CD  2889               	goto	L1
  4170  03CE                     __end_of_main:	
  4171                           ;main.c: 203: button_init();
  4172                           
  4173                           
  4174                           	psect	text1
  4175  0CBF                     __ptext1:	
  4176 ;; *************** function _write_calibration_to_EEPROM *****************
  4177 ;; Defined at:
  4178 ;;		line 42 in file "calibration.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;		None
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  i               1   19[BANK0 ] unsigned char 
  4183 ;;  p               1   18[BANK0 ] PTR unsigned char 
  4184 ;;		 -> m_crc(2), m_conf(47), 
  4185 ;;  addr            1   17[BANK0 ] unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4195 ;;      Params:         0       0       0       0       0       0
  4196 ;;      Locals:         0       3       0       0       0       0
  4197 ;;      Temps:          1       0       0       0       0       0
  4198 ;;      Totals:         1       3       0       0       0       0
  4199 ;;Total ram usage:        4 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    7
  4202 ;; This function calls:
  4203 ;;		_DATAEE_WriteByte
  4204 ;;		_crc_update
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _write_calibration_to_EEPROM
  4212  0CBF                     _write_calibration_to_EEPROM:	
  4213                           
  4214                           ;calibration.c: 45: unsigned char addr = 0x00;
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _write_calibration_to_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4218  0CBF  0020               	movlb	0	; select bank0
  4219  0CC0  01B1               	clrf	write_calibration_to_EEPROM@addr
  4220                           
  4221                           ;calibration.c: 46: m_crc = 0x00;
  4222  0CC1  0021               	movlb	1	; select bank1
  4223  0CC2  01EB               	clrf	_m_crc^(0+128)
  4224  0CC3  01EC               	clrf	(_m_crc+1)^(0+128)
  4225                           
  4226                           ;calibration.c: 47: char i,*p;
  4227                           ;calibration.c: 48: p=(char *)&m_conf;
  4228  0CC4  30BC               	movlw	(low (_m_conf| 0))& (0+255)
  4229  0CC5  00F5               	movwf	??_write_calibration_to_EEPROM
  4230  0CC6  0875               	movf	??_write_calibration_to_EEPROM,w
  4231  0CC7  0020               	movlb	0	; select bank0
  4232  0CC8  00B2               	movwf	write_calibration_to_EEPROM@p
  4233                           
  4234                           ;calibration.c: 49: for(i=0; i<sizeof(m_conf); i++) {
  4235  0CC9  01B3               	clrf	write_calibration_to_EEPROM@i
  4236  0CCA  302F               	movlw	47
  4237  0CCB  0233               	subwf	write_calibration_to_EEPROM@i,w
  4238  0CCC  1803               	btfsc	3,0
  4239  0CCD  2D05               	goto	l4364
  4240  0CCE                     l4356:	
  4241                           
  4242                           ;calibration.c: 50: DATAEE_WriteByte(addr++, *p);
  4243  0CCE  0832               	movf	write_calibration_to_EEPROM@p,w
  4244  0CCF  0086               	movwf	6
  4245  0CD0  0187               	clrf	7
  4246  0CD1  0801               	movf	1,w
  4247  0CD2  00F5               	movwf	??_write_calibration_to_EEPROM
  4248  0CD3  0875               	movf	??_write_calibration_to_EEPROM,w
  4249  0CD4  00F4               	movwf	DATAEE_WriteByte@bData
  4250  0CD5  0831               	movf	write_calibration_to_EEPROM@addr,w
  4251  0CD6  318A  22F3  318C   	fcall	_DATAEE_WriteByte
  4252  0CD9  3001               	movlw	1
  4253  0CDA  00F5               	movwf	??_write_calibration_to_EEPROM
  4254  0CDB  0875               	movf	??_write_calibration_to_EEPROM,w
  4255  0CDC  0020               	movlb	0	; select bank0
  4256  0CDD  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  4257                           
  4258                           ;calibration.c: 51: m_crc = crc_update(m_crc, *p++);
  4259  0CDE  0021               	movlb	1	; select bank1
  4260  0CDF  086C               	movf	(_m_crc+1)^(0+128),w
  4261  0CE0  0020               	movlb	0	; select bank0
  4262  0CE1  00A1               	movwf	crc_update@old_crc+1
  4263  0CE2  0021               	movlb	1	; select bank1
  4264  0CE3  086B               	movf	_m_crc^(0+128),w
  4265  0CE4  0020               	movlb	0	; select bank0
  4266  0CE5  00A0               	movwf	crc_update@old_crc
  4267  0CE6  0832               	movf	write_calibration_to_EEPROM@p,w
  4268  0CE7  0086               	movwf	6
  4269  0CE8  0187               	clrf	7
  4270  0CE9  0801               	movf	1,w
  4271  0CEA  00F5               	movwf	??_write_calibration_to_EEPROM
  4272  0CEB  0875               	movf	??_write_calibration_to_EEPROM,w
  4273  0CEC  00A2               	movwf	crc_update@data
  4274  0CED  318C  2412  318C   	fcall	_crc_update
  4275  0CF0  0020               	movlb	0	; select bank0
  4276  0CF1  0821               	movf	?_crc_update+1,w
  4277  0CF2  0021               	movlb	1	; select bank1
  4278  0CF3  00EC               	movwf	(_m_crc+1)^(0+128)
  4279  0CF4  0020               	movlb	0	; select bank0
  4280  0CF5  0820               	movf	?_crc_update,w
  4281  0CF6  0021               	movlb	1	; select bank1
  4282  0CF7  00EB               	movwf	_m_crc^(0+128)
  4283  0CF8  3001               	movlw	1
  4284  0CF9  00F5               	movwf	??_write_calibration_to_EEPROM
  4285  0CFA  0875               	movf	??_write_calibration_to_EEPROM,w
  4286  0CFB  0020               	movlb	0	; select bank0
  4287  0CFC  07B2               	addwf	write_calibration_to_EEPROM@p,f
  4288  0CFD  3001               	movlw	1
  4289  0CFE  00F5               	movwf	??_write_calibration_to_EEPROM
  4290  0CFF  0875               	movf	??_write_calibration_to_EEPROM,w
  4291  0D00  07B3               	addwf	write_calibration_to_EEPROM@i,f
  4292  0D01  302F               	movlw	47
  4293  0D02  0233               	subwf	write_calibration_to_EEPROM@i,w
  4294  0D03  1C03               	skipc
  4295  0D04  2CCE               	goto	l4356
  4296  0D05                     l4364:	
  4297                           
  4298                           ;calibration.c: 52: }
  4299                           ;calibration.c: 53: p=(char *)&m_crc;
  4300  0D05  30EB               	movlw	(low (_m_crc| 0))& (0+255)
  4301  0D06  00F5               	movwf	??_write_calibration_to_EEPROM
  4302  0D07  0875               	movf	??_write_calibration_to_EEPROM,w
  4303  0D08  00B2               	movwf	write_calibration_to_EEPROM@p
  4304                           
  4305                           ;calibration.c: 54: for(i=0; i<sizeof(m_crc); i++)
  4306  0D09  01B3               	clrf	write_calibration_to_EEPROM@i
  4307  0D0A                     L6:	
  4308  0D0A  3002               	movlw	2
  4309  0D0B  0233               	subwf	write_calibration_to_EEPROM@i,w
  4310  0D0C  1803               	btfsc	3,0
  4311  0D0D  0008               	return
  4312                           
  4313                           ;calibration.c: 55: DATAEE_WriteByte(addr++, *p++);
  4314  0D0E  0832               	movf	write_calibration_to_EEPROM@p,w
  4315  0D0F  0086               	movwf	6
  4316  0D10  0187               	clrf	7
  4317  0D11  0801               	movf	1,w
  4318  0D12  00F5               	movwf	??_write_calibration_to_EEPROM
  4319  0D13  0875               	movf	??_write_calibration_to_EEPROM,w
  4320  0D14  00F4               	movwf	DATAEE_WriteByte@bData
  4321  0D15  0831               	movf	write_calibration_to_EEPROM@addr,w
  4322  0D16  318A  22F3  318C   	fcall	_DATAEE_WriteByte
  4323  0D19  3001               	movlw	1
  4324  0D1A  00F5               	movwf	??_write_calibration_to_EEPROM
  4325  0D1B  0875               	movf	??_write_calibration_to_EEPROM,w
  4326  0D1C  0020               	movlb	0	; select bank0
  4327  0D1D  07B2               	addwf	write_calibration_to_EEPROM@p,f
  4328  0D1E  3001               	movlw	1
  4329  0D1F  00F5               	movwf	??_write_calibration_to_EEPROM
  4330  0D20  0875               	movf	??_write_calibration_to_EEPROM,w
  4331  0D21  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  4332  0D22  3001               	movlw	1
  4333  0D23  00F5               	movwf	??_write_calibration_to_EEPROM
  4334  0D24  0875               	movf	??_write_calibration_to_EEPROM,w
  4335  0D25  07B3               	addwf	write_calibration_to_EEPROM@i,f
  4336  0D26  2D0A               	goto	L6
  4337  0D27                     __end_of_write_calibration_to_EEPROM:	
  4338                           
  4339                           	psect	text2
  4340  0AF3                     __ptext2:	
  4341 ;; *************** function _DATAEE_WriteByte *****************
  4342 ;; Defined at:
  4343 ;;		line 180 in file "mcc_generated_files/memory.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  bAdd            1    wreg     unsigned char 
  4346 ;;  bData           1    4[COMMON] unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  bAdd            1    0[BANK0 ] unsigned char 
  4349 ;;  GIEBitValue     1    1[BANK0 ] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      void 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4359 ;;      Params:         1       0       0       0       0       0
  4360 ;;      Locals:         0       2       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0
  4362 ;;      Totals:         1       2       0       0       0       0
  4363 ;;Total ram usage:        3 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    6
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_write_calibration_to_EEPROM
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _DATAEE_WriteByte
  4375  0AF3                     _DATAEE_WriteByte:	
  4376                           
  4377                           ;incstack = 0
  4378                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  4379                           ;DATAEE_WriteByte@bAdd stored from wreg
  4380  0AF3  0020               	movlb	0	; select bank0
  4381  0AF4  00A0               	movwf	DATAEE_WriteByte@bAdd
  4382                           
  4383                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  4384  0AF5  01A1               	clrf	DATAEE_WriteByte@GIEBitValue
  4385                           
  4386                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  4387  0AF6  0820               	movf	DATAEE_WriteByte@bAdd,w
  4388  0AF7  0023               	movlb	3	; select bank3
  4389  0AF8  0091               	movwf	17	;volatile
  4390                           
  4391                           ;memory.c: 185: EEDATL = bData;
  4392  0AF9  0874               	movf	DATAEE_WriteByte@bData,w
  4393  0AFA  0093               	movwf	19	;volatile
  4394                           
  4395                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  4396  0AFB  1395               	bcf	21,7	;volsfr
  4397                           
  4398                           ;memory.c: 187: EECON1bits.CFGS = 0;
  4399  0AFC  1315               	bcf	21,6	;volsfr
  4400                           
  4401                           ;memory.c: 188: EECON1bits.WREN = 1;
  4402  0AFD  1515               	bsf	21,2	;volsfr
  4403                           
  4404                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  4405  0AFE  3000               	movlw	0
  4406  0AFF  1B8B               	btfsc	11,7	;volatile
  4407  0B00  3001               	movlw	1
  4408  0B01  0020               	movlb	0	; select bank0
  4409  0B02  00A1               	movwf	DATAEE_WriteByte@GIEBitValue
  4410                           
  4411                           ;memory.c: 191: INTCONbits.GIE = 0;
  4412  0B03  138B               	bcf	11,7	;volatile
  4413                           
  4414                           ;memory.c: 192: EECON2 = 0x55;
  4415  0B04  3055               	movlw	85
  4416  0B05  0023               	movlb	3	; select bank3
  4417  0B06  0096               	movwf	22	;volsfr
  4418                           
  4419                           ;memory.c: 193: EECON2 = 0xAA;
  4420  0B07  30AA               	movlw	170
  4421  0B08  0096               	movwf	22	;volsfr
  4422                           
  4423                           ;memory.c: 194: EECON1bits.WR = 1;
  4424  0B09  1495               	bsf	21,1	;volsfr
  4425  0B0A                     l286:	
  4426                           ;memory.c: 197: {
  4427                           
  4428                           ;memory.c: 196: while (EECON1bits.WR)
  4429                           
  4430  0B0A  1895               	btfsc	21,1	;volsfr
  4431  0B0B  2B0A               	goto	l286
  4432                           
  4433                           ;memory.c: 198: }
  4434                           ;memory.c: 200: EECON1bits.WREN = 0;
  4435  0B0C  1115               	bcf	21,2	;volsfr
  4436                           
  4437                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  4438  0B0D  0020               	movlb	0	; select bank0
  4439  0B0E  0C21               	rrf	DATAEE_WriteByte@GIEBitValue,w
  4440  0B0F  1C03               	skipc
  4441  0B10  138B               	bcf	11,7	;volatile
  4442  0B11  1803               	skipnc
  4443  0B12  178B               	bsf	11,7	;volatile
  4444  0B13  0008               	return
  4445  0B14                     __end_of_DATAEE_WriteByte:	
  4446                           
  4447                           	psect	text3
  4448  0E01                     __ptext3:	
  4449 ;; *************** function _perform_calibration *****************
  4450 ;; Defined at:
  4451 ;;		line 58 in file "calibration.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  __delay_tmp     1   14[BANK0 ] unsigned char 
  4456 ;;  __delay_tmp     1   12[BANK0 ] unsigned char 
  4457 ;;  __delay_tmp     1   13[BANK0 ] unsigned char 
  4458 ;;  __delay_tmp     1   15[BANK0 ] unsigned char 
  4459 ;;  i               1   16[BANK0 ] unsigned char 
  4460 ;;  replay          1    9[BANK0 ] unsigned char 
  4461 ;;  __delay_tmp     1   11[BANK0 ] unsigned char 
  4462 ;;  __delay_tmp     1   10[BANK0 ] unsigned char 
  4463 ;;  m_motor         2   17[BANK0 ] unsigned short 
  4464 ;;  done            1    8[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4474 ;;      Params:         0       0       0       0       0       0
  4475 ;;      Locals:         0      11       0       0       0       0
  4476 ;;      Temps:          0       3       0       0       0       0
  4477 ;;      Totals:         0      14       0       0       0       0
  4478 ;;Total ram usage:       14 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    8
  4481 ;; This function calls:
  4482 ;;		_EPWM1_LoadDutyValue
  4483 ;;		_LED_set_state
  4484 ;;		_button_init
  4485 ;;		_get_button_state
  4486 ;;		_multiple_fast_blink
  4487 ;; This function is called by:
  4488 ;;		_main
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function _perform_calibration
  4494  0E01                     _perform_calibration:	
  4495                           
  4496                           ;calibration.c: 60: LED_set_state(manual_mode);
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _perform_calibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4500  0E01  3004               	movlw	4
  4501  0E02  318A  22D6  318E   	fcall	_LED_set_state
  4502                           
  4503                           ;calibration.c: 61: multiple_fast_blink(2);
  4504  0E05  3002               	movlw	2
  4505  0E06  318B  238D  318E   	fcall	_multiple_fast_blink
  4506                           
  4507                           ;calibration.c: 62: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_d
      +                          elay((unsigned long)((100)*(32000000/4000.0)));};
  4508  0E09  0020               	movlb	0	; select bank0
  4509  0E0A  01AA               	clrf	perform_calibration@__delay_tmp
  4510  0E0B  300A               	movlw	10
  4511  0E0C  022A               	subwf	perform_calibration@__delay_tmp,w
  4512  0E0D  1803               	btfsc	3,0
  4513  0E0E  2E24               	goto	l4184
  4514  0E0F                     l4178:	
  4515  0E0F  3005               	movlw	5
  4516  0E10  00A7               	movwf	??_perform_calibration+2
  4517  0E11  300F               	movlw	15
  4518  0E12  00A6               	movwf	??_perform_calibration+1
  4519  0E13  30F4               	movlw	244
  4520  0E14  00A5               	movwf	??_perform_calibration
  4521  0E15                     u5937:	
  4522  0E15  0BA5               	decfsz	??_perform_calibration,f
  4523  0E16  2E15               	goto	u5937
  4524  0E17  0BA6               	decfsz	??_perform_calibration+1,f
  4525  0E18  2E15               	goto	u5937
  4526  0E19  0BA7               	decfsz	??_perform_calibration+2,f
  4527  0E1A  2E15               	goto	u5937
  4528  0E1B  3001               	movlw	1
  4529  0E1C  0020               	movlb	0	; select bank0
  4530  0E1D  00A5               	movwf	??_perform_calibration
  4531  0E1E  0825               	movf	??_perform_calibration,w
  4532  0E1F  07AA               	addwf	perform_calibration@__delay_tmp,f
  4533  0E20  300A               	movlw	10
  4534  0E21  022A               	subwf	perform_calibration@__delay_tmp,w
  4535  0E22  1C03               	skipc
  4536  0E23  2E0F               	goto	l4178
  4537  0E24                     l4184:	
  4538                           
  4539                           ;calibration.c: 63: button_init();
  4540  0E24  3189  218F  318E   	fcall	_button_init
  4541                           
  4542                           ;calibration.c: 66: LED_set_state(always_on);
  4543  0E27  3000               	movlw	0
  4544  0E28  318A  22D6  318E   	fcall	_LED_set_state
  4545                           
  4546                           ;calibration.c: 67: m_conf.use_mph = 0;
  4547  0E2B  0021               	movlb	1	; select bank1
  4548  0E2C  01BC               	clrf	_m_conf^(0+128)
  4549  0E2D                     l4196:	
  4550                           ;calibration.c: 68: while (m_button.confirmed_state != long_push)
  4551                           
  4552  0E2D  3002               	movlw	2
  4553  0E2E  0020               	movlb	0	; select bank0
  4554  0E2F  0654               	xorwf	_m_button,w	;volatile
  4555  0E30  1903               	btfsc	3,2
  4556  0E31  2E4F               	goto	l4198
  4557                           
  4558                           ;calibration.c: 69: {
  4559                           ;calibration.c: 70: if (m_button.confirmed_state == short_push)
  4560  0E32  0020               	movlb	0	; select bank0
  4561  0E33  0354               	decf	_m_button,w	;volatile
  4562  0E34  1D03               	btfss	3,2
  4563  0E35  2E2D               	goto	l4196
  4564                           
  4565                           ;calibration.c: 71: {
  4566                           ;calibration.c: 72: m_conf.use_mph = !m_conf.use_mph;
  4567  0E36  0021               	movlb	1	; select bank1
  4568  0E37  083C               	movf	_m_conf^(0+128),w
  4569  0E38  1D03               	btfss	3,2
  4570  0E39  2E3C               	goto	u4580
  4571  0E3A  3001               	movlw	1
  4572  0E3B  2E3D               	goto	u4590
  4573  0E3C                     u4580:	
  4574  0E3C  3000               	movlw	0
  4575  0E3D                     u4590:	
  4576  0E3D  0020               	movlb	0	; select bank0
  4577  0E3E  00A5               	movwf	??_perform_calibration
  4578  0E3F  0825               	movf	??_perform_calibration,w
  4579  0E40  0021               	movlb	1	; select bank1
  4580  0E41  00BC               	movwf	_m_conf^(0+128)
  4581                           
  4582                           ;calibration.c: 73: if (m_conf.use_mph)
  4583  0E42  083C               	movf	_m_conf^(0+128),w
  4584  0E43  1903               	btfsc	3,2
  4585  0E44  2E47               	goto	l4194
  4586                           
  4587                           ;calibration.c: 74: LED_set_state(slow_blinking);
  4588  0E45  3002               	movlw	2
  4589  0E46  2E48               	goto	L7
  4590  0E47                     l4194:	
  4591                           
  4592                           ;calibration.c: 75: else
  4593                           ;calibration.c: 76: LED_set_state(fast_blinking);
  4594  0E47  3003               	movlw	3
  4595  0E48                     L7:	
  4596  0E48  318A  22D6  318E   	fcall	_LED_set_state
  4597                           
  4598                           ;calibration.c: 77: button_init();
  4599  0E4B  3189  218F  318E   	fcall	_button_init
  4600  0E4E  2E2D               	goto	l4196
  4601  0E4F                     l4198:	
  4602                           
  4603                           ;calibration.c: 78: }
  4604                           ;calibration.c: 79: }
  4605                           ;calibration.c: 80: multiple_fast_blink(2);
  4606  0E4F  3002               	movlw	2
  4607  0E50  318B  238D  318E   	fcall	_multiple_fast_blink
  4608                           
  4609                           ;calibration.c: 81: button_init();
  4610  0E53  3189  218F  318E   	fcall	_button_init
  4611                           
  4612                           ;calibration.c: 84: unsigned short m_motor = 200;
  4613  0E56  30C8               	movlw	200
  4614  0E57  0020               	movlb	0	; select bank0
  4615  0E58  00B1               	movwf	perform_calibration@m_motor
  4616  0E59  3000               	movlw	0
  4617  0E5A  00B2               	movwf	perform_calibration@m_motor+1
  4618                           
  4619                           ;calibration.c: 86: EPWM1_LoadDutyValue(0);
  4620  0E5B  3000               	movlw	0
  4621  0E5C  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4622  0E5D  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4623  0E5E  318A  2263  318E   	fcall	_EPWM1_LoadDutyValue
  4624                           
  4625                           ;calibration.c: 87: _delay((unsigned long)((30)*(32000000/4000.0)));
  4626  0E61  3002               	movlw	2
  4627  0E62  0020               	movlb	0	; select bank0
  4628  0E63  00A7               	movwf	??_perform_calibration+2
  4629  0E64  3038               	movlw	56
  4630  0E65  00A6               	movwf	??_perform_calibration+1
  4631  0E66  30AD               	movlw	173
  4632  0E67  00A5               	movwf	??_perform_calibration
  4633  0E68                     u5947:	
  4634  0E68  0BA5               	decfsz	??_perform_calibration,f
  4635  0E69  2E68               	goto	u5947
  4636  0E6A  0BA6               	decfsz	??_perform_calibration+1,f
  4637  0E6B  2E68               	goto	u5947
  4638  0E6C  0BA7               	decfsz	??_perform_calibration+2,f
  4639  0E6D  2E68               	goto	u5947
  4640  0E6E                     l4204:	
  4641                           ;calibration.c: 90: while (1)
  4642                           
  4643                           
  4644                           ;calibration.c: 91: {
  4645                           ;calibration.c: 92: if (get_button_state() && (m_motor >= 300))
  4646  0E6E  3189  2183  318E   	fcall	_get_button_state
  4647  0E71  3A00               	xorlw	0
  4648  0E72  1903               	skipnz
  4649  0E73  2E7C               	goto	l4210
  4650  0E74  3001               	movlw	1
  4651  0E75  0020               	movlb	0	; select bank0
  4652  0E76  0232               	subwf	perform_calibration@m_motor+1,w
  4653  0E77  302C               	movlw	44
  4654  0E78  1903               	skipnz
  4655  0E79  0231               	subwf	perform_calibration@m_motor,w
  4656  0E7A  1803               	btfsc	3,0
  4657  0E7B  2EA9               	goto	l4220
  4658  0E7C                     l4210:	
  4659                           ;calibration.c: 93: break;
  4660                           
  4661                           
  4662                           ;calibration.c: 94: m_motor++;
  4663  0E7C  3001               	movlw	1
  4664  0E7D  0020               	movlb	0	; select bank0
  4665  0E7E  07B1               	addwf	perform_calibration@m_motor,f
  4666  0E7F  3000               	movlw	0
  4667  0E80  3DB2               	addwfc	perform_calibration@m_motor+1,f
  4668                           
  4669                           ;calibration.c: 95: if (m_motor == 1023)
  4670  0E81  0A31               	incf	perform_calibration@m_motor,w
  4671  0E82  3003               	movlw	3
  4672  0E83  1903               	skipnz
  4673  0E84  0632               	xorwf	perform_calibration@m_motor+1,w
  4674  0E85  1D03               	btfss	3,2
  4675  0E86  2E8B               	goto	l4216
  4676                           
  4677                           ;calibration.c: 96: m_motor = 300;
  4678  0E87  302C               	movlw	44
  4679  0E88  00B1               	movwf	perform_calibration@m_motor
  4680  0E89  3001               	movlw	1
  4681  0E8A  00B2               	movwf	perform_calibration@m_motor+1
  4682  0E8B                     l4216:	
  4683                           
  4684                           ;calibration.c: 97: EPWM1_LoadDutyValue(1023-m_motor);
  4685  0E8B  0931               	comf	perform_calibration@m_motor,w
  4686  0E8C  00A5               	movwf	??_perform_calibration
  4687  0E8D  0932               	comf	perform_calibration@m_motor+1,w
  4688  0E8E  00A6               	movwf	??_perform_calibration+1
  4689  0E8F  0AA5               	incf	??_perform_calibration,f
  4690  0E90  1903               	skipnz
  4691  0E91  0AA6               	incf	??_perform_calibration+1,f
  4692  0E92  0825               	movf	??_perform_calibration,w
  4693  0E93  3EFF               	addlw	255
  4694  0E94  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4695  0E95  3003               	movlw	3
  4696  0E96  3D26               	addwfc	??_perform_calibration+1,w
  4697  0E97  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4698  0E98  318A  2263  318E   	fcall	_EPWM1_LoadDutyValue
  4699                           
  4700                           ;calibration.c: 98: _delay((unsigned long)((30)*(32000000/4000.0)));
  4701  0E9B  3002               	movlw	2
  4702  0E9C  0020               	movlb	0	; select bank0
  4703  0E9D  00A7               	movwf	??_perform_calibration+2
  4704  0E9E  3038               	movlw	56
  4705  0E9F  00A6               	movwf	??_perform_calibration+1
  4706  0EA0  30AD               	movlw	173
  4707  0EA1  00A5               	movwf	??_perform_calibration
  4708  0EA2                     u5957:	
  4709  0EA2  0BA5               	decfsz	??_perform_calibration,f
  4710  0EA3  2EA2               	goto	u5957
  4711  0EA4  0BA6               	decfsz	??_perform_calibration+1,f
  4712  0EA5  2EA2               	goto	u5957
  4713  0EA6  0BA7               	decfsz	??_perform_calibration+2,f
  4714  0EA7  2EA2               	goto	u5957
  4715  0EA8  2E6E               	goto	l4204
  4716  0EA9                     l4220:	
  4717                           
  4718                           ;calibration.c: 99: }
  4719                           ;calibration.c: 100: m_conf.max_pwm = m_motor;
  4720  0EA9  0020               	movlb	0	; select bank0
  4721  0EAA  0832               	movf	perform_calibration@m_motor+1,w
  4722  0EAB  0021               	movlb	1	; select bank1
  4723  0EAC  00BE               	movwf	((_m_conf+1)^(0+128)+1)
  4724  0EAD  0020               	movlb	0	; select bank0
  4725  0EAE  0831               	movf	perform_calibration@m_motor,w
  4726  0EAF  0021               	movlb	1	; select bank1
  4727  0EB0  00BD               	movwf	(_m_conf^(0+128)+1)
  4728                           
  4729                           ;calibration.c: 101: multiple_fast_blink(2);
  4730  0EB1  3002               	movlw	2
  4731  0EB2  318B  238D  318E   	fcall	_multiple_fast_blink
  4732                           
  4733                           ;calibration.c: 102: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4734  0EB5  0020               	movlb	0	; select bank0
  4735  0EB6  01AB               	clrf	perform_calibration@__delay_tmp_906
  4736  0EB7  300A               	movlw	10
  4737  0EB8  022B               	subwf	perform_calibration@__delay_tmp_906,w
  4738  0EB9  1803               	btfsc	3,0
  4739  0EBA  2ED0               	goto	l4236
  4740  0EBB                     l4230:	
  4741  0EBB  3005               	movlw	5
  4742  0EBC  00A7               	movwf	??_perform_calibration+2
  4743  0EBD  300F               	movlw	15
  4744  0EBE  00A6               	movwf	??_perform_calibration+1
  4745  0EBF  30F4               	movlw	244
  4746  0EC0  00A5               	movwf	??_perform_calibration
  4747  0EC1                     u5967:	
  4748  0EC1  0BA5               	decfsz	??_perform_calibration,f
  4749  0EC2  2EC1               	goto	u5967
  4750  0EC3  0BA6               	decfsz	??_perform_calibration+1,f
  4751  0EC4  2EC1               	goto	u5967
  4752  0EC5  0BA7               	decfsz	??_perform_calibration+2,f
  4753  0EC6  2EC1               	goto	u5967
  4754  0EC7  3001               	movlw	1
  4755  0EC8  0020               	movlb	0	; select bank0
  4756  0EC9  00A5               	movwf	??_perform_calibration
  4757  0ECA  0825               	movf	??_perform_calibration,w
  4758  0ECB  07AB               	addwf	perform_calibration@__delay_tmp_906,f
  4759  0ECC  300A               	movlw	10
  4760  0ECD  022B               	subwf	perform_calibration@__delay_tmp_906,w
  4761  0ECE  1C03               	skipc
  4762  0ECF  2EBB               	goto	l4230
  4763  0ED0                     l4236:	
  4764                           
  4765                           ;calibration.c: 106: bool done = 0;
  4766  0ED0  01A8               	clrf	perform_calibration@done
  4767  0ED1                     l4320:	
  4768                           ;calibration.c: 107: while (!done)
  4769                           
  4770  0ED1  0828               	movf	perform_calibration@done,w
  4771  0ED2  1D03               	btfss	3,2
  4772  0ED3  2FB8               	goto	l4322
  4773                           
  4774                           ;calibration.c: 108: {
  4775                           ;calibration.c: 109: unsigned char i = 0;
  4776  0ED4  01B0               	clrf	perform_calibration@i
  4777                           
  4778                           ;calibration.c: 110: m_motor = m_conf.max_pwm;
  4779  0ED5  0021               	movlb	1	; select bank1
  4780  0ED6  083E               	movf	((_m_conf+1)^(0+128)+1),w
  4781  0ED7  0020               	movlb	0	; select bank0
  4782  0ED8  00B2               	movwf	perform_calibration@m_motor+1
  4783  0ED9  0021               	movlb	1	; select bank1
  4784  0EDA  083D               	movf	(_m_conf^(0+128)+1),w
  4785  0EDB  0020               	movlb	0	; select bank0
  4786  0EDC  00B1               	movwf	perform_calibration@m_motor
  4787  0EDD                     l4268:	
  4788                           ;calibration.c: 111: while (m_motor > 100)
  4789                           
  4790  0EDD  3000               	movlw	0
  4791  0EDE  0020               	movlb	0	; select bank0
  4792  0EDF  0232               	subwf	perform_calibration@m_motor+1,w
  4793  0EE0  3065               	movlw	101
  4794  0EE1  1903               	skipnz
  4795  0EE2  0231               	subwf	perform_calibration@m_motor,w
  4796  0EE3  1C03               	btfss	3,0
  4797  0EE4  2F3B               	goto	l4270
  4798                           
  4799                           ;calibration.c: 112: {
  4800                           ;calibration.c: 113: if (get_button_state())
  4801  0EE5  3189  2183  318E   	fcall	_get_button_state
  4802  0EE8  3A00               	xorlw	0
  4803  0EE9  1903               	skipnz
  4804  0EEA  2F17               	goto	l4262
  4805                           
  4806                           ;calibration.c: 114: {
  4807                           ;calibration.c: 115: m_conf.ref_pwm[i++] = m_motor;
  4808  0EEB  0020               	movlb	0	; select bank0
  4809  0EEC  3530               	lslf	perform_calibration@i,w
  4810  0EED  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4811  0EEE  0086               	movwf	6
  4812  0EEF  0187               	clrf	7
  4813  0EF0  0831               	movf	perform_calibration@m_motor,w
  4814  0EF1  3FC0               	movwi [0]fsr1
  4815  0EF2  0832               	movf	perform_calibration@m_motor+1,w
  4816  0EF3  3FC1               	movwi [1]fsr1
  4817  0EF4  3001               	movlw	1
  4818  0EF5  00A5               	movwf	??_perform_calibration
  4819  0EF6  0825               	movf	??_perform_calibration,w
  4820  0EF7  07B0               	addwf	perform_calibration@i,f
  4821                           
  4822                           ;calibration.c: 116: multiple_fast_blink(2);
  4823  0EF8  3002               	movlw	2
  4824  0EF9  318B  238D  318E   	fcall	_multiple_fast_blink
  4825                           
  4826                           ;calibration.c: 117: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4827  0EFC  0020               	movlb	0	; select bank0
  4828  0EFD  01AC               	clrf	perform_calibration@__delay_tmp_909
  4829  0EFE  300A               	movlw	10
  4830  0EFF  022C               	subwf	perform_calibration@__delay_tmp_909,w
  4831  0F00  1803               	btfsc	3,0
  4832  0F01  2F17               	goto	l4262
  4833  0F02                     l4256:	
  4834  0F02  3005               	movlw	5
  4835  0F03  00A7               	movwf	??_perform_calibration+2
  4836  0F04  300F               	movlw	15
  4837  0F05  00A6               	movwf	??_perform_calibration+1
  4838  0F06  30F4               	movlw	244
  4839  0F07  00A5               	movwf	??_perform_calibration
  4840  0F08                     u5977:	
  4841  0F08  0BA5               	decfsz	??_perform_calibration,f
  4842  0F09  2F08               	goto	u5977
  4843  0F0A  0BA6               	decfsz	??_perform_calibration+1,f
  4844  0F0B  2F08               	goto	u5977
  4845  0F0C  0BA7               	decfsz	??_perform_calibration+2,f
  4846  0F0D  2F08               	goto	u5977
  4847  0F0E  3001               	movlw	1
  4848  0F0F  0020               	movlb	0	; select bank0
  4849  0F10  00A5               	movwf	??_perform_calibration
  4850  0F11  0825               	movf	??_perform_calibration,w
  4851  0F12  07AC               	addwf	perform_calibration@__delay_tmp_909,f
  4852  0F13  300A               	movlw	10
  4853  0F14  022C               	subwf	perform_calibration@__delay_tmp_909,w
  4854  0F15  1C03               	skipc
  4855  0F16  2F02               	goto	l4256
  4856  0F17                     l4262:	
  4857                           
  4858                           ;calibration.c: 118: }
  4859                           ;calibration.c: 119: m_motor--;
  4860  0F17  3001               	movlw	1
  4861  0F18  0020               	movlb	0	; select bank0
  4862  0F19  02B1               	subwf	perform_calibration@m_motor,f
  4863  0F1A  3000               	movlw	0
  4864  0F1B  3BB2               	subwfb	perform_calibration@m_motor+1,f
  4865                           
  4866                           ;calibration.c: 120: EPWM1_LoadDutyValue(1023-m_motor);
  4867  0F1C  0931               	comf	perform_calibration@m_motor,w
  4868  0F1D  00A5               	movwf	??_perform_calibration
  4869  0F1E  0932               	comf	perform_calibration@m_motor+1,w
  4870  0F1F  00A6               	movwf	??_perform_calibration+1
  4871  0F20  0AA5               	incf	??_perform_calibration,f
  4872  0F21  1903               	skipnz
  4873  0F22  0AA6               	incf	??_perform_calibration+1,f
  4874  0F23  0825               	movf	??_perform_calibration,w
  4875  0F24  3EFF               	addlw	255
  4876  0F25  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4877  0F26  3003               	movlw	3
  4878  0F27  3D26               	addwfc	??_perform_calibration+1,w
  4879  0F28  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4880  0F29  318A  2263  318E   	fcall	_EPWM1_LoadDutyValue
  4881                           
  4882                           ;calibration.c: 121: _delay((unsigned long)((150)*(32000000/4000.0)));
  4883  0F2C  3007               	movlw	7
  4884  0F2D  0020               	movlb	0	; select bank0
  4885  0F2E  00A7               	movwf	??_perform_calibration+2
  4886  0F2F  3017               	movlw	23
  4887  0F30  00A6               	movwf	??_perform_calibration+1
  4888  0F31  306F               	movlw	111
  4889  0F32  00A5               	movwf	??_perform_calibration
  4890  0F33                     u5987:	
  4891  0F33  0BA5               	decfsz	??_perform_calibration,f
  4892  0F34  2F33               	goto	u5987
  4893  0F35  0BA6               	decfsz	??_perform_calibration+1,f
  4894  0F36  2F33               	goto	u5987
  4895  0F37  0BA7               	decfsz	??_perform_calibration+2,f
  4896  0F38  2F33               	goto	u5987
  4897  0F39  0000               	nop
  4898  0F3A  2EDD               	goto	l4268
  4899  0F3B                     l4270:	
  4900                           
  4901                           ;calibration.c: 122: }
  4902                           ;calibration.c: 123: m_conf.nb_steps = i;
  4903  0F3B  0830               	movf	perform_calibration@i,w
  4904  0F3C  00A5               	movwf	??_perform_calibration
  4905  0F3D  0825               	movf	??_perform_calibration,w
  4906  0F3E  0021               	movlb	1	; select bank1
  4907  0F3F  00BF               	movwf	(_m_conf^(0+128)+3)
  4908                           
  4909                           ;calibration.c: 124: EPWM1_LoadDutyValue(1023-0);
  4910  0F40  30FF               	movlw	255
  4911  0F41  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4912  0F42  3003               	movlw	3
  4913  0F43  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4914  0F44  318A  2263  318E   	fcall	_EPWM1_LoadDutyValue
  4915                           
  4916                           ;calibration.c: 125: multiple_fast_blink(2);
  4917  0F47  3002               	movlw	2
  4918  0F48  318B  238D  318E   	fcall	_multiple_fast_blink
  4919                           
  4920                           ;calibration.c: 126: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4921  0F4B  0020               	movlb	0	; select bank0
  4922  0F4C  01AD               	clrf	perform_calibration@__delay_tmp_910
  4923  0F4D  300A               	movlw	10
  4924  0F4E  022D               	subwf	perform_calibration@__delay_tmp_910,w
  4925  0F4F  1803               	btfsc	3,0
  4926  0F50  2F66               	goto	l736
  4927  0F51                     l4282:	
  4928  0F51  3005               	movlw	5
  4929  0F52  00A7               	movwf	??_perform_calibration+2
  4930  0F53  300F               	movlw	15
  4931  0F54  00A6               	movwf	??_perform_calibration+1
  4932  0F55  30F4               	movlw	244
  4933  0F56  00A5               	movwf	??_perform_calibration
  4934  0F57                     u5997:	
  4935  0F57  0BA5               	decfsz	??_perform_calibration,f
  4936  0F58  2F57               	goto	u5997
  4937  0F59  0BA6               	decfsz	??_perform_calibration+1,f
  4938  0F5A  2F57               	goto	u5997
  4939  0F5B  0BA7               	decfsz	??_perform_calibration+2,f
  4940  0F5C  2F57               	goto	u5997
  4941  0F5D  3001               	movlw	1
  4942  0F5E  0020               	movlb	0	; select bank0
  4943  0F5F  00A5               	movwf	??_perform_calibration
  4944  0F60  0825               	movf	??_perform_calibration,w
  4945  0F61  07AD               	addwf	perform_calibration@__delay_tmp_910,f
  4946  0F62  300A               	movlw	10
  4947  0F63  022D               	subwf	perform_calibration@__delay_tmp_910,w
  4948  0F64  1C03               	skipc
  4949  0F65  2F51               	goto	l4282
  4950  0F66                     l736:	
  4951                           
  4952                           ;calibration.c: 128: bool replay = 1;
  4953  0F66  01A9               	clrf	perform_calibration@replay
  4954  0F67  0AA9               	incf	perform_calibration@replay,f
  4955                           
  4956                           ;calibration.c: 129: button_init();
  4957  0F68  3189  218F  318E   	fcall	_button_init
  4958  0F6B                     l4318:	
  4959                           ;calibration.c: 130: while (replay)
  4960                           
  4961  0F6B  0020               	movlb	0	; select bank0
  4962  0F6C  0829               	movf	perform_calibration@replay,w
  4963  0F6D  1903               	btfsc	3,2
  4964  0F6E  2ED1               	goto	l4320
  4965                           
  4966                           ;calibration.c: 131: {
  4967                           ;calibration.c: 132: for (i=0; i<m_conf.nb_steps; i++)
  4968  0F6F  0020               	movlb	0	; select bank0
  4969  0F70  01B0               	clrf	perform_calibration@i
  4970  0F71  2F76               	goto	l4312
  4971  0F72                     l4310:	
  4972                           ;calibration.c: 139: break;
  4973                           
  4974  0F72  3001               	movlw	1
  4975  0F73  00A5               	movwf	??_perform_calibration
  4976  0F74  0825               	movf	??_perform_calibration,w
  4977  0F75  07B0               	addwf	perform_calibration@i,f
  4978  0F76                     l4312:	
  4979  0F76  0021               	movlb	1	; select bank1
  4980  0F77  083F               	movf	(_m_conf^(0+128)+3),w
  4981  0F78  0020               	movlb	0	; select bank0
  4982  0F79  0230               	subwf	perform_calibration@i,w
  4983  0F7A  1803               	btfsc	3,0
  4984  0F7B  2FB1               	goto	l4314
  4985                           
  4986                           ;calibration.c: 133: {
  4987                           ;calibration.c: 134: EPWM1_LoadDutyValue(1023-m_conf.ref_pwm[i]);
  4988  0F7C  3530               	lslf	perform_calibration@i,w
  4989  0F7D  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4990  0F7E  0086               	movwf	6
  4991  0F7F  0187               	clrf	7
  4992  0F80  3F40               	moviw [0]fsr1
  4993  0F81  00A5               	movwf	??_perform_calibration
  4994  0F82  3F41               	moviw [1]fsr1
  4995  0F83  00A6               	movwf	??_perform_calibration+1
  4996  0F84  09A5               	comf	??_perform_calibration,f
  4997  0F85  09A6               	comf	??_perform_calibration+1,f
  4998  0F86  0AA5               	incf	??_perform_calibration,f
  4999  0F87  1903               	skipnz
  5000  0F88  0AA6               	incf	??_perform_calibration+1,f
  5001  0F89  0825               	movf	??_perform_calibration,w
  5002  0F8A  3EFF               	addlw	255
  5003  0F8B  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  5004  0F8C  3003               	movlw	3
  5005  0F8D  3D26               	addwfc	??_perform_calibration+1,w
  5006  0F8E  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  5007  0F8F  318A  2263  318E   	fcall	_EPWM1_LoadDutyValue
  5008                           
  5009                           ;calibration.c: 135: for(unsigned char __delay_tmp=0;__delay_tmp<(10*3);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  5010  0F92  0020               	movlb	0	; select bank0
  5011  0F93  01AE               	clrf	perform_calibration@__delay_tmp_912
  5012  0F94  301E               	movlw	30
  5013  0F95  022E               	subwf	perform_calibration@__delay_tmp_912,w
  5014  0F96  1803               	btfsc	3,0
  5015  0F97  2FAD               	goto	l4306
  5016  0F98                     l4300:	
  5017  0F98  3005               	movlw	5
  5018  0F99  00A7               	movwf	??_perform_calibration+2
  5019  0F9A  300F               	movlw	15
  5020  0F9B  00A6               	movwf	??_perform_calibration+1
  5021  0F9C  30F4               	movlw	244
  5022  0F9D  00A5               	movwf	??_perform_calibration
  5023  0F9E                     u6007:	
  5024  0F9E  0BA5               	decfsz	??_perform_calibration,f
  5025  0F9F  2F9E               	goto	u6007
  5026  0FA0  0BA6               	decfsz	??_perform_calibration+1,f
  5027  0FA1  2F9E               	goto	u6007
  5028  0FA2  0BA7               	decfsz	??_perform_calibration+2,f
  5029  0FA3  2F9E               	goto	u6007
  5030  0FA4  3001               	movlw	1
  5031  0FA5  0020               	movlb	0	; select bank0
  5032  0FA6  00A5               	movwf	??_perform_calibration
  5033  0FA7  0825               	movf	??_perform_calibration,w
  5034  0FA8  07AE               	addwf	perform_calibration@__delay_tmp_912,f
  5035  0FA9  301E               	movlw	30
  5036  0FAA  022E               	subwf	perform_calibration@__delay_tmp_912,w
  5037  0FAB  1C03               	skipc
  5038  0FAC  2F98               	goto	l4300
  5039  0FAD                     l4306:	
  5040                           
  5041                           ;calibration.c: 136: if (m_button.confirmed_state != nothing)
  5042  0FAD  0854               	movf	_m_button,w	;volatile
  5043  0FAE  1903               	btfsc	3,2
  5044  0FAF  2F72               	goto	l4310
  5045                           
  5046                           ;calibration.c: 137: {
  5047                           ;calibration.c: 138: replay = 0;
  5048  0FB0  01A9               	clrf	perform_calibration@replay
  5049  0FB1                     l4314:	
  5050                           
  5051                           ;calibration.c: 140: }
  5052                           ;calibration.c: 141: }
  5053                           ;calibration.c: 143: if (m_button.confirmed_state == long_push)
  5054  0FB1  3002               	movlw	2
  5055  0FB2  0654               	xorwf	_m_button,w	;volatile
  5056  0FB3  1D03               	btfss	3,2
  5057  0FB4  2F6B               	goto	l4318
  5058                           
  5059                           ;calibration.c: 144: done = 1;
  5060  0FB5  01A8               	clrf	perform_calibration@done
  5061  0FB6  0AA8               	incf	perform_calibration@done,f
  5062  0FB7  2F6B               	goto	l4318
  5063  0FB8                     l4322:	
  5064                           
  5065                           ;calibration.c: 145: }
  5066                           ;calibration.c: 146: }
  5067                           ;calibration.c: 147: multiple_fast_blink(2);
  5068  0FB8  3002               	movlw	2
  5069  0FB9  318B  238D  318E   	fcall	_multiple_fast_blink
  5070                           
  5071                           ;calibration.c: 148: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  5072  0FBC  0020               	movlb	0	; select bank0
  5073  0FBD  01AF               	clrf	perform_calibration@__delay_tmp_913
  5074  0FBE  300A               	movlw	10
  5075  0FBF  022F               	subwf	perform_calibration@__delay_tmp_913,w
  5076  0FC0  1803               	btfsc	3,0
  5077  0FC1  2FD7               	goto	l4336
  5078  0FC2                     l4330:	
  5079  0FC2  3005               	movlw	5
  5080  0FC3  00A7               	movwf	??_perform_calibration+2
  5081  0FC4  300F               	movlw	15
  5082  0FC5  00A6               	movwf	??_perform_calibration+1
  5083  0FC6  30F4               	movlw	244
  5084  0FC7  00A5               	movwf	??_perform_calibration
  5085  0FC8                     u6017:	
  5086  0FC8  0BA5               	decfsz	??_perform_calibration,f
  5087  0FC9  2FC8               	goto	u6017
  5088  0FCA  0BA6               	decfsz	??_perform_calibration+1,f
  5089  0FCB  2FC8               	goto	u6017
  5090  0FCC  0BA7               	decfsz	??_perform_calibration+2,f
  5091  0FCD  2FC8               	goto	u6017
  5092  0FCE  3001               	movlw	1
  5093  0FCF  0020               	movlb	0	; select bank0
  5094  0FD0  00A5               	movwf	??_perform_calibration
  5095  0FD1  0825               	movf	??_perform_calibration,w
  5096  0FD2  07AF               	addwf	perform_calibration@__delay_tmp_913,f
  5097  0FD3  300A               	movlw	10
  5098  0FD4  022F               	subwf	perform_calibration@__delay_tmp_913,w
  5099  0FD5  1C03               	skipc
  5100  0FD6  2FC2               	goto	l4330
  5101  0FD7                     l4336:	
  5102                           
  5103                           ;calibration.c: 149: button_init();
  5104  0FD7  3189  218F  318E   	fcall	_button_init
  5105                           
  5106                           ;calibration.c: 152: m_conf.impulse_duration = 10;
  5107  0FDA  300A               	movlw	10
  5108  0FDB  0020               	movlb	0	; select bank0
  5109  0FDC  00A5               	movwf	??_perform_calibration
  5110  0FDD  0825               	movf	??_perform_calibration,w
  5111  0FDE  0021               	movlb	1	; select bank1
  5112  0FDF  00EA               	movwf	(_m_conf^(0+128)+46)
  5113                           
  5114                           ;calibration.c: 187: m_conf.low_speed_pwm = m_conf.ref_pwm[m_conf.nb_steps-1] - 10;
  5115  0FE0  353F               	lslf	(_m_conf^(0+128)+3),w
  5116  0FE1  3EFE               	addlw	254
  5117  0FE2  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  5118  0FE3  0086               	movwf	6
  5119  0FE4  0187               	clrf	7
  5120  0FE5  3F40               	moviw [0]fsr1
  5121  0FE6  0020               	movlb	0	; select bank0
  5122  0FE7  00A5               	movwf	??_perform_calibration
  5123  0FE8  3F41               	moviw [1]fsr1
  5124  0FE9  00A6               	movwf	??_perform_calibration+1
  5125  0FEA  0825               	movf	??_perform_calibration,w
  5126  0FEB  3EF6               	addlw	246
  5127  0FEC  0021               	movlb	1	; select bank1
  5128  0FED  00E8               	movwf	(_m_conf^(0+128)+44)
  5129  0FEE  30FF               	movlw	255
  5130  0FEF  0020               	movlb	0	; select bank0
  5131  0FF0  3D26               	addwfc	??_perform_calibration+1,w
  5132  0FF1  0021               	movlb	1	; select bank1
  5133  0FF2  00E9               	movwf	((_m_conf+1)^(0+128)+44)
  5134                           
  5135                           ;calibration.c: 219: LED_set_state(manual_mode);
  5136  0FF3  3004               	movlw	4
  5137  0FF4  318A  22D6  318E   	fcall	_LED_set_state
  5138                           
  5139                           ;calibration.c: 220: do { LATA2 = 0; } while(0);
  5140  0FF7  0022               	movlb	2	; select bank2
  5141  0FF8  110C               	bcf	12,2	;volatile
  5142                           
  5143                           ;calibration.c: 221: EPWM1_LoadDutyValue(1023-0);
  5144  0FF9  30FF               	movlw	255
  5145  0FFA  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  5146  0FFB  3003               	movlw	3
  5147  0FFC  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  5148  0FFD  318A  2263         	fcall	_EPWM1_LoadDutyValue
  5149  0FFF  0008               	return
  5150  1000                     __end_of_perform_calibration:	
  5151                           
  5152                           	psect	text4
  5153  0B8D                     __ptext4:	
  5154 ;; *************** function _multiple_fast_blink *****************
  5155 ;; Defined at:
  5156 ;;		line 14 in file "interact.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  times           1    wreg     unsigned char 
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;  times           1    3[BANK0 ] unsigned char 
  5161 ;;  i               1    4[BANK0 ] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, pclath, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5171 ;;      Params:         0       0       0       0       0       0
  5172 ;;      Locals:         0       2       0       0       0       0
  5173 ;;      Temps:          0       3       0       0       0       0
  5174 ;;      Totals:         0       5       0       0       0       0
  5175 ;;Total ram usage:        5 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    7
  5178 ;; This function calls:
  5179 ;;		_LED_set_state
  5180 ;; This function is called by:
  5181 ;;		_perform_calibration
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _multiple_fast_blink
  5187  0B8D                     _multiple_fast_blink:	
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _multiple_fast_blink: [wreg+status,2+status,0+pclath+cstack]
  5191                           ;multiple_fast_blink@times stored from wreg
  5192  0B8D  0020               	movlb	0	; select bank0
  5193  0B8E  00A3               	movwf	multiple_fast_blink@times
  5194                           
  5195                           ;interact.c: 16: LED_set_state(manual_mode);
  5196  0B8F  3004               	movlw	4
  5197  0B90  318A  22D6  318B   	fcall	_LED_set_state
  5198                           
  5199                           ;interact.c: 17: do { LATA2 = 0; } while(0);
  5200  0B93  0022               	movlb	2	; select bank2
  5201  0B94  110C               	bcf	12,2	;volatile
  5202                           
  5203                           ;interact.c: 18: _delay((unsigned long)((250)*(32000000/4000.0)));
  5204  0B95  300B               	movlw	11
  5205  0B96  0020               	movlb	0	; select bank0
  5206  0B97  00A2               	movwf	??_multiple_fast_blink+2
  5207  0B98  3026               	movlw	38
  5208  0B99  00A1               	movwf	??_multiple_fast_blink+1
  5209  0B9A  3066               	movlw	102
  5210  0B9B  00A0               	movwf	??_multiple_fast_blink
  5211  0B9C                     u6027:	
  5212  0B9C  0BA0               	decfsz	??_multiple_fast_blink,f
  5213  0B9D  2B9C               	goto	u6027
  5214  0B9E  0BA1               	decfsz	??_multiple_fast_blink+1,f
  5215  0B9F  2B9C               	goto	u6027
  5216  0BA0  0BA2               	decfsz	??_multiple_fast_blink+2,f
  5217  0BA1  2B9C               	goto	u6027
  5218  0BA2  3200               	nop2
  5219                           
  5220                           ;interact.c: 20: for (unsigned char i=0; i<times; i++)
  5221  0BA3  0020               	movlb	0	; select bank0
  5222  0BA4  01A4               	clrf	multiple_fast_blink@i
  5223  0BA5                     l4084:	
  5224  0BA5  0823               	movf	multiple_fast_blink@times,w
  5225  0BA6  0224               	subwf	multiple_fast_blink@i,w
  5226  0BA7  1803               	btfsc	3,0
  5227  0BA8  0008               	return
  5228                           
  5229                           ;interact.c: 21: {
  5230                           ;interact.c: 22: do { LATA2 = 1; } while(0);
  5231  0BA9  0022               	movlb	2	; select bank2
  5232  0BAA  150C               	bsf	12,2	;volatile
  5233                           
  5234                           ;interact.c: 23: _delay((unsigned long)((50)*(32000000/4000.0)));
  5235  0BAB  3003               	movlw	3
  5236  0BAC  0020               	movlb	0	; select bank0
  5237  0BAD  00A2               	movwf	??_multiple_fast_blink+2
  5238  0BAE  3008               	movlw	8
  5239  0BAF  00A1               	movwf	??_multiple_fast_blink+1
  5240  0BB0  3078               	movlw	120
  5241  0BB1  00A0               	movwf	??_multiple_fast_blink
  5242  0BB2                     u6037:	
  5243  0BB2  0BA0               	decfsz	??_multiple_fast_blink,f
  5244  0BB3  2BB2               	goto	u6037
  5245  0BB4  0BA1               	decfsz	??_multiple_fast_blink+1,f
  5246  0BB5  2BB2               	goto	u6037
  5247  0BB6  0BA2               	decfsz	??_multiple_fast_blink+2,f
  5248  0BB7  2BB2               	goto	u6037
  5249                           
  5250                           ;interact.c: 24: do { LATA2 = 0; } while(0);
  5251  0BB8  0022               	movlb	2	; select bank2
  5252  0BB9  110C               	bcf	12,2	;volatile
  5253                           
  5254                           ;interact.c: 25: _delay((unsigned long)((50)*(32000000/4000.0)));
  5255  0BBA  3003               	movlw	3
  5256  0BBB  0020               	movlb	0	; select bank0
  5257  0BBC  00A2               	movwf	??_multiple_fast_blink+2
  5258  0BBD  3008               	movlw	8
  5259  0BBE  00A1               	movwf	??_multiple_fast_blink+1
  5260  0BBF  3078               	movlw	120
  5261  0BC0  00A0               	movwf	??_multiple_fast_blink
  5262  0BC1                     u6047:	
  5263  0BC1  0BA0               	decfsz	??_multiple_fast_blink,f
  5264  0BC2  2BC1               	goto	u6047
  5265  0BC3  0BA1               	decfsz	??_multiple_fast_blink+1,f
  5266  0BC4  2BC1               	goto	u6047
  5267  0BC5  0BA2               	decfsz	??_multiple_fast_blink+2,f
  5268  0BC6  2BC1               	goto	u6047
  5269  0BC7  3001               	movlw	1
  5270  0BC8  0020               	movlb	0	; select bank0
  5271  0BC9  00A0               	movwf	??_multiple_fast_blink
  5272  0BCA  0820               	movf	??_multiple_fast_blink,w
  5273  0BCB  07A4               	addwf	multiple_fast_blink@i,f
  5274  0BCC  2BA5               	goto	l4084
  5275  0BCD                     __end_of_multiple_fast_blink:	
  5276                           
  5277                           	psect	text5
  5278  0AD6                     __ptext5:	
  5279 ;; *************** function _LED_set_state *****************
  5280 ;; Defined at:
  5281 ;;		line 29 in file "interact.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  new_state       1    wreg     enum E2939
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  new_state       1    5[COMMON] enum E2939
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5295 ;;      Params:         0       0       0       0       0       0
  5296 ;;      Locals:         1       0       0       0       0       0
  5297 ;;      Temps:          1       0       0       0       0       0
  5298 ;;      Totals:         2       0       0       0       0       0
  5299 ;;Total ram usage:        2 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    6
  5302 ;; This function calls:
  5303 ;;		Nothing
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;;		_multiple_fast_blink
  5307 ;;		_perform_calibration
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _LED_set_state
  5313  0AD6                     _LED_set_state:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  5317                           ;LED_set_state@new_state stored from wreg
  5318  0AD6  00F5               	movwf	LED_set_state@new_state
  5319                           
  5320                           ;interact.c: 31: m_LED.state = new_state;
  5321  0AD7  0875               	movf	LED_set_state@new_state,w
  5322  0AD8  00F4               	movwf	??_LED_set_state
  5323  0AD9  0874               	movf	??_LED_set_state,w
  5324  0ADA  00F6               	movwf	_m_LED	;volatile
  5325                           
  5326                           ;interact.c: 32: m_LED.counter = 0;
  5327  0ADB  01F7               	clrf	_m_LED+1	;volatile
  5328                           
  5329                           ;interact.c: 33: if (new_state == always_off)
  5330  0ADC  0375               	decf	LED_set_state@new_state,w
  5331  0ADD  1D03               	btfss	3,2
  5332  0ADE  2AE2               	goto	l3878
  5333                           
  5334                           ;interact.c: 34: do { LATA2 = 0; } while(0);
  5335  0ADF  0022               	movlb	2	; select bank2
  5336  0AE0  110C               	bcf	12,2	;volatile
  5337  0AE1  0008               	return
  5338  0AE2                     l3878:	
  5339                           
  5340                           ;interact.c: 35: else if (new_state == always_on)
  5341  0AE2  0875               	movf	LED_set_state@new_state,w
  5342  0AE3  1D03               	btfss	3,2
  5343  0AE4  2AE8               	goto	l3880
  5344                           
  5345                           ;interact.c: 36: do { LATA2 = 1; } while(0);
  5346  0AE5  0022               	movlb	2	; select bank2
  5347  0AE6  150C               	bsf	12,2	;volatile
  5348  0AE7  0008               	return
  5349  0AE8                     l3880:	
  5350                           
  5351                           ;interact.c: 37: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  5352  0AE8  3002               	movlw	2
  5353  0AE9  0675               	xorwf	LED_set_state@new_state,w
  5354  0AEA  1903               	btfsc	3,2
  5355  0AEB  2AF0               	goto	l487
  5356  0AEC  3003               	movlw	3
  5357  0AED  0675               	xorwf	LED_set_state@new_state,w
  5358  0AEE  1D03               	btfss	3,2
  5359  0AEF  0008               	return
  5360  0AF0                     l487:	
  5361                           ;interact.c: 38: do { LATA2 = 1; } while(0);
  5362                           
  5363  0AF0  0022               	movlb	2	; select bank2
  5364  0AF1  150C               	bsf	12,2	;volatile
  5365  0AF2  0008               	return
  5366  0AF3                     __end_of_LED_set_state:	
  5367                           
  5368                           	psect	text6
  5369  098F                     __ptext6:	
  5370 ;; *************** function _button_init *****************
  5371 ;; Defined at:
  5372 ;;		line 78 in file "interact.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0, pclath, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5386 ;;      Params:         0       0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0
  5388 ;;      Temps:          1       0       0       0       0       0
  5389 ;;      Totals:         1       0       0       0       0       0
  5390 ;;Total ram usage:        1 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    7
  5393 ;; This function calls:
  5394 ;;		_get_button_state
  5395 ;; This function is called by:
  5396 ;;		_main
  5397 ;;		_perform_calibration
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           
  5402                           ;psect for function _button_init
  5403  098F                     _button_init:	
  5404                           
  5405                           ;interact.c: 80: m_button.last_state = get_button_state();
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _button_init: [wreg+status,2+status,0+pclath+cstack]
  5409  098F  3189  2183         	fcall	_get_button_state
  5410  0991  00F5               	movwf	??_button_init
  5411  0992  0875               	movf	??_button_init,w
  5412  0993  0020               	movlb	0	; select bank0
  5413  0994  00D9               	movwf	_m_button+5	;volatile
  5414                           
  5415                           ;interact.c: 81: m_button.count_pressed = 0;
  5416  0995  01D5               	clrf	_m_button+1	;volatile
  5417                           
  5418                           ;interact.c: 82: m_button.count_released = 0;
  5419  0996  01D6               	clrf	_m_button+2	;volatile
  5420                           
  5421                           ;interact.c: 83: m_button.confirmed_state = nothing;
  5422  0997  01D4               	clrf	_m_button	;volatile
  5423                           
  5424                           ;interact.c: 84: m_button.push_confirmed = 0;
  5425  0998  01D7               	clrf	_m_button+3	;volatile
  5426                           
  5427                           ;interact.c: 85: m_button.release_confirmed = 0;
  5428  0999  01D8               	clrf	_m_button+4	;volatile
  5429                           
  5430                           ;interact.c: 86: m_button.has_once_been_released = 0;
  5431  099A  01DA               	clrf	_m_button+6	;volatile
  5432  099B  0008               	return
  5433  099C                     __end_of_button_init:	
  5434                           
  5435                           	psect	text7
  5436  0983                     __ptext7:	
  5437 ;; *************** function _get_button_state *****************
  5438 ;; Defined at:
  5439 ;;		line 69 in file "interact.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  state           1    4[COMMON] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      unsigned char 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5453 ;;      Params:         0       0       0       0       0       0
  5454 ;;      Locals:         1       0       0       0       0       0
  5455 ;;      Temps:          0       0       0       0       0       0
  5456 ;;      Totals:         1       0       0       0       0       0
  5457 ;;Total ram usage:        1 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    6
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_button_init
  5464 ;;		_perform_calibration
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _get_button_state
  5470  0983                     _get_button_state:	
  5471                           
  5472                           ;interact.c: 72: unsigned char state = PORTBbits.RB0;
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5476  0983  3000               	movlw	0
  5477  0984  0020               	movlb	0	; select bank0
  5478  0985  180D               	btfsc	13,0	;volatile
  5479  0986  3001               	movlw	1
  5480  0987  00F4               	movwf	get_button_state@state
  5481                           
  5482                           ;interact.c: 73: if (state == 1)
  5483  0988  0374               	decf	get_button_state@state,w
  5484  0989  1D03               	btfss	3,2
  5485  098A  298D               	goto	l3894
  5486                           
  5487                           ;interact.c: 74: return 0;
  5488  098B  3000               	movlw	0
  5489  098C  0008               	return
  5490  098D                     l3894:	
  5491                           
  5492                           ;interact.c: 75: else return 1;
  5493  098D  3001               	movlw	1
  5494  098E  0008               	return
  5495  098F                     __end_of_get_button_state:	
  5496                           
  5497                           	psect	text8
  5498  0A63                     __ptext8:	
  5499 ;; *************** function _EPWM1_LoadDutyValue *****************
  5500 ;; Defined at:
  5501 ;;		line 90 in file "mcc_generated_files/epwm1.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  dutyValue       2    4[COMMON] unsigned int 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      void 
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5515 ;;      Params:         2       0       0       0       0       0
  5516 ;;      Locals:         0       0       0       0       0       0
  5517 ;;      Temps:          0       2       0       0       0       0
  5518 ;;      Totals:         2       2       0       0       0       0
  5519 ;;Total ram usage:        4 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    6
  5522 ;; This function calls:
  5523 ;;		Nothing
  5524 ;; This function is called by:
  5525 ;;		_main
  5526 ;;		_perform_calibration
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _EPWM1_LoadDutyValue
  5532  0A63                     _EPWM1_LoadDutyValue:	
  5533                           
  5534                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in _EPWM1_LoadDutyValue: [wreg+status,2+status,0]
  5538  0A63  0875               	movf	EPWM1_LoadDutyValue@dutyValue+1,w
  5539  0A64  0020               	movlb	0	; select bank0
  5540  0A65  00A1               	movwf	??_EPWM1_LoadDutyValue+1
  5541  0A66  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5542  0A67  00A0               	movwf	??_EPWM1_LoadDutyValue
  5543  0A68  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5544  0A69  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5545  0A6A  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5546  0A6B  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5547  0A6C  0820               	movf	??_EPWM1_LoadDutyValue,w
  5548  0A6D  0025               	movlb	5	; select bank5
  5549  0A6E  0091               	movwf	17	;volatile
  5550                           
  5551                           ;epwm1.c: 96: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5552  0A6F  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5553  0A70  3903               	andlw	3
  5554  0A71  0020               	movlb	0	; select bank0
  5555  0A72  00A0               	movwf	??_EPWM1_LoadDutyValue
  5556  0A73  3004               	movlw	4
  5557  0A74                     u4295:	
  5558  0A74  35A0               	lslf	??_EPWM1_LoadDutyValue,f
  5559  0A75  0B89               	decfsz	9,f
  5560  0A76  2A74               	goto	u4295
  5561  0A77  0025               	movlb	5	; select bank5
  5562  0A78  0813               	movf	19,w	;volatile
  5563  0A79  39CF               	andlw	207
  5564  0A7A  0020               	movlb	0	; select bank0
  5565  0A7B  0420               	iorwf	??_EPWM1_LoadDutyValue,w
  5566  0A7C  0025               	movlb	5	; select bank5
  5567  0A7D  0093               	movwf	19	;volatile
  5568  0A7E  0008               	return
  5569  0A7F                     __end_of_EPWM1_LoadDutyValue:	
  5570                           
  5571                           	psect	text9
  5572  0623                     __ptext9:	
  5573 ;; *************** function _multiply_fp *****************
  5574 ;; Defined at:
  5575 ;;		line 41 in file "fixed_point.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  n1              4   12[BANK0 ] long 
  5578 ;;  n2              4   16[BANK0 ] long 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  res             4   34[BANK0 ] long 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  4   12[BANK0 ] long 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5590 ;;      Params:         0       8       0       0       0       0
  5591 ;;      Locals:         0       4       0       0       0       0
  5592 ;;      Temps:          0      14       0       0       0       0
  5593 ;;      Totals:         0      26       0       0       0       0
  5594 ;;Total ram usage:       26 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    7
  5597 ;; This function calls:
  5598 ;;		___lmul
  5599 ;; This function is called by:
  5600 ;;		_main
  5601 ;;		_reciprocal_fp
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _multiply_fp
  5607  0623                     _multiply_fp:	
  5608                           
  5609                           ;fixed_point.c: 45: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  5613  0623  0020               	movlb	0	; select bank0
  5614  0624  082C               	movf	multiply_fp@n1,w
  5615  0625  00B4               	movwf	??_multiply_fp
  5616  0626  082D               	movf	multiply_fp@n1+1,w
  5617  0627  00B5               	movwf	??_multiply_fp+1
  5618  0628  082E               	movf	multiply_fp@n1+2,w
  5619  0629  00B6               	movwf	??_multiply_fp+2
  5620  062A  082F               	movf	multiply_fp@n1+3,w
  5621  062B  00B7               	movwf	??_multiply_fp+3
  5622  062C  3010               	movlw	16
  5623  062D  00B8               	movwf	??_multiply_fp+4
  5624  062E                     u5435:	
  5625  062E  37B7               	asrf	??_multiply_fp+3,f
  5626  062F  0CB6               	rrf	??_multiply_fp+2,f
  5627  0630  0CB5               	rrf	??_multiply_fp+1,f
  5628  0631  0CB4               	rrf	??_multiply_fp,f
  5629  0632  0BB8               	decfsz	??_multiply_fp+4,f
  5630  0633  2E2E               	goto	u5435
  5631  0634  0837               	movf	??_multiply_fp+3,w
  5632  0635  00A3               	movwf	___lmul@multiplier+3
  5633  0636  0836               	movf	??_multiply_fp+2,w
  5634  0637  00A2               	movwf	___lmul@multiplier+2
  5635  0638  0835               	movf	??_multiply_fp+1,w
  5636  0639  00A1               	movwf	___lmul@multiplier+1
  5637  063A  0834               	movf	??_multiply_fp,w
  5638  063B  00A0               	movwf	___lmul@multiplier
  5639  063C  0830               	movf	multiply_fp@n2,w
  5640  063D  00B9               	movwf	??_multiply_fp+5
  5641  063E  0831               	movf	multiply_fp@n2+1,w
  5642  063F  00BA               	movwf	??_multiply_fp+6
  5643  0640  0832               	movf	multiply_fp@n2+2,w
  5644  0641  00BB               	movwf	??_multiply_fp+7
  5645  0642  0833               	movf	multiply_fp@n2+3,w
  5646  0643  00BC               	movwf	??_multiply_fp+8
  5647  0644  3010               	movlw	16
  5648  0645  00BD               	movwf	??_multiply_fp+9
  5649  0646                     u5445:	
  5650  0646  37BC               	asrf	??_multiply_fp+8,f
  5651  0647  0CBB               	rrf	??_multiply_fp+7,f
  5652  0648  0CBA               	rrf	??_multiply_fp+6,f
  5653  0649  0CB9               	rrf	??_multiply_fp+5,f
  5654  064A  0BBD               	decfsz	??_multiply_fp+9,f
  5655  064B  2E46               	goto	u5445
  5656  064C  083C               	movf	??_multiply_fp+8,w
  5657  064D  00A7               	movwf	___lmul@multiplicand+3
  5658  064E  083B               	movf	??_multiply_fp+7,w
  5659  064F  00A6               	movwf	___lmul@multiplicand+2
  5660  0650  083A               	movf	??_multiply_fp+6,w
  5661  0651  00A5               	movwf	___lmul@multiplicand+1
  5662  0652  0839               	movf	??_multiply_fp+5,w
  5663  0653  00A4               	movwf	___lmul@multiplicand
  5664  0654  318B  235D  3186   	fcall	___lmul
  5665  0657  0020               	movlb	0	; select bank0
  5666  0658  0820               	movf	?___lmul,w
  5667  0659  00BE               	movwf	??_multiply_fp+10
  5668  065A  0821               	movf	?___lmul+1,w
  5669  065B  00BF               	movwf	??_multiply_fp+11
  5670  065C  0822               	movf	?___lmul+2,w
  5671  065D  00C0               	movwf	??_multiply_fp+12
  5672  065E  0823               	movf	?___lmul+3,w
  5673  065F  00C1               	movwf	??_multiply_fp+13
  5674  0660  3010               	movlw	16
  5675  0661                     u5455:	
  5676  0661  35BE               	lslf	??_multiply_fp+10,f
  5677  0662  0DBF               	rlf	??_multiply_fp+11,f
  5678  0663  0DC0               	rlf	??_multiply_fp+12,f
  5679  0664  0DC1               	rlf	??_multiply_fp+13,f
  5680  0665  0B89               	decfsz	9,f
  5681  0666  2E61               	goto	u5455
  5682  0667  0841               	movf	??_multiply_fp+13,w
  5683  0668  00C5               	movwf	multiply_fp@res+3
  5684  0669  0840               	movf	??_multiply_fp+12,w
  5685  066A  00C4               	movwf	multiply_fp@res+2
  5686  066B  083F               	movf	??_multiply_fp+11,w
  5687  066C  00C3               	movwf	multiply_fp@res+1
  5688  066D  083E               	movf	??_multiply_fp+10,w
  5689  066E  00C2               	movwf	multiply_fp@res
  5690                           
  5691                           ;fixed_point.c: 46: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  5692  066F  082C               	movf	multiply_fp@n1,w
  5693  0670  00B4               	movwf	??_multiply_fp
  5694  0671  082D               	movf	multiply_fp@n1+1,w
  5695  0672  00B5               	movwf	??_multiply_fp+1
  5696  0673  082E               	movf	multiply_fp@n1+2,w
  5697  0674  00B6               	movwf	??_multiply_fp+2
  5698  0675  082F               	movf	multiply_fp@n1+3,w
  5699  0676  00B7               	movwf	??_multiply_fp+3
  5700  0677  3010               	movlw	16
  5701  0678  00B8               	movwf	??_multiply_fp+4
  5702  0679                     u5465:	
  5703  0679  37B7               	asrf	??_multiply_fp+3,f
  5704  067A  0CB6               	rrf	??_multiply_fp+2,f
  5705  067B  0CB5               	rrf	??_multiply_fp+1,f
  5706  067C  0CB4               	rrf	??_multiply_fp,f
  5707  067D  0BB8               	decfsz	??_multiply_fp+4,f
  5708  067E  2E79               	goto	u5465
  5709  067F  0837               	movf	??_multiply_fp+3,w
  5710  0680  00A3               	movwf	___lmul@multiplier+3
  5711  0681  0836               	movf	??_multiply_fp+2,w
  5712  0682  00A2               	movwf	___lmul@multiplier+2
  5713  0683  0835               	movf	??_multiply_fp+1,w
  5714  0684  00A1               	movwf	___lmul@multiplier+1
  5715  0685  0834               	movf	??_multiply_fp,w
  5716  0686  00A0               	movwf	___lmul@multiplier
  5717  0687  30FF               	movlw	255
  5718  0688  0530               	andwf	multiply_fp@n2,w
  5719  0689  00A4               	movwf	___lmul@multiplicand
  5720  068A  30FF               	movlw	255
  5721  068B  0531               	andwf	multiply_fp@n2+1,w
  5722  068C  00A5               	movwf	___lmul@multiplicand+1
  5723  068D  3000               	movlw	0
  5724  068E  0532               	andwf	multiply_fp@n2+2,w
  5725  068F  00A6               	movwf	___lmul@multiplicand+2
  5726  0690  3000               	movlw	0
  5727  0691  0533               	andwf	multiply_fp@n2+3,w
  5728  0692  00A7               	movwf	___lmul@multiplicand+3
  5729  0693  318B  235D  3186   	fcall	___lmul
  5730  0696  0020               	movlb	0	; select bank0
  5731  0697  0820               	movf	?___lmul,w
  5732  0698  07C2               	addwf	multiply_fp@res,f
  5733  0699  0821               	movf	?___lmul+1,w
  5734  069A  3DC3               	addwfc	multiply_fp@res+1,f
  5735  069B  0822               	movf	?___lmul+2,w
  5736  069C  3DC4               	addwfc	multiply_fp@res+2,f
  5737  069D  0823               	movf	?___lmul+3,w
  5738  069E  3DC5               	addwfc	multiply_fp@res+3,f
  5739                           
  5740                           ;fixed_point.c: 47: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  5741  069F  0830               	movf	multiply_fp@n2,w
  5742  06A0  00B4               	movwf	??_multiply_fp
  5743  06A1  0831               	movf	multiply_fp@n2+1,w
  5744  06A2  00B5               	movwf	??_multiply_fp+1
  5745  06A3  0832               	movf	multiply_fp@n2+2,w
  5746  06A4  00B6               	movwf	??_multiply_fp+2
  5747  06A5  0833               	movf	multiply_fp@n2+3,w
  5748  06A6  00B7               	movwf	??_multiply_fp+3
  5749  06A7  3010               	movlw	16
  5750  06A8  00B8               	movwf	??_multiply_fp+4
  5751  06A9                     u5475:	
  5752  06A9  37B7               	asrf	??_multiply_fp+3,f
  5753  06AA  0CB6               	rrf	??_multiply_fp+2,f
  5754  06AB  0CB5               	rrf	??_multiply_fp+1,f
  5755  06AC  0CB4               	rrf	??_multiply_fp,f
  5756  06AD  0BB8               	decfsz	??_multiply_fp+4,f
  5757  06AE  2EA9               	goto	u5475
  5758  06AF  0837               	movf	??_multiply_fp+3,w
  5759  06B0  00A3               	movwf	___lmul@multiplier+3
  5760  06B1  0836               	movf	??_multiply_fp+2,w
  5761  06B2  00A2               	movwf	___lmul@multiplier+2
  5762  06B3  0835               	movf	??_multiply_fp+1,w
  5763  06B4  00A1               	movwf	___lmul@multiplier+1
  5764  06B5  0834               	movf	??_multiply_fp,w
  5765  06B6  00A0               	movwf	___lmul@multiplier
  5766  06B7  30FF               	movlw	255
  5767  06B8  052C               	andwf	multiply_fp@n1,w
  5768  06B9  00A4               	movwf	___lmul@multiplicand
  5769  06BA  30FF               	movlw	255
  5770  06BB  052D               	andwf	multiply_fp@n1+1,w
  5771  06BC  00A5               	movwf	___lmul@multiplicand+1
  5772  06BD  3000               	movlw	0
  5773  06BE  052E               	andwf	multiply_fp@n1+2,w
  5774  06BF  00A6               	movwf	___lmul@multiplicand+2
  5775  06C0  3000               	movlw	0
  5776  06C1  052F               	andwf	multiply_fp@n1+3,w
  5777  06C2  00A7               	movwf	___lmul@multiplicand+3
  5778  06C3  318B  235D  3186   	fcall	___lmul
  5779  06C6  0020               	movlb	0	; select bank0
  5780  06C7  0820               	movf	?___lmul,w
  5781  06C8  07C2               	addwf	multiply_fp@res,f
  5782  06C9  0821               	movf	?___lmul+1,w
  5783  06CA  3DC3               	addwfc	multiply_fp@res+1,f
  5784  06CB  0822               	movf	?___lmul+2,w
  5785  06CC  3DC4               	addwfc	multiply_fp@res+2,f
  5786  06CD  0823               	movf	?___lmul+3,w
  5787  06CE  3DC5               	addwfc	multiply_fp@res+3,f
  5788                           
  5789                           ;fixed_point.c: 48: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  5790  06CF  30FF               	movlw	255
  5791  06D0  00B4               	movwf	??_multiply_fp
  5792  06D1  30FF               	movlw	255
  5793  06D2  00B5               	movwf	??_multiply_fp+1
  5794  06D3  3000               	movlw	0
  5795  06D4  00B6               	movwf	??_multiply_fp+2
  5796  06D5  3000               	movlw	0
  5797  06D6  00B7               	movwf	??_multiply_fp+3
  5798  06D7  30FF               	movlw	255
  5799  06D8  052C               	andwf	multiply_fp@n1,w
  5800  06D9  00A0               	movwf	___lmul@multiplier
  5801  06DA  30FF               	movlw	255
  5802  06DB  052D               	andwf	multiply_fp@n1+1,w
  5803  06DC  00A1               	movwf	___lmul@multiplier+1
  5804  06DD  3000               	movlw	0
  5805  06DE  052E               	andwf	multiply_fp@n1+2,w
  5806  06DF  00A2               	movwf	___lmul@multiplier+2
  5807  06E0  3000               	movlw	0
  5808  06E1  052F               	andwf	multiply_fp@n1+3,w
  5809  06E2  00A3               	movwf	___lmul@multiplier+3
  5810  06E3  30FF               	movlw	255
  5811  06E4  0530               	andwf	multiply_fp@n2,w
  5812  06E5  00A4               	movwf	___lmul@multiplicand
  5813  06E6  30FF               	movlw	255
  5814  06E7  0531               	andwf	multiply_fp@n2+1,w
  5815  06E8  00A5               	movwf	___lmul@multiplicand+1
  5816  06E9  3000               	movlw	0
  5817  06EA  0532               	andwf	multiply_fp@n2+2,w
  5818  06EB  00A6               	movwf	___lmul@multiplicand+2
  5819  06EC  3000               	movlw	0
  5820  06ED  0533               	andwf	multiply_fp@n2+3,w
  5821  06EE  00A7               	movwf	___lmul@multiplicand+3
  5822  06EF  318B  235D  3186   	fcall	___lmul
  5823  06F2  0020               	movlb	0	; select bank0
  5824  06F3  0820               	movf	?___lmul,w
  5825  06F4  00B8               	movwf	??_multiply_fp+4
  5826  06F5  0821               	movf	?___lmul+1,w
  5827  06F6  00B9               	movwf	??_multiply_fp+5
  5828  06F7  0822               	movf	?___lmul+2,w
  5829  06F8  00BA               	movwf	??_multiply_fp+6
  5830  06F9  0823               	movf	?___lmul+3,w
  5831  06FA  00BB               	movwf	??_multiply_fp+7
  5832  06FB  3010               	movlw	16
  5833  06FC  00BC               	movwf	??_multiply_fp+8
  5834  06FD                     u5485:	
  5835  06FD  37BB               	asrf	??_multiply_fp+7,f
  5836  06FE  0CBA               	rrf	??_multiply_fp+6,f
  5837  06FF  0CB9               	rrf	??_multiply_fp+5,f
  5838  0700  0CB8               	rrf	??_multiply_fp+4,f
  5839  0701  0BBC               	decfsz	??_multiply_fp+8,f
  5840  0702  2EFD               	goto	u5485
  5841  0703  0838               	movf	??_multiply_fp+4,w
  5842  0704  05B4               	andwf	??_multiply_fp,f
  5843  0705  0839               	movf	??_multiply_fp+5,w
  5844  0706  05B5               	andwf	??_multiply_fp+1,f
  5845  0707  083A               	movf	??_multiply_fp+6,w
  5846  0708  05B6               	andwf	??_multiply_fp+2,f
  5847  0709  083B               	movf	??_multiply_fp+7,w
  5848  070A  05B7               	andwf	??_multiply_fp+3,f
  5849  070B  0834               	movf	??_multiply_fp,w
  5850  070C  07C2               	addwf	multiply_fp@res,f
  5851  070D  0835               	movf	??_multiply_fp+1,w
  5852  070E  3DC3               	addwfc	multiply_fp@res+1,f
  5853  070F  0836               	movf	??_multiply_fp+2,w
  5854  0710  3DC4               	addwfc	multiply_fp@res+2,f
  5855  0711  0837               	movf	??_multiply_fp+3,w
  5856  0712  3DC5               	addwfc	multiply_fp@res+3,f
  5857                           
  5858                           ;fixed_point.c: 49: return res;
  5859  0713  0845               	movf	multiply_fp@res+3,w
  5860  0714  00AF               	movwf	?_multiply_fp+3
  5861  0715  0844               	movf	multiply_fp@res+2,w
  5862  0716  00AE               	movwf	?_multiply_fp+2
  5863  0717  0843               	movf	multiply_fp@res+1,w
  5864  0718  00AD               	movwf	?_multiply_fp+1
  5865  0719  0842               	movf	multiply_fp@res,w
  5866  071A  00AC               	movwf	?_multiply_fp
  5867  071B  0008               	return
  5868  071C                     __end_of_multiply_fp:	
  5869                           
  5870                           	psect	text10
  5871  0B5D                     __ptext10:	
  5872 ;; *************** function ___lmul *****************
  5873 ;; Defined at:
  5874 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5877 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  product         4    8[BANK0 ] unsigned long 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  4    0[BANK0 ] unsigned long 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5889 ;;      Params:         0       8       0       0       0       0
  5890 ;;      Locals:         0       4       0       0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0
  5892 ;;      Totals:         0      12       0       0       0       0
  5893 ;;Total ram usage:       12 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    6
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_multiply_fp
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           
  5904                           ;psect for function ___lmul
  5905  0B5D                     ___lmul:	
  5906                           
  5907                           ;incstack = 0
  5908                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5909  0B5D  3000               	movlw	0
  5910  0B5E  0020               	movlb	0	; select bank0
  5911  0B5F  00AB               	movwf	___lmul@product+3
  5912  0B60  3000               	movlw	0
  5913  0B61  00AA               	movwf	___lmul@product+2
  5914  0B62  3000               	movlw	0
  5915  0B63  00A9               	movwf	___lmul@product+1
  5916  0B64  3000               	movlw	0
  5917  0B65  00A8               	movwf	___lmul@product
  5918  0B66                     l4116:	
  5919  0B66  1C20               	btfss	___lmul@multiplier,0
  5920  0B67  2B70               	goto	l4120
  5921  0B68  0824               	movf	___lmul@multiplicand,w
  5922  0B69  07A8               	addwf	___lmul@product,f
  5923  0B6A  0825               	movf	___lmul@multiplicand+1,w
  5924  0B6B  3DA9               	addwfc	___lmul@product+1,f
  5925  0B6C  0826               	movf	___lmul@multiplicand+2,w
  5926  0B6D  3DAA               	addwfc	___lmul@product+2,f
  5927  0B6E  0827               	movf	___lmul@multiplicand+3,w
  5928  0B6F  3DAB               	addwfc	___lmul@product+3,f
  5929  0B70                     l4120:	
  5930  0B70  3001               	movlw	1
  5931  0B71                     u4465:	
  5932  0B71  35A4               	lslf	___lmul@multiplicand,f
  5933  0B72  0DA5               	rlf	___lmul@multiplicand+1,f
  5934  0B73  0DA6               	rlf	___lmul@multiplicand+2,f
  5935  0B74  0DA7               	rlf	___lmul@multiplicand+3,f
  5936  0B75  0B89               	decfsz	9,f
  5937  0B76  2B71               	goto	u4465
  5938  0B77  3001               	movlw	1
  5939  0B78                     u4475:	
  5940  0B78  36A3               	lsrf	___lmul@multiplier+3,f
  5941  0B79  0CA2               	rrf	___lmul@multiplier+2,f
  5942  0B7A  0CA1               	rrf	___lmul@multiplier+1,f
  5943  0B7B  0CA0               	rrf	___lmul@multiplier,f
  5944  0B7C  0B89               	decfsz	9,f
  5945  0B7D  2B78               	goto	u4475
  5946  0B7E  0823               	movf	___lmul@multiplier+3,w
  5947  0B7F  0422               	iorwf	___lmul@multiplier+2,w
  5948  0B80  0421               	iorwf	___lmul@multiplier+1,w
  5949  0B81  0420               	iorwf	___lmul@multiplier,w
  5950  0B82  1D03               	skipz
  5951  0B83  2B66               	goto	l4116
  5952  0B84  082B               	movf	___lmul@product+3,w
  5953  0B85  00A3               	movwf	?___lmul+3
  5954  0B86  082A               	movf	___lmul@product+2,w
  5955  0B87  00A2               	movwf	?___lmul+2
  5956  0B88  0829               	movf	___lmul@product+1,w
  5957  0B89  00A1               	movwf	?___lmul+1
  5958  0B8A  0828               	movf	___lmul@product,w
  5959  0B8B  00A0               	movwf	?___lmul
  5960  0B8C  0008               	return
  5961  0B8D                     __end_of___lmul:	
  5962                           
  5963                           	psect	text11
  5964  0D92                     __ptext11:	
  5965 ;; *************** function _load_calibration_from_EEPROM *****************
  5966 ;; Defined at:
  5967 ;;		line 24 in file "calibration.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  crc             2   17[BANK0 ] unsigned short 
  5972 ;;  i               1   21[BANK0 ] unsigned char 
  5973 ;;  p               1   20[BANK0 ] PTR unsigned char 
  5974 ;;		 -> m_crc(2), m_conf(47), 
  5975 ;;  addr            1   19[BANK0 ] unsigned char 
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  1    wreg      unsigned char 
  5978 ;; Registers used:
  5979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5985 ;;      Params:         0       0       0       0       0       0
  5986 ;;      Locals:         0       5       0       0       0       0
  5987 ;;      Temps:          1       0       0       0       0       0
  5988 ;;      Totals:         1       5       0       0       0       0
  5989 ;;Total ram usage:        6 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:    7
  5992 ;; This function calls:
  5993 ;;		_DATAEE_ReadByte
  5994 ;;		_crc_update
  5995 ;; This function is called by:
  5996 ;;		_main
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           
  6001                           ;psect for function _load_calibration_from_EEPROM
  6002  0D92                     _load_calibration_from_EEPROM:	
  6003                           
  6004                           ;calibration.c: 27: unsigned char addr = 0x00;
  6005                           
  6006                           ;incstack = 0
  6007                           ; Regs used in _load_calibration_from_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  6008  0D92  0020               	movlb	0	; select bank0
  6009  0D93  01B3               	clrf	load_calibration_from_EEPROM@addr
  6010                           
  6011                           ;calibration.c: 28: unsigned short crc = 0x00;
  6012  0D94  01B1               	clrf	load_calibration_from_EEPROM@crc
  6013  0D95  01B2               	clrf	load_calibration_from_EEPROM@crc+1
  6014                           
  6015                           ;calibration.c: 29: char i,*p;
  6016                           ;calibration.c: 30: p=(char *)&m_conf;
  6017  0D96  30BC               	movlw	(low (_m_conf| 0))& (0+255)
  6018  0D97  00F5               	movwf	??_load_calibration_from_EEPROM
  6019  0D98  0875               	movf	??_load_calibration_from_EEPROM,w
  6020  0D99  00B4               	movwf	load_calibration_from_EEPROM@p
  6021                           
  6022                           ;calibration.c: 31: for(i=0; i<sizeof(m_conf); i++)
  6023  0D9A  01B5               	clrf	load_calibration_from_EEPROM@i
  6024  0D9B  302F               	movlw	47
  6025  0D9C  0235               	subwf	load_calibration_from_EEPROM@i,w
  6026  0D9D  1803               	btfsc	3,0
  6027  0D9E  2DCD               	goto	l4148
  6028  0D9F                     l4138:	
  6029                           
  6030                           ;calibration.c: 32: {
  6031                           ;calibration.c: 33: *p = DATAEE_ReadByte(addr++);
  6032  0D9F  0833               	movf	load_calibration_from_EEPROM@addr,w
  6033  0DA0  3189  2177  318D   	fcall	_DATAEE_ReadByte
  6034  0DA3  00F5               	movwf	??_load_calibration_from_EEPROM
  6035  0DA4  0020               	movlb	0	; select bank0
  6036  0DA5  0834               	movf	load_calibration_from_EEPROM@p,w
  6037  0DA6  0086               	movwf	6
  6038  0DA7  0187               	clrf	7
  6039  0DA8  0875               	movf	??_load_calibration_from_EEPROM,w
  6040  0DA9  0081               	movwf	1
  6041  0DAA  3001               	movlw	1
  6042  0DAB  00F5               	movwf	??_load_calibration_from_EEPROM
  6043  0DAC  0875               	movf	??_load_calibration_from_EEPROM,w
  6044  0DAD  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  6045                           
  6046                           ;calibration.c: 34: crc = crc_update(crc, *p++);
  6047  0DAE  0832               	movf	load_calibration_from_EEPROM@crc+1,w
  6048  0DAF  00A1               	movwf	crc_update@old_crc+1
  6049  0DB0  0831               	movf	load_calibration_from_EEPROM@crc,w
  6050  0DB1  00A0               	movwf	crc_update@old_crc
  6051  0DB2  0834               	movf	load_calibration_from_EEPROM@p,w
  6052  0DB3  0086               	movwf	6
  6053  0DB4  0187               	clrf	7
  6054  0DB5  0801               	movf	1,w
  6055  0DB6  00F5               	movwf	??_load_calibration_from_EEPROM
  6056  0DB7  0875               	movf	??_load_calibration_from_EEPROM,w
  6057  0DB8  00A2               	movwf	crc_update@data
  6058  0DB9  318C  2412  318D   	fcall	_crc_update
  6059  0DBC  0020               	movlb	0	; select bank0
  6060  0DBD  0821               	movf	?_crc_update+1,w
  6061  0DBE  00B2               	movwf	load_calibration_from_EEPROM@crc+1
  6062  0DBF  0820               	movf	?_crc_update,w
  6063  0DC0  00B1               	movwf	load_calibration_from_EEPROM@crc
  6064  0DC1  3001               	movlw	1
  6065  0DC2  00F5               	movwf	??_load_calibration_from_EEPROM
  6066  0DC3  0875               	movf	??_load_calibration_from_EEPROM,w
  6067  0DC4  07B4               	addwf	load_calibration_from_EEPROM@p,f
  6068  0DC5  3001               	movlw	1
  6069  0DC6  00F5               	movwf	??_load_calibration_from_EEPROM
  6070  0DC7  0875               	movf	??_load_calibration_from_EEPROM,w
  6071  0DC8  07B5               	addwf	load_calibration_from_EEPROM@i,f
  6072  0DC9  302F               	movlw	47
  6073  0DCA  0235               	subwf	load_calibration_from_EEPROM@i,w
  6074  0DCB  1C03               	skipc
  6075  0DCC  2D9F               	goto	l4138
  6076  0DCD                     l4148:	
  6077                           
  6078                           ;calibration.c: 35: }
  6079                           ;calibration.c: 36: p=(char *)&m_crc;
  6080  0DCD  30EB               	movlw	(low (_m_crc| 0))& (0+255)
  6081  0DCE  00F5               	movwf	??_load_calibration_from_EEPROM
  6082  0DCF  0875               	movf	??_load_calibration_from_EEPROM,w
  6083  0DD0  00B4               	movwf	load_calibration_from_EEPROM@p
  6084                           
  6085                           ;calibration.c: 37: for(i=0; i<sizeof(m_crc); i++)
  6086  0DD1  01B5               	clrf	load_calibration_from_EEPROM@i
  6087  0DD2  3002               	movlw	2
  6088  0DD3  0235               	subwf	load_calibration_from_EEPROM@i,w
  6089  0DD4  1803               	btfsc	3,0
  6090  0DD5  2DF1               	goto	l4166
  6091  0DD6                     l4156:	
  6092                           
  6093                           ;calibration.c: 38: *p++ = DATAEE_ReadByte(addr++);
  6094  0DD6  0833               	movf	load_calibration_from_EEPROM@addr,w
  6095  0DD7  3189  2177  318D   	fcall	_DATAEE_ReadByte
  6096  0DDA  00F5               	movwf	??_load_calibration_from_EEPROM
  6097  0DDB  0020               	movlb	0	; select bank0
  6098  0DDC  0834               	movf	load_calibration_from_EEPROM@p,w
  6099  0DDD  0086               	movwf	6
  6100  0DDE  0187               	clrf	7
  6101  0DDF  0875               	movf	??_load_calibration_from_EEPROM,w
  6102  0DE0  0081               	movwf	1
  6103  0DE1  3001               	movlw	1
  6104  0DE2  00F5               	movwf	??_load_calibration_from_EEPROM
  6105  0DE3  0875               	movf	??_load_calibration_from_EEPROM,w
  6106  0DE4  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  6107  0DE5  3001               	movlw	1
  6108  0DE6  00F5               	movwf	??_load_calibration_from_EEPROM
  6109  0DE7  0875               	movf	??_load_calibration_from_EEPROM,w
  6110  0DE8  07B4               	addwf	load_calibration_from_EEPROM@p,f
  6111  0DE9  3001               	movlw	1
  6112  0DEA  00F5               	movwf	??_load_calibration_from_EEPROM
  6113  0DEB  0875               	movf	??_load_calibration_from_EEPROM,w
  6114  0DEC  07B5               	addwf	load_calibration_from_EEPROM@i,f
  6115  0DED  3002               	movlw	2
  6116  0DEE  0235               	subwf	load_calibration_from_EEPROM@i,w
  6117  0DEF  1C03               	skipc
  6118  0DF0  2DD6               	goto	l4156
  6119  0DF1                     l4166:	
  6120                           
  6121                           ;calibration.c: 39: return (crc == m_crc);
  6122  0DF1  0021               	movlb	1	; select bank1
  6123  0DF2  086C               	movf	(_m_crc+1)^(0+128),w
  6124  0DF3  0020               	movlb	0	; select bank0
  6125  0DF4  0632               	xorwf	load_calibration_from_EEPROM@crc+1,w
  6126  0DF5  1D03               	skipz
  6127  0DF6  2DFB               	goto	u4535
  6128  0DF7  0021               	movlb	1	; select bank1
  6129  0DF8  086B               	movf	_m_crc^(0+128),w
  6130  0DF9  0020               	movlb	0	; select bank0
  6131  0DFA  0631               	xorwf	load_calibration_from_EEPROM@crc,w
  6132  0DFB                     u4535:	
  6133  0DFB  1D03               	btfss	3,2
  6134  0DFC  2DFF               	goto	u4530
  6135  0DFD  3001               	movlw	1
  6136  0DFE  0008               	return
  6137  0DFF                     u4530:	
  6138  0DFF  3000               	movlw	0
  6139  0E00  0008               	return
  6140  0E01                     __end_of_load_calibration_from_EEPROM:	
  6141                           
  6142                           	psect	text12
  6143  0C12                     __ptext12:	
  6144 ;; *************** function _crc_update *****************
  6145 ;; Defined at:
  6146 ;;		line 11 in file "CRC.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  old_crc         2    0[BANK0 ] unsigned short 
  6149 ;;  data            1    2[BANK0 ] unsigned char 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  x               2   15[BANK0 ] unsigned short 
  6152 ;;  crc             2   13[BANK0 ] unsigned short 
  6153 ;; Return value:  Size  Location     Type
  6154 ;;                  2    0[BANK0 ] unsigned short 
  6155 ;; Registers used:
  6156 ;;		wreg, status,2, status,0
  6157 ;; Tracked objects:
  6158 ;;		On entry : 0/0
  6159 ;;		On exit  : 0/0
  6160 ;;		Unchanged: 0/0
  6161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6162 ;;      Params:         0       3       0       0       0       0
  6163 ;;      Locals:         0       4       0       0       0       0
  6164 ;;      Temps:          0      10       0       0       0       0
  6165 ;;      Totals:         0      17       0       0       0       0
  6166 ;;Total ram usage:       17 bytes
  6167 ;; Hardware stack levels used:    1
  6168 ;; Hardware stack levels required when called:    6
  6169 ;; This function calls:
  6170 ;;		Nothing
  6171 ;; This function is called by:
  6172 ;;		_load_calibration_from_EEPROM
  6173 ;;		_write_calibration_to_EEPROM
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function _crc_update
  6179  0C12                     _crc_update:	
  6180                           
  6181                           ;CRC.c: 13: unsigned short crc;
  6182                           ;CRC.c: 14: unsigned short x;
  6183                           ;CRC.c: 16: x = ((old_crc>>8) ^ data) & 0xff;
  6184                           
  6185                           ;incstack = 0
  6186                           ; Regs used in _crc_update: [wreg+status,2+status,0]
  6187  0C12  0020               	movlb	0	; select bank0
  6188  0C13  0822               	movf	crc_update@data,w
  6189  0C14  00A3               	movwf	??_crc_update
  6190  0C15  01A4               	clrf	??_crc_update+1
  6191  0C16  0821               	movf	crc_update@old_crc+1,w
  6192  0C17  00A6               	movwf	??_crc_update+3
  6193  0C18  0820               	movf	crc_update@old_crc,w
  6194  0C19  00A5               	movwf	??_crc_update+2
  6195  0C1A  0826               	movf	??_crc_update+3,w
  6196  0C1B  00A5               	movwf	??_crc_update+2
  6197  0C1C  01A6               	clrf	??_crc_update+3
  6198  0C1D  0823               	movf	??_crc_update,w
  6199  0C1E  0625               	xorwf	??_crc_update+2,w
  6200  0C1F  00A7               	movwf	??_crc_update+4
  6201  0C20  0824               	movf	??_crc_update+1,w
  6202  0C21  0626               	xorwf	??_crc_update+3,w
  6203  0C22  00A8               	movwf	??_crc_update+5
  6204  0C23  30FF               	movlw	255
  6205  0C24  0527               	andwf	??_crc_update+4,w
  6206  0C25  00AF               	movwf	crc_update@x
  6207  0C26  3000               	movlw	0
  6208  0C27  0528               	andwf	??_crc_update+5,w
  6209  0C28  00B0               	movwf	crc_update@x+1
  6210                           
  6211                           ;CRC.c: 17: x ^= x>>4;
  6212  0C29  0830               	movf	crc_update@x+1,w
  6213  0C2A  00A4               	movwf	??_crc_update+1
  6214  0C2B  082F               	movf	crc_update@x,w
  6215  0C2C  00A3               	movwf	??_crc_update
  6216  0C2D  3004               	movlw	4
  6217  0C2E                     u4395:	
  6218  0C2E  36A4               	lsrf	??_crc_update+1,f
  6219  0C2F  0CA3               	rrf	??_crc_update,f
  6220  0C30  0B89               	decfsz	9,f
  6221  0C31  2C2E               	goto	u4395
  6222  0C32  0823               	movf	??_crc_update,w
  6223  0C33  06AF               	xorwf	crc_update@x,f
  6224  0C34  0824               	movf	??_crc_update+1,w
  6225  0C35  06B0               	xorwf	crc_update@x+1,f
  6226                           
  6227                           ;CRC.c: 19: crc = (old_crc << 8) ^ (x << 12) ^ (x <<5) ^ x;
  6228  0C36  0830               	movf	crc_update@x+1,w
  6229  0C37  00A4               	movwf	??_crc_update+1
  6230  0C38  082F               	movf	crc_update@x,w
  6231  0C39  00A3               	movwf	??_crc_update
  6232  0C3A  3005               	movlw	5
  6233  0C3B                     u4405:	
  6234  0C3B  35A3               	lslf	??_crc_update,f
  6235  0C3C  0DA4               	rlf	??_crc_update+1,f
  6236  0C3D  0B89               	decfsz	9,f
  6237  0C3E  2C3B               	goto	u4405
  6238  0C3F  0830               	movf	crc_update@x+1,w
  6239  0C40  00A6               	movwf	??_crc_update+3
  6240  0C41  082F               	movf	crc_update@x,w
  6241  0C42  00A5               	movwf	??_crc_update+2
  6242  0C43  0E25               	swapf	??_crc_update+2,w
  6243  0C44  39F0               	andlw	240
  6244  0C45  00A6               	movwf	??_crc_update+3
  6245  0C46  01A5               	clrf	??_crc_update+2
  6246  0C47  0820               	movf	crc_update@old_crc,w
  6247  0C48  00A8               	movwf	??_crc_update+5
  6248  0C49  01A7               	clrf	??_crc_update+4
  6249  0C4A  0825               	movf	??_crc_update+2,w
  6250  0C4B  0627               	xorwf	??_crc_update+4,w
  6251  0C4C  00A9               	movwf	??_crc_update+6
  6252  0C4D  0826               	movf	??_crc_update+3,w
  6253  0C4E  0628               	xorwf	??_crc_update+5,w
  6254  0C4F  00AA               	movwf	??_crc_update+7
  6255  0C50  0823               	movf	??_crc_update,w
  6256  0C51  0629               	xorwf	??_crc_update+6,w
  6257  0C52  00AB               	movwf	??_crc_update+8
  6258  0C53  0824               	movf	??_crc_update+1,w
  6259  0C54  062A               	xorwf	??_crc_update+7,w
  6260  0C55  00AC               	movwf	??_crc_update+9
  6261  0C56  082F               	movf	crc_update@x,w
  6262  0C57  062B               	xorwf	??_crc_update+8,w
  6263  0C58  00AD               	movwf	crc_update@crc
  6264  0C59  0830               	movf	crc_update@x+1,w
  6265  0C5A  062C               	xorwf	??_crc_update+9,w
  6266  0C5B  00AE               	movwf	crc_update@crc+1
  6267                           
  6268                           ;CRC.c: 21: return crc;
  6269  0C5C  082E               	movf	crc_update@crc+1,w
  6270  0C5D  00A1               	movwf	?_crc_update+1
  6271  0C5E  082D               	movf	crc_update@crc,w
  6272  0C5F  00A0               	movwf	?_crc_update
  6273  0C60  0008               	return
  6274  0C61                     __end_of_crc_update:	
  6275                           
  6276                           	psect	text13
  6277  0977                     __ptext13:	
  6278 ;; *************** function _DATAEE_ReadByte *****************
  6279 ;; Defined at:
  6280 ;;		line 204 in file "mcc_generated_files/memory.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  bAdd            1    wreg     unsigned char 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  bAdd            1    4[COMMON] unsigned char 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      unsigned char 
  6287 ;; Registers used:
  6288 ;;		wreg
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6294 ;;      Params:         0       0       0       0       0       0
  6295 ;;      Locals:         1       0       0       0       0       0
  6296 ;;      Temps:          0       0       0       0       0       0
  6297 ;;      Totals:         1       0       0       0       0       0
  6298 ;;Total ram usage:        1 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    6
  6301 ;; This function calls:
  6302 ;;		Nothing
  6303 ;; This function is called by:
  6304 ;;		_load_calibration_from_EEPROM
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           
  6309                           ;psect for function _DATAEE_ReadByte
  6310  0977                     _DATAEE_ReadByte:	
  6311                           
  6312                           ;incstack = 0
  6313                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6314                           ;DATAEE_ReadByte@bAdd stored from wreg
  6315  0977  00F4               	movwf	DATAEE_ReadByte@bAdd
  6316                           
  6317                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6318  0978  0874               	movf	DATAEE_ReadByte@bAdd,w
  6319  0979  0023               	movlb	3	; select bank3
  6320  097A  0091               	movwf	17	;volatile
  6321                           
  6322                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6323  097B  1315               	bcf	21,6	;volsfr
  6324                           
  6325                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6326  097C  1395               	bcf	21,7	;volsfr
  6327                           
  6328                           ;memory.c: 209: EECON1bits.RD = 1;
  6329  097D  1415               	bsf	21,0	;volsfr
  6330                           
  6331                           ;memory.c: 210: __nop();
  6332  097E  0000               	nop
  6333                           
  6334                           ;memory.c: 211: __nop();
  6335  097F  0000               	nop
  6336                           
  6337                           ;memory.c: 213: return (EEDATL);
  6338  0980  0023               	movlb	3	; select bank3
  6339  0981  0813               	movf	19,w	;volatile
  6340  0982  0008               	return
  6341  0983                     __end_of_DATAEE_ReadByte:	
  6342                           
  6343                           	psect	text14
  6344  0D27                     __ptext14:	
  6345 ;; *************** function _integer_part *****************
  6346 ;; Defined at:
  6347 ;;		line 87 in file "fixed_point.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  n               4   25[BANK0 ] long 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  and_a_half      4   34[BANK0 ] long 
  6352 ;;  int_part        2   39[BANK0 ] unsigned short 
  6353 ;;  neg             1   38[BANK0 ] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  2   25[BANK0 ] short 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6363 ;;      Params:         0       4       0       0       0       0
  6364 ;;      Locals:         0       7       0       0       0       0
  6365 ;;      Temps:          0       5       0       0       0       0
  6366 ;;      Totals:         0      16       0       0       0       0
  6367 ;;Total ram usage:       16 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    7
  6370 ;; This function calls:
  6371 ;;		_convert_to_fp
  6372 ;; This function is called by:
  6373 ;;		_main
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _integer_part
  6379  0D27                     _integer_part:	
  6380                           
  6381                           ;fixed_point.c: 89: bool neg = (n<0);
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _integer_part: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6385  0D27  0020               	movlb	0	; select bank0
  6386  0D28  1FBC               	btfss	integer_part@n+3,7
  6387  0D29  2D2C               	goto	u5490
  6388  0D2A  3001               	movlw	1
  6389  0D2B  2D2D               	goto	u5500
  6390  0D2C                     u5490:	
  6391  0D2C  3000               	movlw	0
  6392  0D2D                     u5500:	
  6393  0D2D  00BD               	movwf	??_integer_part
  6394  0D2E  083D               	movf	??_integer_part,w
  6395  0D2F  00C6               	movwf	integer_part@neg
  6396                           
  6397                           ;fixed_point.c: 90: if (neg)
  6398  0D30  0846               	movf	integer_part@neg,w
  6399  0D31  1903               	btfsc	3,2
  6400  0D32  2D3E               	goto	l4734
  6401                           
  6402                           ;fixed_point.c: 91: n = -n;
  6403  0D33  09B9               	comf	integer_part@n,f
  6404  0D34  09BA               	comf	integer_part@n+1,f
  6405  0D35  09BB               	comf	integer_part@n+2,f
  6406  0D36  09BC               	comf	integer_part@n+3,f
  6407  0D37  0AB9               	incf	integer_part@n,f
  6408  0D38  1903               	skipnz
  6409  0D39  0ABA               	incf	integer_part@n+1,f
  6410  0D3A  1903               	skipnz
  6411  0D3B  0ABB               	incf	integer_part@n+2,f
  6412  0D3C  1903               	skipnz
  6413  0D3D  0ABC               	incf	integer_part@n+3,f
  6414  0D3E                     l4734:	
  6415                           
  6416                           ;fixed_point.c: 92: unsigned short int_part = n >> 16;
  6417  0D3E  0839               	movf	integer_part@n,w
  6418  0D3F  00BD               	movwf	??_integer_part
  6419  0D40  083A               	movf	integer_part@n+1,w
  6420  0D41  00BE               	movwf	??_integer_part+1
  6421  0D42  083B               	movf	integer_part@n+2,w
  6422  0D43  00BF               	movwf	??_integer_part+2
  6423  0D44  083C               	movf	integer_part@n+3,w
  6424  0D45  00C0               	movwf	??_integer_part+3
  6425  0D46  3010               	movlw	16
  6426  0D47  00C1               	movwf	??_integer_part+4
  6427  0D48                     u5525:	
  6428  0D48  37C0               	asrf	??_integer_part+3,f
  6429  0D49  0CBF               	rrf	??_integer_part+2,f
  6430  0D4A  0CBE               	rrf	??_integer_part+1,f
  6431  0D4B  0CBD               	rrf	??_integer_part,f
  6432  0D4C  0BC1               	decfsz	??_integer_part+4,f
  6433  0D4D  2D48               	goto	u5525
  6434  0D4E  083E               	movf	??_integer_part+1,w
  6435  0D4F  00C8               	movwf	integer_part@int_part+1
  6436  0D50  083D               	movf	??_integer_part,w
  6437  0D51  00C7               	movwf	integer_part@int_part
  6438                           
  6439                           ;fixed_point.c: 93: t_fp and_a_half = convert_to_fp(int_part, 5000);
  6440  0D52  0848               	movf	integer_part@int_part+1,w
  6441  0D53  00A5               	movwf	convert_to_fp@int_part+1
  6442  0D54  0847               	movf	integer_part@int_part,w
  6443  0D55  00A4               	movwf	convert_to_fp@int_part
  6444  0D56  3088               	movlw	136
  6445  0D57  00A6               	movwf	convert_to_fp@fract_part
  6446  0D58  3013               	movlw	19
  6447  0D59  00A7               	movwf	convert_to_fp@fract_part+1
  6448  0D5A  3187  271C  318D   	fcall	_convert_to_fp
  6449  0D5D  0020               	movlb	0	; select bank0
  6450  0D5E  0827               	movf	?_convert_to_fp+3,w
  6451  0D5F  00C5               	movwf	integer_part@and_a_half+3
  6452  0D60  0826               	movf	?_convert_to_fp+2,w
  6453  0D61  00C4               	movwf	integer_part@and_a_half+2
  6454  0D62  0825               	movf	?_convert_to_fp+1,w
  6455  0D63  00C3               	movwf	integer_part@and_a_half+1
  6456  0D64  0824               	movf	?_convert_to_fp,w
  6457  0D65  00C2               	movwf	integer_part@and_a_half
  6458                           
  6459                           ;fixed_point.c: 94: if (n > and_a_half)
  6460  0D66  0845               	movf	integer_part@and_a_half+3,w
  6461  0D67  3A80               	xorlw	128
  6462  0D68  00BD               	movwf	??_integer_part
  6463  0D69  083C               	movf	integer_part@n+3,w
  6464  0D6A  3A80               	xorlw	128
  6465  0D6B  023D               	subwf	??_integer_part,w
  6466  0D6C  1D03               	skipz
  6467  0D6D  2D78               	goto	u5533
  6468  0D6E  083B               	movf	integer_part@n+2,w
  6469  0D6F  0244               	subwf	integer_part@and_a_half+2,w
  6470  0D70  1D03               	skipz
  6471  0D71  2D78               	goto	u5533
  6472  0D72  083A               	movf	integer_part@n+1,w
  6473  0D73  0243               	subwf	integer_part@and_a_half+1,w
  6474  0D74  1D03               	skipz
  6475  0D75  2D78               	goto	u5533
  6476  0D76  0839               	movf	integer_part@n,w
  6477  0D77  0242               	subwf	integer_part@and_a_half,w
  6478  0D78                     u5533:	
  6479  0D78  1803               	skipnc
  6480  0D79  2D7E               	goto	l4742
  6481                           
  6482                           ;fixed_point.c: 95: int_part++;
  6483  0D7A  3001               	movlw	1
  6484  0D7B  07C7               	addwf	integer_part@int_part,f
  6485  0D7C  3000               	movlw	0
  6486  0D7D  3DC8               	addwfc	integer_part@int_part+1,f
  6487  0D7E                     l4742:	
  6488                           
  6489                           ;fixed_point.c: 96: if (neg)
  6490  0D7E  0846               	movf	integer_part@neg,w
  6491  0D7F  1903               	btfsc	3,2
  6492  0D80  2D8D               	goto	l4750
  6493                           
  6494                           ;fixed_point.c: 97: return -int_part;
  6495  0D81  0947               	comf	integer_part@int_part,w
  6496  0D82  00BD               	movwf	??_integer_part
  6497  0D83  0948               	comf	integer_part@int_part+1,w
  6498  0D84  00BE               	movwf	??_integer_part+1
  6499  0D85  0ABD               	incf	??_integer_part,f
  6500  0D86  1903               	skipnz
  6501  0D87  0ABE               	incf	??_integer_part+1,f
  6502  0D88  083D               	movf	??_integer_part,w
  6503  0D89  00B9               	movwf	?_integer_part
  6504  0D8A  083E               	movf	??_integer_part+1,w
  6505  0D8B  00BA               	movwf	?_integer_part+1
  6506  0D8C  0008               	return
  6507  0D8D                     l4750:	
  6508                           
  6509                           ;fixed_point.c: 98: else
  6510                           ;fixed_point.c: 99: return int_part;
  6511  0D8D  0848               	movf	integer_part@int_part+1,w
  6512  0D8E  00BA               	movwf	?_integer_part+1
  6513  0D8F  0847               	movf	integer_part@int_part,w
  6514  0D90  00B9               	movwf	?_integer_part
  6515  0D91  0008               	return
  6516  0D92                     __end_of_integer_part:	
  6517                           
  6518                           	psect	text15
  6519  09BC                     __ptext15:	
  6520 ;; *************** function _delay_ms *****************
  6521 ;; Defined at:
  6522 ;;		line 213 in file "main.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;  milliseconds    2    4[COMMON] unsigned short 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, status,2, status,0
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6536 ;;      Params:         2       0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0
  6538 ;;      Temps:          0       2       0       0       0       0
  6539 ;;      Totals:         2       2       0       0       0       0
  6540 ;;Total ram usage:        4 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    6
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_main
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           
  6551                           ;psect for function _delay_ms
  6552  09BC                     _delay_ms:	
  6553  09BC                     l4758:	
  6554                           ;main.c: 215: while(milliseconds > 0)
  6555                           
  6556                           ;incstack = 0
  6557                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
  6558                           
  6559  09BC  0874               	movf	delay_ms@milliseconds,w
  6560  09BD  0475               	iorwf	delay_ms@milliseconds+1,w
  6561  09BE  1903               	btfsc	3,2
  6562  09BF  0008               	return
  6563                           
  6564                           ;main.c: 216: {
  6565                           ;main.c: 217: _delay((unsigned long)((1)*(32000000/4000.0)));
  6566  09C0  300B               	movlw	11
  6567  09C1  0020               	movlb	0	; select bank0
  6568  09C2  00A1               	movwf	??_delay_ms+1
  6569  09C3  3062               	movlw	98
  6570  09C4  00A0               	movwf	??_delay_ms
  6571  09C5                     u6057:	
  6572  09C5  0BA0               	decfsz	??_delay_ms,f
  6573  09C6  29C5               	goto	u6057
  6574  09C7  0BA1               	decfsz	??_delay_ms+1,f
  6575  09C8  29C5               	goto	u6057
  6576  09C9  0000               	nop
  6577                           
  6578                           ;main.c: 218: milliseconds--;
  6579  09CA  3001               	movlw	1
  6580  09CB  02F4               	subwf	delay_ms@milliseconds,f
  6581  09CC  3000               	movlw	0
  6582  09CD  3BF5               	subwfb	delay_ms@milliseconds+1,f
  6583  09CE  29BC               	goto	l4758
  6584  09CF                     __end_of_delay_ms:	
  6585                           
  6586                           	psect	text16
  6587  09AA                     __ptext16:	
  6588 ;; *************** function _SYSTEM_Initialize *****************
  6589 ;; Defined at:
  6590 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, pclath, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6604 ;;      Params:         0       0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0
  6607 ;;      Totals:         0       0       0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    8
  6611 ;; This function calls:
  6612 ;;		_EPWM1_Initialize
  6613 ;;		_EUSART_Initialize
  6614 ;;		_OSCILLATOR_Initialize
  6615 ;;		_PIN_MANAGER_Initialize
  6616 ;;		_TMR0_Initialize
  6617 ;;		_TMR2_Initialize
  6618 ;; This function is called by:
  6619 ;;		_main
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _SYSTEM_Initialize
  6625  09AA                     _SYSTEM_Initialize:	
  6626                           
  6627                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6631  09AA  3189  21FA  3189   	fcall	_PIN_MANAGER_Initialize
  6632                           
  6633                           ;mcc.c: 73: OSCILLATOR_Initialize();
  6634  09AD  3189  214E  3189   	fcall	_OSCILLATOR_Initialize
  6635                           
  6636                           ;mcc.c: 74: EPWM1_Initialize();
  6637  09B0  3189  219C  3189   	fcall	_EPWM1_Initialize
  6638                           
  6639                           ;mcc.c: 75: TMR2_Initialize();
  6640  09B3  3189  2156  3189   	fcall	_TMR2_Initialize
  6641                           
  6642                           ;mcc.c: 76: TMR0_Initialize();
  6643  09B6  3189  21CF  3189   	fcall	_TMR0_Initialize
  6644                           
  6645                           ;mcc.c: 77: EUSART_Initialize();
  6646  09B9  318A  222C         	fcall	_EUSART_Initialize
  6647  09BB  0008               	return
  6648  09BC                     __end_of_SYSTEM_Initialize:	
  6649                           
  6650                           	psect	text17
  6651  0956                     __ptext17:	
  6652 ;; *************** function _TMR2_Initialize *****************
  6653 ;; Defined at:
  6654 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, status,2, status,0, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6668 ;;      Params:         0       0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0
  6671 ;;      Totals:         0       0       0       0       0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    7
  6675 ;; This function calls:
  6676 ;;		_TMR2_StartTimer
  6677 ;; This function is called by:
  6678 ;;		_SYSTEM_Initialize
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _TMR2_Initialize
  6684  0956                     _TMR2_Initialize:	
  6685                           
  6686                           ;tmr2.c: 62: T2CON = 0x02;
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6690  0956  3002               	movlw	2
  6691  0957  0020               	movlb	0	; select bank0
  6692  0958  009C               	movwf	28	;volatile
  6693                           
  6694                           ;tmr2.c: 65: PR2 = 0xFF;
  6695  0959  30FF               	movlw	255
  6696  095A  009B               	movwf	27	;volatile
  6697                           
  6698                           ;tmr2.c: 68: TMR2 = 0x00;
  6699  095B  019A               	clrf	26	;volatile
  6700                           
  6701                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  6702  095C  1091               	bcf	17,1	;volatile
  6703                           
  6704                           ;tmr2.c: 74: TMR2_StartTimer();
  6705  095D  3189  2133         	fcall	_TMR2_StartTimer
  6706  095F  0008               	return
  6707  0960                     __end_of_TMR2_Initialize:	
  6708                           
  6709                           	psect	text18
  6710  0933                     __ptext18:	
  6711 ;; *************** function _TMR2_StartTimer *****************
  6712 ;; Defined at:
  6713 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;		None
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;		None
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  1    wreg      void 
  6720 ;; Registers used:
  6721 ;;		None
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6727 ;;      Params:         0       0       0       0       0       0
  6728 ;;      Locals:         0       0       0       0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0
  6730 ;;      Totals:         0       0       0       0       0       0
  6731 ;;Total ram usage:        0 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    6
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_TMR2_Initialize
  6738 ;;		_main
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _TMR2_StartTimer
  6744  0933                     _TMR2_StartTimer:	
  6745                           
  6746                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _TMR2_StartTimer: []
  6750  0933  0020               	movlb	0	; select bank0
  6751  0934  151C               	bsf	28,2	;volatile
  6752  0935  0008               	return
  6753  0936                     __end_of_TMR2_StartTimer:	
  6754                           
  6755                           	psect	text19
  6756  09CF                     __ptext19:	
  6757 ;; *************** function _TMR0_Initialize *****************
  6758 ;; Defined at:
  6759 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      void 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0, pclath, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6773 ;;      Params:         0       0       0       0       0       0
  6774 ;;      Locals:         0       0       0       0       0       0
  6775 ;;      Temps:          0       1       0       0       0       0
  6776 ;;      Totals:         0       1       0       0       0       0
  6777 ;;Total ram usage:        1 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    7
  6780 ;; This function calls:
  6781 ;;		_TMR0_SetInterruptHandler
  6782 ;; This function is called by:
  6783 ;;		_SYSTEM_Initialize
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           
  6788                           ;psect for function _TMR0_Initialize
  6789  09CF                     _TMR0_Initialize:	
  6790                           
  6791                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  6792                           
  6793                           ;incstack = 0
  6794                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6795  09CF  0021               	movlb	1	; select bank1
  6796  09D0  0815               	movf	21,w	;volatile
  6797  09D1  39C0               	andlw	192
  6798  09D2  3817               	iorlw	23
  6799  09D3  0095               	movwf	21	;volatile
  6800                           
  6801                           ;tmr0.c: 71: TMR0 = 0x64;
  6802  09D4  3064               	movlw	100
  6803  09D5  0020               	movlb	0	; select bank0
  6804  09D6  0095               	movwf	21	;volatile
  6805                           
  6806                           ;tmr0.c: 74: timer0ReloadVal= 100;
  6807  09D7  3064               	movlw	100
  6808  09D8  00A0               	movwf	??_TMR0_Initialize
  6809  09D9  0820               	movf	??_TMR0_Initialize,w
  6810  09DA  00F9               	movwf	_timer0ReloadVal	;volatile
  6811                           
  6812                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6813  09DB  110B               	bcf	11,2	;volatile
  6814                           
  6815                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  6816  09DC  168B               	bsf	11,5	;volatile
  6817                           
  6818                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6819  09DD  3003               	movlw	low _TMR0_DefaultInterruptHandler
  6820  09DE  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  6821  09DF  3000               	movlw	high _TMR0_DefaultInterruptHandler
  6822  09E0  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  6823  09E1  3189  2142         	fcall	_TMR0_SetInterruptHandler
  6824  09E3  0008               	return
  6825  09E4                     __end_of_TMR0_Initialize:	
  6826                           
  6827                           	psect	text20
  6828  0942                     __ptext20:	
  6829 ;; *************** function _TMR0_SetInterruptHandler *****************
  6830 ;; Defined at:
  6831 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  InterruptHan    2    4[COMMON] PTR void 
  6834 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;		None
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  1    wreg      void 
  6839 ;; Registers used:
  6840 ;;		wreg
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6846 ;;      Params:         2       0       0       0       0       0
  6847 ;;      Locals:         0       0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0
  6849 ;;      Totals:         2       0       0       0       0       0
  6850 ;;Total ram usage:        2 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    6
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_TMR0_Initialize
  6857 ;;		_main
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           
  6862                           ;psect for function _TMR0_SetInterruptHandler
  6863  0942                     _TMR0_SetInterruptHandler:	
  6864                           
  6865                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  6866                           
  6867                           ;incstack = 0
  6868                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6869  0942  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  6870  0943  0021               	movlb	1	; select bank1
  6871  0944  00B7               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  6872  0945  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  6873  0946  00B6               	movwf	_TMR0_InterruptHandler^(0+128)
  6874  0947  0008               	return
  6875  0948                     __end_of_TMR0_SetInterruptHandler:	
  6876                           
  6877                           	psect	text21
  6878  09FA                     __ptext21:	
  6879 ;; *************** function _PIN_MANAGER_Initialize *****************
  6880 ;; Defined at:
  6881 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6895 ;;      Params:         0       0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0
  6898 ;;      Totals:         0       0       0       0       0       0
  6899 ;;Total ram usage:        0 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    6
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_SYSTEM_Initialize
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function _PIN_MANAGER_Initialize
  6911  09FA                     _PIN_MANAGER_Initialize:	
  6912                           
  6913                           ;pin_manager.c: 51: LATB = 0x0;
  6914                           
  6915                           ;incstack = 0
  6916                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6917  09FA  0022               	movlb	2	; select bank2
  6918  09FB  018D               	clrf	13	;volatile
  6919                           
  6920                           ;pin_manager.c: 52: LATA = 0x0;
  6921  09FC  018C               	clrf	12	;volatile
  6922                           
  6923                           ;pin_manager.c: 53: ANSELA = 0x1F;
  6924  09FD  301F               	movlw	31
  6925  09FE  0023               	movlb	3	; select bank3
  6926  09FF  008C               	movwf	12	;volatile
  6927                           
  6928                           ;pin_manager.c: 54: ANSELB = 0xF0;
  6929  0A00  30F0               	movlw	240
  6930  0A01  008D               	movwf	13	;volatile
  6931                           
  6932                           ;pin_manager.c: 55: WPUA = 0x20;
  6933  0A02  3020               	movlw	32
  6934  0A03  0024               	movlb	4	; select bank4
  6935  0A04  008C               	movwf	12	;volatile
  6936                           
  6937                           ;pin_manager.c: 56: WPUB = 0xFF;
  6938  0A05  30FF               	movlw	255
  6939  0A06  008D               	movwf	13	;volatile
  6940                           
  6941                           ;pin_manager.c: 57: TRISB = 0xF7;
  6942  0A07  30F7               	movlw	247
  6943  0A08  0021               	movlb	1	; select bank1
  6944  0A09  008D               	movwf	13	;volatile
  6945                           
  6946                           ;pin_manager.c: 58: TRISA = 0xFB;
  6947  0A0A  30FB               	movlw	251
  6948  0A0B  008C               	movwf	12	;volatile
  6949                           
  6950                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  6951  0A0C  1395               	bcf	21,7	;volatile
  6952                           
  6953                           ;pin_manager.c: 61: APFCON0 = 0x00;
  6954  0A0D  0022               	movlb	2	; select bank2
  6955  0A0E  019D               	clrf	29	;volatile
  6956                           
  6957                           ;pin_manager.c: 62: APFCON1 = 0x00;
  6958  0A0F  019E               	clrf	30	;volatile
  6959  0A10  0008               	return
  6960  0A11                     __end_of_PIN_MANAGER_Initialize:	
  6961                           
  6962                           	psect	text22
  6963  094E                     __ptext22:	
  6964 ;; *************** function _OSCILLATOR_Initialize *****************
  6965 ;; Defined at:
  6966 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;		None
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;		None
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  1    wreg      void 
  6973 ;; Registers used:
  6974 ;;		wreg, status,2
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6980 ;;      Params:         0       0       0       0       0       0
  6981 ;;      Locals:         0       0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0
  6983 ;;      Totals:         0       0       0       0       0       0
  6984 ;;Total ram usage:        0 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    6
  6987 ;; This function calls:
  6988 ;;		Nothing
  6989 ;; This function is called by:
  6990 ;;		_SYSTEM_Initialize
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           
  6995                           ;psect for function _OSCILLATOR_Initialize
  6996  094E                     _OSCILLATOR_Initialize:	
  6997                           
  6998                           ;mcc.c: 83: OSCCON = 0x70;
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7002  094E  3070               	movlw	112
  7003  094F  0021               	movlb	1	; select bank1
  7004  0950  0099               	movwf	25	;volatile
  7005                           
  7006                           ;mcc.c: 85: OSCSTAT = 0x00;
  7007  0951  019A               	clrf	26	;volatile
  7008                           
  7009                           ;mcc.c: 87: OSCTUNE = 0x00;
  7010  0952  0198               	clrf	24	;volatile
  7011  0953                     l28:	
  7012                           ;mcc.c: 92: {
  7013                           
  7014                           ;mcc.c: 91: while(PLLR == 0)
  7015                           
  7016  0953  1B1A               	btfsc	26,6	;volatile
  7017  0954  0008               	return
  7018  0955  2953               	goto	l28
  7019  0956                     __end_of_OSCILLATOR_Initialize:	
  7020                           
  7021                           	psect	text23
  7022  0A2C                     __ptext23:	
  7023 ;; *************** function _EUSART_Initialize *****************
  7024 ;; Defined at:
  7025 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, status,2
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7039 ;;      Params:         0       0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0
  7041 ;;      Temps:          1       0       0       0       0       0
  7042 ;;      Totals:         1       0       0       0       0       0
  7043 ;;Total ram usage:        1 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    6
  7046 ;; This function calls:
  7047 ;;		Nothing
  7048 ;; This function is called by:
  7049 ;;		_SYSTEM_Initialize
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           
  7054                           ;psect for function _EUSART_Initialize
  7055  0A2C                     _EUSART_Initialize:	
  7056                           
  7057                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7058                           
  7059                           ;incstack = 0
  7060                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7061  0A2C  0021               	movlb	1	; select bank1
  7062  0A2D  1291               	bcf	17,5	;volatile
  7063                           
  7064                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7065  0A2E  1211               	bcf	17,4	;volatile
  7066                           
  7067                           ;eusart.c: 84: BAUDCON = 0x08;
  7068  0A2F  3008               	movlw	8
  7069  0A30  0023               	movlb	3	; select bank3
  7070  0A31  009F               	movwf	31	;volatile
  7071                           
  7072                           ;eusart.c: 87: RCSTA = 0x90;
  7073  0A32  3090               	movlw	144
  7074  0A33  009D               	movwf	29	;volatile
  7075                           
  7076                           ;eusart.c: 90: TXSTA = 0x24;
  7077  0A34  3024               	movlw	36
  7078  0A35  009E               	movwf	30	;volatile
  7079                           
  7080                           ;eusart.c: 93: SPBRGL = 0x40;
  7081  0A36  3040               	movlw	64
  7082  0A37  009B               	movwf	27	;volatile
  7083                           
  7084                           ;eusart.c: 96: SPBRGH = 0x03;
  7085  0A38  3003               	movlw	3
  7086  0A39  009C               	movwf	28	;volatile
  7087                           
  7088                           ;eusart.c: 100: eusartTxHead = 0;
  7089  0A3A  0020               	movlb	0	; select bank0
  7090  0A3B  01DC               	clrf	_eusartTxHead
  7091                           
  7092                           ;eusart.c: 101: eusartTxTail = 0;
  7093  0A3C  01DD               	clrf	_eusartTxTail
  7094                           
  7095                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7096  0A3D  3008               	movlw	8
  7097  0A3E  00F4               	movwf	??_EUSART_Initialize
  7098  0A3F  0874               	movf	??_EUSART_Initialize,w
  7099  0A40  00DB               	movwf	_eusartTxBufferRemaining	;volatile
  7100                           
  7101                           ;eusart.c: 104: eusartRxHead = 0;
  7102  0A41  0021               	movlb	1	; select bank1
  7103  0A42  01BA               	clrf	_eusartRxHead^(0+128)
  7104                           
  7105                           ;eusart.c: 105: eusartRxTail = 0;
  7106  0A43  01BB               	clrf	_eusartRxTail^(0+128)
  7107                           
  7108                           ;eusart.c: 106: eusartRxCount = 0;
  7109  0A44  01F8               	clrf	_eusartRxCount	;volatile
  7110                           
  7111                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7112  0A45  1691               	bsf	17,5	;volatile
  7113  0A46  0008               	return
  7114  0A47                     __end_of_EUSART_Initialize:	
  7115                           
  7116                           	psect	text24
  7117  099C                     __ptext24:	
  7118 ;; *************** function _EPWM1_Initialize *****************
  7119 ;; Defined at:
  7120 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      void 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7134 ;;      Params:         0       0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0
  7137 ;;      Totals:         0       0       0       0       0       0
  7138 ;;Total ram usage:        0 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    6
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_SYSTEM_Initialize
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           
  7149                           ;psect for function _EPWM1_Initialize
  7150  099C                     _EPWM1_Initialize:	
  7151                           
  7152                           ;epwm1.c: 68: CCP1CON = 0x3C;
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
  7156  099C  303C               	movlw	60
  7157  099D  0025               	movlb	5	; select bank5
  7158  099E  0093               	movwf	19	;volatile
  7159                           
  7160                           ;epwm1.c: 71: ECCP1AS = 0x00;
  7161  099F  0195               	clrf	21	;volatile
  7162                           
  7163                           ;epwm1.c: 74: PWM1CON = 0x80;
  7164  09A0  3080               	movlw	128
  7165  09A1  0094               	movwf	20	;volatile
  7166                           
  7167                           ;epwm1.c: 77: PSTR1CON = 0x01;
  7168  09A2  3001               	movlw	1
  7169  09A3  0096               	movwf	22	;volatile
  7170                           
  7171                           ;epwm1.c: 80: CCPR1L = 0x7F;
  7172  09A4  307F               	movlw	127
  7173  09A5  0091               	movwf	17	;volatile
  7174                           
  7175                           ;epwm1.c: 83: CCPR1H = 0x00;
  7176  09A6  0192               	clrf	18	;volatile
  7177                           
  7178                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  7179  09A7  30FC               	movlw	-4
  7180  09A8  059E               	andwf	30,f	;volatile
  7181  09A9  0008               	return
  7182  09AA                     __end_of_EPWM1_Initialize:	
  7183                           
  7184                           	psect	text25
  7185  03CE                     __ptext25:	
  7186 ;; *************** function _GPS_read_speed *****************
  7187 ;; Defined at:
  7188 ;;		line 24 in file "GPS.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  buffer          6   35[BANK0 ] unsigned char [6]
  7193 ;;  read_speed_f    2   31[BANK0 ] unsigned short 
  7194 ;;  read_speed_i    2   29[BANK0 ] unsigned short 
  7195 ;;  m_char          1   43[BANK0 ] unsigned char 
  7196 ;;  i_buff          1   42[BANK0 ] unsigned char 
  7197 ;;  i_buff2         1   41[BANK0 ] unsigned char 
  7198 ;;  checksum        1   34[BANK0 ] unsigned char 
  7199 ;;  checksum2       1   33[BANK0 ] unsigned char 
  7200 ;;  no_more_chec    1   28[BANK0 ] unsigned char 
  7201 ;;  before_dot      1   27[BANK0 ] unsigned char 
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  1    wreg      unsigned char 
  7204 ;; Registers used:
  7205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7211 ;;      Params:         0       0       0       0       0       0
  7212 ;;      Locals:         0      17       0       0       0       0
  7213 ;;      Temps:          0       2       0       0       0       0
  7214 ;;      Totals:         0      19       0       0       0       0
  7215 ;;Total ram usage:       19 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:    7
  7218 ;; This function calls:
  7219 ;;		_EUSART_Read
  7220 ;;		___wmul
  7221 ;;		_convert_to_fp
  7222 ;; This function is called by:
  7223 ;;		_main
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           
  7228                           ;psect for function _GPS_read_speed
  7229  03CE                     _GPS_read_speed:	
  7230                           
  7231                           ;GPS.c: 28: unsigned char buffer[6];
  7232                           ;GPS.c: 29: unsigned char i_buff = 0;
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7236  03CE  0020               	movlb	0	; select bank0
  7237  03CF  01CA               	clrf	GPS_read_speed@i_buff
  7238                           
  7239                           ;GPS.c: 30: unsigned char checksum = 0x00;
  7240  03D0  01C2               	clrf	GPS_read_speed@checksum
  7241                           
  7242                           ;GPS.c: 32: unsigned char m_char = 0x00;
  7243  03D1  01CB               	clrf	GPS_read_speed@m_char
  7244  03D2                     l4406:	
  7245                           ;GPS.c: 33: while (m_char != '$')
  7246                           
  7247  03D2  3024               	movlw	36
  7248  03D3  064B               	xorwf	GPS_read_speed@m_char,w
  7249  03D4  1903               	btfsc	3,2
  7250  03D5  2BE1               	goto	l4408
  7251                           
  7252                           ;GPS.c: 34: if(eusartRxCount!=0)
  7253  03D6  0878               	movf	_eusartRxCount,w	;volatile
  7254  03D7  1903               	btfsc	3,2
  7255  03D8  2BD2               	goto	l4406
  7256                           
  7257                           ;GPS.c: 35: m_char=EUSART_Read();
  7258  03D9  318A  22B9  3183   	fcall	_EUSART_Read
  7259  03DC  0020               	movlb	0	; select bank0
  7260  03DD  00B9               	movwf	??_GPS_read_speed
  7261  03DE  0839               	movf	??_GPS_read_speed,w
  7262  03DF  00CB               	movwf	GPS_read_speed@m_char
  7263  03E0  2BD2               	goto	l4406
  7264  03E1                     l4408:	
  7265                           ;GPS.c: 39: while (1)
  7266                           
  7267                           
  7268                           ;GPS.c: 40: if (eusartRxCount!=0)
  7269  03E1  0878               	movf	_eusartRxCount,w	;volatile
  7270  03E2  1903               	btfsc	3,2
  7271  03E3  2BE1               	goto	l4408
  7272                           
  7273                           ;GPS.c: 41: {
  7274                           ;GPS.c: 42: m_char=EUSART_Read();
  7275  03E4  318A  22B9  3183   	fcall	_EUSART_Read
  7276  03E7  0020               	movlb	0	; select bank0
  7277  03E8  00B9               	movwf	??_GPS_read_speed
  7278  03E9  0839               	movf	??_GPS_read_speed,w
  7279  03EA  00CB               	movwf	GPS_read_speed@m_char
  7280                           
  7281                           ;GPS.c: 43: checksum ^= m_char;
  7282  03EB  084B               	movf	GPS_read_speed@m_char,w
  7283  03EC  00B9               	movwf	??_GPS_read_speed
  7284  03ED  0839               	movf	??_GPS_read_speed,w
  7285  03EE  06C2               	xorwf	GPS_read_speed@checksum,f
  7286                           
  7287                           ;GPS.c: 44: if (m_char == ',')
  7288  03EF  302C               	movlw	44
  7289  03F0  064B               	xorwf	GPS_read_speed@m_char,w
  7290  03F1  1903               	btfsc	3,2
  7291  03F2  2C05               	goto	l4430
  7292                           
  7293                           ;GPS.c: 46: else
  7294                           ;GPS.c: 47: {
  7295                           ;GPS.c: 48: buffer[i_buff++] = m_char;
  7296                           
  7297                           ;GPS.c: 45: break;
  7298  03F3  084B               	movf	GPS_read_speed@m_char,w
  7299  03F4  00B9               	movwf	??_GPS_read_speed
  7300  03F5  084A               	movf	GPS_read_speed@i_buff,w
  7301  03F6  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7302  03F7  0086               	movwf	6
  7303  03F8  0187               	clrf	7
  7304  03F9  0839               	movf	??_GPS_read_speed,w
  7305  03FA  0081               	movwf	1
  7306  03FB  3001               	movlw	1
  7307  03FC  00B9               	movwf	??_GPS_read_speed
  7308  03FD  0839               	movf	??_GPS_read_speed,w
  7309  03FE  07CA               	addwf	GPS_read_speed@i_buff,f
  7310                           
  7311                           ;GPS.c: 49: if (i_buff >= 6)
  7312  03FF  3006               	movlw	6
  7313  0400  024A               	subwf	GPS_read_speed@i_buff,w
  7314  0401  1C03               	skipc
  7315  0402  2BE1               	goto	l4408
  7316                           
  7317                           ;GPS.c: 50: return 0;
  7318  0403  3000               	movlw	0
  7319  0404  0008               	return
  7320  0405                     l4430:	
  7321                           
  7322                           ;GPS.c: 51: }
  7323                           ;GPS.c: 52: }
  7324                           ;GPS.c: 54: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  7325  0405  3047               	movlw	71
  7326  0406  0643               	xorwf	GPS_read_speed@buffer,w
  7327  0407  1D03               	btfss	3,2
  7328  0408  2C19               	goto	l4440
  7329  0409  3050               	movlw	80
  7330  040A  0644               	xorwf	GPS_read_speed@buffer+1,w
  7331  040B  1D03               	btfss	3,2
  7332  040C  2C19               	goto	l4440
  7333  040D  3056               	movlw	86
  7334  040E  0645               	xorwf	GPS_read_speed@buffer+2,w
  7335  040F  1D03               	btfss	3,2
  7336  0410  2C19               	goto	l4440
  7337  0411  3054               	movlw	84
  7338  0412  0646               	xorwf	GPS_read_speed@buffer+3,w
  7339  0413  1D03               	btfss	3,2
  7340  0414  2C19               	goto	l4440
  7341  0415  3047               	movlw	71
  7342  0416  0647               	xorwf	GPS_read_speed@buffer+4,w
  7343  0417  1903               	btfsc	3,2
  7344  0418  2C1B               	goto	l4444
  7345  0419                     l4440:	
  7346                           
  7347                           ;GPS.c: 55: return 0;
  7348  0419  3000               	movlw	0
  7349  041A  0008               	return
  7350  041B                     l4444:	
  7351                           
  7352                           ;GPS.c: 56: i_buff = 0;
  7353  041B  01CA               	clrf	GPS_read_speed@i_buff
  7354  041C                     l4446:	
  7355                           ;GPS.c: 59: while (1)
  7356                           
  7357                           
  7358                           ;GPS.c: 60: if (eusartRxCount!=0)
  7359  041C  0878               	movf	_eusartRxCount,w	;volatile
  7360  041D  1903               	btfsc	3,2
  7361  041E  2C1C               	goto	l4446
  7362                           
  7363                           ;GPS.c: 61: {
  7364                           ;GPS.c: 62: m_char=EUSART_Read();
  7365  041F  318A  22B9  3183   	fcall	_EUSART_Read
  7366  0422  0020               	movlb	0	; select bank0
  7367  0423  00B9               	movwf	??_GPS_read_speed
  7368  0424  0839               	movf	??_GPS_read_speed,w
  7369  0425  00CB               	movwf	GPS_read_speed@m_char
  7370                           
  7371                           ;GPS.c: 63: checksum ^= m_char;
  7372  0426  084B               	movf	GPS_read_speed@m_char,w
  7373  0427  00B9               	movwf	??_GPS_read_speed
  7374  0428  0839               	movf	??_GPS_read_speed,w
  7375  0429  06C2               	xorwf	GPS_read_speed@checksum,f
  7376                           
  7377                           ;GPS.c: 64: if (m_char == ',')
  7378  042A  302C               	movlw	44
  7379  042B  064B               	xorwf	GPS_read_speed@m_char,w
  7380  042C  1D03               	btfss	3,2
  7381  042D  2C1C               	goto	l4446
  7382  042E                     l4456:	
  7383                           ;GPS.c: 66: }
  7384                           ;GPS.c: 68: while (1)
  7385                           
  7386                           ;GPS.c: 65: break;
  7387                           
  7388                           
  7389                           ;GPS.c: 69: if (eusartRxCount!=0)
  7390  042E  0878               	movf	_eusartRxCount,w	;volatile
  7391  042F  1903               	btfsc	3,2
  7392  0430  2C2E               	goto	l4456
  7393                           
  7394                           ;GPS.c: 70: {
  7395                           ;GPS.c: 71: m_char=EUSART_Read();
  7396  0431  318A  22B9  3183   	fcall	_EUSART_Read
  7397  0434  0020               	movlb	0	; select bank0
  7398  0435  00B9               	movwf	??_GPS_read_speed
  7399  0436  0839               	movf	??_GPS_read_speed,w
  7400  0437  00CB               	movwf	GPS_read_speed@m_char
  7401                           
  7402                           ;GPS.c: 72: checksum ^= m_char;
  7403  0438  084B               	movf	GPS_read_speed@m_char,w
  7404  0439  00B9               	movwf	??_GPS_read_speed
  7405  043A  0839               	movf	??_GPS_read_speed,w
  7406  043B  06C2               	xorwf	GPS_read_speed@checksum,f
  7407                           
  7408                           ;GPS.c: 73: if (m_char == ',')
  7409  043C  302C               	movlw	44
  7410  043D  064B               	xorwf	GPS_read_speed@m_char,w
  7411  043E  1903               	btfsc	3,2
  7412  043F  2C52               	goto	l4478
  7413                           
  7414                           ;GPS.c: 75: else
  7415                           ;GPS.c: 76: {
  7416                           ;GPS.c: 77: buffer[i_buff++] = m_char;
  7417                           
  7418                           ;GPS.c: 74: break;
  7419  0440  084B               	movf	GPS_read_speed@m_char,w
  7420  0441  00B9               	movwf	??_GPS_read_speed
  7421  0442  084A               	movf	GPS_read_speed@i_buff,w
  7422  0443  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7423  0444  0086               	movwf	6
  7424  0445  0187               	clrf	7
  7425  0446  0839               	movf	??_GPS_read_speed,w
  7426  0447  0081               	movwf	1
  7427  0448  3001               	movlw	1
  7428  0449  00B9               	movwf	??_GPS_read_speed
  7429  044A  0839               	movf	??_GPS_read_speed,w
  7430  044B  07CA               	addwf	GPS_read_speed@i_buff,f
  7431                           
  7432                           ;GPS.c: 78: if (i_buff >= 6)
  7433  044C  3006               	movlw	6
  7434  044D  024A               	subwf	GPS_read_speed@i_buff,w
  7435  044E  1C03               	skipc
  7436  044F  2C2E               	goto	l4456
  7437                           
  7438                           ;GPS.c: 79: return 0;
  7439  0450  3000               	movlw	0
  7440  0451  0008               	return
  7441  0452                     l4478:	
  7442                           
  7443                           ;GPS.c: 80: }
  7444                           ;GPS.c: 81: }
  7445                           ;GPS.c: 82: if ((buffer[0] != 'T')||(i_buff != 1))
  7446  0452  3054               	movlw	84
  7447  0453  0643               	xorwf	GPS_read_speed@buffer,w
  7448  0454  1903               	btfsc	3,2
  7449  0455  034A               	decf	GPS_read_speed@i_buff,w
  7450  0456  1903               	btfsc	3,2
  7451  0457  2C5A               	goto	l4486
  7452                           
  7453                           ;GPS.c: 83: return 0;
  7454  0458  3000               	movlw	0
  7455  0459  0008               	return
  7456  045A                     l4486:	
  7457                           
  7458                           ;GPS.c: 84: i_buff = 0;
  7459  045A  01CA               	clrf	GPS_read_speed@i_buff
  7460  045B                     l4488:	
  7461                           ;GPS.c: 87: while (1)
  7462                           
  7463                           
  7464                           ;GPS.c: 88: if (eusartRxCount!=0)
  7465  045B  0878               	movf	_eusartRxCount,w	;volatile
  7466  045C  1903               	btfsc	3,2
  7467  045D  2C5B               	goto	l4488
  7468                           
  7469                           ;GPS.c: 89: {
  7470                           ;GPS.c: 90: m_char=EUSART_Read();
  7471  045E  318A  22B9  3183   	fcall	_EUSART_Read
  7472  0461  0020               	movlb	0	; select bank0
  7473  0462  00B9               	movwf	??_GPS_read_speed
  7474  0463  0839               	movf	??_GPS_read_speed,w
  7475  0464  00CB               	movwf	GPS_read_speed@m_char
  7476                           
  7477                           ;GPS.c: 91: checksum ^= m_char;
  7478  0465  084B               	movf	GPS_read_speed@m_char,w
  7479  0466  00B9               	movwf	??_GPS_read_speed
  7480  0467  0839               	movf	??_GPS_read_speed,w
  7481  0468  06C2               	xorwf	GPS_read_speed@checksum,f
  7482                           
  7483                           ;GPS.c: 92: if (m_char == ',')
  7484  0469  302C               	movlw	44
  7485  046A  064B               	xorwf	GPS_read_speed@m_char,w
  7486  046B  1D03               	btfss	3,2
  7487  046C  2C5B               	goto	l4488
  7488  046D                     l4498:	
  7489                           ;GPS.c: 94: }
  7490                           ;GPS.c: 96: while (1)
  7491                           
  7492                           ;GPS.c: 93: break;
  7493                           
  7494                           
  7495                           ;GPS.c: 97: if (eusartRxCount!=0)
  7496  046D  0878               	movf	_eusartRxCount,w	;volatile
  7497  046E  1903               	btfsc	3,2
  7498  046F  2C6D               	goto	l4498
  7499                           
  7500                           ;GPS.c: 98: {
  7501                           ;GPS.c: 99: m_char=EUSART_Read();
  7502  0470  318A  22B9  3183   	fcall	_EUSART_Read
  7503  0473  0020               	movlb	0	; select bank0
  7504  0474  00B9               	movwf	??_GPS_read_speed
  7505  0475  0839               	movf	??_GPS_read_speed,w
  7506  0476  00CB               	movwf	GPS_read_speed@m_char
  7507                           
  7508                           ;GPS.c: 100: checksum ^= m_char;
  7509  0477  084B               	movf	GPS_read_speed@m_char,w
  7510  0478  00B9               	movwf	??_GPS_read_speed
  7511  0479  0839               	movf	??_GPS_read_speed,w
  7512  047A  06C2               	xorwf	GPS_read_speed@checksum,f
  7513                           
  7514                           ;GPS.c: 101: if (m_char == ',')
  7515  047B  302C               	movlw	44
  7516  047C  064B               	xorwf	GPS_read_speed@m_char,w
  7517  047D  1903               	btfsc	3,2
  7518  047E  2C91               	goto	l4520
  7519                           
  7520                           ;GPS.c: 103: else
  7521                           ;GPS.c: 104: {
  7522                           ;GPS.c: 105: buffer[i_buff++] = m_char;
  7523                           
  7524                           ;GPS.c: 102: break;
  7525  047F  084B               	movf	GPS_read_speed@m_char,w
  7526  0480  00B9               	movwf	??_GPS_read_speed
  7527  0481  084A               	movf	GPS_read_speed@i_buff,w
  7528  0482  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7529  0483  0086               	movwf	6
  7530  0484  0187               	clrf	7
  7531  0485  0839               	movf	??_GPS_read_speed,w
  7532  0486  0081               	movwf	1
  7533  0487  3001               	movlw	1
  7534  0488  00B9               	movwf	??_GPS_read_speed
  7535  0489  0839               	movf	??_GPS_read_speed,w
  7536  048A  07CA               	addwf	GPS_read_speed@i_buff,f
  7537                           
  7538                           ;GPS.c: 106: if (i_buff >= 6)
  7539  048B  3006               	movlw	6
  7540  048C  024A               	subwf	GPS_read_speed@i_buff,w
  7541  048D  1C03               	skipc
  7542  048E  2C6D               	goto	l4498
  7543                           
  7544                           ;GPS.c: 107: return 0;
  7545  048F  3000               	movlw	0
  7546  0490  0008               	return
  7547  0491                     l4520:	
  7548                           
  7549                           ;GPS.c: 108: }
  7550                           ;GPS.c: 109: }
  7551                           ;GPS.c: 110: if ((buffer[0] != 'M')||(i_buff != 1))
  7552  0491  304D               	movlw	77
  7553  0492  0643               	xorwf	GPS_read_speed@buffer,w
  7554  0493  1903               	btfsc	3,2
  7555  0494  034A               	decf	GPS_read_speed@i_buff,w
  7556  0495  1903               	btfsc	3,2
  7557  0496  2C99               	goto	l4528
  7558                           
  7559                           ;GPS.c: 111: return 0;
  7560  0497  3000               	movlw	0
  7561  0498  0008               	return
  7562  0499                     l4528:	
  7563                           
  7564                           ;GPS.c: 112: i_buff = 0;
  7565  0499  01CA               	clrf	GPS_read_speed@i_buff
  7566  049A                     l4530:	
  7567                           ;GPS.c: 115: while (1)
  7568                           
  7569                           
  7570                           ;GPS.c: 116: if (eusartRxCount!=0)
  7571  049A  0878               	movf	_eusartRxCount,w	;volatile
  7572  049B  1903               	btfsc	3,2
  7573  049C  2C9A               	goto	l4530
  7574                           
  7575                           ;GPS.c: 117: {
  7576                           ;GPS.c: 118: m_char=EUSART_Read();
  7577  049D  318A  22B9  3183   	fcall	_EUSART_Read
  7578  04A0  0020               	movlb	0	; select bank0
  7579  04A1  00B9               	movwf	??_GPS_read_speed
  7580  04A2  0839               	movf	??_GPS_read_speed,w
  7581  04A3  00CB               	movwf	GPS_read_speed@m_char
  7582                           
  7583                           ;GPS.c: 119: checksum ^= m_char;
  7584  04A4  084B               	movf	GPS_read_speed@m_char,w
  7585  04A5  00B9               	movwf	??_GPS_read_speed
  7586  04A6  0839               	movf	??_GPS_read_speed,w
  7587  04A7  06C2               	xorwf	GPS_read_speed@checksum,f
  7588                           
  7589                           ;GPS.c: 120: if (m_char == ',')
  7590  04A8  302C               	movlw	44
  7591  04A9  064B               	xorwf	GPS_read_speed@m_char,w
  7592  04AA  1D03               	btfss	3,2
  7593  04AB  2C9A               	goto	l4530
  7594  04AC                     l4540:	
  7595                           ;GPS.c: 122: }
  7596                           ;GPS.c: 124: while (1)
  7597                           
  7598                           ;GPS.c: 121: break;
  7599                           
  7600                           
  7601                           ;GPS.c: 125: if (eusartRxCount!=0)
  7602  04AC  0878               	movf	_eusartRxCount,w	;volatile
  7603  04AD  1903               	btfsc	3,2
  7604  04AE  2CAC               	goto	l4540
  7605                           
  7606                           ;GPS.c: 126: {
  7607                           ;GPS.c: 127: m_char=EUSART_Read();
  7608  04AF  318A  22B9  3183   	fcall	_EUSART_Read
  7609  04B2  0020               	movlb	0	; select bank0
  7610  04B3  00B9               	movwf	??_GPS_read_speed
  7611  04B4  0839               	movf	??_GPS_read_speed,w
  7612  04B5  00CB               	movwf	GPS_read_speed@m_char
  7613                           
  7614                           ;GPS.c: 128: checksum ^= m_char;
  7615  04B6  084B               	movf	GPS_read_speed@m_char,w
  7616  04B7  00B9               	movwf	??_GPS_read_speed
  7617  04B8  0839               	movf	??_GPS_read_speed,w
  7618  04B9  06C2               	xorwf	GPS_read_speed@checksum,f
  7619                           
  7620                           ;GPS.c: 129: if (m_char == ',')
  7621  04BA  302C               	movlw	44
  7622  04BB  064B               	xorwf	GPS_read_speed@m_char,w
  7623  04BC  1903               	btfsc	3,2
  7624  04BD  2CD0               	goto	l4562
  7625                           
  7626                           ;GPS.c: 131: else
  7627                           ;GPS.c: 132: {
  7628                           ;GPS.c: 133: buffer[i_buff++] = m_char;
  7629                           
  7630                           ;GPS.c: 130: break;
  7631  04BE  084B               	movf	GPS_read_speed@m_char,w
  7632  04BF  00B9               	movwf	??_GPS_read_speed
  7633  04C0  084A               	movf	GPS_read_speed@i_buff,w
  7634  04C1  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7635  04C2  0086               	movwf	6
  7636  04C3  0187               	clrf	7
  7637  04C4  0839               	movf	??_GPS_read_speed,w
  7638  04C5  0081               	movwf	1
  7639  04C6  3001               	movlw	1
  7640  04C7  00B9               	movwf	??_GPS_read_speed
  7641  04C8  0839               	movf	??_GPS_read_speed,w
  7642  04C9  07CA               	addwf	GPS_read_speed@i_buff,f
  7643                           
  7644                           ;GPS.c: 134: if (i_buff >= 6)
  7645  04CA  3006               	movlw	6
  7646  04CB  024A               	subwf	GPS_read_speed@i_buff,w
  7647  04CC  1C03               	skipc
  7648  04CD  2CAC               	goto	l4540
  7649                           
  7650                           ;GPS.c: 135: return 0;
  7651  04CE  3000               	movlw	0
  7652  04CF  0008               	return
  7653  04D0                     l4562:	
  7654                           
  7655                           ;GPS.c: 136: }
  7656                           ;GPS.c: 137: }
  7657                           ;GPS.c: 138: if ((buffer[0] != 'N')||(i_buff != 1))
  7658  04D0  304E               	movlw	78
  7659  04D1  0643               	xorwf	GPS_read_speed@buffer,w
  7660  04D2  1903               	btfsc	3,2
  7661  04D3  034A               	decf	GPS_read_speed@i_buff,w
  7662  04D4  1903               	btfsc	3,2
  7663  04D5  2CD8               	goto	l4570
  7664                           
  7665                           ;GPS.c: 139: return 0;
  7666  04D6  3000               	movlw	0
  7667  04D7  0008               	return
  7668  04D8                     l4570:	
  7669                           
  7670                           ;GPS.c: 140: i_buff = 0;
  7671  04D8  01CA               	clrf	GPS_read_speed@i_buff
  7672  04D9                     l4572:	
  7673                           ;GPS.c: 143: while (1)
  7674                           
  7675                           
  7676                           ;GPS.c: 144: if (eusartRxCount!=0)
  7677  04D9  0878               	movf	_eusartRxCount,w	;volatile
  7678  04DA  1903               	btfsc	3,2
  7679  04DB  2CD9               	goto	l4572
  7680                           
  7681                           ;GPS.c: 145: {
  7682                           ;GPS.c: 146: m_char=EUSART_Read();
  7683  04DC  318A  22B9  3183   	fcall	_EUSART_Read
  7684  04DF  0020               	movlb	0	; select bank0
  7685  04E0  00B9               	movwf	??_GPS_read_speed
  7686  04E1  0839               	movf	??_GPS_read_speed,w
  7687  04E2  00CB               	movwf	GPS_read_speed@m_char
  7688                           
  7689                           ;GPS.c: 147: checksum ^= m_char;
  7690  04E3  084B               	movf	GPS_read_speed@m_char,w
  7691  04E4  00B9               	movwf	??_GPS_read_speed
  7692  04E5  0839               	movf	??_GPS_read_speed,w
  7693  04E6  06C2               	xorwf	GPS_read_speed@checksum,f
  7694                           
  7695                           ;GPS.c: 148: if (m_char == ',')
  7696  04E7  302C               	movlw	44
  7697  04E8  064B               	xorwf	GPS_read_speed@m_char,w
  7698  04E9  1903               	btfsc	3,2
  7699  04EA  2CFD               	goto	l4594
  7700                           
  7701                           ;GPS.c: 150: else
  7702                           ;GPS.c: 151: {
  7703                           ;GPS.c: 152: buffer[i_buff++] = m_char;
  7704                           
  7705                           ;GPS.c: 149: break;
  7706  04EB  084B               	movf	GPS_read_speed@m_char,w
  7707  04EC  00B9               	movwf	??_GPS_read_speed
  7708  04ED  084A               	movf	GPS_read_speed@i_buff,w
  7709  04EE  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7710  04EF  0086               	movwf	6
  7711  04F0  0187               	clrf	7
  7712  04F1  0839               	movf	??_GPS_read_speed,w
  7713  04F2  0081               	movwf	1
  7714  04F3  3001               	movlw	1
  7715  04F4  00B9               	movwf	??_GPS_read_speed
  7716  04F5  0839               	movf	??_GPS_read_speed,w
  7717  04F6  07CA               	addwf	GPS_read_speed@i_buff,f
  7718                           
  7719                           ;GPS.c: 153: if (i_buff >= 6)
  7720  04F7  3006               	movlw	6
  7721  04F8  024A               	subwf	GPS_read_speed@i_buff,w
  7722  04F9  1C03               	skipc
  7723  04FA  2CD9               	goto	l4572
  7724                           
  7725                           ;GPS.c: 154: return 0;
  7726  04FB  3000               	movlw	0
  7727  04FC  0008               	return
  7728  04FD                     l4594:	
  7729                           
  7730                           ;GPS.c: 155: }
  7731                           ;GPS.c: 156: }
  7732                           ;GPS.c: 159: unsigned char i_buff2 = 0;
  7733  04FD  01C9               	clrf	GPS_read_speed@i_buff2
  7734                           
  7735                           ;GPS.c: 160: unsigned short read_speed_int=0;
  7736  04FE  01BD               	clrf	GPS_read_speed@read_speed_int
  7737  04FF  01BE               	clrf	GPS_read_speed@read_speed_int+1
  7738                           
  7739                           ;GPS.c: 161: unsigned short read_speed_fra=0;
  7740  0500  01BF               	clrf	GPS_read_speed@read_speed_fra
  7741  0501  01C0               	clrf	GPS_read_speed@read_speed_fra+1
  7742                           
  7743                           ;GPS.c: 162: bool before_dot = 1;
  7744  0502  01BB               	clrf	GPS_read_speed@before_dot
  7745  0503  0ABB               	incf	GPS_read_speed@before_dot,f
  7746  0504                     l4622:	
  7747                           ;GPS.c: 163: while (i_buff2 < i_buff)
  7748                           
  7749  0504  084A               	movf	GPS_read_speed@i_buff,w
  7750  0505  0249               	subwf	GPS_read_speed@i_buff2,w
  7751  0506  1803               	btfsc	3,0
  7752  0507  2D67               	goto	l4624
  7753                           
  7754                           ;GPS.c: 164: if (buffer[i_buff2]=='.')
  7755  0508  0849               	movf	GPS_read_speed@i_buff2,w
  7756  0509  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7757  050A  0086               	movwf	6
  7758  050B  0187               	clrf	7
  7759  050C  302E               	movlw	46
  7760  050D  0601               	xorwf	1,w
  7761  050E  1D03               	btfss	3,2
  7762  050F  2D12               	goto	l4604
  7763                           
  7764                           ;GPS.c: 165: {
  7765                           ;GPS.c: 166: before_dot = 0;
  7766  0510  01BB               	clrf	GPS_read_speed@before_dot
  7767  0511  2D62               	goto	l4620
  7768  0512                     l4604:	
  7769                           ;GPS.c: 168: }
  7770                           
  7771                           ;GPS.c: 167: i_buff2++;
  7772                           
  7773                           
  7774                           ;GPS.c: 169: else
  7775                           ;GPS.c: 170: {
  7776                           ;GPS.c: 171: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  7777  0512  0849               	movf	GPS_read_speed@i_buff2,w
  7778  0513  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7779  0514  0086               	movwf	6
  7780  0515  0187               	clrf	7
  7781  0516  3030               	movlw	48
  7782  0517  0201               	subwf	1,w
  7783  0518  1C03               	skipc
  7784  0519  2D22               	goto	l4608
  7785  051A  0849               	movf	GPS_read_speed@i_buff2,w
  7786  051B  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7787  051C  0086               	movwf	6
  7788  051D  0187               	clrf	7
  7789  051E  303A               	movlw	58
  7790  051F  0201               	subwf	1,w
  7791  0520  1C03               	skipc
  7792  0521  2D24               	goto	l4614
  7793  0522                     l4608:	
  7794                           
  7795                           ;GPS.c: 172: return 0;
  7796  0522  3000               	movlw	0
  7797  0523  0008               	return
  7798  0524                     l4614:	
  7799                           
  7800                           ;GPS.c: 173: else
  7801                           ;GPS.c: 174: {
  7802                           ;GPS.c: 175: if (before_dot)
  7803  0524  083B               	movf	GPS_read_speed@before_dot,w
  7804  0525  1903               	btfsc	3,2
  7805  0526  2D45               	goto	l4618
  7806                           
  7807                           ;GPS.c: 176: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  7808  0527  083E               	movf	GPS_read_speed@read_speed_int+1,w
  7809  0528  00A1               	movwf	___wmul@multiplier+1
  7810  0529  083D               	movf	GPS_read_speed@read_speed_int,w
  7811  052A  00A0               	movwf	___wmul@multiplier
  7812  052B  300A               	movlw	10
  7813  052C  00A2               	movwf	___wmul@multiplicand
  7814  052D  3000               	movlw	0
  7815  052E  00A3               	movwf	___wmul@multiplicand+1
  7816  052F  318A  2247  3183   	fcall	___wmul
  7817  0532  0020               	movlb	0	; select bank0
  7818  0533  0849               	movf	GPS_read_speed@i_buff2,w
  7819  0534  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7820  0535  0086               	movwf	6
  7821  0536  0187               	clrf	7
  7822  0537  0801               	movf	1,w
  7823  0538  0720               	addwf	?___wmul,w
  7824  0539  00B9               	movwf	??_GPS_read_speed
  7825  053A  0821               	movf	?___wmul+1,w
  7826  053B  1803               	skipnc
  7827  053C  0A21               	incf	?___wmul+1,w
  7828  053D  00BA               	movwf	??_GPS_read_speed+1
  7829  053E  0839               	movf	??_GPS_read_speed,w
  7830  053F  3ED0               	addlw	208
  7831  0540  00BD               	movwf	GPS_read_speed@read_speed_int
  7832  0541  30FF               	movlw	255
  7833  0542  3D3A               	addwfc	??_GPS_read_speed+1,w
  7834  0543  00BE               	movwf	GPS_read_speed@read_speed_int+1
  7835  0544  2D62               	goto	l4620
  7836  0545                     l4618:	
  7837                           
  7838                           ;GPS.c: 177: else
  7839                           ;GPS.c: 178: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  7840  0545  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7841  0546  00A1               	movwf	___wmul@multiplier+1
  7842  0547  083F               	movf	GPS_read_speed@read_speed_fra,w
  7843  0548  00A0               	movwf	___wmul@multiplier
  7844  0549  300A               	movlw	10
  7845  054A  00A2               	movwf	___wmul@multiplicand
  7846  054B  3000               	movlw	0
  7847  054C  00A3               	movwf	___wmul@multiplicand+1
  7848  054D  318A  2247  3183   	fcall	___wmul
  7849  0550  0020               	movlb	0	; select bank0
  7850  0551  0849               	movf	GPS_read_speed@i_buff2,w
  7851  0552  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7852  0553  0086               	movwf	6
  7853  0554  0187               	clrf	7
  7854  0555  0801               	movf	1,w
  7855  0556  0720               	addwf	?___wmul,w
  7856  0557  00B9               	movwf	??_GPS_read_speed
  7857  0558  0821               	movf	?___wmul+1,w
  7858  0559  1803               	skipnc
  7859  055A  0A21               	incf	?___wmul+1,w
  7860  055B  00BA               	movwf	??_GPS_read_speed+1
  7861  055C  0839               	movf	??_GPS_read_speed,w
  7862  055D  3ED0               	addlw	208
  7863  055E  00BF               	movwf	GPS_read_speed@read_speed_fra
  7864  055F  30FF               	movlw	255
  7865  0560  3D3A               	addwfc	??_GPS_read_speed+1,w
  7866  0561  00C0               	movwf	GPS_read_speed@read_speed_fra+1
  7867  0562                     l4620:	
  7868                           
  7869                           ;GPS.c: 179: i_buff2++;
  7870  0562  3001               	movlw	1
  7871  0563  00B9               	movwf	??_GPS_read_speed
  7872  0564  0839               	movf	??_GPS_read_speed,w
  7873  0565  07C9               	addwf	GPS_read_speed@i_buff2,f
  7874  0566  2D04               	goto	l4622
  7875  0567                     l4624:	
  7876                           
  7877                           ;GPS.c: 180: }
  7878                           ;GPS.c: 181: }
  7879                           ;GPS.c: 185: read_speed_fra *= 100;
  7880  0567  3064               	movlw	100
  7881  0568  00A0               	movwf	___wmul@multiplier
  7882  0569  3000               	movlw	0
  7883  056A  00A1               	movwf	___wmul@multiplier+1
  7884  056B  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7885  056C  00A3               	movwf	___wmul@multiplicand+1
  7886  056D  083F               	movf	GPS_read_speed@read_speed_fra,w
  7887  056E  00A2               	movwf	___wmul@multiplicand
  7888  056F  318A  2247  3183   	fcall	___wmul
  7889  0572  0020               	movlb	0	; select bank0
  7890  0573  0821               	movf	?___wmul+1,w
  7891  0574  00C0               	movwf	GPS_read_speed@read_speed_fra+1
  7892  0575  0820               	movf	?___wmul,w
  7893  0576  00BF               	movwf	GPS_read_speed@read_speed_fra
  7894                           
  7895                           ;GPS.c: 188: i_buff = 0;
  7896  0577  01CA               	clrf	GPS_read_speed@i_buff
  7897  0578                     l4628:	
  7898                           ;GPS.c: 191: while (1)
  7899                           
  7900                           
  7901                           ;GPS.c: 192: if (eusartRxCount!=0)
  7902  0578  0878               	movf	_eusartRxCount,w	;volatile
  7903  0579  1903               	btfsc	3,2
  7904  057A  2D78               	goto	l4628
  7905                           
  7906                           ;GPS.c: 193: {
  7907                           ;GPS.c: 194: m_char=EUSART_Read();
  7908  057B  318A  22B9  3183   	fcall	_EUSART_Read
  7909  057E  0020               	movlb	0	; select bank0
  7910  057F  00B9               	movwf	??_GPS_read_speed
  7911  0580  0839               	movf	??_GPS_read_speed,w
  7912  0581  00CB               	movwf	GPS_read_speed@m_char
  7913                           
  7914                           ;GPS.c: 195: checksum ^= m_char;
  7915  0582  084B               	movf	GPS_read_speed@m_char,w
  7916  0583  00B9               	movwf	??_GPS_read_speed
  7917  0584  0839               	movf	??_GPS_read_speed,w
  7918  0585  06C2               	xorwf	GPS_read_speed@checksum,f
  7919                           
  7920                           ;GPS.c: 196: if (m_char == ',')
  7921  0586  302C               	movlw	44
  7922  0587  064B               	xorwf	GPS_read_speed@m_char,w
  7923  0588  1903               	btfsc	3,2
  7924  0589  2D9C               	goto	l4650
  7925                           
  7926                           ;GPS.c: 198: else
  7927                           ;GPS.c: 199: {
  7928                           ;GPS.c: 200: buffer[i_buff++] = m_char;
  7929                           
  7930                           ;GPS.c: 197: break;
  7931  058A  084B               	movf	GPS_read_speed@m_char,w
  7932  058B  00B9               	movwf	??_GPS_read_speed
  7933  058C  084A               	movf	GPS_read_speed@i_buff,w
  7934  058D  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7935  058E  0086               	movwf	6
  7936  058F  0187               	clrf	7
  7937  0590  0839               	movf	??_GPS_read_speed,w
  7938  0591  0081               	movwf	1
  7939  0592  3001               	movlw	1
  7940  0593  00B9               	movwf	??_GPS_read_speed
  7941  0594  0839               	movf	??_GPS_read_speed,w
  7942  0595  07CA               	addwf	GPS_read_speed@i_buff,f
  7943                           
  7944                           ;GPS.c: 201: if (i_buff >= 6)
  7945  0596  3006               	movlw	6
  7946  0597  024A               	subwf	GPS_read_speed@i_buff,w
  7947  0598  1C03               	skipc
  7948  0599  2D78               	goto	l4628
  7949                           
  7950                           ;GPS.c: 202: return 0;
  7951  059A  3000               	movlw	0
  7952  059B  0008               	return
  7953  059C                     l4650:	
  7954                           
  7955                           ;GPS.c: 203: }
  7956                           ;GPS.c: 204: }
  7957                           ;GPS.c: 205: if ((buffer[0] != 'K')||(i_buff != 1))
  7958  059C  304B               	movlw	75
  7959  059D  0643               	xorwf	GPS_read_speed@buffer,w
  7960  059E  1903               	btfsc	3,2
  7961  059F  034A               	decf	GPS_read_speed@i_buff,w
  7962  05A0  1903               	btfsc	3,2
  7963  05A1  2DA4               	goto	l4658
  7964                           
  7965                           ;GPS.c: 206: return 0;
  7966  05A2  3000               	movlw	0
  7967  05A3  0008               	return
  7968  05A4                     l4658:	
  7969                           
  7970                           ;GPS.c: 207: i_buff = 0;
  7971  05A4  01CA               	clrf	GPS_read_speed@i_buff
  7972                           
  7973                           ;GPS.c: 210: bool no_more_checksum = 0;
  7974  05A5  01BC               	clrf	GPS_read_speed@no_more_checksum
  7975  05A6                     l4660:	
  7976                           ;GPS.c: 211: while (1)
  7977                           
  7978                           
  7979                           ;GPS.c: 212: if (eusartRxCount!=0)
  7980  05A6  0878               	movf	_eusartRxCount,w	;volatile
  7981  05A7  1903               	btfsc	3,2
  7982  05A8  2DA6               	goto	l4660
  7983                           
  7984                           ;GPS.c: 213: {
  7985                           ;GPS.c: 214: m_char=EUSART_Read();
  7986  05A9  318A  22B9  3183   	fcall	_EUSART_Read
  7987  05AC  0020               	movlb	0	; select bank0
  7988  05AD  00B9               	movwf	??_GPS_read_speed
  7989  05AE  0839               	movf	??_GPS_read_speed,w
  7990  05AF  00CB               	movwf	GPS_read_speed@m_char
  7991                           
  7992                           ;GPS.c: 215: if (m_char == '*')
  7993  05B0  302A               	movlw	42
  7994  05B1  064B               	xorwf	GPS_read_speed@m_char,w
  7995  05B2  1D03               	btfss	3,2
  7996  05B3  2DB6               	goto	l4668
  7997                           
  7998                           ;GPS.c: 216: no_more_checksum = 1;
  7999  05B4  01BC               	clrf	GPS_read_speed@no_more_checksum
  8000  05B5  0ABC               	incf	GPS_read_speed@no_more_checksum,f
  8001  05B6                     l4668:	
  8002                           
  8003                           ;GPS.c: 217: if (!no_more_checksum)
  8004  05B6  083C               	movf	GPS_read_speed@no_more_checksum,w
  8005  05B7  1D03               	btfss	3,2
  8006  05B8  2DBD               	goto	l646
  8007                           
  8008                           ;GPS.c: 218: checksum ^= m_char;
  8009  05B9  084B               	movf	GPS_read_speed@m_char,w
  8010  05BA  00B9               	movwf	??_GPS_read_speed
  8011  05BB  0839               	movf	??_GPS_read_speed,w
  8012  05BC  06C2               	xorwf	GPS_read_speed@checksum,f
  8013  05BD                     l646:	
  8014                           
  8015                           ;GPS.c: 219: if (m_char == 0x0D)
  8016  05BD  300D               	movlw	13
  8017  05BE  064B               	xorwf	GPS_read_speed@m_char,w
  8018  05BF  1903               	btfsc	3,2
  8019  05C0  2DD3               	goto	l4686
  8020                           
  8021                           ;GPS.c: 221: else
  8022                           ;GPS.c: 222: {
  8023                           ;GPS.c: 223: buffer[i_buff++] = m_char;
  8024                           
  8025                           ;GPS.c: 220: break;
  8026  05C1  084B               	movf	GPS_read_speed@m_char,w
  8027  05C2  00B9               	movwf	??_GPS_read_speed
  8028  05C3  084A               	movf	GPS_read_speed@i_buff,w
  8029  05C4  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  8030  05C5  0086               	movwf	6
  8031  05C6  0187               	clrf	7
  8032  05C7  0839               	movf	??_GPS_read_speed,w
  8033  05C8  0081               	movwf	1
  8034  05C9  3001               	movlw	1
  8035  05CA  00B9               	movwf	??_GPS_read_speed
  8036  05CB  0839               	movf	??_GPS_read_speed,w
  8037  05CC  07CA               	addwf	GPS_read_speed@i_buff,f
  8038                           
  8039                           ;GPS.c: 224: if (i_buff >= 6)
  8040  05CD  3006               	movlw	6
  8041  05CE  024A               	subwf	GPS_read_speed@i_buff,w
  8042  05CF  1C03               	skipc
  8043  05D0  2DA6               	goto	l4660
  8044                           
  8045                           ;GPS.c: 225: return 0;
  8046  05D1  3000               	movlw	0
  8047  05D2  0008               	return
  8048  05D3                     l4686:	
  8049                           
  8050                           ;GPS.c: 226: }
  8051                           ;GPS.c: 227: }
  8052                           ;GPS.c: 228: if ((buffer[1] != '*')||(i_buff != 4))
  8053  05D3  302A               	movlw	42
  8054  05D4  0644               	xorwf	GPS_read_speed@buffer+1,w
  8055  05D5  1D03               	btfss	3,2
  8056  05D6  2DDB               	goto	l4690
  8057  05D7  3004               	movlw	4
  8058  05D8  064A               	xorwf	GPS_read_speed@i_buff,w
  8059  05D9  1903               	btfsc	3,2
  8060  05DA  2DDD               	goto	l4694
  8061  05DB                     l4690:	
  8062                           
  8063                           ;GPS.c: 229: return 0;
  8064  05DB  3000               	movlw	0
  8065  05DC  0008               	return
  8066  05DD                     l4694:	
  8067                           
  8068                           ;GPS.c: 232: unsigned char checksum2 = 0;
  8069  05DD  01C1               	clrf	GPS_read_speed@checksum2
  8070                           
  8071                           ;GPS.c: 233: if (buffer[2] > 0x39)
  8072  05DE  303A               	movlw	58
  8073  05DF  0245               	subwf	GPS_read_speed@buffer+2,w
  8074  05E0  1C03               	skipc
  8075  05E1  2DE5               	goto	l4700
  8076                           
  8077                           ;GPS.c: 234: checksum2 = buffer[2] - 0x37;
  8078  05E2  0845               	movf	GPS_read_speed@buffer+2,w
  8079  05E3  3EC9               	addlw	201
  8080  05E4  2DE7               	goto	L8
  8081  05E5                     l4700:	
  8082                           
  8083                           ;GPS.c: 235: else
  8084                           ;GPS.c: 236: checksum2 = buffer[2] - 0x30;
  8085  05E5  0845               	movf	GPS_read_speed@buffer+2,w
  8086  05E6  3ED0               	addlw	208
  8087  05E7                     L8:	
  8088  05E7  00B9               	movwf	??_GPS_read_speed
  8089  05E8  0839               	movf	??_GPS_read_speed,w
  8090  05E9  00C1               	movwf	GPS_read_speed@checksum2
  8091                           
  8092                           ;GPS.c: 237: checksum2 = checksum2 << 4;
  8093  05EA  0841               	movf	GPS_read_speed@checksum2,w
  8094  05EB  00B9               	movwf	??_GPS_read_speed
  8095  05EC  3003               	movlw	3
  8096  05ED                     u5405:	
  8097  05ED  35B9               	lslf	??_GPS_read_speed,f
  8098  05EE  3EFF               	addlw	-1
  8099  05EF  1D03               	skipz
  8100  05F0  2DED               	goto	u5405
  8101  05F1  3539               	lslf	??_GPS_read_speed,w
  8102  05F2  00BA               	movwf	??_GPS_read_speed+1
  8103  05F3  083A               	movf	??_GPS_read_speed+1,w
  8104  05F4  00C1               	movwf	GPS_read_speed@checksum2
  8105                           
  8106                           ;GPS.c: 238: if (buffer[3] > 0x39)
  8107  05F5  303A               	movlw	58
  8108  05F6  0246               	subwf	GPS_read_speed@buffer+3,w
  8109  05F7  1C03               	skipc
  8110  05F8  2DFC               	goto	l4706
  8111                           
  8112                           ;GPS.c: 239: checksum2 += buffer[3] - 0x37;
  8113  05F9  0846               	movf	GPS_read_speed@buffer+3,w
  8114  05FA  3EC9               	addlw	201
  8115  05FB  2DFE               	goto	L9
  8116  05FC                     l4706:	
  8117                           
  8118                           ;GPS.c: 240: else
  8119                           ;GPS.c: 241: checksum2 += buffer[3] - 0x30;
  8120  05FC  0846               	movf	GPS_read_speed@buffer+3,w
  8121  05FD  3ED0               	addlw	208
  8122  05FE                     L9:	
  8123  05FE  00B9               	movwf	??_GPS_read_speed
  8124  05FF  0839               	movf	??_GPS_read_speed,w
  8125  0600  07C1               	addwf	GPS_read_speed@checksum2,f
  8126                           
  8127                           ;GPS.c: 242: if (checksum == checksum2)
  8128  0601  0842               	movf	GPS_read_speed@checksum,w
  8129  0602  0641               	xorwf	GPS_read_speed@checksum2,w
  8130  0603  1D03               	skipz
  8131  0604  2E21               	goto	l4718
  8132                           
  8133                           ;GPS.c: 243: {
  8134                           ;GPS.c: 244: speed = convert_to_fp(read_speed_int, read_speed_fra);
  8135  0605  083E               	movf	GPS_read_speed@read_speed_int+1,w
  8136  0606  00A5               	movwf	convert_to_fp@int_part+1
  8137  0607  083D               	movf	GPS_read_speed@read_speed_int,w
  8138  0608  00A4               	movwf	convert_to_fp@int_part
  8139  0609  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  8140  060A  00A7               	movwf	convert_to_fp@fract_part+1
  8141  060B  083F               	movf	GPS_read_speed@read_speed_fra,w
  8142  060C  00A6               	movwf	convert_to_fp@fract_part
  8143  060D  3187  271C         	fcall	_convert_to_fp
  8144  060F  0020               	movlb	0	; select bank0
  8145  0610  0827               	movf	?_convert_to_fp+3,w
  8146  0611  0021               	movlb	1	; select bank1
  8147  0612  00B3               	movwf	(_speed+3)^(0+128)
  8148  0613  0020               	movlb	0	; select bank0
  8149  0614  0826               	movf	?_convert_to_fp+2,w
  8150  0615  0021               	movlb	1	; select bank1
  8151  0616  00B2               	movwf	(_speed+2)^(0+128)
  8152  0617  0020               	movlb	0	; select bank0
  8153  0618  0825               	movf	?_convert_to_fp+1,w
  8154  0619  0021               	movlb	1	; select bank1
  8155  061A  00B1               	movwf	(_speed+1)^(0+128)
  8156  061B  0020               	movlb	0	; select bank0
  8157  061C  0824               	movf	?_convert_to_fp,w
  8158  061D  0021               	movlb	1	; select bank1
  8159  061E  00B0               	movwf	_speed^(0+128)
  8160                           
  8161                           ;GPS.c: 245: return 1;
  8162  061F  3001               	movlw	1
  8163                           
  8164                           ;GPS.c: 246: }
  8165  0620  0008               	return
  8166  0621                     l4718:	
  8167                           
  8168                           ;GPS.c: 247: else
  8169                           ;GPS.c: 248: return 0;
  8170  0621  3000               	movlw	0
  8171  0622  0008               	return
  8172  0623                     __end_of_GPS_read_speed:	
  8173                           
  8174                           	psect	text26
  8175  071C                     __ptext26:	
  8176 ;; *************** function _convert_to_fp *****************
  8177 ;; Defined at:
  8178 ;;		line 10 in file "fixed_point.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  int_part        2    4[BANK0 ] short 
  8181 ;;  fract_part      2    6[BANK0 ] short 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  i_bit           1   18[BANK0 ] unsigned char 
  8184 ;;  res             4   21[BANK0 ] long 
  8185 ;;  tmp_left        2   19[BANK0 ] unsigned short 
  8186 ;;  res_fract       2   16[BANK0 ] unsigned short 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  4    4[BANK0 ] long 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8196 ;;      Params:         0       4       0       0       0       0
  8197 ;;      Locals:         0       9       0       0       0       0
  8198 ;;      Temps:          0       8       0       0       0       0
  8199 ;;      Totals:         0      21       0       0       0       0
  8200 ;;Total ram usage:       21 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    6
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_main
  8207 ;;		_integer_part
  8208 ;;		_GPS_read_speed
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function _convert_to_fp
  8214  071C                     _convert_to_fp:	
  8215                           
  8216                           ;fixed_point.c: 16: t_fp res = 0;
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  8220  071C  3000               	movlw	0
  8221  071D  0020               	movlb	0	; select bank0
  8222  071E  00B8               	movwf	convert_to_fp@res+3
  8223  071F  3000               	movlw	0
  8224  0720  00B7               	movwf	convert_to_fp@res+2
  8225  0721  3000               	movlw	0
  8226  0722  00B6               	movwf	convert_to_fp@res+1
  8227  0723  3000               	movlw	0
  8228  0724  00B5               	movwf	convert_to_fp@res
  8229                           
  8230                           ;fixed_point.c: 18: res = int_part;
  8231  0725  0824               	movf	convert_to_fp@int_part,w
  8232  0726  00B5               	movwf	convert_to_fp@res
  8233  0727  0825               	movf	convert_to_fp@int_part+1,w
  8234  0728  00B6               	movwf	convert_to_fp@res+1
  8235  0729  0D89               	rlf	9,f
  8236  072A  3B89               	subwfb	9,f
  8237  072B  0989               	comf	9,f
  8238  072C  00B7               	movwf	convert_to_fp@res+2
  8239  072D  00B8               	movwf	convert_to_fp@res+3
  8240                           
  8241                           ;fixed_point.c: 19: res = res << 16;
  8242  072E  0835               	movf	convert_to_fp@res,w
  8243  072F  00A8               	movwf	??_convert_to_fp
  8244  0730  0836               	movf	convert_to_fp@res+1,w
  8245  0731  00A9               	movwf	??_convert_to_fp+1
  8246  0732  0837               	movf	convert_to_fp@res+2,w
  8247  0733  00AA               	movwf	??_convert_to_fp+2
  8248  0734  0838               	movf	convert_to_fp@res+3,w
  8249  0735  00AB               	movwf	??_convert_to_fp+3
  8250  0736  3010               	movlw	16
  8251  0737                     u4315:	
  8252  0737  35A8               	lslf	??_convert_to_fp,f
  8253  0738  0DA9               	rlf	??_convert_to_fp+1,f
  8254  0739  0DAA               	rlf	??_convert_to_fp+2,f
  8255  073A  0DAB               	rlf	??_convert_to_fp+3,f
  8256  073B  0B89               	decfsz	9,f
  8257  073C  2F37               	goto	u4315
  8258  073D  082B               	movf	??_convert_to_fp+3,w
  8259  073E  00B8               	movwf	convert_to_fp@res+3
  8260  073F  082A               	movf	??_convert_to_fp+2,w
  8261  0740  00B7               	movwf	convert_to_fp@res+2
  8262  0741  0829               	movf	??_convert_to_fp+1,w
  8263  0742  00B6               	movwf	convert_to_fp@res+1
  8264  0743  0828               	movf	??_convert_to_fp,w
  8265  0744  00B5               	movwf	convert_to_fp@res
  8266                           
  8267                           ;fixed_point.c: 21: unsigned short tmp_left = fract_part;
  8268  0745  0827               	movf	convert_to_fp@fract_part+1,w
  8269  0746  00B4               	movwf	convert_to_fp@tmp_left+1
  8270  0747  0826               	movf	convert_to_fp@fract_part,w
  8271  0748  00B3               	movwf	convert_to_fp@tmp_left
  8272                           
  8273                           ;fixed_point.c: 22: unsigned short res_fract = 0;
  8274  0749  01B0               	clrf	convert_to_fp@res_fract
  8275  074A  01B1               	clrf	convert_to_fp@res_fract+1
  8276                           
  8277                           ;fixed_point.c: 23: const unsigned short one = 1;
  8278                           ;fixed_point.c: 24: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  8279  074B  01B2               	clrf	convert_to_fp@i_bit
  8280  074C  3010               	movlw	16
  8281  074D  0232               	subwf	convert_to_fp@i_bit,w
  8282  074E  1803               	btfsc	3,0
  8283  074F  2F82               	goto	l413
  8284  0750                     l4054:	
  8285                           
  8286                           ;fixed_point.c: 25: {
  8287                           ;fixed_point.c: 26: tmp_left = tmp_left << 1;
  8288  0750  3533               	lslf	convert_to_fp@tmp_left,w
  8289  0751  00B3               	movwf	convert_to_fp@tmp_left
  8290  0752  0D34               	rlf	convert_to_fp@tmp_left+1,w
  8291  0753  00B4               	movwf	convert_to_fp@tmp_left+1
  8292                           
  8293                           ;fixed_point.c: 27: if (tmp_left >= 10000)
  8294  0754  3027               	movlw	39
  8295  0755  0234               	subwf	convert_to_fp@tmp_left+1,w
  8296  0756  3010               	movlw	16
  8297  0757  1903               	skipnz
  8298  0758  0233               	subwf	convert_to_fp@tmp_left,w
  8299  0759  1C03               	skipc
  8300  075A  2F7A               	goto	l4060
  8301                           
  8302                           ;fixed_point.c: 28: {
  8303                           ;fixed_point.c: 29: res_fract = res_fract | one<<(16-i_bit-1);
  8304  075B  30D1               	movlw	low (convert_to_fp@one| (0+32768))
  8305  075C  0084               	movwf	4
  8306  075D  3087               	movlw	high (convert_to_fp@one| (0+32768))
  8307  075E  0085               	movwf	5
  8308  075F  3F00               	moviw [0]fsr0
  8309  0760  00A8               	movwf	??_convert_to_fp
  8310  0761  3F01               	moviw [1]fsr0
  8311  0762  00A9               	movwf	??_convert_to_fp+1
  8312  0763  0832               	movf	convert_to_fp@i_bit,w
  8313  0764  3E01               	addlw	1
  8314  0765  3AFF               	xorlw	255
  8315  0766  3E01               	addlw	1
  8316  0767  3E10               	addlw	16
  8317  0768  0A89               	incf	9,f
  8318  0769  2F6C               	goto	u4344
  8319  076A                     u4345:	
  8320  076A  35A8               	lslf	??_convert_to_fp,f
  8321  076B  0DA9               	rlf	??_convert_to_fp+1,f
  8322  076C                     u4344:	
  8323  076C  0B89               	decfsz	9,f
  8324  076D  2F6A               	goto	u4345
  8325  076E  0830               	movf	convert_to_fp@res_fract,w
  8326  076F  0428               	iorwf	??_convert_to_fp,w
  8327  0770  00B0               	movwf	convert_to_fp@res_fract
  8328  0771  0831               	movf	convert_to_fp@res_fract+1,w
  8329  0772  0429               	iorwf	??_convert_to_fp+1,w
  8330  0773  00B1               	movwf	convert_to_fp@res_fract+1
  8331                           
  8332                           ;fixed_point.c: 30: tmp_left = tmp_left - 10000;
  8333  0774  0833               	movf	convert_to_fp@tmp_left,w
  8334  0775  3EF0               	addlw	240
  8335  0776  00B3               	movwf	convert_to_fp@tmp_left
  8336  0777  30D8               	movlw	216
  8337  0778  3D34               	addwfc	convert_to_fp@tmp_left+1,w
  8338  0779  00B4               	movwf	convert_to_fp@tmp_left+1
  8339  077A                     l4060:	
  8340  077A  3001               	movlw	1
  8341  077B  00A8               	movwf	??_convert_to_fp
  8342  077C  0828               	movf	??_convert_to_fp,w
  8343  077D  07B2               	addwf	convert_to_fp@i_bit,f
  8344  077E  3010               	movlw	16
  8345  077F  0232               	subwf	convert_to_fp@i_bit,w
  8346  0780  1C03               	skipc
  8347  0781  2F50               	goto	l4054
  8348  0782                     l413:	
  8349                           
  8350                           ;fixed_point.c: 31: }
  8351                           ;fixed_point.c: 32: }
  8352                           ;fixed_point.c: 34: if (res < 0)
  8353  0782  1FB8               	btfss	convert_to_fp@res+3,7
  8354  0783  2F9E               	goto	l4066
  8355                           
  8356                           ;fixed_point.c: 35: res = res - res_fract;
  8357  0784  0835               	movf	convert_to_fp@res,w
  8358  0785  00A8               	movwf	??_convert_to_fp
  8359  0786  0836               	movf	convert_to_fp@res+1,w
  8360  0787  00A9               	movwf	??_convert_to_fp+1
  8361  0788  0837               	movf	convert_to_fp@res+2,w
  8362  0789  00AA               	movwf	??_convert_to_fp+2
  8363  078A  0838               	movf	convert_to_fp@res+3,w
  8364  078B  00AB               	movwf	??_convert_to_fp+3
  8365  078C  0830               	movf	convert_to_fp@res_fract,w
  8366  078D  00AC               	movwf	??_convert_to_fp+4
  8367  078E  0831               	movf	convert_to_fp@res_fract+1,w
  8368  078F  00AD               	movwf	??_convert_to_fp+5
  8369  0790  01AE               	clrf	??_convert_to_fp+6
  8370  0791  01AF               	clrf	??_convert_to_fp+7
  8371  0792  09AC               	comf	??_convert_to_fp+4,f
  8372  0793  09AD               	comf	??_convert_to_fp+5,f
  8373  0794  09AE               	comf	??_convert_to_fp+6,f
  8374  0795  09AF               	comf	??_convert_to_fp+7,f
  8375  0796  0AAC               	incf	??_convert_to_fp+4,f
  8376  0797  1903               	skipnz
  8377  0798  0AAD               	incf	??_convert_to_fp+5,f
  8378  0799  1903               	skipnz
  8379  079A  0AAE               	incf	??_convert_to_fp+6,f
  8380  079B  1903               	skipnz
  8381  079C  0AAF               	incf	??_convert_to_fp+7,f
  8382  079D  2FAC               	goto	L10
  8383  079E                     l4066:	
  8384                           
  8385                           ;fixed_point.c: 36: else
  8386                           ;fixed_point.c: 37: res = res + res_fract;
  8387  079E  0835               	movf	convert_to_fp@res,w
  8388  079F  00A8               	movwf	??_convert_to_fp
  8389  07A0  0836               	movf	convert_to_fp@res+1,w
  8390  07A1  00A9               	movwf	??_convert_to_fp+1
  8391  07A2  0837               	movf	convert_to_fp@res+2,w
  8392  07A3  00AA               	movwf	??_convert_to_fp+2
  8393  07A4  0838               	movf	convert_to_fp@res+3,w
  8394  07A5  00AB               	movwf	??_convert_to_fp+3
  8395  07A6  0830               	movf	convert_to_fp@res_fract,w
  8396  07A7  00AC               	movwf	??_convert_to_fp+4
  8397  07A8  0831               	movf	convert_to_fp@res_fract+1,w
  8398  07A9  00AD               	movwf	??_convert_to_fp+5
  8399  07AA  01AE               	clrf	??_convert_to_fp+6
  8400  07AB  01AF               	clrf	??_convert_to_fp+7
  8401  07AC                     L10:	
  8402  07AC  082C               	movf	??_convert_to_fp+4,w
  8403  07AD  07A8               	addwf	??_convert_to_fp,f
  8404  07AE  082D               	movf	??_convert_to_fp+5,w
  8405  07AF  3DA9               	addwfc	??_convert_to_fp+1,f
  8406  07B0  082E               	movf	??_convert_to_fp+6,w
  8407  07B1  3DAA               	addwfc	??_convert_to_fp+2,f
  8408  07B2  082F               	movf	??_convert_to_fp+7,w
  8409  07B3  3DAB               	addwfc	??_convert_to_fp+3,f
  8410  07B4  082B               	movf	??_convert_to_fp+3,w
  8411  07B5  00B8               	movwf	convert_to_fp@res+3
  8412  07B6  082A               	movf	??_convert_to_fp+2,w
  8413  07B7  00B7               	movwf	convert_to_fp@res+2
  8414  07B8  0829               	movf	??_convert_to_fp+1,w
  8415  07B9  00B6               	movwf	convert_to_fp@res+1
  8416  07BA  0828               	movf	??_convert_to_fp,w
  8417  07BB  00B5               	movwf	convert_to_fp@res
  8418                           
  8419                           ;fixed_point.c: 38: return res;
  8420  07BC  0838               	movf	convert_to_fp@res+3,w
  8421  07BD  00A7               	movwf	?_convert_to_fp+3
  8422  07BE  0837               	movf	convert_to_fp@res+2,w
  8423  07BF  00A6               	movwf	?_convert_to_fp+2
  8424  07C0  0836               	movf	convert_to_fp@res+1,w
  8425  07C1  00A5               	movwf	?_convert_to_fp+1
  8426  07C2  0835               	movf	convert_to_fp@res,w
  8427  07C3  00A4               	movwf	?_convert_to_fp
  8428  07C4  0008               	return
  8429  07C5                     __end_of_convert_to_fp:	
  8430                           
  8431                           	psect	text27
  8432  0A47                     __ptext27:	
  8433 ;; *************** function ___wmul *****************
  8434 ;; Defined at:
  8435 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8438 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;  product         2    4[COMMON] unsigned int 
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  2    0[BANK0 ] unsigned int 
  8443 ;; Registers used:
  8444 ;;		wreg, status,2, status,0
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8450 ;;      Params:         0       4       0       0       0       0
  8451 ;;      Locals:         2       0       0       0       0       0
  8452 ;;      Temps:          0       0       0       0       0       0
  8453 ;;      Totals:         2       4       0       0       0       0
  8454 ;;Total ram usage:        6 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    6
  8457 ;; This function calls:
  8458 ;;		Nothing
  8459 ;; This function is called by:
  8460 ;;		_main
  8461 ;;		_GPS_read_speed
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           
  8466                           ;psect for function ___wmul
  8467  0A47                     ___wmul:	
  8468                           
  8469                           ;incstack = 0
  8470                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8471  0A47  01F4               	clrf	___wmul@product
  8472  0A48  01F5               	clrf	___wmul@product+1
  8473  0A49                     l4102:	
  8474  0A49  0020               	movlb	0	; select bank0
  8475  0A4A  1C20               	btfss	___wmul@multiplier,0
  8476  0A4B  2A50               	goto	l846
  8477  0A4C  0822               	movf	___wmul@multiplicand,w
  8478  0A4D  07F4               	addwf	___wmul@product,f
  8479  0A4E  0823               	movf	___wmul@multiplicand+1,w
  8480  0A4F  3DF5               	addwfc	___wmul@product+1,f
  8481  0A50                     l846:	
  8482  0A50  3001               	movlw	1
  8483  0A51                     u4425:	
  8484  0A51  35A2               	lslf	___wmul@multiplicand,f
  8485  0A52  0DA3               	rlf	___wmul@multiplicand+1,f
  8486  0A53  0B89               	decfsz	9,f
  8487  0A54  2A51               	goto	u4425
  8488  0A55  3001               	movlw	1
  8489  0A56                     u4435:	
  8490  0A56  36A1               	lsrf	___wmul@multiplier+1,f
  8491  0A57  0CA0               	rrf	___wmul@multiplier,f
  8492  0A58  0B89               	decfsz	9,f
  8493  0A59  2A56               	goto	u4435
  8494  0A5A  0820               	movf	___wmul@multiplier,w
  8495  0A5B  0421               	iorwf	___wmul@multiplier+1,w
  8496  0A5C  1D03               	btfss	3,2
  8497  0A5D  2A49               	goto	l4102
  8498  0A5E  0875               	movf	___wmul@product+1,w
  8499  0A5F  00A1               	movwf	?___wmul+1
  8500  0A60  0874               	movf	___wmul@product,w
  8501  0A61  00A0               	movwf	?___wmul
  8502  0A62  0008               	return
  8503  0A63                     __end_of___wmul:	
  8504                           
  8505                           	psect	text28
  8506  0AB9                     __ptext28:	
  8507 ;; *************** function _EUSART_Read *****************
  8508 ;; Defined at:
  8509 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;		None
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  readValue       1    5[COMMON] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      unsigned char 
  8516 ;; Registers used:
  8517 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8523 ;;      Params:         0       0       0       0       0       0
  8524 ;;      Locals:         1       0       0       0       0       0
  8525 ;;      Temps:          1       0       0       0       0       0
  8526 ;;      Totals:         2       0       0       0       0       0
  8527 ;;Total ram usage:        2 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    6
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_GPS_read_speed
  8534 ;;		_getch
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function _EUSART_Read
  8540  0AB9                     _EUSART_Read:	
  8541                           
  8542                           ;eusart.c: 114: uint8_t readValue = 0;
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8546  0AB9  01F5               	clrf	EUSART_Read@readValue
  8547                           
  8548                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  8549  0ABA  0023               	movlb	3	; select bank3
  8550  0ABB  169D               	bsf	29,5	;volatile
  8551  0ABC                     l3972:	
  8552                           ;eusart.c: 120: {
  8553                           
  8554                           ;eusart.c: 119: while(0 == eusartRxCount)
  8555                           
  8556  0ABC  0878               	movf	_eusartRxCount,w	;volatile
  8557  0ABD  1903               	btfsc	3,2
  8558  0ABE  2ABC               	goto	l3972
  8559                           
  8560                           ;eusart.c: 121: }
  8561                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  8562  0ABF  0021               	movlb	1	; select bank1
  8563  0AC0  1291               	bcf	17,5	;volatile
  8564                           
  8565                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  8566  0AC1  083B               	movf	_eusartRxTail^(0+128),w
  8567  0AC2  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8568  0AC3  0086               	movwf	6
  8569  0AC4  0187               	clrf	7
  8570  0AC5  0801               	movf	1,w
  8571  0AC6  00F4               	movwf	??_EUSART_Read
  8572  0AC7  0874               	movf	??_EUSART_Read,w
  8573  0AC8  00F5               	movwf	EUSART_Read@readValue
  8574  0AC9  3001               	movlw	1
  8575  0ACA  00F4               	movwf	??_EUSART_Read
  8576  0ACB  0874               	movf	??_EUSART_Read,w
  8577  0ACC  07BB               	addwf	_eusartRxTail^(0+128),f
  8578                           
  8579                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8580  0ACD  3008               	movlw	8
  8581  0ACE  023B               	subwf	_eusartRxTail^(0+128),w
  8582  0ACF  1803               	btfsc	3,0
  8583                           
  8584                           ;eusart.c: 127: {
  8585                           ;eusart.c: 128: eusartRxTail = 0;
  8586  0AD0  01BB               	clrf	_eusartRxTail^(0+128)
  8587                           
  8588                           ;eusart.c: 129: }
  8589                           ;eusart.c: 130: eusartRxCount--;
  8590  0AD1  3001               	movlw	1
  8591  0AD2  02F8               	subwf	_eusartRxCount,f	;volatile
  8592                           
  8593                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  8594  0AD3  1691               	bsf	17,5	;volatile
  8595                           
  8596                           ;eusart.c: 133: return readValue;
  8597  0AD4  0875               	movf	EUSART_Read@readValue,w
  8598  0AD5  0008               	return
  8599  0AD6                     __end_of_EUSART_Read:	
  8600                           
  8601                           	psect	text29
  8602  0BCD                     __ptext29:	
  8603 ;; *************** function _GPS_Initialize *****************
  8604 ;; Defined at:
  8605 ;;		line 13 in file "GPS.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;		None
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  __delay_tmp     1   11[BANK0 ] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8619 ;;      Params:         0       0       0       0       0       0
  8620 ;;      Locals:         0       1       0       0       0       0
  8621 ;;      Temps:          0       3       0       0       0       0
  8622 ;;      Totals:         0       4       0       0       0       0
  8623 ;;Total ram usage:        4 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    9
  8626 ;; This function calls:
  8627 ;;		_printf
  8628 ;; This function is called by:
  8629 ;;		_main
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _GPS_Initialize
  8635  0BCD                     _GPS_Initialize:	
  8636                           
  8637                           ;GPS.c: 15: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((un
      +                          signed long)((100)*(32000000/4000.0)));};
  8638                           
  8639                           ;incstack = 0
  8640                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8641  0BCD  0020               	movlb	0	; select bank0
  8642  0BCE  01AB               	clrf	GPS_Initialize@__delay_tmp
  8643  0BCF  300A               	movlw	10
  8644  0BD0  022B               	subwf	GPS_Initialize@__delay_tmp,w
  8645  0BD1  1803               	btfsc	3,0
  8646  0BD2  2BE8               	goto	l4394
  8647  0BD3                     l4388:	
  8648  0BD3  3005               	movlw	5
  8649  0BD4  00AA               	movwf	??_GPS_Initialize+2
  8650  0BD5  300F               	movlw	15
  8651  0BD6  00A9               	movwf	??_GPS_Initialize+1
  8652  0BD7  30F4               	movlw	244
  8653  0BD8  00A8               	movwf	??_GPS_Initialize
  8654  0BD9                     u6067:	
  8655  0BD9  0BA8               	decfsz	??_GPS_Initialize,f
  8656  0BDA  2BD9               	goto	u6067
  8657  0BDB  0BA9               	decfsz	??_GPS_Initialize+1,f
  8658  0BDC  2BD9               	goto	u6067
  8659  0BDD  0BAA               	decfsz	??_GPS_Initialize+2,f
  8660  0BDE  2BD9               	goto	u6067
  8661  0BDF  3001               	movlw	1
  8662  0BE0  0020               	movlb	0	; select bank0
  8663  0BE1  00A8               	movwf	??_GPS_Initialize
  8664  0BE2  0828               	movf	??_GPS_Initialize,w
  8665  0BE3  07AB               	addwf	GPS_Initialize@__delay_tmp,f
  8666  0BE4  300A               	movlw	10
  8667  0BE5  022B               	subwf	GPS_Initialize@__delay_tmp,w
  8668  0BE6  1C03               	skipc
  8669  0BE7  2BD3               	goto	l4388
  8670  0BE8                     l4394:	
  8671                           
  8672                           ;GPS.c: 17: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  8673  0BE8  30D3               	movlw	low (STR_1| (0+32768))
  8674  0BE9  00A1               	movwf	printf@f
  8675  0BEA  3087               	movlw	high (STR_1| (0+32768))
  8676  0BEB  00A2               	movwf	printf@f+1
  8677  0BEC  318A  229C  318B   	fcall	_printf
  8678                           
  8679                           ;GPS.c: 18: _delay((unsigned long)((100)*(32000000/4000.0)));
  8680  0BEF  3005               	movlw	5
  8681  0BF0  0020               	movlb	0	; select bank0
  8682  0BF1  00AA               	movwf	??_GPS_Initialize+2
  8683  0BF2  300F               	movlw	15
  8684  0BF3  00A9               	movwf	??_GPS_Initialize+1
  8685  0BF4  30F4               	movlw	244
  8686  0BF5  00A8               	movwf	??_GPS_Initialize
  8687  0BF6                     u6077:	
  8688  0BF6  0BA8               	decfsz	??_GPS_Initialize,f
  8689  0BF7  2BF6               	goto	u6077
  8690  0BF8  0BA9               	decfsz	??_GPS_Initialize+1,f
  8691  0BF9  2BF6               	goto	u6077
  8692  0BFA  0BAA               	decfsz	??_GPS_Initialize+2,f
  8693  0BFB  2BF6               	goto	u6077
  8694                           
  8695                           ;GPS.c: 20: printf("$PMTK220,100*2F\r\n");
  8696  0BFC  3007               	movlw	low (STR_2| (0+32768))
  8697  0BFD  0020               	movlb	0	; select bank0
  8698  0BFE  00A1               	movwf	printf@f
  8699  0BFF  3088               	movlw	high (STR_2| (0+32768))
  8700  0C00  00A2               	movwf	printf@f+1
  8701  0C01  318A  229C  318B   	fcall	_printf
  8702                           
  8703                           ;GPS.c: 21: _delay((unsigned long)((100)*(32000000/4000.0)));
  8704  0C04  3005               	movlw	5
  8705  0C05  0020               	movlb	0	; select bank0
  8706  0C06  00AA               	movwf	??_GPS_Initialize+2
  8707  0C07  300F               	movlw	15
  8708  0C08  00A9               	movwf	??_GPS_Initialize+1
  8709  0C09  30F4               	movlw	244
  8710  0C0A  00A8               	movwf	??_GPS_Initialize
  8711  0C0B                     u6087:	
  8712  0C0B  0BA8               	decfsz	??_GPS_Initialize,f
  8713  0C0C  2C0B               	goto	u6087
  8714  0C0D  0BA9               	decfsz	??_GPS_Initialize+1,f
  8715  0C0E  2C0B               	goto	u6087
  8716  0C0F  0BAA               	decfsz	??_GPS_Initialize+2,f
  8717  0C10  2C0B               	goto	u6087
  8718  0C11  0008               	return
  8719  0C12                     __end_of_GPS_Initialize:	
  8720                           
  8721                           	psect	text30
  8722  0A9C                     __ptext30:	
  8723 ;; *************** function _printf *****************
  8724 ;; Defined at:
  8725 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  8728 ;;		 -> STR_2(18), STR_1(52), 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  tmpval          4    0        struct .
  8731 ;;  cp              2    0        PTR const unsigned char 
  8732 ;;  len             2    0        unsigned int 
  8733 ;;  val             2    0        unsigned int 
  8734 ;;  c               1    7[BANK0 ] char 
  8735 ;;  ap              1    6[BANK0 ] PTR void [1]
  8736 ;;		 -> ?_printf(2), 
  8737 ;;  flag            1    0        unsigned char 
  8738 ;;  prec            1    0        char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  2    1[BANK0 ] int 
  8741 ;; Registers used:
  8742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8748 ;;      Params:         0       2       0       0       0       0
  8749 ;;      Locals:         0       2       0       0       0       0
  8750 ;;      Temps:          0       3       0       0       0       0
  8751 ;;      Totals:         0       7       0       0       0       0
  8752 ;;Total ram usage:        7 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    8
  8755 ;; This function calls:
  8756 ;;		_putch
  8757 ;; This function is called by:
  8758 ;;		_GPS_Initialize
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           
  8763                           ;psect for function _printf
  8764  0A9C                     _printf:	
  8765                           
  8766                           ;doprnt.c: 466: va_list ap;
  8767                           ;doprnt.c: 499: signed char c;
  8768                           ;doprnt.c: 506: signed char prec;
  8769                           ;doprnt.c: 508: unsigned char flag;
  8770                           ;doprnt.c: 523: union {
  8771                           ;doprnt.c: 524: unsigned long vd;
  8772                           ;doprnt.c: 525: double integ;
  8773                           ;doprnt.c: 526: } tmpval;
  8774                           ;doprnt.c: 528: unsigned int val;
  8775                           ;doprnt.c: 529: unsigned len;
  8776                           ;doprnt.c: 530: const char * cp;
  8777                           ;doprnt.c: 533: *ap = __va_start();
  8778                           
  8779                           ;incstack = 0
  8780                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8781  0A9C  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8782  0A9D  0020               	movlb	0	; select bank0
  8783  0A9E  00A3               	movwf	??_printf
  8784  0A9F  0823               	movf	??_printf,w
  8785  0AA0  00A6               	movwf	printf@ap
  8786  0AA1                     l4090:	
  8787                           ;doprnt.c: 543: }
  8788                           ;doprnt.c: 1422: {
  8789                           
  8790                           ;doprnt.c: 542: continue;
  8791                           
  8792                           ;doprnt.c: 536: while(c = *f++) {
  8793                           
  8794  0AA1  0020               	movlb	0	; select bank0
  8795  0AA2  0822               	movf	printf@f+1,w
  8796  0AA3  00A4               	movwf	??_printf+1
  8797  0AA4  0821               	movf	printf@f,w
  8798  0AA5  00A3               	movwf	??_printf
  8799  0AA6  0AA1               	incf	printf@f,f
  8800  0AA7  1903               	skipnz
  8801  0AA8  0AA2               	incf	printf@f+1,f
  8802  0AA9  0823               	movf	??_printf,w
  8803  0AAA  0084               	movwf	4
  8804  0AAB  0824               	movf	??_printf+1,w
  8805  0AAC  0085               	movwf	5
  8806  0AAD  0800               	movf	0,w	;code access
  8807  0AAE  00A5               	movwf	??_printf+2
  8808  0AAF  0825               	movf	??_printf+2,w
  8809  0AB0  00A7               	movwf	printf@c
  8810  0AB1  0827               	movf	printf@c,w
  8811  0AB2  1903               	btfsc	3,2
  8812  0AB3  0008               	return
  8813                           
  8814                           ;doprnt.c: 540: {
  8815                           ;doprnt.c: 541: (putch(c) );
  8816  0AB4  0827               	movf	printf@c,w
  8817  0AB5  3189  213C  318A   	fcall	_putch
  8818  0AB8  2AA1               	goto	l4090
  8819  0AB9                     __end_of_printf:	
  8820                           ;doprnt.c: 1469: }
  8821                           ;doprnt.c: 1533: }
  8822                           ;doprnt.c: 1540: return 0;
  8823                           ;	Return value of _printf is never used
  8824                           
  8825                           
  8826                           	psect	text31
  8827  093C                     __ptext31:	
  8828 ;; *************** function _putch *****************
  8829 ;; Defined at:
  8830 ;;		line 164 in file "mcc_generated_files/eusart.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  txData          1    wreg     unsigned char 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  txData          1    0[BANK0 ] unsigned char 
  8835 ;; Return value:  Size  Location     Type
  8836 ;;                  1    wreg      void 
  8837 ;; Registers used:
  8838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8844 ;;      Params:         0       0       0       0       0       0
  8845 ;;      Locals:         0       1       0       0       0       0
  8846 ;;      Temps:          0       0       0       0       0       0
  8847 ;;      Totals:         0       1       0       0       0       0
  8848 ;;Total ram usage:        1 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    7
  8851 ;; This function calls:
  8852 ;;		_EUSART_Write
  8853 ;; This function is called by:
  8854 ;;		_printf
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function _putch
  8860  093C                     _putch:	
  8861                           
  8862                           ;incstack = 0
  8863                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8864                           ;putch@txData stored from wreg
  8865  093C  0020               	movlb	0	; select bank0
  8866  093D  00A0               	movwf	putch@txData
  8867                           
  8868                           ;eusart.c: 166: EUSART_Write(txData);
  8869  093E  0820               	movf	putch@txData,w
  8870  093F  318B  2314         	fcall	_EUSART_Write
  8871  0941  0008               	return
  8872  0942                     __end_of_putch:	
  8873                           
  8874                           	psect	text32
  8875  0B14                     __ptext32:	
  8876 ;; *************** function _EUSART_Write *****************
  8877 ;; Defined at:
  8878 ;;		line 136 in file "mcc_generated_files/eusart.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;  txData          1    wreg     unsigned char 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  txData          1    5[COMMON] unsigned char 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  1    wreg      void 
  8885 ;; Registers used:
  8886 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8892 ;;      Params:         0       0       0       0       0       0
  8893 ;;      Locals:         1       0       0       0       0       0
  8894 ;;      Temps:          1       0       0       0       0       0
  8895 ;;      Totals:         2       0       0       0       0       0
  8896 ;;Total ram usage:        2 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    6
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_putch
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _EUSART_Write
  8908  0B14                     _EUSART_Write:	
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8912                           ;EUSART_Write@txData stored from wreg
  8913  0B14  00F5               	movwf	EUSART_Write@txData
  8914  0B15                     l3850:	
  8915                           ;eusart.c: 139: {
  8916                           
  8917                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  8918                           
  8919  0B15  0020               	movlb	0	; select bank0
  8920  0B16  085B               	movf	_eusartTxBufferRemaining,w	;volatile
  8921  0B17  1903               	btfsc	3,2
  8922  0B18  2B15               	goto	l3850
  8923                           
  8924                           ;eusart.c: 140: }
  8925                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  8926  0B19  0021               	movlb	1	; select bank1
  8927  0B1A  1A11               	btfsc	17,4	;volatile
  8928  0B1B  2B20               	goto	l171
  8929                           
  8930                           ;eusart.c: 143: {
  8931                           ;eusart.c: 144: TXREG = txData;
  8932  0B1C  0875               	movf	EUSART_Write@txData,w
  8933  0B1D  0023               	movlb	3	; select bank3
  8934  0B1E  009A               	movwf	26	;volatile
  8935                           
  8936                           ;eusart.c: 145: }
  8937  0B1F  2B34               	goto	l3864
  8938  0B20                     l171:	
  8939                           
  8940                           ;eusart.c: 146: else
  8941                           ;eusart.c: 147: {
  8942                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  8943  0B20  1211               	bcf	17,4	;volatile
  8944                           
  8945                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  8946  0B21  0875               	movf	EUSART_Write@txData,w
  8947  0B22  00F4               	movwf	??_EUSART_Write
  8948  0B23  0020               	movlb	0	; select bank0
  8949  0B24  085C               	movf	_eusartTxHead,w
  8950  0B25  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8951  0B26  0086               	movwf	6
  8952  0B27  0187               	clrf	7
  8953  0B28  0874               	movf	??_EUSART_Write,w
  8954  0B29  0081               	movwf	1
  8955  0B2A  3001               	movlw	1
  8956  0B2B  00F4               	movwf	??_EUSART_Write
  8957  0B2C  0874               	movf	??_EUSART_Write,w
  8958  0B2D  07DC               	addwf	_eusartTxHead,f
  8959                           
  8960                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8961  0B2E  3008               	movlw	8
  8962  0B2F  025C               	subwf	_eusartTxHead,w
  8963  0B30  1803               	btfsc	3,0
  8964                           
  8965                           ;eusart.c: 151: {
  8966                           ;eusart.c: 152: eusartTxHead = 0;
  8967  0B31  01DC               	clrf	_eusartTxHead
  8968                           
  8969                           ;eusart.c: 153: }
  8970                           ;eusart.c: 154: eusartTxBufferRemaining--;
  8971  0B32  3001               	movlw	1
  8972  0B33  02DB               	subwf	_eusartTxBufferRemaining,f	;volatile
  8973  0B34                     l3864:	
  8974                           
  8975                           ;eusart.c: 155: }
  8976                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  8977  0B34  0021               	movlb	1	; select bank1
  8978  0B35  1611               	bsf	17,4	;volatile
  8979  0B36  0008               	return
  8980  0B37                     __end_of_EUSART_Write:	
  8981                           
  8982                           	psect	intentry
  8983  0004                     __pintentry:	
  8984 ;; *************** function _INTERRUPT_InterruptManager *****************
  8985 ;; Defined at:
  8986 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9000 ;;      Params:         0       0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0       0
  9002 ;;      Temps:          1       0       0       0       0       0
  9003 ;;      Totals:         1       0       0       0       0       0
  9004 ;;Total ram usage:        1 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    5
  9007 ;; This function calls:
  9008 ;;		_EUSART_Receive_ISR
  9009 ;;		_EUSART_Transmit_ISR
  9010 ;;		_TMR0_ISR
  9011 ;; This function is called by:
  9012 ;;		Interrupt level 1
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016  0004                     _INTERRUPT_InterruptManager:	
  9017                           
  9018                           ;incstack = 0
  9019  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9020                           
  9021                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9022  0005  3180               	pagesel	$
  9023  0006  0020               	movlb	0	; select bank0
  9024  0007  087F               	movf	127,w
  9025  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  9026                           
  9027                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  9028  0009  1A8B               	btfsc	11,5	;volatile
  9029  000A  1D0B               	btfss	11,2	;volatile
  9030  000B  280F               	goto	i1l3654
  9031                           
  9032                           ;interrupt_manager.c: 55: {
  9033                           ;interrupt_manager.c: 56: TMR0_ISR();
  9034  000C  3189  21E4  3180   	fcall	_TMR0_ISR
  9035  000F                     i1l3654:	
  9036                           
  9037                           ;interrupt_manager.c: 57: }
  9038                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9039  000F  1F0B               	btfss	11,6	;volatile
  9040  0010  281A               	goto	i1l3662
  9041  0011  0021               	movlb	1	; select bank1
  9042  0012  1E11               	btfss	17,4	;volatile
  9043  0013  281A               	goto	i1l3662
  9044  0014  0020               	movlb	0	; select bank0
  9045  0015  1E11               	btfss	17,4	;volatile
  9046  0016  281A               	goto	i1l3662
  9047                           
  9048                           ;interrupt_manager.c: 59: {
  9049                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  9050  0017  318A  227F  3180   	fcall	_EUSART_Transmit_ISR
  9051  001A                     i1l3662:	
  9052                           
  9053                           ;interrupt_manager.c: 61: }
  9054                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  9055  001A  1F0B               	btfss	11,6	;volatile
  9056  001B  2824               	goto	i1l77
  9057  001C  0021               	movlb	1	; select bank1
  9058  001D  1E91               	btfss	17,5	;volatile
  9059  001E  2824               	goto	i1l77
  9060  001F  0020               	movlb	0	; select bank0
  9061  0020  1E91               	btfss	17,5	;volatile
  9062  0021  2824               	goto	i1l77
  9063                           
  9064                           ;interrupt_manager.c: 63: {
  9065                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  9066  0022  318A  2211         	fcall	_EUSART_Receive_ISR
  9067  0024                     i1l77:	
  9068                           ;interrupt_manager.c: 66: else
  9069                           ;interrupt_manager.c: 67: {
  9070                           
  9071                           ;interrupt_manager.c: 65: }
  9072                           
  9073  0024  0873               	movf	??_INTERRUPT_InterruptManager,w
  9074  0025  0020               	movlb	0	; select bank0
  9075  0026  00FF               	movwf	127
  9076  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9077  0028  0009               	retfie
  9078  0029                     __end_of_INTERRUPT_InterruptManager:	
  9079                           
  9080                           	psect	text34
  9081  09E4                     __ptext34:	
  9082 ;; *************** function _TMR0_ISR *****************
  9083 ;; Defined at:
  9084 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;		None
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;		None
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  1    wreg      void 
  9091 ;; Registers used:
  9092 ;;		wreg, status,2, status,0, pclath, cstack
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9098 ;;      Params:         0       0       0       0       0       0
  9099 ;;      Locals:         0       0       0       0       0       0
  9100 ;;      Temps:          0       0       0       0       0       0
  9101 ;;      Totals:         0       0       0       0       0       0
  9102 ;;Total ram usage:        0 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    4
  9105 ;; This function calls:
  9106 ;;		_TMR0_CallBack
  9107 ;; This function is called by:
  9108 ;;		_INTERRUPT_InterruptManager
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           
  9113                           ;psect for function _TMR0_ISR
  9114  09E4                     _TMR0_ISR:	
  9115                           
  9116                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  9117                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  9118                           
  9119                           ;incstack = 0
  9120                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  9121  09E4  110B               	bcf	11,2	;volatile
  9122                           
  9123                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  9124  09E5  0879               	movf	_timer0ReloadVal,w	;volatile
  9125  09E6  0020               	movlb	0	; select bank0
  9126  09E7  0095               	movwf	21	;volatile
  9127                           
  9128                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  9129  09E8  3001               	movlw	1
  9130  09E9  0021               	movlb	1	; select bank1
  9131  09EA  07B4               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
  9132  09EB  3000               	movlw	0
  9133  09EC  3DB5               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
  9134  09ED  3000               	movlw	0
  9135  09EE  0235               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
  9136  09EF  3002               	movlw	2
  9137  09F0  1903               	skipnz
  9138  09F1  0234               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
  9139  09F2  1C03               	skipc
  9140  09F3  0008               	return
  9141                           
  9142                           ;tmr0.c: 119: {
  9143                           ;tmr0.c: 121: TMR0_CallBack();
  9144  09F4  3189  2160         	fcall	_TMR0_CallBack
  9145                           
  9146                           ;tmr0.c: 124: CountCallBack = 0;
  9147  09F6  0021               	movlb	1	; select bank1
  9148  09F7  01B4               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
  9149  09F8  01B5               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
  9150  09F9  0008               	return
  9151  09FA                     __end_of_TMR0_ISR:	
  9152                           
  9153                           	psect	text35
  9154  0960                     __ptext35:	
  9155 ;; *************** function _TMR0_CallBack *****************
  9156 ;; Defined at:
  9157 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  1    wreg      void 
  9164 ;; Registers used:
  9165 ;;		wreg, status,2, status,0, pclath, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9171 ;;      Params:         0       0       0       0       0       0
  9172 ;;      Locals:         0       0       0       0       0       0
  9173 ;;      Temps:          0       0       0       0       0       0
  9174 ;;      Totals:         0       0       0       0       0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    3
  9178 ;; This function calls:
  9179 ;;		Absolute function
  9180 ;;		_TMR0_DefaultInterruptHandler
  9181 ;;		_my10msTimerISR
  9182 ;; This function is called by:
  9183 ;;		_TMR0_ISR
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           
  9188                           ;psect for function _TMR0_CallBack
  9189  0960                     _TMR0_CallBack:	
  9190                           
  9191                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  9192                           
  9193                           ;incstack = 0
  9194                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  9195  0960  0021               	movlb	1	; select bank1
  9196  0961  0836               	movf	_TMR0_InterruptHandler^(0+128),w
  9197  0962  0437               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  9198  0963  1903               	btfsc	3,2
  9199  0964  0008               	return
  9200                           
  9201                           ;tmr0.c: 135: {
  9202                           ;tmr0.c: 136: TMR0_InterruptHandler();
  9203  0965  0837               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  9204  0966  008A               	movwf	10
  9205  0967  0836               	movf	_TMR0_InterruptHandler^(0+128),w
  9206  0968  000A               	callw
  9207  0969  3189               	pagesel	$
  9208  096A  0008               	return
  9209  096B                     __end_of_TMR0_CallBack:	
  9210                           
  9211                           	psect	text36
  9212  0003                     __ptext36:	
  9213 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  9214 ;; Defined at:
  9215 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;		None
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;		None
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  1    wreg      void 
  9222 ;; Registers used:
  9223 ;;		None
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9229 ;;      Params:         0       0       0       0       0       0
  9230 ;;      Locals:         0       0       0       0       0       0
  9231 ;;      Temps:          0       0       0       0       0       0
  9232 ;;      Totals:         0       0       0       0       0       0
  9233 ;;Total ram usage:        0 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; This function calls:
  9236 ;;		Nothing
  9237 ;; This function is called by:
  9238 ;;		_TMR0_Initialize
  9239 ;;		_TMR0_CallBack
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           
  9244                           ;psect for function _TMR0_DefaultInterruptHandler
  9245  0003                     _TMR0_DefaultInterruptHandler:	
  9246                           
  9247                           ;incstack = 0
  9248                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  9249  0003  0008               	return
  9250  0004                     __end_of_TMR0_DefaultInterruptHandler:	
  9251                           
  9252                           	psect	text37
  9253  0936                     __ptext37:	
  9254 ;; *************** function _my10msTimerISR *****************
  9255 ;; Defined at:
  9256 ;;		line 207 in file "main.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg, status,2, status,0, pclath, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9270 ;;      Params:         0       0       0       0       0       0
  9271 ;;      Locals:         0       0       0       0       0       0
  9272 ;;      Temps:          0       0       0       0       0       0
  9273 ;;      Totals:         0       0       0       0       0       0
  9274 ;;Total ram usage:        0 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    2
  9277 ;; This function calls:
  9278 ;;		_LED_update_loop
  9279 ;;		_button_update_loop
  9280 ;; This function is called by:
  9281 ;;		_main
  9282 ;;		_TMR0_CallBack
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function _my10msTimerISR
  9288  0936                     _my10msTimerISR:	
  9289                           
  9290                           ;main.c: 209: LED_update_loop();
  9291                           
  9292                           ;incstack = 0
  9293                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  9294  0936  318B  2337  3189   	fcall	_LED_update_loop
  9295                           
  9296                           ;main.c: 210: button_update_loop();
  9297  0939  318C  2461         	fcall	_button_update_loop
  9298  093B  0008               	return
  9299  093C                     __end_of_my10msTimerISR:	
  9300                           
  9301                           	psect	text38
  9302  0C61                     __ptext38:	
  9303 ;; *************** function _button_update_loop *****************
  9304 ;; Defined at:
  9305 ;;		line 89 in file "interact.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;		None
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  current_stat    1    2[COMMON] unsigned char 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  1    wreg      void 
  9312 ;; Registers used:
  9313 ;;		wreg, status,2, status,0, pclath, cstack
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9319 ;;      Params:         0       0       0       0       0       0
  9320 ;;      Locals:         1       0       0       0       0       0
  9321 ;;      Temps:          1       0       0       0       0       0
  9322 ;;      Totals:         2       0       0       0       0       0
  9323 ;;Total ram usage:        2 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    1
  9326 ;; This function calls:
  9327 ;;		i1_get_button_state
  9328 ;; This function is called by:
  9329 ;;		_my10msTimerISR
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           
  9334                           ;psect for function _button_update_loop
  9335  0C61                     _button_update_loop:	
  9336                           
  9337                           ;interact.c: 91: unsigned char current_state = get_button_state();
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  9341  0C61  3189  216B  318C   	fcall	i1_get_button_state
  9342  0C64  00F1               	movwf	??_button_update_loop
  9343  0C65  0871               	movf	??_button_update_loop,w
  9344  0C66  00F2               	movwf	button_update_loop@current_state
  9345                           
  9346                           ;interact.c: 92: if (!m_button.push_confirmed)
  9347  0C67  0020               	movlb	0	; select bank0
  9348  0C68  0857               	movf	_m_button+3,w	;volatile
  9349  0C69  1D03               	btfss	3,2
  9350  0C6A  2C85               	goto	i1l2684
  9351                           
  9352                           ;interact.c: 93: {
  9353                           ;interact.c: 95: if (current_state != m_button.last_state)
  9354  0C6B  0859               	movf	_m_button+5,w	;volatile
  9355  0C6C  0672               	xorwf	button_update_loop@current_state,w
  9356  0C6D  1903               	skipnz
  9357  0C6E  2C75               	goto	i1l2676
  9358                           
  9359                           ;interact.c: 96: {
  9360                           ;interact.c: 97: m_button.count_pressed = 0;
  9361  0C6F  01D5               	clrf	_m_button+1	;volatile
  9362                           
  9363                           ;interact.c: 98: m_button.last_state = current_state;
  9364  0C70  0872               	movf	button_update_loop@current_state,w
  9365  0C71  00F1               	movwf	??_button_update_loop
  9366  0C72  0871               	movf	??_button_update_loop,w
  9367  0C73  00D9               	movwf	_m_button+5	;volatile
  9368                           
  9369                           ;interact.c: 99: }
  9370  0C74  0008               	return
  9371  0C75                     i1l2676:	
  9372                           
  9373                           ;interact.c: 100: else if (m_button.last_state == 1)
  9374  0C75  0359               	decf	_m_button+5,w	;volatile
  9375  0C76  1D03               	btfss	3,2
  9376  0C77  0008               	return
  9377                           
  9378                           ;interact.c: 101: {
  9379                           ;interact.c: 102: m_button.count_pressed++;
  9380  0C78  3001               	movlw	1
  9381  0C79  00F1               	movwf	??_button_update_loop
  9382  0C7A  0871               	movf	??_button_update_loop,w
  9383  0C7B  07D5               	addwf	_m_button+1,f	;volatile
  9384                           
  9385                           ;interact.c: 103: if (m_button.count_pressed > 5)
  9386  0C7C  3006               	movlw	6
  9387  0C7D  0255               	subwf	_m_button+1,w	;volatile
  9388  0C7E  1C03               	skipc
  9389  0C7F  0008               	return
  9390                           
  9391                           ;interact.c: 104: m_button.push_confirmed = 1;
  9392  0C80  3001               	movlw	1
  9393  0C81  00F1               	movwf	??_button_update_loop
  9394  0C82  0871               	movf	??_button_update_loop,w
  9395  0C83  00D7               	movwf	_m_button+3	;volatile
  9396                           
  9397                           ;interact.c: 105: }
  9398                           ;interact.c: 106: }
  9399  0C84  0008               	return
  9400  0C85                     i1l2684:	
  9401                           
  9402                           ;interact.c: 107: else
  9403                           ;interact.c: 108: {
  9404                           ;interact.c: 109: if (current_state != m_button.last_state)
  9405  0C85  0859               	movf	_m_button+5,w	;volatile
  9406  0C86  0672               	xorwf	button_update_loop@current_state,w
  9407  0C87  1903               	skipnz
  9408  0C88  2C93               	goto	i1l2692
  9409                           
  9410                           ;interact.c: 110: {
  9411                           ;interact.c: 111: m_button.count_released = 0;
  9412  0C89  01D6               	clrf	_m_button+2	;volatile
  9413                           
  9414                           ;interact.c: 112: m_button.last_state = current_state;
  9415  0C8A  0872               	movf	button_update_loop@current_state,w
  9416  0C8B  00F1               	movwf	??_button_update_loop
  9417  0C8C  0871               	movf	??_button_update_loop,w
  9418  0C8D  00D9               	movwf	_m_button+5	;volatile
  9419                           
  9420                           ;interact.c: 113: m_button.has_once_been_released = 1;
  9421  0C8E  3001               	movlw	1
  9422  0C8F  00F1               	movwf	??_button_update_loop
  9423  0C90  0871               	movf	??_button_update_loop,w
  9424  0C91  00DA               	movwf	_m_button+6	;volatile
  9425                           
  9426                           ;interact.c: 114: }
  9427  0C92  0008               	return
  9428  0C93                     i1l2692:	
  9429                           
  9430                           ;interact.c: 115: else if ((m_button.last_state == 1)&&(!m_button.has_once_been_released
      +                          ))
  9431  0C93  0359               	decf	_m_button+5,w	;volatile
  9432  0C94  1D03               	btfss	3,2
  9433  0C95  2CA6               	goto	i1l2702
  9434  0C96  085A               	movf	_m_button+6,w	;volatile
  9435  0C97  1D03               	btfss	3,2
  9436  0C98  2CA6               	goto	i1l2702
  9437                           
  9438                           ;interact.c: 116: {
  9439                           ;interact.c: 117: m_button.count_pressed++;
  9440  0C99  3001               	movlw	1
  9441  0C9A  00F1               	movwf	??_button_update_loop
  9442  0C9B  0871               	movf	??_button_update_loop,w
  9443  0C9C  07D5               	addwf	_m_button+1,f	;volatile
  9444                           
  9445                           ;interact.c: 118: if (m_button.count_pressed >= 100)
  9446  0C9D  3064               	movlw	100
  9447  0C9E  0255               	subwf	_m_button+1,w	;volatile
  9448  0C9F  1C03               	skipc
  9449  0CA0  0008               	return
  9450                           
  9451                           ;interact.c: 119: m_button.confirmed_state = long_push;
  9452  0CA1  3002               	movlw	2
  9453  0CA2  00F1               	movwf	??_button_update_loop
  9454  0CA3  0871               	movf	??_button_update_loop,w
  9455  0CA4  00D4               	movwf	_m_button	;volatile
  9456                           
  9457                           ;interact.c: 120: }
  9458  0CA5  0008               	return
  9459  0CA6                     i1l2702:	
  9460                           
  9461                           ;interact.c: 121: else if (m_button.last_state == 0)
  9462  0CA6  0859               	movf	_m_button+5,w	;volatile
  9463  0CA7  1D03               	btfss	3,2
  9464  0CA8  0008               	return
  9465                           
  9466                           ;interact.c: 122: {
  9467                           ;interact.c: 123: m_button.count_released++;
  9468  0CA9  3001               	movlw	1
  9469  0CAA  00F1               	movwf	??_button_update_loop
  9470  0CAB  0871               	movf	??_button_update_loop,w
  9471  0CAC  07D6               	addwf	_m_button+2,f	;volatile
  9472                           
  9473                           ;interact.c: 124: if (m_button.count_released > 10)
  9474  0CAD  300B               	movlw	11
  9475  0CAE  0256               	subwf	_m_button+2,w	;volatile
  9476  0CAF  1C03               	skipc
  9477  0CB0  0008               	return
  9478                           
  9479                           ;interact.c: 125: if (m_button.count_pressed >= 75)
  9480  0CB1  304B               	movlw	75
  9481  0CB2  0255               	subwf	_m_button+1,w	;volatile
  9482  0CB3  1C03               	skipc
  9483  0CB4  2CBA               	goto	i1l2712
  9484                           
  9485                           ;interact.c: 126: m_button.confirmed_state = long_push;
  9486  0CB5  3002               	movlw	2
  9487  0CB6  00F1               	movwf	??_button_update_loop
  9488  0CB7  0871               	movf	??_button_update_loop,w
  9489  0CB8  00D4               	movwf	_m_button	;volatile
  9490  0CB9  0008               	return
  9491  0CBA                     i1l2712:	
  9492                           
  9493                           ;interact.c: 127: else
  9494                           ;interact.c: 128: m_button.confirmed_state = short_push;
  9495  0CBA  3001               	movlw	1
  9496  0CBB  00F1               	movwf	??_button_update_loop
  9497  0CBC  0871               	movf	??_button_update_loop,w
  9498  0CBD  00D4               	movwf	_m_button	;volatile
  9499  0CBE  0008               	return
  9500  0CBF                     __end_of_button_update_loop:	
  9501                           
  9502                           	psect	text39
  9503  096B                     __ptext39:	
  9504 ;; *************** function i1_get_button_state *****************
  9505 ;; Defined at:
  9506 ;;		line 69 in file "interact.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;		None
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;  get_button_s    1    0[COMMON] unsigned char 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  1    wreg      unsigned char 
  9513 ;; Registers used:
  9514 ;;		wreg, status,2, status,0
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9520 ;;      Params:         0       0       0       0       0       0
  9521 ;;      Locals:         1       0       0       0       0       0
  9522 ;;      Temps:          0       0       0       0       0       0
  9523 ;;      Totals:         1       0       0       0       0       0
  9524 ;;Total ram usage:        1 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; This function calls:
  9527 ;;		Nothing
  9528 ;; This function is called by:
  9529 ;;		_button_update_loop
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           
  9534                           ;psect for function i1_get_button_state
  9535  096B                     i1_get_button_state:	
  9536                           
  9537                           ;interact.c: 72: unsigned char state = PORTBbits.RB0;
  9538                           
  9539                           ;incstack = 0
  9540                           ; Regs used in i1_get_button_state: [wreg+status,2+status,0]
  9541  096B  3000               	movlw	0
  9542  096C  0020               	movlb	0	; select bank0
  9543  096D  180D               	btfsc	13,0	;volatile
  9544  096E  3001               	movlw	1
  9545  096F  00F0               	movwf	i1get_button_state@state
  9546                           
  9547                           ;interact.c: 73: if (state == 1)
  9548  0970  0370               	decf	i1get_button_state@state,w
  9549  0971  1D03               	btfss	3,2
  9550  0972  2975               	goto	i1l2618
  9551                           
  9552                           ;interact.c: 74: return 0;
  9553  0973  3000               	movlw	0
  9554  0974  0008               	return
  9555  0975                     i1l2618:	
  9556                           
  9557                           ;interact.c: 75: else return 1;
  9558  0975  3001               	movlw	1
  9559  0976  0008               	return
  9560  0977                     __end_ofi1_get_button_state:	
  9561                           
  9562                           	psect	text40
  9563  0B37                     __ptext40:	
  9564 ;; *************** function _LED_update_loop *****************
  9565 ;; Defined at:
  9566 ;;		line 41 in file "interact.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;		None
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;		None
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  1    wreg      void 
  9573 ;; Registers used:
  9574 ;;		wreg, status,2, status,0
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9580 ;;      Params:         0       0       0       0       0       0
  9581 ;;      Locals:         0       0       0       0       0       0
  9582 ;;      Temps:          1       0       0       0       0       0
  9583 ;;      Totals:         1       0       0       0       0       0
  9584 ;;Total ram usage:        1 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; This function calls:
  9587 ;;		Nothing
  9588 ;; This function is called by:
  9589 ;;		_my10msTimerISR
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _LED_update_loop
  9595  0B37                     _LED_update_loop:	
  9596                           
  9597                           ;interact.c: 43: if (m_LED.state == manual_mode)
  9598                           
  9599                           ;incstack = 0
  9600                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  9601  0B37  3004               	movlw	4
  9602  0B38  0676               	xorwf	_m_LED,w	;volatile
  9603  0B39  1903               	btfsc	3,2
  9604  0B3A  0008               	return
  9605                           
  9606                           ;interact.c: 45: else if (m_LED.state == slow_blinking)
  9607                           
  9608                           ;interact.c: 44: return;
  9609  0B3B  3002               	movlw	2
  9610  0B3C  0676               	xorwf	_m_LED,w	;volatile
  9611  0B3D  1D03               	btfss	3,2
  9612  0B3E  2B4C               	goto	i1l2656
  9613                           
  9614                           ;interact.c: 46: {
  9615                           ;interact.c: 47: m_LED.counter++;
  9616  0B3F  3001               	movlw	1
  9617  0B40  00F0               	movwf	??_LED_update_loop
  9618  0B41  0870               	movf	??_LED_update_loop,w
  9619  0B42  07F7               	addwf	_m_LED+1,f	;volatile
  9620                           
  9621                           ;interact.c: 48: if (m_LED.counter >= 60)
  9622  0B43  303C               	movlw	60
  9623  0B44  0277               	subwf	_m_LED+1,w	;volatile
  9624  0B45  1C03               	skipc
  9625  0B46  0008               	return
  9626                           
  9627                           ;interact.c: 49: {
  9628                           ;interact.c: 50: m_LED.counter = 0;
  9629  0B47  01F7               	clrf	_m_LED+1	;volatile
  9630                           
  9631                           ;interact.c: 51: do { LATA2 = ~LATA2; } while(0);
  9632  0B48  3004               	movlw	4
  9633  0B49  0022               	movlb	2	; select bank2
  9634  0B4A  068C               	xorwf	12,f
  9635                           
  9636                           ;interact.c: 52: }
  9637                           ;interact.c: 53: }
  9638  0B4B  0008               	return
  9639  0B4C                     i1l2656:	
  9640                           
  9641                           ;interact.c: 54: else if (m_LED.state == fast_blinking)
  9642  0B4C  3003               	movlw	3
  9643  0B4D  0676               	xorwf	_m_LED,w	;volatile
  9644  0B4E  1D03               	btfss	3,2
  9645  0B4F  0008               	return
  9646                           
  9647                           ;interact.c: 55: {
  9648                           ;interact.c: 56: m_LED.counter++;
  9649  0B50  3001               	movlw	1
  9650  0B51  00F0               	movwf	??_LED_update_loop
  9651  0B52  0870               	movf	??_LED_update_loop,w
  9652  0B53  07F7               	addwf	_m_LED+1,f	;volatile
  9653                           
  9654                           ;interact.c: 57: if (m_LED.counter >= 15)
  9655  0B54  300F               	movlw	15
  9656  0B55  0277               	subwf	_m_LED+1,w	;volatile
  9657  0B56  1C03               	skipc
  9658  0B57  0008               	return
  9659                           
  9660                           ;interact.c: 58: {
  9661                           ;interact.c: 59: m_LED.counter = 0;
  9662  0B58  01F7               	clrf	_m_LED+1	;volatile
  9663                           
  9664                           ;interact.c: 60: do { LATA2 = ~LATA2; } while(0);
  9665  0B59  3004               	movlw	4
  9666  0B5A  0022               	movlb	2	; select bank2
  9667  0B5B  068C               	xorwf	12,f
  9668  0B5C  0008               	return
  9669  0B5D                     __end_of_LED_update_loop:	
  9670                           
  9671                           	psect	text41
  9672  0A7F                     __ptext41:	
  9673 ;; *************** function _EUSART_Transmit_ISR *****************
  9674 ;; Defined at:
  9675 ;;		line 169 in file "mcc_generated_files/eusart.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;		None
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;		None
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      void 
  9682 ;; Registers used:
  9683 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9689 ;;      Params:         0       0       0       0       0       0
  9690 ;;      Locals:         0       0       0       0       0       0
  9691 ;;      Temps:          1       0       0       0       0       0
  9692 ;;      Totals:         1       0       0       0       0       0
  9693 ;;Total ram usage:        1 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		_INTERRUPT_InterruptManager
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function _EUSART_Transmit_ISR
  9704  0A7F                     _EUSART_Transmit_ISR:	
  9705                           
  9706                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9710  0A7F  3008               	movlw	8
  9711  0A80  0020               	movlb	0	; select bank0
  9712  0A81  025B               	subwf	_eusartTxBufferRemaining,w	;volatile
  9713  0A82  1803               	skipnc
  9714  0A83  2A99               	goto	i1l183
  9715                           
  9716                           ;eusart.c: 174: {
  9717                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  9718  0A84  085D               	movf	_eusartTxTail,w
  9719  0A85  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  9720  0A86  0086               	movwf	6
  9721  0A87  0187               	clrf	7
  9722  0A88  0801               	movf	1,w
  9723  0A89  0023               	movlb	3	; select bank3
  9724  0A8A  009A               	movwf	26	;volatile
  9725  0A8B  3001               	movlw	1
  9726  0A8C  00F0               	movwf	??_EUSART_Transmit_ISR
  9727  0A8D  0870               	movf	??_EUSART_Transmit_ISR,w
  9728  0A8E  0020               	movlb	0	; select bank0
  9729  0A8F  07DD               	addwf	_eusartTxTail,f
  9730                           
  9731                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  9732  0A90  3008               	movlw	8
  9733  0A91  025D               	subwf	_eusartTxTail,w
  9734  0A92  1803               	btfsc	3,0
  9735                           
  9736                           ;eusart.c: 177: {
  9737                           ;eusart.c: 178: eusartTxTail = 0;
  9738  0A93  01DD               	clrf	_eusartTxTail
  9739                           
  9740                           ;eusart.c: 179: }
  9741                           ;eusart.c: 180: eusartTxBufferRemaining++;
  9742  0A94  3001               	movlw	1
  9743  0A95  00F0               	movwf	??_EUSART_Transmit_ISR
  9744  0A96  0870               	movf	??_EUSART_Transmit_ISR,w
  9745  0A97  07DB               	addwf	_eusartTxBufferRemaining,f	;volatile
  9746                           
  9747                           ;eusart.c: 181: }
  9748  0A98  0008               	return
  9749  0A99                     i1l183:	
  9750                           
  9751                           ;eusart.c: 182: else
  9752                           ;eusart.c: 183: {
  9753                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  9754  0A99  0021               	movlb	1	; select bank1
  9755  0A9A  1211               	bcf	17,4	;volatile
  9756  0A9B  0008               	return
  9757  0A9C                     __end_of_EUSART_Transmit_ISR:	
  9758                           
  9759                           	psect	text42
  9760  0A11                     __ptext42:	
  9761 ;; *************** function _EUSART_Receive_ISR *****************
  9762 ;; Defined at:
  9763 ;;		line 188 in file "mcc_generated_files/eusart.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;		None
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;		None
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  1    wreg      void 
  9770 ;; Registers used:
  9771 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9777 ;;      Params:         0       0       0       0       0       0
  9778 ;;      Locals:         0       0       0       0       0       0
  9779 ;;      Temps:          1       0       0       0       0       0
  9780 ;;      Totals:         1       0       0       0       0       0
  9781 ;;Total ram usage:        1 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; This function calls:
  9784 ;;		Nothing
  9785 ;; This function is called by:
  9786 ;;		_INTERRUPT_InterruptManager
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           
  9791                           ;psect for function _EUSART_Receive_ISR
  9792  0A11                     _EUSART_Receive_ISR:	
  9793                           
  9794                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  9795                           
  9796                           ;incstack = 0
  9797                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9798  0A11  0023               	movlb	3	; select bank3
  9799  0A12  1C9D               	btfss	29,1	;volatile
  9800  0A13  2A16               	goto	i1l3008
  9801                           
  9802                           ;eusart.c: 192: {
  9803                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  9804  0A14  139D               	bcf	29,7	;volatile
  9805                           
  9806                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  9807  0A15  179D               	bsf	29,7	;volatile
  9808  0A16                     i1l3008:	
  9809                           
  9810                           ;eusart.c: 197: }
  9811                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  9812  0A16  0819               	movf	25,w	;volatile
  9813  0A17  00F0               	movwf	??_EUSART_Receive_ISR
  9814  0A18  0021               	movlb	1	; select bank1
  9815  0A19  083A               	movf	_eusartRxHead^(0+128),w
  9816  0A1A  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9817  0A1B  0086               	movwf	6
  9818  0A1C  0187               	clrf	7
  9819  0A1D  0870               	movf	??_EUSART_Receive_ISR,w
  9820  0A1E  0081               	movwf	1
  9821  0A1F  3001               	movlw	1
  9822  0A20  00F0               	movwf	??_EUSART_Receive_ISR
  9823  0A21  0870               	movf	??_EUSART_Receive_ISR,w
  9824  0A22  07BA               	addwf	_eusartRxHead^(0+128),f
  9825                           
  9826                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9827  0A23  3008               	movlw	8
  9828  0A24  023A               	subwf	_eusartRxHead^(0+128),w
  9829  0A25  1803               	btfsc	3,0
  9830                           
  9831                           ;eusart.c: 202: {
  9832                           ;eusart.c: 203: eusartRxHead = 0;
  9833  0A26  01BA               	clrf	_eusartRxHead^(0+128)
  9834                           
  9835                           ;eusart.c: 204: }
  9836                           ;eusart.c: 205: eusartRxCount++;
  9837  0A27  3001               	movlw	1
  9838  0A28  00F0               	movwf	??_EUSART_Receive_ISR
  9839  0A29  0870               	movf	??_EUSART_Receive_ISR,w
  9840  0A2A  07F8               	addwf	_eusartRxCount,f	;volatile
  9841  0A2B  0008               	return
  9842  0A2C                     __end_of_EUSART_Receive_ISR:	
  9843  007E                     btemp	set	126	;btemp
  9844  007E                     int$flags	set	126
  9845  007E                     wtemp	set	126
  9846  007E                     wtemp0	set	126
  9847  0080                     wtemp1	set	128
  9848  0082                     wtemp2	set	130
  9849  0084                     wtemp3	set	132
  9850  0086                     wtemp4	set	134
  9851  0088                     wtemp5	set	136
  9852  007F                     wtemp6	set	127
  9853  007E                     ttemp	set	126
  9854  007E                     ttemp0	set	126
  9855  0081                     ttemp1	set	129
  9856  0084                     ttemp2	set	132
  9857  0087                     ttemp3	set	135
  9858  007F                     ttemp4	set	127
  9859  007E                     ltemp	set	126
  9860  007E                     ltemp0	set	126
  9861  0082                     ltemp1	set	130
  9862  0086                     ltemp2	set	134
  9863  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     52      62
    BANK1            80      0      77
    BANK2            80     22      22
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    write_calibration_to_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK1[2]), m_conf(BANK1[47]), 

    load_calibration_from_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK1[2]), m_conf(BANK1[47]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_EPWM1_LoadDutyValue
    _main->_LED_set_state
    _main->_TMR0_SetInterruptHandler
    _main->___wmul
    _main->_button_init
    _main->_delay_ms
    _main->_load_calibration_from_EEPROM
    _main->_write_calibration_to_EEPROM
    _write_calibration_to_EEPROM->_DATAEE_WriteByte
    _perform_calibration->_EPWM1_LoadDutyValue
    _perform_calibration->_LED_set_state
    _perform_calibration->_button_init
    _multiple_fast_blink->_LED_set_state
    _button_init->_get_button_state
    _load_calibration_from_EEPROM->_DATAEE_ReadByte
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _convert_to_fp->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->i1_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _write_calibration_to_EEPROM->_crc_update
    _perform_calibration->_multiple_fast_blink
    _multiply_fp->___lmul
    _load_calibration_from_EEPROM->_crc_update
    _integer_part->_convert_to_fp
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->_convert_to_fp
    _convert_to_fp->___wmul
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   19368
                                             44 BANK0      8     8      0
                                              0 BANK2     22    22      0
                _EPWM1_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                             ___wmul
                        _button_init
                      _convert_to_fp
                           _delay_ms
                       _integer_part
       _load_calibration_from_EEPROM
                        _multiply_fp
                _perform_calibration
        _write_calibration_to_EEPROM
 ---------------------------------------------------------------------------------
 (1) _write_calibration_to_EEPROM                          4     4      0    1130
                                              5 COMMON     1     1      0
                                             17 BANK0      3     3      0
                   _DATAEE_WriteByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     253
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _perform_calibration                                 14    14      0    2205
                                              5 BANK0     14    14      0
                _EPWM1_LoadDutyValue
                      _LED_set_state
                        _button_init
                   _get_button_state
                _multiple_fast_blink
 ---------------------------------------------------------------------------------
 (2) _multiple_fast_blink                                  5     5      0     223
                                              0 BANK0      5     5      0
                      _LED_set_state
 ---------------------------------------------------------------------------------
 (3) _LED_set_state                                        2     2      0     155
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _button_init                                          1     1      0      34
                                              5 COMMON     1     1      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (2) _get_button_state                                     1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  4     2      2     909
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    2121
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _load_calibration_from_EEPROM                         6     6      0     976
                                              5 COMMON     1     1      0
                                             17 BANK0      5     5      0
                    _DATAEE_ReadByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _crc_update                                          17    14      3     565
                                              0 BANK0     17    14      3
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _integer_part                                        16    12      4    1935
                                             25 BANK0     16    12      4
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             4     2      2     111
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                   _EPWM1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    5691
                                             25 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4    1456
                                              4 BANK0     21    17      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1060
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   2     2      0     112
                                              1 COMMON     2     2      0
                 i1_get_button_state
 ---------------------------------------------------------------------------------
 (10) i1_get_button_state                                  1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
       ___wmul (ARG)
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___wmul
   _button_init
     _get_button_state
   _convert_to_fp
     ___wmul (ARG)
   _delay_ms
   _integer_part
     _convert_to_fp
       ___wmul (ARG)
   _load_calibration_from_EEPROM
     _DATAEE_ReadByte
     _crc_update
   _multiply_fp
     ___lmul
   _perform_calibration
     _EPWM1_LoadDutyValue
     _LED_set_state
     _button_init
       _get_button_state
     _get_button_state
     _multiple_fast_blink
       _LED_set_state
   _write_calibration_to_EEPROM
     _DATAEE_WriteByte
     _crc_update

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           i1_get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4D       8       96.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     16      16      10       27.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      AB      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 22 16:54:16 2016

             __size_ofi1_get_button_state 000C                               __CFG_CP$OFF 0000  
                                      l28 0953                       ___wmul@multiplicand 0022  
                         _timer0ReloadVal 0079                    __end_of_my10msTimerISR 093C  
                                     l171 0B20                                       l413 0782  
                                     l286 0B0A                                       l646 05BD  
                                     l487 0AF0                                       l736 0F66  
                                     l846 0A50                                       _PR2 001B  
                            __CFG_CPD$OFF 0000                           _TMR2_Initialize 0956  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              ?_EUSART_Read 0070  
                            __CFG_LVP$OFF 0000                                      l4102 0A49  
                                    l4120 0B70                                      l4210 0E7C  
                                    l4060 077A                                      l4116 0B66  
                                    l4300 0F98                                      l4220 0EA9  
                                    l4204 0E6E                                      l4054 0750  
                                    l4310 0F72                                      l4230 0EBB  
                                    l4312 0F76                                      l4320 0ED1  
                                    l4216 0E8B                                      l4090 0AA1  
                                    l4066 079E                                      l4138 0D9F  
                                    l4330 0FC2                                      l4322 0FB8  
                                    l4314 0FB1                                      l4306 0FAD  
                                    l4156 0DD6                                      l4148 0DCD  
                                    l4084 0BA5                                      l4236 0ED0  
                                    l4430 0405                                      l4406 03D2  
                                    l4166 0DF1                                      l4318 0F6B  
                                    l4270 0F3B                                      l4262 0F17  
                                    l4520 0491                                      l4440 0419  
                                    l4408 03E1                                      l4336 0FD7  
                                    l4256 0F02                                      l4184 0E24  
                                    l4530 049A                                      l4282 0F51  
                                    l4194 0E47                                      l4178 0E0F  
                                    l4700 05E5                                      l4620 0562  
                                    l4604 0512                                      l4540 04AC  
                                    l4444 041B                                      l4268 0EDD  
                                    l4196 0E2D                                      l4364 0D05  
                                    l4356 0CCE                                      l4614 0524  
                                    l4622 0504                                      l4446 041C  
                                    l4198 0E4F                                      l4624 0567  
                                    l4608 0522                                      l4528 0499  
                                    l4456 042E                                      l3850 0B15  
                                    l4394 0BE8                                      l4706 05FC  
                                    l4650 059C                                      l4618 0545  
                                    l4570 04D8                                      l4562 04D0  
                                    l4810 00DC                                      l4388 0BD3  
                                    l4660 05A6                                      l4628 0578  
                                    l4572 04D9                                      l4820 0117  
                                    l4718 0621                                      l4486 045A  
                                    l4478 0452                                      l4750 0D8D  
                                    l4742 0D7E                                      l4734 0D3E  
                                    l4806 00CB                                      l3864 0B34  
                                    l4488 045B                                      l3880 0AE8  
                                    l4808 00D4                                      l4690 05DB  
                                    l4658 05A4                                      l4594 04FD  
                                    l4498 046D                                      l4850 0323  
                                    l4826 016B                                      l3972 0ABC  
                                    l4668 05B6                                      l4844 0309  
                                    l4852 0329                                      l4694 05DD  
                                    l4686 05D3                                      l4758 09BC  
                                    l3894 098D                                      l3878 0AE2  
                                    l4862 033F                                      l4872 0375  
                                    l4856 0332                                      l4848 0321  
                                    l4880 03A7                                      l4784 006B  
                                    l4890 03C9                                      l4866 0352  
                                    l4786 0075                                      l4876 038C  
                                    l4796 008C                                      l4788 007B  
                                    STR_1 07D3                                      STR_2 0807  
                                    _LATA 010C                                      _LATB 010D  
                                    u4315 0737                                      u4405 0C3B  
                                    u6007 0F9E                                      u4344 076C  
                                    u4425 0A51                                      u4345 076A  
                                    u6017 0FC8                                      u4530 0DFF  
                                    u4435 0A56                                      u6027 0B9C  
                                    u5500 0D2D                                      u5405 05ED  
                                    u6037 0BB2                                      u4535 0DFB  
                                    u4295 0A74                                      u6047 0BC1  
                                    u6057 09C5                                      u4465 0B71  
                                    u6067 0BD9                                      u4395 0C2E  
                                    u4475 0B78                                      u5435 062E  
                                    u4580 0E3C                                      u6077 0BF6  
                                    u5533 0D78                                      u5525 0D48  
                                    u5445 0646                                      u4590 0E3D  
                                    u5630 0110                                      u6087 0C0B  
                                    u5455 0661                                      u5640 0111  
                                    u5465 0679                                      u5490 0D2C  
                                    u5475 06A9                                      u5715 0349  
                                    i1l77 0024                                      u5485 06FD  
                                    u5735 036B                                      u5655 013A  
                                    u5665 015F                                      u5927 00E3  
                                    u5937 0E15                                      u5947 0E68  
                                    u5957 0EA2                                      u5967 0EC1  
                                    u5977 0F08                                      u5987 0F33  
                                    u5997 0F57                                      _PLLR 04D6  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUB 020D  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                  __end_of_GPS_read_speed 0623                                      _main 0042  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                             integer_part@n 0039  
                                    start 0029                                      ttemp 007E  
                                    wtemp 007E                     ??_EPWM1_LoadDutyValue 0020  
                           __CFG_MCLRE$ON 0000                 __size_of_DATAEE_WriteByte 0021  
                 __end_of_TMR0_Initialize 09E4                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0070                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0008             __end_of_OSCILLATOR_Initialize 0956  
                                   ?_main 0070                              main@fp_motor 0120  
                           _convert_to_fp 071C                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     _LATA2 0862  
                         ?_my10msTimerISR 0070                                     i1l183 0A99  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 0028         __size_of_TMR0_SetInterruptHandler 0006  
                            ?_button_init 0070                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0074                           __end_of_fp_x0_a 07C9  
                         __end_of_fp_x0_b 07CD                          __end_of_TMR0_ISR 09FA  
                                   _m_LED 0076                           _DATAEE_ReadByte 0977  
                                   _m_crc 00EB                                     _motor 00B8  
                                   _speed 00B0                                     _putch 093C  
                                   main@a 012B                                     main@b 012F  
                                   main@i 0135                   __end_of_LED_update_loop 0B5D  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                           ?_GPS_read_speed 0070  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           _TMR2_StartTimer 0933  
                           multiply_fp@n1 002C                             multiply_fp@n2 0030  
                         __initialization 002B                    __size_of_LED_set_state 001D  
                            __end_of_main 03CE           write_calibration_to_EEPROM@addr 0031  
                          ??_EUSART_Write 0074                   __end_of_TMR2_Initialize 0960  
             ?_INTERRUPT_InterruptManager 0070      __end_of_load_calibration_from_EEPROM 0E01  
   __size_of_load_calibration_from_EEPROM 006F              _load_calibration_from_EEPROM 0D92  
                          ?_convert_to_fp 0024                                    ??_main 004C  
             __end_of_multiple_fast_blink 0BCD                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _CCPR1H 0292  
                                  _EEDATH 0194                                    _CCPR1L 0291  
                                  _EEDATL 0193                                    _EECON2 0196  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELB 018D                                    i1l3008 0A16  
                                  i1l2702 0CA6                                    i1l2712 0CBA  
                                  i1l2618 0975                                    i1l2656 0B4C  
                                  i1l2692 0C93                                    i1l2676 0C75  
                                  i1l2684 0C85                                    i1l3662 001A  
                                  i1l3654 000F                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                        __end_of_delay_ms 09CF                            __CFG_PWRTE$OFF 0000  
                    delay_ms@milliseconds 0074                        convert_to_fp@i_bit 0032  
                           main@new_motor 0133                              _CCPTMRS0bits 029E  
                                  ___lmul 0B5D                                    ___wmul 0A47  
                          __CFG_STVREN$ON 0000               __end_of_perform_calibration 1000  
                                  _m_conf 00BC                       _EUSART_Transmit_ISR 0A7F  
                        ?_TMR0_Initialize 0070                __end_of_button_update_loop 0CBF  
                 i1get_button_state@state 0070                perform_calibration@m_motor 0031  
                                  _printf 0A9C                   __end_of_DATAEE_ReadByte 0983  
           ?_load_calibration_from_EEPROM 0070                             main@speed_int 0125  
                           ?_integer_part 0039                           integer_part@neg 0046  
                           _LED_set_state 0AD6                     __end_of_TMR0_CallBack 096B  
                 __end_of_TMR2_StartTimer 0936  TMR0_SetInterruptHandler@InterruptHandler 0074  
               __size_of_get_button_state 000C                      ?_EUSART_Transmit_ISR 0070  
                  convert_to_fp@res_fract 0030                          ?_LED_update_loop 0070  
                            ?_multiply_fp 002C                      __size_of_EUSART_Read 001D  
                       _SYSTEM_Initialize 09AA                   __end_of__initialization 003E  
                          multiply_fp@res 0042                        ?_SYSTEM_Initialize 0070  
                       ?_EPWM1_Initialize 0070      __size_of_write_calibration_to_EEPROM 0068  
                          __pcstackCOMMON 0070                       ??_SYSTEM_Initialize 0076  
                               ?_TMR0_ISR 0070                        ??_EPWM1_Initialize 0074  
                        _DATAEE_WriteByte 0AF3        perform_calibration@__delay_tmp_910 002D  
      perform_calibration@__delay_tmp_912 002E        perform_calibration@__delay_tmp_913 002F  
      perform_calibration@__delay_tmp_906 002B        perform_calibration@__delay_tmp_909 002C  
                         ??_convert_to_fp 0028                             __end_of_putch 0942  
                        ?_TMR2_Initialize 0070                            ??_integer_part 003D  
                          _OPTION_REGbits 0095                     TMR0_ISR@CountCallBack 00B4  
                          ?_LED_set_state 0070                      __size_of_button_init 000D  
               __end_of_SYSTEM_Initialize 09BC                     ??_EUSART_Transmit_ISR 0070  
                                 ??_putch 0076                                __pbssBANK0 0054  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 0B37  
               perform_calibration@replay 0029               __size_of_EUSART_Receive_ISR 001B  
              __end_ofi1_get_button_state 0977                                __pmaintext 0042  
        __end_of_TMR0_SetInterruptHandler 0948                                   ?___lmul 0020  
                                 ?___wmul 0020                                ??_TMR0_ISR 0073  
                        ??_my10msTimerISR 0073                                __pintentry 0004  
                                 _CCP1CON 0293                                   _ECCP1AS 0295  
                                 _BAUDCON 019F                            ___lmul@product 0028  
                                 _APFCON0 011D                                   _APFCON1 011E  
                                 ?_printf 0021                          ?_DATAEE_ReadByte 0070  
                              _crc_update 0C12                     get_button_state@state 0074  
                           _eusartRxCount 0078                                 ?_delay_ms 0074  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                                 _PWM1CON 0294                          ??_GPS_read_speed 0039  
          ??_load_calibration_from_EEPROM 0075                          ?_TMR2_StartTimer 0070  
        load_calibration_from_EEPROM@addr 0033               __end_of_EPWM1_LoadDutyValue 0A7F  
                    DATAEE_WriteByte@bAdd 0020                           __size_of___lmul 0030  
                         __size_of___wmul 001C                   convert_to_fp@fract_part 0026  
                                 _fp_x0_a 07C5                                   _fp_x0_b 07C9  
                                 __ptext1 0CBF                                   __ptext2 0AF3  
                                 __ptext3 0E01                                   __ptext4 0B8D  
                                 __ptext5 0AD6                                   __ptext6 098F  
                                 __ptext7 0983                                   __ptext8 0A63  
                                 __ptext9 0623                           __size_of_printf 001D  
                         ??_LED_set_state 0074                 GPS_Initialize@__delay_tmp 002B  
                   _OSCILLATOR_Initialize 094E                                 _T2CONbits 001C  
            GPS_read_speed@read_speed_fra 003F                  ??_PIN_MANAGER_Initialize 0074  
            GPS_read_speed@read_speed_int 003D                                ??_delay_ms 0020  
              __size_of_SYSTEM_Initialize 0012                                   clrloop0 0949  
                        _get_button_state 0983                                   main@tmp 0127  
                    end_of_initialization 003E                         __end_of_ratio_mph 07D1  
                  LED_set_state@new_state 0075                      __size_of_multiply_fp 00F9  
                       _EUSART_Initialize 0A2C                      __end_of_integer_part 0D92  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0027                                   printf@f 0021  
                            __pstringtext 07C5                      integer_part@int_part 0047  
                     ??_EUSART_Initialize 0074                  _TMR0_SetInterruptHandler 0942  
                               _PORTBbits 000D                               ?_crc_update 0020  
                    GPS_read_speed@i_buff 004A                      GPS_read_speed@m_char 004B  
                    GPS_read_speed@buffer 0043                          __CFG_FOSC$INTOSC 0000  
                   __size_of_EUSART_Write 0023                  multiple_fast_blink@times 0023  
            __size_of_multiple_fast_blink 0040                        _button_update_loop 0C61  
            ?_write_calibration_to_EEPROM 0070                  __end_of_DATAEE_WriteByte 0B14  
               __end_of_EUSART_Initialize 0A47                   __size_of_GPS_Initialize 0045  
                     ?_button_update_loop 0070                      multiple_fast_blink@i 0024  
                          __end_of___lmul 0B8D                            __end_of___wmul 0A63  
                            _EUSART_Write 0B14                         __size_of_TMR0_ISR 0016  
                        convert_to_fp@one 07D1                          convert_to_fp@res 0035  
                  ?_OSCILLATOR_Initialize 0070                      ??_button_update_loop 0071  
                          __end_of_printf 0AB9              __size_of_perform_calibration 01FF  
                     start_initialization 002B                 __size_of_EPWM1_Initialize 000E  
                __size_of_TMR0_Initialize 0015           __size_of_PIN_MANAGER_Initialize 0017  
                           ??_EUSART_Read 0074                               putch@txData 0020  
            EPWM1_LoadDutyValue@dutyValue 0074             ??_write_calibration_to_EEPROM 0075  
                     DATAEE_ReadByte@bAdd 0074                         crc_update@old_crc 0020  
                     __size_of_crc_update 004F                  __size_of_LED_update_loop 0026  
                                ??___lmul 0074                                  ??___wmul 0074  
                  __size_of_TMR0_CallBack 000B                     convert_to_fp@int_part 0024  
                   __end_of_convert_to_fp 07C5                                  ??_printf 0023  
                      i1_get_button_state 096B               __end_of_EUSART_Transmit_ISR 0A9C  
           load_calibration_from_EEPROM@i 0035             load_calibration_from_EEPROM@p 0034  
                           ??_button_init 0075                               __pbssCOMMON 0076  
                               ___latbits 0001                             __pcstackBANK0 0020  
                           __pcstackBANK2 0120                     convert_to_fp@tmp_left 0033  
                __size_of_TMR2_Initialize 000A                       ?i1_get_button_state 0070  
                       __size_of_delay_ms 0013                     __size_of_integer_part 006B  
              __end_of_EUSART_Receive_ISR 0A2C                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 0AD6                     _TMR0_InterruptHandler 00B6  
                  _PIN_MANAGER_Initialize 09FA                      EUSART_Read@readValue 0075  
                    ??i1_get_button_state 0070                  __end_of_get_button_state 098F  
                            _eusartRxHead 00BA                              _eusartTxHead 005C  
                            _eusartRxTail 00BB                              _eusartTxTail 005D  
            ??_INTERRUPT_InterruptManager 0073                   _eusartTxBufferRemaining 005B  
         load_calibration_from_EEPROM@crc 0031                              _integer_part 0D27  
                           _TMR0_CallBack 0960            perform_calibration@__delay_tmp 002A  
                __size_of_DATAEE_ReadByte 000C                            __size_of_putch 0006  
                     __end_of_button_init 099C                            _eusartRxBuffer 00A0  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 0BCD  
                          _eusartTxBuffer 00A8                            ___wmul@product 0074  
                               clear_ram0 0948                                  _PIE1bits 0091  
                               _ratio_mph 07CD                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0025                ??_TMR0_SetInterruptHandler 0076  
                                _PIR1bits 0011              __size_of_EPWM1_LoadDutyValue 001C  
                                _TMR0_ISR 09E4                       _multiple_fast_blink 0B8D  
                    perform_calibration@i 0030                                  _PSTR1CON 0296  
                       ??_LED_update_loop 0070                         ___wmul@multiplier 0020  
                            ??_crc_update 0023                          _EPWM1_Initialize 099C  
                   __end_of_LED_set_state 0AF3                   __size_of_my10msTimerISR 0006  
                   DATAEE_WriteByte@bData 0074                            ?_TMR0_CallBack 0070  
                    ?_multiple_fast_blink 0070                               _EUSART_Read 0AB9  
                       ___lmul@multiplier 0020                    __end_of_GPS_Initialize 0C12  
                           ??_multiply_fp 0034                         ?_DATAEE_WriteByte 0074  
                __end_ofconvert_to_fp@one 07D3            GPS_read_speed@no_more_checksum 003C  
                       ??_TMR2_Initialize 0074                        ??_DATAEE_WriteByte 0075  
                              _EECON1bits 0195                       _perform_calibration 0E01  
                  integer_part@and_a_half 0042                   __size_of_GPS_read_speed 0255  
                      __end_of_crc_update 0C61                   ??_OSCILLATOR_Initialize 0074  
                    ?_perform_calibration 0070           button_update_loop@current_state 0072  
                             _button_init 098F                                  _delay_ms 09BC  
                   ??_multiple_fast_blink 0020                  GPS_read_speed@before_dot 003B  
                                __ptext10 0B5D                                  __ptext11 0D92  
                                __ptext20 0942                                  __ptext12 0C12  
                                __ptext21 09FA                                  __ptext13 0977  
                                __ptext30 0A9C                                  __ptext22 094E  
                                __ptext14 0D27                                  __ptext31 093C  
                                __ptext23 0A2C                                  __ptext15 09BC  
                                __ptext40 0B37                                  __ptext32 0B14  
                                __ptext24 099C                                  __ptext16 09AA  
                                __ptext41 0A7F                                  __ptext25 03CE  
                                __ptext17 0956                                  __ptext42 0A11  
                                __ptext34 09E4                                  __ptext26 071C  
                                __ptext18 0933                                  __ptext35 0960  
                                __ptext27 0A47                                  __ptext19 09CF  
                                __ptext36 0003                                  __ptext28 0AB9  
                                __ptext37 0936                                  __ptext29 0BCD  
                                __ptext38 0C61                                  __ptext39 096B  
                         ?_GPS_Initialize 0070               DATAEE_WriteByte@GIEBitValue 0021  
                                _m_button 0054                             __size_of_main 038C  
    __end_of_TMR0_DefaultInterruptHandler 0004     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0003                         ??_DATAEE_ReadByte 0074  
                     __end_of_multiply_fp 071C                                  int$flags 007E  
                       ??_TMR2_StartTimer 0074        __end_of_INTERRUPT_InterruptManager 0029  
              _INTERRUPT_InterruptManager 0004                                  main@done 0124  
                   ??_perform_calibration 0025               __size_of_button_update_loop 005E  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0073  
                                intlevel1 0000                   ?_PIN_MANAGER_Initialize 0070  
                 GPS_read_speed@checksum2 0041                         __CFG_CLKOUTEN$OFF 0000  
                 perform_calibration@done 0028             ?_TMR0_DefaultInterruptHandler 0070  
                                printf@ap 0026                        _EUSART_Receive_ISR 0A11  
                       ?_get_button_state 0070                            crc_update@data 0022  
                      ??_get_button_state 0074                                _OPTION_REG 0095  
                     ?_EUSART_Receive_ISR 0070                           _TMR0_Initialize 09CF  
                  GPS_read_speed@checksum 0042                            _my10msTimerISR 0936  
                     _EPWM1_LoadDutyValue 0A63       __end_of_write_calibration_to_EEPROM 0D27  
             _write_calibration_to_EEPROM 0CBF                             crc_update@crc 002D  
                      EUSART_Write@txData 0075              __size_of_EUSART_Transmit_ISR 001D  
          __end_of_PIN_MANAGER_Initialize 0A11                     GPS_read_speed@i_buff2 0049  
                             _multiply_fp 0623                    __size_of_convert_to_fp 00A9  
                    ??_EUSART_Receive_ISR 0070                            _GPS_read_speed 03CE  
                             crc_update@x 002F                           _LED_update_loop 0B37  
            write_calibration_to_EEPROM@i 0033              write_calibration_to_EEPROM@p 0032  
                __end_of_EPWM1_Initialize 09AA                      ?_EPWM1_LoadDutyValue 0074  



Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Sep 21 10:45:45 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  008C                     	;# 
    83  008D                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0095                     	;# 
    89  0096                     	;# 
    90  0097                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  0111                     	;# 
   102  0112                     	;# 
   103  0113                     	;# 
   104  0114                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  011A                     	;# 
   111  011B                     	;# 
   112  011D                     	;# 
   113  011E                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0191                     	;# 
   117  0191                     	;# 
   118  0192                     	;# 
   119  0193                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019D                     	;# 
   134  019E                     	;# 
   135  019F                     	;# 
   136  020C                     	;# 
   137  020D                     	;# 
   138  0211                     	;# 
   139  0211                     	;# 
   140  0212                     	;# 
   141  0212                     	;# 
   142  0213                     	;# 
   143  0213                     	;# 
   144  0214                     	;# 
   145  0214                     	;# 
   146  0215                     	;# 
   147  0215                     	;# 
   148  0215                     	;# 
   149  0216                     	;# 
   150  0216                     	;# 
   151  0217                     	;# 
   152  0217                     	;# 
   153  0219                     	;# 
   154  021A                     	;# 
   155  021B                     	;# 
   156  021C                     	;# 
   157  021D                     	;# 
   158  021E                     	;# 
   159  021F                     	;# 
   160  0291                     	;# 
   161  0291                     	;# 
   162  0292                     	;# 
   163  0293                     	;# 
   164  0294                     	;# 
   165  0295                     	;# 
   166  0295                     	;# 
   167  0296                     	;# 
   168  0298                     	;# 
   169  0298                     	;# 
   170  0299                     	;# 
   171  029A                     	;# 
   172  029B                     	;# 
   173  029C                     	;# 
   174  029C                     	;# 
   175  029D                     	;# 
   176  029E                     	;# 
   177  029E                     	;# 
   178  0311                     	;# 
   179  0311                     	;# 
   180  0312                     	;# 
   181  0313                     	;# 
   182  0318                     	;# 
   183  0318                     	;# 
   184  0319                     	;# 
   185  031A                     	;# 
   186  0394                     	;# 
   187  0395                     	;# 
   188  0396                     	;# 
   189  039A                     	;# 
   190  039C                     	;# 
   191  039D                     	;# 
   192  039E                     	;# 
   193  039F                     	;# 
   194  0415                     	;# 
   195  0416                     	;# 
   196  0417                     	;# 
   197  041C                     	;# 
   198  041D                     	;# 
   199  041E                     	;# 
   200  0FE4                     	;# 
   201  0FE5                     	;# 
   202  0FE6                     	;# 
   203  0FE7                     	;# 
   204  0FE8                     	;# 
   205  0FE9                     	;# 
   206  0FEA                     	;# 
   207  0FEB                     	;# 
   208  0FED                     	;# 
   209  0FEE                     	;# 
   210  0FEF                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  001E                     	;# 
   239  001F                     	;# 
   240  008C                     	;# 
   241  008D                     	;# 
   242  0091                     	;# 
   243  0092                     	;# 
   244  0093                     	;# 
   245  0094                     	;# 
   246  0095                     	;# 
   247  0096                     	;# 
   248  0097                     	;# 
   249  0098                     	;# 
   250  0099                     	;# 
   251  009A                     	;# 
   252  009B                     	;# 
   253  009B                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  0111                     	;# 
   260  0112                     	;# 
   261  0113                     	;# 
   262  0114                     	;# 
   263  0115                     	;# 
   264  0116                     	;# 
   265  0117                     	;# 
   266  0118                     	;# 
   267  0119                     	;# 
   268  011A                     	;# 
   269  011B                     	;# 
   270  011D                     	;# 
   271  011E                     	;# 
   272  018C                     	;# 
   273  018D                     	;# 
   274  0191                     	;# 
   275  0191                     	;# 
   276  0192                     	;# 
   277  0193                     	;# 
   278  0193                     	;# 
   279  0193                     	;# 
   280  0194                     	;# 
   281  0195                     	;# 
   282  0196                     	;# 
   283  0199                     	;# 
   284  019A                     	;# 
   285  019B                     	;# 
   286  019B                     	;# 
   287  019B                     	;# 
   288  019B                     	;# 
   289  019C                     	;# 
   290  019C                     	;# 
   291  019D                     	;# 
   292  019E                     	;# 
   293  019F                     	;# 
   294  020C                     	;# 
   295  020D                     	;# 
   296  0211                     	;# 
   297  0211                     	;# 
   298  0212                     	;# 
   299  0212                     	;# 
   300  0213                     	;# 
   301  0213                     	;# 
   302  0214                     	;# 
   303  0214                     	;# 
   304  0215                     	;# 
   305  0215                     	;# 
   306  0215                     	;# 
   307  0216                     	;# 
   308  0216                     	;# 
   309  0217                     	;# 
   310  0217                     	;# 
   311  0219                     	;# 
   312  021A                     	;# 
   313  021B                     	;# 
   314  021C                     	;# 
   315  021D                     	;# 
   316  021E                     	;# 
   317  021F                     	;# 
   318  0291                     	;# 
   319  0291                     	;# 
   320  0292                     	;# 
   321  0293                     	;# 
   322  0294                     	;# 
   323  0295                     	;# 
   324  0295                     	;# 
   325  0296                     	;# 
   326  0298                     	;# 
   327  0298                     	;# 
   328  0299                     	;# 
   329  029A                     	;# 
   330  029B                     	;# 
   331  029C                     	;# 
   332  029C                     	;# 
   333  029D                     	;# 
   334  029E                     	;# 
   335  029E                     	;# 
   336  0311                     	;# 
   337  0311                     	;# 
   338  0312                     	;# 
   339  0313                     	;# 
   340  0318                     	;# 
   341  0318                     	;# 
   342  0319                     	;# 
   343  031A                     	;# 
   344  0394                     	;# 
   345  0395                     	;# 
   346  0396                     	;# 
   347  039A                     	;# 
   348  039C                     	;# 
   349  039D                     	;# 
   350  039E                     	;# 
   351  039F                     	;# 
   352  0415                     	;# 
   353  0416                     	;# 
   354  0417                     	;# 
   355  041C                     	;# 
   356  041D                     	;# 
   357  041E                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0013                     	;# 
   386  0014                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001E                     	;# 
   397  001F                     	;# 
   398  008C                     	;# 
   399  008D                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0097                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009B                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009E                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  0111                     	;# 
   418  0112                     	;# 
   419  0113                     	;# 
   420  0114                     	;# 
   421  0115                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  0118                     	;# 
   425  0119                     	;# 
   426  011A                     	;# 
   427  011B                     	;# 
   428  011D                     	;# 
   429  011E                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  0191                     	;# 
   433  0191                     	;# 
   434  0192                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020C                     	;# 
   453  020D                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0219                     	;# 
   470  021A                     	;# 
   471  021B                     	;# 
   472  021C                     	;# 
   473  021D                     	;# 
   474  021E                     	;# 
   475  021F                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0294                     	;# 
   481  0295                     	;# 
   482  0295                     	;# 
   483  0296                     	;# 
   484  0298                     	;# 
   485  0298                     	;# 
   486  0299                     	;# 
   487  029A                     	;# 
   488  029B                     	;# 
   489  029C                     	;# 
   490  029C                     	;# 
   491  029D                     	;# 
   492  029E                     	;# 
   493  029E                     	;# 
   494  0311                     	;# 
   495  0311                     	;# 
   496  0312                     	;# 
   497  0313                     	;# 
   498  0318                     	;# 
   499  0318                     	;# 
   500  0319                     	;# 
   501  031A                     	;# 
   502  0394                     	;# 
   503  0395                     	;# 
   504  0396                     	;# 
   505  039A                     	;# 
   506  039C                     	;# 
   507  039D                     	;# 
   508  039E                     	;# 
   509  039F                     	;# 
   510  0415                     	;# 
   511  0416                     	;# 
   512  0417                     	;# 
   513  041C                     	;# 
   514  041D                     	;# 
   515  041E                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE9                     	;# 
   522  0FEA                     	;# 
   523  0FEB                     	;# 
   524  0FED                     	;# 
   525  0FEE                     	;# 
   526  0FEF                     	;# 
   527  0000                     	;# 
   528  0001                     	;# 
   529  0002                     	;# 
   530  0003                     	;# 
   531  0004                     	;# 
   532  0005                     	;# 
   533  0006                     	;# 
   534  0007                     	;# 
   535  0008                     	;# 
   536  0009                     	;# 
   537  000A                     	;# 
   538  000B                     	;# 
   539  000C                     	;# 
   540  000D                     	;# 
   541  0011                     	;# 
   542  0012                     	;# 
   543  0013                     	;# 
   544  0014                     	;# 
   545  0015                     	;# 
   546  0016                     	;# 
   547  0016                     	;# 
   548  0017                     	;# 
   549  0018                     	;# 
   550  0019                     	;# 
   551  001A                     	;# 
   552  001B                     	;# 
   553  001C                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  008C                     	;# 
   557  008D                     	;# 
   558  0091                     	;# 
   559  0092                     	;# 
   560  0093                     	;# 
   561  0094                     	;# 
   562  0095                     	;# 
   563  0096                     	;# 
   564  0097                     	;# 
   565  0098                     	;# 
   566  0099                     	;# 
   567  009A                     	;# 
   568  009B                     	;# 
   569  009B                     	;# 
   570  009C                     	;# 
   571  009D                     	;# 
   572  009E                     	;# 
   573  010C                     	;# 
   574  010D                     	;# 
   575  0111                     	;# 
   576  0112                     	;# 
   577  0113                     	;# 
   578  0114                     	;# 
   579  0115                     	;# 
   580  0116                     	;# 
   581  0117                     	;# 
   582  0118                     	;# 
   583  0119                     	;# 
   584  011A                     	;# 
   585  011B                     	;# 
   586  011D                     	;# 
   587  011E                     	;# 
   588  018C                     	;# 
   589  018D                     	;# 
   590  0191                     	;# 
   591  0191                     	;# 
   592  0192                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0193                     	;# 
   596  0194                     	;# 
   597  0195                     	;# 
   598  0196                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019C                     	;# 
   607  019D                     	;# 
   608  019E                     	;# 
   609  019F                     	;# 
   610  020C                     	;# 
   611  020D                     	;# 
   612  0211                     	;# 
   613  0211                     	;# 
   614  0212                     	;# 
   615  0212                     	;# 
   616  0213                     	;# 
   617  0213                     	;# 
   618  0214                     	;# 
   619  0214                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0216                     	;# 
   624  0216                     	;# 
   625  0217                     	;# 
   626  0217                     	;# 
   627  0219                     	;# 
   628  021A                     	;# 
   629  021B                     	;# 
   630  021C                     	;# 
   631  021D                     	;# 
   632  021E                     	;# 
   633  021F                     	;# 
   634  0291                     	;# 
   635  0291                     	;# 
   636  0292                     	;# 
   637  0293                     	;# 
   638  0294                     	;# 
   639  0295                     	;# 
   640  0295                     	;# 
   641  0296                     	;# 
   642  0298                     	;# 
   643  0298                     	;# 
   644  0299                     	;# 
   645  029A                     	;# 
   646  029B                     	;# 
   647  029C                     	;# 
   648  029C                     	;# 
   649  029D                     	;# 
   650  029E                     	;# 
   651  029E                     	;# 
   652  0311                     	;# 
   653  0311                     	;# 
   654  0312                     	;# 
   655  0313                     	;# 
   656  0318                     	;# 
   657  0318                     	;# 
   658  0319                     	;# 
   659  031A                     	;# 
   660  0394                     	;# 
   661  0395                     	;# 
   662  0396                     	;# 
   663  039A                     	;# 
   664  039C                     	;# 
   665  039D                     	;# 
   666  039E                     	;# 
   667  039F                     	;# 
   668  0415                     	;# 
   669  0416                     	;# 
   670  0417                     	;# 
   671  041C                     	;# 
   672  041D                     	;# 
   673  041E                     	;# 
   674  0FE4                     	;# 
   675  0FE5                     	;# 
   676  0FE6                     	;# 
   677  0FE7                     	;# 
   678  0FE8                     	;# 
   679  0FE9                     	;# 
   680  0FEA                     	;# 
   681  0FEB                     	;# 
   682  0FED                     	;# 
   683  0FEE                     	;# 
   684  0FEF                     	;# 
   685  0000                     	;# 
   686  0001                     	;# 
   687  0002                     	;# 
   688  0003                     	;# 
   689  0004                     	;# 
   690  0005                     	;# 
   691  0006                     	;# 
   692  0007                     	;# 
   693  0008                     	;# 
   694  0009                     	;# 
   695  000A                     	;# 
   696  000B                     	;# 
   697  000C                     	;# 
   698  000D                     	;# 
   699  0011                     	;# 
   700  0012                     	;# 
   701  0013                     	;# 
   702  0014                     	;# 
   703  0015                     	;# 
   704  0016                     	;# 
   705  0016                     	;# 
   706  0017                     	;# 
   707  0018                     	;# 
   708  0019                     	;# 
   709  001A                     	;# 
   710  001B                     	;# 
   711  001C                     	;# 
   712  001E                     	;# 
   713  001F                     	;# 
   714  008C                     	;# 
   715  008D                     	;# 
   716  0091                     	;# 
   717  0092                     	;# 
   718  0093                     	;# 
   719  0094                     	;# 
   720  0095                     	;# 
   721  0096                     	;# 
   722  0097                     	;# 
   723  0098                     	;# 
   724  0099                     	;# 
   725  009A                     	;# 
   726  009B                     	;# 
   727  009B                     	;# 
   728  009C                     	;# 
   729  009D                     	;# 
   730  009E                     	;# 
   731  010C                     	;# 
   732  010D                     	;# 
   733  0111                     	;# 
   734  0112                     	;# 
   735  0113                     	;# 
   736  0114                     	;# 
   737  0115                     	;# 
   738  0116                     	;# 
   739  0117                     	;# 
   740  0118                     	;# 
   741  0119                     	;# 
   742  011A                     	;# 
   743  011B                     	;# 
   744  011D                     	;# 
   745  011E                     	;# 
   746  018C                     	;# 
   747  018D                     	;# 
   748  0191                     	;# 
   749  0191                     	;# 
   750  0192                     	;# 
   751  0193                     	;# 
   752  0193                     	;# 
   753  0193                     	;# 
   754  0194                     	;# 
   755  0195                     	;# 
   756  0196                     	;# 
   757  0199                     	;# 
   758  019A                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019C                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020C                     	;# 
   769  020D                     	;# 
   770  0211                     	;# 
   771  0211                     	;# 
   772  0212                     	;# 
   773  0212                     	;# 
   774  0213                     	;# 
   775  0213                     	;# 
   776  0214                     	;# 
   777  0214                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0215                     	;# 
   781  0216                     	;# 
   782  0216                     	;# 
   783  0217                     	;# 
   784  0217                     	;# 
   785  0219                     	;# 
   786  021A                     	;# 
   787  021B                     	;# 
   788  021C                     	;# 
   789  021D                     	;# 
   790  021E                     	;# 
   791  021F                     	;# 
   792  0291                     	;# 
   793  0291                     	;# 
   794  0292                     	;# 
   795  0293                     	;# 
   796  0294                     	;# 
   797  0295                     	;# 
   798  0295                     	;# 
   799  0296                     	;# 
   800  0298                     	;# 
   801  0298                     	;# 
   802  0299                     	;# 
   803  029A                     	;# 
   804  029B                     	;# 
   805  029C                     	;# 
   806  029C                     	;# 
   807  029D                     	;# 
   808  029E                     	;# 
   809  029E                     	;# 
   810  0311                     	;# 
   811  0311                     	;# 
   812  0312                     	;# 
   813  0313                     	;# 
   814  0318                     	;# 
   815  0318                     	;# 
   816  0319                     	;# 
   817  031A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  039A                     	;# 
   822  039C                     	;# 
   823  039D                     	;# 
   824  039E                     	;# 
   825  039F                     	;# 
   826  0415                     	;# 
   827  0416                     	;# 
   828  0417                     	;# 
   829  041C                     	;# 
   830  041D                     	;# 
   831  041E                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000D                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0014                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  001E                     	;# 
   871  001F                     	;# 
   872  008C                     	;# 
   873  008D                     	;# 
   874  0091                     	;# 
   875  0092                     	;# 
   876  0093                     	;# 
   877  0094                     	;# 
   878  0095                     	;# 
   879  0096                     	;# 
   880  0097                     	;# 
   881  0098                     	;# 
   882  0099                     	;# 
   883  009A                     	;# 
   884  009B                     	;# 
   885  009B                     	;# 
   886  009C                     	;# 
   887  009D                     	;# 
   888  009E                     	;# 
   889  010C                     	;# 
   890  010D                     	;# 
   891  0111                     	;# 
   892  0112                     	;# 
   893  0113                     	;# 
   894  0114                     	;# 
   895  0115                     	;# 
   896  0116                     	;# 
   897  0117                     	;# 
   898  0118                     	;# 
   899  0119                     	;# 
   900  011A                     	;# 
   901  011B                     	;# 
   902  011D                     	;# 
   903  011E                     	;# 
   904  018C                     	;# 
   905  018D                     	;# 
   906  0191                     	;# 
   907  0191                     	;# 
   908  0192                     	;# 
   909  0193                     	;# 
   910  0193                     	;# 
   911  0193                     	;# 
   912  0194                     	;# 
   913  0195                     	;# 
   914  0196                     	;# 
   915  0199                     	;# 
   916  019A                     	;# 
   917  019B                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019B                     	;# 
   921  019C                     	;# 
   922  019C                     	;# 
   923  019D                     	;# 
   924  019E                     	;# 
   925  019F                     	;# 
   926  020C                     	;# 
   927  020D                     	;# 
   928  0211                     	;# 
   929  0211                     	;# 
   930  0212                     	;# 
   931  0212                     	;# 
   932  0213                     	;# 
   933  0213                     	;# 
   934  0214                     	;# 
   935  0214                     	;# 
   936  0215                     	;# 
   937  0215                     	;# 
   938  0215                     	;# 
   939  0216                     	;# 
   940  0216                     	;# 
   941  0217                     	;# 
   942  0217                     	;# 
   943  0219                     	;# 
   944  021A                     	;# 
   945  021B                     	;# 
   946  021C                     	;# 
   947  021D                     	;# 
   948  021E                     	;# 
   949  021F                     	;# 
   950  0291                     	;# 
   951  0291                     	;# 
   952  0292                     	;# 
   953  0293                     	;# 
   954  0294                     	;# 
   955  0295                     	;# 
   956  0295                     	;# 
   957  0296                     	;# 
   958  0298                     	;# 
   959  0298                     	;# 
   960  0299                     	;# 
   961  029A                     	;# 
   962  029B                     	;# 
   963  029C                     	;# 
   964  029C                     	;# 
   965  029D                     	;# 
   966  029E                     	;# 
   967  029E                     	;# 
   968  0311                     	;# 
   969  0311                     	;# 
   970  0312                     	;# 
   971  0313                     	;# 
   972  0318                     	;# 
   973  0318                     	;# 
   974  0319                     	;# 
   975  031A                     	;# 
   976  0394                     	;# 
   977  0395                     	;# 
   978  0396                     	;# 
   979  039A                     	;# 
   980  039C                     	;# 
   981  039D                     	;# 
   982  039E                     	;# 
   983  039F                     	;# 
   984  0415                     	;# 
   985  0416                     	;# 
   986  0417                     	;# 
   987  041C                     	;# 
   988  041D                     	;# 
   989  041E                     	;# 
   990  0FE4                     	;# 
   991  0FE5                     	;# 
   992  0FE6                     	;# 
   993  0FE7                     	;# 
   994  0FE8                     	;# 
   995  0FE9                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEF                     	;# 
  1001  0000                     	;# 
  1002  0001                     	;# 
  1003  0002                     	;# 
  1004  0003                     	;# 
  1005  0004                     	;# 
  1006  0005                     	;# 
  1007  0006                     	;# 
  1008  0007                     	;# 
  1009  0008                     	;# 
  1010  0009                     	;# 
  1011  000A                     	;# 
  1012  000B                     	;# 
  1013  000C                     	;# 
  1014  000D                     	;# 
  1015  0011                     	;# 
  1016  0012                     	;# 
  1017  0013                     	;# 
  1018  0014                     	;# 
  1019  0015                     	;# 
  1020  0016                     	;# 
  1021  0016                     	;# 
  1022  0017                     	;# 
  1023  0018                     	;# 
  1024  0019                     	;# 
  1025  001A                     	;# 
  1026  001B                     	;# 
  1027  001C                     	;# 
  1028  001E                     	;# 
  1029  001F                     	;# 
  1030  008C                     	;# 
  1031  008D                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0094                     	;# 
  1036  0095                     	;# 
  1037  0096                     	;# 
  1038  0097                     	;# 
  1039  0098                     	;# 
  1040  0099                     	;# 
  1041  009A                     	;# 
  1042  009B                     	;# 
  1043  009B                     	;# 
  1044  009C                     	;# 
  1045  009D                     	;# 
  1046  009E                     	;# 
  1047  010C                     	;# 
  1048  010D                     	;# 
  1049  0111                     	;# 
  1050  0112                     	;# 
  1051  0113                     	;# 
  1052  0114                     	;# 
  1053  0115                     	;# 
  1054  0116                     	;# 
  1055  0117                     	;# 
  1056  0118                     	;# 
  1057  0119                     	;# 
  1058  011A                     	;# 
  1059  011B                     	;# 
  1060  011D                     	;# 
  1061  011E                     	;# 
  1062  018C                     	;# 
  1063  018D                     	;# 
  1064  0191                     	;# 
  1065  0191                     	;# 
  1066  0192                     	;# 
  1067  0193                     	;# 
  1068  0193                     	;# 
  1069  0193                     	;# 
  1070  0194                     	;# 
  1071  0195                     	;# 
  1072  0196                     	;# 
  1073  0199                     	;# 
  1074  019A                     	;# 
  1075  019B                     	;# 
  1076  019B                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019C                     	;# 
  1080  019C                     	;# 
  1081  019D                     	;# 
  1082  019E                     	;# 
  1083  019F                     	;# 
  1084  020C                     	;# 
  1085  020D                     	;# 
  1086  0211                     	;# 
  1087  0211                     	;# 
  1088  0212                     	;# 
  1089  0212                     	;# 
  1090  0213                     	;# 
  1091  0213                     	;# 
  1092  0214                     	;# 
  1093  0214                     	;# 
  1094  0215                     	;# 
  1095  0215                     	;# 
  1096  0215                     	;# 
  1097  0216                     	;# 
  1098  0216                     	;# 
  1099  0217                     	;# 
  1100  0217                     	;# 
  1101  0219                     	;# 
  1102  021A                     	;# 
  1103  021B                     	;# 
  1104  021C                     	;# 
  1105  021D                     	;# 
  1106  021E                     	;# 
  1107  021F                     	;# 
  1108  0291                     	;# 
  1109  0291                     	;# 
  1110  0292                     	;# 
  1111  0293                     	;# 
  1112  0294                     	;# 
  1113  0295                     	;# 
  1114  0295                     	;# 
  1115  0296                     	;# 
  1116  0298                     	;# 
  1117  0298                     	;# 
  1118  0299                     	;# 
  1119  029A                     	;# 
  1120  029B                     	;# 
  1121  029C                     	;# 
  1122  029C                     	;# 
  1123  029D                     	;# 
  1124  029E                     	;# 
  1125  029E                     	;# 
  1126  0311                     	;# 
  1127  0311                     	;# 
  1128  0312                     	;# 
  1129  0313                     	;# 
  1130  0318                     	;# 
  1131  0318                     	;# 
  1132  0319                     	;# 
  1133  031A                     	;# 
  1134  0394                     	;# 
  1135  0395                     	;# 
  1136  0396                     	;# 
  1137  039A                     	;# 
  1138  039C                     	;# 
  1139  039D                     	;# 
  1140  039E                     	;# 
  1141  039F                     	;# 
  1142  0415                     	;# 
  1143  0416                     	;# 
  1144  0417                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159  0000                     	;# 
  1160  0001                     	;# 
  1161  0002                     	;# 
  1162  0003                     	;# 
  1163  0004                     	;# 
  1164  0005                     	;# 
  1165  0006                     	;# 
  1166  0007                     	;# 
  1167  0008                     	;# 
  1168  0009                     	;# 
  1169  000A                     	;# 
  1170  000B                     	;# 
  1171  000C                     	;# 
  1172  000D                     	;# 
  1173  0011                     	;# 
  1174  0012                     	;# 
  1175  0013                     	;# 
  1176  0014                     	;# 
  1177  0015                     	;# 
  1178  0016                     	;# 
  1179  0016                     	;# 
  1180  0017                     	;# 
  1181  0018                     	;# 
  1182  0019                     	;# 
  1183  001A                     	;# 
  1184  001B                     	;# 
  1185  001C                     	;# 
  1186  001E                     	;# 
  1187  001F                     	;# 
  1188  008C                     	;# 
  1189  008D                     	;# 
  1190  0091                     	;# 
  1191  0092                     	;# 
  1192  0093                     	;# 
  1193  0094                     	;# 
  1194  0095                     	;# 
  1195  0096                     	;# 
  1196  0097                     	;# 
  1197  0098                     	;# 
  1198  0099                     	;# 
  1199  009A                     	;# 
  1200  009B                     	;# 
  1201  009B                     	;# 
  1202  009C                     	;# 
  1203  009D                     	;# 
  1204  009E                     	;# 
  1205  010C                     	;# 
  1206  010D                     	;# 
  1207  0111                     	;# 
  1208  0112                     	;# 
  1209  0113                     	;# 
  1210  0114                     	;# 
  1211  0115                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  0118                     	;# 
  1215  0119                     	;# 
  1216  011A                     	;# 
  1217  011B                     	;# 
  1218  011D                     	;# 
  1219  011E                     	;# 
  1220  018C                     	;# 
  1221  018D                     	;# 
  1222  0191                     	;# 
  1223  0191                     	;# 
  1224  0192                     	;# 
  1225  0193                     	;# 
  1226  0193                     	;# 
  1227  0193                     	;# 
  1228  0194                     	;# 
  1229  0195                     	;# 
  1230  0196                     	;# 
  1231  0199                     	;# 
  1232  019A                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019C                     	;# 
  1238  019C                     	;# 
  1239  019D                     	;# 
  1240  019E                     	;# 
  1241  019F                     	;# 
  1242  020C                     	;# 
  1243  020D                     	;# 
  1244  0211                     	;# 
  1245  0211                     	;# 
  1246  0212                     	;# 
  1247  0212                     	;# 
  1248  0213                     	;# 
  1249  0213                     	;# 
  1250  0214                     	;# 
  1251  0214                     	;# 
  1252  0215                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0219                     	;# 
  1260  021A                     	;# 
  1261  021B                     	;# 
  1262  021C                     	;# 
  1263  021D                     	;# 
  1264  021E                     	;# 
  1265  021F                     	;# 
  1266  0291                     	;# 
  1267  0291                     	;# 
  1268  0292                     	;# 
  1269  0293                     	;# 
  1270  0294                     	;# 
  1271  0295                     	;# 
  1272  0295                     	;# 
  1273  0296                     	;# 
  1274  0298                     	;# 
  1275  0298                     	;# 
  1276  0299                     	;# 
  1277  029A                     	;# 
  1278  029B                     	;# 
  1279  029C                     	;# 
  1280  029C                     	;# 
  1281  029D                     	;# 
  1282  029E                     	;# 
  1283  029E                     	;# 
  1284  0311                     	;# 
  1285  0311                     	;# 
  1286  0312                     	;# 
  1287  0313                     	;# 
  1288  0318                     	;# 
  1289  0318                     	;# 
  1290  0319                     	;# 
  1291  031A                     	;# 
  1292  0394                     	;# 
  1293  0395                     	;# 
  1294  0396                     	;# 
  1295  039A                     	;# 
  1296  039C                     	;# 
  1297  039D                     	;# 
  1298  039E                     	;# 
  1299  039F                     	;# 
  1300  0415                     	;# 
  1301  0416                     	;# 
  1302  0417                     	;# 
  1303  041C                     	;# 
  1304  041D                     	;# 
  1305  041E                     	;# 
  1306  0FE4                     	;# 
  1307  0FE5                     	;# 
  1308  0FE6                     	;# 
  1309  0FE7                     	;# 
  1310  0FE8                     	;# 
  1311  0FE9                     	;# 
  1312  0FEA                     	;# 
  1313  0FEB                     	;# 
  1314  0FED                     	;# 
  1315  0FEE                     	;# 
  1316  0FEF                     	;# 
  1317                           
  1318                           	psect	eeprom_data
  1319  0000  0011 0022 0033 0044 0055 0066 0077 0088 	db	17,34,51,68,85,102,119,136	;# 
  1320  0008  0049 00C8 0000 0000 0000 0000 0000 0000 	db	73,200,0,0,0,0,0,0	;# 
  1321  0000                     	;# 
  1322  0001                     	;# 
  1323  0002                     	;# 
  1324  0003                     	;# 
  1325  0004                     	;# 
  1326  0005                     	;# 
  1327  0006                     	;# 
  1328  0007                     	;# 
  1329  0008                     	;# 
  1330  0009                     	;# 
  1331  000A                     	;# 
  1332  000B                     	;# 
  1333  000C                     	;# 
  1334  000D                     	;# 
  1335  0011                     	;# 
  1336  0012                     	;# 
  1337  0013                     	;# 
  1338  0014                     	;# 
  1339  0015                     	;# 
  1340  0016                     	;# 
  1341  0016                     	;# 
  1342  0017                     	;# 
  1343  0018                     	;# 
  1344  0019                     	;# 
  1345  001A                     	;# 
  1346  001B                     	;# 
  1347  001C                     	;# 
  1348  001E                     	;# 
  1349  001F                     	;# 
  1350  008C                     	;# 
  1351  008D                     	;# 
  1352  0091                     	;# 
  1353  0092                     	;# 
  1354  0093                     	;# 
  1355  0094                     	;# 
  1356  0095                     	;# 
  1357  0096                     	;# 
  1358  0097                     	;# 
  1359  0098                     	;# 
  1360  0099                     	;# 
  1361  009A                     	;# 
  1362  009B                     	;# 
  1363  009B                     	;# 
  1364  009C                     	;# 
  1365  009D                     	;# 
  1366  009E                     	;# 
  1367  010C                     	;# 
  1368  010D                     	;# 
  1369  0111                     	;# 
  1370  0112                     	;# 
  1371  0113                     	;# 
  1372  0114                     	;# 
  1373  0115                     	;# 
  1374  0116                     	;# 
  1375  0117                     	;# 
  1376  0118                     	;# 
  1377  0119                     	;# 
  1378  011A                     	;# 
  1379  011B                     	;# 
  1380  011D                     	;# 
  1381  011E                     	;# 
  1382  018C                     	;# 
  1383  018D                     	;# 
  1384  0191                     	;# 
  1385  0191                     	;# 
  1386  0192                     	;# 
  1387  0193                     	;# 
  1388  0193                     	;# 
  1389  0193                     	;# 
  1390  0194                     	;# 
  1391  0195                     	;# 
  1392  0196                     	;# 
  1393  0199                     	;# 
  1394  019A                     	;# 
  1395  019B                     	;# 
  1396  019B                     	;# 
  1397  019B                     	;# 
  1398  019B                     	;# 
  1399  019C                     	;# 
  1400  019C                     	;# 
  1401  019D                     	;# 
  1402  019E                     	;# 
  1403  019F                     	;# 
  1404  020C                     	;# 
  1405  020D                     	;# 
  1406  0211                     	;# 
  1407  0211                     	;# 
  1408  0212                     	;# 
  1409  0212                     	;# 
  1410  0213                     	;# 
  1411  0213                     	;# 
  1412  0214                     	;# 
  1413  0214                     	;# 
  1414  0215                     	;# 
  1415  0215                     	;# 
  1416  0215                     	;# 
  1417  0216                     	;# 
  1418  0216                     	;# 
  1419  0217                     	;# 
  1420  0217                     	;# 
  1421  0219                     	;# 
  1422  021A                     	;# 
  1423  021B                     	;# 
  1424  021C                     	;# 
  1425  021D                     	;# 
  1426  021E                     	;# 
  1427  021F                     	;# 
  1428  0291                     	;# 
  1429  0291                     	;# 
  1430  0292                     	;# 
  1431  0293                     	;# 
  1432  0294                     	;# 
  1433  0295                     	;# 
  1434  0295                     	;# 
  1435  0296                     	;# 
  1436  0298                     	;# 
  1437  0298                     	;# 
  1438  0299                     	;# 
  1439  029A                     	;# 
  1440  029B                     	;# 
  1441  029C                     	;# 
  1442  029C                     	;# 
  1443  029D                     	;# 
  1444  029E                     	;# 
  1445  029E                     	;# 
  1446  0311                     	;# 
  1447  0311                     	;# 
  1448  0312                     	;# 
  1449  0313                     	;# 
  1450  0318                     	;# 
  1451  0318                     	;# 
  1452  0319                     	;# 
  1453  031A                     	;# 
  1454  0394                     	;# 
  1455  0395                     	;# 
  1456  0396                     	;# 
  1457  039A                     	;# 
  1458  039C                     	;# 
  1459  039D                     	;# 
  1460  039E                     	;# 
  1461  039F                     	;# 
  1462  0415                     	;# 
  1463  0416                     	;# 
  1464  0417                     	;# 
  1465  041C                     	;# 
  1466  041D                     	;# 
  1467  041E                     	;# 
  1468  0FE4                     	;# 
  1469  0FE5                     	;# 
  1470  0FE6                     	;# 
  1471  0FE7                     	;# 
  1472  0FE8                     	;# 
  1473  0FE9                     	;# 
  1474  0FEA                     	;# 
  1475  0FEB                     	;# 
  1476  0FED                     	;# 
  1477  0FEE                     	;# 
  1478  0FEF                     	;# 
  1479  0000                     	;# 
  1480  0001                     	;# 
  1481  0002                     	;# 
  1482  0003                     	;# 
  1483  0004                     	;# 
  1484  0005                     	;# 
  1485  0006                     	;# 
  1486  0007                     	;# 
  1487  0008                     	;# 
  1488  0009                     	;# 
  1489  000A                     	;# 
  1490  000B                     	;# 
  1491  000C                     	;# 
  1492  000D                     	;# 
  1493  0011                     	;# 
  1494  0012                     	;# 
  1495  0013                     	;# 
  1496  0014                     	;# 
  1497  0015                     	;# 
  1498  0016                     	;# 
  1499  0016                     	;# 
  1500  0017                     	;# 
  1501  0018                     	;# 
  1502  0019                     	;# 
  1503  001A                     	;# 
  1504  001B                     	;# 
  1505  001C                     	;# 
  1506  001E                     	;# 
  1507  001F                     	;# 
  1508  008C                     	;# 
  1509  008D                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0094                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0098                     	;# 
  1518  0099                     	;# 
  1519  009A                     	;# 
  1520  009B                     	;# 
  1521  009B                     	;# 
  1522  009C                     	;# 
  1523  009D                     	;# 
  1524  009E                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  0111                     	;# 
  1528  0112                     	;# 
  1529  0113                     	;# 
  1530  0114                     	;# 
  1531  0115                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  0118                     	;# 
  1535  0119                     	;# 
  1536  011A                     	;# 
  1537  011B                     	;# 
  1538  011D                     	;# 
  1539  011E                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020C                     	;# 
  1563  020D                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0219                     	;# 
  1580  021A                     	;# 
  1581  021B                     	;# 
  1582  021C                     	;# 
  1583  021D                     	;# 
  1584  021E                     	;# 
  1585  021F                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0294                     	;# 
  1591  0295                     	;# 
  1592  0295                     	;# 
  1593  0296                     	;# 
  1594  0298                     	;# 
  1595  0298                     	;# 
  1596  0299                     	;# 
  1597  029A                     	;# 
  1598  029B                     	;# 
  1599  029C                     	;# 
  1600  029C                     	;# 
  1601  029D                     	;# 
  1602  029E                     	;# 
  1603  029E                     	;# 
  1604  0311                     	;# 
  1605  0311                     	;# 
  1606  0312                     	;# 
  1607  0313                     	;# 
  1608  0318                     	;# 
  1609  0318                     	;# 
  1610  0319                     	;# 
  1611  031A                     	;# 
  1612  0394                     	;# 
  1613  0395                     	;# 
  1614  0396                     	;# 
  1615  039A                     	;# 
  1616  039C                     	;# 
  1617  039D                     	;# 
  1618  039E                     	;# 
  1619  039F                     	;# 
  1620  0415                     	;# 
  1621  0416                     	;# 
  1622  0417                     	;# 
  1623  041C                     	;# 
  1624  041D                     	;# 
  1625  041E                     	;# 
  1626  0FE4                     	;# 
  1627  0FE5                     	;# 
  1628  0FE6                     	;# 
  1629  0FE7                     	;# 
  1630  0FE8                     	;# 
  1631  0FE9                     	;# 
  1632  0FEA                     	;# 
  1633  0FEB                     	;# 
  1634  0FED                     	;# 
  1635  0FEE                     	;# 
  1636  0FEF                     	;# 
  1637  0000                     	;# 
  1638  0001                     	;# 
  1639  0002                     	;# 
  1640  0003                     	;# 
  1641  0004                     	;# 
  1642  0005                     	;# 
  1643  0006                     	;# 
  1644  0007                     	;# 
  1645  0008                     	;# 
  1646  0009                     	;# 
  1647  000A                     	;# 
  1648  000B                     	;# 
  1649  000C                     	;# 
  1650  000D                     	;# 
  1651  0011                     	;# 
  1652  0012                     	;# 
  1653  0013                     	;# 
  1654  0014                     	;# 
  1655  0015                     	;# 
  1656  0016                     	;# 
  1657  0016                     	;# 
  1658  0017                     	;# 
  1659  0018                     	;# 
  1660  0019                     	;# 
  1661  001A                     	;# 
  1662  001B                     	;# 
  1663  001C                     	;# 
  1664  001E                     	;# 
  1665  001F                     	;# 
  1666  008C                     	;# 
  1667  008D                     	;# 
  1668  0091                     	;# 
  1669  0092                     	;# 
  1670  0093                     	;# 
  1671  0094                     	;# 
  1672  0095                     	;# 
  1673  0096                     	;# 
  1674  0097                     	;# 
  1675  0098                     	;# 
  1676  0099                     	;# 
  1677  009A                     	;# 
  1678  009B                     	;# 
  1679  009B                     	;# 
  1680  009C                     	;# 
  1681  009D                     	;# 
  1682  009E                     	;# 
  1683  010C                     	;# 
  1684  010D                     	;# 
  1685  0111                     	;# 
  1686  0112                     	;# 
  1687  0113                     	;# 
  1688  0114                     	;# 
  1689  0115                     	;# 
  1690  0116                     	;# 
  1691  0117                     	;# 
  1692  0118                     	;# 
  1693  0119                     	;# 
  1694  011A                     	;# 
  1695  011B                     	;# 
  1696  011D                     	;# 
  1697  011E                     	;# 
  1698  018C                     	;# 
  1699  018D                     	;# 
  1700  0191                     	;# 
  1701  0191                     	;# 
  1702  0192                     	;# 
  1703  0193                     	;# 
  1704  0193                     	;# 
  1705  0193                     	;# 
  1706  0194                     	;# 
  1707  0195                     	;# 
  1708  0196                     	;# 
  1709  0199                     	;# 
  1710  019A                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019B                     	;# 
  1715  019C                     	;# 
  1716  019C                     	;# 
  1717  019D                     	;# 
  1718  019E                     	;# 
  1719  019F                     	;# 
  1720  020C                     	;# 
  1721  020D                     	;# 
  1722  0211                     	;# 
  1723  0211                     	;# 
  1724  0212                     	;# 
  1725  0212                     	;# 
  1726  0213                     	;# 
  1727  0213                     	;# 
  1728  0214                     	;# 
  1729  0214                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0216                     	;# 
  1734  0216                     	;# 
  1735  0217                     	;# 
  1736  0217                     	;# 
  1737  0219                     	;# 
  1738  021A                     	;# 
  1739  021B                     	;# 
  1740  021C                     	;# 
  1741  021D                     	;# 
  1742  021E                     	;# 
  1743  021F                     	;# 
  1744  0291                     	;# 
  1745  0291                     	;# 
  1746  0292                     	;# 
  1747  0293                     	;# 
  1748  0294                     	;# 
  1749  0295                     	;# 
  1750  0295                     	;# 
  1751  0296                     	;# 
  1752  0298                     	;# 
  1753  0298                     	;# 
  1754  0299                     	;# 
  1755  029A                     	;# 
  1756  029B                     	;# 
  1757  029C                     	;# 
  1758  029C                     	;# 
  1759  029D                     	;# 
  1760  029E                     	;# 
  1761  029E                     	;# 
  1762  0311                     	;# 
  1763  0311                     	;# 
  1764  0312                     	;# 
  1765  0313                     	;# 
  1766  0318                     	;# 
  1767  0318                     	;# 
  1768  0319                     	;# 
  1769  031A                     	;# 
  1770  0394                     	;# 
  1771  0395                     	;# 
  1772  0396                     	;# 
  1773  039A                     	;# 
  1774  039C                     	;# 
  1775  039D                     	;# 
  1776  039E                     	;# 
  1777  039F                     	;# 
  1778  0415                     	;# 
  1779  0416                     	;# 
  1780  0417                     	;# 
  1781  041C                     	;# 
  1782  041D                     	;# 
  1783  041E                     	;# 
  1784  0FE4                     	;# 
  1785  0FE5                     	;# 
  1786  0FE6                     	;# 
  1787  0FE7                     	;# 
  1788  0FE8                     	;# 
  1789  0FE9                     	;# 
  1790  0FEA                     	;# 
  1791  0FEB                     	;# 
  1792  0FED                     	;# 
  1793  0FEE                     	;# 
  1794  0FEF                     	;# 
  1795  0000                     	;# 
  1796  0001                     	;# 
  1797  0002                     	;# 
  1798  0003                     	;# 
  1799  0004                     	;# 
  1800  0005                     	;# 
  1801  0006                     	;# 
  1802  0007                     	;# 
  1803  0008                     	;# 
  1804  0009                     	;# 
  1805  000A                     	;# 
  1806  000B                     	;# 
  1807  000C                     	;# 
  1808  000D                     	;# 
  1809  0011                     	;# 
  1810  0012                     	;# 
  1811  0013                     	;# 
  1812  0014                     	;# 
  1813  0015                     	;# 
  1814  0016                     	;# 
  1815  0016                     	;# 
  1816  0017                     	;# 
  1817  0018                     	;# 
  1818  0019                     	;# 
  1819  001A                     	;# 
  1820  001B                     	;# 
  1821  001C                     	;# 
  1822  001E                     	;# 
  1823  001F                     	;# 
  1824  008C                     	;# 
  1825  008D                     	;# 
  1826  0091                     	;# 
  1827  0092                     	;# 
  1828  0093                     	;# 
  1829  0094                     	;# 
  1830  0095                     	;# 
  1831  0096                     	;# 
  1832  0097                     	;# 
  1833  0098                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  010C                     	;# 
  1842  010D                     	;# 
  1843  0111                     	;# 
  1844  0112                     	;# 
  1845  0113                     	;# 
  1846  0114                     	;# 
  1847  0115                     	;# 
  1848  0116                     	;# 
  1849  0117                     	;# 
  1850  0118                     	;# 
  1851  0119                     	;# 
  1852  011A                     	;# 
  1853  011B                     	;# 
  1854  011D                     	;# 
  1855  011E                     	;# 
  1856  018C                     	;# 
  1857  018D                     	;# 
  1858  0191                     	;# 
  1859  0191                     	;# 
  1860  0192                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0193                     	;# 
  1864  0194                     	;# 
  1865  0195                     	;# 
  1866  0196                     	;# 
  1867  0199                     	;# 
  1868  019A                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019B                     	;# 
  1873  019C                     	;# 
  1874  019C                     	;# 
  1875  019D                     	;# 
  1876  019E                     	;# 
  1877  019F                     	;# 
  1878  020C                     	;# 
  1879  020D                     	;# 
  1880  0211                     	;# 
  1881  0211                     	;# 
  1882  0212                     	;# 
  1883  0212                     	;# 
  1884  0213                     	;# 
  1885  0213                     	;# 
  1886  0214                     	;# 
  1887  0214                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0216                     	;# 
  1892  0216                     	;# 
  1893  0217                     	;# 
  1894  0217                     	;# 
  1895  0219                     	;# 
  1896  021A                     	;# 
  1897  021B                     	;# 
  1898  021C                     	;# 
  1899  021D                     	;# 
  1900  021E                     	;# 
  1901  021F                     	;# 
  1902  0291                     	;# 
  1903  0291                     	;# 
  1904  0292                     	;# 
  1905  0293                     	;# 
  1906  0294                     	;# 
  1907  0295                     	;# 
  1908  0295                     	;# 
  1909  0296                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  029B                     	;# 
  1915  029C                     	;# 
  1916  029C                     	;# 
  1917  029D                     	;# 
  1918  029E                     	;# 
  1919  029E                     	;# 
  1920  0311                     	;# 
  1921  0311                     	;# 
  1922  0312                     	;# 
  1923  0313                     	;# 
  1924  0318                     	;# 
  1925  0318                     	;# 
  1926  0319                     	;# 
  1927  031A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  039A                     	;# 
  1932  039C                     	;# 
  1933  039D                     	;# 
  1934  039E                     	;# 
  1935  039F                     	;# 
  1936  0415                     	;# 
  1937  0416                     	;# 
  1938  0417                     	;# 
  1939  041C                     	;# 
  1940  041D                     	;# 
  1941  041E                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0013                     	;# 
  1970  0014                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  001E                     	;# 
  1981  001F                     	;# 
  1982  008C                     	;# 
  1983  008D                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0093                     	;# 
  1987  0094                     	;# 
  1988  0095                     	;# 
  1989  0096                     	;# 
  1990  0097                     	;# 
  1991  0098                     	;# 
  1992  0099                     	;# 
  1993  009A                     	;# 
  1994  009B                     	;# 
  1995  009B                     	;# 
  1996  009C                     	;# 
  1997  009D                     	;# 
  1998  009E                     	;# 
  1999  010C                     	;# 
  2000  010D                     	;# 
  2001  0111                     	;# 
  2002  0112                     	;# 
  2003  0113                     	;# 
  2004  0114                     	;# 
  2005  0115                     	;# 
  2006  0116                     	;# 
  2007  0117                     	;# 
  2008  0118                     	;# 
  2009  0119                     	;# 
  2010  011A                     	;# 
  2011  011B                     	;# 
  2012  011D                     	;# 
  2013  011E                     	;# 
  2014  018C                     	;# 
  2015  018D                     	;# 
  2016  0191                     	;# 
  2017  0191                     	;# 
  2018  0192                     	;# 
  2019  0193                     	;# 
  2020  0193                     	;# 
  2021  0193                     	;# 
  2022  0194                     	;# 
  2023  0195                     	;# 
  2024  0196                     	;# 
  2025  0199                     	;# 
  2026  019A                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019B                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019E                     	;# 
  2035  019F                     	;# 
  2036  020C                     	;# 
  2037  020D                     	;# 
  2038  0211                     	;# 
  2039  0211                     	;# 
  2040  0212                     	;# 
  2041  0212                     	;# 
  2042  0213                     	;# 
  2043  0213                     	;# 
  2044  0214                     	;# 
  2045  0214                     	;# 
  2046  0215                     	;# 
  2047  0215                     	;# 
  2048  0215                     	;# 
  2049  0216                     	;# 
  2050  0216                     	;# 
  2051  0217                     	;# 
  2052  0217                     	;# 
  2053  0219                     	;# 
  2054  021A                     	;# 
  2055  021B                     	;# 
  2056  021C                     	;# 
  2057  021D                     	;# 
  2058  021E                     	;# 
  2059  021F                     	;# 
  2060  0291                     	;# 
  2061  0291                     	;# 
  2062  0292                     	;# 
  2063  0293                     	;# 
  2064  0294                     	;# 
  2065  0295                     	;# 
  2066  0295                     	;# 
  2067  0296                     	;# 
  2068  0298                     	;# 
  2069  0298                     	;# 
  2070  0299                     	;# 
  2071  029A                     	;# 
  2072  029B                     	;# 
  2073  029C                     	;# 
  2074  029C                     	;# 
  2075  029D                     	;# 
  2076  029E                     	;# 
  2077  029E                     	;# 
  2078  0311                     	;# 
  2079  0311                     	;# 
  2080  0312                     	;# 
  2081  0313                     	;# 
  2082  0318                     	;# 
  2083  0318                     	;# 
  2084  0319                     	;# 
  2085  031A                     	;# 
  2086  0394                     	;# 
  2087  0395                     	;# 
  2088  0396                     	;# 
  2089  039A                     	;# 
  2090  039C                     	;# 
  2091  039D                     	;# 
  2092  039E                     	;# 
  2093  039F                     	;# 
  2094  0415                     	;# 
  2095  0416                     	;# 
  2096  0417                     	;# 
  2097  041C                     	;# 
  2098  041D                     	;# 
  2099  041E                     	;# 
  2100  0FE4                     	;# 
  2101  0FE5                     	;# 
  2102  0FE6                     	;# 
  2103  0FE7                     	;# 
  2104  0FE8                     	;# 
  2105  0FE9                     	;# 
  2106  0FEA                     	;# 
  2107  0FEB                     	;# 
  2108  0FED                     	;# 
  2109  0FEE                     	;# 
  2110  0FEF                     	;# 
  2111                           
  2112                           	psect	stringtext
  2113  06DD                     __pstringtext:	
  2114  06DD                     _fp_x0_a:	
  2115  06DD  34D0               	retlw	208
  2116  06DE  34D2               	retlw	210
  2117  06DF  3402               	retlw	2
  2118  06E0  3400               	retlw	0
  2119  06E1                     __end_of_fp_x0_a:	
  2120  06E1                     _fp_x0_b:	
  2121  06E1  34E4               	retlw	228
  2122  06E2  34E1               	retlw	225
  2123  06E3  3401               	retlw	1
  2124  06E4  3400               	retlw	0
  2125  06E5                     __end_of_fp_x0_b:	
  2126  06E5                     _ratio_mph:	
  2127  06E5  34F9               	retlw	249
  2128  06E6  349E               	retlw	158
  2129  06E7  3400               	retlw	0
  2130  06E8  3400               	retlw	0
  2131  06E9                     __end_of_ratio_mph:	
  2132  06E9                     convert_to_fp@one:	
  2133  06E9  3401               	retlw	1
  2134  06EA  3400               	retlw	0
  2135  06EB                     __end_ofconvert_to_fp@one:	
  2136  000B                     _INTCONbits	set	11
  2137  0011                     _PIR1bits	set	17
  2138  000D                     _PORTBbits	set	13
  2139  001B                     _PR2	set	27
  2140  001C                     _T2CON	set	28
  2141  001C                     _T2CONbits	set	28
  2142  0015                     _TMR0	set	21
  2143  001A                     _TMR2	set	26
  2144  0095                     _OPTION_REG	set	149
  2145  0095                     _OPTION_REGbits	set	149
  2146  0099                     _OSCCON	set	153
  2147  009A                     _OSCSTAT	set	154
  2148  0098                     _OSCTUNE	set	152
  2149  0091                     _PIE1bits	set	145
  2150  008C                     _TRISA	set	140
  2151  008D                     _TRISB	set	141
  2152  04D6                     _PLLR	set	1238
  2153  011D                     _APFCON0	set	285
  2154  011E                     _APFCON1	set	286
  2155  010C                     _LATA	set	268
  2156  010D                     _LATB	set	269
  2157  0862                     _LATA2	set	2146
  2158  018C                     _ANSELA	set	396
  2159  018D                     _ANSELB	set	397
  2160  019F                     _BAUDCON	set	415
  2161  0192                     _EEADRH	set	402
  2162  0191                     _EEADRL	set	401
  2163  0195                     _EECON1bits	set	405
  2164  0196                     _EECON2	set	406
  2165  0194                     _EEDATH	set	404
  2166  0193                     _EEDATL	set	403
  2167  0199                     _RCREG	set	409
  2168  019D                     _RCSTA	set	413
  2169  019D                     _RCSTAbits	set	413
  2170  019C                     _SPBRGH	set	412
  2171  019B                     _SPBRGL	set	411
  2172  019A                     _TXREG	set	410
  2173  019E                     _TXSTA	set	414
  2174  020C                     _WPUA	set	524
  2175  020D                     _WPUB	set	525
  2176  0293                     _CCP1CON	set	659
  2177  0292                     _CCPR1H	set	658
  2178  0291                     _CCPR1L	set	657
  2179  029E                     _CCPTMRS0bits	set	670
  2180  0295                     _ECCP1AS	set	661
  2181  0296                     _PSTR1CON	set	662
  2182  0294                     _PWM1CON	set	660
  2183  06EB                     STR_1:	
  2184  06EB  3424               	retlw	36	;'$'
  2185  06EC  3450               	retlw	80	;'P'
  2186  06ED  344D               	retlw	77	;'M'
  2187  06EE  3454               	retlw	84	;'T'
  2188  06EF  344B               	retlw	75	;'K'
  2189  06F0  3433               	retlw	51	;'3'
  2190  06F1  3431               	retlw	49	;'1'
  2191  06F2  3434               	retlw	52	;'4'
  2192  06F3  342C               	retlw	44	;','
  2193  06F4  3430               	retlw	48	;'0'
  2194  06F5  342C               	retlw	44	;','
  2195  06F6  3430               	retlw	48	;'0'
  2196  06F7  342C               	retlw	44	;','
  2197  06F8  3431               	retlw	49	;'1'
  2198  06F9  342C               	retlw	44	;','
  2199  06FA  3430               	retlw	48	;'0'
  2200  06FB  342C               	retlw	44	;','
  2201  06FC  3430               	retlw	48	;'0'
  2202  06FD  342C               	retlw	44	;','
  2203  06FE  3430               	retlw	48	;'0'
  2204  06FF  342C               	retlw	44	;','
  2205  0700  3430               	retlw	48	;'0'
  2206  0701  342C               	retlw	44	;','
  2207  0702  3430               	retlw	48	;'0'
  2208  0703  342C               	retlw	44	;','
  2209  0704  3430               	retlw	48	;'0'
  2210  0705  342C               	retlw	44	;','
  2211  0706  3430               	retlw	48	;'0'
  2212  0707  342C               	retlw	44	;','
  2213  0708  3430               	retlw	48	;'0'
  2214  0709  342C               	retlw	44	;','
  2215  070A  3430               	retlw	48	;'0'
  2216  070B  342C               	retlw	44	;','
  2217  070C  3430               	retlw	48	;'0'
  2218  070D  342C               	retlw	44	;','
  2219  070E  3430               	retlw	48	;'0'
  2220  070F  342C               	retlw	44	;','
  2221  0710  3430               	retlw	48	;'0'
  2222  0711  342C               	retlw	44	;','
  2223  0712  3430               	retlw	48	;'0'
  2224  0713  342C               	retlw	44	;','
  2225  0714  3430               	retlw	48	;'0'
  2226  0715  342C               	retlw	44	;','
  2227  0716  3430               	retlw	48	;'0'
  2228  0717  342C               	retlw	44	;','
  2229  0718  3430               	retlw	48	;'0'
  2230  0719  342A               	retlw	42	;'*'
  2231  071A  3432               	retlw	50	;'2'
  2232  071B  3439               	retlw	57	;'9'
  2233  071C  340D               	retlw	13
  2234  071D  340A               	retlw	10
  2235  071E  3400               	retlw	0
  2236  071F                     STR_2:	
  2237  071F  3424               	retlw	36	;'$'
  2238  0720  3450               	retlw	80	;'P'
  2239  0721  344D               	retlw	77	;'M'
  2240  0722  3454               	retlw	84	;'T'
  2241  0723  344B               	retlw	75	;'K'
  2242  0724  3432               	retlw	50	;'2'
  2243  0725  3432               	retlw	50	;'2'
  2244  0726  3430               	retlw	48	;'0'
  2245  0727  342C               	retlw	44	;','
  2246  0728  3431               	retlw	49	;'1'
  2247  0729  3430               	retlw	48	;'0'
  2248  072A  3430               	retlw	48	;'0'
  2249  072B  342A               	retlw	42	;'*'
  2250  072C  3432               	retlw	50	;'2'
  2251  072D  3446               	retlw	70	;'F'
  2252  072E  340D               	retlw	13
  2253  072F  340A               	retlw	10
  2254  0730  3400               	retlw	0
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  002B                     start_initialization:	
  2260  002B                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to COMMON
  2263  002B  01F6               	clrf	__pbssCOMMON& (0+127)
  2264  002C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2265  002D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2266  002E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to BANK0
  2269  002F  304B               	movlw	low __pbssBANK0
  2270  0030  0084               	movwf	4
  2271  0031  3000               	movlw	high __pbssBANK0
  2272  0032  0085               	movwf	5
  2273  0033  301E               	movlw	30
  2274  0034  318E  2621  3180   	fcall	clear_ram0
  2275                           
  2276                           ; Clear objects allocated to BANK1
  2277  0037  30A0               	movlw	low __pbssBANK1
  2278  0038  0084               	movwf	4
  2279  0039  3000               	movlw	high __pbssBANK1
  2280  003A  0085               	movwf	5
  2281  003B  3037               	movlw	55
  2282  003C  318E  2621         	fcall	clear_ram0
  2283  003E                     end_of_initialization:	
  2284                           ;End of C runtime variable initialization code
  2285                           
  2286  003E                     __end_of__initialization:	
  2287  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2288  003F  0020               	movlb	0
  2289  0040  3182  2A90         	ljmp	_main	;jump to C main() function
  2290                           
  2291                           	psect	bssCOMMON
  2292  0076                     __pbssCOMMON:	
  2293  0076                     _m_LED:	
  2294  0076                     	ds	2
  2295  0078                     _eusartRxCount:	
  2296  0078                     	ds	1
  2297  0079                     _timer0ReloadVal:	
  2298  0079                     	ds	1
  2299                           
  2300                           	psect	bssBANK0
  2301  004B                     __pbssBANK0:	
  2302  004B                     _eusartTxBuffer:	
  2303  004B                     	ds	8
  2304  0053                     _m_button:	
  2305  0053                     	ds	7
  2306  005A                     _speed:	
  2307  005A                     	ds	4
  2308  005E                     TMR0_ISR@CountCallBack:	
  2309  005E                     	ds	2
  2310  0060                     _TMR0_InterruptHandler:	
  2311  0060                     	ds	2
  2312  0062                     _eusartRxHead:	
  2313  0062                     	ds	1
  2314  0063                     _eusartRxTail:	
  2315  0063                     	ds	1
  2316  0064                     _eusartTxBufferRemaining:	
  2317  0064                     	ds	1
  2318  0065                     _eusartTxHead:	
  2319  0065                     	ds	1
  2320  0066                     _eusartTxTail:	
  2321  0066                     	ds	1
  2322  0067                     _m_crc:	
  2323  0067                     	ds	2
  2324                           
  2325                           	psect	bssBANK1
  2326  00A0                     __pbssBANK1:	
  2327  00A0                     _eusartRxBuffer:	
  2328  00A0                     	ds	8
  2329  00A8                     _m_conf:	
  2330  00A8                     	ds	47
  2331                           
  2332                           	psect	clrtext
  2333  0E21                     clear_ram0:	
  2334                           ;	Called with FSR0 containing the base address, and
  2335                           ;	WREG with the size to clear
  2336                           
  2337  0E21  0064               	clrwdt	;clear the watchdog before getting into this loop
  2338  0E22                     clrloop0:	
  2339  0E22  0180               	clrf	0	;clear RAM location pointed to by FSR
  2340  0E23  3101               	addfsr 0,1
  2341  0E24  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2342  0E25  2E22               	goto	clrloop0	;have we reached the end yet?
  2343  0E26  3400               	retlw	0	;all done for this memory range, return
  2344                           
  2345                           	psect	cstackBANK1
  2346  00D7                     __pcstackBANK1:	
  2347  00D7                     main@up:	
  2348                           
  2349                           ; 1 bytes @ 0x0
  2350  00D7                     	ds	1
  2351  00D8                     main@tmp:	
  2352                           
  2353                           ; 1 bytes @ 0x1
  2354  00D8                     	ds	1
  2355  00D9                     main@tmp_601:	
  2356                           
  2357                           ; 1 bytes @ 0x2
  2358  00D9                     	ds	1
  2359  00DA                     main@tmp_602:	
  2360                           
  2361                           ; 1 bytes @ 0x3
  2362  00DA                     	ds	1
  2363  00DB                     main@tmp_607:	
  2364                           
  2365                           ; 1 bytes @ 0x4
  2366  00DB                     	ds	1
  2367  00DC                     main@tmp_609:	
  2368                           
  2369                           ; 1 bytes @ 0x5
  2370  00DC                     	ds	1
  2371  00DD                     main@tmp_610:	
  2372                           
  2373                           ; 1 bytes @ 0x6
  2374  00DD                     	ds	1
  2375  00DE                     main@motor_load:	
  2376                           
  2377                           ; 2 bytes @ 0x7
  2378  00DE                     	ds	2
  2379                           
  2380                           	psect	cstackCOMMON
  2381  0070                     __pcstackCOMMON:	
  2382  0070                     ?_PIN_MANAGER_Initialize:	
  2383  0070                     ?_OSCILLATOR_Initialize:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ?_EPWM1_Initialize:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ?_TMR2_Initialize:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_TMR0_Initialize:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_EUSART_Initialize:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_TMR0_ISR:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_EUSART_Transmit_ISR:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ??_EUSART_Transmit_ISR:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_EUSART_Receive_ISR:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ??_EUSART_Receive_ISR:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_TMR0_DefaultInterruptHandler:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ??_TMR0_DefaultInterruptHandler:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_TMR0_CallBack:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_TMR2_StartTimer:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_DATAEE_ReadByte:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_LED_set_state:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_my10msTimerISR:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ?_GPS_Initialize:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_GPS_read_speed:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ?_LED_update_loop:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ??_LED_update_loop:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?_button_update_loop:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?_SYSTEM_Initialize:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?_INTERRUPT_InterruptManager:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?_EUSART_Read:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_EUSART_Write:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?_putch:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?_load_calibration_from_EEPROM:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?_write_calibration_to_EEPROM:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?_perform_calibration:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?_main:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?_get_button_state:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ??_get_button_state:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     get_button_state@state:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485                           
  2486                           ; 1 bytes @ 0x0
  2487  0070                     	ds	1
  2488  0071                     ??_button_update_loop:	
  2489                           
  2490                           ; 1 bytes @ 0x1
  2491  0071                     	ds	1
  2492  0072                     button_update_loop@current_state:	
  2493                           
  2494                           ; 1 bytes @ 0x2
  2495  0072                     	ds	1
  2496  0073                     ??_TMR0_ISR:	
  2497  0073                     ??_TMR0_CallBack:	
  2498                           ; 1 bytes @ 0x3
  2499                           
  2500  0073                     ??_my10msTimerISR:	
  2501                           ; 1 bytes @ 0x3
  2502                           
  2503  0073                     ??_INTERRUPT_InterruptManager:	
  2504                           ; 1 bytes @ 0x3
  2505                           
  2506                           
  2507                           ; 1 bytes @ 0x3
  2508  0073                     	ds	1
  2509  0074                     ??_PIN_MANAGER_Initialize:	
  2510  0074                     ??_OSCILLATOR_Initialize:	
  2511                           ; 1 bytes @ 0x4
  2512                           
  2513  0074                     ??_EPWM1_Initialize:	
  2514                           ; 1 bytes @ 0x4
  2515                           
  2516  0074                     ??_TMR2_Initialize:	
  2517                           ; 1 bytes @ 0x4
  2518                           
  2519  0074                     ??_EUSART_Initialize:	
  2520                           ; 1 bytes @ 0x4
  2521                           
  2522  0074                     ?_TMR0_SetInterruptHandler:	
  2523                           ; 1 bytes @ 0x4
  2524                           
  2525  0074                     ??_TMR2_StartTimer:	
  2526                           ; 1 bytes @ 0x4
  2527                           
  2528  0074                     ??_DATAEE_ReadByte:	
  2529                           ; 1 bytes @ 0x4
  2530                           
  2531  0074                     ?_DATAEE_WriteByte:	
  2532                           ; 1 bytes @ 0x4
  2533                           
  2534  0074                     ??_LED_set_state:	
  2535                           ; 1 bytes @ 0x4
  2536                           
  2537  0074                     ??_EUSART_Read:	
  2538                           ; 1 bytes @ 0x4
  2539                           
  2540  0074                     ??_EUSART_Write:	
  2541                           ; 1 bytes @ 0x4
  2542                           
  2543  0074                     ?_EPWM1_LoadDutyValue:	
  2544                           ; 1 bytes @ 0x4
  2545                           
  2546  0074                     ??_perform_calibration:	
  2547                           ; 1 bytes @ 0x4
  2548                           
  2549  0074                     ??___wmul:	
  2550                           ; 1 bytes @ 0x4
  2551                           
  2552  0074                     ??___lmul:	
  2553                           ; 1 bytes @ 0x4
  2554                           
  2555  0074                     DATAEE_WriteByte@bData:	
  2556                           ; 1 bytes @ 0x4
  2557                           
  2558  0074                     DATAEE_ReadByte@bAdd:	
  2559                           ; 1 bytes @ 0x4
  2560                           
  2561  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  2562                           ; 1 bytes @ 0x4
  2563                           
  2564  0074                     EPWM1_LoadDutyValue@dutyValue:	
  2565                           ; 2 bytes @ 0x4
  2566                           
  2567  0074                     ___wmul@product:	
  2568                           ; 2 bytes @ 0x4
  2569                           
  2570                           
  2571                           ; 2 bytes @ 0x4
  2572  0074                     	ds	1
  2573  0075                     ??_DATAEE_WriteByte:	
  2574  0075                     ??_load_calibration_from_EEPROM:	
  2575                           ; 1 bytes @ 0x5
  2576                           
  2577  0075                     ??_write_calibration_to_EEPROM:	
  2578                           ; 1 bytes @ 0x5
  2579                           
  2580  0075                     EUSART_Read@readValue:	
  2581                           ; 1 bytes @ 0x5
  2582                           
  2583  0075                     EUSART_Write@txData:	
  2584                           ; 1 bytes @ 0x5
  2585                           
  2586  0075                     LED_set_state@new_state:	
  2587                           ; 1 bytes @ 0x5
  2588                           
  2589                           
  2590                           ; 1 bytes @ 0x5
  2591  0075                     	ds	1
  2592  0076                     ??_TMR0_SetInterruptHandler:	
  2593  0076                     ??_SYSTEM_Initialize:	
  2594                           ; 1 bytes @ 0x6
  2595                           
  2596  0076                     ??_putch:	
  2597                           ; 1 bytes @ 0x6
  2598                           
  2599                           
  2600                           	psect	cstackBANK0
  2601  0020                     __pcstackBANK0:	
  2602                           ; 1 bytes @ 0x6
  2603                           
  2604  0020                     ??_TMR0_Initialize:	
  2605  0020                     ??_EPWM1_LoadDutyValue:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0020                     ?_crc_update:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0020                     ?___wmul:	
  2612                           ; 2 bytes @ 0x0
  2613                           
  2614  0020                     ?_convert_to_fp:	
  2615                           ; 2 bytes @ 0x0
  2616                           
  2617  0020                     ?___lmul:	
  2618                           ; 4 bytes @ 0x0
  2619                           
  2620  0020                     putch@txData:	
  2621                           ; 4 bytes @ 0x0
  2622                           
  2623  0020                     DATAEE_WriteByte@bAdd:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0020                     convert_to_fp@int_part:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0020                     crc_update@old_crc:	
  2630                           ; 2 bytes @ 0x0
  2631                           
  2632  0020                     ___wmul@multiplier:	
  2633                           ; 2 bytes @ 0x0
  2634                           
  2635  0020                     ___lmul@multiplier:	
  2636                           ; 2 bytes @ 0x0
  2637                           
  2638                           
  2639                           ; 4 bytes @ 0x0
  2640  0020                     	ds	1
  2641  0021                     ?_printf:	
  2642  0021                     DATAEE_WriteByte@GIEBitValue:	
  2643                           ; 2 bytes @ 0x1
  2644                           
  2645  0021                     printf@f:	
  2646                           ; 1 bytes @ 0x1
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x1
  2650  0021                     	ds	1
  2651  0022                     crc_update@data:	
  2652  0022                     convert_to_fp@fract_part:	
  2653                           ; 1 bytes @ 0x2
  2654                           
  2655  0022                     ___wmul@multiplicand:	
  2656                           ; 2 bytes @ 0x2
  2657                           
  2658                           
  2659                           ; 2 bytes @ 0x2
  2660  0022                     	ds	1
  2661  0023                     ??_crc_update:	
  2662  0023                     ??_printf:	
  2663                           ; 1 bytes @ 0x3
  2664                           
  2665                           
  2666                           ; 1 bytes @ 0x3
  2667  0023                     	ds	1
  2668  0024                     ??_convert_to_fp:	
  2669  0024                     ___lmul@multiplicand:	
  2670                           ; 1 bytes @ 0x4
  2671                           
  2672                           
  2673                           ; 4 bytes @ 0x4
  2674  0024                     	ds	2
  2675  0026                     printf@ap:	
  2676                           
  2677                           ; 1 bytes @ 0x6
  2678  0026                     	ds	1
  2679  0027                     printf@c:	
  2680                           
  2681                           ; 1 bytes @ 0x7
  2682  0027                     	ds	1
  2683  0028                     ??_GPS_Initialize:	
  2684  0028                     ___lmul@product:	
  2685                           ; 1 bytes @ 0x8
  2686                           
  2687                           
  2688                           ; 4 bytes @ 0x8
  2689  0028                     	ds	3
  2690  002B                     GPS_Initialize@tmp:	
  2691                           
  2692                           ; 1 bytes @ 0xB
  2693  002B                     	ds	1
  2694  002C                     ?_multiply_fp:	
  2695  002C                     convert_to_fp@res_fract:	
  2696                           ; 4 bytes @ 0xC
  2697                           
  2698  002C                     multiply_fp@n1:	
  2699                           ; 2 bytes @ 0xC
  2700                           
  2701                           
  2702                           ; 4 bytes @ 0xC
  2703  002C                     	ds	1
  2704  002D                     crc_update@crc:	
  2705                           
  2706                           ; 2 bytes @ 0xD
  2707  002D                     	ds	1
  2708  002E                     convert_to_fp@i_bit:	
  2709                           
  2710                           ; 1 bytes @ 0xE
  2711  002E                     	ds	1
  2712  002F                     convert_to_fp@tmp_left:	
  2713  002F                     crc_update@x:	
  2714                           ; 2 bytes @ 0xF
  2715                           
  2716                           
  2717                           ; 2 bytes @ 0xF
  2718  002F                     	ds	1
  2719  0030                     multiply_fp@n2:	
  2720                           
  2721                           ; 4 bytes @ 0x10
  2722  0030                     	ds	1
  2723  0031                     write_calibration_to_EEPROM@addr:	
  2724  0031                     load_calibration_from_EEPROM@crc:	
  2725                           ; 1 bytes @ 0x11
  2726                           
  2727  0031                     convert_to_fp@res:	
  2728                           ; 2 bytes @ 0x11
  2729                           
  2730                           
  2731                           ; 4 bytes @ 0x11
  2732  0031                     	ds	1
  2733  0032                     write_calibration_to_EEPROM@p:	
  2734                           
  2735                           ; 1 bytes @ 0x12
  2736  0032                     	ds	1
  2737  0033                     load_calibration_from_EEPROM@addr:	
  2738  0033                     write_calibration_to_EEPROM@i:	
  2739                           ; 1 bytes @ 0x13
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x13
  2743  0033                     	ds	1
  2744  0034                     ??_multiply_fp:	
  2745  0034                     load_calibration_from_EEPROM@p:	
  2746                           ; 1 bytes @ 0x14
  2747                           
  2748                           
  2749                           ; 1 bytes @ 0x14
  2750  0034                     	ds	1
  2751  0035                     ??_GPS_read_speed:	
  2752  0035                     load_calibration_from_EEPROM@i:	
  2753                           ; 1 bytes @ 0x15
  2754                           
  2755                           
  2756                           ; 1 bytes @ 0x15
  2757  0035                     	ds	2
  2758  0037                     GPS_read_speed@before_dot:	
  2759                           
  2760                           ; 1 bytes @ 0x17
  2761  0037                     	ds	1
  2762  0038                     GPS_read_speed@no_more_checksum:	
  2763                           
  2764                           ; 1 bytes @ 0x18
  2765  0038                     	ds	1
  2766  0039                     GPS_read_speed@read_speed_int:	
  2767                           
  2768                           ; 2 bytes @ 0x19
  2769  0039                     	ds	2
  2770  003B                     GPS_read_speed@read_speed_fra:	
  2771                           
  2772                           ; 2 bytes @ 0x1B
  2773  003B                     	ds	2
  2774  003D                     GPS_read_speed@checksum2:	
  2775                           
  2776                           ; 1 bytes @ 0x1D
  2777  003D                     	ds	1
  2778  003E                     GPS_read_speed@checksum:	
  2779                           
  2780                           ; 1 bytes @ 0x1E
  2781  003E                     	ds	1
  2782  003F                     GPS_read_speed@buffer:	
  2783                           
  2784                           ; 6 bytes @ 0x1F
  2785  003F                     	ds	3
  2786  0042                     multiply_fp@res:	
  2787                           
  2788                           ; 4 bytes @ 0x22
  2789  0042                     	ds	3
  2790  0045                     GPS_read_speed@i_buff2:	
  2791                           
  2792                           ; 1 bytes @ 0x25
  2793  0045                     	ds	1
  2794  0046                     GPS_read_speed@i_buff:	
  2795                           
  2796                           ; 1 bytes @ 0x26
  2797  0046                     	ds	1
  2798  0047                     GPS_read_speed@m_char:	
  2799                           
  2800                           ; 1 bytes @ 0x27
  2801  0047                     	ds	1
  2802  0048                     ??_main:	
  2803                           
  2804                           ; 1 bytes @ 0x28
  2805  0048                     	ds	3
  2806                           
  2807                           	psect	maintext
  2808  0290                     __pmaintext:	
  2809 ;;
  2810 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2811 ;;
  2812 ;; *************** function _main *****************
  2813 ;; Defined at:
  2814 ;;		line 141 in file "main.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  tmp             1    6[BANK1 ] unsigned char 
  2819 ;;  tmp             1    3[BANK1 ] unsigned char 
  2820 ;;  tmp             1    2[BANK1 ] unsigned char 
  2821 ;;  tmp             1    5[BANK1 ] unsigned char 
  2822 ;;  tmp             1    4[BANK1 ] unsigned char 
  2823 ;;  tmp             1    1[BANK1 ] unsigned char 
  2824 ;;  motor_load      2    7[BANK1 ] unsigned int 
  2825 ;;  up              1    0[BANK1 ] unsigned char 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : B1F/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2835 ;;      Params:         0       0       0       0       0       0
  2836 ;;      Locals:         0       0       9       0       0       0
  2837 ;;      Temps:          0       3       0       0       0       0
  2838 ;;      Totals:         0       3       9       0       0       0
  2839 ;;Total ram usage:       12 bytes
  2840 ;; Hardware stack levels required when called:   10
  2841 ;; This function calls:
  2842 ;;		_EPWM1_LoadDutyValue
  2843 ;;		_GPS_Initialize
  2844 ;;		_GPS_read_speed
  2845 ;;		_LED_set_state
  2846 ;;		_SYSTEM_Initialize
  2847 ;;		_TMR0_SetInterruptHandler
  2848 ;;		_TMR2_StartTimer
  2849 ;;		_load_calibration_from_EEPROM
  2850 ;;		_multiply_fp
  2851 ;;		_perform_calibration
  2852 ;;		_write_calibration_to_EEPROM
  2853 ;; This function is called by:
  2854 ;;		Startup code after reset
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           
  2859                           ;psect for function _main
  2860  0290                     _main:	
  2861                           
  2862                           ;main.c: 144: SYSTEM_Initialize();
  2863                           
  2864                           ;incstack = 0
  2865                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2866  0290  318E  265F  3182   	fcall	_SYSTEM_Initialize
  2867                           
  2868                           ;main.c: 146: LED_set_state(manual_mode);
  2869  0293  3004               	movlw	4
  2870  0294  318F  275A  3182   	fcall	_LED_set_state
  2871                           
  2872                           ;main.c: 147: do { LATA2 = 1; } while(0);
  2873  0297  0022               	movlb	2	; select bank2
  2874  0298  150C               	bsf	12,2	;volatile
  2875                           
  2876                           ;main.c: 150: TMR0_SetInterruptHandler(my10msTimerISR);
  2877  0299  3009               	movlw	low _my10msTimerISR
  2878  029A  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2879  029B  300E               	movlw	high _my10msTimerISR
  2880  029C  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2881  029D  318E  2615  3182   	fcall	_TMR0_SetInterruptHandler
  2882                           
  2883                           ;main.c: 152: (INTCONbits.GIE = 1);
  2884  02A0  178B               	bsf	11,7	;volatile
  2885                           
  2886                           ;main.c: 154: (INTCONbits.PEIE = 1);
  2887  02A1  170B               	bsf	11,6	;volatile
  2888                           
  2889                           ;main.c: 156: for(unsigned char tmp=0;tmp<(10*3);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2890  02A2  0021               	movlb	1	; select bank1
  2891  02A3  01D8               	clrf	main@tmp^(0+128)
  2892  02A4  301E               	movlw	30
  2893  02A5  0258               	subwf	main@tmp^(0+128),w
  2894  02A6  1803               	btfsc	3,0
  2895  02A7  2ABF               	goto	l3976
  2896  02A8                     l3970:	
  2897  02A8  3005               	movlw	5
  2898  02A9  0020               	movlb	0	; select bank0
  2899  02AA  00CA               	movwf	??_main+2
  2900  02AB  300F               	movlw	15
  2901  02AC  00C9               	movwf	??_main+1
  2902  02AD  30F4               	movlw	244
  2903  02AE  00C8               	movwf	??_main
  2904  02AF                     u4787:	
  2905  02AF  0BC8               	decfsz	??_main,f
  2906  02B0  2AAF               	goto	u4787
  2907  02B1  0BC9               	decfsz	??_main+1,f
  2908  02B2  2AAF               	goto	u4787
  2909  02B3  0BCA               	decfsz	??_main+2,f
  2910  02B4  2AAF               	goto	u4787
  2911  02B5  3001               	movlw	1
  2912  02B6  0020               	movlb	0	; select bank0
  2913  02B7  00C8               	movwf	??_main
  2914  02B8  0848               	movf	??_main,w
  2915  02B9  0021               	movlb	1	; select bank1
  2916  02BA  07D8               	addwf	main@tmp^(0+128),f
  2917  02BB  301E               	movlw	30
  2918  02BC  0258               	subwf	main@tmp^(0+128),w
  2919  02BD  1C03               	skipc
  2920  02BE  2AA8               	goto	l3970
  2921  02BF                     l3976:	
  2922                           
  2923                           ;main.c: 159: if (load_calibration_from_EEPROM())
  2924  02BF  3185  25B6  3182   	fcall	_load_calibration_from_EEPROM
  2925  02C2  3A00               	xorlw	0
  2926  02C3  1903               	skipnz
  2927  02C4  2AE3               	goto	l3992
  2928                           
  2929                           ;main.c: 160: {
  2930                           ;main.c: 161: LED_set_state(slow_blinking);
  2931  02C5  3002               	movlw	2
  2932  02C6  318F  275A  3182   	fcall	_LED_set_state
  2933                           
  2934                           ;main.c: 162: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2935  02C9  0021               	movlb	1	; select bank1
  2936  02CA  01D9               	clrf	main@tmp_601^(0+128)
  2937  02CB                     L1:	
  2938  02CB  3032               	movlw	50
  2939  02CC  0259               	subwf	main@tmp_601^(0+128),w
  2940  02CD  1803               	btfsc	3,0
  2941  02CE  2B0A               	goto	l4010
  2942  02CF  3005               	movlw	5
  2943  02D0  0020               	movlb	0	; select bank0
  2944  02D1  00CA               	movwf	??_main+2
  2945  02D2  300F               	movlw	15
  2946  02D3  00C9               	movwf	??_main+1
  2947  02D4  30F4               	movlw	244
  2948  02D5  00C8               	movwf	??_main
  2949  02D6                     u4797:	
  2950  02D6  0BC8               	decfsz	??_main,f
  2951  02D7  2AD6               	goto	u4797
  2952  02D8  0BC9               	decfsz	??_main+1,f
  2953  02D9  2AD6               	goto	u4797
  2954  02DA  0BCA               	decfsz	??_main+2,f
  2955  02DB  2AD6               	goto	u4797
  2956  02DC  3001               	movlw	1
  2957  02DD  0020               	movlb	0	; select bank0
  2958  02DE  00C8               	movwf	??_main
  2959  02DF  0848               	movf	??_main,w
  2960  02E0  0021               	movlb	1	; select bank1
  2961  02E1  07D9               	addwf	main@tmp_601^(0+128),f
  2962  02E2  2ACB               	goto	L1
  2963  02E3                     l3992:	
  2964                           ;main.c: 163: }
  2965                           
  2966                           
  2967                           ;main.c: 164: else
  2968                           ;main.c: 165: {
  2969                           ;main.c: 166: LED_set_state(fast_blinking);
  2970  02E3  3003               	movlw	3
  2971  02E4  318F  275A  3182   	fcall	_LED_set_state
  2972                           
  2973                           ;main.c: 167: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2974  02E7  0021               	movlb	1	; select bank1
  2975  02E8  01DA               	clrf	main@tmp_602^(0+128)
  2976  02E9  3032               	movlw	50
  2977  02EA  025A               	subwf	main@tmp_602^(0+128),w
  2978  02EB  1803               	btfsc	3,0
  2979  02EC  2B04               	goto	l4006
  2980  02ED                     l4000:	
  2981  02ED  3005               	movlw	5
  2982  02EE  0020               	movlb	0	; select bank0
  2983  02EF  00CA               	movwf	??_main+2
  2984  02F0  300F               	movlw	15
  2985  02F1  00C9               	movwf	??_main+1
  2986  02F2  30F4               	movlw	244
  2987  02F3  00C8               	movwf	??_main
  2988  02F4                     u4807:	
  2989  02F4  0BC8               	decfsz	??_main,f
  2990  02F5  2AF4               	goto	u4807
  2991  02F6  0BC9               	decfsz	??_main+1,f
  2992  02F7  2AF4               	goto	u4807
  2993  02F8  0BCA               	decfsz	??_main+2,f
  2994  02F9  2AF4               	goto	u4807
  2995  02FA  3001               	movlw	1
  2996  02FB  0020               	movlb	0	; select bank0
  2997  02FC  00C8               	movwf	??_main
  2998  02FD  0848               	movf	??_main,w
  2999  02FE  0021               	movlb	1	; select bank1
  3000  02FF  07DA               	addwf	main@tmp_602^(0+128),f
  3001  0300  3032               	movlw	50
  3002  0301  025A               	subwf	main@tmp_602^(0+128),w
  3003  0302  1C03               	skipc
  3004  0303  2AED               	goto	l4000
  3005  0304                     l4006:	
  3006                           
  3007                           ;main.c: 168: perform_calibration();
  3008  0304  318E  261B  3182   	fcall	_perform_calibration
  3009                           
  3010                           ;main.c: 169: write_calibration_to_EEPROM();
  3011  0307  3186  2621  3182   	fcall	_write_calibration_to_EEPROM
  3012  030A                     l4010:	
  3013                           
  3014                           ;main.c: 170: }
  3015                           ;main.c: 171: LED_set_state(always_off);
  3016  030A  3001               	movlw	1
  3017  030B  318F  275A  3182   	fcall	_LED_set_state
  3018  030E                     l323:	
  3019                           ;main.c: 172: while(1)
  3020                           
  3021                           
  3022                           ;main.c: 173: {}
  3023  030E  2B0E               	goto	l323
  3024  030F                     l4022:	
  3025                           ;main.c: 178: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  3026                           
  3027                           ;main.c: 177: TMR2_StartTimer();
  3028                           
  3029                           ;main.c: 176: EPWM1_LoadDutyValue(1023-motor_load);
  3030                           
  3031                           ;main.c: 175: uint16_t motor_load = 0;
  3032                           
  3033  030F  3005               	movlw	5
  3034  0310  0020               	movlb	0	; select bank0
  3035  0311  00CA               	movwf	??_main+2
  3036  0312  300F               	movlw	15
  3037  0313  00C9               	movwf	??_main+1
  3038  0314  30F4               	movlw	244
  3039  0315  00C8               	movwf	??_main
  3040  0316                     u4817:	
  3041  0316  0BC8               	decfsz	??_main,f
  3042  0317  2B16               	goto	u4817
  3043  0318  0BC9               	decfsz	??_main+1,f
  3044  0319  2B16               	goto	u4817
  3045  031A  0BCA               	decfsz	??_main+2,f
  3046  031B  2B16               	goto	u4817
  3047  031C  3001               	movlw	1
  3048  031D  0020               	movlb	0	; select bank0
  3049  031E  00C8               	movwf	??_main
  3050  031F  0848               	movf	??_main,w
  3051  0320  0021               	movlb	1	; select bank1
  3052  0321  07DB               	addwf	main@tmp_607^(0+128),f
  3053  0322  3032               	movlw	50
  3054  0323  025B               	subwf	main@tmp_607^(0+128),w
  3055  0324  1C03               	skipc
  3056  0325  2B0F               	goto	l4022
  3057                           
  3058                           ;main.c: 180: bool up = 1;
  3059  0326  01D7               	clrf	main@up^(0+128)
  3060  0327  0AD7               	incf	main@up^(0+128),f
  3061                           
  3062                           ;main.c: 200: EPWM1_LoadDutyValue(0);
  3063  0328  3000               	movlw	0
  3064  0329  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3065  032A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3066  032B  318E  26E8  3182   	fcall	_EPWM1_LoadDutyValue
  3067                           
  3068                           ;main.c: 201: _delay((unsigned long)((10)*(32000000/4000.0)));
  3069  032E  3068               	movlw	104
  3070  032F  0020               	movlb	0	; select bank0
  3071  0330  00C9               	movwf	??_main+1
  3072  0331  30E4               	movlw	228
  3073  0332  00C8               	movwf	??_main
  3074  0333                     u4827:	
  3075  0333  0BC8               	decfsz	??_main,f
  3076  0334  2B33               	goto	u4827
  3077  0335  0BC9               	decfsz	??_main+1,f
  3078  0336  2B33               	goto	u4827
  3079  0337  0000               	nop
  3080                           
  3081                           ;main.c: 202: EPWM1_LoadDutyValue(1023-148);
  3082  0338  306B               	movlw	107
  3083  0339  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3084  033A  3003               	movlw	3
  3085  033B  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3086  033C  318E  26E8  3182   	fcall	_EPWM1_LoadDutyValue
  3087                           
  3088                           ;main.c: 203: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  3089  033F  0021               	movlb	1	; select bank1
  3090  0340  01DC               	clrf	main@tmp_609^(0+128)
  3091  0341  3032               	movlw	50
  3092  0342  025C               	subwf	main@tmp_609^(0+128),w
  3093  0343  1803               	btfsc	3,0
  3094  0344  2B5C               	goto	l4046
  3095  0345                     l4040:	
  3096  0345  3005               	movlw	5
  3097  0346  0020               	movlb	0	; select bank0
  3098  0347  00CA               	movwf	??_main+2
  3099  0348  300F               	movlw	15
  3100  0349  00C9               	movwf	??_main+1
  3101  034A  30F4               	movlw	244
  3102  034B  00C8               	movwf	??_main
  3103  034C                     u4837:	
  3104  034C  0BC8               	decfsz	??_main,f
  3105  034D  2B4C               	goto	u4837
  3106  034E  0BC9               	decfsz	??_main+1,f
  3107  034F  2B4C               	goto	u4837
  3108  0350  0BCA               	decfsz	??_main+2,f
  3109  0351  2B4C               	goto	u4837
  3110  0352  3001               	movlw	1
  3111  0353  0020               	movlb	0	; select bank0
  3112  0354  00C8               	movwf	??_main
  3113  0355  0848               	movf	??_main,w
  3114  0356  0021               	movlb	1	; select bank1
  3115  0357  07DC               	addwf	main@tmp_609^(0+128),f
  3116  0358  3032               	movlw	50
  3117  0359  025C               	subwf	main@tmp_609^(0+128),w
  3118  035A  1C03               	skipc
  3119  035B  2B45               	goto	l4040
  3120  035C                     l4046:	
  3121                           ;main.c: 204: while (1)
  3122                           
  3123                           
  3124                           ;main.c: 205: {
  3125                           ;main.c: 206: if (up == 1)
  3126  035C  0021               	movlb	1	; select bank1
  3127  035D  0357               	decf	main@up^(0+128),w
  3128  035E  1D03               	btfss	3,2
  3129  035F  2B65               	goto	l4050
  3130                           
  3131                           ;main.c: 207: motor_load += 1;
  3132  0360  3001               	movlw	1
  3133  0361  07DE               	addwf	main@motor_load^(0+128),f
  3134  0362  3000               	movlw	0
  3135  0363  3DDF               	addwfc	(main@motor_load+1)^(0+128),f
  3136  0364  2B69               	goto	l332
  3137  0365                     l4050:	
  3138                           
  3139                           ;main.c: 208: else
  3140                           ;main.c: 209: motor_load -= 1;
  3141  0365  3001               	movlw	1
  3142  0366  02DE               	subwf	main@motor_load^(0+128),f
  3143  0367  3000               	movlw	0
  3144  0368  3BDF               	subwfb	(main@motor_load+1)^(0+128),f
  3145  0369                     l332:	
  3146                           
  3147                           ;main.c: 210: if (motor_load > 300)
  3148  0369  3001               	movlw	1
  3149  036A  025F               	subwf	(main@motor_load+1)^(0+128),w
  3150  036B  302D               	movlw	45
  3151  036C  1903               	skipnz
  3152  036D  025E               	subwf	main@motor_load^(0+128),w
  3153  036E  1C03               	skipc
  3154  036F  2B72               	goto	l4054
  3155                           
  3156                           ;main.c: 211: up = 0;
  3157  0370  01D7               	clrf	main@up^(0+128)
  3158  0371  2BAC               	goto	l4076
  3159  0372                     l4054:	
  3160                           
  3161                           ;main.c: 212: else if (motor_load == 0)
  3162  0372  085E               	movf	main@motor_load^(0+128),w
  3163  0373  045F               	iorwf	(main@motor_load+1)^(0+128),w
  3164  0374  1D03               	btfss	3,2
  3165  0375  2BAC               	goto	l4076
  3166                           
  3167                           ;main.c: 213: {
  3168                           ;main.c: 214: up = 1;
  3169  0376  01D7               	clrf	main@up^(0+128)
  3170  0377  0AD7               	incf	main@up^(0+128),f
  3171                           
  3172                           ;main.c: 215: EPWM1_LoadDutyValue(1023);
  3173  0378  30FF               	movlw	255
  3174  0379  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3175  037A  3003               	movlw	3
  3176  037B  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3177  037C  318E  26E8  3182   	fcall	_EPWM1_LoadDutyValue
  3178                           
  3179                           ;main.c: 216: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  3180  037F  0021               	movlb	1	; select bank1
  3181  0380  01DD               	clrf	main@tmp_610^(0+128)
  3182  0381  3032               	movlw	50
  3183  0382  025D               	subwf	main@tmp_610^(0+128),w
  3184  0383  1803               	btfsc	3,0
  3185  0384  2B9C               	goto	l4072
  3186  0385                     l4066:	
  3187  0385  3005               	movlw	5
  3188  0386  0020               	movlb	0	; select bank0
  3189  0387  00CA               	movwf	??_main+2
  3190  0388  300F               	movlw	15
  3191  0389  00C9               	movwf	??_main+1
  3192  038A  30F4               	movlw	244
  3193  038B  00C8               	movwf	??_main
  3194  038C                     u4847:	
  3195  038C  0BC8               	decfsz	??_main,f
  3196  038D  2B8C               	goto	u4847
  3197  038E  0BC9               	decfsz	??_main+1,f
  3198  038F  2B8C               	goto	u4847
  3199  0390  0BCA               	decfsz	??_main+2,f
  3200  0391  2B8C               	goto	u4847
  3201  0392  3001               	movlw	1
  3202  0393  0020               	movlb	0	; select bank0
  3203  0394  00C8               	movwf	??_main
  3204  0395  0848               	movf	??_main,w
  3205  0396  0021               	movlb	1	; select bank1
  3206  0397  07DD               	addwf	main@tmp_610^(0+128),f
  3207  0398  3032               	movlw	50
  3208  0399  025D               	subwf	main@tmp_610^(0+128),w
  3209  039A  1C03               	skipc
  3210  039B  2B85               	goto	l4066
  3211  039C                     l4072:	
  3212                           
  3213                           ;main.c: 218: EPWM1_LoadDutyValue(0);
  3214  039C  3000               	movlw	0
  3215  039D  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3216  039E  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3217  039F  318E  26E8  3182   	fcall	_EPWM1_LoadDutyValue
  3218                           
  3219                           ;main.c: 219: _delay((unsigned long)((10)*(32000000/4000.0)));
  3220  03A2  3068               	movlw	104
  3221  03A3  0020               	movlb	0	; select bank0
  3222  03A4  00C9               	movwf	??_main+1
  3223  03A5  30E4               	movlw	228
  3224  03A6  00C8               	movwf	??_main
  3225  03A7                     u4857:	
  3226  03A7  0BC8               	decfsz	??_main,f
  3227  03A8  2BA7               	goto	u4857
  3228  03A9  0BC9               	decfsz	??_main+1,f
  3229  03AA  2BA7               	goto	u4857
  3230  03AB  0000               	nop
  3231  03AC                     l4076:	
  3232                           
  3233                           ;main.c: 220: }
  3234                           ;main.c: 221: if (motor_load < 148)
  3235  03AC  3000               	movlw	0
  3236  03AD  0021               	movlb	1	; select bank1
  3237  03AE  025F               	subwf	(main@motor_load+1)^(0+128),w
  3238  03AF  3094               	movlw	148
  3239  03B0  1903               	skipnz
  3240  03B1  025E               	subwf	main@motor_load^(0+128),w
  3241  03B2  1803               	skipnc
  3242  03B3  2BB8               	goto	l4080
  3243                           
  3244                           ;main.c: 222: EPWM1_LoadDutyValue(1023-135);
  3245  03B4  3078               	movlw	120
  3246  03B5  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3247  03B6  3003               	movlw	3
  3248  03B7  2BC8               	goto	L2
  3249  03B8                     l4080:	
  3250                           
  3251                           ;main.c: 223: else
  3252                           ;main.c: 224: EPWM1_LoadDutyValue(1023-motor_load);
  3253  03B8  0021               	movlb	1	; select bank1
  3254  03B9  095E               	comf	main@motor_load^(0+128),w
  3255  03BA  0020               	movlb	0	; select bank0
  3256  03BB  00C8               	movwf	??_main
  3257  03BC  0021               	movlb	1	; select bank1
  3258  03BD  095F               	comf	(main@motor_load+1)^(0+128),w
  3259  03BE  0020               	movlb	0	; select bank0
  3260  03BF  00C9               	movwf	??_main+1
  3261  03C0  0AC8               	incf	??_main,f
  3262  03C1  1903               	skipnz
  3263  03C2  0AC9               	incf	??_main+1,f
  3264  03C3  0848               	movf	??_main,w
  3265  03C4  3EFF               	addlw	255
  3266  03C5  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3267  03C6  3003               	movlw	3
  3268  03C7  3D49               	addwfc	??_main+1,w
  3269  03C8                     L2:	
  3270  03C8  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3271  03C9  318E  26E8  3182   	fcall	_EPWM1_LoadDutyValue
  3272                           
  3273                           ;main.c: 225: _delay((unsigned long)((50)*(32000000/4000.0)));
  3274  03CC  3003               	movlw	3
  3275  03CD  0020               	movlb	0	; select bank0
  3276  03CE  00CA               	movwf	??_main+2
  3277  03CF  3008               	movlw	8
  3278  03D0  00C9               	movwf	??_main+1
  3279  03D1  3078               	movlw	120
  3280  03D2  00C8               	movwf	??_main
  3281  03D3                     u4867:	
  3282  03D3  0BC8               	decfsz	??_main,f
  3283  03D4  2BD3               	goto	u4867
  3284  03D5  0BC9               	decfsz	??_main+1,f
  3285  03D6  2BD3               	goto	u4867
  3286  03D7  0BCA               	decfsz	??_main+2,f
  3287  03D8  2BD3               	goto	u4867
  3288  03D9  2B5C               	goto	l4046
  3289  03DA                     l4088:	
  3290                           ;main.c: 232: while (1)
  3291                           
  3292                           ;main.c: 230: speed = 0;
  3293                           
  3294                           ;main.c: 226: }
  3295                           ;main.c: 228: GPS_Initialize();
  3296                           
  3297                           
  3298                           ;main.c: 233: {
  3299                           ;main.c: 235: if (GPS_read_speed())
  3300  03DA  3180  2042  3182   	fcall	_GPS_read_speed
  3301  03DD  3A00               	xorlw	0
  3302  03DE  1903               	skipnz
  3303  03DF  2BDA               	goto	l4088
  3304                           
  3305                           ;main.c: 236: {
  3306                           ;main.c: 238: if (m_conf.use_mph > 0)
  3307  03E0  0021               	movlb	1	; select bank1
  3308  03E1  0828               	movf	_m_conf^(0+128),w
  3309  03E2  1903               	btfsc	3,2
  3310  03E3  2C05               	goto	l4094
  3311                           
  3312                           ;main.c: 239: speed = multiply_fp(speed, ratio_mph);
  3313  03E4  0020               	movlb	0	; select bank0
  3314  03E5  085D               	movf	_speed+3,w
  3315  03E6  00AF               	movwf	multiply_fp@n1+3
  3316  03E7  085C               	movf	_speed+2,w
  3317  03E8  00AE               	movwf	multiply_fp@n1+2
  3318  03E9  085B               	movf	_speed+1,w
  3319  03EA  00AD               	movwf	multiply_fp@n1+1
  3320  03EB  085A               	movf	_speed,w
  3321  03EC  00AC               	movwf	multiply_fp@n1
  3322  03ED  30E5               	movlw	low (_ratio_mph| (0+32768))
  3323  03EE  0084               	movwf	4
  3324  03EF  3086               	movlw	high (_ratio_mph| (0+32768))
  3325  03F0  0085               	movwf	5
  3326  03F1  3F00               	moviw [0]fsr0
  3327  03F2  00B0               	movwf	multiply_fp@n2
  3328  03F3  3F01               	moviw [1]fsr0
  3329  03F4  00B1               	movwf	multiply_fp@n2+1
  3330  03F5  3F02               	moviw [2]fsr0
  3331  03F6  00B2               	movwf	multiply_fp@n2+2
  3332  03F7  3F03               	moviw [3]fsr0
  3333  03F8  00B3               	movwf	multiply_fp@n2+3
  3334  03F9  3184  2414  3182   	fcall	_multiply_fp
  3335  03FC  0020               	movlb	0	; select bank0
  3336  03FD  082F               	movf	?_multiply_fp+3,w
  3337  03FE  00DD               	movwf	_speed+3
  3338  03FF  082E               	movf	?_multiply_fp+2,w
  3339  0400  00DC               	movwf	_speed+2
  3340  0401  082D               	movf	?_multiply_fp+1,w
  3341  0402  00DB               	movwf	_speed+1
  3342  0403  082C               	movf	?_multiply_fp,w
  3343  0404  00DA               	movwf	_speed
  3344  0405                     l4094:	
  3345                           ;main.c: 241: do { LATA2 = 1; } while(0);
  3346                           
  3347  0405  0022               	movlb	2	; select bank2
  3348  0406  150C               	bsf	12,2	;volatile
  3349                           
  3350                           ;main.c: 242: _delay((unsigned long)((20)*(32000000/4000.0)));
  3351  0407  30D0               	movlw	208
  3352  0408  0020               	movlb	0	; select bank0
  3353  0409  00C9               	movwf	??_main+1
  3354  040A  30C9               	movlw	201
  3355  040B  00C8               	movwf	??_main
  3356  040C                     u4877:	
  3357  040C  0BC8               	decfsz	??_main,f
  3358  040D  2C0C               	goto	u4877
  3359  040E  0BC9               	decfsz	??_main+1,f
  3360  040F  2C0C               	goto	u4877
  3361  0410  3200               	nop2
  3362                           
  3363                           ;main.c: 243: do { LATA2 = 0; } while(0);
  3364  0411  0022               	movlb	2	; select bank2
  3365  0412  110C               	bcf	12,2	;volatile
  3366  0413  2BDA               	goto	l4088
  3367  0414                     __end_of_main:	
  3368                           
  3369                           	psect	text1
  3370  0621                     __ptext1:	
  3371 ;; *************** function _write_calibration_to_EEPROM *****************
  3372 ;; Defined at:
  3373 ;;		line 109 in file "main.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  i               1   19[BANK0 ] unsigned char 
  3378 ;;  p               1   18[BANK0 ] PTR unsigned char 
  3379 ;;		 -> m_crc(2), m_conf(47), 
  3380 ;;  addr            1   17[BANK0 ] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3390 ;;      Params:         0       0       0       0       0       0
  3391 ;;      Locals:         0       3       0       0       0       0
  3392 ;;      Temps:          1       0       0       0       0       0
  3393 ;;      Totals:         1       3       0       0       0       0
  3394 ;;Total ram usage:        4 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    7
  3397 ;; This function calls:
  3398 ;;		_DATAEE_WriteByte
  3399 ;;		_crc_update
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _write_calibration_to_EEPROM
  3407  0621                     _write_calibration_to_EEPROM:	
  3408                           
  3409                           ;main.c: 112: unsigned char addr = 0x00;
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _write_calibration_to_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3413  0621  0020               	movlb	0	; select bank0
  3414  0622  01B1               	clrf	write_calibration_to_EEPROM@addr
  3415                           
  3416                           ;main.c: 113: m_crc = 0x00;
  3417  0623  01E7               	clrf	_m_crc
  3418  0624  01E8               	clrf	_m_crc+1
  3419                           
  3420                           ;main.c: 114: char i,*p;
  3421                           ;main.c: 115: p=(char *)&m_conf;
  3422  0625  30A8               	movlw	(low (_m_conf| 0))& (0+255)
  3423  0626  00F5               	movwf	??_write_calibration_to_EEPROM
  3424  0627  0875               	movf	??_write_calibration_to_EEPROM,w
  3425  0628  00B2               	movwf	write_calibration_to_EEPROM@p
  3426                           
  3427                           ;main.c: 116: for(i=0; i<sizeof(m_conf); i++) {
  3428  0629  01B3               	clrf	write_calibration_to_EEPROM@i
  3429  062A  302F               	movlw	47
  3430  062B  0233               	subwf	write_calibration_to_EEPROM@i,w
  3431  062C  1803               	btfsc	3,0
  3432  062D  2E5D               	goto	l3572
  3433  062E                     l3564:	
  3434                           
  3435                           ;main.c: 117: DATAEE_WriteByte(addr++, *p);
  3436  062E  0832               	movf	write_calibration_to_EEPROM@p,w
  3437  062F  0086               	movwf	6
  3438  0630  0187               	clrf	7
  3439  0631  0801               	movf	1,w
  3440  0632  00F5               	movwf	??_write_calibration_to_EEPROM
  3441  0633  0875               	movf	??_write_calibration_to_EEPROM,w
  3442  0634  00F4               	movwf	DATAEE_WriteByte@bData
  3443  0635  0831               	movf	write_calibration_to_EEPROM@addr,w
  3444  0636  318F  2796  3186   	fcall	_DATAEE_WriteByte
  3445  0639  3001               	movlw	1
  3446  063A  00F5               	movwf	??_write_calibration_to_EEPROM
  3447  063B  0875               	movf	??_write_calibration_to_EEPROM,w
  3448  063C  0020               	movlb	0	; select bank0
  3449  063D  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  3450                           
  3451                           ;main.c: 118: m_crc = crc_update(m_crc, *p++);
  3452  063E  0868               	movf	_m_crc+1,w
  3453  063F  00A1               	movwf	crc_update@old_crc+1
  3454  0640  0867               	movf	_m_crc,w
  3455  0641  00A0               	movwf	crc_update@old_crc
  3456  0642  0832               	movf	write_calibration_to_EEPROM@p,w
  3457  0643  0086               	movwf	6
  3458  0644  0187               	clrf	7
  3459  0645  0801               	movf	1,w
  3460  0646  00F5               	movwf	??_write_calibration_to_EEPROM
  3461  0647  0875               	movf	??_write_calibration_to_EEPROM,w
  3462  0648  00A2               	movwf	crc_update@data
  3463  0649  3187  2731  3186   	fcall	_crc_update
  3464  064C  0020               	movlb	0	; select bank0
  3465  064D  0821               	movf	?_crc_update+1,w
  3466  064E  00E8               	movwf	_m_crc+1
  3467  064F  0820               	movf	?_crc_update,w
  3468  0650  00E7               	movwf	_m_crc
  3469  0651  3001               	movlw	1
  3470  0652  00F5               	movwf	??_write_calibration_to_EEPROM
  3471  0653  0875               	movf	??_write_calibration_to_EEPROM,w
  3472  0654  07B2               	addwf	write_calibration_to_EEPROM@p,f
  3473  0655  3001               	movlw	1
  3474  0656  00F5               	movwf	??_write_calibration_to_EEPROM
  3475  0657  0875               	movf	??_write_calibration_to_EEPROM,w
  3476  0658  07B3               	addwf	write_calibration_to_EEPROM@i,f
  3477  0659  302F               	movlw	47
  3478  065A  0233               	subwf	write_calibration_to_EEPROM@i,w
  3479  065B  1C03               	skipc
  3480  065C  2E2E               	goto	l3564
  3481  065D                     l3572:	
  3482                           
  3483                           ;main.c: 119: }
  3484                           ;main.c: 120: p=(char *)&m_crc;
  3485  065D  3067               	movlw	(low (_m_crc| 0))& (0+255)
  3486  065E  00F5               	movwf	??_write_calibration_to_EEPROM
  3487  065F  0875               	movf	??_write_calibration_to_EEPROM,w
  3488  0660  00B2               	movwf	write_calibration_to_EEPROM@p
  3489                           
  3490                           ;main.c: 121: for(i=0; i<sizeof(m_crc); i++)
  3491  0661  01B3               	clrf	write_calibration_to_EEPROM@i
  3492  0662                     L3:	
  3493  0662  3002               	movlw	2
  3494  0663  0233               	subwf	write_calibration_to_EEPROM@i,w
  3495  0664  1803               	btfsc	3,0
  3496  0665  0008               	return
  3497                           
  3498                           ;main.c: 122: DATAEE_WriteByte(addr++, *p++);
  3499  0666  0832               	movf	write_calibration_to_EEPROM@p,w
  3500  0667  0086               	movwf	6
  3501  0668  0187               	clrf	7
  3502  0669  0801               	movf	1,w
  3503  066A  00F5               	movwf	??_write_calibration_to_EEPROM
  3504  066B  0875               	movf	??_write_calibration_to_EEPROM,w
  3505  066C  00F4               	movwf	DATAEE_WriteByte@bData
  3506  066D  0831               	movf	write_calibration_to_EEPROM@addr,w
  3507  066E  318F  2796  3186   	fcall	_DATAEE_WriteByte
  3508  0671  3001               	movlw	1
  3509  0672  00F5               	movwf	??_write_calibration_to_EEPROM
  3510  0673  0875               	movf	??_write_calibration_to_EEPROM,w
  3511  0674  0020               	movlb	0	; select bank0
  3512  0675  07B2               	addwf	write_calibration_to_EEPROM@p,f
  3513  0676  3001               	movlw	1
  3514  0677  00F5               	movwf	??_write_calibration_to_EEPROM
  3515  0678  0875               	movf	??_write_calibration_to_EEPROM,w
  3516  0679  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  3517  067A  3001               	movlw	1
  3518  067B  00F5               	movwf	??_write_calibration_to_EEPROM
  3519  067C  0875               	movf	??_write_calibration_to_EEPROM,w
  3520  067D  07B3               	addwf	write_calibration_to_EEPROM@i,f
  3521  067E  2E62               	goto	L3
  3522  067F                     __end_of_write_calibration_to_EEPROM:	
  3523                           
  3524                           	psect	text2
  3525  0F96                     __ptext2:	
  3526 ;; *************** function _DATAEE_WriteByte *****************
  3527 ;; Defined at:
  3528 ;;		line 180 in file "mcc_generated_files/memory.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  bAdd            1    wreg     unsigned char 
  3531 ;;  bData           1    4[COMMON] unsigned char 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  bAdd            1    0[BANK0 ] unsigned char 
  3534 ;;  GIEBitValue     1    1[BANK0 ] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3544 ;;      Params:         1       0       0       0       0       0
  3545 ;;      Locals:         0       2       0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0       0
  3547 ;;      Totals:         1       2       0       0       0       0
  3548 ;;Total ram usage:        3 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    6
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_write_calibration_to_EEPROM
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _DATAEE_WriteByte
  3560  0F96                     _DATAEE_WriteByte:	
  3561                           
  3562                           ;incstack = 0
  3563                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  3564                           ;DATAEE_WriteByte@bAdd stored from wreg
  3565  0F96  0020               	movlb	0	; select bank0
  3566  0F97  00A0               	movwf	DATAEE_WriteByte@bAdd
  3567                           
  3568                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  3569  0F98  01A1               	clrf	DATAEE_WriteByte@GIEBitValue
  3570                           
  3571                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  3572  0F99  0820               	movf	DATAEE_WriteByte@bAdd,w
  3573  0F9A  0023               	movlb	3	; select bank3
  3574  0F9B  0091               	movwf	17	;volatile
  3575                           
  3576                           ;memory.c: 185: EEDATL = bData;
  3577  0F9C  0874               	movf	DATAEE_WriteByte@bData,w
  3578  0F9D  0093               	movwf	19	;volatile
  3579                           
  3580                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  3581  0F9E  1395               	bcf	21,7	;volsfr
  3582                           
  3583                           ;memory.c: 187: EECON1bits.CFGS = 0;
  3584  0F9F  1315               	bcf	21,6	;volsfr
  3585                           
  3586                           ;memory.c: 188: EECON1bits.WREN = 1;
  3587  0FA0  1515               	bsf	21,2	;volsfr
  3588                           
  3589                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  3590  0FA1  3000               	movlw	0
  3591  0FA2  1B8B               	btfsc	11,7	;volatile
  3592  0FA3  3001               	movlw	1
  3593  0FA4  0020               	movlb	0	; select bank0
  3594  0FA5  00A1               	movwf	DATAEE_WriteByte@GIEBitValue
  3595                           
  3596                           ;memory.c: 191: INTCONbits.GIE = 0;
  3597  0FA6  138B               	bcf	11,7	;volatile
  3598                           
  3599                           ;memory.c: 192: EECON2 = 0x55;
  3600  0FA7  3055               	movlw	85
  3601  0FA8  0023               	movlb	3	; select bank3
  3602  0FA9  0096               	movwf	22	;volsfr
  3603                           
  3604                           ;memory.c: 193: EECON2 = 0xAA;
  3605  0FAA  30AA               	movlw	170
  3606  0FAB  0096               	movwf	22	;volsfr
  3607                           
  3608                           ;memory.c: 194: EECON1bits.WR = 1;
  3609  0FAC  1495               	bsf	21,1	;volsfr
  3610  0FAD                     l632:	
  3611                           ;memory.c: 197: {
  3612                           
  3613                           ;memory.c: 196: while (EECON1bits.WR)
  3614                           
  3615  0FAD  1895               	btfsc	21,1	;volsfr
  3616  0FAE  2FAD               	goto	l632
  3617                           
  3618                           ;memory.c: 198: }
  3619                           ;memory.c: 200: EECON1bits.WREN = 0;
  3620  0FAF  1115               	bcf	21,2	;volsfr
  3621                           
  3622                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  3623  0FB0  0020               	movlb	0	; select bank0
  3624  0FB1  0C21               	rrf	DATAEE_WriteByte@GIEBitValue,w
  3625  0FB2  1C03               	skipc
  3626  0FB3  138B               	bcf	11,7	;volatile
  3627  0FB4  1803               	skipnc
  3628  0FB5  178B               	bsf	11,7	;volatile
  3629  0FB6  0008               	return
  3630  0FB7                     __end_of_DATAEE_WriteByte:	
  3631                           
  3632                           	psect	text3
  3633  0E1B                     __ptext3:	
  3634 ;; *************** function _perform_calibration *****************
  3635 ;; Defined at:
  3636 ;;		line 125 in file "main.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		status,2
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3650 ;;      Params:         0       0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    6
  3657 ;; This function calls:
  3658 ;;		Nothing
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _perform_calibration
  3666  0E1B                     _perform_calibration:	
  3667                           
  3668                           ;main.c: 127: m_conf.use_mph = 0x01;
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _perform_calibration: [status,2]
  3672  0E1B  0021               	movlb	1	; select bank1
  3673  0E1C  01A8               	clrf	_m_conf^(0+128)
  3674  0E1D  0AA8               	incf	_m_conf^(0+128),f
  3675                           
  3676                           ;main.c: 128: m_conf.max_pwm = 0x00;
  3677  0E1E  01A9               	clrf	(_m_conf^(0+128)+1)
  3678  0E1F  01AA               	clrf	((_m_conf+1)^(0+128)+1)
  3679  0E20  0008               	return
  3680  0E21                     __end_of_perform_calibration:	
  3681                           
  3682                           	psect	text4
  3683  0414                     __ptext4:	
  3684 ;; *************** function _multiply_fp *****************
  3685 ;; Defined at:
  3686 ;;		line 46 in file "fixed_point.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  n1              4   12[BANK0 ] long 
  3689 ;;  n2              4   16[BANK0 ] long 
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  res             4   34[BANK0 ] long 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  4   12[BANK0 ] long 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0, pclath, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3701 ;;      Params:         0       8       0       0       0       0
  3702 ;;      Locals:         0       4       0       0       0       0
  3703 ;;      Temps:          0      14       0       0       0       0
  3704 ;;      Totals:         0      26       0       0       0       0
  3705 ;;Total ram usage:       26 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    7
  3708 ;; This function calls:
  3709 ;;		___lmul
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;;		_reciprocal_fp
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _multiply_fp
  3718  0414                     _multiply_fp:	
  3719                           
  3720                           ;fixed_point.c: 50: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  3724  0414  0020               	movlb	0	; select bank0
  3725  0415  082C               	movf	multiply_fp@n1,w
  3726  0416  00B4               	movwf	??_multiply_fp
  3727  0417  082D               	movf	multiply_fp@n1+1,w
  3728  0418  00B5               	movwf	??_multiply_fp+1
  3729  0419  082E               	movf	multiply_fp@n1+2,w
  3730  041A  00B6               	movwf	??_multiply_fp+2
  3731  041B  082F               	movf	multiply_fp@n1+3,w
  3732  041C  00B7               	movwf	??_multiply_fp+3
  3733  041D  3010               	movlw	16
  3734  041E  00B8               	movwf	??_multiply_fp+4
  3735  041F                     u4385:	
  3736  041F  37B7               	asrf	??_multiply_fp+3,f
  3737  0420  0CB6               	rrf	??_multiply_fp+2,f
  3738  0421  0CB5               	rrf	??_multiply_fp+1,f
  3739  0422  0CB4               	rrf	??_multiply_fp,f
  3740  0423  0BB8               	decfsz	??_multiply_fp+4,f
  3741  0424  2C1F               	goto	u4385
  3742  0425  0837               	movf	??_multiply_fp+3,w
  3743  0426  00A3               	movwf	___lmul@multiplier+3
  3744  0427  0836               	movf	??_multiply_fp+2,w
  3745  0428  00A2               	movwf	___lmul@multiplier+2
  3746  0429  0835               	movf	??_multiply_fp+1,w
  3747  042A  00A1               	movwf	___lmul@multiplier+1
  3748  042B  0834               	movf	??_multiply_fp,w
  3749  042C  00A0               	movwf	___lmul@multiplier
  3750  042D  0830               	movf	multiply_fp@n2,w
  3751  042E  00B9               	movwf	??_multiply_fp+5
  3752  042F  0831               	movf	multiply_fp@n2+1,w
  3753  0430  00BA               	movwf	??_multiply_fp+6
  3754  0431  0832               	movf	multiply_fp@n2+2,w
  3755  0432  00BB               	movwf	??_multiply_fp+7
  3756  0433  0833               	movf	multiply_fp@n2+3,w
  3757  0434  00BC               	movwf	??_multiply_fp+8
  3758  0435  3010               	movlw	16
  3759  0436  00BD               	movwf	??_multiply_fp+9
  3760  0437                     u4395:	
  3761  0437  37BC               	asrf	??_multiply_fp+8,f
  3762  0438  0CBB               	rrf	??_multiply_fp+7,f
  3763  0439  0CBA               	rrf	??_multiply_fp+6,f
  3764  043A  0CB9               	rrf	??_multiply_fp+5,f
  3765  043B  0BBD               	decfsz	??_multiply_fp+9,f
  3766  043C  2C37               	goto	u4395
  3767  043D  083C               	movf	??_multiply_fp+8,w
  3768  043E  00A7               	movwf	___lmul@multiplicand+3
  3769  043F  083B               	movf	??_multiply_fp+7,w
  3770  0440  00A6               	movwf	___lmul@multiplicand+2
  3771  0441  083A               	movf	??_multiply_fp+6,w
  3772  0442  00A5               	movwf	___lmul@multiplicand+1
  3773  0443  0839               	movf	??_multiply_fp+5,w
  3774  0444  00A4               	movwf	___lmul@multiplicand
  3775  0445  3187  27C5  3184   	fcall	___lmul
  3776  0448  0020               	movlb	0	; select bank0
  3777  0449  0820               	movf	?___lmul,w
  3778  044A  00BE               	movwf	??_multiply_fp+10
  3779  044B  0821               	movf	?___lmul+1,w
  3780  044C  00BF               	movwf	??_multiply_fp+11
  3781  044D  0822               	movf	?___lmul+2,w
  3782  044E  00C0               	movwf	??_multiply_fp+12
  3783  044F  0823               	movf	?___lmul+3,w
  3784  0450  00C1               	movwf	??_multiply_fp+13
  3785  0451  3010               	movlw	16
  3786  0452                     u4405:	
  3787  0452  35BE               	lslf	??_multiply_fp+10,f
  3788  0453  0DBF               	rlf	??_multiply_fp+11,f
  3789  0454  0DC0               	rlf	??_multiply_fp+12,f
  3790  0455  0DC1               	rlf	??_multiply_fp+13,f
  3791  0456  0B89               	decfsz	9,f
  3792  0457  2C52               	goto	u4405
  3793  0458  0841               	movf	??_multiply_fp+13,w
  3794  0459  00C5               	movwf	multiply_fp@res+3
  3795  045A  0840               	movf	??_multiply_fp+12,w
  3796  045B  00C4               	movwf	multiply_fp@res+2
  3797  045C  083F               	movf	??_multiply_fp+11,w
  3798  045D  00C3               	movwf	multiply_fp@res+1
  3799  045E  083E               	movf	??_multiply_fp+10,w
  3800  045F  00C2               	movwf	multiply_fp@res
  3801                           
  3802                           ;fixed_point.c: 51: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  3803  0460  082C               	movf	multiply_fp@n1,w
  3804  0461  00B4               	movwf	??_multiply_fp
  3805  0462  082D               	movf	multiply_fp@n1+1,w
  3806  0463  00B5               	movwf	??_multiply_fp+1
  3807  0464  082E               	movf	multiply_fp@n1+2,w
  3808  0465  00B6               	movwf	??_multiply_fp+2
  3809  0466  082F               	movf	multiply_fp@n1+3,w
  3810  0467  00B7               	movwf	??_multiply_fp+3
  3811  0468  3010               	movlw	16
  3812  0469  00B8               	movwf	??_multiply_fp+4
  3813  046A                     u4415:	
  3814  046A  37B7               	asrf	??_multiply_fp+3,f
  3815  046B  0CB6               	rrf	??_multiply_fp+2,f
  3816  046C  0CB5               	rrf	??_multiply_fp+1,f
  3817  046D  0CB4               	rrf	??_multiply_fp,f
  3818  046E  0BB8               	decfsz	??_multiply_fp+4,f
  3819  046F  2C6A               	goto	u4415
  3820  0470  0837               	movf	??_multiply_fp+3,w
  3821  0471  00A3               	movwf	___lmul@multiplier+3
  3822  0472  0836               	movf	??_multiply_fp+2,w
  3823  0473  00A2               	movwf	___lmul@multiplier+2
  3824  0474  0835               	movf	??_multiply_fp+1,w
  3825  0475  00A1               	movwf	___lmul@multiplier+1
  3826  0476  0834               	movf	??_multiply_fp,w
  3827  0477  00A0               	movwf	___lmul@multiplier
  3828  0478  30FF               	movlw	255
  3829  0479  0530               	andwf	multiply_fp@n2,w
  3830  047A  00A4               	movwf	___lmul@multiplicand
  3831  047B  30FF               	movlw	255
  3832  047C  0531               	andwf	multiply_fp@n2+1,w
  3833  047D  00A5               	movwf	___lmul@multiplicand+1
  3834  047E  3000               	movlw	0
  3835  047F  0532               	andwf	multiply_fp@n2+2,w
  3836  0480  00A6               	movwf	___lmul@multiplicand+2
  3837  0481  3000               	movlw	0
  3838  0482  0533               	andwf	multiply_fp@n2+3,w
  3839  0483  00A7               	movwf	___lmul@multiplicand+3
  3840  0484  3187  27C5  3184   	fcall	___lmul
  3841  0487  0020               	movlb	0	; select bank0
  3842  0488  0820               	movf	?___lmul,w
  3843  0489  07C2               	addwf	multiply_fp@res,f
  3844  048A  0821               	movf	?___lmul+1,w
  3845  048B  3DC3               	addwfc	multiply_fp@res+1,f
  3846  048C  0822               	movf	?___lmul+2,w
  3847  048D  3DC4               	addwfc	multiply_fp@res+2,f
  3848  048E  0823               	movf	?___lmul+3,w
  3849  048F  3DC5               	addwfc	multiply_fp@res+3,f
  3850                           
  3851                           ;fixed_point.c: 52: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  3852  0490  0830               	movf	multiply_fp@n2,w
  3853  0491  00B4               	movwf	??_multiply_fp
  3854  0492  0831               	movf	multiply_fp@n2+1,w
  3855  0493  00B5               	movwf	??_multiply_fp+1
  3856  0494  0832               	movf	multiply_fp@n2+2,w
  3857  0495  00B6               	movwf	??_multiply_fp+2
  3858  0496  0833               	movf	multiply_fp@n2+3,w
  3859  0497  00B7               	movwf	??_multiply_fp+3
  3860  0498  3010               	movlw	16
  3861  0499  00B8               	movwf	??_multiply_fp+4
  3862  049A                     u4425:	
  3863  049A  37B7               	asrf	??_multiply_fp+3,f
  3864  049B  0CB6               	rrf	??_multiply_fp+2,f
  3865  049C  0CB5               	rrf	??_multiply_fp+1,f
  3866  049D  0CB4               	rrf	??_multiply_fp,f
  3867  049E  0BB8               	decfsz	??_multiply_fp+4,f
  3868  049F  2C9A               	goto	u4425
  3869  04A0  0837               	movf	??_multiply_fp+3,w
  3870  04A1  00A3               	movwf	___lmul@multiplier+3
  3871  04A2  0836               	movf	??_multiply_fp+2,w
  3872  04A3  00A2               	movwf	___lmul@multiplier+2
  3873  04A4  0835               	movf	??_multiply_fp+1,w
  3874  04A5  00A1               	movwf	___lmul@multiplier+1
  3875  04A6  0834               	movf	??_multiply_fp,w
  3876  04A7  00A0               	movwf	___lmul@multiplier
  3877  04A8  30FF               	movlw	255
  3878  04A9  052C               	andwf	multiply_fp@n1,w
  3879  04AA  00A4               	movwf	___lmul@multiplicand
  3880  04AB  30FF               	movlw	255
  3881  04AC  052D               	andwf	multiply_fp@n1+1,w
  3882  04AD  00A5               	movwf	___lmul@multiplicand+1
  3883  04AE  3000               	movlw	0
  3884  04AF  052E               	andwf	multiply_fp@n1+2,w
  3885  04B0  00A6               	movwf	___lmul@multiplicand+2
  3886  04B1  3000               	movlw	0
  3887  04B2  052F               	andwf	multiply_fp@n1+3,w
  3888  04B3  00A7               	movwf	___lmul@multiplicand+3
  3889  04B4  3187  27C5  3184   	fcall	___lmul
  3890  04B7  0020               	movlb	0	; select bank0
  3891  04B8  0820               	movf	?___lmul,w
  3892  04B9  07C2               	addwf	multiply_fp@res,f
  3893  04BA  0821               	movf	?___lmul+1,w
  3894  04BB  3DC3               	addwfc	multiply_fp@res+1,f
  3895  04BC  0822               	movf	?___lmul+2,w
  3896  04BD  3DC4               	addwfc	multiply_fp@res+2,f
  3897  04BE  0823               	movf	?___lmul+3,w
  3898  04BF  3DC5               	addwfc	multiply_fp@res+3,f
  3899                           
  3900                           ;fixed_point.c: 53: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  3901  04C0  30FF               	movlw	255
  3902  04C1  00B4               	movwf	??_multiply_fp
  3903  04C2  30FF               	movlw	255
  3904  04C3  00B5               	movwf	??_multiply_fp+1
  3905  04C4  3000               	movlw	0
  3906  04C5  00B6               	movwf	??_multiply_fp+2
  3907  04C6  3000               	movlw	0
  3908  04C7  00B7               	movwf	??_multiply_fp+3
  3909  04C8  30FF               	movlw	255
  3910  04C9  052C               	andwf	multiply_fp@n1,w
  3911  04CA  00A0               	movwf	___lmul@multiplier
  3912  04CB  30FF               	movlw	255
  3913  04CC  052D               	andwf	multiply_fp@n1+1,w
  3914  04CD  00A1               	movwf	___lmul@multiplier+1
  3915  04CE  3000               	movlw	0
  3916  04CF  052E               	andwf	multiply_fp@n1+2,w
  3917  04D0  00A2               	movwf	___lmul@multiplier+2
  3918  04D1  3000               	movlw	0
  3919  04D2  052F               	andwf	multiply_fp@n1+3,w
  3920  04D3  00A3               	movwf	___lmul@multiplier+3
  3921  04D4  30FF               	movlw	255
  3922  04D5  0530               	andwf	multiply_fp@n2,w
  3923  04D6  00A4               	movwf	___lmul@multiplicand
  3924  04D7  30FF               	movlw	255
  3925  04D8  0531               	andwf	multiply_fp@n2+1,w
  3926  04D9  00A5               	movwf	___lmul@multiplicand+1
  3927  04DA  3000               	movlw	0
  3928  04DB  0532               	andwf	multiply_fp@n2+2,w
  3929  04DC  00A6               	movwf	___lmul@multiplicand+2
  3930  04DD  3000               	movlw	0
  3931  04DE  0533               	andwf	multiply_fp@n2+3,w
  3932  04DF  00A7               	movwf	___lmul@multiplicand+3
  3933  04E0  3187  27C5  3184   	fcall	___lmul
  3934  04E3  0020               	movlb	0	; select bank0
  3935  04E4  0820               	movf	?___lmul,w
  3936  04E5  00B8               	movwf	??_multiply_fp+4
  3937  04E6  0821               	movf	?___lmul+1,w
  3938  04E7  00B9               	movwf	??_multiply_fp+5
  3939  04E8  0822               	movf	?___lmul+2,w
  3940  04E9  00BA               	movwf	??_multiply_fp+6
  3941  04EA  0823               	movf	?___lmul+3,w
  3942  04EB  00BB               	movwf	??_multiply_fp+7
  3943  04EC  3010               	movlw	16
  3944  04ED  00BC               	movwf	??_multiply_fp+8
  3945  04EE                     u4435:	
  3946  04EE  37BB               	asrf	??_multiply_fp+7,f
  3947  04EF  0CBA               	rrf	??_multiply_fp+6,f
  3948  04F0  0CB9               	rrf	??_multiply_fp+5,f
  3949  04F1  0CB8               	rrf	??_multiply_fp+4,f
  3950  04F2  0BBC               	decfsz	??_multiply_fp+8,f
  3951  04F3  2CEE               	goto	u4435
  3952  04F4  0838               	movf	??_multiply_fp+4,w
  3953  04F5  05B4               	andwf	??_multiply_fp,f
  3954  04F6  0839               	movf	??_multiply_fp+5,w
  3955  04F7  05B5               	andwf	??_multiply_fp+1,f
  3956  04F8  083A               	movf	??_multiply_fp+6,w
  3957  04F9  05B6               	andwf	??_multiply_fp+2,f
  3958  04FA  083B               	movf	??_multiply_fp+7,w
  3959  04FB  05B7               	andwf	??_multiply_fp+3,f
  3960  04FC  0834               	movf	??_multiply_fp,w
  3961  04FD  07C2               	addwf	multiply_fp@res,f
  3962  04FE  0835               	movf	??_multiply_fp+1,w
  3963  04FF  3DC3               	addwfc	multiply_fp@res+1,f
  3964  0500  0836               	movf	??_multiply_fp+2,w
  3965  0501  3DC4               	addwfc	multiply_fp@res+2,f
  3966  0502  0837               	movf	??_multiply_fp+3,w
  3967  0503  3DC5               	addwfc	multiply_fp@res+3,f
  3968                           
  3969                           ;fixed_point.c: 54: return res;
  3970  0504  0845               	movf	multiply_fp@res+3,w
  3971  0505  00AF               	movwf	?_multiply_fp+3
  3972  0506  0844               	movf	multiply_fp@res+2,w
  3973  0507  00AE               	movwf	?_multiply_fp+2
  3974  0508  0843               	movf	multiply_fp@res+1,w
  3975  0509  00AD               	movwf	?_multiply_fp+1
  3976  050A  0842               	movf	multiply_fp@res,w
  3977  050B  00AC               	movwf	?_multiply_fp
  3978  050C  0008               	return
  3979  050D                     __end_of_multiply_fp:	
  3980                           
  3981                           	psect	text5
  3982  07C5                     __ptext5:	
  3983 ;; *************** function ___lmul *****************
  3984 ;; Defined at:
  3985 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3988 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  product         4    8[BANK0 ] unsigned long 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  4    0[BANK0 ] unsigned long 
  3993 ;; Registers used:
  3994 ;;		wreg, status,2, status,0
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4000 ;;      Params:         0       8       0       0       0       0
  4001 ;;      Locals:         0       4       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0
  4003 ;;      Totals:         0      12       0       0       0       0
  4004 ;;Total ram usage:       12 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    6
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_multiply_fp
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           
  4015                           ;psect for function ___lmul
  4016  07C5                     ___lmul:	
  4017                           
  4018                           ;incstack = 0
  4019                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4020  07C5  3000               	movlw	0
  4021  07C6  0020               	movlb	0	; select bank0
  4022  07C7  00AB               	movwf	___lmul@product+3
  4023  07C8  3000               	movlw	0
  4024  07C9  00AA               	movwf	___lmul@product+2
  4025  07CA  3000               	movlw	0
  4026  07CB  00A9               	movwf	___lmul@product+1
  4027  07CC  3000               	movlw	0
  4028  07CD  00A8               	movwf	___lmul@product
  4029  07CE                     l3500:	
  4030  07CE  1C20               	btfss	___lmul@multiplier,0
  4031  07CF  2FD8               	goto	l3504
  4032  07D0  0824               	movf	___lmul@multiplicand,w
  4033  07D1  07A8               	addwf	___lmul@product,f
  4034  07D2  0825               	movf	___lmul@multiplicand+1,w
  4035  07D3  3DA9               	addwfc	___lmul@product+1,f
  4036  07D4  0826               	movf	___lmul@multiplicand+2,w
  4037  07D5  3DAA               	addwfc	___lmul@product+2,f
  4038  07D6  0827               	movf	___lmul@multiplicand+3,w
  4039  07D7  3DAB               	addwfc	___lmul@product+3,f
  4040  07D8                     l3504:	
  4041  07D8  3001               	movlw	1
  4042  07D9                     u3635:	
  4043  07D9  35A4               	lslf	___lmul@multiplicand,f
  4044  07DA  0DA5               	rlf	___lmul@multiplicand+1,f
  4045  07DB  0DA6               	rlf	___lmul@multiplicand+2,f
  4046  07DC  0DA7               	rlf	___lmul@multiplicand+3,f
  4047  07DD  0B89               	decfsz	9,f
  4048  07DE  2FD9               	goto	u3635
  4049  07DF  3001               	movlw	1
  4050  07E0                     u3645:	
  4051  07E0  36A3               	lsrf	___lmul@multiplier+3,f
  4052  07E1  0CA2               	rrf	___lmul@multiplier+2,f
  4053  07E2  0CA1               	rrf	___lmul@multiplier+1,f
  4054  07E3  0CA0               	rrf	___lmul@multiplier,f
  4055  07E4  0B89               	decfsz	9,f
  4056  07E5  2FE0               	goto	u3645
  4057  07E6  0823               	movf	___lmul@multiplier+3,w
  4058  07E7  0422               	iorwf	___lmul@multiplier+2,w
  4059  07E8  0421               	iorwf	___lmul@multiplier+1,w
  4060  07E9  0420               	iorwf	___lmul@multiplier,w
  4061  07EA  1D03               	skipz
  4062  07EB  2FCE               	goto	l3500
  4063  07EC  082B               	movf	___lmul@product+3,w
  4064  07ED  00A3               	movwf	?___lmul+3
  4065  07EE  082A               	movf	___lmul@product+2,w
  4066  07EF  00A2               	movwf	?___lmul+2
  4067  07F0  0829               	movf	___lmul@product+1,w
  4068  07F1  00A1               	movwf	?___lmul+1
  4069  07F2  0828               	movf	___lmul@product,w
  4070  07F3  00A0               	movwf	?___lmul
  4071  07F4  0008               	return
  4072  07F5                     __end_of___lmul:	
  4073                           
  4074                           	psect	text6
  4075  05B6                     __ptext6:	
  4076 ;; *************** function _load_calibration_from_EEPROM *****************
  4077 ;; Defined at:
  4078 ;;		line 91 in file "main.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  crc             2   17[BANK0 ] unsigned short 
  4083 ;;  i               1   21[BANK0 ] unsigned char 
  4084 ;;  p               1   20[BANK0 ] PTR unsigned char 
  4085 ;;		 -> m_crc(2), m_conf(47), 
  4086 ;;  addr            1   19[BANK0 ] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      unsigned char 
  4089 ;; Registers used:
  4090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4096 ;;      Params:         0       0       0       0       0       0
  4097 ;;      Locals:         0       5       0       0       0       0
  4098 ;;      Temps:          1       0       0       0       0       0
  4099 ;;      Totals:         1       5       0       0       0       0
  4100 ;;Total ram usage:        6 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    7
  4103 ;; This function calls:
  4104 ;;		_DATAEE_ReadByte
  4105 ;;		_crc_update
  4106 ;; This function is called by:
  4107 ;;		_main
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _load_calibration_from_EEPROM
  4113  05B6                     _load_calibration_from_EEPROM:	
  4114                           
  4115                           ;main.c: 94: unsigned char addr = 0x00;
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _load_calibration_from_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  4119  05B6  0020               	movlb	0	; select bank0
  4120  05B7  01B3               	clrf	load_calibration_from_EEPROM@addr
  4121                           
  4122                           ;main.c: 95: unsigned short crc = 0x00;
  4123  05B8  01B1               	clrf	load_calibration_from_EEPROM@crc
  4124  05B9  01B2               	clrf	load_calibration_from_EEPROM@crc+1
  4125                           
  4126                           ;main.c: 96: char i,*p;
  4127                           ;main.c: 97: p=(char *)&m_conf;
  4128  05BA  30A8               	movlw	(low (_m_conf| 0))& (0+255)
  4129  05BB  00F5               	movwf	??_load_calibration_from_EEPROM
  4130  05BC  0875               	movf	??_load_calibration_from_EEPROM,w
  4131  05BD  00B4               	movwf	load_calibration_from_EEPROM@p
  4132                           
  4133                           ;main.c: 98: for(i=0; i<sizeof(m_conf); i++)
  4134  05BE  01B5               	clrf	load_calibration_from_EEPROM@i
  4135  05BF  302F               	movlw	47
  4136  05C0  0235               	subwf	load_calibration_from_EEPROM@i,w
  4137  05C1  1803               	btfsc	3,0
  4138  05C2  2DF1               	goto	l3534
  4139  05C3                     l3524:	
  4140                           
  4141                           ;main.c: 99: {
  4142                           ;main.c: 100: *p = DATAEE_ReadByte(addr++);
  4143  05C3  0833               	movf	load_calibration_from_EEPROM@addr,w
  4144  05C4  318E  2645  3185   	fcall	_DATAEE_ReadByte
  4145  05C7  00F5               	movwf	??_load_calibration_from_EEPROM
  4146  05C8  0020               	movlb	0	; select bank0
  4147  05C9  0834               	movf	load_calibration_from_EEPROM@p,w
  4148  05CA  0086               	movwf	6
  4149  05CB  0187               	clrf	7
  4150  05CC  0875               	movf	??_load_calibration_from_EEPROM,w
  4151  05CD  0081               	movwf	1
  4152  05CE  3001               	movlw	1
  4153  05CF  00F5               	movwf	??_load_calibration_from_EEPROM
  4154  05D0  0875               	movf	??_load_calibration_from_EEPROM,w
  4155  05D1  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  4156                           
  4157                           ;main.c: 101: crc = crc_update(crc, *p++);
  4158  05D2  0832               	movf	load_calibration_from_EEPROM@crc+1,w
  4159  05D3  00A1               	movwf	crc_update@old_crc+1
  4160  05D4  0831               	movf	load_calibration_from_EEPROM@crc,w
  4161  05D5  00A0               	movwf	crc_update@old_crc
  4162  05D6  0834               	movf	load_calibration_from_EEPROM@p,w
  4163  05D7  0086               	movwf	6
  4164  05D8  0187               	clrf	7
  4165  05D9  0801               	movf	1,w
  4166  05DA  00F5               	movwf	??_load_calibration_from_EEPROM
  4167  05DB  0875               	movf	??_load_calibration_from_EEPROM,w
  4168  05DC  00A2               	movwf	crc_update@data
  4169  05DD  3187  2731  3185   	fcall	_crc_update
  4170  05E0  0020               	movlb	0	; select bank0
  4171  05E1  0821               	movf	?_crc_update+1,w
  4172  05E2  00B2               	movwf	load_calibration_from_EEPROM@crc+1
  4173  05E3  0820               	movf	?_crc_update,w
  4174  05E4  00B1               	movwf	load_calibration_from_EEPROM@crc
  4175  05E5  3001               	movlw	1
  4176  05E6  00F5               	movwf	??_load_calibration_from_EEPROM
  4177  05E7  0875               	movf	??_load_calibration_from_EEPROM,w
  4178  05E8  07B4               	addwf	load_calibration_from_EEPROM@p,f
  4179  05E9  3001               	movlw	1
  4180  05EA  00F5               	movwf	??_load_calibration_from_EEPROM
  4181  05EB  0875               	movf	??_load_calibration_from_EEPROM,w
  4182  05EC  07B5               	addwf	load_calibration_from_EEPROM@i,f
  4183  05ED  302F               	movlw	47
  4184  05EE  0235               	subwf	load_calibration_from_EEPROM@i,w
  4185  05EF  1C03               	skipc
  4186  05F0  2DC3               	goto	l3524
  4187  05F1                     l3534:	
  4188                           
  4189                           ;main.c: 102: }
  4190                           ;main.c: 103: p=(char *)&m_crc;
  4191  05F1  3067               	movlw	(low (_m_crc| 0))& (0+255)
  4192  05F2  00F5               	movwf	??_load_calibration_from_EEPROM
  4193  05F3  0875               	movf	??_load_calibration_from_EEPROM,w
  4194  05F4  00B4               	movwf	load_calibration_from_EEPROM@p
  4195                           
  4196                           ;main.c: 104: for(i=0; i<sizeof(m_crc); i++)
  4197  05F5  01B5               	clrf	load_calibration_from_EEPROM@i
  4198  05F6  3002               	movlw	2
  4199  05F7  0235               	subwf	load_calibration_from_EEPROM@i,w
  4200  05F8  1803               	btfsc	3,0
  4201  05F9  2E15               	goto	l3552
  4202  05FA                     l3542:	
  4203                           
  4204                           ;main.c: 105: *p++ = DATAEE_ReadByte(addr++);
  4205  05FA  0833               	movf	load_calibration_from_EEPROM@addr,w
  4206  05FB  318E  2645  3185   	fcall	_DATAEE_ReadByte
  4207  05FE  00F5               	movwf	??_load_calibration_from_EEPROM
  4208  05FF  0020               	movlb	0	; select bank0
  4209  0600  0834               	movf	load_calibration_from_EEPROM@p,w
  4210  0601  0086               	movwf	6
  4211  0602  0187               	clrf	7
  4212  0603  0875               	movf	??_load_calibration_from_EEPROM,w
  4213  0604  0081               	movwf	1
  4214  0605  3001               	movlw	1
  4215  0606  00F5               	movwf	??_load_calibration_from_EEPROM
  4216  0607  0875               	movf	??_load_calibration_from_EEPROM,w
  4217  0608  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  4218  0609  3001               	movlw	1
  4219  060A  00F5               	movwf	??_load_calibration_from_EEPROM
  4220  060B  0875               	movf	??_load_calibration_from_EEPROM,w
  4221  060C  07B4               	addwf	load_calibration_from_EEPROM@p,f
  4222  060D  3001               	movlw	1
  4223  060E  00F5               	movwf	??_load_calibration_from_EEPROM
  4224  060F  0875               	movf	??_load_calibration_from_EEPROM,w
  4225  0610  07B5               	addwf	load_calibration_from_EEPROM@i,f
  4226  0611  3002               	movlw	2
  4227  0612  0235               	subwf	load_calibration_from_EEPROM@i,w
  4228  0613  1C03               	skipc
  4229  0614  2DFA               	goto	l3542
  4230  0615                     l3552:	
  4231                           
  4232                           ;main.c: 106: return (crc == m_crc);
  4233  0615  0868               	movf	_m_crc+1,w
  4234  0616  0632               	xorwf	load_calibration_from_EEPROM@crc+1,w
  4235  0617  1D03               	skipz
  4236  0618  2E1B               	goto	u3715
  4237  0619  0867               	movf	_m_crc,w
  4238  061A  0631               	xorwf	load_calibration_from_EEPROM@crc,w
  4239  061B                     u3715:	
  4240  061B  1D03               	btfss	3,2
  4241  061C  2E1F               	goto	u3710
  4242  061D  3001               	movlw	1
  4243  061E  0008               	return
  4244  061F                     u3710:	
  4245  061F  3000               	movlw	0
  4246  0620  0008               	return
  4247  0621                     __end_of_load_calibration_from_EEPROM:	
  4248                           
  4249                           	psect	text7
  4250  0731                     __ptext7:	
  4251 ;; *************** function _crc_update *****************
  4252 ;; Defined at:
  4253 ;;		line 11 in file "CRC.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  old_crc         2    0[BANK0 ] unsigned short 
  4256 ;;  data            1    2[BANK0 ] unsigned char 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  x               2   15[BANK0 ] unsigned short 
  4259 ;;  crc             2   13[BANK0 ] unsigned short 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  2    0[BANK0 ] unsigned short 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4269 ;;      Params:         0       3       0       0       0       0
  4270 ;;      Locals:         0       4       0       0       0       0
  4271 ;;      Temps:          0      10       0       0       0       0
  4272 ;;      Totals:         0      17       0       0       0       0
  4273 ;;Total ram usage:       17 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    6
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_load_calibration_from_EEPROM
  4280 ;;		_write_calibration_to_EEPROM
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _crc_update
  4286  0731                     _crc_update:	
  4287                           
  4288                           ;CRC.c: 13: unsigned short crc;
  4289                           ;CRC.c: 14: unsigned short x;
  4290                           ;CRC.c: 16: x = ((old_crc>>8) ^ data) & 0xff;
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _crc_update: [wreg+status,2+status,0]
  4294  0731  0020               	movlb	0	; select bank0
  4295  0732  0822               	movf	crc_update@data,w
  4296  0733  00A3               	movwf	??_crc_update
  4297  0734  01A4               	clrf	??_crc_update+1
  4298  0735  0821               	movf	crc_update@old_crc+1,w
  4299  0736  00A6               	movwf	??_crc_update+3
  4300  0737  0820               	movf	crc_update@old_crc,w
  4301  0738  00A5               	movwf	??_crc_update+2
  4302  0739  0826               	movf	??_crc_update+3,w
  4303  073A  00A5               	movwf	??_crc_update+2
  4304  073B  01A6               	clrf	??_crc_update+3
  4305  073C  0823               	movf	??_crc_update,w
  4306  073D  0625               	xorwf	??_crc_update+2,w
  4307  073E  00A7               	movwf	??_crc_update+4
  4308  073F  0824               	movf	??_crc_update+1,w
  4309  0740  0626               	xorwf	??_crc_update+3,w
  4310  0741  00A8               	movwf	??_crc_update+5
  4311  0742  30FF               	movlw	255
  4312  0743  0527               	andwf	??_crc_update+4,w
  4313  0744  00AF               	movwf	crc_update@x
  4314  0745  3000               	movlw	0
  4315  0746  0528               	andwf	??_crc_update+5,w
  4316  0747  00B0               	movwf	crc_update@x+1
  4317                           
  4318                           ;CRC.c: 17: x ^= x>>4;
  4319  0748  0830               	movf	crc_update@x+1,w
  4320  0749  00A4               	movwf	??_crc_update+1
  4321  074A  082F               	movf	crc_update@x,w
  4322  074B  00A3               	movwf	??_crc_update
  4323  074C  3004               	movlw	4
  4324  074D                     u3485:	
  4325  074D  36A4               	lsrf	??_crc_update+1,f
  4326  074E  0CA3               	rrf	??_crc_update,f
  4327  074F  0B89               	decfsz	9,f
  4328  0750  2F4D               	goto	u3485
  4329  0751  0823               	movf	??_crc_update,w
  4330  0752  06AF               	xorwf	crc_update@x,f
  4331  0753  0824               	movf	??_crc_update+1,w
  4332  0754  06B0               	xorwf	crc_update@x+1,f
  4333                           
  4334                           ;CRC.c: 19: crc = (old_crc << 8) ^ (x << 12) ^ (x <<5) ^ x;
  4335  0755  0830               	movf	crc_update@x+1,w
  4336  0756  00A4               	movwf	??_crc_update+1
  4337  0757  082F               	movf	crc_update@x,w
  4338  0758  00A3               	movwf	??_crc_update
  4339  0759  3005               	movlw	5
  4340  075A                     u3495:	
  4341  075A  35A3               	lslf	??_crc_update,f
  4342  075B  0DA4               	rlf	??_crc_update+1,f
  4343  075C  0B89               	decfsz	9,f
  4344  075D  2F5A               	goto	u3495
  4345  075E  0830               	movf	crc_update@x+1,w
  4346  075F  00A6               	movwf	??_crc_update+3
  4347  0760  082F               	movf	crc_update@x,w
  4348  0761  00A5               	movwf	??_crc_update+2
  4349  0762  0E25               	swapf	??_crc_update+2,w
  4350  0763  39F0               	andlw	240
  4351  0764  00A6               	movwf	??_crc_update+3
  4352  0765  01A5               	clrf	??_crc_update+2
  4353  0766  0820               	movf	crc_update@old_crc,w
  4354  0767  00A8               	movwf	??_crc_update+5
  4355  0768  01A7               	clrf	??_crc_update+4
  4356  0769  0825               	movf	??_crc_update+2,w
  4357  076A  0627               	xorwf	??_crc_update+4,w
  4358  076B  00A9               	movwf	??_crc_update+6
  4359  076C  0826               	movf	??_crc_update+3,w
  4360  076D  0628               	xorwf	??_crc_update+5,w
  4361  076E  00AA               	movwf	??_crc_update+7
  4362  076F  0823               	movf	??_crc_update,w
  4363  0770  0629               	xorwf	??_crc_update+6,w
  4364  0771  00AB               	movwf	??_crc_update+8
  4365  0772  0824               	movf	??_crc_update+1,w
  4366  0773  062A               	xorwf	??_crc_update+7,w
  4367  0774  00AC               	movwf	??_crc_update+9
  4368  0775  082F               	movf	crc_update@x,w
  4369  0776  062B               	xorwf	??_crc_update+8,w
  4370  0777  00AD               	movwf	crc_update@crc
  4371  0778  0830               	movf	crc_update@x+1,w
  4372  0779  062C               	xorwf	??_crc_update+9,w
  4373  077A  00AE               	movwf	crc_update@crc+1
  4374                           
  4375                           ;CRC.c: 21: return crc;
  4376  077B  082E               	movf	crc_update@crc+1,w
  4377  077C  00A1               	movwf	?_crc_update+1
  4378  077D  082D               	movf	crc_update@crc,w
  4379  077E  00A0               	movwf	?_crc_update
  4380  077F  0008               	return
  4381  0780                     __end_of_crc_update:	
  4382                           
  4383                           	psect	text8
  4384  0E45                     __ptext8:	
  4385 ;; *************** function _DATAEE_ReadByte *****************
  4386 ;; Defined at:
  4387 ;;		line 204 in file "mcc_generated_files/memory.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  bAdd            1    wreg     unsigned char 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  bAdd            1    4[COMMON] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      unsigned char 
  4394 ;; Registers used:
  4395 ;;		wreg
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4401 ;;      Params:         0       0       0       0       0       0
  4402 ;;      Locals:         1       0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0
  4404 ;;      Totals:         1       0       0       0       0       0
  4405 ;;Total ram usage:        1 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    6
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_load_calibration_from_EEPROM
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           
  4416                           ;psect for function _DATAEE_ReadByte
  4417  0E45                     _DATAEE_ReadByte:	
  4418                           
  4419                           ;incstack = 0
  4420                           ; Regs used in _DATAEE_ReadByte: [wreg]
  4421                           ;DATAEE_ReadByte@bAdd stored from wreg
  4422  0E45  00F4               	movwf	DATAEE_ReadByte@bAdd
  4423                           
  4424                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  4425  0E46  0874               	movf	DATAEE_ReadByte@bAdd,w
  4426  0E47  0023               	movlb	3	; select bank3
  4427  0E48  0091               	movwf	17	;volatile
  4428                           
  4429                           ;memory.c: 207: EECON1bits.CFGS = 0;
  4430  0E49  1315               	bcf	21,6	;volsfr
  4431                           
  4432                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  4433  0E4A  1395               	bcf	21,7	;volsfr
  4434                           
  4435                           ;memory.c: 209: EECON1bits.RD = 1;
  4436  0E4B  1415               	bsf	21,0	;volsfr
  4437                           
  4438                           ;memory.c: 210: __nop();
  4439  0E4C  0000               	nop
  4440                           
  4441                           ;memory.c: 211: __nop();
  4442  0E4D  0000               	nop
  4443                           
  4444                           ;memory.c: 213: return (EEDATL);
  4445  0E4E  0023               	movlb	3	; select bank3
  4446  0E4F  0813               	movf	19,w	;volatile
  4447  0E50  0008               	return
  4448  0E51                     __end_of_DATAEE_ReadByte:	
  4449                           
  4450                           	psect	text9
  4451  0E5F                     __ptext9:	
  4452 ;; *************** function _SYSTEM_Initialize *****************
  4453 ;; Defined at:
  4454 ;;		line 69 in file "mcc_generated_files/mcc.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4468 ;;      Params:         0       0       0       0       0       0
  4469 ;;      Locals:         0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0
  4471 ;;      Totals:         0       0       0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    8
  4475 ;; This function calls:
  4476 ;;		_EPWM1_Initialize
  4477 ;;		_EUSART_Initialize
  4478 ;;		_OSCILLATOR_Initialize
  4479 ;;		_PIN_MANAGER_Initialize
  4480 ;;		_TMR0_Initialize
  4481 ;;		_TMR2_Initialize
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _SYSTEM_Initialize
  4489  0E5F                     _SYSTEM_Initialize:	
  4490                           
  4491                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4495  0E5F  318E  269B  318E   	fcall	_PIN_MANAGER_Initialize
  4496                           
  4497                           ;mcc.c: 73: OSCILLATOR_Initialize();
  4498  0E62  318E  2627  318E   	fcall	_OSCILLATOR_Initialize
  4499                           
  4500                           ;mcc.c: 74: EPWM1_Initialize();
  4501  0E65  318E  2651  318E   	fcall	_EPWM1_Initialize
  4502                           
  4503                           ;mcc.c: 75: TMR2_Initialize();
  4504  0E68  318E  262F  318E   	fcall	_TMR2_Initialize
  4505                           
  4506                           ;mcc.c: 76: TMR0_Initialize();
  4507  0E6B  318E  2686  318E   	fcall	_TMR0_Initialize
  4508                           
  4509                           ;mcc.c: 77: EUSART_Initialize();
  4510  0E6E  318E  26CD         	fcall	_EUSART_Initialize
  4511  0E70  0008               	return
  4512  0E71                     __end_of_SYSTEM_Initialize:	
  4513                           
  4514                           	psect	text10
  4515  0E2F                     __ptext10:	
  4516 ;; *************** function _TMR2_Initialize *****************
  4517 ;; Defined at:
  4518 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;		None
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      void 
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4532 ;;      Params:         0       0       0       0       0       0
  4533 ;;      Locals:         0       0       0       0       0       0
  4534 ;;      Temps:          0       0       0       0       0       0
  4535 ;;      Totals:         0       0       0       0       0       0
  4536 ;;Total ram usage:        0 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    7
  4539 ;; This function calls:
  4540 ;;		_TMR2_StartTimer
  4541 ;; This function is called by:
  4542 ;;		_SYSTEM_Initialize
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _TMR2_Initialize
  4548  0E2F                     _TMR2_Initialize:	
  4549                           
  4550                           ;tmr2.c: 62: T2CON = 0x02;
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4554  0E2F  3002               	movlw	2
  4555  0E30  0020               	movlb	0	; select bank0
  4556  0E31  009C               	movwf	28	;volatile
  4557                           
  4558                           ;tmr2.c: 65: PR2 = 0xFF;
  4559  0E32  30FF               	movlw	255
  4560  0E33  009B               	movwf	27	;volatile
  4561                           
  4562                           ;tmr2.c: 68: TMR2 = 0x00;
  4563  0E34  019A               	clrf	26	;volatile
  4564                           
  4565                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  4566  0E35  1091               	bcf	17,1	;volatile
  4567                           
  4568                           ;tmr2.c: 74: TMR2_StartTimer();
  4569  0E36  318E  2606         	fcall	_TMR2_StartTimer
  4570  0E38  0008               	return
  4571  0E39                     __end_of_TMR2_Initialize:	
  4572                           
  4573                           	psect	text11
  4574  0E06                     __ptext11:	
  4575 ;; *************** function _TMR2_StartTimer *****************
  4576 ;; Defined at:
  4577 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		None
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4591 ;;      Params:         0       0       0       0       0       0
  4592 ;;      Locals:         0       0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0
  4594 ;;      Totals:         0       0       0       0       0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    6
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_TMR2_Initialize
  4602 ;;		_main
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _TMR2_StartTimer
  4608  0E06                     _TMR2_StartTimer:	
  4609                           
  4610                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in _TMR2_StartTimer: []
  4614  0E06  0020               	movlb	0	; select bank0
  4615  0E07  151C               	bsf	28,2	;volatile
  4616  0E08  0008               	return
  4617  0E09                     __end_of_TMR2_StartTimer:	
  4618                           
  4619                           	psect	text12
  4620  0E86                     __ptext12:	
  4621 ;; *************** function _TMR0_Initialize *****************
  4622 ;; Defined at:
  4623 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;		None
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  1    wreg      void 
  4630 ;; Registers used:
  4631 ;;		wreg, status,2, status,0, pclath, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4637 ;;      Params:         0       0       0       0       0       0
  4638 ;;      Locals:         0       0       0       0       0       0
  4639 ;;      Temps:          0       1       0       0       0       0
  4640 ;;      Totals:         0       1       0       0       0       0
  4641 ;;Total ram usage:        1 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    7
  4644 ;; This function calls:
  4645 ;;		_TMR0_SetInterruptHandler
  4646 ;; This function is called by:
  4647 ;;		_SYSTEM_Initialize
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           
  4652                           ;psect for function _TMR0_Initialize
  4653  0E86                     _TMR0_Initialize:	
  4654                           
  4655                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4656                           
  4657                           ;incstack = 0
  4658                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4659  0E86  0021               	movlb	1	; select bank1
  4660  0E87  0815               	movf	21,w	;volatile
  4661  0E88  39C0               	andlw	192
  4662  0E89  3817               	iorlw	23
  4663  0E8A  0095               	movwf	21	;volatile
  4664                           
  4665                           ;tmr0.c: 71: TMR0 = 0x64;
  4666  0E8B  3064               	movlw	100
  4667  0E8C  0020               	movlb	0	; select bank0
  4668  0E8D  0095               	movwf	21	;volatile
  4669                           
  4670                           ;tmr0.c: 74: timer0ReloadVal= 100;
  4671  0E8E  3064               	movlw	100
  4672  0E8F  00A0               	movwf	??_TMR0_Initialize
  4673  0E90  0820               	movf	??_TMR0_Initialize,w
  4674  0E91  00F9               	movwf	_timer0ReloadVal	;volatile
  4675                           
  4676                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  4677  0E92  110B               	bcf	11,2	;volatile
  4678                           
  4679                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  4680  0E93  168B               	bsf	11,5	;volatile
  4681                           
  4682                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4683  0E94  3003               	movlw	low _TMR0_DefaultInterruptHandler
  4684  0E95  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4685  0E96  3000               	movlw	high _TMR0_DefaultInterruptHandler
  4686  0E97  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4687  0E98  318E  2615         	fcall	_TMR0_SetInterruptHandler
  4688  0E9A  0008               	return
  4689  0E9B                     __end_of_TMR0_Initialize:	
  4690                           
  4691                           	psect	text13
  4692  0E15                     __ptext13:	
  4693 ;; *************** function _TMR0_SetInterruptHandler *****************
  4694 ;; Defined at:
  4695 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  InterruptHan    2    4[COMMON] PTR void 
  4698 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4710 ;;      Params:         2       0       0       0       0       0
  4711 ;;      Locals:         0       0       0       0       0       0
  4712 ;;      Temps:          0       0       0       0       0       0
  4713 ;;      Totals:         2       0       0       0       0       0
  4714 ;;Total ram usage:        2 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    6
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_TMR0_Initialize
  4721 ;;		_main
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           
  4726                           ;psect for function _TMR0_SetInterruptHandler
  4727  0E15                     _TMR0_SetInterruptHandler:	
  4728                           
  4729                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  4730                           
  4731                           ;incstack = 0
  4732                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4733  0E15  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4734  0E16  0020               	movlb	0	; select bank0
  4735  0E17  00E1               	movwf	_TMR0_InterruptHandler+1
  4736  0E18  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4737  0E19  00E0               	movwf	_TMR0_InterruptHandler
  4738  0E1A  0008               	return
  4739  0E1B                     __end_of_TMR0_SetInterruptHandler:	
  4740                           
  4741                           	psect	text14
  4742  0E9B                     __ptext14:	
  4743 ;; *************** function _PIN_MANAGER_Initialize *****************
  4744 ;; Defined at:
  4745 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;		None
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4759 ;;      Params:         0       0       0       0       0       0
  4760 ;;      Locals:         0       0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0
  4762 ;;      Totals:         0       0       0       0       0       0
  4763 ;;Total ram usage:        0 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    6
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_SYSTEM_Initialize
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           
  4774                           ;psect for function _PIN_MANAGER_Initialize
  4775  0E9B                     _PIN_MANAGER_Initialize:	
  4776                           
  4777                           ;pin_manager.c: 51: LATB = 0x0;
  4778                           
  4779                           ;incstack = 0
  4780                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4781  0E9B  0022               	movlb	2	; select bank2
  4782  0E9C  018D               	clrf	13	;volatile
  4783                           
  4784                           ;pin_manager.c: 52: LATA = 0x0;
  4785  0E9D  018C               	clrf	12	;volatile
  4786                           
  4787                           ;pin_manager.c: 53: ANSELA = 0x1F;
  4788  0E9E  301F               	movlw	31
  4789  0E9F  0023               	movlb	3	; select bank3
  4790  0EA0  008C               	movwf	12	;volatile
  4791                           
  4792                           ;pin_manager.c: 54: ANSELB = 0xF0;
  4793  0EA1  30F0               	movlw	240
  4794  0EA2  008D               	movwf	13	;volatile
  4795                           
  4796                           ;pin_manager.c: 55: WPUA = 0x20;
  4797  0EA3  3020               	movlw	32
  4798  0EA4  0024               	movlb	4	; select bank4
  4799  0EA5  008C               	movwf	12	;volatile
  4800                           
  4801                           ;pin_manager.c: 56: WPUB = 0xFF;
  4802  0EA6  30FF               	movlw	255
  4803  0EA7  008D               	movwf	13	;volatile
  4804                           
  4805                           ;pin_manager.c: 57: TRISB = 0xF7;
  4806  0EA8  30F7               	movlw	247
  4807  0EA9  0021               	movlb	1	; select bank1
  4808  0EAA  008D               	movwf	13	;volatile
  4809                           
  4810                           ;pin_manager.c: 58: TRISA = 0xFB;
  4811  0EAB  30FB               	movlw	251
  4812  0EAC  008C               	movwf	12	;volatile
  4813                           
  4814                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  4815  0EAD  1395               	bcf	21,7	;volatile
  4816                           
  4817                           ;pin_manager.c: 61: APFCON0 = 0x00;
  4818  0EAE  0022               	movlb	2	; select bank2
  4819  0EAF  019D               	clrf	29	;volatile
  4820                           
  4821                           ;pin_manager.c: 62: APFCON1 = 0x00;
  4822  0EB0  019E               	clrf	30	;volatile
  4823  0EB1  0008               	return
  4824  0EB2                     __end_of_PIN_MANAGER_Initialize:	
  4825                           
  4826                           	psect	text15
  4827  0E27                     __ptext15:	
  4828 ;; *************** function _OSCILLATOR_Initialize *****************
  4829 ;; Defined at:
  4830 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;		None
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4844 ;;      Params:         0       0       0       0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0
  4846 ;;      Temps:          0       0       0       0       0       0
  4847 ;;      Totals:         0       0       0       0       0       0
  4848 ;;Total ram usage:        0 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:    6
  4851 ;; This function calls:
  4852 ;;		Nothing
  4853 ;; This function is called by:
  4854 ;;		_SYSTEM_Initialize
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           
  4859                           ;psect for function _OSCILLATOR_Initialize
  4860  0E27                     _OSCILLATOR_Initialize:	
  4861                           
  4862                           ;mcc.c: 83: OSCCON = 0x70;
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4866  0E27  3070               	movlw	112
  4867  0E28  0021               	movlb	1	; select bank1
  4868  0E29  0099               	movwf	25	;volatile
  4869                           
  4870                           ;mcc.c: 85: OSCSTAT = 0x00;
  4871  0E2A  019A               	clrf	26	;volatile
  4872                           
  4873                           ;mcc.c: 87: OSCTUNE = 0x00;
  4874  0E2B  0198               	clrf	24	;volatile
  4875  0E2C                     l28:	
  4876                           ;mcc.c: 92: {
  4877                           
  4878                           ;mcc.c: 91: while(PLLR == 0)
  4879                           
  4880  0E2C  1B1A               	btfsc	26,6	;volatile
  4881  0E2D  0008               	return
  4882  0E2E  2E2C               	goto	l28
  4883  0E2F                     __end_of_OSCILLATOR_Initialize:	
  4884                           
  4885                           	psect	text16
  4886  0ECD                     __ptext16:	
  4887 ;; *************** function _EUSART_Initialize *****************
  4888 ;; Defined at:
  4889 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;		None
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4903 ;;      Params:         0       0       0       0       0       0
  4904 ;;      Locals:         0       0       0       0       0       0
  4905 ;;      Temps:          1       0       0       0       0       0
  4906 ;;      Totals:         1       0       0       0       0       0
  4907 ;;Total ram usage:        1 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    6
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_SYSTEM_Initialize
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _EUSART_Initialize
  4919  0ECD                     _EUSART_Initialize:	
  4920                           
  4921                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4925  0ECD  0021               	movlb	1	; select bank1
  4926  0ECE  1291               	bcf	17,5	;volatile
  4927                           
  4928                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4929  0ECF  1211               	bcf	17,4	;volatile
  4930                           
  4931                           ;eusart.c: 84: BAUDCON = 0x08;
  4932  0ED0  3008               	movlw	8
  4933  0ED1  0023               	movlb	3	; select bank3
  4934  0ED2  009F               	movwf	31	;volatile
  4935                           
  4936                           ;eusart.c: 87: RCSTA = 0x90;
  4937  0ED3  3090               	movlw	144
  4938  0ED4  009D               	movwf	29	;volatile
  4939                           
  4940                           ;eusart.c: 90: TXSTA = 0x24;
  4941  0ED5  3024               	movlw	36
  4942  0ED6  009E               	movwf	30	;volatile
  4943                           
  4944                           ;eusart.c: 93: SPBRGL = 0x40;
  4945  0ED7  3040               	movlw	64
  4946  0ED8  009B               	movwf	27	;volatile
  4947                           
  4948                           ;eusart.c: 96: SPBRGH = 0x03;
  4949  0ED9  3003               	movlw	3
  4950  0EDA  009C               	movwf	28	;volatile
  4951                           
  4952                           ;eusart.c: 100: eusartTxHead = 0;
  4953  0EDB  0020               	movlb	0	; select bank0
  4954  0EDC  01E5               	clrf	_eusartTxHead
  4955                           
  4956                           ;eusart.c: 101: eusartTxTail = 0;
  4957  0EDD  01E6               	clrf	_eusartTxTail
  4958                           
  4959                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4960  0EDE  3008               	movlw	8
  4961  0EDF  00F4               	movwf	??_EUSART_Initialize
  4962  0EE0  0874               	movf	??_EUSART_Initialize,w
  4963  0EE1  00E4               	movwf	_eusartTxBufferRemaining	;volatile
  4964                           
  4965                           ;eusart.c: 104: eusartRxHead = 0;
  4966  0EE2  01E2               	clrf	_eusartRxHead
  4967                           
  4968                           ;eusart.c: 105: eusartRxTail = 0;
  4969  0EE3  01E3               	clrf	_eusartRxTail
  4970                           
  4971                           ;eusart.c: 106: eusartRxCount = 0;
  4972  0EE4  01F8               	clrf	_eusartRxCount	;volatile
  4973                           
  4974                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4975  0EE5  0021               	movlb	1	; select bank1
  4976  0EE6  1691               	bsf	17,5	;volatile
  4977  0EE7  0008               	return
  4978  0EE8                     __end_of_EUSART_Initialize:	
  4979                           
  4980                           	psect	text17
  4981  0E51                     __ptext17:	
  4982 ;; *************** function _EPWM1_Initialize *****************
  4983 ;; Defined at:
  4984 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4998 ;;      Params:         0       0       0       0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0
  5000 ;;      Temps:          0       0       0       0       0       0
  5001 ;;      Totals:         0       0       0       0       0       0
  5002 ;;Total ram usage:        0 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    6
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_SYSTEM_Initialize
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _EPWM1_Initialize
  5014  0E51                     _EPWM1_Initialize:	
  5015                           
  5016                           ;epwm1.c: 68: CCP1CON = 0x3C;
  5017                           
  5018                           ;incstack = 0
  5019                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
  5020  0E51  303C               	movlw	60
  5021  0E52  0025               	movlb	5	; select bank5
  5022  0E53  0093               	movwf	19	;volatile
  5023                           
  5024                           ;epwm1.c: 71: ECCP1AS = 0x00;
  5025  0E54  0195               	clrf	21	;volatile
  5026                           
  5027                           ;epwm1.c: 74: PWM1CON = 0x80;
  5028  0E55  3080               	movlw	128
  5029  0E56  0094               	movwf	20	;volatile
  5030                           
  5031                           ;epwm1.c: 77: PSTR1CON = 0x01;
  5032  0E57  3001               	movlw	1
  5033  0E58  0096               	movwf	22	;volatile
  5034                           
  5035                           ;epwm1.c: 80: CCPR1L = 0x7F;
  5036  0E59  307F               	movlw	127
  5037  0E5A  0091               	movwf	17	;volatile
  5038                           
  5039                           ;epwm1.c: 83: CCPR1H = 0x00;
  5040  0E5B  0192               	clrf	18	;volatile
  5041                           
  5042                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  5043  0E5C  30FC               	movlw	-4
  5044  0E5D  059E               	andwf	30,f	;volatile
  5045  0E5E  0008               	return
  5046  0E5F                     __end_of_EPWM1_Initialize:	
  5047                           
  5048                           	psect	text18
  5049  0F5A                     __ptext18:	
  5050 ;; *************** function _LED_set_state *****************
  5051 ;; Defined at:
  5052 ;;		line 14 in file "interact.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  new_state       1    wreg     enum E2938
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  new_state       1    5[COMMON] enum E2938
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      void 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5066 ;;      Params:         0       0       0       0       0       0
  5067 ;;      Locals:         1       0       0       0       0       0
  5068 ;;      Temps:          1       0       0       0       0       0
  5069 ;;      Totals:         2       0       0       0       0       0
  5070 ;;Total ram usage:        2 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    6
  5073 ;; This function calls:
  5074 ;;		Nothing
  5075 ;; This function is called by:
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           
  5081                           ;psect for function _LED_set_state
  5082  0F5A                     _LED_set_state:	
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  5086                           ;LED_set_state@new_state stored from wreg
  5087  0F5A  00F5               	movwf	LED_set_state@new_state
  5088                           
  5089                           ;interact.c: 16: m_LED.state = new_state;
  5090  0F5B  0875               	movf	LED_set_state@new_state,w
  5091  0F5C  00F4               	movwf	??_LED_set_state
  5092  0F5D  0874               	movf	??_LED_set_state,w
  5093  0F5E  00F6               	movwf	_m_LED	;volatile
  5094                           
  5095                           ;interact.c: 17: m_LED.counter = 0;
  5096  0F5F  01F7               	clrf	_m_LED+1	;volatile
  5097                           
  5098                           ;interact.c: 18: if (new_state == always_off)
  5099  0F60  0375               	decf	LED_set_state@new_state,w
  5100  0F61  1D03               	btfss	3,2
  5101  0F62  2F66               	goto	l3600
  5102                           
  5103                           ;interact.c: 19: do { LATA2 = 0; } while(0);
  5104  0F63  0022               	movlb	2	; select bank2
  5105  0F64  110C               	bcf	12,2	;volatile
  5106  0F65  0008               	return
  5107  0F66                     l3600:	
  5108                           
  5109                           ;interact.c: 20: else if (new_state == always_on)
  5110  0F66  0875               	movf	LED_set_state@new_state,w
  5111  0F67  1D03               	btfss	3,2
  5112  0F68  2F6C               	goto	l3602
  5113                           
  5114                           ;interact.c: 21: do { LATA2 = 1; } while(0);
  5115  0F69  0022               	movlb	2	; select bank2
  5116  0F6A  150C               	bsf	12,2	;volatile
  5117  0F6B  0008               	return
  5118  0F6C                     l3602:	
  5119                           
  5120                           ;interact.c: 22: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  5121  0F6C  3002               	movlw	2
  5122  0F6D  0675               	xorwf	LED_set_state@new_state,w
  5123  0F6E  1903               	btfsc	3,2
  5124  0F6F  2F74               	goto	l417
  5125  0F70  3003               	movlw	3
  5126  0F71  0675               	xorwf	LED_set_state@new_state,w
  5127  0F72  1D03               	btfss	3,2
  5128  0F73  0008               	return
  5129  0F74                     l417:	
  5130                           ;interact.c: 23: do { LATA2 = 1; } while(0);
  5131                           
  5132  0F74  0022               	movlb	2	; select bank2
  5133  0F75  150C               	bsf	12,2	;volatile
  5134  0F76  0008               	return
  5135  0F77                     __end_of_LED_set_state:	
  5136                           
  5137                           	psect	text19
  5138  0042                     __ptext19:	
  5139 ;; *************** function _GPS_read_speed *****************
  5140 ;; Defined at:
  5141 ;;		line 23 in file "GPS.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  buffer          6   31[BANK0 ] unsigned char [6]
  5146 ;;  read_speed_f    2   27[BANK0 ] unsigned short 
  5147 ;;  read_speed_i    2   25[BANK0 ] unsigned short 
  5148 ;;  m_char          1   39[BANK0 ] unsigned char 
  5149 ;;  i_buff          1   38[BANK0 ] unsigned char 
  5150 ;;  i_buff2         1   37[BANK0 ] unsigned char 
  5151 ;;  checksum        1   30[BANK0 ] unsigned char 
  5152 ;;  checksum2       1   29[BANK0 ] unsigned char 
  5153 ;;  no_more_chec    1   24[BANK0 ] unsigned char 
  5154 ;;  before_dot      1   23[BANK0 ] unsigned char 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      unsigned char 
  5157 ;; Registers used:
  5158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5164 ;;      Params:         0       0       0       0       0       0
  5165 ;;      Locals:         0      17       0       0       0       0
  5166 ;;      Temps:          0       2       0       0       0       0
  5167 ;;      Totals:         0      19       0       0       0       0
  5168 ;;Total ram usage:       19 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    7
  5171 ;; This function calls:
  5172 ;;		_EUSART_Read
  5173 ;;		___wmul
  5174 ;;		_convert_to_fp
  5175 ;; This function is called by:
  5176 ;;		_main
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function _GPS_read_speed
  5182  0042                     _GPS_read_speed:	
  5183                           
  5184                           ;GPS.c: 27: unsigned char buffer[6];
  5185                           ;GPS.c: 28: unsigned char i_buff = 0;
  5186                           
  5187                           ;incstack = 0
  5188                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5189  0042  0020               	movlb	0	; select bank0
  5190  0043  01C6               	clrf	GPS_read_speed@i_buff
  5191                           
  5192                           ;GPS.c: 29: unsigned char checksum = 0x00;
  5193  0044  01BE               	clrf	GPS_read_speed@checksum
  5194                           
  5195                           ;GPS.c: 31: unsigned char m_char = 0x00;
  5196  0045  01C7               	clrf	GPS_read_speed@m_char
  5197  0046                     l3630:	
  5198                           ;GPS.c: 32: while (m_char != '$')
  5199                           
  5200  0046  3024               	movlw	36
  5201  0047  0647               	xorwf	GPS_read_speed@m_char,w
  5202  0048  1903               	btfsc	3,2
  5203  0049  2855               	goto	l3632
  5204                           
  5205                           ;GPS.c: 33: if(eusartRxCount!=0)
  5206  004A  0878               	movf	_eusartRxCount,w	;volatile
  5207  004B  1903               	btfsc	3,2
  5208  004C  2846               	goto	l3630
  5209                           
  5210                           ;GPS.c: 34: m_char=EUSART_Read();
  5211  004D  318F  2777  3180   	fcall	_EUSART_Read
  5212  0050  0020               	movlb	0	; select bank0
  5213  0051  00B5               	movwf	??_GPS_read_speed
  5214  0052  0835               	movf	??_GPS_read_speed,w
  5215  0053  00C7               	movwf	GPS_read_speed@m_char
  5216  0054  2846               	goto	l3630
  5217  0055                     l3632:	
  5218                           ;GPS.c: 38: while (1)
  5219                           
  5220                           
  5221                           ;GPS.c: 39: if (eusartRxCount!=0)
  5222  0055  0878               	movf	_eusartRxCount,w	;volatile
  5223  0056  1903               	btfsc	3,2
  5224  0057  2855               	goto	l3632
  5225                           
  5226                           ;GPS.c: 40: {
  5227                           ;GPS.c: 41: m_char=EUSART_Read();
  5228  0058  318F  2777  3180   	fcall	_EUSART_Read
  5229  005B  0020               	movlb	0	; select bank0
  5230  005C  00B5               	movwf	??_GPS_read_speed
  5231  005D  0835               	movf	??_GPS_read_speed,w
  5232  005E  00C7               	movwf	GPS_read_speed@m_char
  5233                           
  5234                           ;GPS.c: 42: checksum ^= m_char;
  5235  005F  0847               	movf	GPS_read_speed@m_char,w
  5236  0060  00B5               	movwf	??_GPS_read_speed
  5237  0061  0835               	movf	??_GPS_read_speed,w
  5238  0062  06BE               	xorwf	GPS_read_speed@checksum,f
  5239                           
  5240                           ;GPS.c: 43: if (m_char == ',')
  5241  0063  302C               	movlw	44
  5242  0064  0647               	xorwf	GPS_read_speed@m_char,w
  5243  0065  1903               	btfsc	3,2
  5244  0066  2879               	goto	l3654
  5245                           
  5246                           ;GPS.c: 45: else
  5247                           ;GPS.c: 46: {
  5248                           ;GPS.c: 47: buffer[i_buff++] = m_char;
  5249                           
  5250                           ;GPS.c: 44: break;
  5251  0067  0847               	movf	GPS_read_speed@m_char,w
  5252  0068  00B5               	movwf	??_GPS_read_speed
  5253  0069  0846               	movf	GPS_read_speed@i_buff,w
  5254  006A  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5255  006B  0086               	movwf	6
  5256  006C  0187               	clrf	7
  5257  006D  0835               	movf	??_GPS_read_speed,w
  5258  006E  0081               	movwf	1
  5259  006F  3001               	movlw	1
  5260  0070  00B5               	movwf	??_GPS_read_speed
  5261  0071  0835               	movf	??_GPS_read_speed,w
  5262  0072  07C6               	addwf	GPS_read_speed@i_buff,f
  5263                           
  5264                           ;GPS.c: 48: if (i_buff >= 6)
  5265  0073  3006               	movlw	6
  5266  0074  0246               	subwf	GPS_read_speed@i_buff,w
  5267  0075  1C03               	skipc
  5268  0076  2855               	goto	l3632
  5269                           
  5270                           ;GPS.c: 49: return 0;
  5271  0077  3000               	movlw	0
  5272  0078  0008               	return
  5273  0079                     l3654:	
  5274                           
  5275                           ;GPS.c: 50: }
  5276                           ;GPS.c: 51: }
  5277                           ;GPS.c: 53: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  5278  0079  3047               	movlw	71
  5279  007A  063F               	xorwf	GPS_read_speed@buffer,w
  5280  007B  1D03               	btfss	3,2
  5281  007C  288D               	goto	l3664
  5282  007D  3050               	movlw	80
  5283  007E  0640               	xorwf	GPS_read_speed@buffer+1,w
  5284  007F  1D03               	btfss	3,2
  5285  0080  288D               	goto	l3664
  5286  0081  3056               	movlw	86
  5287  0082  0641               	xorwf	GPS_read_speed@buffer+2,w
  5288  0083  1D03               	btfss	3,2
  5289  0084  288D               	goto	l3664
  5290  0085  3054               	movlw	84
  5291  0086  0642               	xorwf	GPS_read_speed@buffer+3,w
  5292  0087  1D03               	btfss	3,2
  5293  0088  288D               	goto	l3664
  5294  0089  3047               	movlw	71
  5295  008A  0643               	xorwf	GPS_read_speed@buffer+4,w
  5296  008B  1903               	btfsc	3,2
  5297  008C  288F               	goto	l3668
  5298  008D                     l3664:	
  5299                           
  5300                           ;GPS.c: 54: return 0;
  5301  008D  3000               	movlw	0
  5302  008E  0008               	return
  5303  008F                     l3668:	
  5304                           
  5305                           ;GPS.c: 55: i_buff = 0;
  5306  008F  01C6               	clrf	GPS_read_speed@i_buff
  5307  0090                     l3670:	
  5308                           ;GPS.c: 58: while (1)
  5309                           
  5310                           
  5311                           ;GPS.c: 59: if (eusartRxCount!=0)
  5312  0090  0878               	movf	_eusartRxCount,w	;volatile
  5313  0091  1903               	btfsc	3,2
  5314  0092  2890               	goto	l3670
  5315                           
  5316                           ;GPS.c: 60: {
  5317                           ;GPS.c: 61: m_char=EUSART_Read();
  5318  0093  318F  2777  3180   	fcall	_EUSART_Read
  5319  0096  0020               	movlb	0	; select bank0
  5320  0097  00B5               	movwf	??_GPS_read_speed
  5321  0098  0835               	movf	??_GPS_read_speed,w
  5322  0099  00C7               	movwf	GPS_read_speed@m_char
  5323                           
  5324                           ;GPS.c: 62: checksum ^= m_char;
  5325  009A  0847               	movf	GPS_read_speed@m_char,w
  5326  009B  00B5               	movwf	??_GPS_read_speed
  5327  009C  0835               	movf	??_GPS_read_speed,w
  5328  009D  06BE               	xorwf	GPS_read_speed@checksum,f
  5329                           
  5330                           ;GPS.c: 63: if (m_char == ',')
  5331  009E  302C               	movlw	44
  5332  009F  0647               	xorwf	GPS_read_speed@m_char,w
  5333  00A0  1D03               	btfss	3,2
  5334  00A1  2890               	goto	l3670
  5335  00A2                     l3680:	
  5336                           ;GPS.c: 65: }
  5337                           ;GPS.c: 67: while (1)
  5338                           
  5339                           ;GPS.c: 64: break;
  5340                           
  5341                           
  5342                           ;GPS.c: 68: if (eusartRxCount!=0)
  5343  00A2  0878               	movf	_eusartRxCount,w	;volatile
  5344  00A3  1903               	btfsc	3,2
  5345  00A4  28A2               	goto	l3680
  5346                           
  5347                           ;GPS.c: 69: {
  5348                           ;GPS.c: 70: m_char=EUSART_Read();
  5349  00A5  318F  2777  3180   	fcall	_EUSART_Read
  5350  00A8  0020               	movlb	0	; select bank0
  5351  00A9  00B5               	movwf	??_GPS_read_speed
  5352  00AA  0835               	movf	??_GPS_read_speed,w
  5353  00AB  00C7               	movwf	GPS_read_speed@m_char
  5354                           
  5355                           ;GPS.c: 71: checksum ^= m_char;
  5356  00AC  0847               	movf	GPS_read_speed@m_char,w
  5357  00AD  00B5               	movwf	??_GPS_read_speed
  5358  00AE  0835               	movf	??_GPS_read_speed,w
  5359  00AF  06BE               	xorwf	GPS_read_speed@checksum,f
  5360                           
  5361                           ;GPS.c: 72: if (m_char == ',')
  5362  00B0  302C               	movlw	44
  5363  00B1  0647               	xorwf	GPS_read_speed@m_char,w
  5364  00B2  1903               	btfsc	3,2
  5365  00B3  28C6               	goto	l3702
  5366                           
  5367                           ;GPS.c: 74: else
  5368                           ;GPS.c: 75: {
  5369                           ;GPS.c: 76: buffer[i_buff++] = m_char;
  5370                           
  5371                           ;GPS.c: 73: break;
  5372  00B4  0847               	movf	GPS_read_speed@m_char,w
  5373  00B5  00B5               	movwf	??_GPS_read_speed
  5374  00B6  0846               	movf	GPS_read_speed@i_buff,w
  5375  00B7  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5376  00B8  0086               	movwf	6
  5377  00B9  0187               	clrf	7
  5378  00BA  0835               	movf	??_GPS_read_speed,w
  5379  00BB  0081               	movwf	1
  5380  00BC  3001               	movlw	1
  5381  00BD  00B5               	movwf	??_GPS_read_speed
  5382  00BE  0835               	movf	??_GPS_read_speed,w
  5383  00BF  07C6               	addwf	GPS_read_speed@i_buff,f
  5384                           
  5385                           ;GPS.c: 77: if (i_buff >= 6)
  5386  00C0  3006               	movlw	6
  5387  00C1  0246               	subwf	GPS_read_speed@i_buff,w
  5388  00C2  1C03               	skipc
  5389  00C3  28A2               	goto	l3680
  5390                           
  5391                           ;GPS.c: 78: return 0;
  5392  00C4  3000               	movlw	0
  5393  00C5  0008               	return
  5394  00C6                     l3702:	
  5395                           
  5396                           ;GPS.c: 79: }
  5397                           ;GPS.c: 80: }
  5398                           ;GPS.c: 81: if ((buffer[0] != 'T')||(i_buff != 1))
  5399  00C6  3054               	movlw	84
  5400  00C7  063F               	xorwf	GPS_read_speed@buffer,w
  5401  00C8  1903               	btfsc	3,2
  5402  00C9  0346               	decf	GPS_read_speed@i_buff,w
  5403  00CA  1903               	btfsc	3,2
  5404  00CB  28CE               	goto	l3710
  5405                           
  5406                           ;GPS.c: 82: return 0;
  5407  00CC  3000               	movlw	0
  5408  00CD  0008               	return
  5409  00CE                     l3710:	
  5410                           
  5411                           ;GPS.c: 83: i_buff = 0;
  5412  00CE  01C6               	clrf	GPS_read_speed@i_buff
  5413  00CF                     l3712:	
  5414                           ;GPS.c: 86: while (1)
  5415                           
  5416                           
  5417                           ;GPS.c: 87: if (eusartRxCount!=0)
  5418  00CF  0878               	movf	_eusartRxCount,w	;volatile
  5419  00D0  1903               	btfsc	3,2
  5420  00D1  28CF               	goto	l3712
  5421                           
  5422                           ;GPS.c: 88: {
  5423                           ;GPS.c: 89: m_char=EUSART_Read();
  5424  00D2  318F  2777  3180   	fcall	_EUSART_Read
  5425  00D5  0020               	movlb	0	; select bank0
  5426  00D6  00B5               	movwf	??_GPS_read_speed
  5427  00D7  0835               	movf	??_GPS_read_speed,w
  5428  00D8  00C7               	movwf	GPS_read_speed@m_char
  5429                           
  5430                           ;GPS.c: 90: checksum ^= m_char;
  5431  00D9  0847               	movf	GPS_read_speed@m_char,w
  5432  00DA  00B5               	movwf	??_GPS_read_speed
  5433  00DB  0835               	movf	??_GPS_read_speed,w
  5434  00DC  06BE               	xorwf	GPS_read_speed@checksum,f
  5435                           
  5436                           ;GPS.c: 91: if (m_char == ',')
  5437  00DD  302C               	movlw	44
  5438  00DE  0647               	xorwf	GPS_read_speed@m_char,w
  5439  00DF  1D03               	btfss	3,2
  5440  00E0  28CF               	goto	l3712
  5441  00E1                     l3722:	
  5442                           ;GPS.c: 93: }
  5443                           ;GPS.c: 95: while (1)
  5444                           
  5445                           ;GPS.c: 92: break;
  5446                           
  5447                           
  5448                           ;GPS.c: 96: if (eusartRxCount!=0)
  5449  00E1  0878               	movf	_eusartRxCount,w	;volatile
  5450  00E2  1903               	btfsc	3,2
  5451  00E3  28E1               	goto	l3722
  5452                           
  5453                           ;GPS.c: 97: {
  5454                           ;GPS.c: 98: m_char=EUSART_Read();
  5455  00E4  318F  2777  3180   	fcall	_EUSART_Read
  5456  00E7  0020               	movlb	0	; select bank0
  5457  00E8  00B5               	movwf	??_GPS_read_speed
  5458  00E9  0835               	movf	??_GPS_read_speed,w
  5459  00EA  00C7               	movwf	GPS_read_speed@m_char
  5460                           
  5461                           ;GPS.c: 99: checksum ^= m_char;
  5462  00EB  0847               	movf	GPS_read_speed@m_char,w
  5463  00EC  00B5               	movwf	??_GPS_read_speed
  5464  00ED  0835               	movf	??_GPS_read_speed,w
  5465  00EE  06BE               	xorwf	GPS_read_speed@checksum,f
  5466                           
  5467                           ;GPS.c: 100: if (m_char == ',')
  5468  00EF  302C               	movlw	44
  5469  00F0  0647               	xorwf	GPS_read_speed@m_char,w
  5470  00F1  1903               	btfsc	3,2
  5471  00F2  2905               	goto	l3744
  5472                           
  5473                           ;GPS.c: 102: else
  5474                           ;GPS.c: 103: {
  5475                           ;GPS.c: 104: buffer[i_buff++] = m_char;
  5476                           
  5477                           ;GPS.c: 101: break;
  5478  00F3  0847               	movf	GPS_read_speed@m_char,w
  5479  00F4  00B5               	movwf	??_GPS_read_speed
  5480  00F5  0846               	movf	GPS_read_speed@i_buff,w
  5481  00F6  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5482  00F7  0086               	movwf	6
  5483  00F8  0187               	clrf	7
  5484  00F9  0835               	movf	??_GPS_read_speed,w
  5485  00FA  0081               	movwf	1
  5486  00FB  3001               	movlw	1
  5487  00FC  00B5               	movwf	??_GPS_read_speed
  5488  00FD  0835               	movf	??_GPS_read_speed,w
  5489  00FE  07C6               	addwf	GPS_read_speed@i_buff,f
  5490                           
  5491                           ;GPS.c: 105: if (i_buff >= 6)
  5492  00FF  3006               	movlw	6
  5493  0100  0246               	subwf	GPS_read_speed@i_buff,w
  5494  0101  1C03               	skipc
  5495  0102  28E1               	goto	l3722
  5496                           
  5497                           ;GPS.c: 106: return 0;
  5498  0103  3000               	movlw	0
  5499  0104  0008               	return
  5500  0105                     l3744:	
  5501                           
  5502                           ;GPS.c: 107: }
  5503                           ;GPS.c: 108: }
  5504                           ;GPS.c: 109: if ((buffer[0] != 'M')||(i_buff != 1))
  5505  0105  304D               	movlw	77
  5506  0106  063F               	xorwf	GPS_read_speed@buffer,w
  5507  0107  1903               	btfsc	3,2
  5508  0108  0346               	decf	GPS_read_speed@i_buff,w
  5509  0109  1903               	btfsc	3,2
  5510  010A  290D               	goto	l3752
  5511                           
  5512                           ;GPS.c: 110: return 0;
  5513  010B  3000               	movlw	0
  5514  010C  0008               	return
  5515  010D                     l3752:	
  5516                           
  5517                           ;GPS.c: 111: i_buff = 0;
  5518  010D  01C6               	clrf	GPS_read_speed@i_buff
  5519  010E                     l3754:	
  5520                           ;GPS.c: 114: while (1)
  5521                           
  5522                           
  5523                           ;GPS.c: 115: if (eusartRxCount!=0)
  5524  010E  0878               	movf	_eusartRxCount,w	;volatile
  5525  010F  1903               	btfsc	3,2
  5526  0110  290E               	goto	l3754
  5527                           
  5528                           ;GPS.c: 116: {
  5529                           ;GPS.c: 117: m_char=EUSART_Read();
  5530  0111  318F  2777  3180   	fcall	_EUSART_Read
  5531  0114  0020               	movlb	0	; select bank0
  5532  0115  00B5               	movwf	??_GPS_read_speed
  5533  0116  0835               	movf	??_GPS_read_speed,w
  5534  0117  00C7               	movwf	GPS_read_speed@m_char
  5535                           
  5536                           ;GPS.c: 118: checksum ^= m_char;
  5537  0118  0847               	movf	GPS_read_speed@m_char,w
  5538  0119  00B5               	movwf	??_GPS_read_speed
  5539  011A  0835               	movf	??_GPS_read_speed,w
  5540  011B  06BE               	xorwf	GPS_read_speed@checksum,f
  5541                           
  5542                           ;GPS.c: 119: if (m_char == ',')
  5543  011C  302C               	movlw	44
  5544  011D  0647               	xorwf	GPS_read_speed@m_char,w
  5545  011E  1D03               	btfss	3,2
  5546  011F  290E               	goto	l3754
  5547  0120                     l3764:	
  5548                           ;GPS.c: 121: }
  5549                           ;GPS.c: 123: while (1)
  5550                           
  5551                           ;GPS.c: 120: break;
  5552                           
  5553                           
  5554                           ;GPS.c: 124: if (eusartRxCount!=0)
  5555  0120  0878               	movf	_eusartRxCount,w	;volatile
  5556  0121  1903               	btfsc	3,2
  5557  0122  2920               	goto	l3764
  5558                           
  5559                           ;GPS.c: 125: {
  5560                           ;GPS.c: 126: m_char=EUSART_Read();
  5561  0123  318F  2777  3180   	fcall	_EUSART_Read
  5562  0126  0020               	movlb	0	; select bank0
  5563  0127  00B5               	movwf	??_GPS_read_speed
  5564  0128  0835               	movf	??_GPS_read_speed,w
  5565  0129  00C7               	movwf	GPS_read_speed@m_char
  5566                           
  5567                           ;GPS.c: 127: checksum ^= m_char;
  5568  012A  0847               	movf	GPS_read_speed@m_char,w
  5569  012B  00B5               	movwf	??_GPS_read_speed
  5570  012C  0835               	movf	??_GPS_read_speed,w
  5571  012D  06BE               	xorwf	GPS_read_speed@checksum,f
  5572                           
  5573                           ;GPS.c: 128: if (m_char == ',')
  5574  012E  302C               	movlw	44
  5575  012F  0647               	xorwf	GPS_read_speed@m_char,w
  5576  0130  1903               	btfsc	3,2
  5577  0131  2944               	goto	l3786
  5578                           
  5579                           ;GPS.c: 130: else
  5580                           ;GPS.c: 131: {
  5581                           ;GPS.c: 132: buffer[i_buff++] = m_char;
  5582                           
  5583                           ;GPS.c: 129: break;
  5584  0132  0847               	movf	GPS_read_speed@m_char,w
  5585  0133  00B5               	movwf	??_GPS_read_speed
  5586  0134  0846               	movf	GPS_read_speed@i_buff,w
  5587  0135  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5588  0136  0086               	movwf	6
  5589  0137  0187               	clrf	7
  5590  0138  0835               	movf	??_GPS_read_speed,w
  5591  0139  0081               	movwf	1
  5592  013A  3001               	movlw	1
  5593  013B  00B5               	movwf	??_GPS_read_speed
  5594  013C  0835               	movf	??_GPS_read_speed,w
  5595  013D  07C6               	addwf	GPS_read_speed@i_buff,f
  5596                           
  5597                           ;GPS.c: 133: if (i_buff >= 6)
  5598  013E  3006               	movlw	6
  5599  013F  0246               	subwf	GPS_read_speed@i_buff,w
  5600  0140  1C03               	skipc
  5601  0141  2920               	goto	l3764
  5602                           
  5603                           ;GPS.c: 134: return 0;
  5604  0142  3000               	movlw	0
  5605  0143  0008               	return
  5606  0144                     l3786:	
  5607                           
  5608                           ;GPS.c: 135: }
  5609                           ;GPS.c: 136: }
  5610                           ;GPS.c: 137: if ((buffer[0] != 'N')||(i_buff != 1))
  5611  0144  304E               	movlw	78
  5612  0145  063F               	xorwf	GPS_read_speed@buffer,w
  5613  0146  1903               	btfsc	3,2
  5614  0147  0346               	decf	GPS_read_speed@i_buff,w
  5615  0148  1903               	btfsc	3,2
  5616  0149  294C               	goto	l3794
  5617                           
  5618                           ;GPS.c: 138: return 0;
  5619  014A  3000               	movlw	0
  5620  014B  0008               	return
  5621  014C                     l3794:	
  5622                           
  5623                           ;GPS.c: 139: i_buff = 0;
  5624  014C  01C6               	clrf	GPS_read_speed@i_buff
  5625  014D                     l3796:	
  5626                           ;GPS.c: 142: while (1)
  5627                           
  5628                           
  5629                           ;GPS.c: 143: if (eusartRxCount!=0)
  5630  014D  0878               	movf	_eusartRxCount,w	;volatile
  5631  014E  1903               	btfsc	3,2
  5632  014F  294D               	goto	l3796
  5633                           
  5634                           ;GPS.c: 144: {
  5635                           ;GPS.c: 145: m_char=EUSART_Read();
  5636  0150  318F  2777  3180   	fcall	_EUSART_Read
  5637  0153  0020               	movlb	0	; select bank0
  5638  0154  00B5               	movwf	??_GPS_read_speed
  5639  0155  0835               	movf	??_GPS_read_speed,w
  5640  0156  00C7               	movwf	GPS_read_speed@m_char
  5641                           
  5642                           ;GPS.c: 146: checksum ^= m_char;
  5643  0157  0847               	movf	GPS_read_speed@m_char,w
  5644  0158  00B5               	movwf	??_GPS_read_speed
  5645  0159  0835               	movf	??_GPS_read_speed,w
  5646  015A  06BE               	xorwf	GPS_read_speed@checksum,f
  5647                           
  5648                           ;GPS.c: 147: if (m_char == ',')
  5649  015B  302C               	movlw	44
  5650  015C  0647               	xorwf	GPS_read_speed@m_char,w
  5651  015D  1903               	btfsc	3,2
  5652  015E  2971               	goto	l3818
  5653                           
  5654                           ;GPS.c: 149: else
  5655                           ;GPS.c: 150: {
  5656                           ;GPS.c: 151: buffer[i_buff++] = m_char;
  5657                           
  5658                           ;GPS.c: 148: break;
  5659  015F  0847               	movf	GPS_read_speed@m_char,w
  5660  0160  00B5               	movwf	??_GPS_read_speed
  5661  0161  0846               	movf	GPS_read_speed@i_buff,w
  5662  0162  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5663  0163  0086               	movwf	6
  5664  0164  0187               	clrf	7
  5665  0165  0835               	movf	??_GPS_read_speed,w
  5666  0166  0081               	movwf	1
  5667  0167  3001               	movlw	1
  5668  0168  00B5               	movwf	??_GPS_read_speed
  5669  0169  0835               	movf	??_GPS_read_speed,w
  5670  016A  07C6               	addwf	GPS_read_speed@i_buff,f
  5671                           
  5672                           ;GPS.c: 152: if (i_buff >= 6)
  5673  016B  3006               	movlw	6
  5674  016C  0246               	subwf	GPS_read_speed@i_buff,w
  5675  016D  1C03               	skipc
  5676  016E  294D               	goto	l3796
  5677                           
  5678                           ;GPS.c: 153: return 0;
  5679  016F  3000               	movlw	0
  5680  0170  0008               	return
  5681  0171                     l3818:	
  5682                           
  5683                           ;GPS.c: 154: }
  5684                           ;GPS.c: 155: }
  5685                           ;GPS.c: 158: unsigned char i_buff2 = 0;
  5686  0171  01C5               	clrf	GPS_read_speed@i_buff2
  5687                           
  5688                           ;GPS.c: 159: unsigned short read_speed_int=0;
  5689  0172  01B9               	clrf	GPS_read_speed@read_speed_int
  5690  0173  01BA               	clrf	GPS_read_speed@read_speed_int+1
  5691                           
  5692                           ;GPS.c: 160: unsigned short read_speed_fra=0;
  5693  0174  01BB               	clrf	GPS_read_speed@read_speed_fra
  5694  0175  01BC               	clrf	GPS_read_speed@read_speed_fra+1
  5695                           
  5696                           ;GPS.c: 161: bool before_dot = 1;
  5697  0176  01B7               	clrf	GPS_read_speed@before_dot
  5698  0177  0AB7               	incf	GPS_read_speed@before_dot,f
  5699  0178                     l3846:	
  5700                           ;GPS.c: 162: while (i_buff2 < i_buff)
  5701                           
  5702  0178  0846               	movf	GPS_read_speed@i_buff,w
  5703  0179  0245               	subwf	GPS_read_speed@i_buff2,w
  5704  017A  1803               	btfsc	3,0
  5705  017B  29DB               	goto	l3848
  5706                           
  5707                           ;GPS.c: 163: if (buffer[i_buff2]=='.')
  5708  017C  0845               	movf	GPS_read_speed@i_buff2,w
  5709  017D  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5710  017E  0086               	movwf	6
  5711  017F  0187               	clrf	7
  5712  0180  302E               	movlw	46
  5713  0181  0601               	xorwf	1,w
  5714  0182  1D03               	btfss	3,2
  5715  0183  2986               	goto	l3828
  5716                           
  5717                           ;GPS.c: 164: {
  5718                           ;GPS.c: 165: before_dot = 0;
  5719  0184  01B7               	clrf	GPS_read_speed@before_dot
  5720  0185  29D6               	goto	l3844
  5721  0186                     l3828:	
  5722                           ;GPS.c: 167: }
  5723                           
  5724                           ;GPS.c: 166: i_buff2++;
  5725                           
  5726                           
  5727                           ;GPS.c: 168: else
  5728                           ;GPS.c: 169: {
  5729                           ;GPS.c: 170: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  5730  0186  0845               	movf	GPS_read_speed@i_buff2,w
  5731  0187  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5732  0188  0086               	movwf	6
  5733  0189  0187               	clrf	7
  5734  018A  3030               	movlw	48
  5735  018B  0201               	subwf	1,w
  5736  018C  1C03               	skipc
  5737  018D  2996               	goto	l3832
  5738  018E  0845               	movf	GPS_read_speed@i_buff2,w
  5739  018F  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5740  0190  0086               	movwf	6
  5741  0191  0187               	clrf	7
  5742  0192  303A               	movlw	58
  5743  0193  0201               	subwf	1,w
  5744  0194  1C03               	skipc
  5745  0195  2998               	goto	l3838
  5746  0196                     l3832:	
  5747                           
  5748                           ;GPS.c: 171: return 0;
  5749  0196  3000               	movlw	0
  5750  0197  0008               	return
  5751  0198                     l3838:	
  5752                           
  5753                           ;GPS.c: 172: else
  5754                           ;GPS.c: 173: {
  5755                           ;GPS.c: 174: if (before_dot)
  5756  0198  0837               	movf	GPS_read_speed@before_dot,w
  5757  0199  1903               	btfsc	3,2
  5758  019A  29B9               	goto	l3842
  5759                           
  5760                           ;GPS.c: 175: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  5761  019B  083A               	movf	GPS_read_speed@read_speed_int+1,w
  5762  019C  00A1               	movwf	___wmul@multiplier+1
  5763  019D  0839               	movf	GPS_read_speed@read_speed_int,w
  5764  019E  00A0               	movwf	___wmul@multiplier
  5765  019F  300A               	movlw	10
  5766  01A0  00A2               	movwf	___wmul@multiplicand
  5767  01A1  3000               	movlw	0
  5768  01A2  00A3               	movwf	___wmul@multiplicand+1
  5769  01A3  318F  2704  3180   	fcall	___wmul
  5770  01A6  0020               	movlb	0	; select bank0
  5771  01A7  0845               	movf	GPS_read_speed@i_buff2,w
  5772  01A8  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5773  01A9  0086               	movwf	6
  5774  01AA  0187               	clrf	7
  5775  01AB  0801               	movf	1,w
  5776  01AC  0720               	addwf	?___wmul,w
  5777  01AD  00B5               	movwf	??_GPS_read_speed
  5778  01AE  0821               	movf	?___wmul+1,w
  5779  01AF  1803               	skipnc
  5780  01B0  0A21               	incf	?___wmul+1,w
  5781  01B1  00B6               	movwf	??_GPS_read_speed+1
  5782  01B2  0835               	movf	??_GPS_read_speed,w
  5783  01B3  3ED0               	addlw	208
  5784  01B4  00B9               	movwf	GPS_read_speed@read_speed_int
  5785  01B5  30FF               	movlw	255
  5786  01B6  3D36               	addwfc	??_GPS_read_speed+1,w
  5787  01B7  00BA               	movwf	GPS_read_speed@read_speed_int+1
  5788  01B8  29D6               	goto	l3844
  5789  01B9                     l3842:	
  5790                           
  5791                           ;GPS.c: 176: else
  5792                           ;GPS.c: 177: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  5793  01B9  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  5794  01BA  00A1               	movwf	___wmul@multiplier+1
  5795  01BB  083B               	movf	GPS_read_speed@read_speed_fra,w
  5796  01BC  00A0               	movwf	___wmul@multiplier
  5797  01BD  300A               	movlw	10
  5798  01BE  00A2               	movwf	___wmul@multiplicand
  5799  01BF  3000               	movlw	0
  5800  01C0  00A3               	movwf	___wmul@multiplicand+1
  5801  01C1  318F  2704  3180   	fcall	___wmul
  5802  01C4  0020               	movlb	0	; select bank0
  5803  01C5  0845               	movf	GPS_read_speed@i_buff2,w
  5804  01C6  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5805  01C7  0086               	movwf	6
  5806  01C8  0187               	clrf	7
  5807  01C9  0801               	movf	1,w
  5808  01CA  0720               	addwf	?___wmul,w
  5809  01CB  00B5               	movwf	??_GPS_read_speed
  5810  01CC  0821               	movf	?___wmul+1,w
  5811  01CD  1803               	skipnc
  5812  01CE  0A21               	incf	?___wmul+1,w
  5813  01CF  00B6               	movwf	??_GPS_read_speed+1
  5814  01D0  0835               	movf	??_GPS_read_speed,w
  5815  01D1  3ED0               	addlw	208
  5816  01D2  00BB               	movwf	GPS_read_speed@read_speed_fra
  5817  01D3  30FF               	movlw	255
  5818  01D4  3D36               	addwfc	??_GPS_read_speed+1,w
  5819  01D5  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  5820  01D6                     l3844:	
  5821                           
  5822                           ;GPS.c: 178: i_buff2++;
  5823  01D6  3001               	movlw	1
  5824  01D7  00B5               	movwf	??_GPS_read_speed
  5825  01D8  0835               	movf	??_GPS_read_speed,w
  5826  01D9  07C5               	addwf	GPS_read_speed@i_buff2,f
  5827  01DA  2978               	goto	l3846
  5828  01DB                     l3848:	
  5829                           
  5830                           ;GPS.c: 179: }
  5831                           ;GPS.c: 180: }
  5832                           ;GPS.c: 184: read_speed_fra *= 100;
  5833  01DB  3064               	movlw	100
  5834  01DC  00A0               	movwf	___wmul@multiplier
  5835  01DD  3000               	movlw	0
  5836  01DE  00A1               	movwf	___wmul@multiplier+1
  5837  01DF  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  5838  01E0  00A3               	movwf	___wmul@multiplicand+1
  5839  01E1  083B               	movf	GPS_read_speed@read_speed_fra,w
  5840  01E2  00A2               	movwf	___wmul@multiplicand
  5841  01E3  318F  2704  3180   	fcall	___wmul
  5842  01E6  0020               	movlb	0	; select bank0
  5843  01E7  0821               	movf	?___wmul+1,w
  5844  01E8  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  5845  01E9  0820               	movf	?___wmul,w
  5846  01EA  00BB               	movwf	GPS_read_speed@read_speed_fra
  5847                           
  5848                           ;GPS.c: 187: i_buff = 0;
  5849  01EB  01C6               	clrf	GPS_read_speed@i_buff
  5850  01EC                     l3852:	
  5851                           ;GPS.c: 190: while (1)
  5852                           
  5853                           
  5854                           ;GPS.c: 191: if (eusartRxCount!=0)
  5855  01EC  0878               	movf	_eusartRxCount,w	;volatile
  5856  01ED  1903               	btfsc	3,2
  5857  01EE  29EC               	goto	l3852
  5858                           
  5859                           ;GPS.c: 192: {
  5860                           ;GPS.c: 193: m_char=EUSART_Read();
  5861  01EF  318F  2777  3180   	fcall	_EUSART_Read
  5862  01F2  0020               	movlb	0	; select bank0
  5863  01F3  00B5               	movwf	??_GPS_read_speed
  5864  01F4  0835               	movf	??_GPS_read_speed,w
  5865  01F5  00C7               	movwf	GPS_read_speed@m_char
  5866                           
  5867                           ;GPS.c: 194: checksum ^= m_char;
  5868  01F6  0847               	movf	GPS_read_speed@m_char,w
  5869  01F7  00B5               	movwf	??_GPS_read_speed
  5870  01F8  0835               	movf	??_GPS_read_speed,w
  5871  01F9  06BE               	xorwf	GPS_read_speed@checksum,f
  5872                           
  5873                           ;GPS.c: 195: if (m_char == ',')
  5874  01FA  302C               	movlw	44
  5875  01FB  0647               	xorwf	GPS_read_speed@m_char,w
  5876  01FC  1903               	btfsc	3,2
  5877  01FD  2A10               	goto	l3874
  5878                           
  5879                           ;GPS.c: 197: else
  5880                           ;GPS.c: 198: {
  5881                           ;GPS.c: 199: buffer[i_buff++] = m_char;
  5882                           
  5883                           ;GPS.c: 196: break;
  5884  01FE  0847               	movf	GPS_read_speed@m_char,w
  5885  01FF  00B5               	movwf	??_GPS_read_speed
  5886  0200  0846               	movf	GPS_read_speed@i_buff,w
  5887  0201  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5888  0202  0086               	movwf	6
  5889  0203  0187               	clrf	7
  5890  0204  0835               	movf	??_GPS_read_speed,w
  5891  0205  0081               	movwf	1
  5892  0206  3001               	movlw	1
  5893  0207  00B5               	movwf	??_GPS_read_speed
  5894  0208  0835               	movf	??_GPS_read_speed,w
  5895  0209  07C6               	addwf	GPS_read_speed@i_buff,f
  5896                           
  5897                           ;GPS.c: 200: if (i_buff >= 6)
  5898  020A  3006               	movlw	6
  5899  020B  0246               	subwf	GPS_read_speed@i_buff,w
  5900  020C  1C03               	skipc
  5901  020D  29EC               	goto	l3852
  5902                           
  5903                           ;GPS.c: 201: return 0;
  5904  020E  3000               	movlw	0
  5905  020F  0008               	return
  5906  0210                     l3874:	
  5907                           
  5908                           ;GPS.c: 202: }
  5909                           ;GPS.c: 203: }
  5910                           ;GPS.c: 204: if ((buffer[0] != 'K')||(i_buff != 1))
  5911  0210  304B               	movlw	75
  5912  0211  063F               	xorwf	GPS_read_speed@buffer,w
  5913  0212  1903               	btfsc	3,2
  5914  0213  0346               	decf	GPS_read_speed@i_buff,w
  5915  0214  1903               	btfsc	3,2
  5916  0215  2A18               	goto	l3882
  5917                           
  5918                           ;GPS.c: 205: return 0;
  5919  0216  3000               	movlw	0
  5920  0217  0008               	return
  5921  0218                     l3882:	
  5922                           
  5923                           ;GPS.c: 206: i_buff = 0;
  5924  0218  01C6               	clrf	GPS_read_speed@i_buff
  5925                           
  5926                           ;GPS.c: 209: bool no_more_checksum = 0;
  5927  0219  01B8               	clrf	GPS_read_speed@no_more_checksum
  5928  021A                     l3884:	
  5929                           ;GPS.c: 210: while (1)
  5930                           
  5931                           
  5932                           ;GPS.c: 211: if (eusartRxCount!=0)
  5933  021A  0878               	movf	_eusartRxCount,w	;volatile
  5934  021B  1903               	btfsc	3,2
  5935  021C  2A1A               	goto	l3884
  5936                           
  5937                           ;GPS.c: 212: {
  5938                           ;GPS.c: 213: m_char=EUSART_Read();
  5939  021D  318F  2777  3180   	fcall	_EUSART_Read
  5940  0220  0020               	movlb	0	; select bank0
  5941  0221  00B5               	movwf	??_GPS_read_speed
  5942  0222  0835               	movf	??_GPS_read_speed,w
  5943  0223  00C7               	movwf	GPS_read_speed@m_char
  5944                           
  5945                           ;GPS.c: 214: if (m_char == '*')
  5946  0224  302A               	movlw	42
  5947  0225  0647               	xorwf	GPS_read_speed@m_char,w
  5948  0226  1D03               	btfss	3,2
  5949  0227  2A2A               	goto	l3892
  5950                           
  5951                           ;GPS.c: 215: no_more_checksum = 1;
  5952  0228  01B8               	clrf	GPS_read_speed@no_more_checksum
  5953  0229  0AB8               	incf	GPS_read_speed@no_more_checksum,f
  5954  022A                     l3892:	
  5955                           
  5956                           ;GPS.c: 216: if (!no_more_checksum)
  5957  022A  0838               	movf	GPS_read_speed@no_more_checksum,w
  5958  022B  1D03               	btfss	3,2
  5959  022C  2A31               	goto	l572
  5960                           
  5961                           ;GPS.c: 217: checksum ^= m_char;
  5962  022D  0847               	movf	GPS_read_speed@m_char,w
  5963  022E  00B5               	movwf	??_GPS_read_speed
  5964  022F  0835               	movf	??_GPS_read_speed,w
  5965  0230  06BE               	xorwf	GPS_read_speed@checksum,f
  5966  0231                     l572:	
  5967                           
  5968                           ;GPS.c: 218: if (m_char == 0x0D)
  5969  0231  300D               	movlw	13
  5970  0232  0647               	xorwf	GPS_read_speed@m_char,w
  5971  0233  1903               	btfsc	3,2
  5972  0234  2A47               	goto	l3910
  5973                           
  5974                           ;GPS.c: 220: else
  5975                           ;GPS.c: 221: {
  5976                           ;GPS.c: 222: buffer[i_buff++] = m_char;
  5977                           
  5978                           ;GPS.c: 219: break;
  5979  0235  0847               	movf	GPS_read_speed@m_char,w
  5980  0236  00B5               	movwf	??_GPS_read_speed
  5981  0237  0846               	movf	GPS_read_speed@i_buff,w
  5982  0238  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  5983  0239  0086               	movwf	6
  5984  023A  0187               	clrf	7
  5985  023B  0835               	movf	??_GPS_read_speed,w
  5986  023C  0081               	movwf	1
  5987  023D  3001               	movlw	1
  5988  023E  00B5               	movwf	??_GPS_read_speed
  5989  023F  0835               	movf	??_GPS_read_speed,w
  5990  0240  07C6               	addwf	GPS_read_speed@i_buff,f
  5991                           
  5992                           ;GPS.c: 223: if (i_buff >= 6)
  5993  0241  3006               	movlw	6
  5994  0242  0246               	subwf	GPS_read_speed@i_buff,w
  5995  0243  1C03               	skipc
  5996  0244  2A1A               	goto	l3884
  5997                           
  5998                           ;GPS.c: 224: return 0;
  5999  0245  3000               	movlw	0
  6000  0246  0008               	return
  6001  0247                     l3910:	
  6002                           
  6003                           ;GPS.c: 225: }
  6004                           ;GPS.c: 226: }
  6005                           ;GPS.c: 227: if ((buffer[1] != '*')||(i_buff != 4))
  6006  0247  302A               	movlw	42
  6007  0248  0640               	xorwf	GPS_read_speed@buffer+1,w
  6008  0249  1D03               	btfss	3,2
  6009  024A  2A4F               	goto	l3914
  6010  024B  3004               	movlw	4
  6011  024C  0646               	xorwf	GPS_read_speed@i_buff,w
  6012  024D  1903               	btfsc	3,2
  6013  024E  2A51               	goto	l3918
  6014  024F                     l3914:	
  6015                           
  6016                           ;GPS.c: 228: return 0;
  6017  024F  3000               	movlw	0
  6018  0250  0008               	return
  6019  0251                     l3918:	
  6020                           
  6021                           ;GPS.c: 231: unsigned char checksum2 = 0;
  6022  0251  01BD               	clrf	GPS_read_speed@checksum2
  6023                           
  6024                           ;GPS.c: 232: if (buffer[2] > 0x39)
  6025  0252  303A               	movlw	58
  6026  0253  0241               	subwf	GPS_read_speed@buffer+2,w
  6027  0254  1C03               	skipc
  6028  0255  2A59               	goto	l3924
  6029                           
  6030                           ;GPS.c: 233: checksum2 = buffer[2] - 0x37;
  6031  0256  0841               	movf	GPS_read_speed@buffer+2,w
  6032  0257  3EC9               	addlw	201
  6033  0258  2A5B               	goto	L4
  6034  0259                     l3924:	
  6035                           
  6036                           ;GPS.c: 234: else
  6037                           ;GPS.c: 235: checksum2 = buffer[2] - 0x30;
  6038  0259  0841               	movf	GPS_read_speed@buffer+2,w
  6039  025A  3ED0               	addlw	208
  6040  025B                     L4:	
  6041  025B  00B5               	movwf	??_GPS_read_speed
  6042  025C  0835               	movf	??_GPS_read_speed,w
  6043  025D  00BD               	movwf	GPS_read_speed@checksum2
  6044                           
  6045                           ;GPS.c: 236: checksum2 = checksum2 << 4;
  6046  025E  083D               	movf	GPS_read_speed@checksum2,w
  6047  025F  00B5               	movwf	??_GPS_read_speed
  6048  0260  3003               	movlw	3
  6049  0261                     u4355:	
  6050  0261  35B5               	lslf	??_GPS_read_speed,f
  6051  0262  3EFF               	addlw	-1
  6052  0263  1D03               	skipz
  6053  0264  2A61               	goto	u4355
  6054  0265  3535               	lslf	??_GPS_read_speed,w
  6055  0266  00B6               	movwf	??_GPS_read_speed+1
  6056  0267  0836               	movf	??_GPS_read_speed+1,w
  6057  0268  00BD               	movwf	GPS_read_speed@checksum2
  6058                           
  6059                           ;GPS.c: 237: if (buffer[3] > 0x39)
  6060  0269  303A               	movlw	58
  6061  026A  0242               	subwf	GPS_read_speed@buffer+3,w
  6062  026B  1C03               	skipc
  6063  026C  2A70               	goto	l3930
  6064                           
  6065                           ;GPS.c: 238: checksum2 += buffer[3] - 0x37;
  6066  026D  0842               	movf	GPS_read_speed@buffer+3,w
  6067  026E  3EC9               	addlw	201
  6068  026F  2A72               	goto	L5
  6069  0270                     l3930:	
  6070                           
  6071                           ;GPS.c: 239: else
  6072                           ;GPS.c: 240: checksum2 += buffer[3] - 0x30;
  6073  0270  0842               	movf	GPS_read_speed@buffer+3,w
  6074  0271  3ED0               	addlw	208
  6075  0272                     L5:	
  6076  0272  00B5               	movwf	??_GPS_read_speed
  6077  0273  0835               	movf	??_GPS_read_speed,w
  6078  0274  07BD               	addwf	GPS_read_speed@checksum2,f
  6079                           
  6080                           ;GPS.c: 241: if (checksum == checksum2)
  6081  0275  083E               	movf	GPS_read_speed@checksum,w
  6082  0276  063D               	xorwf	GPS_read_speed@checksum2,w
  6083  0277  1D03               	skipz
  6084  0278  2A8E               	goto	l3942
  6085                           
  6086                           ;GPS.c: 242: {
  6087                           ;GPS.c: 243: speed = convert_to_fp(read_speed_int, read_speed_fra);
  6088  0279  083A               	movf	GPS_read_speed@read_speed_int+1,w
  6089  027A  00A1               	movwf	convert_to_fp@int_part+1
  6090  027B  0839               	movf	GPS_read_speed@read_speed_int,w
  6091  027C  00A0               	movwf	convert_to_fp@int_part
  6092  027D  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  6093  027E  00A3               	movwf	convert_to_fp@fract_part+1
  6094  027F  083B               	movf	GPS_read_speed@read_speed_fra,w
  6095  0280  00A2               	movwf	convert_to_fp@fract_part
  6096  0281  3185  250D         	fcall	_convert_to_fp
  6097  0283  0020               	movlb	0	; select bank0
  6098  0284  0823               	movf	?_convert_to_fp+3,w
  6099  0285  00DD               	movwf	_speed+3
  6100  0286  0822               	movf	?_convert_to_fp+2,w
  6101  0287  00DC               	movwf	_speed+2
  6102  0288  0821               	movf	?_convert_to_fp+1,w
  6103  0289  00DB               	movwf	_speed+1
  6104  028A  0820               	movf	?_convert_to_fp,w
  6105  028B  00DA               	movwf	_speed
  6106                           
  6107                           ;GPS.c: 244: return 1;
  6108  028C  3001               	movlw	1
  6109                           
  6110                           ;GPS.c: 245: }
  6111  028D  0008               	return
  6112  028E                     l3942:	
  6113                           
  6114                           ;GPS.c: 246: else
  6115                           ;GPS.c: 247: return 0;
  6116  028E  3000               	movlw	0
  6117  028F  0008               	return
  6118  0290                     __end_of_GPS_read_speed:	
  6119                           
  6120                           	psect	text20
  6121  050D                     __ptext20:	
  6122 ;; *************** function _convert_to_fp *****************
  6123 ;; Defined at:
  6124 ;;		line 15 in file "fixed_point.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  int_part        2    0[BANK0 ] short 
  6127 ;;  fract_part      2    2[BANK0 ] short 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  i_bit           1   14[BANK0 ] unsigned char 
  6130 ;;  res             4   17[BANK0 ] long 
  6131 ;;  tmp_left        2   15[BANK0 ] unsigned short 
  6132 ;;  res_fract       2   12[BANK0 ] unsigned short 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  4    0[BANK0 ] long 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6142 ;;      Params:         0       4       0       0       0       0
  6143 ;;      Locals:         0       9       0       0       0       0
  6144 ;;      Temps:          0       8       0       0       0       0
  6145 ;;      Totals:         0      21       0       0       0       0
  6146 ;;Total ram usage:       21 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    6
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_GPS_read_speed
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           
  6157                           ;psect for function _convert_to_fp
  6158  050D                     _convert_to_fp:	
  6159                           
  6160                           ;fixed_point.c: 21: t_fp res = 0;
  6161                           
  6162                           ;incstack = 0
  6163                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  6164  050D  3000               	movlw	0
  6165  050E  0020               	movlb	0	; select bank0
  6166  050F  00B4               	movwf	convert_to_fp@res+3
  6167  0510  3000               	movlw	0
  6168  0511  00B3               	movwf	convert_to_fp@res+2
  6169  0512  3000               	movlw	0
  6170  0513  00B2               	movwf	convert_to_fp@res+1
  6171  0514  3000               	movlw	0
  6172  0515  00B1               	movwf	convert_to_fp@res
  6173                           
  6174                           ;fixed_point.c: 23: res = int_part;
  6175  0516  0820               	movf	convert_to_fp@int_part,w
  6176  0517  00B1               	movwf	convert_to_fp@res
  6177  0518  0821               	movf	convert_to_fp@int_part+1,w
  6178  0519  00B2               	movwf	convert_to_fp@res+1
  6179  051A  0D89               	rlf	9,f
  6180  051B  3B89               	subwfb	9,f
  6181  051C  0989               	comf	9,f
  6182  051D  00B3               	movwf	convert_to_fp@res+2
  6183  051E  00B4               	movwf	convert_to_fp@res+3
  6184                           
  6185                           ;fixed_point.c: 24: res = res << 16;
  6186  051F  0831               	movf	convert_to_fp@res,w
  6187  0520  00A4               	movwf	??_convert_to_fp
  6188  0521  0832               	movf	convert_to_fp@res+1,w
  6189  0522  00A5               	movwf	??_convert_to_fp+1
  6190  0523  0833               	movf	convert_to_fp@res+2,w
  6191  0524  00A6               	movwf	??_convert_to_fp+2
  6192  0525  0834               	movf	convert_to_fp@res+3,w
  6193  0526  00A7               	movwf	??_convert_to_fp+3
  6194  0527  3010               	movlw	16
  6195  0528                     u3515:	
  6196  0528  35A4               	lslf	??_convert_to_fp,f
  6197  0529  0DA5               	rlf	??_convert_to_fp+1,f
  6198  052A  0DA6               	rlf	??_convert_to_fp+2,f
  6199  052B  0DA7               	rlf	??_convert_to_fp+3,f
  6200  052C  0B89               	decfsz	9,f
  6201  052D  2D28               	goto	u3515
  6202  052E  0827               	movf	??_convert_to_fp+3,w
  6203  052F  00B4               	movwf	convert_to_fp@res+3
  6204  0530  0826               	movf	??_convert_to_fp+2,w
  6205  0531  00B3               	movwf	convert_to_fp@res+2
  6206  0532  0825               	movf	??_convert_to_fp+1,w
  6207  0533  00B2               	movwf	convert_to_fp@res+1
  6208  0534  0824               	movf	??_convert_to_fp,w
  6209  0535  00B1               	movwf	convert_to_fp@res
  6210                           
  6211                           ;fixed_point.c: 26: unsigned short tmp_left = fract_part;
  6212  0536  0823               	movf	convert_to_fp@fract_part+1,w
  6213  0537  00B0               	movwf	convert_to_fp@tmp_left+1
  6214  0538  0822               	movf	convert_to_fp@fract_part,w
  6215  0539  00AF               	movwf	convert_to_fp@tmp_left
  6216                           
  6217                           ;fixed_point.c: 27: unsigned short res_fract = 0;
  6218  053A  01AC               	clrf	convert_to_fp@res_fract
  6219  053B  01AD               	clrf	convert_to_fp@res_fract+1
  6220                           
  6221                           ;fixed_point.c: 28: const unsigned short one = 1;
  6222                           ;fixed_point.c: 29: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  6223  053C  01AE               	clrf	convert_to_fp@i_bit
  6224  053D  3010               	movlw	16
  6225  053E  022E               	subwf	convert_to_fp@i_bit,w
  6226  053F  1803               	btfsc	3,0
  6227  0540  2D73               	goto	l366
  6228  0541                     l3462:	
  6229                           
  6230                           ;fixed_point.c: 30: {
  6231                           ;fixed_point.c: 31: tmp_left = tmp_left << 1;
  6232  0541  352F               	lslf	convert_to_fp@tmp_left,w
  6233  0542  00AF               	movwf	convert_to_fp@tmp_left
  6234  0543  0D30               	rlf	convert_to_fp@tmp_left+1,w
  6235  0544  00B0               	movwf	convert_to_fp@tmp_left+1
  6236                           
  6237                           ;fixed_point.c: 32: if (tmp_left >= 10000)
  6238  0545  3027               	movlw	39
  6239  0546  0230               	subwf	convert_to_fp@tmp_left+1,w
  6240  0547  3010               	movlw	16
  6241  0548  1903               	skipnz
  6242  0549  022F               	subwf	convert_to_fp@tmp_left,w
  6243  054A  1C03               	skipc
  6244  054B  2D6B               	goto	l3468
  6245                           
  6246                           ;fixed_point.c: 33: {
  6247                           ;fixed_point.c: 34: res_fract = res_fract | one<<(16-i_bit-1);
  6248  054C  30E9               	movlw	low (convert_to_fp@one| (0+32768))
  6249  054D  0084               	movwf	4
  6250  054E  3086               	movlw	high (convert_to_fp@one| (0+32768))
  6251  054F  0085               	movwf	5
  6252  0550  3F00               	moviw [0]fsr0
  6253  0551  00A4               	movwf	??_convert_to_fp
  6254  0552  3F01               	moviw [1]fsr0
  6255  0553  00A5               	movwf	??_convert_to_fp+1
  6256  0554  082E               	movf	convert_to_fp@i_bit,w
  6257  0555  3E01               	addlw	1
  6258  0556  3AFF               	xorlw	255
  6259  0557  3E01               	addlw	1
  6260  0558  3E10               	addlw	16
  6261  0559  0A89               	incf	9,f
  6262  055A  2D5D               	goto	u3544
  6263  055B                     u3545:	
  6264  055B  35A4               	lslf	??_convert_to_fp,f
  6265  055C  0DA5               	rlf	??_convert_to_fp+1,f
  6266  055D                     u3544:	
  6267  055D  0B89               	decfsz	9,f
  6268  055E  2D5B               	goto	u3545
  6269  055F  082C               	movf	convert_to_fp@res_fract,w
  6270  0560  0424               	iorwf	??_convert_to_fp,w
  6271  0561  00AC               	movwf	convert_to_fp@res_fract
  6272  0562  082D               	movf	convert_to_fp@res_fract+1,w
  6273  0563  0425               	iorwf	??_convert_to_fp+1,w
  6274  0564  00AD               	movwf	convert_to_fp@res_fract+1
  6275                           
  6276                           ;fixed_point.c: 35: tmp_left = tmp_left - 10000;
  6277  0565  082F               	movf	convert_to_fp@tmp_left,w
  6278  0566  3EF0               	addlw	240
  6279  0567  00AF               	movwf	convert_to_fp@tmp_left
  6280  0568  30D8               	movlw	216
  6281  0569  3D30               	addwfc	convert_to_fp@tmp_left+1,w
  6282  056A  00B0               	movwf	convert_to_fp@tmp_left+1
  6283  056B                     l3468:	
  6284  056B  3001               	movlw	1
  6285  056C  00A4               	movwf	??_convert_to_fp
  6286  056D  0824               	movf	??_convert_to_fp,w
  6287  056E  07AE               	addwf	convert_to_fp@i_bit,f
  6288  056F  3010               	movlw	16
  6289  0570  022E               	subwf	convert_to_fp@i_bit,w
  6290  0571  1C03               	skipc
  6291  0572  2D41               	goto	l3462
  6292  0573                     l366:	
  6293                           
  6294                           ;fixed_point.c: 36: }
  6295                           ;fixed_point.c: 37: }
  6296                           ;fixed_point.c: 39: if (res < 0)
  6297  0573  1FB4               	btfss	convert_to_fp@res+3,7
  6298  0574  2D8F               	goto	l3474
  6299                           
  6300                           ;fixed_point.c: 40: res = res - res_fract;
  6301  0575  0831               	movf	convert_to_fp@res,w
  6302  0576  00A4               	movwf	??_convert_to_fp
  6303  0577  0832               	movf	convert_to_fp@res+1,w
  6304  0578  00A5               	movwf	??_convert_to_fp+1
  6305  0579  0833               	movf	convert_to_fp@res+2,w
  6306  057A  00A6               	movwf	??_convert_to_fp+2
  6307  057B  0834               	movf	convert_to_fp@res+3,w
  6308  057C  00A7               	movwf	??_convert_to_fp+3
  6309  057D  082C               	movf	convert_to_fp@res_fract,w
  6310  057E  00A8               	movwf	??_convert_to_fp+4
  6311  057F  082D               	movf	convert_to_fp@res_fract+1,w
  6312  0580  00A9               	movwf	??_convert_to_fp+5
  6313  0581  01AA               	clrf	??_convert_to_fp+6
  6314  0582  01AB               	clrf	??_convert_to_fp+7
  6315  0583  09A8               	comf	??_convert_to_fp+4,f
  6316  0584  09A9               	comf	??_convert_to_fp+5,f
  6317  0585  09AA               	comf	??_convert_to_fp+6,f
  6318  0586  09AB               	comf	??_convert_to_fp+7,f
  6319  0587  0AA8               	incf	??_convert_to_fp+4,f
  6320  0588  1903               	skipnz
  6321  0589  0AA9               	incf	??_convert_to_fp+5,f
  6322  058A  1903               	skipnz
  6323  058B  0AAA               	incf	??_convert_to_fp+6,f
  6324  058C  1903               	skipnz
  6325  058D  0AAB               	incf	??_convert_to_fp+7,f
  6326  058E  2D9D               	goto	L6
  6327  058F                     l3474:	
  6328                           
  6329                           ;fixed_point.c: 41: else
  6330                           ;fixed_point.c: 42: res = res + res_fract;
  6331  058F  0831               	movf	convert_to_fp@res,w
  6332  0590  00A4               	movwf	??_convert_to_fp
  6333  0591  0832               	movf	convert_to_fp@res+1,w
  6334  0592  00A5               	movwf	??_convert_to_fp+1
  6335  0593  0833               	movf	convert_to_fp@res+2,w
  6336  0594  00A6               	movwf	??_convert_to_fp+2
  6337  0595  0834               	movf	convert_to_fp@res+3,w
  6338  0596  00A7               	movwf	??_convert_to_fp+3
  6339  0597  082C               	movf	convert_to_fp@res_fract,w
  6340  0598  00A8               	movwf	??_convert_to_fp+4
  6341  0599  082D               	movf	convert_to_fp@res_fract+1,w
  6342  059A  00A9               	movwf	??_convert_to_fp+5
  6343  059B  01AA               	clrf	??_convert_to_fp+6
  6344  059C  01AB               	clrf	??_convert_to_fp+7
  6345  059D                     L6:	
  6346  059D  0828               	movf	??_convert_to_fp+4,w
  6347  059E  07A4               	addwf	??_convert_to_fp,f
  6348  059F  0829               	movf	??_convert_to_fp+5,w
  6349  05A0  3DA5               	addwfc	??_convert_to_fp+1,f
  6350  05A1  082A               	movf	??_convert_to_fp+6,w
  6351  05A2  3DA6               	addwfc	??_convert_to_fp+2,f
  6352  05A3  082B               	movf	??_convert_to_fp+7,w
  6353  05A4  3DA7               	addwfc	??_convert_to_fp+3,f
  6354  05A5  0827               	movf	??_convert_to_fp+3,w
  6355  05A6  00B4               	movwf	convert_to_fp@res+3
  6356  05A7  0826               	movf	??_convert_to_fp+2,w
  6357  05A8  00B3               	movwf	convert_to_fp@res+2
  6358  05A9  0825               	movf	??_convert_to_fp+1,w
  6359  05AA  00B2               	movwf	convert_to_fp@res+1
  6360  05AB  0824               	movf	??_convert_to_fp,w
  6361  05AC  00B1               	movwf	convert_to_fp@res
  6362                           
  6363                           ;fixed_point.c: 43: return res;
  6364  05AD  0834               	movf	convert_to_fp@res+3,w
  6365  05AE  00A3               	movwf	?_convert_to_fp+3
  6366  05AF  0833               	movf	convert_to_fp@res+2,w
  6367  05B0  00A2               	movwf	?_convert_to_fp+2
  6368  05B1  0832               	movf	convert_to_fp@res+1,w
  6369  05B2  00A1               	movwf	?_convert_to_fp+1
  6370  05B3  0831               	movf	convert_to_fp@res,w
  6371  05B4  00A0               	movwf	?_convert_to_fp
  6372  05B5  0008               	return
  6373  05B6                     __end_of_convert_to_fp:	
  6374                           
  6375                           	psect	text21
  6376  0F04                     __ptext21:	
  6377 ;; *************** function ___wmul *****************
  6378 ;; Defined at:
  6379 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6382 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  product         2    4[COMMON] unsigned int 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  2    0[BANK0 ] unsigned int 
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6394 ;;      Params:         0       4       0       0       0       0
  6395 ;;      Locals:         2       0       0       0       0       0
  6396 ;;      Temps:          0       0       0       0       0       0
  6397 ;;      Totals:         2       4       0       0       0       0
  6398 ;;Total ram usage:        6 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_GPS_read_speed
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function ___wmul
  6410  0F04                     ___wmul:	
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6414  0F04  01F4               	clrf	___wmul@product
  6415  0F05  01F5               	clrf	___wmul@product+1
  6416  0F06                     l3486:	
  6417  0F06  0020               	movlb	0	; select bank0
  6418  0F07  1C20               	btfss	___wmul@multiplier,0
  6419  0F08  2F0D               	goto	l732
  6420  0F09  0822               	movf	___wmul@multiplicand,w
  6421  0F0A  07F4               	addwf	___wmul@product,f
  6422  0F0B  0823               	movf	___wmul@multiplicand+1,w
  6423  0F0C  3DF5               	addwfc	___wmul@product+1,f
  6424  0F0D                     l732:	
  6425  0F0D  3001               	movlw	1
  6426  0F0E                     u3595:	
  6427  0F0E  35A2               	lslf	___wmul@multiplicand,f
  6428  0F0F  0DA3               	rlf	___wmul@multiplicand+1,f
  6429  0F10  0B89               	decfsz	9,f
  6430  0F11  2F0E               	goto	u3595
  6431  0F12  3001               	movlw	1
  6432  0F13                     u3605:	
  6433  0F13  36A1               	lsrf	___wmul@multiplier+1,f
  6434  0F14  0CA0               	rrf	___wmul@multiplier,f
  6435  0F15  0B89               	decfsz	9,f
  6436  0F16  2F13               	goto	u3605
  6437  0F17  0820               	movf	___wmul@multiplier,w
  6438  0F18  0421               	iorwf	___wmul@multiplier+1,w
  6439  0F19  1D03               	btfss	3,2
  6440  0F1A  2F06               	goto	l3486
  6441  0F1B  0875               	movf	___wmul@product+1,w
  6442  0F1C  00A1               	movwf	?___wmul+1
  6443  0F1D  0874               	movf	___wmul@product,w
  6444  0F1E  00A0               	movwf	?___wmul
  6445  0F1F  0008               	return
  6446  0F20                     __end_of___wmul:	
  6447                           
  6448                           	psect	text22
  6449  0F77                     __ptext22:	
  6450 ;; *************** function _EUSART_Read *****************
  6451 ;; Defined at:
  6452 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;		None
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;  readValue       1    5[COMMON] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      unsigned char 
  6459 ;; Registers used:
  6460 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6466 ;;      Params:         0       0       0       0       0       0
  6467 ;;      Locals:         1       0       0       0       0       0
  6468 ;;      Temps:          1       0       0       0       0       0
  6469 ;;      Totals:         2       0       0       0       0       0
  6470 ;;Total ram usage:        2 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    6
  6473 ;; This function calls:
  6474 ;;		Nothing
  6475 ;; This function is called by:
  6476 ;;		_GPS_read_speed
  6477 ;;		_getch
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           
  6482                           ;psect for function _EUSART_Read
  6483  0F77                     _EUSART_Read:	
  6484                           
  6485                           ;eusart.c: 114: uint8_t readValue = 0;
  6486                           
  6487                           ;incstack = 0
  6488                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6489  0F77  01F5               	clrf	EUSART_Read@readValue
  6490                           
  6491                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  6492  0F78  0023               	movlb	3	; select bank3
  6493  0F79  169D               	bsf	29,5	;volatile
  6494  0F7A                     l3388:	
  6495                           ;eusart.c: 120: {
  6496                           
  6497                           ;eusart.c: 119: while(0 == eusartRxCount)
  6498                           
  6499  0F7A  0878               	movf	_eusartRxCount,w	;volatile
  6500  0F7B  1903               	btfsc	3,2
  6501  0F7C  2F7A               	goto	l3388
  6502                           
  6503                           ;eusart.c: 121: }
  6504                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  6505  0F7D  0021               	movlb	1	; select bank1
  6506  0F7E  1291               	bcf	17,5	;volatile
  6507                           
  6508                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  6509  0F7F  0020               	movlb	0	; select bank0
  6510  0F80  0863               	movf	_eusartRxTail,w
  6511  0F81  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6512  0F82  0086               	movwf	6
  6513  0F83  0187               	clrf	7
  6514  0F84  0801               	movf	1,w
  6515  0F85  00F4               	movwf	??_EUSART_Read
  6516  0F86  0874               	movf	??_EUSART_Read,w
  6517  0F87  00F5               	movwf	EUSART_Read@readValue
  6518  0F88  3001               	movlw	1
  6519  0F89  00F4               	movwf	??_EUSART_Read
  6520  0F8A  0874               	movf	??_EUSART_Read,w
  6521  0F8B  07E3               	addwf	_eusartRxTail,f
  6522                           
  6523                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6524  0F8C  3008               	movlw	8
  6525  0F8D  0263               	subwf	_eusartRxTail,w
  6526  0F8E  1803               	btfsc	3,0
  6527                           
  6528                           ;eusart.c: 127: {
  6529                           ;eusart.c: 128: eusartRxTail = 0;
  6530  0F8F  01E3               	clrf	_eusartRxTail
  6531                           
  6532                           ;eusart.c: 129: }
  6533                           ;eusart.c: 130: eusartRxCount--;
  6534  0F90  3001               	movlw	1
  6535  0F91  02F8               	subwf	_eusartRxCount,f	;volatile
  6536                           
  6537                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  6538  0F92  0021               	movlb	1	; select bank1
  6539  0F93  1691               	bsf	17,5	;volatile
  6540                           
  6541                           ;eusart.c: 133: return readValue;
  6542  0F94  0875               	movf	EUSART_Read@readValue,w
  6543  0F95  0008               	return
  6544  0F96                     __end_of_EUSART_Read:	
  6545                           
  6546                           	psect	text23
  6547  0780                     __ptext23:	
  6548 ;; *************** function _GPS_Initialize *****************
  6549 ;; Defined at:
  6550 ;;		line 12 in file "GPS.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  tmp             1   11[BANK0 ] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      void 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6564 ;;      Params:         0       0       0       0       0       0
  6565 ;;      Locals:         0       1       0       0       0       0
  6566 ;;      Temps:          0       3       0       0       0       0
  6567 ;;      Totals:         0       4       0       0       0       0
  6568 ;;Total ram usage:        4 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    9
  6571 ;; This function calls:
  6572 ;;		_printf
  6573 ;; This function is called by:
  6574 ;;		_main
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           
  6579                           ;psect for function _GPS_Initialize
  6580  0780                     _GPS_Initialize:	
  6581                           
  6582                           ;GPS.c: 14: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(3200
      +                          0000/4000.0)));};
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6586  0780  0020               	movlb	0	; select bank0
  6587  0781  01AB               	clrf	GPS_Initialize@tmp
  6588  0782  300A               	movlw	10
  6589  0783  022B               	subwf	GPS_Initialize@tmp,w
  6590  0784  1803               	btfsc	3,0
  6591  0785  2F9B               	goto	l3618
  6592  0786                     l3612:	
  6593  0786  3005               	movlw	5
  6594  0787  00AA               	movwf	??_GPS_Initialize+2
  6595  0788  300F               	movlw	15
  6596  0789  00A9               	movwf	??_GPS_Initialize+1
  6597  078A  30F4               	movlw	244
  6598  078B  00A8               	movwf	??_GPS_Initialize
  6599  078C                     u4887:	
  6600  078C  0BA8               	decfsz	??_GPS_Initialize,f
  6601  078D  2F8C               	goto	u4887
  6602  078E  0BA9               	decfsz	??_GPS_Initialize+1,f
  6603  078F  2F8C               	goto	u4887
  6604  0790  0BAA               	decfsz	??_GPS_Initialize+2,f
  6605  0791  2F8C               	goto	u4887
  6606  0792  3001               	movlw	1
  6607  0793  0020               	movlb	0	; select bank0
  6608  0794  00A8               	movwf	??_GPS_Initialize
  6609  0795  0828               	movf	??_GPS_Initialize,w
  6610  0796  07AB               	addwf	GPS_Initialize@tmp,f
  6611  0797  300A               	movlw	10
  6612  0798  022B               	subwf	GPS_Initialize@tmp,w
  6613  0799  1C03               	skipc
  6614  079A  2F86               	goto	l3612
  6615  079B                     l3618:	
  6616                           
  6617                           ;GPS.c: 16: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  6618  079B  30EB               	movlw	low (STR_1| (0+32768))
  6619  079C  00A1               	movwf	printf@f
  6620  079D  3086               	movlw	high (STR_1| (0+32768))
  6621  079E  00A2               	movwf	printf@f+1
  6622  079F  318F  273D  3187   	fcall	_printf
  6623                           
  6624                           ;GPS.c: 17: _delay((unsigned long)((100)*(32000000/4000.0)));
  6625  07A2  3005               	movlw	5
  6626  07A3  0020               	movlb	0	; select bank0
  6627  07A4  00AA               	movwf	??_GPS_Initialize+2
  6628  07A5  300F               	movlw	15
  6629  07A6  00A9               	movwf	??_GPS_Initialize+1
  6630  07A7  30F4               	movlw	244
  6631  07A8  00A8               	movwf	??_GPS_Initialize
  6632  07A9                     u4897:	
  6633  07A9  0BA8               	decfsz	??_GPS_Initialize,f
  6634  07AA  2FA9               	goto	u4897
  6635  07AB  0BA9               	decfsz	??_GPS_Initialize+1,f
  6636  07AC  2FA9               	goto	u4897
  6637  07AD  0BAA               	decfsz	??_GPS_Initialize+2,f
  6638  07AE  2FA9               	goto	u4897
  6639                           
  6640                           ;GPS.c: 19: printf("$PMTK220,100*2F\r\n");
  6641  07AF  301F               	movlw	low (STR_2| (0+32768))
  6642  07B0  0020               	movlb	0	; select bank0
  6643  07B1  00A1               	movwf	printf@f
  6644  07B2  3087               	movlw	high (STR_2| (0+32768))
  6645  07B3  00A2               	movwf	printf@f+1
  6646  07B4  318F  273D  3187   	fcall	_printf
  6647                           
  6648                           ;GPS.c: 20: _delay((unsigned long)((100)*(32000000/4000.0)));
  6649  07B7  3005               	movlw	5
  6650  07B8  0020               	movlb	0	; select bank0
  6651  07B9  00AA               	movwf	??_GPS_Initialize+2
  6652  07BA  300F               	movlw	15
  6653  07BB  00A9               	movwf	??_GPS_Initialize+1
  6654  07BC  30F4               	movlw	244
  6655  07BD  00A8               	movwf	??_GPS_Initialize
  6656  07BE                     u4907:	
  6657  07BE  0BA8               	decfsz	??_GPS_Initialize,f
  6658  07BF  2FBE               	goto	u4907
  6659  07C0  0BA9               	decfsz	??_GPS_Initialize+1,f
  6660  07C1  2FBE               	goto	u4907
  6661  07C2  0BAA               	decfsz	??_GPS_Initialize+2,f
  6662  07C3  2FBE               	goto	u4907
  6663  07C4  0008               	return
  6664  07C5                     __end_of_GPS_Initialize:	
  6665                           
  6666                           	psect	text24
  6667  0F3D                     __ptext24:	
  6668 ;; *************** function _printf *****************
  6669 ;; Defined at:
  6670 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  6673 ;;		 -> STR_2(18), STR_1(52), 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  tmpval          4    0        struct .
  6676 ;;  cp              2    0        PTR const unsigned char 
  6677 ;;  len             2    0        unsigned int 
  6678 ;;  val             2    0        unsigned int 
  6679 ;;  c               1    7[BANK0 ] char 
  6680 ;;  ap              1    6[BANK0 ] PTR void [1]
  6681 ;;		 -> ?_printf(2), 
  6682 ;;  flag            1    0        unsigned char 
  6683 ;;  prec            1    0        char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  2    1[BANK0 ] int 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6693 ;;      Params:         0       2       0       0       0       0
  6694 ;;      Locals:         0       2       0       0       0       0
  6695 ;;      Temps:          0       3       0       0       0       0
  6696 ;;      Totals:         0       7       0       0       0       0
  6697 ;;Total ram usage:        7 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    8
  6700 ;; This function calls:
  6701 ;;		_putch
  6702 ;; This function is called by:
  6703 ;;		_GPS_Initialize
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _printf
  6709  0F3D                     _printf:	
  6710                           
  6711                           ;doprnt.c: 466: va_list ap;
  6712                           ;doprnt.c: 499: signed char c;
  6713                           ;doprnt.c: 506: signed char prec;
  6714                           ;doprnt.c: 508: unsigned char flag;
  6715                           ;doprnt.c: 523: union {
  6716                           ;doprnt.c: 524: unsigned long vd;
  6717                           ;doprnt.c: 525: double integ;
  6718                           ;doprnt.c: 526: } tmpval;
  6719                           ;doprnt.c: 528: unsigned int val;
  6720                           ;doprnt.c: 529: unsigned len;
  6721                           ;doprnt.c: 530: const char * cp;
  6722                           ;doprnt.c: 533: *ap = __va_start();
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6726  0F3D  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6727  0F3E  0020               	movlb	0	; select bank0
  6728  0F3F  00A3               	movwf	??_printf
  6729  0F40  0823               	movf	??_printf,w
  6730  0F41  00A6               	movwf	printf@ap
  6731  0F42                     l3482:	
  6732                           ;doprnt.c: 543: }
  6733                           ;doprnt.c: 1422: {
  6734                           
  6735                           ;doprnt.c: 542: continue;
  6736                           
  6737                           ;doprnt.c: 536: while(c = *f++) {
  6738                           
  6739  0F42  0020               	movlb	0	; select bank0
  6740  0F43  0822               	movf	printf@f+1,w
  6741  0F44  00A4               	movwf	??_printf+1
  6742  0F45  0821               	movf	printf@f,w
  6743  0F46  00A3               	movwf	??_printf
  6744  0F47  0AA1               	incf	printf@f,f
  6745  0F48  1903               	skipnz
  6746  0F49  0AA2               	incf	printf@f+1,f
  6747  0F4A  0823               	movf	??_printf,w
  6748  0F4B  0084               	movwf	4
  6749  0F4C  0824               	movf	??_printf+1,w
  6750  0F4D  0085               	movwf	5
  6751  0F4E  0800               	movf	0,w	;code access
  6752  0F4F  00A5               	movwf	??_printf+2
  6753  0F50  0825               	movf	??_printf+2,w
  6754  0F51  00A7               	movwf	printf@c
  6755  0F52  0827               	movf	printf@c,w
  6756  0F53  1903               	btfsc	3,2
  6757  0F54  0008               	return
  6758                           
  6759                           ;doprnt.c: 540: {
  6760                           ;doprnt.c: 541: (putch(c) );
  6761  0F55  0827               	movf	printf@c,w
  6762  0F56  318E  260F  318F   	fcall	_putch
  6763  0F59  2F42               	goto	l3482
  6764  0F5A                     __end_of_printf:	
  6765                           ;doprnt.c: 1469: }
  6766                           ;doprnt.c: 1533: }
  6767                           ;doprnt.c: 1540: return 0;
  6768                           ;	Return value of _printf is never used
  6769                           
  6770                           
  6771                           	psect	text25
  6772  0E0F                     __ptext25:	
  6773 ;; *************** function _putch *****************
  6774 ;; Defined at:
  6775 ;;		line 164 in file "mcc_generated_files/eusart.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  txData          1    wreg     unsigned char 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  txData          1    0[BANK0 ] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6789 ;;      Params:         0       0       0       0       0       0
  6790 ;;      Locals:         0       1       0       0       0       0
  6791 ;;      Temps:          0       0       0       0       0       0
  6792 ;;      Totals:         0       1       0       0       0       0
  6793 ;;Total ram usage:        1 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    7
  6796 ;; This function calls:
  6797 ;;		_EUSART_Write
  6798 ;; This function is called by:
  6799 ;;		_printf
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           
  6804                           ;psect for function _putch
  6805  0E0F                     _putch:	
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6809                           ;putch@txData stored from wreg
  6810  0E0F  0020               	movlb	0	; select bank0
  6811  0E10  00A0               	movwf	putch@txData
  6812                           
  6813                           ;eusart.c: 166: EUSART_Write(txData);
  6814  0E11  0820               	movf	putch@txData,w
  6815  0E12  318F  27B7         	fcall	_EUSART_Write
  6816  0E14  0008               	return
  6817  0E15                     __end_of_putch:	
  6818                           
  6819                           	psect	text26
  6820  0FB7                     __ptext26:	
  6821 ;; *************** function _EUSART_Write *****************
  6822 ;; Defined at:
  6823 ;;		line 136 in file "mcc_generated_files/eusart.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  txData          1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  txData          1    5[COMMON] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6837 ;;      Params:         0       0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0
  6839 ;;      Temps:          1       0       0       0       0       0
  6840 ;;      Totals:         2       0       0       0       0       0
  6841 ;;Total ram usage:        2 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    6
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_putch
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           
  6852                           ;psect for function _EUSART_Write
  6853  0FB7                     _EUSART_Write:	
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6857                           ;EUSART_Write@txData stored from wreg
  6858  0FB7  00F5               	movwf	EUSART_Write@txData
  6859  0FB8                     l3292:	
  6860                           ;eusart.c: 139: {
  6861                           
  6862                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  6863                           
  6864  0FB8  0020               	movlb	0	; select bank0
  6865  0FB9  0864               	movf	_eusartTxBufferRemaining,w	;volatile
  6866  0FBA  1903               	btfsc	3,2
  6867  0FBB  2FB8               	goto	l3292
  6868                           
  6869                           ;eusart.c: 140: }
  6870                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  6871  0FBC  0021               	movlb	1	; select bank1
  6872  0FBD  1A11               	btfsc	17,4	;volatile
  6873  0FBE  2FC3               	goto	l171
  6874                           
  6875                           ;eusart.c: 143: {
  6876                           ;eusart.c: 144: TXREG = txData;
  6877  0FBF  0875               	movf	EUSART_Write@txData,w
  6878  0FC0  0023               	movlb	3	; select bank3
  6879  0FC1  009A               	movwf	26	;volatile
  6880                           
  6881                           ;eusart.c: 145: }
  6882  0FC2  2FD7               	goto	l3306
  6883  0FC3                     l171:	
  6884                           
  6885                           ;eusart.c: 146: else
  6886                           ;eusart.c: 147: {
  6887                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  6888  0FC3  1211               	bcf	17,4	;volatile
  6889                           
  6890                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  6891  0FC4  0875               	movf	EUSART_Write@txData,w
  6892  0FC5  00F4               	movwf	??_EUSART_Write
  6893  0FC6  0020               	movlb	0	; select bank0
  6894  0FC7  0865               	movf	_eusartTxHead,w
  6895  0FC8  3E4B               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6896  0FC9  0086               	movwf	6
  6897  0FCA  0187               	clrf	7
  6898  0FCB  0874               	movf	??_EUSART_Write,w
  6899  0FCC  0081               	movwf	1
  6900  0FCD  3001               	movlw	1
  6901  0FCE  00F4               	movwf	??_EUSART_Write
  6902  0FCF  0874               	movf	??_EUSART_Write,w
  6903  0FD0  07E5               	addwf	_eusartTxHead,f
  6904                           
  6905                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6906  0FD1  3008               	movlw	8
  6907  0FD2  0265               	subwf	_eusartTxHead,w
  6908  0FD3  1803               	btfsc	3,0
  6909                           
  6910                           ;eusart.c: 151: {
  6911                           ;eusart.c: 152: eusartTxHead = 0;
  6912  0FD4  01E5               	clrf	_eusartTxHead
  6913                           
  6914                           ;eusart.c: 153: }
  6915                           ;eusart.c: 154: eusartTxBufferRemaining--;
  6916  0FD5  3001               	movlw	1
  6917  0FD6  02E4               	subwf	_eusartTxBufferRemaining,f	;volatile
  6918  0FD7                     l3306:	
  6919                           
  6920                           ;eusart.c: 155: }
  6921                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  6922  0FD7  0021               	movlb	1	; select bank1
  6923  0FD8  1611               	bsf	17,4	;volatile
  6924  0FD9  0008               	return
  6925  0FDA                     __end_of_EUSART_Write:	
  6926                           
  6927                           	psect	text27
  6928  0EE8                     __ptext27:	
  6929 ;; *************** function _EPWM1_LoadDutyValue *****************
  6930 ;; Defined at:
  6931 ;;		line 90 in file "mcc_generated_files/epwm1.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;  dutyValue       2    4[COMMON] unsigned int 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6945 ;;      Params:         2       0       0       0       0       0
  6946 ;;      Locals:         0       0       0       0       0       0
  6947 ;;      Temps:          0       2       0       0       0       0
  6948 ;;      Totals:         2       2       0       0       0       0
  6949 ;;Total ram usage:        4 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    6
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           
  6960                           ;psect for function _EPWM1_LoadDutyValue
  6961  0EE8                     _EPWM1_LoadDutyValue:	
  6962                           
  6963                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
  6964                           
  6965                           ;incstack = 0
  6966                           ; Regs used in _EPWM1_LoadDutyValue: [wreg+status,2+status,0]
  6967  0EE8  0875               	movf	EPWM1_LoadDutyValue@dutyValue+1,w
  6968  0EE9  0020               	movlb	0	; select bank0
  6969  0EEA  00A1               	movwf	??_EPWM1_LoadDutyValue+1
  6970  0EEB  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  6971  0EEC  00A0               	movwf	??_EPWM1_LoadDutyValue
  6972  0EED  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  6973  0EEE  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  6974  0EEF  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  6975  0EF0  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  6976  0EF1  0820               	movf	??_EPWM1_LoadDutyValue,w
  6977  0EF2  0025               	movlb	5	; select bank5
  6978  0EF3  0091               	movwf	17	;volatile
  6979                           
  6980                           ;epwm1.c: 96: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  6981  0EF4  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  6982  0EF5  3903               	andlw	3
  6983  0EF6  0020               	movlb	0	; select bank0
  6984  0EF7  00A0               	movwf	??_EPWM1_LoadDutyValue
  6985  0EF8  3004               	movlw	4
  6986  0EF9                     u3665:	
  6987  0EF9  35A0               	lslf	??_EPWM1_LoadDutyValue,f
  6988  0EFA  0B89               	decfsz	9,f
  6989  0EFB  2EF9               	goto	u3665
  6990  0EFC  0025               	movlb	5	; select bank5
  6991  0EFD  0813               	movf	19,w	;volatile
  6992  0EFE  39CF               	andlw	207
  6993  0EFF  0020               	movlb	0	; select bank0
  6994  0F00  0420               	iorwf	??_EPWM1_LoadDutyValue,w
  6995  0F01  0025               	movlb	5	; select bank5
  6996  0F02  0093               	movwf	19	;volatile
  6997  0F03  0008               	return
  6998  0F04                     __end_of_EPWM1_LoadDutyValue:	
  6999                           
  7000                           	psect	intentry
  7001  0004                     __pintentry:	
  7002 ;; *************** function _INTERRUPT_InterruptManager *****************
  7003 ;; Defined at:
  7004 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;		None
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;		None
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  1    wreg      void 
  7011 ;; Registers used:
  7012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7018 ;;      Params:         0       0       0       0       0       0
  7019 ;;      Locals:         0       0       0       0       0       0
  7020 ;;      Temps:          1       0       0       0       0       0
  7021 ;;      Totals:         1       0       0       0       0       0
  7022 ;;Total ram usage:        1 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    5
  7025 ;; This function calls:
  7026 ;;		_EUSART_Receive_ISR
  7027 ;;		_EUSART_Transmit_ISR
  7028 ;;		_TMR0_ISR
  7029 ;; This function is called by:
  7030 ;;		Interrupt level 1
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034  0004                     _INTERRUPT_InterruptManager:	
  7035                           
  7036                           ;incstack = 0
  7037  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7038                           
  7039                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7040  0005  3180               	pagesel	$
  7041  0006  0020               	movlb	0	; select bank0
  7042  0007  087F               	movf	127,w
  7043  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  7044                           
  7045                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  7046  0009  1A8B               	btfsc	11,5	;volatile
  7047  000A  1D0B               	btfss	11,2	;volatile
  7048  000B  280F               	goto	i1l3068
  7049                           
  7050                           ;interrupt_manager.c: 55: {
  7051                           ;interrupt_manager.c: 56: TMR0_ISR();
  7052  000C  318E  2671  3180   	fcall	_TMR0_ISR
  7053  000F                     i1l3068:	
  7054                           
  7055                           ;interrupt_manager.c: 57: }
  7056                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7057  000F  1F0B               	btfss	11,6	;volatile
  7058  0010  281A               	goto	i1l3076
  7059  0011  0021               	movlb	1	; select bank1
  7060  0012  1E11               	btfss	17,4	;volatile
  7061  0013  281A               	goto	i1l3076
  7062  0014  0020               	movlb	0	; select bank0
  7063  0015  1E11               	btfss	17,4	;volatile
  7064  0016  281A               	goto	i1l3076
  7065                           
  7066                           ;interrupt_manager.c: 59: {
  7067                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  7068  0017  318F  2720  3180   	fcall	_EUSART_Transmit_ISR
  7069  001A                     i1l3076:	
  7070                           
  7071                           ;interrupt_manager.c: 61: }
  7072                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  7073  001A  1F0B               	btfss	11,6	;volatile
  7074  001B  2824               	goto	i1l77
  7075  001C  0021               	movlb	1	; select bank1
  7076  001D  1E91               	btfss	17,5	;volatile
  7077  001E  2824               	goto	i1l77
  7078  001F  0020               	movlb	0	; select bank0
  7079  0020  1E91               	btfss	17,5	;volatile
  7080  0021  2824               	goto	i1l77
  7081                           
  7082                           ;interrupt_manager.c: 63: {
  7083                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  7084  0022  318E  26B2         	fcall	_EUSART_Receive_ISR
  7085  0024                     i1l77:	
  7086                           ;interrupt_manager.c: 66: else
  7087                           ;interrupt_manager.c: 67: {
  7088                           
  7089                           ;interrupt_manager.c: 65: }
  7090                           
  7091  0024  0873               	movf	??_INTERRUPT_InterruptManager,w
  7092  0025  0020               	movlb	0	; select bank0
  7093  0026  00FF               	movwf	127
  7094  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7095  0028  0009               	retfie
  7096  0029                     __end_of_INTERRUPT_InterruptManager:	
  7097                           
  7098                           	psect	text29
  7099  0E71                     __ptext29:	
  7100 ;; *************** function _TMR0_ISR *****************
  7101 ;; Defined at:
  7102 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;		None
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;		None
  7107 ;; Return value:  Size  Location     Type
  7108 ;;                  1    wreg      void 
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0, pclath, cstack
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7116 ;;      Params:         0       0       0       0       0       0
  7117 ;;      Locals:         0       0       0       0       0       0
  7118 ;;      Temps:          0       0       0       0       0       0
  7119 ;;      Totals:         0       0       0       0       0       0
  7120 ;;Total ram usage:        0 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    4
  7123 ;; This function calls:
  7124 ;;		_TMR0_CallBack
  7125 ;; This function is called by:
  7126 ;;		_INTERRUPT_InterruptManager
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _TMR0_ISR
  7132  0E71                     _TMR0_ISR:	
  7133                           
  7134                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  7135                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  7139  0E71  110B               	bcf	11,2	;volatile
  7140                           
  7141                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  7142  0E72  0879               	movf	_timer0ReloadVal,w	;volatile
  7143  0E73  0020               	movlb	0	; select bank0
  7144  0E74  0095               	movwf	21	;volatile
  7145                           
  7146                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  7147  0E75  3001               	movlw	1
  7148  0E76  07DE               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  7149  0E77  3000               	movlw	0
  7150  0E78  3DDF               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  7151  0E79  3000               	movlw	0
  7152  0E7A  025F               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  7153  0E7B  3002               	movlw	2
  7154  0E7C  1903               	skipnz
  7155  0E7D  025E               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  7156  0E7E  1C03               	skipc
  7157  0E7F  0008               	return
  7158                           
  7159                           ;tmr0.c: 119: {
  7160                           ;tmr0.c: 121: TMR0_CallBack();
  7161  0E80  3187  27F5         	fcall	_TMR0_CallBack
  7162                           
  7163                           ;tmr0.c: 124: CountCallBack = 0;
  7164  0E82  0020               	movlb	0	; select bank0
  7165  0E83  01DE               	clrf	TMR0_ISR@CountCallBack	;volatile
  7166  0E84  01DF               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  7167  0E85  0008               	return
  7168  0E86                     __end_of_TMR0_ISR:	
  7169                           
  7170                           	psect	text30
  7171  07F5                     __ptext30:	
  7172 ;; *************** function _TMR0_CallBack *****************
  7173 ;; Defined at:
  7174 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;		None
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      void 
  7181 ;; Registers used:
  7182 ;;		wreg, status,2, status,0, pclath, cstack
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7188 ;;      Params:         0       0       0       0       0       0
  7189 ;;      Locals:         0       0       0       0       0       0
  7190 ;;      Temps:          0       0       0       0       0       0
  7191 ;;      Totals:         0       0       0       0       0       0
  7192 ;;Total ram usage:        0 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    3
  7195 ;; This function calls:
  7196 ;;		Absolute function
  7197 ;;		_TMR0_DefaultInterruptHandler
  7198 ;;		_my10msTimerISR
  7199 ;; This function is called by:
  7200 ;;		_TMR0_ISR
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           
  7205                           ;psect for function _TMR0_CallBack
  7206  07F5                     _TMR0_CallBack:	
  7207                           
  7208                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  7209                           
  7210                           ;incstack = 0
  7211                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  7212  07F5  0020               	movlb	0	; select bank0
  7213  07F6  0860               	movf	_TMR0_InterruptHandler,w
  7214  07F7  0461               	iorwf	_TMR0_InterruptHandler+1,w
  7215  07F8  1903               	btfsc	3,2
  7216  07F9  0008               	return
  7217                           
  7218                           ;tmr0.c: 135: {
  7219                           ;tmr0.c: 136: TMR0_InterruptHandler();
  7220  07FA  0861               	movf	_TMR0_InterruptHandler+1,w
  7221  07FB  008A               	movwf	10
  7222  07FC  0860               	movf	_TMR0_InterruptHandler,w
  7223  07FD  000A               	callw
  7224  07FE  3187               	pagesel	$
  7225  07FF  0008               	return
  7226  0800                     __end_of_TMR0_CallBack:	
  7227                           
  7228                           	psect	text31
  7229  0003                     __ptext31:	
  7230 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7231 ;; Defined at:
  7232 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		None
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7246 ;;      Params:         0       0       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0
  7249 ;;      Totals:         0       0       0       0       0       0
  7250 ;;Total ram usage:        0 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; This function calls:
  7253 ;;		Nothing
  7254 ;; This function is called by:
  7255 ;;		_TMR0_Initialize
  7256 ;;		_TMR0_CallBack
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           
  7261                           ;psect for function _TMR0_DefaultInterruptHandler
  7262  0003                     _TMR0_DefaultInterruptHandler:	
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  7266  0003  0008               	return
  7267  0004                     __end_of_TMR0_DefaultInterruptHandler:	
  7268                           
  7269                           	psect	text32
  7270  0E09                     __ptext32:	
  7271 ;; *************** function _my10msTimerISR *****************
  7272 ;; Defined at:
  7273 ;;		line 252 in file "main.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;		None
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;		None
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  1    wreg      void 
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0, pclath, cstack
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7287 ;;      Params:         0       0       0       0       0       0
  7288 ;;      Locals:         0       0       0       0       0       0
  7289 ;;      Temps:          0       0       0       0       0       0
  7290 ;;      Totals:         0       0       0       0       0       0
  7291 ;;Total ram usage:        0 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    2
  7294 ;; This function calls:
  7295 ;;		_LED_update_loop
  7296 ;;		_button_update_loop
  7297 ;; This function is called by:
  7298 ;;		_main
  7299 ;;		_TMR0_CallBack
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           
  7304                           ;psect for function _my10msTimerISR
  7305  0E09                     _my10msTimerISR:	
  7306                           
  7307                           ;main.c: 254: LED_update_loop();
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  7311  0E09  318F  27DA  318E   	fcall	_LED_update_loop
  7312                           
  7313                           ;main.c: 255: button_update_loop();
  7314  0E0C  3186  267F         	fcall	_button_update_loop
  7315  0E0E  0008               	return
  7316  0E0F                     __end_of_my10msTimerISR:	
  7317                           
  7318                           	psect	text33
  7319  067F                     __ptext33:	
  7320 ;; *************** function _button_update_loop *****************
  7321 ;; Defined at:
  7322 ;;		line 74 in file "interact.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  current_stat    1    2[COMMON] unsigned char 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, pclath, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7336 ;;      Params:         0       0       0       0       0       0
  7337 ;;      Locals:         1       0       0       0       0       0
  7338 ;;      Temps:          1       0       0       0       0       0
  7339 ;;      Totals:         2       0       0       0       0       0
  7340 ;;Total ram usage:        2 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    1
  7343 ;; This function calls:
  7344 ;;		_get_button_state
  7345 ;; This function is called by:
  7346 ;;		_my10msTimerISR
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function _button_update_loop
  7352  067F                     _button_update_loop:	
  7353                           
  7354                           ;interact.c: 76: unsigned char current_state = get_button_state();
  7355                           
  7356                           ;incstack = 0
  7357                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  7358  067F  318E  2639  3186   	fcall	_get_button_state
  7359  0682  00F1               	movwf	??_button_update_loop
  7360  0683  0871               	movf	??_button_update_loop,w
  7361  0684  00F2               	movwf	button_update_loop@current_state
  7362                           
  7363                           ;interact.c: 77: if (!m_button.push_confirmed)
  7364  0685  0020               	movlb	0	; select bank0
  7365  0686  0856               	movf	_m_button+3,w	;volatile
  7366  0687  1D03               	btfss	3,2
  7367  0688  2EA3               	goto	i1l2348
  7368                           
  7369                           ;interact.c: 78: {
  7370                           ;interact.c: 80: if (current_state != m_button.last_state)
  7371  0689  0858               	movf	_m_button+5,w	;volatile
  7372  068A  0672               	xorwf	button_update_loop@current_state,w
  7373  068B  1903               	skipnz
  7374  068C  2E93               	goto	i1l2340
  7375                           
  7376                           ;interact.c: 81: {
  7377                           ;interact.c: 82: m_button.count_pressed = 0;
  7378  068D  01D4               	clrf	_m_button+1	;volatile
  7379                           
  7380                           ;interact.c: 83: m_button.last_state = current_state;
  7381  068E  0872               	movf	button_update_loop@current_state,w
  7382  068F  00F1               	movwf	??_button_update_loop
  7383  0690  0871               	movf	??_button_update_loop,w
  7384  0691  00D8               	movwf	_m_button+5	;volatile
  7385                           
  7386                           ;interact.c: 84: }
  7387  0692  0008               	return
  7388  0693                     i1l2340:	
  7389                           
  7390                           ;interact.c: 85: else if (m_button.last_state == 1)
  7391  0693  0358               	decf	_m_button+5,w	;volatile
  7392  0694  1D03               	btfss	3,2
  7393  0695  0008               	return
  7394                           
  7395                           ;interact.c: 86: {
  7396                           ;interact.c: 87: m_button.count_pressed++;
  7397  0696  3001               	movlw	1
  7398  0697  00F1               	movwf	??_button_update_loop
  7399  0698  0871               	movf	??_button_update_loop,w
  7400  0699  07D4               	addwf	_m_button+1,f	;volatile
  7401                           
  7402                           ;interact.c: 88: if (m_button.count_pressed > 5)
  7403  069A  3006               	movlw	6
  7404  069B  0254               	subwf	_m_button+1,w	;volatile
  7405  069C  1C03               	skipc
  7406  069D  0008               	return
  7407                           
  7408                           ;interact.c: 89: m_button.push_confirmed = 1;
  7409  069E  3001               	movlw	1
  7410  069F  00F1               	movwf	??_button_update_loop
  7411  06A0  0871               	movf	??_button_update_loop,w
  7412  06A1  00D6               	movwf	_m_button+3	;volatile
  7413                           
  7414                           ;interact.c: 90: }
  7415                           ;interact.c: 91: }
  7416  06A2  0008               	return
  7417  06A3                     i1l2348:	
  7418                           
  7419                           ;interact.c: 92: else
  7420                           ;interact.c: 93: {
  7421                           ;interact.c: 94: if (current_state != m_button.last_state)
  7422  06A3  0858               	movf	_m_button+5,w	;volatile
  7423  06A4  0672               	xorwf	button_update_loop@current_state,w
  7424  06A5  1903               	skipnz
  7425  06A6  2EB1               	goto	i1l2356
  7426                           
  7427                           ;interact.c: 95: {
  7428                           ;interact.c: 96: m_button.count_released = 0;
  7429  06A7  01D5               	clrf	_m_button+2	;volatile
  7430                           
  7431                           ;interact.c: 97: m_button.last_state = current_state;
  7432  06A8  0872               	movf	button_update_loop@current_state,w
  7433  06A9  00F1               	movwf	??_button_update_loop
  7434  06AA  0871               	movf	??_button_update_loop,w
  7435  06AB  00D8               	movwf	_m_button+5	;volatile
  7436                           
  7437                           ;interact.c: 98: m_button.has_once_been_released = 1;
  7438  06AC  3001               	movlw	1
  7439  06AD  00F1               	movwf	??_button_update_loop
  7440  06AE  0871               	movf	??_button_update_loop,w
  7441  06AF  00D9               	movwf	_m_button+6	;volatile
  7442                           
  7443                           ;interact.c: 99: }
  7444  06B0  0008               	return
  7445  06B1                     i1l2356:	
  7446                           
  7447                           ;interact.c: 100: else if ((m_button.last_state == 1)&&(!m_button.has_once_been_released
      +                          ))
  7448  06B1  0358               	decf	_m_button+5,w	;volatile
  7449  06B2  1D03               	btfss	3,2
  7450  06B3  2EC4               	goto	i1l2366
  7451  06B4  0859               	movf	_m_button+6,w	;volatile
  7452  06B5  1D03               	btfss	3,2
  7453  06B6  2EC4               	goto	i1l2366
  7454                           
  7455                           ;interact.c: 101: {
  7456                           ;interact.c: 102: m_button.count_pressed++;
  7457  06B7  3001               	movlw	1
  7458  06B8  00F1               	movwf	??_button_update_loop
  7459  06B9  0871               	movf	??_button_update_loop,w
  7460  06BA  07D4               	addwf	_m_button+1,f	;volatile
  7461                           
  7462                           ;interact.c: 103: if (m_button.count_pressed >= 100)
  7463  06BB  3064               	movlw	100
  7464  06BC  0254               	subwf	_m_button+1,w	;volatile
  7465  06BD  1C03               	skipc
  7466  06BE  0008               	return
  7467                           
  7468                           ;interact.c: 104: m_button.confirmed_state = long_push;
  7469  06BF  3002               	movlw	2
  7470  06C0  00F1               	movwf	??_button_update_loop
  7471  06C1  0871               	movf	??_button_update_loop,w
  7472  06C2  00D3               	movwf	_m_button	;volatile
  7473                           
  7474                           ;interact.c: 105: }
  7475  06C3  0008               	return
  7476  06C4                     i1l2366:	
  7477                           
  7478                           ;interact.c: 106: else if (m_button.last_state == 0)
  7479  06C4  0858               	movf	_m_button+5,w	;volatile
  7480  06C5  1D03               	btfss	3,2
  7481  06C6  0008               	return
  7482                           
  7483                           ;interact.c: 107: {
  7484                           ;interact.c: 108: m_button.count_released++;
  7485  06C7  3001               	movlw	1
  7486  06C8  00F1               	movwf	??_button_update_loop
  7487  06C9  0871               	movf	??_button_update_loop,w
  7488  06CA  07D5               	addwf	_m_button+2,f	;volatile
  7489                           
  7490                           ;interact.c: 109: if (m_button.count_released > 10)
  7491  06CB  300B               	movlw	11
  7492  06CC  0255               	subwf	_m_button+2,w	;volatile
  7493  06CD  1C03               	skipc
  7494  06CE  0008               	return
  7495                           
  7496                           ;interact.c: 110: if (m_button.count_pressed >= 75)
  7497  06CF  304B               	movlw	75
  7498  06D0  0254               	subwf	_m_button+1,w	;volatile
  7499  06D1  1C03               	skipc
  7500  06D2  2ED8               	goto	i1l2376
  7501                           
  7502                           ;interact.c: 111: m_button.confirmed_state = long_push;
  7503  06D3  3002               	movlw	2
  7504  06D4  00F1               	movwf	??_button_update_loop
  7505  06D5  0871               	movf	??_button_update_loop,w
  7506  06D6  00D3               	movwf	_m_button	;volatile
  7507  06D7  0008               	return
  7508  06D8                     i1l2376:	
  7509                           
  7510                           ;interact.c: 112: else
  7511                           ;interact.c: 113: m_button.confirmed_state = short_push;
  7512  06D8  3001               	movlw	1
  7513  06D9  00F1               	movwf	??_button_update_loop
  7514  06DA  0871               	movf	??_button_update_loop,w
  7515  06DB  00D3               	movwf	_m_button	;volatile
  7516  06DC  0008               	return
  7517  06DD                     __end_of_button_update_loop:	
  7518                           
  7519                           	psect	text34
  7520  0E39                     __ptext34:	
  7521 ;; *************** function _get_button_state *****************
  7522 ;; Defined at:
  7523 ;;		line 54 in file "interact.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;  state           1    0[COMMON] unsigned char 
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      unsigned char 
  7530 ;; Registers used:
  7531 ;;		wreg, status,2, status,0
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7537 ;;      Params:         0       0       0       0       0       0
  7538 ;;      Locals:         1       0       0       0       0       0
  7539 ;;      Temps:          0       0       0       0       0       0
  7540 ;;      Totals:         1       0       0       0       0       0
  7541 ;;Total ram usage:        1 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; This function calls:
  7544 ;;		Nothing
  7545 ;; This function is called by:
  7546 ;;		_button_update_loop
  7547 ;;		_button_init
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           
  7552                           ;psect for function _get_button_state
  7553  0E39                     _get_button_state:	
  7554                           
  7555                           ;interact.c: 57: unsigned char state = PORTBbits.RB0;
  7556                           
  7557                           ;incstack = 0
  7558                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  7559  0E39  3000               	movlw	0
  7560  0E3A  0020               	movlb	0	; select bank0
  7561  0E3B  180D               	btfsc	13,0	;volatile
  7562  0E3C  3001               	movlw	1
  7563  0E3D  00F0               	movwf	get_button_state@state
  7564                           
  7565                           ;interact.c: 58: if (state == 1)
  7566  0E3E  0370               	decf	get_button_state@state,w
  7567  0E3F  1D03               	btfss	3,2
  7568  0E40  2E43               	goto	i1l2282
  7569                           
  7570                           ;interact.c: 59: return 0;
  7571  0E41  3000               	movlw	0
  7572  0E42  0008               	return
  7573  0E43                     i1l2282:	
  7574                           
  7575                           ;interact.c: 60: else return 1;
  7576  0E43  3001               	movlw	1
  7577  0E44  0008               	return
  7578  0E45                     __end_of_get_button_state:	
  7579                           
  7580                           	psect	text35
  7581  0FDA                     __ptext35:	
  7582 ;; *************** function _LED_update_loop *****************
  7583 ;; Defined at:
  7584 ;;		line 26 in file "interact.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;		None
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;		None
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7598 ;;      Params:         0       0       0       0       0       0
  7599 ;;      Locals:         0       0       0       0       0       0
  7600 ;;      Temps:          1       0       0       0       0       0
  7601 ;;      Totals:         1       0       0       0       0       0
  7602 ;;Total ram usage:        1 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; This function calls:
  7605 ;;		Nothing
  7606 ;; This function is called by:
  7607 ;;		_my10msTimerISR
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           
  7612                           ;psect for function _LED_update_loop
  7613  0FDA                     _LED_update_loop:	
  7614                           
  7615                           ;interact.c: 28: if (m_LED.state == manual_mode)
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  7619  0FDA  3004               	movlw	4
  7620  0FDB  0676               	xorwf	_m_LED,w	;volatile
  7621  0FDC  1903               	btfsc	3,2
  7622  0FDD  0008               	return
  7623                           
  7624                           ;interact.c: 30: else if (m_LED.state == slow_blinking)
  7625                           
  7626                           ;interact.c: 29: return;
  7627  0FDE  3002               	movlw	2
  7628  0FDF  0676               	xorwf	_m_LED,w	;volatile
  7629  0FE0  1D03               	btfss	3,2
  7630  0FE1  2FEF               	goto	i1l2320
  7631                           
  7632                           ;interact.c: 31: {
  7633                           ;interact.c: 32: m_LED.counter++;
  7634  0FE2  3001               	movlw	1
  7635  0FE3  00F0               	movwf	??_LED_update_loop
  7636  0FE4  0870               	movf	??_LED_update_loop,w
  7637  0FE5  07F7               	addwf	_m_LED+1,f	;volatile
  7638                           
  7639                           ;interact.c: 33: if (m_LED.counter >= 85)
  7640  0FE6  3055               	movlw	85
  7641  0FE7  0277               	subwf	_m_LED+1,w	;volatile
  7642  0FE8  1C03               	skipc
  7643  0FE9  0008               	return
  7644                           
  7645                           ;interact.c: 34: {
  7646                           ;interact.c: 35: m_LED.counter = 0;
  7647  0FEA  01F7               	clrf	_m_LED+1	;volatile
  7648                           
  7649                           ;interact.c: 36: do { LATA2 = ~LATA2; } while(0);
  7650  0FEB  3004               	movlw	4
  7651  0FEC  0022               	movlb	2	; select bank2
  7652  0FED  068C               	xorwf	12,f
  7653                           
  7654                           ;interact.c: 37: }
  7655                           ;interact.c: 38: }
  7656  0FEE  0008               	return
  7657  0FEF                     i1l2320:	
  7658                           
  7659                           ;interact.c: 39: else if (m_LED.state == fast_blinking)
  7660  0FEF  3003               	movlw	3
  7661  0FF0  0676               	xorwf	_m_LED,w	;volatile
  7662  0FF1  1D03               	btfss	3,2
  7663  0FF2  0008               	return
  7664                           
  7665                           ;interact.c: 40: {
  7666                           ;interact.c: 41: m_LED.counter++;
  7667  0FF3  3001               	movlw	1
  7668  0FF4  00F0               	movwf	??_LED_update_loop
  7669  0FF5  0870               	movf	??_LED_update_loop,w
  7670  0FF6  07F7               	addwf	_m_LED+1,f	;volatile
  7671                           
  7672                           ;interact.c: 42: if (m_LED.counter >= 20)
  7673  0FF7  3014               	movlw	20
  7674  0FF8  0277               	subwf	_m_LED+1,w	;volatile
  7675  0FF9  1C03               	skipc
  7676  0FFA  0008               	return
  7677                           
  7678                           ;interact.c: 43: {
  7679                           ;interact.c: 44: m_LED.counter = 0;
  7680  0FFB  01F7               	clrf	_m_LED+1	;volatile
  7681                           
  7682                           ;interact.c: 45: do { LATA2 = ~LATA2; } while(0);
  7683  0FFC  3004               	movlw	4
  7684  0FFD  0022               	movlb	2	; select bank2
  7685  0FFE  068C               	xorwf	12,f
  7686  0FFF  0008               	return
  7687  1000                     __end_of_LED_update_loop:	
  7688                           
  7689                           	psect	text36
  7690  0F20                     __ptext36:	
  7691 ;; *************** function _EUSART_Transmit_ISR *****************
  7692 ;; Defined at:
  7693 ;;		line 169 in file "mcc_generated_files/eusart.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;		None
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;		None
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      void 
  7700 ;; Registers used:
  7701 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7707 ;;      Params:         0       0       0       0       0       0
  7708 ;;      Locals:         0       0       0       0       0       0
  7709 ;;      Temps:          1       0       0       0       0       0
  7710 ;;      Totals:         1       0       0       0       0       0
  7711 ;;Total ram usage:        1 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; This function calls:
  7714 ;;		Nothing
  7715 ;; This function is called by:
  7716 ;;		_INTERRUPT_InterruptManager
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           
  7721                           ;psect for function _EUSART_Transmit_ISR
  7722  0F20                     _EUSART_Transmit_ISR:	
  7723                           
  7724                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7728  0F20  3008               	movlw	8
  7729  0F21  0020               	movlb	0	; select bank0
  7730  0F22  0264               	subwf	_eusartTxBufferRemaining,w	;volatile
  7731  0F23  1803               	skipnc
  7732  0F24  2F3A               	goto	i1l183
  7733                           
  7734                           ;eusart.c: 174: {
  7735                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  7736  0F25  0866               	movf	_eusartTxTail,w
  7737  0F26  3E4B               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  7738  0F27  0086               	movwf	6
  7739  0F28  0187               	clrf	7
  7740  0F29  0801               	movf	1,w
  7741  0F2A  0023               	movlb	3	; select bank3
  7742  0F2B  009A               	movwf	26	;volatile
  7743  0F2C  3001               	movlw	1
  7744  0F2D  00F0               	movwf	??_EUSART_Transmit_ISR
  7745  0F2E  0870               	movf	??_EUSART_Transmit_ISR,w
  7746  0F2F  0020               	movlb	0	; select bank0
  7747  0F30  07E6               	addwf	_eusartTxTail,f
  7748                           
  7749                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7750  0F31  3008               	movlw	8
  7751  0F32  0266               	subwf	_eusartTxTail,w
  7752  0F33  1803               	btfsc	3,0
  7753                           
  7754                           ;eusart.c: 177: {
  7755                           ;eusart.c: 178: eusartTxTail = 0;
  7756  0F34  01E6               	clrf	_eusartTxTail
  7757                           
  7758                           ;eusart.c: 179: }
  7759                           ;eusart.c: 180: eusartTxBufferRemaining++;
  7760  0F35  3001               	movlw	1
  7761  0F36  00F0               	movwf	??_EUSART_Transmit_ISR
  7762  0F37  0870               	movf	??_EUSART_Transmit_ISR,w
  7763  0F38  07E4               	addwf	_eusartTxBufferRemaining,f	;volatile
  7764                           
  7765                           ;eusart.c: 181: }
  7766  0F39  0008               	return
  7767  0F3A                     i1l183:	
  7768                           
  7769                           ;eusart.c: 182: else
  7770                           ;eusart.c: 183: {
  7771                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  7772  0F3A  0021               	movlb	1	; select bank1
  7773  0F3B  1211               	bcf	17,4	;volatile
  7774  0F3C  0008               	return
  7775  0F3D                     __end_of_EUSART_Transmit_ISR:	
  7776                           
  7777                           	psect	text37
  7778  0EB2                     __ptext37:	
  7779 ;; *************** function _EUSART_Receive_ISR *****************
  7780 ;; Defined at:
  7781 ;;		line 188 in file "mcc_generated_files/eusart.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;		None
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;		None
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      void 
  7788 ;; Registers used:
  7789 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7795 ;;      Params:         0       0       0       0       0       0
  7796 ;;      Locals:         0       0       0       0       0       0
  7797 ;;      Temps:          1       0       0       0       0       0
  7798 ;;      Totals:         1       0       0       0       0       0
  7799 ;;Total ram usage:        1 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; This function calls:
  7802 ;;		Nothing
  7803 ;; This function is called by:
  7804 ;;		_INTERRUPT_InterruptManager
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           
  7809                           ;psect for function _EUSART_Receive_ISR
  7810  0EB2                     _EUSART_Receive_ISR:	
  7811                           
  7812                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  7813                           
  7814                           ;incstack = 0
  7815                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7816  0EB2  0023               	movlb	3	; select bank3
  7817  0EB3  1C9D               	btfss	29,1	;volatile
  7818  0EB4  2EB7               	goto	i1l2614
  7819                           
  7820                           ;eusart.c: 192: {
  7821                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  7822  0EB5  139D               	bcf	29,7	;volatile
  7823                           
  7824                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  7825  0EB6  179D               	bsf	29,7	;volatile
  7826  0EB7                     i1l2614:	
  7827                           
  7828                           ;eusart.c: 197: }
  7829                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  7830  0EB7  0819               	movf	25,w	;volatile
  7831  0EB8  00F0               	movwf	??_EUSART_Receive_ISR
  7832  0EB9  0020               	movlb	0	; select bank0
  7833  0EBA  0862               	movf	_eusartRxHead,w
  7834  0EBB  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7835  0EBC  0086               	movwf	6
  7836  0EBD  0187               	clrf	7
  7837  0EBE  0870               	movf	??_EUSART_Receive_ISR,w
  7838  0EBF  0081               	movwf	1
  7839  0EC0  3001               	movlw	1
  7840  0EC1  00F0               	movwf	??_EUSART_Receive_ISR
  7841  0EC2  0870               	movf	??_EUSART_Receive_ISR,w
  7842  0EC3  07E2               	addwf	_eusartRxHead,f
  7843                           
  7844                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7845  0EC4  3008               	movlw	8
  7846  0EC5  0262               	subwf	_eusartRxHead,w
  7847  0EC6  1803               	btfsc	3,0
  7848                           
  7849                           ;eusart.c: 202: {
  7850                           ;eusart.c: 203: eusartRxHead = 0;
  7851  0EC7  01E2               	clrf	_eusartRxHead
  7852                           
  7853                           ;eusart.c: 204: }
  7854                           ;eusart.c: 205: eusartRxCount++;
  7855  0EC8  3001               	movlw	1
  7856  0EC9  00F0               	movwf	??_EUSART_Receive_ISR
  7857  0ECA  0870               	movf	??_EUSART_Receive_ISR,w
  7858  0ECB  07F8               	addwf	_eusartRxCount,f	;volatile
  7859  0ECC  0008               	return
  7860  0ECD                     __end_of_EUSART_Receive_ISR:	
  7861  007E                     btemp	set	126	;btemp
  7862  007E                     int$flags	set	126
  7863  007E                     wtemp	set	126
  7864  007E                     wtemp0	set	126
  7865  0080                     wtemp1	set	128
  7866  0082                     wtemp2	set	130
  7867  0084                     wtemp3	set	132
  7868  0086                     wtemp4	set	134
  7869  0088                     wtemp5	set	136
  7870  007F                     wtemp6	set	127
  7871  007E                     ttemp	set	126
  7872  007E                     ttemp0	set	126
  7873  0081                     ttemp1	set	129
  7874  0084                     ttemp2	set	132
  7875  0087                     ttemp3	set	135
  7876  007F                     ttemp4	set	127
  7877  007E                     ltemp	set	126
  7878  007E                     ltemp0	set	126
  7879  0082                     ltemp1	set	130
  7880  0086                     ltemp2	set	134
  7881  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     43      73
    BANK1            80      9      64
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    write_calibration_to_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK0[2]), m_conf(BANK1[47]), 

    load_calibration_from_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK0[2]), m_conf(BANK1[47]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_EPWM1_LoadDutyValue
    _main->_LED_set_state
    _main->_TMR0_SetInterruptHandler
    _main->_load_calibration_from_EEPROM
    _main->_write_calibration_to_EEPROM
    _write_calibration_to_EEPROM->_DATAEE_WriteByte
    _load_calibration_from_EEPROM->_DATAEE_ReadByte
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _write_calibration_to_EEPROM->_crc_update
    _multiply_fp->___lmul
    _load_calibration_from_EEPROM->_crc_update
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->_convert_to_fp
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   10345
                                             40 BANK0      3     3      0
                                              0 BANK1      9     9      0
                _EPWM1_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
       _load_calibration_from_EEPROM
                        _multiply_fp
                _perform_calibration
        _write_calibration_to_EEPROM
 ---------------------------------------------------------------------------------
 (1) _write_calibration_to_EEPROM                          4     4      0    1130
                                              5 COMMON     1     1      0
                                             17 BANK0      3     3      0
                   _DATAEE_WriteByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     253
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _perform_calibration                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    1659
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _load_calibration_from_EEPROM                         6     6      0     976
                                              5 COMMON     1     1      0
                                             17 BANK0      5     5      0
                    _DATAEE_ReadByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _crc_update                                          17    14      3     565
                                              0 BANK0     17    14      3
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                   _EPWM1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     155
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    4459
                                             21 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4     686
                                              0 BANK0     21    17      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     598
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM1_LoadDutyValue                                  4     2      2     601
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   2     2      0     112
                                              1 COMMON     2     2      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   _load_calibration_from_EEPROM
     _DATAEE_ReadByte
     _crc_update
   _multiply_fp
     ___lmul
   _perform_calibration
   _write_calibration_to_EEPROM
     _DATAEE_WriteByte
     _crc_update

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      93       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      49       6       91.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      9      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      93      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Sep 21 10:45:45 2016

                             __CFG_CP$OFF 0000                                        l28 0E2C  
                     ___wmul@multiplicand 0022                           _timer0ReloadVal 0079  
                  __end_of_my10msTimerISR 0E0F                                       l171 0FC3  
                                     l323 030E                                       l332 0369  
                                     l417 0F74                                       l366 0573  
                                     l632 0FAD                                       l732 0F0D  
                                     l572 0231                                       _PR2 001B  
                            __CFG_CPD$OFF 0000                           _TMR2_Initialize 0E2F  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              ?_EUSART_Read 0070  
                            __CFG_LVP$OFF 0000                                      l4000 02ED  
                                    l4010 030A                                      l4022 030F  
                                    l4006 0304                                      l4040 0345  
                                    l3306 0FD7                                      l4050 0365  
                                    l3500 07CE                                      l4054 0372  
                                    l4046 035C                                      l3600 0F66  
                                    l3504 07D8                                      l4080 03B8  
                                    l4072 039C                                      l3602 0F6C  
                                    l4066 0385                                      l3292 0FB8  
                                    l3612 0786                                      l3524 05C3  
                                    l4076 03AC                                      l3462 0541  
                                    l3710 00CE                                      l3702 00C6  
                                    l3630 0046                                      l3542 05FA  
                                    l3534 05F1                                      l4094 0405  
                                    l3712 00CF                                      l3632 0055  
                                    l3552 0615                                      l4088 03DA  
                                    l3482 0F42                                      l3618 079B  
                                    l3474 058F                                      l3722 00E1  
                                    l3388 0F7A                                      l3468 056B  
                                    l3572 065D                                      l3564 062E  
                                    l3486 0F06                                      l3910 0247  
                                    l3670 0090                                      l3654 0079  
                                    l3832 0196                                      l3752 010D  
                                    l3744 0105                                      l3680 00A2  
                                    l3664 008D                                      l3930 0270  
                                    l3914 024F                                      l3842 01B9  
                                    l3818 0171                                      l3754 010E  
                                    l3924 0259                                      l3852 01EC  
                                    l3844 01D6                                      l3828 0186  
                                    l3764 0120                                      l3668 008F  
                                    l3942 028E                                      l3918 0251  
                                    l3838 0198                                      l3846 0178  
                                    l3848 01DB                                      l3882 0218  
                                    l3874 0210                                      l3794 014C  
                                    l3786 0144                                      l3970 02A8  
                                    l3892 022A                                      l3884 021A  
                                    l3796 014D                                      l3992 02E3  
                                    l3976 02BF                                      STR_1 06EB  
                                    STR_2 071F                                      _LATA 010C  
                                    _LATB 010D                                      u3515 0528  
                                    u3605 0F13                                      u4405 0452  
                                    u3710 061F                                      u4415 046A  
                                    u3544 055D                                      u3545 055B  
                                    u4425 049A                                      u4355 0261  
                                    u3715 061B                                      u3635 07D9  
                                    u4435 04EE                                      u3485 074D  
                                    u3645 07E0                                      u3495 075A  
                                    u3665 0EF9                                      u4385 041F  
                                    u3595 0F0E                                      u4395 0437  
                                    u4807 02F4                                      u4817 0316  
                                    u4907 07BE                                      u4827 0333  
                                    i1l77 0024                                      u4837 034C  
                                    u4847 038C                                      u4857 03A7  
                                    u4867 03D3                                      u4787 02AF  
                                    u4877 040C                                      u4797 02D6  
                                    u4887 078C                                      u4897 07A9  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                    __end_of_GPS_read_speed 0290  
                             main@tmp_601 00D9                               main@tmp_610 00DD  
                             main@tmp_602 00DA                               main@tmp_607 00DB  
                             main@tmp_609 00DC                                      _main 0290  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0029  
                                    ttemp 007E                                      wtemp 007E  
                   ??_EPWM1_LoadDutyValue 0020                             __CFG_MCLRE$ON 0000  
               __size_of_DATAEE_WriteByte 0021                   __end_of_TMR0_Initialize 0E9B  
                           __CFG_PLLEN$ON 0000            ??_TMR0_DefaultInterruptHandler 0070  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0008  
           __end_of_OSCILLATOR_Initialize 0E2F                                     ?_main 0070  
                           _convert_to_fp 050D                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     _LATA2 0862  
                         ?_my10msTimerISR 0070                                     i1l183 0F3A  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 0028         __size_of_TMR0_SetInterruptHandler 0006  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0074  
                         __end_of_fp_x0_a 06E1                           __end_of_fp_x0_b 06E5  
                        __end_of_TMR0_ISR 0E86                                     _m_LED 0076  
                         _DATAEE_ReadByte 0E45                                     _m_crc 0067  
                                   _speed 005A                                     _putch 0E0F  
                 __end_of_LED_update_loop 1000                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0070                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                         _TMR2_StartTimer 0E06                             multiply_fp@n1 002C  
                           multiply_fp@n2 0030                           __initialization 002B  
                  __size_of_LED_set_state 001D                              __end_of_main 0414  
         write_calibration_to_EEPROM@addr 0031                            ??_EUSART_Write 0074  
                 __end_of_TMR2_Initialize 0E39               ?_INTERRUPT_InterruptManager 0070  
    __end_of_load_calibration_from_EEPROM 0621     __size_of_load_calibration_from_EEPROM 006B  
            _load_calibration_from_EEPROM 05B6                            ?_convert_to_fp 0020  
                                  ??_main 0048                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _CCPR1H 0292  
                                  _EEDATH 0194                                    _CCPR1L 0291  
                                  _EEDATL 0193                                    _EECON2 0196  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELB 018D                                    i1l2320 0FEF  
                                  i1l2340 0693                                    i1l2282 0E43  
                                  i1l2356 06B1                                    i1l2348 06A3  
                                  i1l3076 001A                                    i1l3068 000F  
                                  i1l2614 0EB7                                    i1l2366 06C4  
                                  i1l2376 06D8                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                          __CFG_PWRTE$OFF 0000                        convert_to_fp@i_bit 002E  
                            _CCPTMRS0bits 029E                                    ___lmul 07C5  
                                  ___wmul 0F04                            __CFG_STVREN$ON 0000  
             __end_of_perform_calibration 0E21                                    _m_conf 00A8  
                     _EUSART_Transmit_ISR 0F20                          ?_TMR0_Initialize 0070  
              __end_of_button_update_loop 06DD                                    _printf 0F3D  
                                  main@up 00D7                   __end_of_DATAEE_ReadByte 0E51  
           ?_load_calibration_from_EEPROM 0070                             _LED_set_state 0F5A  
                   __end_of_TMR0_CallBack 0800                   __end_of_TMR2_StartTimer 0E09  
TMR0_SetInterruptHandler@InterruptHandler 0074                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0070                    convert_to_fp@res_fract 002C  
                        ?_LED_update_loop 0070                              ?_multiply_fp 002C  
                    __size_of_EUSART_Read 001F                         _SYSTEM_Initialize 0E5F  
                 __end_of__initialization 003E                            multiply_fp@res 0042  
                      ?_SYSTEM_Initialize 0070                         ?_EPWM1_Initialize 0070  
    __size_of_write_calibration_to_EEPROM 005E                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0076                                 ?_TMR0_ISR 0070  
                      ??_EPWM1_Initialize 0074                          _DATAEE_WriteByte 0F96  
                         ??_convert_to_fp 0024                             __end_of_putch 0E15  
                        ?_TMR2_Initialize 0070                            _OPTION_REGbits 0095  
                   TMR0_ISR@CountCallBack 005E                            ?_LED_set_state 0070  
               __end_of_SYSTEM_Initialize 0E71                     ??_EUSART_Transmit_ISR 0070  
                                 ??_putch 0076                                __pbssBANK0 004B  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 0FDA  
             __size_of_EUSART_Receive_ISR 001B                                __pmaintext 0290  
        __end_of_TMR0_SetInterruptHandler 0E1B                                   ?___lmul 0020  
                                 ?___wmul 0020                                ??_TMR0_ISR 0073  
                        ??_my10msTimerISR 0073                                __pintentry 0004  
                                 _CCP1CON 0293                                   _ECCP1AS 0295  
                                 _BAUDCON 019F                            ___lmul@product 0028  
                                 _APFCON0 011D                                   _APFCON1 011E  
                                 ?_printf 0021                          ?_DATAEE_ReadByte 0070  
                              _crc_update 0731                     get_button_state@state 0070  
                           _eusartRxCount 0078                                   _OSCSTAT 009A  
                                 _OSCTUNE 0098                                   _PWM1CON 0294  
                        ??_GPS_read_speed 0035            ??_load_calibration_from_EEPROM 0075  
                        ?_TMR2_StartTimer 0070          load_calibration_from_EEPROM@addr 0033  
             __end_of_EPWM1_LoadDutyValue 0F04                      DATAEE_WriteByte@bAdd 0020  
                         __size_of___lmul 0030                           __size_of___wmul 001C  
                 convert_to_fp@fract_part 0022                                   _fp_x0_a 06DD  
                                 _fp_x0_b 06E1                                   __ptext1 0621  
                                 __ptext2 0F96                                   __ptext3 0E1B  
                                 __ptext4 0414                                   __ptext5 07C5  
                                 __ptext6 05B6                                   __ptext7 0731  
                                 __ptext8 0E45                                   __ptext9 0E5F  
                         __size_of_printf 001D                           ??_LED_set_state 0074  
                   _OSCILLATOR_Initialize 0E27                                 _T2CONbits 001C  
            GPS_read_speed@read_speed_fra 003B                  ??_PIN_MANAGER_Initialize 0074  
            GPS_read_speed@read_speed_int 0039                __size_of_SYSTEM_Initialize 0012  
                                 clrloop0 0E22                          _get_button_state 0E39  
                                 main@tmp 00D8                            main@motor_load 00DE  
                    end_of_initialization 003E                         __end_of_ratio_mph 06E9  
                  LED_set_state@new_state 0075                      __size_of_multiply_fp 00F9  
                       _EUSART_Initialize 0ECD                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@c 0027  
                                 printf@f 0021                              __pstringtext 06DD  
                     ??_EUSART_Initialize 0074                  _TMR0_SetInterruptHandler 0E15  
                               _PORTBbits 000D                               ?_crc_update 0020  
                    GPS_read_speed@i_buff 0046                      GPS_read_speed@m_char 0047  
                    GPS_read_speed@buffer 003F                          __CFG_FOSC$INTOSC 0000  
                   __size_of_EUSART_Write 0023                        _button_update_loop 067F  
            ?_write_calibration_to_EEPROM 0070                  __end_of_DATAEE_WriteByte 0FB7  
               __end_of_EUSART_Initialize 0EE8                   __size_of_GPS_Initialize 0045  
                     ?_button_update_loop 0070                            __end_of___lmul 07F5  
                          __end_of___wmul 0F20                              _EUSART_Write 0FB7  
                       __size_of_TMR0_ISR 0015                          convert_to_fp@one 06E9  
                        convert_to_fp@res 0031                    ?_OSCILLATOR_Initialize 0070  
                    ??_button_update_loop 0071                            __end_of_printf 0F5A  
            __size_of_perform_calibration 0006                       start_initialization 002B  
               __size_of_EPWM1_Initialize 000E                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0017                             ??_EUSART_Read 0074  
                             putch@txData 0020              EPWM1_LoadDutyValue@dutyValue 0074  
           ??_write_calibration_to_EEPROM 0075                       DATAEE_ReadByte@bAdd 0074  
                       crc_update@old_crc 0020                       __size_of_crc_update 004F  
                __size_of_LED_update_loop 0026                                  ??___lmul 0074  
                                ??___wmul 0074                    __size_of_TMR0_CallBack 000B  
                   convert_to_fp@int_part 0020                     __end_of_convert_to_fp 05B6  
                                ??_printf 0023               __end_of_EUSART_Transmit_ISR 0F3D  
           load_calibration_from_EEPROM@i 0035             load_calibration_from_EEPROM@p 0034  
                             __pbssCOMMON 0076                                 ___latbits 0001  
                           __pcstackBANK0 0020                             __pcstackBANK1 00D7  
                   convert_to_fp@tmp_left 002F                  __size_of_TMR2_Initialize 000A  
              __end_of_EUSART_Receive_ISR 0ECD                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 0F96                     _TMR0_InterruptHandler 0060  
                  _PIN_MANAGER_Initialize 0E9B                      EUSART_Read@readValue 0075  
                __end_of_get_button_state 0E45                              _eusartRxHead 0062  
                            _eusartTxHead 0065                              _eusartRxTail 0063  
                            _eusartTxTail 0066              ??_INTERRUPT_InterruptManager 0073  
                 _eusartTxBufferRemaining 0064           load_calibration_from_EEPROM@crc 0031  
                           _TMR0_CallBack 07F5                  __size_of_DATAEE_ReadByte 000C  
                          __size_of_putch 0006                            _eusartRxBuffer 00A0  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 0780  
                          _eusartTxBuffer 004B                            ___wmul@product 0074  
                               clear_ram0 0E21                                  _PIE1bits 0091  
                               _ratio_mph 06E5                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0025                ??_TMR0_SetInterruptHandler 0076  
                                _PIR1bits 0011              __size_of_EPWM1_LoadDutyValue 001C  
                                _TMR0_ISR 0E71                                  _PSTR1CON 0296  
                       ??_LED_update_loop 0070                         ___wmul@multiplier 0020  
                            ??_crc_update 0023                          _EPWM1_Initialize 0E51  
                   __end_of_LED_set_state 0F77                   __size_of_my10msTimerISR 0006  
                   DATAEE_WriteByte@bData 0074                            ?_TMR0_CallBack 0070  
                             _EUSART_Read 0F77                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 07C5                             ??_multiply_fp 0034  
                       ?_DATAEE_WriteByte 0074                  __end_ofconvert_to_fp@one 06EB  
          GPS_read_speed@no_more_checksum 0038                         ??_TMR2_Initialize 0074  
                      ??_DATAEE_WriteByte 0075                                _EECON1bits 0195  
                     _perform_calibration 0E1B                   __size_of_GPS_read_speed 024E  
                      __end_of_crc_update 0780                         GPS_Initialize@tmp 002B  
                 ??_OSCILLATOR_Initialize 0074                      ?_perform_calibration 0070  
         button_update_loop@current_state 0072                  GPS_read_speed@before_dot 0037  
                                __ptext10 0E2F                                  __ptext11 0E06  
                                __ptext20 050D                                  __ptext12 0E86  
                                __ptext21 0F04                                  __ptext13 0E15  
                                __ptext30 07F5                                  __ptext22 0F77  
                                __ptext14 0E9B                                  __ptext31 0003  
                                __ptext23 0780                                  __ptext15 0E27  
                                __ptext32 0E09                                  __ptext24 0F3D  
                                __ptext16 0ECD                                  __ptext33 067F  
                                __ptext25 0E0F                                  __ptext17 0E51  
                                __ptext34 0E39                                  __ptext26 0FB7  
                                __ptext18 0F5A                                  __ptext35 0FDA  
                                __ptext27 0EE8                                  __ptext19 0042  
                                __ptext36 0F20                                  __ptext37 0EB2  
                                __ptext29 0E71                           ?_GPS_Initialize 0070  
             DATAEE_WriteByte@GIEBitValue 0021                                  _m_button 0053  
                           __size_of_main 0184      __end_of_TMR0_DefaultInterruptHandler 0004  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0003  
                       ??_DATAEE_ReadByte 0074                       __end_of_multiply_fp 050D  
                                int$flags 007E                         ??_TMR2_StartTimer 0074  
      __end_of_INTERRUPT_InterruptManager 0029                _INTERRUPT_InterruptManager 0004  
                   ??_perform_calibration 0074               __size_of_button_update_loop 005E  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0073  
                                intlevel1 0000                   ?_PIN_MANAGER_Initialize 0070  
                 GPS_read_speed@checksum2 003D                         __CFG_CLKOUTEN$OFF 0000  
           ?_TMR0_DefaultInterruptHandler 0070                                  printf@ap 0026  
                      _EUSART_Receive_ISR 0EB2                         ?_get_button_state 0070  
                          crc_update@data 0022                        ??_get_button_state 0070  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0070  
                         _TMR0_Initialize 0E86                    GPS_read_speed@checksum 003E  
                          _my10msTimerISR 0E09                       _EPWM1_LoadDutyValue 0EE8  
     __end_of_write_calibration_to_EEPROM 067F               _write_calibration_to_EEPROM 0621  
                           crc_update@crc 002D                        EUSART_Write@txData 0075  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 0EB2  
                   GPS_read_speed@i_buff2 0045                               _multiply_fp 0414  
                  __size_of_convert_to_fp 00A9                      ??_EUSART_Receive_ISR 0070  
                          _GPS_read_speed 0042                               crc_update@x 002F  
                         _LED_update_loop 0FDA              write_calibration_to_EEPROM@i 0033  
            write_calibration_to_EEPROM@p 0032                  __end_of_EPWM1_Initialize 0E5F  
                    ?_EPWM1_LoadDutyValue 0074  



Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Sep 20 07:16:18 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     	;# 
    44  0001                     	;# 
    45  0002                     	;# 
    46  0003                     	;# 
    47  0004                     	;# 
    48  0005                     	;# 
    49  0006                     	;# 
    50  0007                     	;# 
    51  0008                     	;# 
    52  0009                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000D                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0093                     	;# 
    77  0094                     	;# 
    78  0095                     	;# 
    79  0096                     	;# 
    80  0097                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  0111                     	;# 
    92  0112                     	;# 
    93  0113                     	;# 
    94  0114                     	;# 
    95  0115                     	;# 
    96  0116                     	;# 
    97  0117                     	;# 
    98  0118                     	;# 
    99  0119                     	;# 
   100  011A                     	;# 
   101  011B                     	;# 
   102  011D                     	;# 
   103  011E                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0191                     	;# 
   107  0191                     	;# 
   108  0192                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0194                     	;# 
   113  0195                     	;# 
   114  0196                     	;# 
   115  0199                     	;# 
   116  019A                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019C                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  019F                     	;# 
   126  020C                     	;# 
   127  020D                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0219                     	;# 
   144  021A                     	;# 
   145  021B                     	;# 
   146  021C                     	;# 
   147  021D                     	;# 
   148  021E                     	;# 
   149  021F                     	;# 
   150  0291                     	;# 
   151  0291                     	;# 
   152  0292                     	;# 
   153  0293                     	;# 
   154  0294                     	;# 
   155  0295                     	;# 
   156  0295                     	;# 
   157  0296                     	;# 
   158  0298                     	;# 
   159  0298                     	;# 
   160  0299                     	;# 
   161  029A                     	;# 
   162  029B                     	;# 
   163  029C                     	;# 
   164  029C                     	;# 
   165  029D                     	;# 
   166  029E                     	;# 
   167  029E                     	;# 
   168  0311                     	;# 
   169  0311                     	;# 
   170  0312                     	;# 
   171  0313                     	;# 
   172  0318                     	;# 
   173  0318                     	;# 
   174  0319                     	;# 
   175  031A                     	;# 
   176  0394                     	;# 
   177  0395                     	;# 
   178  0396                     	;# 
   179  039A                     	;# 
   180  039C                     	;# 
   181  039D                     	;# 
   182  039E                     	;# 
   183  039F                     	;# 
   184  0415                     	;# 
   185  0416                     	;# 
   186  0417                     	;# 
   187  041C                     	;# 
   188  041D                     	;# 
   189  041E                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE9                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEF                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0008                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0013                     	;# 
   218  0014                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0016                     	;# 
   222  0017                     	;# 
   223  0018                     	;# 
   224  0019                     	;# 
   225  001A                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  001E                     	;# 
   229  001F                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0094                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011A                     	;# 
   259  011B                     	;# 
   260  011D                     	;# 
   261  011E                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0191                     	;# 
   265  0191                     	;# 
   266  0192                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0193                     	;# 
   270  0194                     	;# 
   271  0195                     	;# 
   272  0196                     	;# 
   273  0199                     	;# 
   274  019A                     	;# 
   275  019B                     	;# 
   276  019B                     	;# 
   277  019B                     	;# 
   278  019B                     	;# 
   279  019C                     	;# 
   280  019C                     	;# 
   281  019D                     	;# 
   282  019E                     	;# 
   283  019F                     	;# 
   284  020C                     	;# 
   285  020D                     	;# 
   286  0211                     	;# 
   287  0211                     	;# 
   288  0212                     	;# 
   289  0212                     	;# 
   290  0213                     	;# 
   291  0213                     	;# 
   292  0214                     	;# 
   293  0214                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0216                     	;# 
   298  0216                     	;# 
   299  0217                     	;# 
   300  0217                     	;# 
   301  0219                     	;# 
   302  021A                     	;# 
   303  021B                     	;# 
   304  021C                     	;# 
   305  021D                     	;# 
   306  021E                     	;# 
   307  021F                     	;# 
   308  0291                     	;# 
   309  0291                     	;# 
   310  0292                     	;# 
   311  0293                     	;# 
   312  0294                     	;# 
   313  0295                     	;# 
   314  0295                     	;# 
   315  0296                     	;# 
   316  0298                     	;# 
   317  0298                     	;# 
   318  0299                     	;# 
   319  029A                     	;# 
   320  029B                     	;# 
   321  029C                     	;# 
   322  029C                     	;# 
   323  029D                     	;# 
   324  029E                     	;# 
   325  029E                     	;# 
   326  0311                     	;# 
   327  0311                     	;# 
   328  0312                     	;# 
   329  0313                     	;# 
   330  0318                     	;# 
   331  0318                     	;# 
   332  0319                     	;# 
   333  031A                     	;# 
   334  0394                     	;# 
   335  0395                     	;# 
   336  0396                     	;# 
   337  039A                     	;# 
   338  039C                     	;# 
   339  039D                     	;# 
   340  039E                     	;# 
   341  039F                     	;# 
   342  0415                     	;# 
   343  0416                     	;# 
   344  0417                     	;# 
   345  041C                     	;# 
   346  041D                     	;# 
   347  041E                     	;# 
   348  0FE4                     	;# 
   349  0FE5                     	;# 
   350  0FE6                     	;# 
   351  0FE7                     	;# 
   352  0FE8                     	;# 
   353  0FE9                     	;# 
   354  0FEA                     	;# 
   355  0FEB                     	;# 
   356  0FED                     	;# 
   357  0FEE                     	;# 
   358  0FEF                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  0008                     	;# 
   368  0009                     	;# 
   369  000A                     	;# 
   370  000B                     	;# 
   371  000C                     	;# 
   372  000D                     	;# 
   373  0011                     	;# 
   374  0012                     	;# 
   375  0013                     	;# 
   376  0014                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001E                     	;# 
   387  001F                     	;# 
   388  008C                     	;# 
   389  008D                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0095                     	;# 
   395  0096                     	;# 
   396  0097                     	;# 
   397  0098                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  0111                     	;# 
   408  0112                     	;# 
   409  0113                     	;# 
   410  0114                     	;# 
   411  0115                     	;# 
   412  0116                     	;# 
   413  0117                     	;# 
   414  0118                     	;# 
   415  0119                     	;# 
   416  011A                     	;# 
   417  011B                     	;# 
   418  011D                     	;# 
   419  011E                     	;# 
   420  018C                     	;# 
   421  018D                     	;# 
   422  0191                     	;# 
   423  0191                     	;# 
   424  0192                     	;# 
   425  0193                     	;# 
   426  0193                     	;# 
   427  0193                     	;# 
   428  0194                     	;# 
   429  0195                     	;# 
   430  0196                     	;# 
   431  0199                     	;# 
   432  019A                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019C                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  020D                     	;# 
   444  0211                     	;# 
   445  0211                     	;# 
   446  0212                     	;# 
   447  0212                     	;# 
   448  0213                     	;# 
   449  0213                     	;# 
   450  0214                     	;# 
   451  0214                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0215                     	;# 
   455  0216                     	;# 
   456  0216                     	;# 
   457  0217                     	;# 
   458  0217                     	;# 
   459  0219                     	;# 
   460  021A                     	;# 
   461  021B                     	;# 
   462  021C                     	;# 
   463  021D                     	;# 
   464  021E                     	;# 
   465  021F                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0294                     	;# 
   471  0295                     	;# 
   472  0295                     	;# 
   473  0296                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  029B                     	;# 
   479  029C                     	;# 
   480  029C                     	;# 
   481  029D                     	;# 
   482  029E                     	;# 
   483  029E                     	;# 
   484  0311                     	;# 
   485  0311                     	;# 
   486  0312                     	;# 
   487  0313                     	;# 
   488  0318                     	;# 
   489  0318                     	;# 
   490  0319                     	;# 
   491  031A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  039A                     	;# 
   496  039C                     	;# 
   497  039D                     	;# 
   498  039E                     	;# 
   499  039F                     	;# 
   500  0415                     	;# 
   501  0416                     	;# 
   502  0417                     	;# 
   503  041C                     	;# 
   504  041D                     	;# 
   505  041E                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000D                     	;# 
   531  0011                     	;# 
   532  0012                     	;# 
   533  0013                     	;# 
   534  0014                     	;# 
   535  0015                     	;# 
   536  0016                     	;# 
   537  0016                     	;# 
   538  0017                     	;# 
   539  0018                     	;# 
   540  0019                     	;# 
   541  001A                     	;# 
   542  001B                     	;# 
   543  001C                     	;# 
   544  001E                     	;# 
   545  001F                     	;# 
   546  008C                     	;# 
   547  008D                     	;# 
   548  0091                     	;# 
   549  0092                     	;# 
   550  0093                     	;# 
   551  0094                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009A                     	;# 
   558  009B                     	;# 
   559  009B                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  0111                     	;# 
   566  0112                     	;# 
   567  0113                     	;# 
   568  0114                     	;# 
   569  0115                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  0118                     	;# 
   573  0119                     	;# 
   574  011A                     	;# 
   575  011B                     	;# 
   576  011D                     	;# 
   577  011E                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  0191                     	;# 
   581  0191                     	;# 
   582  0192                     	;# 
   583  0193                     	;# 
   584  0193                     	;# 
   585  0193                     	;# 
   586  0194                     	;# 
   587  0195                     	;# 
   588  0196                     	;# 
   589  0199                     	;# 
   590  019A                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019C                     	;# 
   596  019C                     	;# 
   597  019D                     	;# 
   598  019E                     	;# 
   599  019F                     	;# 
   600  020C                     	;# 
   601  020D                     	;# 
   602  0211                     	;# 
   603  0211                     	;# 
   604  0212                     	;# 
   605  0212                     	;# 
   606  0213                     	;# 
   607  0213                     	;# 
   608  0214                     	;# 
   609  0214                     	;# 
   610  0215                     	;# 
   611  0215                     	;# 
   612  0215                     	;# 
   613  0216                     	;# 
   614  0216                     	;# 
   615  0217                     	;# 
   616  0217                     	;# 
   617  0219                     	;# 
   618  021A                     	;# 
   619  021B                     	;# 
   620  021C                     	;# 
   621  021D                     	;# 
   622  021E                     	;# 
   623  021F                     	;# 
   624  0291                     	;# 
   625  0291                     	;# 
   626  0292                     	;# 
   627  0293                     	;# 
   628  0294                     	;# 
   629  0295                     	;# 
   630  0295                     	;# 
   631  0296                     	;# 
   632  0298                     	;# 
   633  0298                     	;# 
   634  0299                     	;# 
   635  029A                     	;# 
   636  029B                     	;# 
   637  029C                     	;# 
   638  029C                     	;# 
   639  029D                     	;# 
   640  029E                     	;# 
   641  029E                     	;# 
   642  0311                     	;# 
   643  0311                     	;# 
   644  0312                     	;# 
   645  0313                     	;# 
   646  0318                     	;# 
   647  0318                     	;# 
   648  0319                     	;# 
   649  031A                     	;# 
   650  0394                     	;# 
   651  0395                     	;# 
   652  0396                     	;# 
   653  039A                     	;# 
   654  039C                     	;# 
   655  039D                     	;# 
   656  039E                     	;# 
   657  039F                     	;# 
   658  0415                     	;# 
   659  0416                     	;# 
   660  0417                     	;# 
   661  041C                     	;# 
   662  041D                     	;# 
   663  041E                     	;# 
   664  0FE4                     	;# 
   665  0FE5                     	;# 
   666  0FE6                     	;# 
   667  0FE7                     	;# 
   668  0FE8                     	;# 
   669  0FE9                     	;# 
   670  0FEA                     	;# 
   671  0FEB                     	;# 
   672  0FED                     	;# 
   673  0FEE                     	;# 
   674  0FEF                     	;# 
   675  0000                     	;# 
   676  0001                     	;# 
   677  0002                     	;# 
   678  0003                     	;# 
   679  0004                     	;# 
   680  0005                     	;# 
   681  0006                     	;# 
   682  0007                     	;# 
   683  0008                     	;# 
   684  0009                     	;# 
   685  000A                     	;# 
   686  000B                     	;# 
   687  000C                     	;# 
   688  000D                     	;# 
   689  0011                     	;# 
   690  0012                     	;# 
   691  0013                     	;# 
   692  0014                     	;# 
   693  0015                     	;# 
   694  0016                     	;# 
   695  0016                     	;# 
   696  0017                     	;# 
   697  0018                     	;# 
   698  0019                     	;# 
   699  001A                     	;# 
   700  001B                     	;# 
   701  001C                     	;# 
   702  001E                     	;# 
   703  001F                     	;# 
   704  008C                     	;# 
   705  008D                     	;# 
   706  0091                     	;# 
   707  0092                     	;# 
   708  0093                     	;# 
   709  0094                     	;# 
   710  0095                     	;# 
   711  0096                     	;# 
   712  0097                     	;# 
   713  0098                     	;# 
   714  0099                     	;# 
   715  009A                     	;# 
   716  009B                     	;# 
   717  009B                     	;# 
   718  009C                     	;# 
   719  009D                     	;# 
   720  009E                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  0111                     	;# 
   724  0112                     	;# 
   725  0113                     	;# 
   726  0114                     	;# 
   727  0115                     	;# 
   728  0116                     	;# 
   729  0117                     	;# 
   730  0118                     	;# 
   731  0119                     	;# 
   732  011A                     	;# 
   733  011B                     	;# 
   734  011D                     	;# 
   735  011E                     	;# 
   736  018C                     	;# 
   737  018D                     	;# 
   738  0191                     	;# 
   739  0191                     	;# 
   740  0192                     	;# 
   741  0193                     	;# 
   742  0193                     	;# 
   743  0193                     	;# 
   744  0194                     	;# 
   745  0195                     	;# 
   746  0196                     	;# 
   747  0199                     	;# 
   748  019A                     	;# 
   749  019B                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019C                     	;# 
   754  019C                     	;# 
   755  019D                     	;# 
   756  019E                     	;# 
   757  019F                     	;# 
   758  020C                     	;# 
   759  020D                     	;# 
   760  0211                     	;# 
   761  0211                     	;# 
   762  0212                     	;# 
   763  0212                     	;# 
   764  0213                     	;# 
   765  0213                     	;# 
   766  0214                     	;# 
   767  0214                     	;# 
   768  0215                     	;# 
   769  0215                     	;# 
   770  0215                     	;# 
   771  0216                     	;# 
   772  0216                     	;# 
   773  0217                     	;# 
   774  0217                     	;# 
   775  0219                     	;# 
   776  021A                     	;# 
   777  021B                     	;# 
   778  021C                     	;# 
   779  021D                     	;# 
   780  021E                     	;# 
   781  021F                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0294                     	;# 
   787  0295                     	;# 
   788  0295                     	;# 
   789  0296                     	;# 
   790  0298                     	;# 
   791  0298                     	;# 
   792  0299                     	;# 
   793  029A                     	;# 
   794  029B                     	;# 
   795  029C                     	;# 
   796  029C                     	;# 
   797  029D                     	;# 
   798  029E                     	;# 
   799  029E                     	;# 
   800  0311                     	;# 
   801  0311                     	;# 
   802  0312                     	;# 
   803  0313                     	;# 
   804  0318                     	;# 
   805  0318                     	;# 
   806  0319                     	;# 
   807  031A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  039A                     	;# 
   812  039C                     	;# 
   813  039D                     	;# 
   814  039E                     	;# 
   815  039F                     	;# 
   816  0415                     	;# 
   817  0416                     	;# 
   818  0417                     	;# 
   819  041C                     	;# 
   820  041D                     	;# 
   821  041E                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0013                     	;# 
   850  0014                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  001E                     	;# 
   861  001F                     	;# 
   862  008C                     	;# 
   863  008D                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0093                     	;# 
   867  0094                     	;# 
   868  0095                     	;# 
   869  0096                     	;# 
   870  0097                     	;# 
   871  0098                     	;# 
   872  0099                     	;# 
   873  009A                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  010C                     	;# 
   880  010D                     	;# 
   881  0111                     	;# 
   882  0112                     	;# 
   883  0113                     	;# 
   884  0114                     	;# 
   885  0115                     	;# 
   886  0116                     	;# 
   887  0117                     	;# 
   888  0118                     	;# 
   889  0119                     	;# 
   890  011A                     	;# 
   891  011B                     	;# 
   892  011D                     	;# 
   893  011E                     	;# 
   894  018C                     	;# 
   895  018D                     	;# 
   896  0191                     	;# 
   897  0191                     	;# 
   898  0192                     	;# 
   899  0193                     	;# 
   900  0193                     	;# 
   901  0193                     	;# 
   902  0194                     	;# 
   903  0195                     	;# 
   904  0196                     	;# 
   905  0199                     	;# 
   906  019A                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019B                     	;# 
   911  019C                     	;# 
   912  019C                     	;# 
   913  019D                     	;# 
   914  019E                     	;# 
   915  019F                     	;# 
   916  020C                     	;# 
   917  020D                     	;# 
   918  0211                     	;# 
   919  0211                     	;# 
   920  0212                     	;# 
   921  0212                     	;# 
   922  0213                     	;# 
   923  0213                     	;# 
   924  0214                     	;# 
   925  0214                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0215                     	;# 
   929  0216                     	;# 
   930  0216                     	;# 
   931  0217                     	;# 
   932  0217                     	;# 
   933  0219                     	;# 
   934  021A                     	;# 
   935  021B                     	;# 
   936  021C                     	;# 
   937  021D                     	;# 
   938  021E                     	;# 
   939  021F                     	;# 
   940  0291                     	;# 
   941  0291                     	;# 
   942  0292                     	;# 
   943  0293                     	;# 
   944  0294                     	;# 
   945  0295                     	;# 
   946  0295                     	;# 
   947  0296                     	;# 
   948  0298                     	;# 
   949  0298                     	;# 
   950  0299                     	;# 
   951  029A                     	;# 
   952  029B                     	;# 
   953  029C                     	;# 
   954  029C                     	;# 
   955  029D                     	;# 
   956  029E                     	;# 
   957  029E                     	;# 
   958  0311                     	;# 
   959  0311                     	;# 
   960  0312                     	;# 
   961  0313                     	;# 
   962  0318                     	;# 
   963  0318                     	;# 
   964  0319                     	;# 
   965  031A                     	;# 
   966  0394                     	;# 
   967  0395                     	;# 
   968  0396                     	;# 
   969  039A                     	;# 
   970  039C                     	;# 
   971  039D                     	;# 
   972  039E                     	;# 
   973  039F                     	;# 
   974  0415                     	;# 
   975  0416                     	;# 
   976  0417                     	;# 
   977  041C                     	;# 
   978  041D                     	;# 
   979  041E                     	;# 
   980  0FE4                     	;# 
   981  0FE5                     	;# 
   982  0FE6                     	;# 
   983  0FE7                     	;# 
   984  0FE8                     	;# 
   985  0FE9                     	;# 
   986  0FEA                     	;# 
   987  0FEB                     	;# 
   988  0FED                     	;# 
   989  0FEE                     	;# 
   990  0FEF                     	;# 
   991  0000                     	;# 
   992  0001                     	;# 
   993  0002                     	;# 
   994  0003                     	;# 
   995  0004                     	;# 
   996  0005                     	;# 
   997  0006                     	;# 
   998  0007                     	;# 
   999  0008                     	;# 
  1000  0009                     	;# 
  1001  000A                     	;# 
  1002  000B                     	;# 
  1003  000C                     	;# 
  1004  000D                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0016                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001C                     	;# 
  1018  001E                     	;# 
  1019  001F                     	;# 
  1020  008C                     	;# 
  1021  008D                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0097                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009A                     	;# 
  1032  009B                     	;# 
  1033  009B                     	;# 
  1034  009C                     	;# 
  1035  009D                     	;# 
  1036  009E                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  0111                     	;# 
  1040  0112                     	;# 
  1041  0113                     	;# 
  1042  0114                     	;# 
  1043  0115                     	;# 
  1044  0116                     	;# 
  1045  0117                     	;# 
  1046  0118                     	;# 
  1047  0119                     	;# 
  1048  011A                     	;# 
  1049  011B                     	;# 
  1050  011D                     	;# 
  1051  011E                     	;# 
  1052  018C                     	;# 
  1053  018D                     	;# 
  1054  0191                     	;# 
  1055  0191                     	;# 
  1056  0192                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0193                     	;# 
  1060  0194                     	;# 
  1061  0195                     	;# 
  1062  0196                     	;# 
  1063  0199                     	;# 
  1064  019A                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019C                     	;# 
  1070  019C                     	;# 
  1071  019D                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  020C                     	;# 
  1075  020D                     	;# 
  1076  0211                     	;# 
  1077  0211                     	;# 
  1078  0212                     	;# 
  1079  0212                     	;# 
  1080  0213                     	;# 
  1081  0213                     	;# 
  1082  0214                     	;# 
  1083  0214                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0215                     	;# 
  1087  0216                     	;# 
  1088  0216                     	;# 
  1089  0217                     	;# 
  1090  0217                     	;# 
  1091  0219                     	;# 
  1092  021A                     	;# 
  1093  021B                     	;# 
  1094  021C                     	;# 
  1095  021D                     	;# 
  1096  021E                     	;# 
  1097  021F                     	;# 
  1098  0291                     	;# 
  1099  0291                     	;# 
  1100  0292                     	;# 
  1101  0293                     	;# 
  1102  0294                     	;# 
  1103  0295                     	;# 
  1104  0295                     	;# 
  1105  0296                     	;# 
  1106  0298                     	;# 
  1107  0298                     	;# 
  1108  0299                     	;# 
  1109  029A                     	;# 
  1110  029B                     	;# 
  1111  029C                     	;# 
  1112  029C                     	;# 
  1113  029D                     	;# 
  1114  029E                     	;# 
  1115  029E                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  0394                     	;# 
  1125  0395                     	;# 
  1126  0396                     	;# 
  1127  039A                     	;# 
  1128  039C                     	;# 
  1129  039D                     	;# 
  1130  039E                     	;# 
  1131  039F                     	;# 
  1132  0415                     	;# 
  1133  0416                     	;# 
  1134  0417                     	;# 
  1135  041C                     	;# 
  1136  041D                     	;# 
  1137  041E                     	;# 
  1138  0FE4                     	;# 
  1139  0FE5                     	;# 
  1140  0FE6                     	;# 
  1141  0FE7                     	;# 
  1142  0FE8                     	;# 
  1143  0FE9                     	;# 
  1144  0FEA                     	;# 
  1145  0FEB                     	;# 
  1146  0FED                     	;# 
  1147  0FEE                     	;# 
  1148  0FEF                     	;# 
  1149  0000                     	;# 
  1150  0001                     	;# 
  1151  0002                     	;# 
  1152  0003                     	;# 
  1153  0004                     	;# 
  1154  0005                     	;# 
  1155  0006                     	;# 
  1156  0007                     	;# 
  1157  0008                     	;# 
  1158  0009                     	;# 
  1159  000A                     	;# 
  1160  000B                     	;# 
  1161  000C                     	;# 
  1162  000D                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0013                     	;# 
  1166  0014                     	;# 
  1167  0015                     	;# 
  1168  0016                     	;# 
  1169  0016                     	;# 
  1170  0017                     	;# 
  1171  0018                     	;# 
  1172  0019                     	;# 
  1173  001A                     	;# 
  1174  001B                     	;# 
  1175  001C                     	;# 
  1176  001E                     	;# 
  1177  001F                     	;# 
  1178  008C                     	;# 
  1179  008D                     	;# 
  1180  0091                     	;# 
  1181  0092                     	;# 
  1182  0093                     	;# 
  1183  0094                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0098                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  0111                     	;# 
  1198  0112                     	;# 
  1199  0113                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0117                     	;# 
  1204  0118                     	;# 
  1205  0119                     	;# 
  1206  011A                     	;# 
  1207  011B                     	;# 
  1208  011D                     	;# 
  1209  011E                     	;# 
  1210  018C                     	;# 
  1211  018D                     	;# 
  1212  0191                     	;# 
  1213  0191                     	;# 
  1214  0192                     	;# 
  1215  0193                     	;# 
  1216  0193                     	;# 
  1217  0193                     	;# 
  1218  0194                     	;# 
  1219  0195                     	;# 
  1220  0196                     	;# 
  1221  0199                     	;# 
  1222  019A                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019C                     	;# 
  1228  019C                     	;# 
  1229  019D                     	;# 
  1230  019E                     	;# 
  1231  019F                     	;# 
  1232  020C                     	;# 
  1233  020D                     	;# 
  1234  0211                     	;# 
  1235  0211                     	;# 
  1236  0212                     	;# 
  1237  0212                     	;# 
  1238  0213                     	;# 
  1239  0213                     	;# 
  1240  0214                     	;# 
  1241  0214                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0215                     	;# 
  1245  0216                     	;# 
  1246  0216                     	;# 
  1247  0217                     	;# 
  1248  0217                     	;# 
  1249  0219                     	;# 
  1250  021A                     	;# 
  1251  021B                     	;# 
  1252  021C                     	;# 
  1253  021D                     	;# 
  1254  021E                     	;# 
  1255  021F                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0294                     	;# 
  1261  0295                     	;# 
  1262  0295                     	;# 
  1263  0296                     	;# 
  1264  0298                     	;# 
  1265  0298                     	;# 
  1266  0299                     	;# 
  1267  029A                     	;# 
  1268  029B                     	;# 
  1269  029C                     	;# 
  1270  029C                     	;# 
  1271  029D                     	;# 
  1272  029E                     	;# 
  1273  029E                     	;# 
  1274  0311                     	;# 
  1275  0311                     	;# 
  1276  0312                     	;# 
  1277  0313                     	;# 
  1278  0318                     	;# 
  1279  0318                     	;# 
  1280  0319                     	;# 
  1281  031A                     	;# 
  1282  0394                     	;# 
  1283  0395                     	;# 
  1284  0396                     	;# 
  1285  039A                     	;# 
  1286  039C                     	;# 
  1287  039D                     	;# 
  1288  039E                     	;# 
  1289  039F                     	;# 
  1290  0415                     	;# 
  1291  0416                     	;# 
  1292  0417                     	;# 
  1293  041C                     	;# 
  1294  041D                     	;# 
  1295  041E                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000D                     	;# 
  1321  0011                     	;# 
  1322  0012                     	;# 
  1323  0013                     	;# 
  1324  0014                     	;# 
  1325  0015                     	;# 
  1326  0016                     	;# 
  1327  0016                     	;# 
  1328  0017                     	;# 
  1329  0018                     	;# 
  1330  0019                     	;# 
  1331  001A                     	;# 
  1332  001B                     	;# 
  1333  001C                     	;# 
  1334  001E                     	;# 
  1335  001F                     	;# 
  1336  008C                     	;# 
  1337  008D                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0094                     	;# 
  1342  0095                     	;# 
  1343  0096                     	;# 
  1344  0097                     	;# 
  1345  0098                     	;# 
  1346  0099                     	;# 
  1347  009A                     	;# 
  1348  009B                     	;# 
  1349  009B                     	;# 
  1350  009C                     	;# 
  1351  009D                     	;# 
  1352  009E                     	;# 
  1353  010C                     	;# 
  1354  010D                     	;# 
  1355  0111                     	;# 
  1356  0112                     	;# 
  1357  0113                     	;# 
  1358  0114                     	;# 
  1359  0115                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  0118                     	;# 
  1363  0119                     	;# 
  1364  011A                     	;# 
  1365  011B                     	;# 
  1366  011D                     	;# 
  1367  011E                     	;# 
  1368  018C                     	;# 
  1369  018D                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0193                     	;# 
  1376  0194                     	;# 
  1377  0195                     	;# 
  1378  0196                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019B                     	;# 
  1385  019C                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019F                     	;# 
  1390  020C                     	;# 
  1391  020D                     	;# 
  1392  0211                     	;# 
  1393  0211                     	;# 
  1394  0212                     	;# 
  1395  0212                     	;# 
  1396  0213                     	;# 
  1397  0213                     	;# 
  1398  0214                     	;# 
  1399  0214                     	;# 
  1400  0215                     	;# 
  1401  0215                     	;# 
  1402  0215                     	;# 
  1403  0216                     	;# 
  1404  0216                     	;# 
  1405  0217                     	;# 
  1406  0217                     	;# 
  1407  0219                     	;# 
  1408  021A                     	;# 
  1409  021B                     	;# 
  1410  021C                     	;# 
  1411  021D                     	;# 
  1412  021E                     	;# 
  1413  021F                     	;# 
  1414  0291                     	;# 
  1415  0291                     	;# 
  1416  0292                     	;# 
  1417  0293                     	;# 
  1418  0294                     	;# 
  1419  0295                     	;# 
  1420  0295                     	;# 
  1421  0296                     	;# 
  1422  0298                     	;# 
  1423  0298                     	;# 
  1424  0299                     	;# 
  1425  029A                     	;# 
  1426  029B                     	;# 
  1427  029C                     	;# 
  1428  029C                     	;# 
  1429  029D                     	;# 
  1430  029E                     	;# 
  1431  029E                     	;# 
  1432  0311                     	;# 
  1433  0311                     	;# 
  1434  0312                     	;# 
  1435  0313                     	;# 
  1436  0318                     	;# 
  1437  0318                     	;# 
  1438  0319                     	;# 
  1439  031A                     	;# 
  1440  0394                     	;# 
  1441  0395                     	;# 
  1442  0396                     	;# 
  1443  039A                     	;# 
  1444  039C                     	;# 
  1445  039D                     	;# 
  1446  039E                     	;# 
  1447  039F                     	;# 
  1448  0415                     	;# 
  1449  0416                     	;# 
  1450  0417                     	;# 
  1451  041C                     	;# 
  1452  041D                     	;# 
  1453  041E                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465                           
  1466                           	psect	idataBANK0
  1467  0780                     __pidataBANK0:	
  1468                           
  1469                           ;initializer for _LED_state
  1470  0780  3401               	retlw	1
  1471                           
  1472                           	psect	stringtext
  1473  0519                     __pstringtext:	
  1474  0519                     _fp_x0_a:	
  1475  0519  34D0               	retlw	208
  1476  051A  34D2               	retlw	210
  1477  051B  3402               	retlw	2
  1478  051C  3400               	retlw	0
  1479  051D                     __end_of_fp_x0_a:	
  1480  051D                     _fp_x0_b:	
  1481  051D  34E4               	retlw	228
  1482  051E  34E1               	retlw	225
  1483  051F  3401               	retlw	1
  1484  0520  3400               	retlw	0
  1485  0521                     __end_of_fp_x0_b:	
  1486  0521                     _ratio_mph:	
  1487  0521  34F9               	retlw	249
  1488  0522  349E               	retlw	158
  1489  0523  3400               	retlw	0
  1490  0524  3400               	retlw	0
  1491  0525                     __end_of_ratio_mph:	
  1492  0525                     convert_to_fp@one:	
  1493  0525  3401               	retlw	1
  1494  0526  3400               	retlw	0
  1495  0527                     __end_ofconvert_to_fp@one:	
  1496  000B                     _INTCONbits	set	11
  1497  0011                     _PIR1bits	set	17
  1498  000D                     _PORTBbits	set	13
  1499  0015                     _TMR0	set	21
  1500  0095                     _OPTION_REG	set	149
  1501  0095                     _OPTION_REGbits	set	149
  1502  0099                     _OSCCON	set	153
  1503  009A                     _OSCSTAT	set	154
  1504  0098                     _OSCTUNE	set	152
  1505  0091                     _PIE1bits	set	145
  1506  008C                     _TRISA	set	140
  1507  008D                     _TRISB	set	141
  1508  04D6                     _PLLR	set	1238
  1509  011D                     _APFCON0	set	285
  1510  011E                     _APFCON1	set	286
  1511  010C                     _LATA	set	268
  1512  010D                     _LATB	set	269
  1513  0862                     _LATA2	set	2146
  1514  018C                     _ANSELA	set	396
  1515  018D                     _ANSELB	set	397
  1516  019F                     _BAUDCON	set	415
  1517  0199                     _RCREG	set	409
  1518  019D                     _RCSTA	set	413
  1519  019D                     _RCSTAbits	set	413
  1520  019C                     _SPBRGH	set	412
  1521  019B                     _SPBRGL	set	411
  1522  019A                     _TXREG	set	410
  1523  019E                     _TXSTA	set	414
  1524  020C                     _WPUA	set	524
  1525  020D                     _WPUB	set	525
  1526  0527                     STR_1:	
  1527  0527  3424               	retlw	36	;'$'
  1528  0528  3450               	retlw	80	;'P'
  1529  0529  344D               	retlw	77	;'M'
  1530  052A  3454               	retlw	84	;'T'
  1531  052B  344B               	retlw	75	;'K'
  1532  052C  3433               	retlw	51	;'3'
  1533  052D  3431               	retlw	49	;'1'
  1534  052E  3434               	retlw	52	;'4'
  1535  052F  342C               	retlw	44	;','
  1536  0530  3430               	retlw	48	;'0'
  1537  0531  342C               	retlw	44	;','
  1538  0532  3430               	retlw	48	;'0'
  1539  0533  342C               	retlw	44	;','
  1540  0534  3431               	retlw	49	;'1'
  1541  0535  342C               	retlw	44	;','
  1542  0536  3430               	retlw	48	;'0'
  1543  0537  342C               	retlw	44	;','
  1544  0538  3430               	retlw	48	;'0'
  1545  0539  342C               	retlw	44	;','
  1546  053A  3430               	retlw	48	;'0'
  1547  053B  342C               	retlw	44	;','
  1548  053C  3430               	retlw	48	;'0'
  1549  053D  342C               	retlw	44	;','
  1550  053E  3430               	retlw	48	;'0'
  1551  053F  342C               	retlw	44	;','
  1552  0540  3430               	retlw	48	;'0'
  1553  0541  342C               	retlw	44	;','
  1554  0542  3430               	retlw	48	;'0'
  1555  0543  342C               	retlw	44	;','
  1556  0544  3430               	retlw	48	;'0'
  1557  0545  342C               	retlw	44	;','
  1558  0546  3430               	retlw	48	;'0'
  1559  0547  342C               	retlw	44	;','
  1560  0548  3430               	retlw	48	;'0'
  1561  0549  342C               	retlw	44	;','
  1562  054A  3430               	retlw	48	;'0'
  1563  054B  342C               	retlw	44	;','
  1564  054C  3430               	retlw	48	;'0'
  1565  054D  342C               	retlw	44	;','
  1566  054E  3430               	retlw	48	;'0'
  1567  054F  342C               	retlw	44	;','
  1568  0550  3430               	retlw	48	;'0'
  1569  0551  342C               	retlw	44	;','
  1570  0552  3430               	retlw	48	;'0'
  1571  0553  342C               	retlw	44	;','
  1572  0554  3430               	retlw	48	;'0'
  1573  0555  342A               	retlw	42	;'*'
  1574  0556  3432               	retlw	50	;'2'
  1575  0557  3439               	retlw	57	;'9'
  1576  0558  340D               	retlw	13
  1577  0559  340A               	retlw	10
  1578  055A  3400               	retlw	0
  1579  055B                     STR_2:	
  1580  055B  3424               	retlw	36	;'$'
  1581  055C  3450               	retlw	80	;'P'
  1582  055D  344D               	retlw	77	;'M'
  1583  055E  3454               	retlw	84	;'T'
  1584  055F  344B               	retlw	75	;'K'
  1585  0560  3432               	retlw	50	;'2'
  1586  0561  3432               	retlw	50	;'2'
  1587  0562  3430               	retlw	48	;'0'
  1588  0563  342C               	retlw	44	;','
  1589  0564  3431               	retlw	49	;'1'
  1590  0565  3430               	retlw	48	;'0'
  1591  0566  3430               	retlw	48	;'0'
  1592  0567  342A               	retlw	42	;'*'
  1593  0568  3432               	retlw	50	;'2'
  1594  0569  3446               	retlw	70	;'F'
  1595  056A  340D               	retlw	13
  1596  056B  340A               	retlw	10
  1597  056C  3400               	retlw	0
  1598                           
  1599                           ; #config settings
  1600  0000                     
  1601                           	psect	cinit
  1602  002B                     start_initialization:	
  1603  002B                     __initialization:	
  1604                           
  1605                           ; Initialize objects allocated to BANK0
  1606  002B  3187  2780  3180   	fcall	__pidataBANK0	;fetch initializer
  1607  002E  00EF               	movwf	__pdataBANK0& (0+127)
  1608                           
  1609                           ; Clear objects allocated to COMMON
  1610  002F  01F0               	clrf	__pbssCOMMON& (0+127)
  1611  0030  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1612  0031  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1613  0032  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1614  0033  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1615                           
  1616                           ; Clear objects allocated to BANK0
  1617  0034  304B               	movlw	low __pbssBANK0
  1618  0035  0084               	movwf	4
  1619  0036  3000               	movlw	high __pbssBANK0
  1620  0037  0085               	movwf	5
  1621  0038  3024               	movlw	36
  1622  0039  3187  2768         	fcall	clear_ram0
  1623  003B                     end_of_initialization:	
  1624                           ;End of C runtime variable initialization code
  1625                           
  1626  003B                     __end_of__initialization:	
  1627  003B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1628  003C  0020               	movlb	0
  1629  003D  3184  2C2F         	ljmp	_main	;jump to C main() function
  1630                           
  1631                           	psect	bssCOMMON
  1632  0070                     __pbssCOMMON:	
  1633  0070                     _b_last_state:	
  1634  0070                     	ds	2
  1635  0072                     _b_count_pressed:	
  1636  0072                     	ds	1
  1637  0073                     _eusartRxCount:	
  1638  0073                     	ds	1
  1639  0074                     _timer0ReloadVal:	
  1640  0074                     	ds	1
  1641                           
  1642                           	psect	bssBANK0
  1643  004B                     __pbssBANK0:	
  1644  004B                     _eusartRxBuffer:	
  1645  004B                     	ds	8
  1646  0053                     _eusartTxBuffer:	
  1647  0053                     	ds	8
  1648  005B                     _speed:	
  1649  005B                     	ds	4
  1650  005F                     TMR0_ISR@CountCallBack:	
  1651  005F                     	ds	2
  1652  0061                     _TMR0_InterruptHandler:	
  1653  0061                     	ds	2
  1654  0063                     _LED_counter:	
  1655  0063                     	ds	1
  1656  0064                     _b_confirmed_state:	
  1657  0064                     	ds	1
  1658  0065                     _b_count_released:	
  1659  0065                     	ds	1
  1660  0066                     _b_has_once_been_released:	
  1661  0066                     	ds	1
  1662  0067                     _b_push_confirmed:	
  1663  0067                     	ds	1
  1664  0068                     _b_release_confirmed:	
  1665  0068                     	ds	1
  1666  0069                     _eusartRxHead:	
  1667  0069                     	ds	1
  1668  006A                     _eusartRxTail:	
  1669  006A                     	ds	1
  1670  006B                     _eusartTxBufferRemaining:	
  1671  006B                     	ds	1
  1672  006C                     _eusartTxHead:	
  1673  006C                     	ds	1
  1674  006D                     _eusartTxTail:	
  1675  006D                     	ds	1
  1676  006E                     _speed_units:	
  1677  006E                     	ds	1
  1678                           
  1679                           	psect	dataBANK0
  1680  006F                     __pdataBANK0:	
  1681  006F                     _LED_state:	
  1682  006F                     	ds	1
  1683                           
  1684                           	psect	clrtext
  1685  0768                     clear_ram0:	
  1686                           ;	Called with FSR0 containing the base address, and
  1687                           ;	WREG with the size to clear
  1688                           
  1689  0768  0064               	clrwdt	;clear the watchdog before getting into this loop
  1690  0769                     clrloop0:	
  1691  0769  0180               	clrf	0	;clear RAM location pointed to by FSR
  1692  076A  3101               	addfsr 0,1
  1693  076B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1694  076C  2F69               	goto	clrloop0	;have we reached the end yet?
  1695  076D  3400               	retlw	0	;all done for this memory range, return
  1696                           
  1697                           	psect	cstackBANK1
  1698  00A0                     __pcstackBANK1:	
  1699  00A0                     main@tmp:	
  1700                           
  1701                           ; 1 bytes @ 0x0
  1702  00A0                     	ds	1
  1703                           
  1704                           	psect	cstackCOMMON
  1705  0075                     __pcstackCOMMON:	
  1706  0075                     ?_PIN_MANAGER_Initialize:	
  1707  0075                     ?_OSCILLATOR_Initialize:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0075                     ?_TMR0_Initialize:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0075                     ?_EUSART_Initialize:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0075                     ?_TMR0_ISR:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0075                     ?_EUSART_Transmit_ISR:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0075                     ??_EUSART_Transmit_ISR:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0075                     ?_EUSART_Receive_ISR:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0075                     ??_EUSART_Receive_ISR:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0075                     ?_TMR0_DefaultInterruptHandler:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0075                     ??_TMR0_DefaultInterruptHandler:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0075                     ?_TMR0_CallBack:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0075                     ?_my10msTimerISR:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0075                     ?_LED_set_state:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0075                     ?_GPS_Initialize:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0075                     ?_GPS_read_speed:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752  0075                     ?_LED_update_loop:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0075                     ??_LED_update_loop:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0075                     ?_button_update_loop:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0075                     ?_SYSTEM_Initialize:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0075                     ?_INTERRUPT_InterruptManager:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0075                     ?_EUSART_Read:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0075                     ?_EUSART_Write:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0075                     ?_putch:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0075                     ?_main:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0075                     ?_get_button_state:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0075                     ??_get_button_state:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0075                     get_button_state@state:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788                           
  1789                           ; 1 bytes @ 0x0
  1790  0075                     	ds	1
  1791  0076                     ??_button_update_loop:	
  1792                           
  1793                           ; 1 bytes @ 0x1
  1794  0076                     	ds	2
  1795  0078                     button_update_loop@current_state:	
  1796                           
  1797                           ; 1 bytes @ 0x3
  1798  0078                     	ds	1
  1799  0079                     ??_TMR0_ISR:	
  1800  0079                     ??_TMR0_CallBack:	
  1801                           ; 1 bytes @ 0x4
  1802                           
  1803  0079                     ??_my10msTimerISR:	
  1804                           ; 1 bytes @ 0x4
  1805                           
  1806  0079                     ??_INTERRUPT_InterruptManager:	
  1807                           ; 1 bytes @ 0x4
  1808                           
  1809                           
  1810                           ; 1 bytes @ 0x4
  1811  0079                     	ds	1
  1812                           
  1813                           	psect	cstackBANK0
  1814  0020                     __pcstackBANK0:	
  1815  0020                     ??_PIN_MANAGER_Initialize:	
  1816  0020                     ??_OSCILLATOR_Initialize:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0020                     ??_EUSART_Initialize:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0020                     ?_TMR0_SetInterruptHandler:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0020                     ??_LED_set_state:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0020                     ??_EUSART_Read:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0020                     ??_EUSART_Write:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0020                     ?___wmul:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0020                     ?_convert_to_fp:	
  1838                           ; 2 bytes @ 0x0
  1839                           
  1840  0020                     ?___lmul:	
  1841                           ; 4 bytes @ 0x0
  1842                           
  1843  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1844                           ; 4 bytes @ 0x0
  1845                           
  1846  0020                     convert_to_fp@int_part:	
  1847                           ; 2 bytes @ 0x0
  1848                           
  1849  0020                     ___wmul@multiplier:	
  1850                           ; 2 bytes @ 0x0
  1851                           
  1852  0020                     ___lmul@multiplier:	
  1853                           ; 2 bytes @ 0x0
  1854                           
  1855                           
  1856                           ; 4 bytes @ 0x0
  1857  0020                     	ds	1
  1858  0021                     EUSART_Read@readValue:	
  1859  0021                     EUSART_Write@txData:	
  1860                           ; 1 bytes @ 0x1
  1861                           
  1862  0021                     LED_set_state@new_state:	
  1863                           ; 1 bytes @ 0x1
  1864                           
  1865                           
  1866                           ; 1 bytes @ 0x1
  1867  0021                     	ds	1
  1868  0022                     ??_TMR0_Initialize:	
  1869  0022                     ??_TMR0_SetInterruptHandler:	
  1870                           ; 1 bytes @ 0x2
  1871                           
  1872  0022                     ??_putch:	
  1873                           ; 1 bytes @ 0x2
  1874                           
  1875  0022                     putch@txData:	
  1876                           ; 1 bytes @ 0x2
  1877                           
  1878  0022                     convert_to_fp@fract_part:	
  1879                           ; 1 bytes @ 0x2
  1880                           
  1881  0022                     ___wmul@multiplicand:	
  1882                           ; 2 bytes @ 0x2
  1883                           
  1884                           
  1885                           ; 2 bytes @ 0x2
  1886  0022                     	ds	1
  1887  0023                     ??_SYSTEM_Initialize:	
  1888  0023                     ?_printf:	
  1889                           ; 1 bytes @ 0x3
  1890                           
  1891  0023                     printf@f:	
  1892                           ; 2 bytes @ 0x3
  1893                           
  1894                           
  1895                           ; 2 bytes @ 0x3
  1896  0023                     	ds	1
  1897  0024                     ??_convert_to_fp:	
  1898  0024                     ??___wmul:	
  1899                           ; 1 bytes @ 0x4
  1900                           
  1901  0024                     ___wmul@product:	
  1902                           ; 1 bytes @ 0x4
  1903                           
  1904  0024                     ___lmul@multiplicand:	
  1905                           ; 2 bytes @ 0x4
  1906                           
  1907                           
  1908                           ; 4 bytes @ 0x4
  1909  0024                     	ds	1
  1910  0025                     ??_printf:	
  1911                           
  1912                           ; 1 bytes @ 0x5
  1913  0025                     	ds	3
  1914  0028                     ??___lmul:	
  1915  0028                     printf@ap:	
  1916                           ; 1 bytes @ 0x8
  1917                           
  1918  0028                     ___lmul@product:	
  1919                           ; 1 bytes @ 0x8
  1920                           
  1921                           
  1922                           ; 4 bytes @ 0x8
  1923  0028                     	ds	1
  1924  0029                     printf@c:	
  1925                           
  1926                           ; 1 bytes @ 0x9
  1927  0029                     	ds	1
  1928  002A                     ??_GPS_Initialize:	
  1929                           
  1930                           ; 1 bytes @ 0xA
  1931  002A                     	ds	2
  1932  002C                     ?_multiply_fp:	
  1933  002C                     convert_to_fp@res_fract:	
  1934                           ; 4 bytes @ 0xC
  1935                           
  1936  002C                     multiply_fp@n1:	
  1937                           ; 2 bytes @ 0xC
  1938                           
  1939                           
  1940                           ; 4 bytes @ 0xC
  1941  002C                     	ds	1
  1942  002D                     GPS_Initialize@tmp:	
  1943                           
  1944                           ; 1 bytes @ 0xD
  1945  002D                     	ds	1
  1946  002E                     convert_to_fp@i_bit:	
  1947                           
  1948                           ; 1 bytes @ 0xE
  1949  002E                     	ds	1
  1950  002F                     convert_to_fp@tmp_left:	
  1951                           
  1952                           ; 2 bytes @ 0xF
  1953  002F                     	ds	1
  1954  0030                     multiply_fp@n2:	
  1955                           
  1956                           ; 4 bytes @ 0x10
  1957  0030                     	ds	1
  1958  0031                     convert_to_fp@res:	
  1959                           
  1960                           ; 4 bytes @ 0x11
  1961  0031                     	ds	3
  1962  0034                     ??_multiply_fp:	
  1963                           
  1964                           ; 1 bytes @ 0x14
  1965  0034                     	ds	1
  1966  0035                     ??_GPS_read_speed:	
  1967                           
  1968                           ; 1 bytes @ 0x15
  1969  0035                     	ds	2
  1970  0037                     GPS_read_speed@before_dot:	
  1971                           
  1972                           ; 1 bytes @ 0x17
  1973  0037                     	ds	1
  1974  0038                     GPS_read_speed@no_more_checksum:	
  1975                           
  1976                           ; 1 bytes @ 0x18
  1977  0038                     	ds	1
  1978  0039                     GPS_read_speed@read_speed_int:	
  1979                           
  1980                           ; 2 bytes @ 0x19
  1981  0039                     	ds	2
  1982  003B                     GPS_read_speed@read_speed_fra:	
  1983                           
  1984                           ; 2 bytes @ 0x1B
  1985  003B                     	ds	2
  1986  003D                     GPS_read_speed@checksum2:	
  1987                           
  1988                           ; 1 bytes @ 0x1D
  1989  003D                     	ds	1
  1990  003E                     GPS_read_speed@checksum:	
  1991                           
  1992                           ; 1 bytes @ 0x1E
  1993  003E                     	ds	1
  1994  003F                     GPS_read_speed@buffer:	
  1995                           
  1996                           ; 6 bytes @ 0x1F
  1997  003F                     	ds	3
  1998  0042                     multiply_fp@res:	
  1999                           
  2000                           ; 4 bytes @ 0x22
  2001  0042                     	ds	3
  2002  0045                     GPS_read_speed@i_buff2:	
  2003                           
  2004                           ; 1 bytes @ 0x25
  2005  0045                     	ds	1
  2006  0046                     GPS_read_speed@i_buff:	
  2007                           
  2008                           ; 1 bytes @ 0x26
  2009  0046                     	ds	1
  2010  0047                     GPS_read_speed@m_char:	
  2011                           
  2012                           ; 1 bytes @ 0x27
  2013  0047                     	ds	1
  2014  0048                     ??_main:	
  2015                           
  2016                           ; 1 bytes @ 0x28
  2017  0048                     	ds	3
  2018                           
  2019                           	psect	maintext
  2020  042F                     __pmaintext:	
  2021 ;;
  2022 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2023 ;;
  2024 ;; *************** function _main *****************
  2025 ;; Defined at:
  2026 ;;		line 67 in file "main.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  tmp             1    0[BANK1 ] unsigned char 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : B1F/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2040 ;;      Params:         0       0       0       0       0       0
  2041 ;;      Locals:         0       0       1       0       0       0
  2042 ;;      Temps:          0       3       0       0       0       0
  2043 ;;      Totals:         0       3       1       0       0       0
  2044 ;;Total ram usage:        4 bytes
  2045 ;; Hardware stack levels required when called:   10
  2046 ;; This function calls:
  2047 ;;		_GPS_Initialize
  2048 ;;		_GPS_read_speed
  2049 ;;		_LED_set_state
  2050 ;;		_SYSTEM_Initialize
  2051 ;;		_TMR0_SetInterruptHandler
  2052 ;;		_multiply_fp
  2053 ;; This function is called by:
  2054 ;;		Startup code after reset
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           
  2059                           ;psect for function _main
  2060  042F                     _main:	
  2061                           
  2062                           ;main.c: 70: SYSTEM_Initialize();
  2063                           
  2064                           ;incstack = 0
  2065                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2066  042F  3187  273D  3184   	fcall	_SYSTEM_Initialize
  2067                           
  2068                           ;main.c: 72: TMR0_SetInterruptHandler(my10msTimerISR);
  2069  0432  307A               	movlw	low _my10msTimerISR
  2070  0433  0020               	movlb	0	; select bank0
  2071  0434  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2072  0435  3007               	movlw	high _my10msTimerISR
  2073  0436  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2074  0437  3187  276E  3184   	fcall	_TMR0_SetInterruptHandler
  2075                           
  2076                           ;main.c: 75: (INTCONbits.GIE = 1);
  2077  043A  178B               	bsf	11,7	;volatile
  2078                           
  2079                           ;main.c: 77: (INTCONbits.PEIE = 1);
  2080  043B  170B               	bsf	11,6	;volatile
  2081                           
  2082                           ;main.c: 79: LED_set_state(manual_mode);
  2083  043C  3004               	movlw	4
  2084  043D  3186  262E  3184   	fcall	_LED_set_state
  2085                           
  2086                           ;main.c: 80: do { LATA2 = 0; } while(0);
  2087  0440  0022               	movlb	2	; select bank2
  2088  0441  110C               	bcf	12,2	;volatile
  2089                           
  2090                           ;main.c: 81: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  2091  0442  0021               	movlb	1	; select bank1
  2092  0443  01A0               	clrf	main@tmp^(0+128)
  2093  0444  300A               	movlw	10
  2094  0445  0220               	subwf	main@tmp^(0+128),w
  2095  0446  1803               	btfsc	3,0
  2096  0447  2C5F               	goto	l3054
  2097  0448                     l3048:	
  2098  0448  3005               	movlw	5
  2099  0449  0020               	movlb	0	; select bank0
  2100  044A  00CA               	movwf	??_main+2
  2101  044B  300F               	movlw	15
  2102  044C  00C9               	movwf	??_main+1
  2103  044D  30F4               	movlw	244
  2104  044E  00C8               	movwf	??_main
  2105  044F                     u3847:	
  2106  044F  0BC8               	decfsz	??_main,f
  2107  0450  2C4F               	goto	u3847
  2108  0451  0BC9               	decfsz	??_main+1,f
  2109  0452  2C4F               	goto	u3847
  2110  0453  0BCA               	decfsz	??_main+2,f
  2111  0454  2C4F               	goto	u3847
  2112  0455  3001               	movlw	1
  2113  0456  0020               	movlb	0	; select bank0
  2114  0457  00C8               	movwf	??_main
  2115  0458  0848               	movf	??_main,w
  2116  0459  0021               	movlb	1	; select bank1
  2117  045A  07A0               	addwf	main@tmp^(0+128),f
  2118  045B  300A               	movlw	10
  2119  045C  0220               	subwf	main@tmp^(0+128),w
  2120  045D  1C03               	skipc
  2121  045E  2C48               	goto	l3048
  2122  045F                     l3054:	
  2123                           
  2124                           ;main.c: 83: GPS_Initialize();
  2125  045F  3185  256D  3184   	fcall	_GPS_Initialize
  2126                           
  2127                           ;main.c: 85: speed = 0;
  2128  0462  3000               	movlw	0
  2129  0463  0020               	movlb	0	; select bank0
  2130  0464  00DE               	movwf	_speed+3
  2131  0465  3000               	movlw	0
  2132  0466  00DD               	movwf	_speed+2
  2133  0467  3000               	movlw	0
  2134  0468  00DC               	movwf	_speed+1
  2135  0469  3000               	movlw	0
  2136  046A  00DB               	movwf	_speed
  2137  046B                     l3058:	
  2138                           ;main.c: 87: while (1)
  2139                           
  2140                           
  2141                           ;main.c: 88: {
  2142                           ;main.c: 90: if (GPS_read_speed())
  2143  046B  3180  203F  3184   	fcall	_GPS_read_speed
  2144  046E  3A00               	xorlw	0
  2145  046F  1903               	skipnz
  2146  0470  2C6B               	goto	l3058
  2147                           
  2148                           ;main.c: 91: {
  2149                           ;main.c: 93: if (speed_units == MPH)
  2150  0471  0020               	movlb	0	; select bank0
  2151  0472  086E               	movf	_speed_units,w
  2152  0473  1D03               	btfss	3,2
  2153  0474  2C95               	goto	l3064
  2154                           
  2155                           ;main.c: 94: speed = multiply_fp(speed, ratio_mph);
  2156  0475  085E               	movf	_speed+3,w
  2157  0476  00AF               	movwf	multiply_fp@n1+3
  2158  0477  085D               	movf	_speed+2,w
  2159  0478  00AE               	movwf	multiply_fp@n1+2
  2160  0479  085C               	movf	_speed+1,w
  2161  047A  00AD               	movwf	multiply_fp@n1+1
  2162  047B  085B               	movf	_speed,w
  2163  047C  00AC               	movwf	multiply_fp@n1
  2164  047D  3021               	movlw	low (_ratio_mph| (0+32768))
  2165  047E  0084               	movwf	4
  2166  047F  3085               	movlw	high (_ratio_mph| (0+32768))
  2167  0480  0085               	movwf	5
  2168  0481  3F00               	moviw [0]fsr0
  2169  0482  00B0               	movwf	multiply_fp@n2
  2170  0483  3F01               	moviw [1]fsr0
  2171  0484  00B1               	movwf	multiply_fp@n2+1
  2172  0485  3F02               	moviw [2]fsr0
  2173  0486  00B2               	movwf	multiply_fp@n2+2
  2174  0487  3F03               	moviw [3]fsr0
  2175  0488  00B3               	movwf	multiply_fp@n2+3
  2176  0489  3182  228D  3184   	fcall	_multiply_fp
  2177  048C  0020               	movlb	0	; select bank0
  2178  048D  082F               	movf	?_multiply_fp+3,w
  2179  048E  00DE               	movwf	_speed+3
  2180  048F  082E               	movf	?_multiply_fp+2,w
  2181  0490  00DD               	movwf	_speed+2
  2182  0491  082D               	movf	?_multiply_fp+1,w
  2183  0492  00DC               	movwf	_speed+1
  2184  0493  082C               	movf	?_multiply_fp,w
  2185  0494  00DB               	movwf	_speed
  2186  0495                     l3064:	
  2187                           ;main.c: 96: do { LATA2 = 1; } while(0);
  2188                           
  2189  0495  0022               	movlb	2	; select bank2
  2190  0496  150C               	bsf	12,2	;volatile
  2191                           
  2192                           ;main.c: 97: _delay((unsigned long)((20)*(32000000/4000.0)));
  2193  0497  30D0               	movlw	208
  2194  0498  0020               	movlb	0	; select bank0
  2195  0499  00C9               	movwf	??_main+1
  2196  049A  30C9               	movlw	201
  2197  049B  00C8               	movwf	??_main
  2198  049C                     u3857:	
  2199  049C  0BC8               	decfsz	??_main,f
  2200  049D  2C9C               	goto	u3857
  2201  049E  0BC9               	decfsz	??_main+1,f
  2202  049F  2C9C               	goto	u3857
  2203  04A0  3200               	nop2
  2204                           
  2205                           ;main.c: 98: do { LATA2 = 0; } while(0);
  2206  04A1  0022               	movlb	2	; select bank2
  2207  04A2  110C               	bcf	12,2	;volatile
  2208  04A3  2C6B               	goto	l3058
  2209  04A4                     __end_of_main:	
  2210                           
  2211                           	psect	text1
  2212  028D                     __ptext1:	
  2213 ;; *************** function _multiply_fp *****************
  2214 ;; Defined at:
  2215 ;;		line 46 in file "fixed_point.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  n1              4   12[BANK0 ] long 
  2218 ;;  n2              4   16[BANK0 ] long 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  res             4   34[BANK0 ] long 
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  4   12[BANK0 ] long 
  2223 ;; Registers used:
  2224 ;;		wreg, status,2, status,0, pclath, cstack
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2230 ;;      Params:         0       8       0       0       0       0
  2231 ;;      Locals:         0       4       0       0       0       0
  2232 ;;      Temps:          0      14       0       0       0       0
  2233 ;;      Totals:         0      26       0       0       0       0
  2234 ;;Total ram usage:       26 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    7
  2237 ;; This function calls:
  2238 ;;		___lmul
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;;		_reciprocal_fp
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           
  2246                           ;psect for function _multiply_fp
  2247  028D                     _multiply_fp:	
  2248                           
  2249                           ;fixed_point.c: 50: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  2250                           
  2251                           ;incstack = 0
  2252                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  2253  028D  0020               	movlb	0	; select bank0
  2254  028E  082C               	movf	multiply_fp@n1,w
  2255  028F  00B4               	movwf	??_multiply_fp
  2256  0290  082D               	movf	multiply_fp@n1+1,w
  2257  0291  00B5               	movwf	??_multiply_fp+1
  2258  0292  082E               	movf	multiply_fp@n1+2,w
  2259  0293  00B6               	movwf	??_multiply_fp+2
  2260  0294  082F               	movf	multiply_fp@n1+3,w
  2261  0295  00B7               	movwf	??_multiply_fp+3
  2262  0296  3010               	movlw	16
  2263  0297  00B8               	movwf	??_multiply_fp+4
  2264  0298                     u3595:	
  2265  0298  37B7               	asrf	??_multiply_fp+3,f
  2266  0299  0CB6               	rrf	??_multiply_fp+2,f
  2267  029A  0CB5               	rrf	??_multiply_fp+1,f
  2268  029B  0CB4               	rrf	??_multiply_fp,f
  2269  029C  0BB8               	decfsz	??_multiply_fp+4,f
  2270  029D  2A98               	goto	u3595
  2271  029E  0837               	movf	??_multiply_fp+3,w
  2272  029F  00A3               	movwf	___lmul@multiplier+3
  2273  02A0  0836               	movf	??_multiply_fp+2,w
  2274  02A1  00A2               	movwf	___lmul@multiplier+2
  2275  02A2  0835               	movf	??_multiply_fp+1,w
  2276  02A3  00A1               	movwf	___lmul@multiplier+1
  2277  02A4  0834               	movf	??_multiply_fp,w
  2278  02A5  00A0               	movwf	___lmul@multiplier
  2279  02A6  0830               	movf	multiply_fp@n2,w
  2280  02A7  00B9               	movwf	??_multiply_fp+5
  2281  02A8  0831               	movf	multiply_fp@n2+1,w
  2282  02A9  00BA               	movwf	??_multiply_fp+6
  2283  02AA  0832               	movf	multiply_fp@n2+2,w
  2284  02AB  00BB               	movwf	??_multiply_fp+7
  2285  02AC  0833               	movf	multiply_fp@n2+3,w
  2286  02AD  00BC               	movwf	??_multiply_fp+8
  2287  02AE  3010               	movlw	16
  2288  02AF  00BD               	movwf	??_multiply_fp+9
  2289  02B0                     u3605:	
  2290  02B0  37BC               	asrf	??_multiply_fp+8,f
  2291  02B1  0CBB               	rrf	??_multiply_fp+7,f
  2292  02B2  0CBA               	rrf	??_multiply_fp+6,f
  2293  02B3  0CB9               	rrf	??_multiply_fp+5,f
  2294  02B4  0BBD               	decfsz	??_multiply_fp+9,f
  2295  02B5  2AB0               	goto	u3605
  2296  02B6  083C               	movf	??_multiply_fp+8,w
  2297  02B7  00A7               	movwf	___lmul@multiplicand+3
  2298  02B8  083B               	movf	??_multiply_fp+7,w
  2299  02B9  00A6               	movwf	___lmul@multiplicand+2
  2300  02BA  083A               	movf	??_multiply_fp+6,w
  2301  02BB  00A5               	movwf	___lmul@multiplicand+1
  2302  02BC  0839               	movf	??_multiply_fp+5,w
  2303  02BD  00A4               	movwf	___lmul@multiplicand
  2304  02BE  3185  25B2  3182   	fcall	___lmul
  2305  02C1  0020               	movlb	0	; select bank0
  2306  02C2  0820               	movf	?___lmul,w
  2307  02C3  00BE               	movwf	??_multiply_fp+10
  2308  02C4  0821               	movf	?___lmul+1,w
  2309  02C5  00BF               	movwf	??_multiply_fp+11
  2310  02C6  0822               	movf	?___lmul+2,w
  2311  02C7  00C0               	movwf	??_multiply_fp+12
  2312  02C8  0823               	movf	?___lmul+3,w
  2313  02C9  00C1               	movwf	??_multiply_fp+13
  2314  02CA  3010               	movlw	16
  2315  02CB                     u3615:	
  2316  02CB  35BE               	lslf	??_multiply_fp+10,f
  2317  02CC  0DBF               	rlf	??_multiply_fp+11,f
  2318  02CD  0DC0               	rlf	??_multiply_fp+12,f
  2319  02CE  0DC1               	rlf	??_multiply_fp+13,f
  2320  02CF  0B89               	decfsz	9,f
  2321  02D0  2ACB               	goto	u3615
  2322  02D1  0841               	movf	??_multiply_fp+13,w
  2323  02D2  00C5               	movwf	multiply_fp@res+3
  2324  02D3  0840               	movf	??_multiply_fp+12,w
  2325  02D4  00C4               	movwf	multiply_fp@res+2
  2326  02D5  083F               	movf	??_multiply_fp+11,w
  2327  02D6  00C3               	movwf	multiply_fp@res+1
  2328  02D7  083E               	movf	??_multiply_fp+10,w
  2329  02D8  00C2               	movwf	multiply_fp@res
  2330                           
  2331                           ;fixed_point.c: 51: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  2332  02D9  082C               	movf	multiply_fp@n1,w
  2333  02DA  00B4               	movwf	??_multiply_fp
  2334  02DB  082D               	movf	multiply_fp@n1+1,w
  2335  02DC  00B5               	movwf	??_multiply_fp+1
  2336  02DD  082E               	movf	multiply_fp@n1+2,w
  2337  02DE  00B6               	movwf	??_multiply_fp+2
  2338  02DF  082F               	movf	multiply_fp@n1+3,w
  2339  02E0  00B7               	movwf	??_multiply_fp+3
  2340  02E1  3010               	movlw	16
  2341  02E2  00B8               	movwf	??_multiply_fp+4
  2342  02E3                     u3625:	
  2343  02E3  37B7               	asrf	??_multiply_fp+3,f
  2344  02E4  0CB6               	rrf	??_multiply_fp+2,f
  2345  02E5  0CB5               	rrf	??_multiply_fp+1,f
  2346  02E6  0CB4               	rrf	??_multiply_fp,f
  2347  02E7  0BB8               	decfsz	??_multiply_fp+4,f
  2348  02E8  2AE3               	goto	u3625
  2349  02E9  0837               	movf	??_multiply_fp+3,w
  2350  02EA  00A3               	movwf	___lmul@multiplier+3
  2351  02EB  0836               	movf	??_multiply_fp+2,w
  2352  02EC  00A2               	movwf	___lmul@multiplier+2
  2353  02ED  0835               	movf	??_multiply_fp+1,w
  2354  02EE  00A1               	movwf	___lmul@multiplier+1
  2355  02EF  0834               	movf	??_multiply_fp,w
  2356  02F0  00A0               	movwf	___lmul@multiplier
  2357  02F1  30FF               	movlw	255
  2358  02F2  0530               	andwf	multiply_fp@n2,w
  2359  02F3  00A4               	movwf	___lmul@multiplicand
  2360  02F4  30FF               	movlw	255
  2361  02F5  0531               	andwf	multiply_fp@n2+1,w
  2362  02F6  00A5               	movwf	___lmul@multiplicand+1
  2363  02F7  3000               	movlw	0
  2364  02F8  0532               	andwf	multiply_fp@n2+2,w
  2365  02F9  00A6               	movwf	___lmul@multiplicand+2
  2366  02FA  3000               	movlw	0
  2367  02FB  0533               	andwf	multiply_fp@n2+3,w
  2368  02FC  00A7               	movwf	___lmul@multiplicand+3
  2369  02FD  3185  25B2  3182   	fcall	___lmul
  2370  0300  0020               	movlb	0	; select bank0
  2371  0301  0820               	movf	?___lmul,w
  2372  0302  07C2               	addwf	multiply_fp@res,f
  2373  0303  0821               	movf	?___lmul+1,w
  2374  0304  3DC3               	addwfc	multiply_fp@res+1,f
  2375  0305  0822               	movf	?___lmul+2,w
  2376  0306  3DC4               	addwfc	multiply_fp@res+2,f
  2377  0307  0823               	movf	?___lmul+3,w
  2378  0308  3DC5               	addwfc	multiply_fp@res+3,f
  2379                           
  2380                           ;fixed_point.c: 52: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  2381  0309  0830               	movf	multiply_fp@n2,w
  2382  030A  00B4               	movwf	??_multiply_fp
  2383  030B  0831               	movf	multiply_fp@n2+1,w
  2384  030C  00B5               	movwf	??_multiply_fp+1
  2385  030D  0832               	movf	multiply_fp@n2+2,w
  2386  030E  00B6               	movwf	??_multiply_fp+2
  2387  030F  0833               	movf	multiply_fp@n2+3,w
  2388  0310  00B7               	movwf	??_multiply_fp+3
  2389  0311  3010               	movlw	16
  2390  0312  00B8               	movwf	??_multiply_fp+4
  2391  0313                     u3635:	
  2392  0313  37B7               	asrf	??_multiply_fp+3,f
  2393  0314  0CB6               	rrf	??_multiply_fp+2,f
  2394  0315  0CB5               	rrf	??_multiply_fp+1,f
  2395  0316  0CB4               	rrf	??_multiply_fp,f
  2396  0317  0BB8               	decfsz	??_multiply_fp+4,f
  2397  0318  2B13               	goto	u3635
  2398  0319  0837               	movf	??_multiply_fp+3,w
  2399  031A  00A3               	movwf	___lmul@multiplier+3
  2400  031B  0836               	movf	??_multiply_fp+2,w
  2401  031C  00A2               	movwf	___lmul@multiplier+2
  2402  031D  0835               	movf	??_multiply_fp+1,w
  2403  031E  00A1               	movwf	___lmul@multiplier+1
  2404  031F  0834               	movf	??_multiply_fp,w
  2405  0320  00A0               	movwf	___lmul@multiplier
  2406  0321  30FF               	movlw	255
  2407  0322  052C               	andwf	multiply_fp@n1,w
  2408  0323  00A4               	movwf	___lmul@multiplicand
  2409  0324  30FF               	movlw	255
  2410  0325  052D               	andwf	multiply_fp@n1+1,w
  2411  0326  00A5               	movwf	___lmul@multiplicand+1
  2412  0327  3000               	movlw	0
  2413  0328  052E               	andwf	multiply_fp@n1+2,w
  2414  0329  00A6               	movwf	___lmul@multiplicand+2
  2415  032A  3000               	movlw	0
  2416  032B  052F               	andwf	multiply_fp@n1+3,w
  2417  032C  00A7               	movwf	___lmul@multiplicand+3
  2418  032D  3185  25B2  3182   	fcall	___lmul
  2419  0330  0020               	movlb	0	; select bank0
  2420  0331  0820               	movf	?___lmul,w
  2421  0332  07C2               	addwf	multiply_fp@res,f
  2422  0333  0821               	movf	?___lmul+1,w
  2423  0334  3DC3               	addwfc	multiply_fp@res+1,f
  2424  0335  0822               	movf	?___lmul+2,w
  2425  0336  3DC4               	addwfc	multiply_fp@res+2,f
  2426  0337  0823               	movf	?___lmul+3,w
  2427  0338  3DC5               	addwfc	multiply_fp@res+3,f
  2428                           
  2429                           ;fixed_point.c: 53: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  2430  0339  30FF               	movlw	255
  2431  033A  00B4               	movwf	??_multiply_fp
  2432  033B  30FF               	movlw	255
  2433  033C  00B5               	movwf	??_multiply_fp+1
  2434  033D  3000               	movlw	0
  2435  033E  00B6               	movwf	??_multiply_fp+2
  2436  033F  3000               	movlw	0
  2437  0340  00B7               	movwf	??_multiply_fp+3
  2438  0341  30FF               	movlw	255
  2439  0342  052C               	andwf	multiply_fp@n1,w
  2440  0343  00A0               	movwf	___lmul@multiplier
  2441  0344  30FF               	movlw	255
  2442  0345  052D               	andwf	multiply_fp@n1+1,w
  2443  0346  00A1               	movwf	___lmul@multiplier+1
  2444  0347  3000               	movlw	0
  2445  0348  052E               	andwf	multiply_fp@n1+2,w
  2446  0349  00A2               	movwf	___lmul@multiplier+2
  2447  034A  3000               	movlw	0
  2448  034B  052F               	andwf	multiply_fp@n1+3,w
  2449  034C  00A3               	movwf	___lmul@multiplier+3
  2450  034D  30FF               	movlw	255
  2451  034E  0530               	andwf	multiply_fp@n2,w
  2452  034F  00A4               	movwf	___lmul@multiplicand
  2453  0350  30FF               	movlw	255
  2454  0351  0531               	andwf	multiply_fp@n2+1,w
  2455  0352  00A5               	movwf	___lmul@multiplicand+1
  2456  0353  3000               	movlw	0
  2457  0354  0532               	andwf	multiply_fp@n2+2,w
  2458  0355  00A6               	movwf	___lmul@multiplicand+2
  2459  0356  3000               	movlw	0
  2460  0357  0533               	andwf	multiply_fp@n2+3,w
  2461  0358  00A7               	movwf	___lmul@multiplicand+3
  2462  0359  3185  25B2  3182   	fcall	___lmul
  2463  035C  0020               	movlb	0	; select bank0
  2464  035D  0820               	movf	?___lmul,w
  2465  035E  00B8               	movwf	??_multiply_fp+4
  2466  035F  0821               	movf	?___lmul+1,w
  2467  0360  00B9               	movwf	??_multiply_fp+5
  2468  0361  0822               	movf	?___lmul+2,w
  2469  0362  00BA               	movwf	??_multiply_fp+6
  2470  0363  0823               	movf	?___lmul+3,w
  2471  0364  00BB               	movwf	??_multiply_fp+7
  2472  0365  3010               	movlw	16
  2473  0366  00BC               	movwf	??_multiply_fp+8
  2474  0367                     u3645:	
  2475  0367  37BB               	asrf	??_multiply_fp+7,f
  2476  0368  0CBA               	rrf	??_multiply_fp+6,f
  2477  0369  0CB9               	rrf	??_multiply_fp+5,f
  2478  036A  0CB8               	rrf	??_multiply_fp+4,f
  2479  036B  0BBC               	decfsz	??_multiply_fp+8,f
  2480  036C  2B67               	goto	u3645
  2481  036D  0838               	movf	??_multiply_fp+4,w
  2482  036E  05B4               	andwf	??_multiply_fp,f
  2483  036F  0839               	movf	??_multiply_fp+5,w
  2484  0370  05B5               	andwf	??_multiply_fp+1,f
  2485  0371  083A               	movf	??_multiply_fp+6,w
  2486  0372  05B6               	andwf	??_multiply_fp+2,f
  2487  0373  083B               	movf	??_multiply_fp+7,w
  2488  0374  05B7               	andwf	??_multiply_fp+3,f
  2489  0375  0834               	movf	??_multiply_fp,w
  2490  0376  07C2               	addwf	multiply_fp@res,f
  2491  0377  0835               	movf	??_multiply_fp+1,w
  2492  0378  3DC3               	addwfc	multiply_fp@res+1,f
  2493  0379  0836               	movf	??_multiply_fp+2,w
  2494  037A  3DC4               	addwfc	multiply_fp@res+2,f
  2495  037B  0837               	movf	??_multiply_fp+3,w
  2496  037C  3DC5               	addwfc	multiply_fp@res+3,f
  2497                           
  2498                           ;fixed_point.c: 54: return res;
  2499  037D  0845               	movf	multiply_fp@res+3,w
  2500  037E  00AF               	movwf	?_multiply_fp+3
  2501  037F  0844               	movf	multiply_fp@res+2,w
  2502  0380  00AE               	movwf	?_multiply_fp+2
  2503  0381  0843               	movf	multiply_fp@res+1,w
  2504  0382  00AD               	movwf	?_multiply_fp+1
  2505  0383  0842               	movf	multiply_fp@res,w
  2506  0384  00AC               	movwf	?_multiply_fp
  2507  0385  0008               	return
  2508  0386                     __end_of_multiply_fp:	
  2509                           
  2510                           	psect	text2
  2511  05B2                     __ptext2:	
  2512 ;; *************** function ___lmul *****************
  2513 ;; Defined at:
  2514 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2517 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  product         4    8[BANK0 ] unsigned long 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  4    0[BANK0 ] unsigned long 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, status,0
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2529 ;;      Params:         0       8       0       0       0       0
  2530 ;;      Locals:         0       4       0       0       0       0
  2531 ;;      Temps:          0       0       0       0       0       0
  2532 ;;      Totals:         0      12       0       0       0       0
  2533 ;;Total ram usage:       12 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    6
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_multiply_fp
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           
  2544                           ;psect for function ___lmul
  2545  05B2                     ___lmul:	
  2546                           
  2547                           ;incstack = 0
  2548                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2549  05B2  3000               	movlw	0
  2550  05B3  0020               	movlb	0	; select bank0
  2551  05B4  00AB               	movwf	___lmul@product+3
  2552  05B5  3000               	movlw	0
  2553  05B6  00AA               	movwf	___lmul@product+2
  2554  05B7  3000               	movlw	0
  2555  05B8  00A9               	movwf	___lmul@product+1
  2556  05B9  3000               	movlw	0
  2557  05BA  00A8               	movwf	___lmul@product
  2558  05BB                     l2658:	
  2559  05BB  1C20               	btfss	___lmul@multiplier,0
  2560  05BC  2DC5               	goto	l2662
  2561  05BD  0824               	movf	___lmul@multiplicand,w
  2562  05BE  07A8               	addwf	___lmul@product,f
  2563  05BF  0825               	movf	___lmul@multiplicand+1,w
  2564  05C0  3DA9               	addwfc	___lmul@product+1,f
  2565  05C1  0826               	movf	___lmul@multiplicand+2,w
  2566  05C2  3DAA               	addwfc	___lmul@product+2,f
  2567  05C3  0827               	movf	___lmul@multiplicand+3,w
  2568  05C4  3DAB               	addwfc	___lmul@product+3,f
  2569  05C5                     l2662:	
  2570  05C5  3001               	movlw	1
  2571  05C6                     u2955:	
  2572  05C6  35A4               	lslf	___lmul@multiplicand,f
  2573  05C7  0DA5               	rlf	___lmul@multiplicand+1,f
  2574  05C8  0DA6               	rlf	___lmul@multiplicand+2,f
  2575  05C9  0DA7               	rlf	___lmul@multiplicand+3,f
  2576  05CA  0B89               	decfsz	9,f
  2577  05CB  2DC6               	goto	u2955
  2578  05CC  3001               	movlw	1
  2579  05CD                     u2965:	
  2580  05CD  36A3               	lsrf	___lmul@multiplier+3,f
  2581  05CE  0CA2               	rrf	___lmul@multiplier+2,f
  2582  05CF  0CA1               	rrf	___lmul@multiplier+1,f
  2583  05D0  0CA0               	rrf	___lmul@multiplier,f
  2584  05D1  0B89               	decfsz	9,f
  2585  05D2  2DCD               	goto	u2965
  2586  05D3  0823               	movf	___lmul@multiplier+3,w
  2587  05D4  0422               	iorwf	___lmul@multiplier+2,w
  2588  05D5  0421               	iorwf	___lmul@multiplier+1,w
  2589  05D6  0420               	iorwf	___lmul@multiplier,w
  2590  05D7  1D03               	skipz
  2591  05D8  2DBB               	goto	l2658
  2592  05D9  082B               	movf	___lmul@product+3,w
  2593  05DA  00A3               	movwf	?___lmul+3
  2594  05DB  082A               	movf	___lmul@product+2,w
  2595  05DC  00A2               	movwf	?___lmul+2
  2596  05DD  0829               	movf	___lmul@product+1,w
  2597  05DE  00A1               	movwf	?___lmul+1
  2598  05DF  0828               	movf	___lmul@product,w
  2599  05E0  00A0               	movwf	?___lmul
  2600  05E1  0008               	return
  2601  05E2                     __end_of___lmul:	
  2602                           
  2603                           	psect	text3
  2604  073D                     __ptext3:	
  2605 ;; *************** function _SYSTEM_Initialize *****************
  2606 ;; Defined at:
  2607 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0, pclath, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2621 ;;      Params:         0       0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0
  2624 ;;      Totals:         0       0       0       0       0       0
  2625 ;;Total ram usage:        0 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    8
  2628 ;; This function calls:
  2629 ;;		_EUSART_Initialize
  2630 ;;		_OSCILLATOR_Initialize
  2631 ;;		_PIN_MANAGER_Initialize
  2632 ;;		_TMR0_Initialize
  2633 ;; This function is called by:
  2634 ;;		_main
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           
  2639                           ;psect for function _SYSTEM_Initialize
  2640  073D                     _SYSTEM_Initialize:	
  2641                           
  2642                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2643                           
  2644                           ;incstack = 0
  2645                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2646  073D  3186  26FC  3187   	fcall	_PIN_MANAGER_Initialize
  2647                           
  2648                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2649  0740  3187  2760  3187   	fcall	_OSCILLATOR_Initialize
  2650                           
  2651                           ;mcc.c: 74: TMR0_Initialize();
  2652  0743  3187  2713  3187   	fcall	_TMR0_Initialize
  2653                           
  2654                           ;mcc.c: 75: EUSART_Initialize();
  2655  0746  3186  26C6         	fcall	_EUSART_Initialize
  2656  0748  0008               	return
  2657  0749                     __end_of_SYSTEM_Initialize:	
  2658                           
  2659                           	psect	text4
  2660  0713                     __ptext4:	
  2661 ;; *************** function _TMR0_Initialize *****************
  2662 ;; Defined at:
  2663 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, pclath, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2677 ;;      Params:         0       0       0       0       0       0
  2678 ;;      Locals:         0       0       0       0       0       0
  2679 ;;      Temps:          0       1       0       0       0       0
  2680 ;;      Totals:         0       1       0       0       0       0
  2681 ;;Total ram usage:        1 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    7
  2684 ;; This function calls:
  2685 ;;		_TMR0_SetInterruptHandler
  2686 ;; This function is called by:
  2687 ;;		_SYSTEM_Initialize
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           
  2692                           ;psect for function _TMR0_Initialize
  2693  0713                     _TMR0_Initialize:	
  2694                           
  2695                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  2696                           
  2697                           ;incstack = 0
  2698                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2699  0713  0021               	movlb	1	; select bank1
  2700  0714  0815               	movf	21,w	;volatile
  2701  0715  39C0               	andlw	192
  2702  0716  3817               	iorlw	23
  2703  0717  0095               	movwf	21	;volatile
  2704                           
  2705                           ;tmr0.c: 71: TMR0 = 0x64;
  2706  0718  3064               	movlw	100
  2707  0719  0020               	movlb	0	; select bank0
  2708  071A  0095               	movwf	21	;volatile
  2709                           
  2710                           ;tmr0.c: 74: timer0ReloadVal= 100;
  2711  071B  3064               	movlw	100
  2712  071C  00A2               	movwf	??_TMR0_Initialize
  2713  071D  0822               	movf	??_TMR0_Initialize,w
  2714  071E  00F4               	movwf	_timer0ReloadVal	;volatile
  2715                           
  2716                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  2717  071F  110B               	bcf	11,2	;volatile
  2718                           
  2719                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  2720  0720  168B               	bsf	11,5	;volatile
  2721                           
  2722                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2723  0721  3081               	movlw	low _TMR0_DefaultInterruptHandler
  2724  0722  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2725  0723  3007               	movlw	high _TMR0_DefaultInterruptHandler
  2726  0724  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2727  0725  3187  276E         	fcall	_TMR0_SetInterruptHandler
  2728  0727  0008               	return
  2729  0728                     __end_of_TMR0_Initialize:	
  2730                           
  2731                           	psect	text5
  2732  076E                     __ptext5:	
  2733 ;; *************** function _TMR0_SetInterruptHandler *****************
  2734 ;; Defined at:
  2735 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  2738 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2750 ;;      Params:         0       2       0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0
  2753 ;;      Totals:         0       2       0       0       0       0
  2754 ;;Total ram usage:        2 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    6
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_TMR0_Initialize
  2761 ;;		_main
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _TMR0_SetInterruptHandler
  2767  076E                     _TMR0_SetInterruptHandler:	
  2768                           
  2769                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2773  076E  0020               	movlb	0	; select bank0
  2774  076F  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2775  0770  00E2               	movwf	_TMR0_InterruptHandler+1
  2776  0771  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2777  0772  00E1               	movwf	_TMR0_InterruptHandler
  2778  0773  0008               	return
  2779  0774                     __end_of_TMR0_SetInterruptHandler:	
  2780                           
  2781                           	psect	text6
  2782  06FC                     __ptext6:	
  2783 ;; *************** function _PIN_MANAGER_Initialize *****************
  2784 ;; Defined at:
  2785 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2799 ;;      Params:         0       0       0       0       0       0
  2800 ;;      Locals:         0       0       0       0       0       0
  2801 ;;      Temps:          0       0       0       0       0       0
  2802 ;;      Totals:         0       0       0       0       0       0
  2803 ;;Total ram usage:        0 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    6
  2806 ;; This function calls:
  2807 ;;		Nothing
  2808 ;; This function is called by:
  2809 ;;		_SYSTEM_Initialize
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           
  2814                           ;psect for function _PIN_MANAGER_Initialize
  2815  06FC                     _PIN_MANAGER_Initialize:	
  2816                           
  2817                           ;pin_manager.c: 51: LATB = 0x0;
  2818                           
  2819                           ;incstack = 0
  2820                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2821  06FC  0022               	movlb	2	; select bank2
  2822  06FD  018D               	clrf	13	;volatile
  2823                           
  2824                           ;pin_manager.c: 52: LATA = 0x0;
  2825  06FE  018C               	clrf	12	;volatile
  2826                           
  2827                           ;pin_manager.c: 53: ANSELA = 0x1F;
  2828  06FF  301F               	movlw	31
  2829  0700  0023               	movlb	3	; select bank3
  2830  0701  008C               	movwf	12	;volatile
  2831                           
  2832                           ;pin_manager.c: 54: ANSELB = 0xF8;
  2833  0702  30F8               	movlw	248
  2834  0703  008D               	movwf	13	;volatile
  2835                           
  2836                           ;pin_manager.c: 55: WPUA = 0x20;
  2837  0704  3020               	movlw	32
  2838  0705  0024               	movlb	4	; select bank4
  2839  0706  008C               	movwf	12	;volatile
  2840                           
  2841                           ;pin_manager.c: 56: WPUB = 0xFF;
  2842  0707  30FF               	movlw	255
  2843  0708  008D               	movwf	13	;volatile
  2844                           
  2845                           ;pin_manager.c: 57: TRISB = 0xFF;
  2846  0709  30FF               	movlw	255
  2847  070A  0021               	movlb	1	; select bank1
  2848  070B  008D               	movwf	13	;volatile
  2849                           
  2850                           ;pin_manager.c: 58: TRISA = 0xFB;
  2851  070C  30FB               	movlw	251
  2852  070D  008C               	movwf	12	;volatile
  2853                           
  2854                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  2855  070E  1395               	bcf	21,7	;volatile
  2856                           
  2857                           ;pin_manager.c: 61: APFCON0 = 0x00;
  2858  070F  0022               	movlb	2	; select bank2
  2859  0710  019D               	clrf	29	;volatile
  2860                           
  2861                           ;pin_manager.c: 62: APFCON1 = 0x00;
  2862  0711  019E               	clrf	30	;volatile
  2863  0712  0008               	return
  2864  0713                     __end_of_PIN_MANAGER_Initialize:	
  2865                           
  2866                           	psect	text7
  2867  0760                     __ptext7:	
  2868 ;; *************** function _OSCILLATOR_Initialize *****************
  2869 ;; Defined at:
  2870 ;;		line 78 in file "mcc_generated_files/mcc.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;		None
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;		None
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      void 
  2877 ;; Registers used:
  2878 ;;		wreg, status,2
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2884 ;;      Params:         0       0       0       0       0       0
  2885 ;;      Locals:         0       0       0       0       0       0
  2886 ;;      Temps:          0       0       0       0       0       0
  2887 ;;      Totals:         0       0       0       0       0       0
  2888 ;;Total ram usage:        0 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:    6
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_SYSTEM_Initialize
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           
  2899                           ;psect for function _OSCILLATOR_Initialize
  2900  0760                     _OSCILLATOR_Initialize:	
  2901                           
  2902                           ;mcc.c: 81: OSCCON = 0x70;
  2903                           
  2904                           ;incstack = 0
  2905                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2906  0760  3070               	movlw	112
  2907  0761  0021               	movlb	1	; select bank1
  2908  0762  0099               	movwf	25	;volatile
  2909                           
  2910                           ;mcc.c: 83: OSCSTAT = 0x00;
  2911  0763  019A               	clrf	26	;volatile
  2912                           
  2913                           ;mcc.c: 85: OSCTUNE = 0x00;
  2914  0764  0198               	clrf	24	;volatile
  2915  0765                     l24:	
  2916                           ;mcc.c: 90: {
  2917                           
  2918                           ;mcc.c: 89: while(PLLR == 0)
  2919                           
  2920  0765  1B1A               	btfsc	26,6	;volatile
  2921  0766  0008               	return
  2922  0767  2F65               	goto	l24
  2923  0768                     __end_of_OSCILLATOR_Initialize:	
  2924                           
  2925                           	psect	text8
  2926  06C6                     __ptext8:	
  2927 ;; *************** function _EUSART_Initialize *****************
  2928 ;; Defined at:
  2929 ;;		line 75 in file "mcc_generated_files/eusart.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2943 ;;      Params:         0       0       0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0
  2945 ;;      Temps:          0       1       0       0       0       0
  2946 ;;      Totals:         0       1       0       0       0       0
  2947 ;;Total ram usage:        1 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    6
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_SYSTEM_Initialize
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           
  2958                           ;psect for function _EUSART_Initialize
  2959  06C6                     _EUSART_Initialize:	
  2960                           
  2961                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2965  06C6  0021               	movlb	1	; select bank1
  2966  06C7  1291               	bcf	17,5	;volatile
  2967                           
  2968                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2969  06C8  1211               	bcf	17,4	;volatile
  2970                           
  2971                           ;eusart.c: 84: BAUDCON = 0x08;
  2972  06C9  3008               	movlw	8
  2973  06CA  0023               	movlb	3	; select bank3
  2974  06CB  009F               	movwf	31	;volatile
  2975                           
  2976                           ;eusart.c: 87: RCSTA = 0x90;
  2977  06CC  3090               	movlw	144
  2978  06CD  009D               	movwf	29	;volatile
  2979                           
  2980                           ;eusart.c: 90: TXSTA = 0x24;
  2981  06CE  3024               	movlw	36
  2982  06CF  009E               	movwf	30	;volatile
  2983                           
  2984                           ;eusart.c: 93: SPBRGL = 0x40;
  2985  06D0  3040               	movlw	64
  2986  06D1  009B               	movwf	27	;volatile
  2987                           
  2988                           ;eusart.c: 96: SPBRGH = 0x03;
  2989  06D2  3003               	movlw	3
  2990  06D3  009C               	movwf	28	;volatile
  2991                           
  2992                           ;eusart.c: 100: eusartTxHead = 0;
  2993  06D4  0020               	movlb	0	; select bank0
  2994  06D5  01EC               	clrf	_eusartTxHead
  2995                           
  2996                           ;eusart.c: 101: eusartTxTail = 0;
  2997  06D6  01ED               	clrf	_eusartTxTail
  2998                           
  2999                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3000  06D7  3008               	movlw	8
  3001  06D8  00A0               	movwf	??_EUSART_Initialize
  3002  06D9  0820               	movf	??_EUSART_Initialize,w
  3003  06DA  00EB               	movwf	_eusartTxBufferRemaining	;volatile
  3004                           
  3005                           ;eusart.c: 104: eusartRxHead = 0;
  3006  06DB  01E9               	clrf	_eusartRxHead
  3007                           
  3008                           ;eusart.c: 105: eusartRxTail = 0;
  3009  06DC  01EA               	clrf	_eusartRxTail
  3010                           
  3011                           ;eusart.c: 106: eusartRxCount = 0;
  3012  06DD  01F3               	clrf	_eusartRxCount	;volatile
  3013                           
  3014                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3015  06DE  0021               	movlb	1	; select bank1
  3016  06DF  1691               	bsf	17,5	;volatile
  3017  06E0  0008               	return
  3018  06E1                     __end_of_EUSART_Initialize:	
  3019                           
  3020                           	psect	text9
  3021  062E                     __ptext9:	
  3022 ;; *************** function _LED_set_state *****************
  3023 ;; Defined at:
  3024 ;;		line 16 in file "interact.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  new_state       1    wreg     enum E2901
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  new_state       1    1[BANK0 ] enum E2901
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3038 ;;      Params:         0       0       0       0       0       0
  3039 ;;      Locals:         0       1       0       0       0       0
  3040 ;;      Temps:          0       1       0       0       0       0
  3041 ;;      Totals:         0       2       0       0       0       0
  3042 ;;Total ram usage:        2 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    6
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_main
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _LED_set_state
  3054  062E                     _LED_set_state:	
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  3058                           ;LED_set_state@new_state stored from wreg
  3059  062E  0020               	movlb	0	; select bank0
  3060  062F  00A1               	movwf	LED_set_state@new_state
  3061                           
  3062                           ;interact.c: 18: LED_state = new_state;
  3063  0630  0821               	movf	LED_set_state@new_state,w
  3064  0631  00A0               	movwf	??_LED_set_state
  3065  0632  0820               	movf	??_LED_set_state,w
  3066  0633  00EF               	movwf	_LED_state
  3067                           
  3068                           ;interact.c: 19: if (new_state == always_off)
  3069  0634  0321               	decf	LED_set_state@new_state,w
  3070  0635  1D03               	btfss	3,2
  3071  0636  2E3A               	goto	l2676
  3072                           
  3073                           ;interact.c: 20: do { LATA2 = 0; } while(0);
  3074  0637  0022               	movlb	2	; select bank2
  3075  0638  110C               	bcf	12,2	;volatile
  3076  0639  0008               	return
  3077  063A                     l2676:	
  3078                           
  3079                           ;interact.c: 21: else if (new_state == always_on)
  3080  063A  0020               	movlb	0	; select bank0
  3081  063B  0821               	movf	LED_set_state@new_state,w
  3082  063C  1D03               	btfss	3,2
  3083  063D  2E41               	goto	l2678
  3084                           
  3085                           ;interact.c: 22: do { LATA2 = 1; } while(0);
  3086  063E  0022               	movlb	2	; select bank2
  3087  063F  150C               	bsf	12,2	;volatile
  3088  0640  0008               	return
  3089  0641                     l2678:	
  3090                           
  3091                           ;interact.c: 23: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  3092  0641  3002               	movlw	2
  3093  0642  0020               	movlb	0	; select bank0
  3094  0643  0621               	xorwf	LED_set_state@new_state,w
  3095  0644  1903               	btfsc	3,2
  3096  0645  2E4A               	goto	l333
  3097  0646  3003               	movlw	3
  3098  0647  0621               	xorwf	LED_set_state@new_state,w
  3099  0648  1D03               	btfss	3,2
  3100  0649  0008               	return
  3101  064A                     l333:	
  3102                           ;interact.c: 24: {
  3103                           ;interact.c: 25: do { LATA2 = 1; } while(0);
  3104                           
  3105  064A  0022               	movlb	2	; select bank2
  3106  064B  150C               	bsf	12,2	;volatile
  3107                           
  3108                           ;interact.c: 26: LED_counter = 0;
  3109  064C  0020               	movlb	0	; select bank0
  3110  064D  01E3               	clrf	_LED_counter	;volatile
  3111  064E  0008               	return
  3112  064F                     __end_of_LED_set_state:	
  3113                           
  3114                           	psect	text10
  3115  003F                     __ptext10:	
  3116 ;; *************** function _GPS_read_speed *****************
  3117 ;; Defined at:
  3118 ;;		line 23 in file "GPS.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  buffer          6   31[BANK0 ] unsigned char [6]
  3123 ;;  read_speed_f    2   27[BANK0 ] unsigned short 
  3124 ;;  read_speed_i    2   25[BANK0 ] unsigned short 
  3125 ;;  m_char          1   39[BANK0 ] unsigned char 
  3126 ;;  i_buff          1   38[BANK0 ] unsigned char 
  3127 ;;  i_buff2         1   37[BANK0 ] unsigned char 
  3128 ;;  checksum        1   30[BANK0 ] unsigned char 
  3129 ;;  checksum2       1   29[BANK0 ] unsigned char 
  3130 ;;  no_more_chec    1   24[BANK0 ] unsigned char 
  3131 ;;  before_dot      1   23[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      unsigned char 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3141 ;;      Params:         0       0       0       0       0       0
  3142 ;;      Locals:         0      17       0       0       0       0
  3143 ;;      Temps:          0       2       0       0       0       0
  3144 ;;      Totals:         0      19       0       0       0       0
  3145 ;;Total ram usage:       19 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    7
  3148 ;; This function calls:
  3149 ;;		_EUSART_Read
  3150 ;;		___wmul
  3151 ;;		_convert_to_fp
  3152 ;; This function is called by:
  3153 ;;		_main
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           
  3158                           ;psect for function _GPS_read_speed
  3159  003F                     _GPS_read_speed:	
  3160                           
  3161                           ;GPS.c: 27: unsigned char buffer[6];
  3162                           ;GPS.c: 28: unsigned char i_buff = 0;
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3166  003F  0020               	movlb	0	; select bank0
  3167  0040  01C6               	clrf	GPS_read_speed@i_buff
  3168                           
  3169                           ;GPS.c: 29: unsigned char checksum = 0x00;
  3170  0041  01BE               	clrf	GPS_read_speed@checksum
  3171                           
  3172                           ;GPS.c: 31: unsigned char m_char = 0x00;
  3173  0042  01C7               	clrf	GPS_read_speed@m_char
  3174  0043                     l2708:	
  3175                           ;GPS.c: 32: while (m_char != '$')
  3176                           
  3177  0043  3024               	movlw	36
  3178  0044  0647               	xorwf	GPS_read_speed@m_char,w
  3179  0045  1903               	btfsc	3,2
  3180  0046  2852               	goto	l2710
  3181                           
  3182                           ;GPS.c: 33: if(eusartRxCount!=0)
  3183  0047  0873               	movf	_eusartRxCount,w	;volatile
  3184  0048  1903               	btfsc	3,2
  3185  0049  2843               	goto	l2708
  3186                           
  3187                           ;GPS.c: 34: m_char=EUSART_Read();
  3188  004A  3186  264F  3180   	fcall	_EUSART_Read
  3189  004D  0020               	movlb	0	; select bank0
  3190  004E  00B5               	movwf	??_GPS_read_speed
  3191  004F  0835               	movf	??_GPS_read_speed,w
  3192  0050  00C7               	movwf	GPS_read_speed@m_char
  3193  0051  2843               	goto	l2708
  3194  0052                     l2710:	
  3195                           ;GPS.c: 38: while (1)
  3196                           
  3197                           
  3198                           ;GPS.c: 39: if (eusartRxCount!=0)
  3199  0052  0873               	movf	_eusartRxCount,w	;volatile
  3200  0053  1903               	btfsc	3,2
  3201  0054  2852               	goto	l2710
  3202                           
  3203                           ;GPS.c: 40: {
  3204                           ;GPS.c: 41: m_char=EUSART_Read();
  3205  0055  3186  264F  3180   	fcall	_EUSART_Read
  3206  0058  0020               	movlb	0	; select bank0
  3207  0059  00B5               	movwf	??_GPS_read_speed
  3208  005A  0835               	movf	??_GPS_read_speed,w
  3209  005B  00C7               	movwf	GPS_read_speed@m_char
  3210                           
  3211                           ;GPS.c: 42: checksum ^= m_char;
  3212  005C  0847               	movf	GPS_read_speed@m_char,w
  3213  005D  00B5               	movwf	??_GPS_read_speed
  3214  005E  0835               	movf	??_GPS_read_speed,w
  3215  005F  06BE               	xorwf	GPS_read_speed@checksum,f
  3216                           
  3217                           ;GPS.c: 43: if (m_char == ',')
  3218  0060  302C               	movlw	44
  3219  0061  0647               	xorwf	GPS_read_speed@m_char,w
  3220  0062  1903               	btfsc	3,2
  3221  0063  2876               	goto	l2732
  3222                           
  3223                           ;GPS.c: 45: else
  3224                           ;GPS.c: 46: {
  3225                           ;GPS.c: 47: buffer[i_buff++] = m_char;
  3226                           
  3227                           ;GPS.c: 44: break;
  3228  0064  0847               	movf	GPS_read_speed@m_char,w
  3229  0065  00B5               	movwf	??_GPS_read_speed
  3230  0066  0846               	movf	GPS_read_speed@i_buff,w
  3231  0067  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3232  0068  0086               	movwf	6
  3233  0069  0187               	clrf	7
  3234  006A  0835               	movf	??_GPS_read_speed,w
  3235  006B  0081               	movwf	1
  3236  006C  3001               	movlw	1
  3237  006D  00B5               	movwf	??_GPS_read_speed
  3238  006E  0835               	movf	??_GPS_read_speed,w
  3239  006F  07C6               	addwf	GPS_read_speed@i_buff,f
  3240                           
  3241                           ;GPS.c: 48: if (i_buff >= 6)
  3242  0070  3006               	movlw	6
  3243  0071  0246               	subwf	GPS_read_speed@i_buff,w
  3244  0072  1C03               	skipc
  3245  0073  2852               	goto	l2710
  3246                           
  3247                           ;GPS.c: 49: return 0;
  3248  0074  3000               	movlw	0
  3249  0075  0008               	return
  3250  0076                     l2732:	
  3251                           
  3252                           ;GPS.c: 50: }
  3253                           ;GPS.c: 51: }
  3254                           ;GPS.c: 53: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  3255  0076  3047               	movlw	71
  3256  0077  063F               	xorwf	GPS_read_speed@buffer,w
  3257  0078  1D03               	btfss	3,2
  3258  0079  288A               	goto	l2742
  3259  007A  3050               	movlw	80
  3260  007B  0640               	xorwf	GPS_read_speed@buffer+1,w
  3261  007C  1D03               	btfss	3,2
  3262  007D  288A               	goto	l2742
  3263  007E  3056               	movlw	86
  3264  007F  0641               	xorwf	GPS_read_speed@buffer+2,w
  3265  0080  1D03               	btfss	3,2
  3266  0081  288A               	goto	l2742
  3267  0082  3054               	movlw	84
  3268  0083  0642               	xorwf	GPS_read_speed@buffer+3,w
  3269  0084  1D03               	btfss	3,2
  3270  0085  288A               	goto	l2742
  3271  0086  3047               	movlw	71
  3272  0087  0643               	xorwf	GPS_read_speed@buffer+4,w
  3273  0088  1903               	btfsc	3,2
  3274  0089  288C               	goto	l2746
  3275  008A                     l2742:	
  3276                           
  3277                           ;GPS.c: 54: return 0;
  3278  008A  3000               	movlw	0
  3279  008B  0008               	return
  3280  008C                     l2746:	
  3281                           
  3282                           ;GPS.c: 55: i_buff = 0;
  3283  008C  01C6               	clrf	GPS_read_speed@i_buff
  3284  008D                     l2748:	
  3285                           ;GPS.c: 58: while (1)
  3286                           
  3287                           
  3288                           ;GPS.c: 59: if (eusartRxCount!=0)
  3289  008D  0873               	movf	_eusartRxCount,w	;volatile
  3290  008E  1903               	btfsc	3,2
  3291  008F  288D               	goto	l2748
  3292                           
  3293                           ;GPS.c: 60: {
  3294                           ;GPS.c: 61: m_char=EUSART_Read();
  3295  0090  3186  264F  3180   	fcall	_EUSART_Read
  3296  0093  0020               	movlb	0	; select bank0
  3297  0094  00B5               	movwf	??_GPS_read_speed
  3298  0095  0835               	movf	??_GPS_read_speed,w
  3299  0096  00C7               	movwf	GPS_read_speed@m_char
  3300                           
  3301                           ;GPS.c: 62: checksum ^= m_char;
  3302  0097  0847               	movf	GPS_read_speed@m_char,w
  3303  0098  00B5               	movwf	??_GPS_read_speed
  3304  0099  0835               	movf	??_GPS_read_speed,w
  3305  009A  06BE               	xorwf	GPS_read_speed@checksum,f
  3306                           
  3307                           ;GPS.c: 63: if (m_char == ',')
  3308  009B  302C               	movlw	44
  3309  009C  0647               	xorwf	GPS_read_speed@m_char,w
  3310  009D  1D03               	btfss	3,2
  3311  009E  288D               	goto	l2748
  3312  009F                     l2758:	
  3313                           ;GPS.c: 65: }
  3314                           ;GPS.c: 67: while (1)
  3315                           
  3316                           ;GPS.c: 64: break;
  3317                           
  3318                           
  3319                           ;GPS.c: 68: if (eusartRxCount!=0)
  3320  009F  0873               	movf	_eusartRxCount,w	;volatile
  3321  00A0  1903               	btfsc	3,2
  3322  00A1  289F               	goto	l2758
  3323                           
  3324                           ;GPS.c: 69: {
  3325                           ;GPS.c: 70: m_char=EUSART_Read();
  3326  00A2  3186  264F  3180   	fcall	_EUSART_Read
  3327  00A5  0020               	movlb	0	; select bank0
  3328  00A6  00B5               	movwf	??_GPS_read_speed
  3329  00A7  0835               	movf	??_GPS_read_speed,w
  3330  00A8  00C7               	movwf	GPS_read_speed@m_char
  3331                           
  3332                           ;GPS.c: 71: checksum ^= m_char;
  3333  00A9  0847               	movf	GPS_read_speed@m_char,w
  3334  00AA  00B5               	movwf	??_GPS_read_speed
  3335  00AB  0835               	movf	??_GPS_read_speed,w
  3336  00AC  06BE               	xorwf	GPS_read_speed@checksum,f
  3337                           
  3338                           ;GPS.c: 72: if (m_char == ',')
  3339  00AD  302C               	movlw	44
  3340  00AE  0647               	xorwf	GPS_read_speed@m_char,w
  3341  00AF  1903               	btfsc	3,2
  3342  00B0  28C3               	goto	l2780
  3343                           
  3344                           ;GPS.c: 74: else
  3345                           ;GPS.c: 75: {
  3346                           ;GPS.c: 76: buffer[i_buff++] = m_char;
  3347                           
  3348                           ;GPS.c: 73: break;
  3349  00B1  0847               	movf	GPS_read_speed@m_char,w
  3350  00B2  00B5               	movwf	??_GPS_read_speed
  3351  00B3  0846               	movf	GPS_read_speed@i_buff,w
  3352  00B4  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3353  00B5  0086               	movwf	6
  3354  00B6  0187               	clrf	7
  3355  00B7  0835               	movf	??_GPS_read_speed,w
  3356  00B8  0081               	movwf	1
  3357  00B9  3001               	movlw	1
  3358  00BA  00B5               	movwf	??_GPS_read_speed
  3359  00BB  0835               	movf	??_GPS_read_speed,w
  3360  00BC  07C6               	addwf	GPS_read_speed@i_buff,f
  3361                           
  3362                           ;GPS.c: 77: if (i_buff >= 6)
  3363  00BD  3006               	movlw	6
  3364  00BE  0246               	subwf	GPS_read_speed@i_buff,w
  3365  00BF  1C03               	skipc
  3366  00C0  289F               	goto	l2758
  3367                           
  3368                           ;GPS.c: 78: return 0;
  3369  00C1  3000               	movlw	0
  3370  00C2  0008               	return
  3371  00C3                     l2780:	
  3372                           
  3373                           ;GPS.c: 79: }
  3374                           ;GPS.c: 80: }
  3375                           ;GPS.c: 81: if ((buffer[0] != 'T')||(i_buff != 1))
  3376  00C3  3054               	movlw	84
  3377  00C4  063F               	xorwf	GPS_read_speed@buffer,w
  3378  00C5  1903               	btfsc	3,2
  3379  00C6  0346               	decf	GPS_read_speed@i_buff,w
  3380  00C7  1903               	btfsc	3,2
  3381  00C8  28CB               	goto	l2788
  3382                           
  3383                           ;GPS.c: 82: return 0;
  3384  00C9  3000               	movlw	0
  3385  00CA  0008               	return
  3386  00CB                     l2788:	
  3387                           
  3388                           ;GPS.c: 83: i_buff = 0;
  3389  00CB  01C6               	clrf	GPS_read_speed@i_buff
  3390  00CC                     l2790:	
  3391                           ;GPS.c: 86: while (1)
  3392                           
  3393                           
  3394                           ;GPS.c: 87: if (eusartRxCount!=0)
  3395  00CC  0873               	movf	_eusartRxCount,w	;volatile
  3396  00CD  1903               	btfsc	3,2
  3397  00CE  28CC               	goto	l2790
  3398                           
  3399                           ;GPS.c: 88: {
  3400                           ;GPS.c: 89: m_char=EUSART_Read();
  3401  00CF  3186  264F  3180   	fcall	_EUSART_Read
  3402  00D2  0020               	movlb	0	; select bank0
  3403  00D3  00B5               	movwf	??_GPS_read_speed
  3404  00D4  0835               	movf	??_GPS_read_speed,w
  3405  00D5  00C7               	movwf	GPS_read_speed@m_char
  3406                           
  3407                           ;GPS.c: 90: checksum ^= m_char;
  3408  00D6  0847               	movf	GPS_read_speed@m_char,w
  3409  00D7  00B5               	movwf	??_GPS_read_speed
  3410  00D8  0835               	movf	??_GPS_read_speed,w
  3411  00D9  06BE               	xorwf	GPS_read_speed@checksum,f
  3412                           
  3413                           ;GPS.c: 91: if (m_char == ',')
  3414  00DA  302C               	movlw	44
  3415  00DB  0647               	xorwf	GPS_read_speed@m_char,w
  3416  00DC  1D03               	btfss	3,2
  3417  00DD  28CC               	goto	l2790
  3418  00DE                     l2800:	
  3419                           ;GPS.c: 93: }
  3420                           ;GPS.c: 95: while (1)
  3421                           
  3422                           ;GPS.c: 92: break;
  3423                           
  3424                           
  3425                           ;GPS.c: 96: if (eusartRxCount!=0)
  3426  00DE  0873               	movf	_eusartRxCount,w	;volatile
  3427  00DF  1903               	btfsc	3,2
  3428  00E0  28DE               	goto	l2800
  3429                           
  3430                           ;GPS.c: 97: {
  3431                           ;GPS.c: 98: m_char=EUSART_Read();
  3432  00E1  3186  264F  3180   	fcall	_EUSART_Read
  3433  00E4  0020               	movlb	0	; select bank0
  3434  00E5  00B5               	movwf	??_GPS_read_speed
  3435  00E6  0835               	movf	??_GPS_read_speed,w
  3436  00E7  00C7               	movwf	GPS_read_speed@m_char
  3437                           
  3438                           ;GPS.c: 99: checksum ^= m_char;
  3439  00E8  0847               	movf	GPS_read_speed@m_char,w
  3440  00E9  00B5               	movwf	??_GPS_read_speed
  3441  00EA  0835               	movf	??_GPS_read_speed,w
  3442  00EB  06BE               	xorwf	GPS_read_speed@checksum,f
  3443                           
  3444                           ;GPS.c: 100: if (m_char == ',')
  3445  00EC  302C               	movlw	44
  3446  00ED  0647               	xorwf	GPS_read_speed@m_char,w
  3447  00EE  1903               	btfsc	3,2
  3448  00EF  2902               	goto	l2822
  3449                           
  3450                           ;GPS.c: 102: else
  3451                           ;GPS.c: 103: {
  3452                           ;GPS.c: 104: buffer[i_buff++] = m_char;
  3453                           
  3454                           ;GPS.c: 101: break;
  3455  00F0  0847               	movf	GPS_read_speed@m_char,w
  3456  00F1  00B5               	movwf	??_GPS_read_speed
  3457  00F2  0846               	movf	GPS_read_speed@i_buff,w
  3458  00F3  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3459  00F4  0086               	movwf	6
  3460  00F5  0187               	clrf	7
  3461  00F6  0835               	movf	??_GPS_read_speed,w
  3462  00F7  0081               	movwf	1
  3463  00F8  3001               	movlw	1
  3464  00F9  00B5               	movwf	??_GPS_read_speed
  3465  00FA  0835               	movf	??_GPS_read_speed,w
  3466  00FB  07C6               	addwf	GPS_read_speed@i_buff,f
  3467                           
  3468                           ;GPS.c: 105: if (i_buff >= 6)
  3469  00FC  3006               	movlw	6
  3470  00FD  0246               	subwf	GPS_read_speed@i_buff,w
  3471  00FE  1C03               	skipc
  3472  00FF  28DE               	goto	l2800
  3473                           
  3474                           ;GPS.c: 106: return 0;
  3475  0100  3000               	movlw	0
  3476  0101  0008               	return
  3477  0102                     l2822:	
  3478                           
  3479                           ;GPS.c: 107: }
  3480                           ;GPS.c: 108: }
  3481                           ;GPS.c: 109: if ((buffer[0] != 'M')||(i_buff != 1))
  3482  0102  304D               	movlw	77
  3483  0103  063F               	xorwf	GPS_read_speed@buffer,w
  3484  0104  1903               	btfsc	3,2
  3485  0105  0346               	decf	GPS_read_speed@i_buff,w
  3486  0106  1903               	btfsc	3,2
  3487  0107  290A               	goto	l2830
  3488                           
  3489                           ;GPS.c: 110: return 0;
  3490  0108  3000               	movlw	0
  3491  0109  0008               	return
  3492  010A                     l2830:	
  3493                           
  3494                           ;GPS.c: 111: i_buff = 0;
  3495  010A  01C6               	clrf	GPS_read_speed@i_buff
  3496  010B                     l2832:	
  3497                           ;GPS.c: 114: while (1)
  3498                           
  3499                           
  3500                           ;GPS.c: 115: if (eusartRxCount!=0)
  3501  010B  0873               	movf	_eusartRxCount,w	;volatile
  3502  010C  1903               	btfsc	3,2
  3503  010D  290B               	goto	l2832
  3504                           
  3505                           ;GPS.c: 116: {
  3506                           ;GPS.c: 117: m_char=EUSART_Read();
  3507  010E  3186  264F  3180   	fcall	_EUSART_Read
  3508  0111  0020               	movlb	0	; select bank0
  3509  0112  00B5               	movwf	??_GPS_read_speed
  3510  0113  0835               	movf	??_GPS_read_speed,w
  3511  0114  00C7               	movwf	GPS_read_speed@m_char
  3512                           
  3513                           ;GPS.c: 118: checksum ^= m_char;
  3514  0115  0847               	movf	GPS_read_speed@m_char,w
  3515  0116  00B5               	movwf	??_GPS_read_speed
  3516  0117  0835               	movf	??_GPS_read_speed,w
  3517  0118  06BE               	xorwf	GPS_read_speed@checksum,f
  3518                           
  3519                           ;GPS.c: 119: if (m_char == ',')
  3520  0119  302C               	movlw	44
  3521  011A  0647               	xorwf	GPS_read_speed@m_char,w
  3522  011B  1D03               	btfss	3,2
  3523  011C  290B               	goto	l2832
  3524  011D                     l2842:	
  3525                           ;GPS.c: 121: }
  3526                           ;GPS.c: 123: while (1)
  3527                           
  3528                           ;GPS.c: 120: break;
  3529                           
  3530                           
  3531                           ;GPS.c: 124: if (eusartRxCount!=0)
  3532  011D  0873               	movf	_eusartRxCount,w	;volatile
  3533  011E  1903               	btfsc	3,2
  3534  011F  291D               	goto	l2842
  3535                           
  3536                           ;GPS.c: 125: {
  3537                           ;GPS.c: 126: m_char=EUSART_Read();
  3538  0120  3186  264F  3180   	fcall	_EUSART_Read
  3539  0123  0020               	movlb	0	; select bank0
  3540  0124  00B5               	movwf	??_GPS_read_speed
  3541  0125  0835               	movf	??_GPS_read_speed,w
  3542  0126  00C7               	movwf	GPS_read_speed@m_char
  3543                           
  3544                           ;GPS.c: 127: checksum ^= m_char;
  3545  0127  0847               	movf	GPS_read_speed@m_char,w
  3546  0128  00B5               	movwf	??_GPS_read_speed
  3547  0129  0835               	movf	??_GPS_read_speed,w
  3548  012A  06BE               	xorwf	GPS_read_speed@checksum,f
  3549                           
  3550                           ;GPS.c: 128: if (m_char == ',')
  3551  012B  302C               	movlw	44
  3552  012C  0647               	xorwf	GPS_read_speed@m_char,w
  3553  012D  1903               	btfsc	3,2
  3554  012E  2941               	goto	l2864
  3555                           
  3556                           ;GPS.c: 130: else
  3557                           ;GPS.c: 131: {
  3558                           ;GPS.c: 132: buffer[i_buff++] = m_char;
  3559                           
  3560                           ;GPS.c: 129: break;
  3561  012F  0847               	movf	GPS_read_speed@m_char,w
  3562  0130  00B5               	movwf	??_GPS_read_speed
  3563  0131  0846               	movf	GPS_read_speed@i_buff,w
  3564  0132  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3565  0133  0086               	movwf	6
  3566  0134  0187               	clrf	7
  3567  0135  0835               	movf	??_GPS_read_speed,w
  3568  0136  0081               	movwf	1
  3569  0137  3001               	movlw	1
  3570  0138  00B5               	movwf	??_GPS_read_speed
  3571  0139  0835               	movf	??_GPS_read_speed,w
  3572  013A  07C6               	addwf	GPS_read_speed@i_buff,f
  3573                           
  3574                           ;GPS.c: 133: if (i_buff >= 6)
  3575  013B  3006               	movlw	6
  3576  013C  0246               	subwf	GPS_read_speed@i_buff,w
  3577  013D  1C03               	skipc
  3578  013E  291D               	goto	l2842
  3579                           
  3580                           ;GPS.c: 134: return 0;
  3581  013F  3000               	movlw	0
  3582  0140  0008               	return
  3583  0141                     l2864:	
  3584                           
  3585                           ;GPS.c: 135: }
  3586                           ;GPS.c: 136: }
  3587                           ;GPS.c: 137: if ((buffer[0] != 'N')||(i_buff != 1))
  3588  0141  304E               	movlw	78
  3589  0142  063F               	xorwf	GPS_read_speed@buffer,w
  3590  0143  1903               	btfsc	3,2
  3591  0144  0346               	decf	GPS_read_speed@i_buff,w
  3592  0145  1903               	btfsc	3,2
  3593  0146  2949               	goto	l2872
  3594                           
  3595                           ;GPS.c: 138: return 0;
  3596  0147  3000               	movlw	0
  3597  0148  0008               	return
  3598  0149                     l2872:	
  3599                           
  3600                           ;GPS.c: 139: i_buff = 0;
  3601  0149  01C6               	clrf	GPS_read_speed@i_buff
  3602  014A                     l2874:	
  3603                           ;GPS.c: 142: while (1)
  3604                           
  3605                           
  3606                           ;GPS.c: 143: if (eusartRxCount!=0)
  3607  014A  0873               	movf	_eusartRxCount,w	;volatile
  3608  014B  1903               	btfsc	3,2
  3609  014C  294A               	goto	l2874
  3610                           
  3611                           ;GPS.c: 144: {
  3612                           ;GPS.c: 145: m_char=EUSART_Read();
  3613  014D  3186  264F  3180   	fcall	_EUSART_Read
  3614  0150  0020               	movlb	0	; select bank0
  3615  0151  00B5               	movwf	??_GPS_read_speed
  3616  0152  0835               	movf	??_GPS_read_speed,w
  3617  0153  00C7               	movwf	GPS_read_speed@m_char
  3618                           
  3619                           ;GPS.c: 146: checksum ^= m_char;
  3620  0154  0847               	movf	GPS_read_speed@m_char,w
  3621  0155  00B5               	movwf	??_GPS_read_speed
  3622  0156  0835               	movf	??_GPS_read_speed,w
  3623  0157  06BE               	xorwf	GPS_read_speed@checksum,f
  3624                           
  3625                           ;GPS.c: 147: if (m_char == ',')
  3626  0158  302C               	movlw	44
  3627  0159  0647               	xorwf	GPS_read_speed@m_char,w
  3628  015A  1903               	btfsc	3,2
  3629  015B  296E               	goto	l2896
  3630                           
  3631                           ;GPS.c: 149: else
  3632                           ;GPS.c: 150: {
  3633                           ;GPS.c: 151: buffer[i_buff++] = m_char;
  3634                           
  3635                           ;GPS.c: 148: break;
  3636  015C  0847               	movf	GPS_read_speed@m_char,w
  3637  015D  00B5               	movwf	??_GPS_read_speed
  3638  015E  0846               	movf	GPS_read_speed@i_buff,w
  3639  015F  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3640  0160  0086               	movwf	6
  3641  0161  0187               	clrf	7
  3642  0162  0835               	movf	??_GPS_read_speed,w
  3643  0163  0081               	movwf	1
  3644  0164  3001               	movlw	1
  3645  0165  00B5               	movwf	??_GPS_read_speed
  3646  0166  0835               	movf	??_GPS_read_speed,w
  3647  0167  07C6               	addwf	GPS_read_speed@i_buff,f
  3648                           
  3649                           ;GPS.c: 152: if (i_buff >= 6)
  3650  0168  3006               	movlw	6
  3651  0169  0246               	subwf	GPS_read_speed@i_buff,w
  3652  016A  1C03               	skipc
  3653  016B  294A               	goto	l2874
  3654                           
  3655                           ;GPS.c: 153: return 0;
  3656  016C  3000               	movlw	0
  3657  016D  0008               	return
  3658  016E                     l2896:	
  3659                           
  3660                           ;GPS.c: 154: }
  3661                           ;GPS.c: 155: }
  3662                           ;GPS.c: 158: unsigned char i_buff2 = 0;
  3663  016E  01C5               	clrf	GPS_read_speed@i_buff2
  3664                           
  3665                           ;GPS.c: 159: unsigned short read_speed_int=0;
  3666  016F  01B9               	clrf	GPS_read_speed@read_speed_int
  3667  0170  01BA               	clrf	GPS_read_speed@read_speed_int+1
  3668                           
  3669                           ;GPS.c: 160: unsigned short read_speed_fra=0;
  3670  0171  01BB               	clrf	GPS_read_speed@read_speed_fra
  3671  0172  01BC               	clrf	GPS_read_speed@read_speed_fra+1
  3672                           
  3673                           ;GPS.c: 161: bool before_dot = 1;
  3674  0173  01B7               	clrf	GPS_read_speed@before_dot
  3675  0174  0AB7               	incf	GPS_read_speed@before_dot,f
  3676  0175                     l2924:	
  3677                           ;GPS.c: 162: while (i_buff2 < i_buff)
  3678                           
  3679  0175  0846               	movf	GPS_read_speed@i_buff,w
  3680  0176  0245               	subwf	GPS_read_speed@i_buff2,w
  3681  0177  1803               	btfsc	3,0
  3682  0178  29D8               	goto	l2926
  3683                           
  3684                           ;GPS.c: 163: if (buffer[i_buff2]=='.')
  3685  0179  0845               	movf	GPS_read_speed@i_buff2,w
  3686  017A  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3687  017B  0086               	movwf	6
  3688  017C  0187               	clrf	7
  3689  017D  302E               	movlw	46
  3690  017E  0601               	xorwf	1,w
  3691  017F  1D03               	btfss	3,2
  3692  0180  2983               	goto	l2906
  3693                           
  3694                           ;GPS.c: 164: {
  3695                           ;GPS.c: 165: before_dot = 0;
  3696  0181  01B7               	clrf	GPS_read_speed@before_dot
  3697  0182  29D3               	goto	l2922
  3698  0183                     l2906:	
  3699                           ;GPS.c: 167: }
  3700                           
  3701                           ;GPS.c: 166: i_buff2++;
  3702                           
  3703                           
  3704                           ;GPS.c: 168: else
  3705                           ;GPS.c: 169: {
  3706                           ;GPS.c: 170: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  3707  0183  0845               	movf	GPS_read_speed@i_buff2,w
  3708  0184  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3709  0185  0086               	movwf	6
  3710  0186  0187               	clrf	7
  3711  0187  3030               	movlw	48
  3712  0188  0201               	subwf	1,w
  3713  0189  1C03               	skipc
  3714  018A  2993               	goto	l2910
  3715  018B  0845               	movf	GPS_read_speed@i_buff2,w
  3716  018C  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3717  018D  0086               	movwf	6
  3718  018E  0187               	clrf	7
  3719  018F  303A               	movlw	58
  3720  0190  0201               	subwf	1,w
  3721  0191  1C03               	skipc
  3722  0192  2995               	goto	l2916
  3723  0193                     l2910:	
  3724                           
  3725                           ;GPS.c: 171: return 0;
  3726  0193  3000               	movlw	0
  3727  0194  0008               	return
  3728  0195                     l2916:	
  3729                           
  3730                           ;GPS.c: 172: else
  3731                           ;GPS.c: 173: {
  3732                           ;GPS.c: 174: if (before_dot)
  3733  0195  0837               	movf	GPS_read_speed@before_dot,w
  3734  0196  1903               	btfsc	3,2
  3735  0197  29B6               	goto	l2920
  3736                           
  3737                           ;GPS.c: 175: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  3738  0198  083A               	movf	GPS_read_speed@read_speed_int+1,w
  3739  0199  00A1               	movwf	___wmul@multiplier+1
  3740  019A  0839               	movf	GPS_read_speed@read_speed_int,w
  3741  019B  00A0               	movwf	___wmul@multiplier
  3742  019C  300A               	movlw	10
  3743  019D  00A2               	movwf	___wmul@multiplicand
  3744  019E  3000               	movlw	0
  3745  019F  00A3               	movwf	___wmul@multiplicand+1
  3746  01A0  3186  26AA  3180   	fcall	___wmul
  3747  01A3  0020               	movlb	0	; select bank0
  3748  01A4  0845               	movf	GPS_read_speed@i_buff2,w
  3749  01A5  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3750  01A6  0086               	movwf	6
  3751  01A7  0187               	clrf	7
  3752  01A8  0801               	movf	1,w
  3753  01A9  0720               	addwf	?___wmul,w
  3754  01AA  00B5               	movwf	??_GPS_read_speed
  3755  01AB  0821               	movf	?___wmul+1,w
  3756  01AC  1803               	skipnc
  3757  01AD  0A21               	incf	?___wmul+1,w
  3758  01AE  00B6               	movwf	??_GPS_read_speed+1
  3759  01AF  0835               	movf	??_GPS_read_speed,w
  3760  01B0  3ED0               	addlw	208
  3761  01B1  00B9               	movwf	GPS_read_speed@read_speed_int
  3762  01B2  30FF               	movlw	255
  3763  01B3  3D36               	addwfc	??_GPS_read_speed+1,w
  3764  01B4  00BA               	movwf	GPS_read_speed@read_speed_int+1
  3765  01B5  29D3               	goto	l2922
  3766  01B6                     l2920:	
  3767                           
  3768                           ;GPS.c: 176: else
  3769                           ;GPS.c: 177: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  3770  01B6  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  3771  01B7  00A1               	movwf	___wmul@multiplier+1
  3772  01B8  083B               	movf	GPS_read_speed@read_speed_fra,w
  3773  01B9  00A0               	movwf	___wmul@multiplier
  3774  01BA  300A               	movlw	10
  3775  01BB  00A2               	movwf	___wmul@multiplicand
  3776  01BC  3000               	movlw	0
  3777  01BD  00A3               	movwf	___wmul@multiplicand+1
  3778  01BE  3186  26AA  3180   	fcall	___wmul
  3779  01C1  0020               	movlb	0	; select bank0
  3780  01C2  0845               	movf	GPS_read_speed@i_buff2,w
  3781  01C3  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3782  01C4  0086               	movwf	6
  3783  01C5  0187               	clrf	7
  3784  01C6  0801               	movf	1,w
  3785  01C7  0720               	addwf	?___wmul,w
  3786  01C8  00B5               	movwf	??_GPS_read_speed
  3787  01C9  0821               	movf	?___wmul+1,w
  3788  01CA  1803               	skipnc
  3789  01CB  0A21               	incf	?___wmul+1,w
  3790  01CC  00B6               	movwf	??_GPS_read_speed+1
  3791  01CD  0835               	movf	??_GPS_read_speed,w
  3792  01CE  3ED0               	addlw	208
  3793  01CF  00BB               	movwf	GPS_read_speed@read_speed_fra
  3794  01D0  30FF               	movlw	255
  3795  01D1  3D36               	addwfc	??_GPS_read_speed+1,w
  3796  01D2  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  3797  01D3                     l2922:	
  3798                           
  3799                           ;GPS.c: 178: i_buff2++;
  3800  01D3  3001               	movlw	1
  3801  01D4  00B5               	movwf	??_GPS_read_speed
  3802  01D5  0835               	movf	??_GPS_read_speed,w
  3803  01D6  07C5               	addwf	GPS_read_speed@i_buff2,f
  3804  01D7  2975               	goto	l2924
  3805  01D8                     l2926:	
  3806                           
  3807                           ;GPS.c: 179: }
  3808                           ;GPS.c: 180: }
  3809                           ;GPS.c: 184: read_speed_fra *= 100;
  3810  01D8  3064               	movlw	100
  3811  01D9  00A0               	movwf	___wmul@multiplier
  3812  01DA  3000               	movlw	0
  3813  01DB  00A1               	movwf	___wmul@multiplier+1
  3814  01DC  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  3815  01DD  00A3               	movwf	___wmul@multiplicand+1
  3816  01DE  083B               	movf	GPS_read_speed@read_speed_fra,w
  3817  01DF  00A2               	movwf	___wmul@multiplicand
  3818  01E0  3186  26AA  3180   	fcall	___wmul
  3819  01E3  0020               	movlb	0	; select bank0
  3820  01E4  0821               	movf	?___wmul+1,w
  3821  01E5  00BC               	movwf	GPS_read_speed@read_speed_fra+1
  3822  01E6  0820               	movf	?___wmul,w
  3823  01E7  00BB               	movwf	GPS_read_speed@read_speed_fra
  3824                           
  3825                           ;GPS.c: 187: i_buff = 0;
  3826  01E8  01C6               	clrf	GPS_read_speed@i_buff
  3827  01E9                     l2930:	
  3828                           ;GPS.c: 190: while (1)
  3829                           
  3830                           
  3831                           ;GPS.c: 191: if (eusartRxCount!=0)
  3832  01E9  0873               	movf	_eusartRxCount,w	;volatile
  3833  01EA  1903               	btfsc	3,2
  3834  01EB  29E9               	goto	l2930
  3835                           
  3836                           ;GPS.c: 192: {
  3837                           ;GPS.c: 193: m_char=EUSART_Read();
  3838  01EC  3186  264F  3180   	fcall	_EUSART_Read
  3839  01EF  0020               	movlb	0	; select bank0
  3840  01F0  00B5               	movwf	??_GPS_read_speed
  3841  01F1  0835               	movf	??_GPS_read_speed,w
  3842  01F2  00C7               	movwf	GPS_read_speed@m_char
  3843                           
  3844                           ;GPS.c: 194: checksum ^= m_char;
  3845  01F3  0847               	movf	GPS_read_speed@m_char,w
  3846  01F4  00B5               	movwf	??_GPS_read_speed
  3847  01F5  0835               	movf	??_GPS_read_speed,w
  3848  01F6  06BE               	xorwf	GPS_read_speed@checksum,f
  3849                           
  3850                           ;GPS.c: 195: if (m_char == ',')
  3851  01F7  302C               	movlw	44
  3852  01F8  0647               	xorwf	GPS_read_speed@m_char,w
  3853  01F9  1903               	btfsc	3,2
  3854  01FA  2A0D               	goto	l2952
  3855                           
  3856                           ;GPS.c: 197: else
  3857                           ;GPS.c: 198: {
  3858                           ;GPS.c: 199: buffer[i_buff++] = m_char;
  3859                           
  3860                           ;GPS.c: 196: break;
  3861  01FB  0847               	movf	GPS_read_speed@m_char,w
  3862  01FC  00B5               	movwf	??_GPS_read_speed
  3863  01FD  0846               	movf	GPS_read_speed@i_buff,w
  3864  01FE  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3865  01FF  0086               	movwf	6
  3866  0200  0187               	clrf	7
  3867  0201  0835               	movf	??_GPS_read_speed,w
  3868  0202  0081               	movwf	1
  3869  0203  3001               	movlw	1
  3870  0204  00B5               	movwf	??_GPS_read_speed
  3871  0205  0835               	movf	??_GPS_read_speed,w
  3872  0206  07C6               	addwf	GPS_read_speed@i_buff,f
  3873                           
  3874                           ;GPS.c: 200: if (i_buff >= 6)
  3875  0207  3006               	movlw	6
  3876  0208  0246               	subwf	GPS_read_speed@i_buff,w
  3877  0209  1C03               	skipc
  3878  020A  29E9               	goto	l2930
  3879                           
  3880                           ;GPS.c: 201: return 0;
  3881  020B  3000               	movlw	0
  3882  020C  0008               	return
  3883  020D                     l2952:	
  3884                           
  3885                           ;GPS.c: 202: }
  3886                           ;GPS.c: 203: }
  3887                           ;GPS.c: 204: if ((buffer[0] != 'K')||(i_buff != 1))
  3888  020D  304B               	movlw	75
  3889  020E  063F               	xorwf	GPS_read_speed@buffer,w
  3890  020F  1903               	btfsc	3,2
  3891  0210  0346               	decf	GPS_read_speed@i_buff,w
  3892  0211  1903               	btfsc	3,2
  3893  0212  2A15               	goto	l2960
  3894                           
  3895                           ;GPS.c: 205: return 0;
  3896  0213  3000               	movlw	0
  3897  0214  0008               	return
  3898  0215                     l2960:	
  3899                           
  3900                           ;GPS.c: 206: i_buff = 0;
  3901  0215  01C6               	clrf	GPS_read_speed@i_buff
  3902                           
  3903                           ;GPS.c: 209: bool no_more_checksum = 0;
  3904  0216  01B8               	clrf	GPS_read_speed@no_more_checksum
  3905  0217                     l2962:	
  3906                           ;GPS.c: 210: while (1)
  3907                           
  3908                           
  3909                           ;GPS.c: 211: if (eusartRxCount!=0)
  3910  0217  0873               	movf	_eusartRxCount,w	;volatile
  3911  0218  1903               	btfsc	3,2
  3912  0219  2A17               	goto	l2962
  3913                           
  3914                           ;GPS.c: 212: {
  3915                           ;GPS.c: 213: m_char=EUSART_Read();
  3916  021A  3186  264F  3180   	fcall	_EUSART_Read
  3917  021D  0020               	movlb	0	; select bank0
  3918  021E  00B5               	movwf	??_GPS_read_speed
  3919  021F  0835               	movf	??_GPS_read_speed,w
  3920  0220  00C7               	movwf	GPS_read_speed@m_char
  3921                           
  3922                           ;GPS.c: 214: if (m_char == '*')
  3923  0221  302A               	movlw	42
  3924  0222  0647               	xorwf	GPS_read_speed@m_char,w
  3925  0223  1D03               	btfss	3,2
  3926  0224  2A27               	goto	l2970
  3927                           
  3928                           ;GPS.c: 215: no_more_checksum = 1;
  3929  0225  01B8               	clrf	GPS_read_speed@no_more_checksum
  3930  0226  0AB8               	incf	GPS_read_speed@no_more_checksum,f
  3931  0227                     l2970:	
  3932                           
  3933                           ;GPS.c: 216: if (!no_more_checksum)
  3934  0227  0838               	movf	GPS_read_speed@no_more_checksum,w
  3935  0228  1D03               	btfss	3,2
  3936  0229  2A2E               	goto	l488
  3937                           
  3938                           ;GPS.c: 217: checksum ^= m_char;
  3939  022A  0847               	movf	GPS_read_speed@m_char,w
  3940  022B  00B5               	movwf	??_GPS_read_speed
  3941  022C  0835               	movf	??_GPS_read_speed,w
  3942  022D  06BE               	xorwf	GPS_read_speed@checksum,f
  3943  022E                     l488:	
  3944                           
  3945                           ;GPS.c: 218: if (m_char == 0x0D)
  3946  022E  300D               	movlw	13
  3947  022F  0647               	xorwf	GPS_read_speed@m_char,w
  3948  0230  1903               	btfsc	3,2
  3949  0231  2A44               	goto	l2988
  3950                           
  3951                           ;GPS.c: 220: else
  3952                           ;GPS.c: 221: {
  3953                           ;GPS.c: 222: buffer[i_buff++] = m_char;
  3954                           
  3955                           ;GPS.c: 219: break;
  3956  0232  0847               	movf	GPS_read_speed@m_char,w
  3957  0233  00B5               	movwf	??_GPS_read_speed
  3958  0234  0846               	movf	GPS_read_speed@i_buff,w
  3959  0235  3E3F               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3960  0236  0086               	movwf	6
  3961  0237  0187               	clrf	7
  3962  0238  0835               	movf	??_GPS_read_speed,w
  3963  0239  0081               	movwf	1
  3964  023A  3001               	movlw	1
  3965  023B  00B5               	movwf	??_GPS_read_speed
  3966  023C  0835               	movf	??_GPS_read_speed,w
  3967  023D  07C6               	addwf	GPS_read_speed@i_buff,f
  3968                           
  3969                           ;GPS.c: 223: if (i_buff >= 6)
  3970  023E  3006               	movlw	6
  3971  023F  0246               	subwf	GPS_read_speed@i_buff,w
  3972  0240  1C03               	skipc
  3973  0241  2A17               	goto	l2962
  3974                           
  3975                           ;GPS.c: 224: return 0;
  3976  0242  3000               	movlw	0
  3977  0243  0008               	return
  3978  0244                     l2988:	
  3979                           
  3980                           ;GPS.c: 225: }
  3981                           ;GPS.c: 226: }
  3982                           ;GPS.c: 227: if ((buffer[1] != '*')||(i_buff != 4))
  3983  0244  302A               	movlw	42
  3984  0245  0640               	xorwf	GPS_read_speed@buffer+1,w
  3985  0246  1D03               	btfss	3,2
  3986  0247  2A4C               	goto	l2992
  3987  0248  3004               	movlw	4
  3988  0249  0646               	xorwf	GPS_read_speed@i_buff,w
  3989  024A  1903               	btfsc	3,2
  3990  024B  2A4E               	goto	l2996
  3991  024C                     l2992:	
  3992                           
  3993                           ;GPS.c: 228: return 0;
  3994  024C  3000               	movlw	0
  3995  024D  0008               	return
  3996  024E                     l2996:	
  3997                           
  3998                           ;GPS.c: 231: unsigned char checksum2 = 0;
  3999  024E  01BD               	clrf	GPS_read_speed@checksum2
  4000                           
  4001                           ;GPS.c: 232: if (buffer[2] > 0x39)
  4002  024F  303A               	movlw	58
  4003  0250  0241               	subwf	GPS_read_speed@buffer+2,w
  4004  0251  1C03               	skipc
  4005  0252  2A56               	goto	l3002
  4006                           
  4007                           ;GPS.c: 233: checksum2 = buffer[2] - 0x37;
  4008  0253  0841               	movf	GPS_read_speed@buffer+2,w
  4009  0254  3EC9               	addlw	201
  4010  0255  2A58               	goto	L1
  4011  0256                     l3002:	
  4012                           
  4013                           ;GPS.c: 234: else
  4014                           ;GPS.c: 235: checksum2 = buffer[2] - 0x30;
  4015  0256  0841               	movf	GPS_read_speed@buffer+2,w
  4016  0257  3ED0               	addlw	208
  4017  0258                     L1:	
  4018  0258  00B5               	movwf	??_GPS_read_speed
  4019  0259  0835               	movf	??_GPS_read_speed,w
  4020  025A  00BD               	movwf	GPS_read_speed@checksum2
  4021                           
  4022                           ;GPS.c: 236: checksum2 = checksum2 << 4;
  4023  025B  083D               	movf	GPS_read_speed@checksum2,w
  4024  025C  00B5               	movwf	??_GPS_read_speed
  4025  025D  3003               	movlw	3
  4026  025E                     u3565:	
  4027  025E  35B5               	lslf	??_GPS_read_speed,f
  4028  025F  3EFF               	addlw	-1
  4029  0260  1D03               	skipz
  4030  0261  2A5E               	goto	u3565
  4031  0262  3535               	lslf	??_GPS_read_speed,w
  4032  0263  00B6               	movwf	??_GPS_read_speed+1
  4033  0264  0836               	movf	??_GPS_read_speed+1,w
  4034  0265  00BD               	movwf	GPS_read_speed@checksum2
  4035                           
  4036                           ;GPS.c: 237: if (buffer[3] > 0x39)
  4037  0266  303A               	movlw	58
  4038  0267  0242               	subwf	GPS_read_speed@buffer+3,w
  4039  0268  1C03               	skipc
  4040  0269  2A6D               	goto	l3008
  4041                           
  4042                           ;GPS.c: 238: checksum2 += buffer[3] - 0x37;
  4043  026A  0842               	movf	GPS_read_speed@buffer+3,w
  4044  026B  3EC9               	addlw	201
  4045  026C  2A6F               	goto	L2
  4046  026D                     l3008:	
  4047                           
  4048                           ;GPS.c: 239: else
  4049                           ;GPS.c: 240: checksum2 += buffer[3] - 0x30;
  4050  026D  0842               	movf	GPS_read_speed@buffer+3,w
  4051  026E  3ED0               	addlw	208
  4052  026F                     L2:	
  4053  026F  00B5               	movwf	??_GPS_read_speed
  4054  0270  0835               	movf	??_GPS_read_speed,w
  4055  0271  07BD               	addwf	GPS_read_speed@checksum2,f
  4056                           
  4057                           ;GPS.c: 241: if (checksum == checksum2)
  4058  0272  083E               	movf	GPS_read_speed@checksum,w
  4059  0273  063D               	xorwf	GPS_read_speed@checksum2,w
  4060  0274  1D03               	skipz
  4061  0275  2A8B               	goto	l3020
  4062                           
  4063                           ;GPS.c: 242: {
  4064                           ;GPS.c: 243: speed = convert_to_fp(read_speed_int, read_speed_fra);
  4065  0276  083A               	movf	GPS_read_speed@read_speed_int+1,w
  4066  0277  00A1               	movwf	convert_to_fp@int_part+1
  4067  0278  0839               	movf	GPS_read_speed@read_speed_int,w
  4068  0279  00A0               	movwf	convert_to_fp@int_part
  4069  027A  083C               	movf	GPS_read_speed@read_speed_fra+1,w
  4070  027B  00A3               	movwf	convert_to_fp@fract_part+1
  4071  027C  083B               	movf	GPS_read_speed@read_speed_fra,w
  4072  027D  00A2               	movwf	convert_to_fp@fract_part
  4073  027E  3183  2386         	fcall	_convert_to_fp
  4074  0280  0020               	movlb	0	; select bank0
  4075  0281  0823               	movf	?_convert_to_fp+3,w
  4076  0282  00DE               	movwf	_speed+3
  4077  0283  0822               	movf	?_convert_to_fp+2,w
  4078  0284  00DD               	movwf	_speed+2
  4079  0285  0821               	movf	?_convert_to_fp+1,w
  4080  0286  00DC               	movwf	_speed+1
  4081  0287  0820               	movf	?_convert_to_fp,w
  4082  0288  00DB               	movwf	_speed
  4083                           
  4084                           ;GPS.c: 244: return 1;
  4085  0289  3001               	movlw	1
  4086                           
  4087                           ;GPS.c: 245: }
  4088  028A  0008               	return
  4089  028B                     l3020:	
  4090                           
  4091                           ;GPS.c: 246: else
  4092                           ;GPS.c: 247: return 0;
  4093  028B  3000               	movlw	0
  4094  028C  0008               	return
  4095  028D                     __end_of_GPS_read_speed:	
  4096                           
  4097                           	psect	text11
  4098  0386                     __ptext11:	
  4099 ;; *************** function _convert_to_fp *****************
  4100 ;; Defined at:
  4101 ;;		line 15 in file "fixed_point.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  int_part        2    0[BANK0 ] short 
  4104 ;;  fract_part      2    2[BANK0 ] short 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  i_bit           1   14[BANK0 ] unsigned char 
  4107 ;;  res             4   17[BANK0 ] long 
  4108 ;;  tmp_left        2   15[BANK0 ] unsigned short 
  4109 ;;  res_fract       2   12[BANK0 ] unsigned short 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  4    0[BANK0 ] long 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4119 ;;      Params:         0       4       0       0       0       0
  4120 ;;      Locals:         0       9       0       0       0       0
  4121 ;;      Temps:          0       8       0       0       0       0
  4122 ;;      Totals:         0      21       0       0       0       0
  4123 ;;Total ram usage:       21 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    6
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_GPS_read_speed
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _convert_to_fp
  4135  0386                     _convert_to_fp:	
  4136                           
  4137                           ;fixed_point.c: 21: t_fp res = 0;
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  4141  0386  3000               	movlw	0
  4142  0387  0020               	movlb	0	; select bank0
  4143  0388  00B4               	movwf	convert_to_fp@res+3
  4144  0389  3000               	movlw	0
  4145  038A  00B3               	movwf	convert_to_fp@res+2
  4146  038B  3000               	movlw	0
  4147  038C  00B2               	movwf	convert_to_fp@res+1
  4148  038D  3000               	movlw	0
  4149  038E  00B1               	movwf	convert_to_fp@res
  4150                           
  4151                           ;fixed_point.c: 23: res = int_part;
  4152  038F  0820               	movf	convert_to_fp@int_part,w
  4153  0390  00B1               	movwf	convert_to_fp@res
  4154  0391  0821               	movf	convert_to_fp@int_part+1,w
  4155  0392  00B2               	movwf	convert_to_fp@res+1
  4156  0393  0D89               	rlf	9,f
  4157  0394  3B89               	subwfb	9,f
  4158  0395  0989               	comf	9,f
  4159  0396  00B3               	movwf	convert_to_fp@res+2
  4160  0397  00B4               	movwf	convert_to_fp@res+3
  4161                           
  4162                           ;fixed_point.c: 24: res = res << 16;
  4163  0398  0831               	movf	convert_to_fp@res,w
  4164  0399  00A4               	movwf	??_convert_to_fp
  4165  039A  0832               	movf	convert_to_fp@res+1,w
  4166  039B  00A5               	movwf	??_convert_to_fp+1
  4167  039C  0833               	movf	convert_to_fp@res+2,w
  4168  039D  00A6               	movwf	??_convert_to_fp+2
  4169  039E  0834               	movf	convert_to_fp@res+3,w
  4170  039F  00A7               	movwf	??_convert_to_fp+3
  4171  03A0  3010               	movlw	16
  4172  03A1                     u2835:	
  4173  03A1  35A4               	lslf	??_convert_to_fp,f
  4174  03A2  0DA5               	rlf	??_convert_to_fp+1,f
  4175  03A3  0DA6               	rlf	??_convert_to_fp+2,f
  4176  03A4  0DA7               	rlf	??_convert_to_fp+3,f
  4177  03A5  0B89               	decfsz	9,f
  4178  03A6  2BA1               	goto	u2835
  4179  03A7  0827               	movf	??_convert_to_fp+3,w
  4180  03A8  00B4               	movwf	convert_to_fp@res+3
  4181  03A9  0826               	movf	??_convert_to_fp+2,w
  4182  03AA  00B3               	movwf	convert_to_fp@res+2
  4183  03AB  0825               	movf	??_convert_to_fp+1,w
  4184  03AC  00B2               	movwf	convert_to_fp@res+1
  4185  03AD  0824               	movf	??_convert_to_fp,w
  4186  03AE  00B1               	movwf	convert_to_fp@res
  4187                           
  4188                           ;fixed_point.c: 26: unsigned short tmp_left = fract_part;
  4189  03AF  0823               	movf	convert_to_fp@fract_part+1,w
  4190  03B0  00B0               	movwf	convert_to_fp@tmp_left+1
  4191  03B1  0822               	movf	convert_to_fp@fract_part,w
  4192  03B2  00AF               	movwf	convert_to_fp@tmp_left
  4193                           
  4194                           ;fixed_point.c: 27: unsigned short res_fract = 0;
  4195  03B3  01AC               	clrf	convert_to_fp@res_fract
  4196  03B4  01AD               	clrf	convert_to_fp@res_fract+1
  4197                           
  4198                           ;fixed_point.c: 28: const unsigned short one = 1;
  4199                           ;fixed_point.c: 29: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  4200  03B5  01AE               	clrf	convert_to_fp@i_bit
  4201  03B6  3010               	movlw	16
  4202  03B7  022E               	subwf	convert_to_fp@i_bit,w
  4203  03B8  1803               	btfsc	3,0
  4204  03B9  2BEC               	goto	l268
  4205  03BA                     l2620:	
  4206                           
  4207                           ;fixed_point.c: 30: {
  4208                           ;fixed_point.c: 31: tmp_left = tmp_left << 1;
  4209  03BA  352F               	lslf	convert_to_fp@tmp_left,w
  4210  03BB  00AF               	movwf	convert_to_fp@tmp_left
  4211  03BC  0D30               	rlf	convert_to_fp@tmp_left+1,w
  4212  03BD  00B0               	movwf	convert_to_fp@tmp_left+1
  4213                           
  4214                           ;fixed_point.c: 32: if (tmp_left >= 10000)
  4215  03BE  3027               	movlw	39
  4216  03BF  0230               	subwf	convert_to_fp@tmp_left+1,w
  4217  03C0  3010               	movlw	16
  4218  03C1  1903               	skipnz
  4219  03C2  022F               	subwf	convert_to_fp@tmp_left,w
  4220  03C3  1C03               	skipc
  4221  03C4  2BE4               	goto	l2626
  4222                           
  4223                           ;fixed_point.c: 33: {
  4224                           ;fixed_point.c: 34: res_fract = res_fract | one<<(16-i_bit-1);
  4225  03C5  3025               	movlw	low (convert_to_fp@one| (0+32768))
  4226  03C6  0084               	movwf	4
  4227  03C7  3085               	movlw	high (convert_to_fp@one| (0+32768))
  4228  03C8  0085               	movwf	5
  4229  03C9  3F00               	moviw [0]fsr0
  4230  03CA  00A4               	movwf	??_convert_to_fp
  4231  03CB  3F01               	moviw [1]fsr0
  4232  03CC  00A5               	movwf	??_convert_to_fp+1
  4233  03CD  082E               	movf	convert_to_fp@i_bit,w
  4234  03CE  3E01               	addlw	1
  4235  03CF  3AFF               	xorlw	255
  4236  03D0  3E01               	addlw	1
  4237  03D1  3E10               	addlw	16
  4238  03D2  0A89               	incf	9,f
  4239  03D3  2BD6               	goto	u2864
  4240  03D4                     u2865:	
  4241  03D4  35A4               	lslf	??_convert_to_fp,f
  4242  03D5  0DA5               	rlf	??_convert_to_fp+1,f
  4243  03D6                     u2864:	
  4244  03D6  0B89               	decfsz	9,f
  4245  03D7  2BD4               	goto	u2865
  4246  03D8  082C               	movf	convert_to_fp@res_fract,w
  4247  03D9  0424               	iorwf	??_convert_to_fp,w
  4248  03DA  00AC               	movwf	convert_to_fp@res_fract
  4249  03DB  082D               	movf	convert_to_fp@res_fract+1,w
  4250  03DC  0425               	iorwf	??_convert_to_fp+1,w
  4251  03DD  00AD               	movwf	convert_to_fp@res_fract+1
  4252                           
  4253                           ;fixed_point.c: 35: tmp_left = tmp_left - 10000;
  4254  03DE  082F               	movf	convert_to_fp@tmp_left,w
  4255  03DF  3EF0               	addlw	240
  4256  03E0  00AF               	movwf	convert_to_fp@tmp_left
  4257  03E1  30D8               	movlw	216
  4258  03E2  3D30               	addwfc	convert_to_fp@tmp_left+1,w
  4259  03E3  00B0               	movwf	convert_to_fp@tmp_left+1
  4260  03E4                     l2626:	
  4261  03E4  3001               	movlw	1
  4262  03E5  00A4               	movwf	??_convert_to_fp
  4263  03E6  0824               	movf	??_convert_to_fp,w
  4264  03E7  07AE               	addwf	convert_to_fp@i_bit,f
  4265  03E8  3010               	movlw	16
  4266  03E9  022E               	subwf	convert_to_fp@i_bit,w
  4267  03EA  1C03               	skipc
  4268  03EB  2BBA               	goto	l2620
  4269  03EC                     l268:	
  4270                           
  4271                           ;fixed_point.c: 36: }
  4272                           ;fixed_point.c: 37: }
  4273                           ;fixed_point.c: 39: if (res < 0)
  4274  03EC  1FB4               	btfss	convert_to_fp@res+3,7
  4275  03ED  2C08               	goto	l2632
  4276                           
  4277                           ;fixed_point.c: 40: res = res - res_fract;
  4278  03EE  0831               	movf	convert_to_fp@res,w
  4279  03EF  00A4               	movwf	??_convert_to_fp
  4280  03F0  0832               	movf	convert_to_fp@res+1,w
  4281  03F1  00A5               	movwf	??_convert_to_fp+1
  4282  03F2  0833               	movf	convert_to_fp@res+2,w
  4283  03F3  00A6               	movwf	??_convert_to_fp+2
  4284  03F4  0834               	movf	convert_to_fp@res+3,w
  4285  03F5  00A7               	movwf	??_convert_to_fp+3
  4286  03F6  082C               	movf	convert_to_fp@res_fract,w
  4287  03F7  00A8               	movwf	??_convert_to_fp+4
  4288  03F8  082D               	movf	convert_to_fp@res_fract+1,w
  4289  03F9  00A9               	movwf	??_convert_to_fp+5
  4290  03FA  01AA               	clrf	??_convert_to_fp+6
  4291  03FB  01AB               	clrf	??_convert_to_fp+7
  4292  03FC  09A8               	comf	??_convert_to_fp+4,f
  4293  03FD  09A9               	comf	??_convert_to_fp+5,f
  4294  03FE  09AA               	comf	??_convert_to_fp+6,f
  4295  03FF  09AB               	comf	??_convert_to_fp+7,f
  4296  0400  0AA8               	incf	??_convert_to_fp+4,f
  4297  0401  1903               	skipnz
  4298  0402  0AA9               	incf	??_convert_to_fp+5,f
  4299  0403  1903               	skipnz
  4300  0404  0AAA               	incf	??_convert_to_fp+6,f
  4301  0405  1903               	skipnz
  4302  0406  0AAB               	incf	??_convert_to_fp+7,f
  4303  0407  2C16               	goto	L3
  4304  0408                     l2632:	
  4305                           
  4306                           ;fixed_point.c: 41: else
  4307                           ;fixed_point.c: 42: res = res + res_fract;
  4308  0408  0831               	movf	convert_to_fp@res,w
  4309  0409  00A4               	movwf	??_convert_to_fp
  4310  040A  0832               	movf	convert_to_fp@res+1,w
  4311  040B  00A5               	movwf	??_convert_to_fp+1
  4312  040C  0833               	movf	convert_to_fp@res+2,w
  4313  040D  00A6               	movwf	??_convert_to_fp+2
  4314  040E  0834               	movf	convert_to_fp@res+3,w
  4315  040F  00A7               	movwf	??_convert_to_fp+3
  4316  0410  082C               	movf	convert_to_fp@res_fract,w
  4317  0411  00A8               	movwf	??_convert_to_fp+4
  4318  0412  082D               	movf	convert_to_fp@res_fract+1,w
  4319  0413  00A9               	movwf	??_convert_to_fp+5
  4320  0414  01AA               	clrf	??_convert_to_fp+6
  4321  0415  01AB               	clrf	??_convert_to_fp+7
  4322  0416                     L3:	
  4323  0416  0828               	movf	??_convert_to_fp+4,w
  4324  0417  07A4               	addwf	??_convert_to_fp,f
  4325  0418  0829               	movf	??_convert_to_fp+5,w
  4326  0419  3DA5               	addwfc	??_convert_to_fp+1,f
  4327  041A  082A               	movf	??_convert_to_fp+6,w
  4328  041B  3DA6               	addwfc	??_convert_to_fp+2,f
  4329  041C  082B               	movf	??_convert_to_fp+7,w
  4330  041D  3DA7               	addwfc	??_convert_to_fp+3,f
  4331  041E  0827               	movf	??_convert_to_fp+3,w
  4332  041F  00B4               	movwf	convert_to_fp@res+3
  4333  0420  0826               	movf	??_convert_to_fp+2,w
  4334  0421  00B3               	movwf	convert_to_fp@res+2
  4335  0422  0825               	movf	??_convert_to_fp+1,w
  4336  0423  00B2               	movwf	convert_to_fp@res+1
  4337  0424  0824               	movf	??_convert_to_fp,w
  4338  0425  00B1               	movwf	convert_to_fp@res
  4339                           
  4340                           ;fixed_point.c: 43: return res;
  4341  0426  0834               	movf	convert_to_fp@res+3,w
  4342  0427  00A3               	movwf	?_convert_to_fp+3
  4343  0428  0833               	movf	convert_to_fp@res+2,w
  4344  0429  00A2               	movwf	?_convert_to_fp+2
  4345  042A  0832               	movf	convert_to_fp@res+1,w
  4346  042B  00A1               	movwf	?_convert_to_fp+1
  4347  042C  0831               	movf	convert_to_fp@res,w
  4348  042D  00A0               	movwf	?_convert_to_fp
  4349  042E  0008               	return
  4350  042F                     __end_of_convert_to_fp:	
  4351                           
  4352                           	psect	text12
  4353  06AA                     __ptext12:	
  4354 ;; *************** function ___wmul *****************
  4355 ;; Defined at:
  4356 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4359 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;  product         2    4[BANK0 ] unsigned int 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  2    0[BANK0 ] unsigned int 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4371 ;;      Params:         0       4       0       0       0       0
  4372 ;;      Locals:         0       2       0       0       0       0
  4373 ;;      Temps:          0       0       0       0       0       0
  4374 ;;      Totals:         0       6       0       0       0       0
  4375 ;;Total ram usage:        6 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    6
  4378 ;; This function calls:
  4379 ;;		Nothing
  4380 ;; This function is called by:
  4381 ;;		_GPS_read_speed
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function ___wmul
  4387  06AA                     ___wmul:	
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4391  06AA  0020               	movlb	0	; select bank0
  4392  06AB  01A4               	clrf	___wmul@product
  4393  06AC  01A5               	clrf	___wmul@product+1
  4394  06AD                     l2644:	
  4395  06AD  1C20               	btfss	___wmul@multiplier,0
  4396  06AE  2EB3               	goto	l596
  4397  06AF  0822               	movf	___wmul@multiplicand,w
  4398  06B0  07A4               	addwf	___wmul@product,f
  4399  06B1  0823               	movf	___wmul@multiplicand+1,w
  4400  06B2  3DA5               	addwfc	___wmul@product+1,f
  4401  06B3                     l596:	
  4402  06B3  3001               	movlw	1
  4403  06B4                     u2915:	
  4404  06B4  35A2               	lslf	___wmul@multiplicand,f
  4405  06B5  0DA3               	rlf	___wmul@multiplicand+1,f
  4406  06B6  0B89               	decfsz	9,f
  4407  06B7  2EB4               	goto	u2915
  4408  06B8  3001               	movlw	1
  4409  06B9                     u2925:	
  4410  06B9  36A1               	lsrf	___wmul@multiplier+1,f
  4411  06BA  0CA0               	rrf	___wmul@multiplier,f
  4412  06BB  0B89               	decfsz	9,f
  4413  06BC  2EB9               	goto	u2925
  4414  06BD  0820               	movf	___wmul@multiplier,w
  4415  06BE  0421               	iorwf	___wmul@multiplier+1,w
  4416  06BF  1D03               	btfss	3,2
  4417  06C0  2EAD               	goto	l2644
  4418  06C1  0825               	movf	___wmul@product+1,w
  4419  06C2  00A1               	movwf	?___wmul+1
  4420  06C3  0824               	movf	___wmul@product,w
  4421  06C4  00A0               	movwf	?___wmul
  4422  06C5  0008               	return
  4423  06C6                     __end_of___wmul:	
  4424                           
  4425                           	psect	text13
  4426  064F                     __ptext13:	
  4427 ;; *************** function _EUSART_Read *****************
  4428 ;; Defined at:
  4429 ;;		line 112 in file "mcc_generated_files/eusart.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  readValue       1    1[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      unsigned char 
  4436 ;; Registers used:
  4437 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4443 ;;      Params:         0       0       0       0       0       0
  4444 ;;      Locals:         0       1       0       0       0       0
  4445 ;;      Temps:          0       1       0       0       0       0
  4446 ;;      Totals:         0       2       0       0       0       0
  4447 ;;Total ram usage:        2 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    6
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_GPS_read_speed
  4454 ;;		_getch
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           
  4459                           ;psect for function _EUSART_Read
  4460  064F                     _EUSART_Read:	
  4461                           
  4462                           ;eusart.c: 114: uint8_t readValue = 0;
  4463                           
  4464                           ;incstack = 0
  4465                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4466  064F  0020               	movlb	0	; select bank0
  4467  0650  01A1               	clrf	EUSART_Read@readValue
  4468                           
  4469                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  4470  0651  0023               	movlb	3	; select bank3
  4471  0652  169D               	bsf	29,5	;volatile
  4472  0653                     l2588:	
  4473                           ;eusart.c: 120: {
  4474                           
  4475                           ;eusart.c: 119: while(0 == eusartRxCount)
  4476                           
  4477  0653  0873               	movf	_eusartRxCount,w	;volatile
  4478  0654  1903               	btfsc	3,2
  4479  0655  2E53               	goto	l2588
  4480                           
  4481                           ;eusart.c: 121: }
  4482                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  4483  0656  0021               	movlb	1	; select bank1
  4484  0657  1291               	bcf	17,5	;volatile
  4485                           
  4486                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  4487  0658  0020               	movlb	0	; select bank0
  4488  0659  086A               	movf	_eusartRxTail,w
  4489  065A  3E4B               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4490  065B  0086               	movwf	6
  4491  065C  0187               	clrf	7
  4492  065D  0801               	movf	1,w
  4493  065E  00A0               	movwf	??_EUSART_Read
  4494  065F  0820               	movf	??_EUSART_Read,w
  4495  0660  00A1               	movwf	EUSART_Read@readValue
  4496  0661  3001               	movlw	1
  4497  0662  00A0               	movwf	??_EUSART_Read
  4498  0663  0820               	movf	??_EUSART_Read,w
  4499  0664  07EA               	addwf	_eusartRxTail,f
  4500                           
  4501                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4502  0665  3008               	movlw	8
  4503  0666  026A               	subwf	_eusartRxTail,w
  4504  0667  1803               	btfsc	3,0
  4505                           
  4506                           ;eusart.c: 127: {
  4507                           ;eusart.c: 128: eusartRxTail = 0;
  4508  0668  01EA               	clrf	_eusartRxTail
  4509                           
  4510                           ;eusart.c: 129: }
  4511                           ;eusart.c: 130: eusartRxCount--;
  4512  0669  3001               	movlw	1
  4513  066A  02F3               	subwf	_eusartRxCount,f	;volatile
  4514                           
  4515                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  4516  066B  0021               	movlb	1	; select bank1
  4517  066C  1691               	bsf	17,5	;volatile
  4518                           
  4519                           ;eusart.c: 133: return readValue;
  4520  066D  0020               	movlb	0	; select bank0
  4521  066E  0821               	movf	EUSART_Read@readValue,w
  4522  066F  0008               	return
  4523  0670                     __end_of_EUSART_Read:	
  4524                           
  4525                           	psect	text14
  4526  056D                     __ptext14:	
  4527 ;; *************** function _GPS_Initialize *****************
  4528 ;; Defined at:
  4529 ;;		line 12 in file "GPS.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;		None
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  tmp             1   13[BANK0 ] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      void 
  4536 ;; Registers used:
  4537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4543 ;;      Params:         0       0       0       0       0       0
  4544 ;;      Locals:         0       1       0       0       0       0
  4545 ;;      Temps:          0       3       0       0       0       0
  4546 ;;      Totals:         0       4       0       0       0       0
  4547 ;;Total ram usage:        4 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    9
  4550 ;; This function calls:
  4551 ;;		_printf
  4552 ;; This function is called by:
  4553 ;;		_main
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _GPS_Initialize
  4559  056D                     _GPS_Initialize:	
  4560                           
  4561                           ;GPS.c: 14: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(3200
      +                          0000/4000.0)));};
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4565  056D  0020               	movlb	0	; select bank0
  4566  056E  01AD               	clrf	GPS_Initialize@tmp
  4567  056F  300A               	movlw	10
  4568  0570  022D               	subwf	GPS_Initialize@tmp,w
  4569  0571  1803               	btfsc	3,0
  4570  0572  2D88               	goto	l2696
  4571  0573                     l2690:	
  4572  0573  3005               	movlw	5
  4573  0574  00AC               	movwf	??_GPS_Initialize+2
  4574  0575  300F               	movlw	15
  4575  0576  00AB               	movwf	??_GPS_Initialize+1
  4576  0577  30F4               	movlw	244
  4577  0578  00AA               	movwf	??_GPS_Initialize
  4578  0579                     u3867:	
  4579  0579  0BAA               	decfsz	??_GPS_Initialize,f
  4580  057A  2D79               	goto	u3867
  4581  057B  0BAB               	decfsz	??_GPS_Initialize+1,f
  4582  057C  2D79               	goto	u3867
  4583  057D  0BAC               	decfsz	??_GPS_Initialize+2,f
  4584  057E  2D79               	goto	u3867
  4585  057F  3001               	movlw	1
  4586  0580  0020               	movlb	0	; select bank0
  4587  0581  00AA               	movwf	??_GPS_Initialize
  4588  0582  082A               	movf	??_GPS_Initialize,w
  4589  0583  07AD               	addwf	GPS_Initialize@tmp,f
  4590  0584  300A               	movlw	10
  4591  0585  022D               	subwf	GPS_Initialize@tmp,w
  4592  0586  1C03               	skipc
  4593  0587  2D73               	goto	l2690
  4594  0588                     l2696:	
  4595                           
  4596                           ;GPS.c: 16: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  4597  0588  3027               	movlw	low (STR_1| (0+32768))
  4598  0589  00A3               	movwf	printf@f
  4599  058A  3085               	movlw	high (STR_1| (0+32768))
  4600  058B  00A4               	movwf	printf@f+1
  4601  058C  3186  2670  3185   	fcall	_printf
  4602                           
  4603                           ;GPS.c: 17: _delay((unsigned long)((100)*(32000000/4000.0)));
  4604  058F  3005               	movlw	5
  4605  0590  0020               	movlb	0	; select bank0
  4606  0591  00AC               	movwf	??_GPS_Initialize+2
  4607  0592  300F               	movlw	15
  4608  0593  00AB               	movwf	??_GPS_Initialize+1
  4609  0594  30F4               	movlw	244
  4610  0595  00AA               	movwf	??_GPS_Initialize
  4611  0596                     u3877:	
  4612  0596  0BAA               	decfsz	??_GPS_Initialize,f
  4613  0597  2D96               	goto	u3877
  4614  0598  0BAB               	decfsz	??_GPS_Initialize+1,f
  4615  0599  2D96               	goto	u3877
  4616  059A  0BAC               	decfsz	??_GPS_Initialize+2,f
  4617  059B  2D96               	goto	u3877
  4618                           
  4619                           ;GPS.c: 19: printf("$PMTK220,100*2F\r\n");
  4620  059C  305B               	movlw	low (STR_2| (0+32768))
  4621  059D  0020               	movlb	0	; select bank0
  4622  059E  00A3               	movwf	printf@f
  4623  059F  3085               	movlw	high (STR_2| (0+32768))
  4624  05A0  00A4               	movwf	printf@f+1
  4625  05A1  3186  2670  3185   	fcall	_printf
  4626                           
  4627                           ;GPS.c: 20: _delay((unsigned long)((100)*(32000000/4000.0)));
  4628  05A4  3005               	movlw	5
  4629  05A5  0020               	movlb	0	; select bank0
  4630  05A6  00AC               	movwf	??_GPS_Initialize+2
  4631  05A7  300F               	movlw	15
  4632  05A8  00AB               	movwf	??_GPS_Initialize+1
  4633  05A9  30F4               	movlw	244
  4634  05AA  00AA               	movwf	??_GPS_Initialize
  4635  05AB                     u3887:	
  4636  05AB  0BAA               	decfsz	??_GPS_Initialize,f
  4637  05AC  2DAB               	goto	u3887
  4638  05AD  0BAB               	decfsz	??_GPS_Initialize+1,f
  4639  05AE  2DAB               	goto	u3887
  4640  05AF  0BAC               	decfsz	??_GPS_Initialize+2,f
  4641  05B0  2DAB               	goto	u3887
  4642  05B1  0008               	return
  4643  05B2                     __end_of_GPS_Initialize:	
  4644                           
  4645                           	psect	text15
  4646  0670                     __ptext15:	
  4647 ;; *************** function _printf *****************
  4648 ;; Defined at:
  4649 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  4652 ;;		 -> STR_2(18), STR_1(52), 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  tmpval          4    0        struct .
  4655 ;;  cp              2    0        PTR const unsigned char 
  4656 ;;  len             2    0        unsigned int 
  4657 ;;  val             2    0        unsigned int 
  4658 ;;  c               1    9[BANK0 ] char 
  4659 ;;  ap              1    8[BANK0 ] PTR void [1]
  4660 ;;		 -> ?_printf(2), 
  4661 ;;  flag            1    0        unsigned char 
  4662 ;;  prec            1    0        char 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  2    3[BANK0 ] int 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4672 ;;      Params:         0       2       0       0       0       0
  4673 ;;      Locals:         0       2       0       0       0       0
  4674 ;;      Temps:          0       3       0       0       0       0
  4675 ;;      Totals:         0       7       0       0       0       0
  4676 ;;Total ram usage:        7 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    8
  4679 ;; This function calls:
  4680 ;;		_putch
  4681 ;; This function is called by:
  4682 ;;		_GPS_Initialize
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _printf
  4688  0670                     _printf:	
  4689                           
  4690                           ;doprnt.c: 466: va_list ap;
  4691                           ;doprnt.c: 499: signed char c;
  4692                           ;doprnt.c: 506: signed char prec;
  4693                           ;doprnt.c: 508: unsigned char flag;
  4694                           ;doprnt.c: 523: union {
  4695                           ;doprnt.c: 524: unsigned long vd;
  4696                           ;doprnt.c: 525: double integ;
  4697                           ;doprnt.c: 526: } tmpval;
  4698                           ;doprnt.c: 528: unsigned int val;
  4699                           ;doprnt.c: 529: unsigned len;
  4700                           ;doprnt.c: 530: const char * cp;
  4701                           ;doprnt.c: 533: *ap = __va_start();
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4705  0670  3025               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4706  0671  0020               	movlb	0	; select bank0
  4707  0672  00A5               	movwf	??_printf
  4708  0673  0825               	movf	??_printf,w
  4709  0674  00A8               	movwf	printf@ap
  4710  0675                     l2640:	
  4711                           ;doprnt.c: 543: }
  4712                           ;doprnt.c: 1422: {
  4713                           
  4714                           ;doprnt.c: 542: continue;
  4715                           
  4716                           ;doprnt.c: 536: while(c = *f++) {
  4717                           
  4718  0675  0020               	movlb	0	; select bank0
  4719  0676  0824               	movf	printf@f+1,w
  4720  0677  00A6               	movwf	??_printf+1
  4721  0678  0823               	movf	printf@f,w
  4722  0679  00A5               	movwf	??_printf
  4723  067A  0AA3               	incf	printf@f,f
  4724  067B  1903               	skipnz
  4725  067C  0AA4               	incf	printf@f+1,f
  4726  067D  0825               	movf	??_printf,w
  4727  067E  0084               	movwf	4
  4728  067F  0826               	movf	??_printf+1,w
  4729  0680  0085               	movwf	5
  4730  0681  0800               	movf	0,w	;code access
  4731  0682  00A7               	movwf	??_printf+2
  4732  0683  0827               	movf	??_printf+2,w
  4733  0684  00A9               	movwf	printf@c
  4734  0685  0829               	movf	printf@c,w
  4735  0686  1903               	btfsc	3,2
  4736  0687  0008               	return
  4737                           
  4738                           ;doprnt.c: 540: {
  4739                           ;doprnt.c: 541: (putch(c) );
  4740  0688  0829               	movf	printf@c,w
  4741  0689  3187  2774  3186   	fcall	_putch
  4742  068C  2E75               	goto	l2640
  4743  068D                     __end_of_printf:	
  4744                           ;doprnt.c: 1469: }
  4745                           ;doprnt.c: 1533: }
  4746                           ;doprnt.c: 1540: return 0;
  4747                           ;	Return value of _printf is never used
  4748                           
  4749                           
  4750                           	psect	text16
  4751  0774                     __ptext16:	
  4752 ;; *************** function _putch *****************
  4753 ;; Defined at:
  4754 ;;		line 164 in file "mcc_generated_files/eusart.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  txData          1    wreg     unsigned char 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  txData          1    2[BANK0 ] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4768 ;;      Params:         0       0       0       0       0       0
  4769 ;;      Locals:         0       1       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0
  4771 ;;      Totals:         0       1       0       0       0       0
  4772 ;;Total ram usage:        1 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    7
  4775 ;; This function calls:
  4776 ;;		_EUSART_Write
  4777 ;; This function is called by:
  4778 ;;		_printf
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _putch
  4784  0774                     _putch:	
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4788                           ;putch@txData stored from wreg
  4789  0774  0020               	movlb	0	; select bank0
  4790  0775  00A2               	movwf	putch@txData
  4791                           
  4792                           ;eusart.c: 166: EUSART_Write(txData);
  4793  0776  0822               	movf	putch@txData,w
  4794  0777  3186  260A         	fcall	_EUSART_Write
  4795  0779  0008               	return
  4796  077A                     __end_of_putch:	
  4797                           
  4798                           	psect	text17
  4799  060A                     __ptext17:	
  4800 ;; *************** function _EUSART_Write *****************
  4801 ;; Defined at:
  4802 ;;		line 136 in file "mcc_generated_files/eusart.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  txData          1    wreg     unsigned char 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  txData          1    1[BANK0 ] unsigned char 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4816 ;;      Params:         0       0       0       0       0       0
  4817 ;;      Locals:         0       1       0       0       0       0
  4818 ;;      Temps:          0       1       0       0       0       0
  4819 ;;      Totals:         0       2       0       0       0       0
  4820 ;;Total ram usage:        2 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    6
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_putch
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           
  4831                           ;psect for function _EUSART_Write
  4832  060A                     _EUSART_Write:	
  4833                           
  4834                           ;incstack = 0
  4835                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4836                           ;EUSART_Write@txData stored from wreg
  4837  060A  0020               	movlb	0	; select bank0
  4838  060B  00A1               	movwf	EUSART_Write@txData
  4839  060C                     l2514:	
  4840                           ;eusart.c: 139: {
  4841                           
  4842                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  4843                           
  4844  060C  086B               	movf	_eusartTxBufferRemaining,w	;volatile
  4845  060D  1903               	btfsc	3,2
  4846  060E  2E0C               	goto	l2514
  4847                           
  4848                           ;eusart.c: 140: }
  4849                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  4850  060F  0021               	movlb	1	; select bank1
  4851  0610  1A11               	btfsc	17,4	;volatile
  4852  0611  2E17               	goto	l167
  4853                           
  4854                           ;eusart.c: 143: {
  4855                           ;eusart.c: 144: TXREG = txData;
  4856  0612  0020               	movlb	0	; select bank0
  4857  0613  0821               	movf	EUSART_Write@txData,w
  4858  0614  0023               	movlb	3	; select bank3
  4859  0615  009A               	movwf	26	;volatile
  4860                           
  4861                           ;eusart.c: 145: }
  4862  0616  2E2B               	goto	l2528
  4863  0617                     l167:	
  4864                           
  4865                           ;eusart.c: 146: else
  4866                           ;eusart.c: 147: {
  4867                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  4868  0617  1211               	bcf	17,4	;volatile
  4869                           
  4870                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  4871  0618  0020               	movlb	0	; select bank0
  4872  0619  0821               	movf	EUSART_Write@txData,w
  4873  061A  00A0               	movwf	??_EUSART_Write
  4874  061B  086C               	movf	_eusartTxHead,w
  4875  061C  3E53               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4876  061D  0086               	movwf	6
  4877  061E  0187               	clrf	7
  4878  061F  0820               	movf	??_EUSART_Write,w
  4879  0620  0081               	movwf	1
  4880  0621  3001               	movlw	1
  4881  0622  00A0               	movwf	??_EUSART_Write
  4882  0623  0820               	movf	??_EUSART_Write,w
  4883  0624  07EC               	addwf	_eusartTxHead,f
  4884                           
  4885                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4886  0625  3008               	movlw	8
  4887  0626  026C               	subwf	_eusartTxHead,w
  4888  0627  1803               	btfsc	3,0
  4889                           
  4890                           ;eusart.c: 151: {
  4891                           ;eusart.c: 152: eusartTxHead = 0;
  4892  0628  01EC               	clrf	_eusartTxHead
  4893                           
  4894                           ;eusart.c: 153: }
  4895                           ;eusart.c: 154: eusartTxBufferRemaining--;
  4896  0629  3001               	movlw	1
  4897  062A  02EB               	subwf	_eusartTxBufferRemaining,f	;volatile
  4898  062B                     l2528:	
  4899                           
  4900                           ;eusart.c: 155: }
  4901                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  4902  062B  0021               	movlb	1	; select bank1
  4903  062C  1611               	bsf	17,4	;volatile
  4904  062D  0008               	return
  4905  062E                     __end_of_EUSART_Write:	
  4906                           
  4907                           	psect	intentry
  4908  0004                     __pintentry:	
  4909 ;; *************** function _INTERRUPT_InterruptManager *****************
  4910 ;; Defined at:
  4911 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4925 ;;      Params:         0       0       0       0       0       0
  4926 ;;      Locals:         0       0       0       0       0       0
  4927 ;;      Temps:          1       0       0       0       0       0
  4928 ;;      Totals:         1       0       0       0       0       0
  4929 ;;Total ram usage:        1 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    5
  4932 ;; This function calls:
  4933 ;;		_EUSART_Receive_ISR
  4934 ;;		_EUSART_Transmit_ISR
  4935 ;;		_TMR0_ISR
  4936 ;; This function is called by:
  4937 ;;		Interrupt level 1
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941  0004                     _INTERRUPT_InterruptManager:	
  4942                           
  4943                           ;incstack = 0
  4944  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4945                           
  4946                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4947  0005  3180               	pagesel	$
  4948  0006  0020               	movlb	0	; select bank0
  4949  0007  087F               	movf	127,w
  4950  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  4951                           
  4952                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4953  0009  1A8B               	btfsc	11,5	;volatile
  4954  000A  1D0B               	btfss	11,2	;volatile
  4955  000B  280F               	goto	i1l2398
  4956                           
  4957                           ;interrupt_manager.c: 55: {
  4958                           ;interrupt_manager.c: 56: TMR0_ISR();
  4959  000C  3187  2728  3180   	fcall	_TMR0_ISR
  4960  000F                     i1l2398:	
  4961                           
  4962                           ;interrupt_manager.c: 57: }
  4963                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4964  000F  1F0B               	btfss	11,6	;volatile
  4965  0010  281A               	goto	i1l2406
  4966  0011  0021               	movlb	1	; select bank1
  4967  0012  1E11               	btfss	17,4	;volatile
  4968  0013  281A               	goto	i1l2406
  4969  0014  0020               	movlb	0	; select bank0
  4970  0015  1E11               	btfss	17,4	;volatile
  4971  0016  281A               	goto	i1l2406
  4972                           
  4973                           ;interrupt_manager.c: 59: {
  4974                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  4975  0017  3186  268D  3180   	fcall	_EUSART_Transmit_ISR
  4976  001A                     i1l2406:	
  4977                           
  4978                           ;interrupt_manager.c: 61: }
  4979                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  4980  001A  1F0B               	btfss	11,6	;volatile
  4981  001B  2824               	goto	i1l73
  4982  001C  0021               	movlb	1	; select bank1
  4983  001D  1E91               	btfss	17,5	;volatile
  4984  001E  2824               	goto	i1l73
  4985  001F  0020               	movlb	0	; select bank0
  4986  0020  1E91               	btfss	17,5	;volatile
  4987  0021  2824               	goto	i1l73
  4988                           
  4989                           ;interrupt_manager.c: 63: {
  4990                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  4991  0022  3186  26E1         	fcall	_EUSART_Receive_ISR
  4992  0024                     i1l73:	
  4993                           ;interrupt_manager.c: 66: else
  4994                           ;interrupt_manager.c: 67: {
  4995                           
  4996                           ;interrupt_manager.c: 65: }
  4997                           
  4998  0024  0879               	movf	??_INTERRUPT_InterruptManager,w
  4999  0025  0020               	movlb	0	; select bank0
  5000  0026  00FF               	movwf	127
  5001  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5002  0028  0009               	retfie
  5003  0029                     __end_of_INTERRUPT_InterruptManager:	
  5004                           
  5005                           	psect	text19
  5006  0728                     __ptext19:	
  5007 ;; *************** function _TMR0_ISR *****************
  5008 ;; Defined at:
  5009 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5023 ;;      Params:         0       0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0
  5026 ;;      Totals:         0       0       0       0       0       0
  5027 ;;Total ram usage:        0 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    4
  5030 ;; This function calls:
  5031 ;;		_TMR0_CallBack
  5032 ;; This function is called by:
  5033 ;;		_INTERRUPT_InterruptManager
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           
  5038                           ;psect for function _TMR0_ISR
  5039  0728                     _TMR0_ISR:	
  5040                           
  5041                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  5042                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5046  0728  110B               	bcf	11,2	;volatile
  5047                           
  5048                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  5049  0729  0874               	movf	_timer0ReloadVal,w	;volatile
  5050  072A  0020               	movlb	0	; select bank0
  5051  072B  0095               	movwf	21	;volatile
  5052                           
  5053                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  5054  072C  3001               	movlw	1
  5055  072D  07DF               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  5056  072E  3000               	movlw	0
  5057  072F  3DE0               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  5058  0730  3000               	movlw	0
  5059  0731  0260               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  5060  0732  3002               	movlw	2
  5061  0733  1903               	skipnz
  5062  0734  025F               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  5063  0735  1C03               	skipc
  5064  0736  0008               	return
  5065                           
  5066                           ;tmr0.c: 119: {
  5067                           ;tmr0.c: 121: TMR0_CallBack();
  5068  0737  3187  2755         	fcall	_TMR0_CallBack
  5069                           
  5070                           ;tmr0.c: 124: CountCallBack = 0;
  5071  0739  0020               	movlb	0	; select bank0
  5072  073A  01DF               	clrf	TMR0_ISR@CountCallBack	;volatile
  5073  073B  01E0               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  5074  073C  0008               	return
  5075  073D                     __end_of_TMR0_ISR:	
  5076                           
  5077                           	psect	text20
  5078  0755                     __ptext20:	
  5079 ;; *************** function _TMR0_CallBack *****************
  5080 ;; Defined at:
  5081 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, status,2, status,0, pclath, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5095 ;;      Params:         0       0       0       0       0       0
  5096 ;;      Locals:         0       0       0       0       0       0
  5097 ;;      Temps:          0       0       0       0       0       0
  5098 ;;      Totals:         0       0       0       0       0       0
  5099 ;;Total ram usage:        0 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    3
  5102 ;; This function calls:
  5103 ;;		Absolute function
  5104 ;;		_TMR0_DefaultInterruptHandler
  5105 ;;		_my10msTimerISR
  5106 ;; This function is called by:
  5107 ;;		_TMR0_ISR
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           
  5112                           ;psect for function _TMR0_CallBack
  5113  0755                     _TMR0_CallBack:	
  5114                           
  5115                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5119  0755  0020               	movlb	0	; select bank0
  5120  0756  0861               	movf	_TMR0_InterruptHandler,w
  5121  0757  0462               	iorwf	_TMR0_InterruptHandler+1,w
  5122  0758  1903               	btfsc	3,2
  5123  0759  0008               	return
  5124                           
  5125                           ;tmr0.c: 135: {
  5126                           ;tmr0.c: 136: TMR0_InterruptHandler();
  5127  075A  0862               	movf	_TMR0_InterruptHandler+1,w
  5128  075B  008A               	movwf	10
  5129  075C  0861               	movf	_TMR0_InterruptHandler,w
  5130  075D  000A               	callw
  5131  075E  3187               	pagesel	$
  5132  075F  0008               	return
  5133  0760                     __end_of_TMR0_CallBack:	
  5134                           
  5135                           	psect	text21
  5136  0781                     __ptext21:	
  5137 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5138 ;; Defined at:
  5139 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;		None
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;		None
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  1    wreg      void 
  5146 ;; Registers used:
  5147 ;;		None
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5153 ;;      Params:         0       0       0       0       0       0
  5154 ;;      Locals:         0       0       0       0       0       0
  5155 ;;      Temps:          0       0       0       0       0       0
  5156 ;;      Totals:         0       0       0       0       0       0
  5157 ;;Total ram usage:        0 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_TMR0_Initialize
  5163 ;;		_TMR0_CallBack
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           
  5168                           ;psect for function _TMR0_DefaultInterruptHandler
  5169  0781                     _TMR0_DefaultInterruptHandler:	
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5173  0781  0008               	return
  5174  0782                     __end_of_TMR0_DefaultInterruptHandler:	
  5175                           
  5176                           	psect	text22
  5177  077A                     __ptext22:	
  5178 ;; *************** function _my10msTimerISR *****************
  5179 ;; Defined at:
  5180 ;;		line 107 in file "main.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0, pclath, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5194 ;;      Params:         0       0       0       0       0       0
  5195 ;;      Locals:         0       0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0
  5197 ;;      Totals:         0       0       0       0       0       0
  5198 ;;Total ram usage:        0 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    2
  5201 ;; This function calls:
  5202 ;;		_LED_update_loop
  5203 ;;		_button_update_loop
  5204 ;; This function is called by:
  5205 ;;		_main
  5206 ;;		_TMR0_CallBack
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function _my10msTimerISR
  5212  077A                     _my10msTimerISR:	
  5213                           
  5214                           ;main.c: 109: LED_update_loop();
  5215                           
  5216                           ;incstack = 0
  5217                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  5218  077A  3185  25E2  3187   	fcall	_LED_update_loop
  5219                           
  5220                           ;main.c: 110: button_update_loop();
  5221  077D  3184  24A4         	fcall	_button_update_loop
  5222  077F  0008               	return
  5223  0780                     __end_of_my10msTimerISR:	
  5224                           
  5225                           	psect	text23
  5226  04A4                     __ptext23:	
  5227 ;; *************** function _button_update_loop *****************
  5228 ;; Defined at:
  5229 ;;		line 78 in file "interact.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  current_stat    1    3[COMMON] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0, pclath, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5243 ;;      Params:         0       0       0       0       0       0
  5244 ;;      Locals:         1       0       0       0       0       0
  5245 ;;      Temps:          2       0       0       0       0       0
  5246 ;;      Totals:         3       0       0       0       0       0
  5247 ;;Total ram usage:        3 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    1
  5250 ;; This function calls:
  5251 ;;		_get_button_state
  5252 ;; This function is called by:
  5253 ;;		_my10msTimerISR
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _button_update_loop
  5259  04A4                     _button_update_loop:	
  5260                           
  5261                           ;interact.c: 80: unsigned char current_state = get_button_state();
  5262                           
  5263                           ;incstack = 0
  5264                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  5265  04A4  3187  2749  3184   	fcall	_get_button_state
  5266  04A7  00F6               	movwf	??_button_update_loop
  5267  04A8  0876               	movf	??_button_update_loop,w
  5268  04A9  00F8               	movwf	button_update_loop@current_state
  5269                           
  5270                           ;interact.c: 81: if (!b_push_confirmed)
  5271  04AA  0020               	movlb	0	; select bank0
  5272  04AB  0867               	movf	_b_push_confirmed,w	;volatile
  5273  04AC  1D03               	btfss	3,2
  5274  04AD  2CD3               	goto	i1l1822
  5275                           
  5276                           ;interact.c: 82: {
  5277                           ;interact.c: 84: if (current_state != b_last_state)
  5278  04AE  0878               	movf	button_update_loop@current_state,w
  5279  04AF  00F6               	movwf	??_button_update_loop
  5280  04B0  01F7               	clrf	??_button_update_loop+1
  5281  04B1  0871               	movf	_b_last_state+1,w	;volatile
  5282  04B2  0677               	xorwf	??_button_update_loop+1,w
  5283  04B3  1D03               	skipz
  5284  04B4  2CB7               	goto	u149_25
  5285  04B5  0870               	movf	_b_last_state,w	;volatile
  5286  04B6  0676               	xorwf	??_button_update_loop,w
  5287  04B7                     u149_25:	
  5288  04B7  1903               	skipnz
  5289  04B8  2CC2               	goto	i1l1814
  5290                           
  5291                           ;interact.c: 85: {
  5292                           ;interact.c: 86: b_count_pressed = 0;
  5293  04B9  01F2               	clrf	_b_count_pressed	;volatile
  5294                           
  5295                           ;interact.c: 87: b_last_state = current_state;
  5296  04BA  0878               	movf	button_update_loop@current_state,w
  5297  04BB  00F6               	movwf	??_button_update_loop
  5298  04BC  01F7               	clrf	??_button_update_loop+1
  5299  04BD  0876               	movf	??_button_update_loop,w
  5300  04BE  00F0               	movwf	_b_last_state	;volatile
  5301  04BF  0877               	movf	??_button_update_loop+1,w
  5302  04C0  00F1               	movwf	_b_last_state+1	;volatile
  5303                           
  5304                           ;interact.c: 88: }
  5305  04C1  0008               	return
  5306  04C2                     i1l1814:	
  5307                           
  5308                           ;interact.c: 89: else if (b_last_state == 1)
  5309  04C2  0370               	decf	_b_last_state,w	;volatile
  5310  04C3  0471               	iorwf	_b_last_state+1,w	;volatile
  5311  04C4  1D03               	btfss	3,2
  5312  04C5  0008               	return
  5313                           
  5314                           ;interact.c: 90: {
  5315                           ;interact.c: 91: b_count_pressed++;
  5316  04C6  3001               	movlw	1
  5317  04C7  00F6               	movwf	??_button_update_loop
  5318  04C8  0876               	movf	??_button_update_loop,w
  5319  04C9  07F2               	addwf	_b_count_pressed,f	;volatile
  5320                           
  5321                           ;interact.c: 92: if (b_count_pressed > 5)
  5322  04CA  3006               	movlw	6
  5323  04CB  0272               	subwf	_b_count_pressed,w	;volatile
  5324  04CC  1C03               	skipc
  5325  04CD  0008               	return
  5326                           
  5327                           ;interact.c: 93: b_push_confirmed = 1;
  5328  04CE  3001               	movlw	1
  5329  04CF  00F6               	movwf	??_button_update_loop
  5330  04D0  0876               	movf	??_button_update_loop,w
  5331  04D1  00E7               	movwf	_b_push_confirmed	;volatile
  5332                           
  5333                           ;interact.c: 94: }
  5334                           ;interact.c: 95: }
  5335  04D2  0008               	return
  5336  04D3                     i1l1822:	
  5337                           
  5338                           ;interact.c: 96: else
  5339                           ;interact.c: 97: {
  5340                           ;interact.c: 98: if (current_state != b_last_state)
  5341  04D3  0878               	movf	button_update_loop@current_state,w
  5342  04D4  00F6               	movwf	??_button_update_loop
  5343  04D5  01F7               	clrf	??_button_update_loop+1
  5344  04D6  0871               	movf	_b_last_state+1,w	;volatile
  5345  04D7  0677               	xorwf	??_button_update_loop+1,w
  5346  04D8  1D03               	skipz
  5347  04D9  2CDC               	goto	u152_25
  5348  04DA  0870               	movf	_b_last_state,w	;volatile
  5349  04DB  0676               	xorwf	??_button_update_loop,w
  5350  04DC                     u152_25:	
  5351  04DC  1903               	skipnz
  5352  04DD  2CEB               	goto	i1l1830
  5353                           
  5354                           ;interact.c: 99: {
  5355                           ;interact.c: 100: b_count_released = 0;
  5356  04DE  01E5               	clrf	_b_count_released	;volatile
  5357                           
  5358                           ;interact.c: 101: b_last_state = current_state;
  5359  04DF  0878               	movf	button_update_loop@current_state,w
  5360  04E0  00F6               	movwf	??_button_update_loop
  5361  04E1  01F7               	clrf	??_button_update_loop+1
  5362  04E2  0876               	movf	??_button_update_loop,w
  5363  04E3  00F0               	movwf	_b_last_state	;volatile
  5364  04E4  0877               	movf	??_button_update_loop+1,w
  5365  04E5  00F1               	movwf	_b_last_state+1	;volatile
  5366                           
  5367                           ;interact.c: 102: b_has_once_been_released = 1;
  5368  04E6  3001               	movlw	1
  5369  04E7  00F6               	movwf	??_button_update_loop
  5370  04E8  0876               	movf	??_button_update_loop,w
  5371  04E9  00E6               	movwf	_b_has_once_been_released	;volatile
  5372                           
  5373                           ;interact.c: 103: }
  5374  04EA  0008               	return
  5375  04EB                     i1l1830:	
  5376                           
  5377                           ;interact.c: 104: else if ((b_last_state == 1)&&(!b_has_once_been_released))
  5378  04EB  0370               	decf	_b_last_state,w	;volatile
  5379  04EC  0471               	iorwf	_b_last_state+1,w	;volatile
  5380  04ED  1D03               	btfss	3,2
  5381  04EE  2CFF               	goto	i1l1840
  5382  04EF  0866               	movf	_b_has_once_been_released,w	;volatile
  5383  04F0  1D03               	btfss	3,2
  5384  04F1  2CFF               	goto	i1l1840
  5385                           
  5386                           ;interact.c: 105: {
  5387                           ;interact.c: 106: b_count_pressed++;
  5388  04F2  3001               	movlw	1
  5389  04F3  00F6               	movwf	??_button_update_loop
  5390  04F4  0876               	movf	??_button_update_loop,w
  5391  04F5  07F2               	addwf	_b_count_pressed,f	;volatile
  5392                           
  5393                           ;interact.c: 107: if (b_count_pressed >= 100)
  5394  04F6  3064               	movlw	100
  5395  04F7  0272               	subwf	_b_count_pressed,w	;volatile
  5396  04F8  1C03               	skipc
  5397  04F9  0008               	return
  5398                           
  5399                           ;interact.c: 108: b_confirmed_state = long_push;
  5400  04FA  3002               	movlw	2
  5401  04FB  00F6               	movwf	??_button_update_loop
  5402  04FC  0876               	movf	??_button_update_loop,w
  5403  04FD  00E4               	movwf	_b_confirmed_state	;volatile
  5404                           
  5405                           ;interact.c: 109: }
  5406  04FE  0008               	return
  5407  04FF                     i1l1840:	
  5408                           
  5409                           ;interact.c: 110: else if (b_last_state == 0)
  5410  04FF  0870               	movf	_b_last_state,w	;volatile
  5411  0500  0471               	iorwf	_b_last_state+1,w	;volatile
  5412  0501  1D03               	btfss	3,2
  5413  0502  0008               	return
  5414                           
  5415                           ;interact.c: 111: {
  5416                           ;interact.c: 112: b_count_released++;
  5417  0503  3001               	movlw	1
  5418  0504  00F6               	movwf	??_button_update_loop
  5419  0505  0876               	movf	??_button_update_loop,w
  5420  0506  07E5               	addwf	_b_count_released,f	;volatile
  5421                           
  5422                           ;interact.c: 113: if (b_count_released > 10)
  5423  0507  300B               	movlw	11
  5424  0508  0265               	subwf	_b_count_released,w	;volatile
  5425  0509  1C03               	skipc
  5426  050A  0008               	return
  5427                           
  5428                           ;interact.c: 114: if (b_count_pressed >= 75)
  5429  050B  304B               	movlw	75
  5430  050C  0272               	subwf	_b_count_pressed,w	;volatile
  5431  050D  1C03               	skipc
  5432  050E  2D14               	goto	i1l1850
  5433                           
  5434                           ;interact.c: 115: b_confirmed_state = long_push;
  5435  050F  3002               	movlw	2
  5436  0510  00F6               	movwf	??_button_update_loop
  5437  0511  0876               	movf	??_button_update_loop,w
  5438  0512  00E4               	movwf	_b_confirmed_state	;volatile
  5439  0513  0008               	return
  5440  0514                     i1l1850:	
  5441                           
  5442                           ;interact.c: 116: else
  5443                           ;interact.c: 117: b_confirmed_state = short_push;
  5444  0514  3001               	movlw	1
  5445  0515  00F6               	movwf	??_button_update_loop
  5446  0516  0876               	movf	??_button_update_loop,w
  5447  0517  00E4               	movwf	_b_confirmed_state	;volatile
  5448  0518  0008               	return
  5449  0519                     __end_of_button_update_loop:	
  5450                           
  5451                           	psect	text24
  5452  0749                     __ptext24:	
  5453 ;; *************** function _get_button_state *****************
  5454 ;; Defined at:
  5455 ;;		line 58 in file "interact.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  state           1    0[COMMON] unsigned char 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  1    wreg      unsigned char 
  5462 ;; Registers used:
  5463 ;;		wreg, status,2, status,0
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5469 ;;      Params:         0       0       0       0       0       0
  5470 ;;      Locals:         1       0       0       0       0       0
  5471 ;;      Temps:          0       0       0       0       0       0
  5472 ;;      Totals:         1       0       0       0       0       0
  5473 ;;Total ram usage:        1 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_button_update_loop
  5479 ;;		_button_init
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           
  5484                           ;psect for function _get_button_state
  5485  0749                     _get_button_state:	
  5486                           
  5487                           ;interact.c: 61: unsigned char state = PORTBbits.RB0;
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5491  0749  3000               	movlw	0
  5492  074A  0020               	movlb	0	; select bank0
  5493  074B  180D               	btfsc	13,0	;volatile
  5494  074C  3001               	movlw	1
  5495  074D  00F5               	movwf	get_button_state@state
  5496                           
  5497                           ;interact.c: 62: if (state == 1)
  5498  074E  0375               	decf	get_button_state@state,w
  5499  074F  1D03               	btfss	3,2
  5500  0750  2F53               	goto	i1l1756
  5501                           
  5502                           ;interact.c: 63: return 0;
  5503  0751  3000               	movlw	0
  5504  0752  0008               	return
  5505  0753                     i1l1756:	
  5506                           
  5507                           ;interact.c: 64: else return 1;
  5508  0753  3001               	movlw	1
  5509  0754  0008               	return
  5510  0755                     __end_of_get_button_state:	
  5511                           
  5512                           	psect	text25
  5513  05E2                     __ptext25:	
  5514 ;; *************** function _LED_update_loop *****************
  5515 ;; Defined at:
  5516 ;;		line 30 in file "interact.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      void 
  5523 ;; Registers used:
  5524 ;;		wreg, status,2, status,0
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5530 ;;      Params:         0       0       0       0       0       0
  5531 ;;      Locals:         0       0       0       0       0       0
  5532 ;;      Temps:          1       0       0       0       0       0
  5533 ;;      Totals:         1       0       0       0       0       0
  5534 ;;Total ram usage:        1 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; This function calls:
  5537 ;;		Nothing
  5538 ;; This function is called by:
  5539 ;;		_my10msTimerISR
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _LED_update_loop
  5545  05E2                     _LED_update_loop:	
  5546                           
  5547                           ;interact.c: 32: if (LED_state == manual_mode)
  5548                           
  5549                           ;incstack = 0
  5550                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  5551  05E2  3004               	movlw	4
  5552  05E3  0020               	movlb	0	; select bank0
  5553  05E4  066F               	xorwf	_LED_state,w
  5554  05E5  1903               	btfsc	3,2
  5555  05E6  0008               	return
  5556                           
  5557                           ;interact.c: 34: else if (LED_state == slow_blinking)
  5558                           
  5559                           ;interact.c: 33: return;
  5560  05E7  3002               	movlw	2
  5561  05E8  066F               	xorwf	_LED_state,w
  5562  05E9  1D03               	btfss	3,2
  5563  05EA  2DF8               	goto	i1l1794
  5564                           
  5565                           ;interact.c: 35: {
  5566                           ;interact.c: 36: LED_counter++;
  5567  05EB  3001               	movlw	1
  5568  05EC  00F5               	movwf	??_LED_update_loop
  5569  05ED  0875               	movf	??_LED_update_loop,w
  5570  05EE  07E3               	addwf	_LED_counter,f	;volatile
  5571                           
  5572                           ;interact.c: 37: if (LED_counter >= 85)
  5573  05EF  3055               	movlw	85
  5574  05F0  0263               	subwf	_LED_counter,w	;volatile
  5575  05F1  1C03               	skipc
  5576  05F2  0008               	return
  5577                           
  5578                           ;interact.c: 38: {
  5579                           ;interact.c: 39: LED_counter = 0;
  5580  05F3  01E3               	clrf	_LED_counter	;volatile
  5581                           
  5582                           ;interact.c: 40: do { LATA2 = ~LATA2; } while(0);
  5583  05F4  3004               	movlw	4
  5584  05F5  0022               	movlb	2	; select bank2
  5585  05F6  068C               	xorwf	12,f
  5586                           
  5587                           ;interact.c: 41: }
  5588                           ;interact.c: 42: }
  5589  05F7  0008               	return
  5590  05F8                     i1l1794:	
  5591                           
  5592                           ;interact.c: 43: else if (LED_state == fast_blinking)
  5593  05F8  3003               	movlw	3
  5594  05F9  0020               	movlb	0	; select bank0
  5595  05FA  066F               	xorwf	_LED_state,w
  5596  05FB  1D03               	btfss	3,2
  5597  05FC  0008               	return
  5598                           
  5599                           ;interact.c: 44: {
  5600                           ;interact.c: 45: LED_counter++;
  5601  05FD  3001               	movlw	1
  5602  05FE  00F5               	movwf	??_LED_update_loop
  5603  05FF  0875               	movf	??_LED_update_loop,w
  5604  0600  07E3               	addwf	_LED_counter,f	;volatile
  5605                           
  5606                           ;interact.c: 46: if (LED_counter >= 20)
  5607  0601  3014               	movlw	20
  5608  0602  0263               	subwf	_LED_counter,w	;volatile
  5609  0603  1C03               	skipc
  5610  0604  0008               	return
  5611                           
  5612                           ;interact.c: 47: {
  5613                           ;interact.c: 48: LED_counter = 0;
  5614  0605  01E3               	clrf	_LED_counter	;volatile
  5615                           
  5616                           ;interact.c: 49: do { LATA2 = ~LATA2; } while(0);
  5617  0606  3004               	movlw	4
  5618  0607  0022               	movlb	2	; select bank2
  5619  0608  068C               	xorwf	12,f
  5620  0609  0008               	return
  5621  060A                     __end_of_LED_update_loop:	
  5622                           
  5623                           	psect	text26
  5624  068D                     __ptext26:	
  5625 ;; *************** function _EUSART_Transmit_ISR *****************
  5626 ;; Defined at:
  5627 ;;		line 169 in file "mcc_generated_files/eusart.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;		None
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;		None
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      void 
  5634 ;; Registers used:
  5635 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5641 ;;      Params:         0       0       0       0       0       0
  5642 ;;      Locals:         0       0       0       0       0       0
  5643 ;;      Temps:          1       0       0       0       0       0
  5644 ;;      Totals:         1       0       0       0       0       0
  5645 ;;Total ram usage:        1 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_INTERRUPT_InterruptManager
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function _EUSART_Transmit_ISR
  5656  068D                     _EUSART_Transmit_ISR:	
  5657                           
  5658                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5662  068D  3008               	movlw	8
  5663  068E  0020               	movlb	0	; select bank0
  5664  068F  026B               	subwf	_eusartTxBufferRemaining,w	;volatile
  5665  0690  1803               	skipnc
  5666  0691  2EA7               	goto	i1l179
  5667                           
  5668                           ;eusart.c: 174: {
  5669                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  5670  0692  086D               	movf	_eusartTxTail,w
  5671  0693  3E53               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5672  0694  0086               	movwf	6
  5673  0695  0187               	clrf	7
  5674  0696  0801               	movf	1,w
  5675  0697  0023               	movlb	3	; select bank3
  5676  0698  009A               	movwf	26	;volatile
  5677  0699  3001               	movlw	1
  5678  069A  00F5               	movwf	??_EUSART_Transmit_ISR
  5679  069B  0875               	movf	??_EUSART_Transmit_ISR,w
  5680  069C  0020               	movlb	0	; select bank0
  5681  069D  07ED               	addwf	_eusartTxTail,f
  5682                           
  5683                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5684  069E  3008               	movlw	8
  5685  069F  026D               	subwf	_eusartTxTail,w
  5686  06A0  1803               	btfsc	3,0
  5687                           
  5688                           ;eusart.c: 177: {
  5689                           ;eusart.c: 178: eusartTxTail = 0;
  5690  06A1  01ED               	clrf	_eusartTxTail
  5691                           
  5692                           ;eusart.c: 179: }
  5693                           ;eusart.c: 180: eusartTxBufferRemaining++;
  5694  06A2  3001               	movlw	1
  5695  06A3  00F5               	movwf	??_EUSART_Transmit_ISR
  5696  06A4  0875               	movf	??_EUSART_Transmit_ISR,w
  5697  06A5  07EB               	addwf	_eusartTxBufferRemaining,f	;volatile
  5698                           
  5699                           ;eusart.c: 181: }
  5700  06A6  0008               	return
  5701  06A7                     i1l179:	
  5702                           
  5703                           ;eusart.c: 182: else
  5704                           ;eusart.c: 183: {
  5705                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  5706  06A7  0021               	movlb	1	; select bank1
  5707  06A8  1211               	bcf	17,4	;volatile
  5708  06A9  0008               	return
  5709  06AA                     __end_of_EUSART_Transmit_ISR:	
  5710                           
  5711                           	psect	text27
  5712  06E1                     __ptext27:	
  5713 ;; *************** function _EUSART_Receive_ISR *****************
  5714 ;; Defined at:
  5715 ;;		line 188 in file "mcc_generated_files/eusart.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5729 ;;      Params:         0       0       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0       0
  5731 ;;      Temps:          1       0       0       0       0       0
  5732 ;;      Totals:         1       0       0       0       0       0
  5733 ;;Total ram usage:        1 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_INTERRUPT_InterruptManager
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function _EUSART_Receive_ISR
  5744  06E1                     _EUSART_Receive_ISR:	
  5745                           
  5746                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  5747                           
  5748                           ;incstack = 0
  5749                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5750  06E1  0023               	movlb	3	; select bank3
  5751  06E2  1C9D               	btfss	29,1	;volatile
  5752  06E3  2EE6               	goto	i1l2024
  5753                           
  5754                           ;eusart.c: 192: {
  5755                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  5756  06E4  139D               	bcf	29,7	;volatile
  5757                           
  5758                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  5759  06E5  179D               	bsf	29,7	;volatile
  5760  06E6                     i1l2024:	
  5761                           
  5762                           ;eusart.c: 197: }
  5763                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  5764  06E6  0819               	movf	25,w	;volatile
  5765  06E7  00F5               	movwf	??_EUSART_Receive_ISR
  5766  06E8  0020               	movlb	0	; select bank0
  5767  06E9  0869               	movf	_eusartRxHead,w
  5768  06EA  3E4B               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5769  06EB  0086               	movwf	6
  5770  06EC  0187               	clrf	7
  5771  06ED  0875               	movf	??_EUSART_Receive_ISR,w
  5772  06EE  0081               	movwf	1
  5773  06EF  3001               	movlw	1
  5774  06F0  00F5               	movwf	??_EUSART_Receive_ISR
  5775  06F1  0875               	movf	??_EUSART_Receive_ISR,w
  5776  06F2  07E9               	addwf	_eusartRxHead,f
  5777                           
  5778                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5779  06F3  3008               	movlw	8
  5780  06F4  0269               	subwf	_eusartRxHead,w
  5781  06F5  1803               	btfsc	3,0
  5782                           
  5783                           ;eusart.c: 202: {
  5784                           ;eusart.c: 203: eusartRxHead = 0;
  5785  06F6  01E9               	clrf	_eusartRxHead
  5786                           
  5787                           ;eusart.c: 204: }
  5788                           ;eusart.c: 205: eusartRxCount++;
  5789  06F7  3001               	movlw	1
  5790  06F8  00F5               	movwf	??_EUSART_Receive_ISR
  5791  06F9  0875               	movf	??_EUSART_Receive_ISR,w
  5792  06FA  07F3               	addwf	_eusartRxCount,f	;volatile
  5793  06FB  0008               	return
  5794  06FC                     __end_of_EUSART_Receive_ISR:	
  5795  007E                     btemp	set	126	;btemp
  5796  007E                     int$flags	set	126
  5797  007E                     wtemp	set	126
  5798  007E                     wtemp0	set	126
  5799  0080                     wtemp1	set	128
  5800  0082                     wtemp2	set	130
  5801  0084                     wtemp3	set	132
  5802  0086                     wtemp4	set	134
  5803  0088                     wtemp5	set	136
  5804  007F                     wtemp6	set	127
  5805  007E                     ttemp	set	126
  5806  007E                     ttemp0	set	126
  5807  0081                     ttemp1	set	129
  5808  0084                     ttemp2	set	132
  5809  0087                     ttemp3	set	135
  5810  007F                     ttemp4	set	127
  5811  007E                     ltemp	set	126
  5812  007E                     ltemp0	set	126
  5813  0082                     ltemp1	set	130
  5814  0086                     ltemp2	set	134
  5815  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        1
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     43      80
    BANK1            80      1       1
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _multiply_fp->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_convert_to_fp
    _GPS_Initialize->_printf
    _printf->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6734
                                             40 BANK0      3     3      0
                                              0 BANK1      1     1      0
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    1467
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     656
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     161
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     161
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     161
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     155
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    4363
                                             21 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4     662
                                              0 BANK0     21    17      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     526
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     359
                                             10 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     291
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              4 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   3     3      0     112
                                              1 COMMON     3     3      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
   _LED_set_state
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _multiply_fp
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      1       1       8        1.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      5B      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Sep 20 07:16:18 2016

                             __CFG_CP$OFF 0000                                        l24 0765  
                     ___wmul@multiplicand 0022                           _timer0ReloadVal 0074  
                  __end_of_my10msTimerISR 0780                                       l333 064A  
                                     l167 0617                                       l268 03EC  
                                     l488 022E                                       l596 06B3  
                            __CFG_CPD$OFF 0000                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0075                              __CFG_LVP$OFF 0000  
                                    l3002 0256                                      l3020 028B  
                                    l3008 026D                                      l3054 045F  
                                    l3064 0495                                      l3048 0448  
                                    l2514 060C                                      l3058 046B  
                                    l2620 03BA                                      l2710 0052  
                                    l2528 062B                                      l2640 0675  
                                    l2632 0408                                      l2800 00DE  
                                    l2626 03E4                                      l2644 06AD  
                                    l2732 0076                                      l2708 0043  
                                    l2910 0193                                      l2830 010A  
                                    l2822 0102                                      l2742 008A  
                                    l2662 05C5                                      l2920 01B6  
                                    l2832 010B                                      l2690 0573  
                                    l2930 01E9                                      l2922 01D3  
                                    l2906 0183                                      l2842 011D  
                                    l2746 008C                                      l2658 05BB  
                                    l2588 0653                                      l2916 0195  
                                    l2924 0175                                      l2780 00C3  
                                    l2748 008D                                      l2676 063A  
                                    l2926 01D8                                      l2790 00CC  
                                    l2758 009F                                      l2678 0641  
                                    l2696 0588                                      l2960 0215  
                                    l2952 020D                                      l2872 0149  
                                    l2864 0141                                      l2970 0227  
                                    l2962 0217                                      l2874 014A  
                                    l2788 00CB                                      l2992 024C  
                                    l2896 016E                                      l2996 024E  
                                    l2988 0244                                      STR_1 0527  
                                    STR_2 055B                                      _LATA 010C  
                                    _LATB 010D                                      u3605 02B0  
                                    u3615 02CB                                      u3625 02E3  
                                    u2915 06B4                                      u2835 03A1  
                                    u3635 0313                                      u2925 06B9  
                                    u3565 025E                                      u3645 0367  
                                    u2864 03D6                                      u2865 03D4  
                                    u2955 05C6                                      u3595 0298  
                                    u2965 05CD                                      u3847 044F  
                                    i1l73 0024                                      u3857 049C  
                                    u3867 0579                                      u3877 0596  
                                    u3887 05AB                                      _PLLR 04D6  
                                    _TMR0 0015                                      _WPUA 020C  
                                    _WPUB 020D                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                    __end_of_GPS_read_speed 028D  
                                    _main 042F                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      ltemp 007E  
                                    start 0029                                      ttemp 007E  
                                    wtemp 007E                             __CFG_MCLRE$ON 0000  
                 __end_of_TMR0_Initialize 0728                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0075                             ?_EUSART_Write 0075  
          __size_of_OSCILLATOR_Initialize 0008             __end_of_OSCILLATOR_Initialize 0768  
                                   ?_main 0075                             _convert_to_fp 0386  
                           __CFG_WDTE$OFF 0000                                     _LATA2 0862  
                         ?_my10msTimerISR 0075                                     i1l179 06A7  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 002A         __size_of_TMR0_SetInterruptHandler 0006  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0020  
                         __end_of_fp_x0_a 051D                           __end_of_fp_x0_b 0521  
                        __end_of_TMR0_ISR 073D                                     _speed 005B  
                                   _putch 0774                   __end_of_LED_update_loop 060A  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                           ?_GPS_read_speed 0075  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                             multiply_fp@n1 002C  
                           multiply_fp@n2 0030                           __initialization 002B  
                  __size_of_LED_set_state 0021                              __end_of_main 04A4  
                          ??_EUSART_Write 0020               ?_INTERRUPT_InterruptManager 0075  
                          ?_convert_to_fp 0020                                    ??_main 0048  
                            _b_last_state 0070                          _b_push_confirmed 0067  
                         _b_count_pressed 0072                                    _ANSELA 018C  
                                  ?_putch 0075                                    _ANSELB 018D  
                                  i1l2024 06E6                                    i1l2406 001A  
                                  i1l1830 04EB                                    i1l1814 04C2  
                                  i1l1822 04D3                                    i1l1840 04FF  
                                  i1l1850 0514                                    i1l1756 0753  
                                  i1l2398 000F                                    i1l1794 05F8  
                                  u152_25 04DC                                    u149_25 04B7  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                            __CFG_PWRTE$OFF 0000  
                      convert_to_fp@i_bit 002E                                    ___lmul 05B2  
                                  ___wmul 06AA                            __CFG_STVREN$ON 0000  
                     _EUSART_Transmit_ISR 068D                          ?_TMR0_Initialize 0075  
              __end_of_button_update_loop 0519                                    _printf 0670  
                           _LED_set_state 062E                     __end_of_TMR0_CallBack 0760  
TMR0_SetInterruptHandler@InterruptHandler 0020                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0075                    convert_to_fp@res_fract 002C  
                        ?_LED_update_loop 0075                              ?_multiply_fp 002C  
                    __size_of_EUSART_Read 0021                         _SYSTEM_Initialize 073D  
                 __end_of__initialization 003B                            multiply_fp@res 0042  
                      ?_SYSTEM_Initialize 0075                            __pcstackCOMMON 0075  
                            __pidataBANK0 0780                       ??_SYSTEM_Initialize 0023  
                               ?_TMR0_ISR 0075                           ??_convert_to_fp 0024  
                           __end_of_putch 077A                            _OPTION_REGbits 0095  
                   TMR0_ISR@CountCallBack 005F                            ?_LED_set_state 0075  
                _b_has_once_been_released 0066                 __end_of_SYSTEM_Initialize 0749  
                   ??_EUSART_Transmit_ISR 0075                                   ??_putch 0022  
                              __pbssBANK0 004B                      __end_of_EUSART_Write 062E  
                        _b_count_released 0065               __size_of_EUSART_Receive_ISR 001B  
                              __pmaintext 042F          __end_of_TMR0_SetInterruptHandler 0774  
                                 ?___lmul 0020                                   ?___wmul 0020  
                              ??_TMR0_ISR 0079                          ??_my10msTimerISR 0079  
                              __pintentry 0004                                   _BAUDCON 019F  
                          ___lmul@product 0028                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0023  
                   get_button_state@state 0075                             _eusartRxCount 0073  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                        ??_GPS_read_speed 0035                           __size_of___lmul 0030  
                         __size_of___wmul 001C                   convert_to_fp@fract_part 0022  
                                 _fp_x0_a 0519                                   _fp_x0_b 051D  
                                 __ptext1 028D                                   __ptext2 05B2  
                                 __ptext3 073D                                   __ptext4 0713  
                                 __ptext5 076E                                   __ptext6 06FC  
                                 __ptext7 0760                                   __ptext8 06C6  
                                 __ptext9 062E                           __size_of_printf 001D  
                         ??_LED_set_state 0020                     _OSCILLATOR_Initialize 0760  
            GPS_read_speed@read_speed_fra 003B                  ??_PIN_MANAGER_Initialize 0020  
            GPS_read_speed@read_speed_int 0039                __size_of_SYSTEM_Initialize 000C  
                                 clrloop0 0769                          _get_button_state 0749  
                                 main@tmp 00A0                      end_of_initialization 003B  
                       __end_of_ratio_mph 0525                    LED_set_state@new_state 0021  
                               _LED_state 006F                      __size_of_multiply_fp 00F9  
                       _EUSART_Initialize 06C6                        ?_EUSART_Initialize 0075  
                               _RCSTAbits 019D                                   printf@c 0029  
                                 printf@f 0023                              __pstringtext 0519  
                     ??_EUSART_Initialize 0020                  _TMR0_SetInterruptHandler 076E  
                               _PORTBbits 000D                      GPS_read_speed@i_buff 0046  
                    GPS_read_speed@m_char 0047                      GPS_read_speed@buffer 003F  
                        __CFG_FOSC$INTOSC 0000                     __size_of_EUSART_Write 0024  
                      _button_update_loop 04A4                 __end_of_EUSART_Initialize 06E1  
                 __size_of_GPS_Initialize 0045                       ?_button_update_loop 0075  
                          __end_of___lmul 05E2                            __end_of___wmul 06C6  
                            _EUSART_Write 060A                         __size_of_TMR0_ISR 0015  
                        convert_to_fp@one 0525                          convert_to_fp@res 0031  
                  ?_OSCILLATOR_Initialize 0075                      ??_button_update_loop 0076  
                          __end_of_printf 068D                       start_initialization 002B  
                __size_of_TMR0_Initialize 0015           __size_of_PIN_MANAGER_Initialize 0017  
                           ??_EUSART_Read 0020                               putch@txData 0022  
                __size_of_LED_update_loop 0028                                  ??___lmul 0028  
                                ??___wmul 0024                    __size_of_TMR0_CallBack 000B  
                             __pdataBANK0 006F                     convert_to_fp@int_part 0020  
                   __end_of_convert_to_fp 042F                                  ??_printf 0025  
             __end_of_EUSART_Transmit_ISR 06AA                               __pbssCOMMON 0070  
                               ___latbits 0001                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                     convert_to_fp@tmp_left 002F  
              __end_of_EUSART_Receive_ISR 06FC                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 0670                     _TMR0_InterruptHandler 0061  
                  _PIN_MANAGER_Initialize 06FC                      EUSART_Read@readValue 0021  
                __end_of_get_button_state 0755                              _eusartRxHead 0069  
                            _eusartTxHead 006C                              _eusartRxTail 006A  
                            _eusartTxTail 006D              ??_INTERRUPT_InterruptManager 0079  
                 _eusartTxBufferRemaining 006B                             _TMR0_CallBack 0755  
                          __size_of_putch 0006                            _eusartRxBuffer 004B  
                       ??_TMR0_Initialize 0022                            _GPS_Initialize 056D  
                          _eusartTxBuffer 0053                            ___wmul@product 0024  
                               clear_ram0 0768                                  _PIE1bits 0091  
                               _ratio_mph 0521       __size_of_INTERRUPT_InterruptManager 0025  
              ??_TMR0_SetInterruptHandler 0022                                  _PIR1bits 0011  
                                _TMR0_ISR 0728                         ??_LED_update_loop 0075  
                       ___wmul@multiplier 0020                     __end_of_LED_set_state 064F  
                 __size_of_my10msTimerISR 0006                            ?_TMR0_CallBack 0075  
                             _EUSART_Read 064F                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 05B2                             ??_multiply_fp 0034  
                __end_ofconvert_to_fp@one 0527            GPS_read_speed@no_more_checksum 0038  
                 __size_of_GPS_read_speed 024E                               _LED_counter 0063  
                       GPS_Initialize@tmp 002D                   ??_OSCILLATOR_Initialize 0020  
         button_update_loop@current_state 0078                  GPS_read_speed@before_dot 0037  
                                __ptext10 003F                                  __ptext11 0386  
                                __ptext20 0755                                  __ptext12 06AA  
                                __ptext21 0781                                  __ptext13 064F  
                                __ptext22 077A                                  __ptext14 056D  
                                __ptext23 04A4                                  __ptext15 0670  
                                __ptext24 0749                                  __ptext16 0774  
                                __ptext25 05E2                                  __ptext17 060A  
                                __ptext26 068D                                  __ptext27 06E1  
                                __ptext19 0728                           ?_GPS_Initialize 0075  
                       _b_confirmed_state 0064                             __size_of_main 0075  
    __end_of_TMR0_DefaultInterruptHandler 0782     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0781                       __end_of_multiply_fp 0386  
                                int$flags 007E                       _b_release_confirmed 0068  
      __end_of_INTERRUPT_InterruptManager 0029                _INTERRUPT_InterruptManager 0004  
             __size_of_button_update_loop 0075                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0079                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0075                   GPS_read_speed@checksum2 003D  
                       __CFG_CLKOUTEN$OFF 0000             ?_TMR0_DefaultInterruptHandler 0075  
                                printf@ap 0028                        _EUSART_Receive_ISR 06E1  
                       ?_get_button_state 0075                        ??_get_button_state 0075  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0075  
                         _TMR0_Initialize 0713                    GPS_read_speed@checksum 003E  
                          _my10msTimerISR 077A                               _speed_units 006E  
                      EUSART_Write@txData 0021              __size_of_EUSART_Transmit_ISR 001D  
          __end_of_PIN_MANAGER_Initialize 0713                     GPS_read_speed@i_buff2 0045  
                             _multiply_fp 028D                    __size_of_convert_to_fp 00A9  
                    ??_EUSART_Receive_ISR 0075                            _GPS_read_speed 003F  
                         _LED_update_loop 05E2  

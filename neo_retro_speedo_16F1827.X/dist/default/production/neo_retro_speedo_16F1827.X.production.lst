

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 22 09:58:40 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0093                     	;# 
    90  0094                     	;# 
    91  0095                     	;# 
    92  0096                     	;# 
    93  0097                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011A                     	;# 
   114  011B                     	;# 
   115  011D                     	;# 
   116  011E                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0191                     	;# 
   120  0191                     	;# 
   121  0192                     	;# 
   122  0193                     	;# 
   123  0193                     	;# 
   124  0193                     	;# 
   125  0194                     	;# 
   126  0195                     	;# 
   127  0196                     	;# 
   128  0199                     	;# 
   129  019A                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019C                     	;# 
   135  019C                     	;# 
   136  019D                     	;# 
   137  019E                     	;# 
   138  019F                     	;# 
   139  020C                     	;# 
   140  020D                     	;# 
   141  0211                     	;# 
   142  0211                     	;# 
   143  0212                     	;# 
   144  0212                     	;# 
   145  0213                     	;# 
   146  0213                     	;# 
   147  0214                     	;# 
   148  0214                     	;# 
   149  0215                     	;# 
   150  0215                     	;# 
   151  0215                     	;# 
   152  0216                     	;# 
   153  0216                     	;# 
   154  0217                     	;# 
   155  0217                     	;# 
   156  0219                     	;# 
   157  021A                     	;# 
   158  021B                     	;# 
   159  021C                     	;# 
   160  021D                     	;# 
   161  021E                     	;# 
   162  021F                     	;# 
   163  0291                     	;# 
   164  0291                     	;# 
   165  0292                     	;# 
   166  0293                     	;# 
   167  0294                     	;# 
   168  0295                     	;# 
   169  0295                     	;# 
   170  0296                     	;# 
   171  0298                     	;# 
   172  0298                     	;# 
   173  0299                     	;# 
   174  029A                     	;# 
   175  029B                     	;# 
   176  029C                     	;# 
   177  029C                     	;# 
   178  029D                     	;# 
   179  029E                     	;# 
   180  029E                     	;# 
   181  0311                     	;# 
   182  0311                     	;# 
   183  0312                     	;# 
   184  0313                     	;# 
   185  0318                     	;# 
   186  0318                     	;# 
   187  0319                     	;# 
   188  031A                     	;# 
   189  0394                     	;# 
   190  0395                     	;# 
   191  0396                     	;# 
   192  039A                     	;# 
   193  039C                     	;# 
   194  039D                     	;# 
   195  039E                     	;# 
   196  039F                     	;# 
   197  0415                     	;# 
   198  0416                     	;# 
   199  0417                     	;# 
   200  041C                     	;# 
   201  041D                     	;# 
   202  041E                     	;# 
   203  0FE4                     	;# 
   204  0FE5                     	;# 
   205  0FE6                     	;# 
   206  0FE7                     	;# 
   207  0FE8                     	;# 
   208  0FE9                     	;# 
   209  0FEA                     	;# 
   210  0FEB                     	;# 
   211  0FED                     	;# 
   212  0FEE                     	;# 
   213  0FEF                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  008C                     	;# 
   244  008D                     	;# 
   245  0091                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0094                     	;# 
   249  0095                     	;# 
   250  0096                     	;# 
   251  0097                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009A                     	;# 
   255  009B                     	;# 
   256  009B                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  010C                     	;# 
   261  010D                     	;# 
   262  0111                     	;# 
   263  0112                     	;# 
   264  0113                     	;# 
   265  0114                     	;# 
   266  0115                     	;# 
   267  0116                     	;# 
   268  0117                     	;# 
   269  0118                     	;# 
   270  0119                     	;# 
   271  011A                     	;# 
   272  011B                     	;# 
   273  011D                     	;# 
   274  011E                     	;# 
   275  018C                     	;# 
   276  018D                     	;# 
   277  0191                     	;# 
   278  0191                     	;# 
   279  0192                     	;# 
   280  0193                     	;# 
   281  0193                     	;# 
   282  0193                     	;# 
   283  0194                     	;# 
   284  0195                     	;# 
   285  0196                     	;# 
   286  0199                     	;# 
   287  019A                     	;# 
   288  019B                     	;# 
   289  019B                     	;# 
   290  019B                     	;# 
   291  019B                     	;# 
   292  019C                     	;# 
   293  019C                     	;# 
   294  019D                     	;# 
   295  019E                     	;# 
   296  019F                     	;# 
   297  020C                     	;# 
   298  020D                     	;# 
   299  0211                     	;# 
   300  0211                     	;# 
   301  0212                     	;# 
   302  0212                     	;# 
   303  0213                     	;# 
   304  0213                     	;# 
   305  0214                     	;# 
   306  0214                     	;# 
   307  0215                     	;# 
   308  0215                     	;# 
   309  0215                     	;# 
   310  0216                     	;# 
   311  0216                     	;# 
   312  0217                     	;# 
   313  0217                     	;# 
   314  0219                     	;# 
   315  021A                     	;# 
   316  021B                     	;# 
   317  021C                     	;# 
   318  021D                     	;# 
   319  021E                     	;# 
   320  021F                     	;# 
   321  0291                     	;# 
   322  0291                     	;# 
   323  0292                     	;# 
   324  0293                     	;# 
   325  0294                     	;# 
   326  0295                     	;# 
   327  0295                     	;# 
   328  0296                     	;# 
   329  0298                     	;# 
   330  0298                     	;# 
   331  0299                     	;# 
   332  029A                     	;# 
   333  029B                     	;# 
   334  029C                     	;# 
   335  029C                     	;# 
   336  029D                     	;# 
   337  029E                     	;# 
   338  029E                     	;# 
   339  0311                     	;# 
   340  0311                     	;# 
   341  0312                     	;# 
   342  0313                     	;# 
   343  0318                     	;# 
   344  0318                     	;# 
   345  0319                     	;# 
   346  031A                     	;# 
   347  0394                     	;# 
   348  0395                     	;# 
   349  0396                     	;# 
   350  039A                     	;# 
   351  039C                     	;# 
   352  039D                     	;# 
   353  039E                     	;# 
   354  039F                     	;# 
   355  0415                     	;# 
   356  0416                     	;# 
   357  0417                     	;# 
   358  041C                     	;# 
   359  041D                     	;# 
   360  041E                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEF                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000D                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0014                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0093                     	;# 
   406  0094                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  0111                     	;# 
   421  0112                     	;# 
   422  0113                     	;# 
   423  0114                     	;# 
   424  0115                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  0118                     	;# 
   428  0119                     	;# 
   429  011A                     	;# 
   430  011B                     	;# 
   431  011D                     	;# 
   432  011E                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0199                     	;# 
   445  019A                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019C                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020C                     	;# 
   456  020D                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0219                     	;# 
   473  021A                     	;# 
   474  021B                     	;# 
   475  021C                     	;# 
   476  021D                     	;# 
   477  021E                     	;# 
   478  021F                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0294                     	;# 
   484  0295                     	;# 
   485  0295                     	;# 
   486  0296                     	;# 
   487  0298                     	;# 
   488  0298                     	;# 
   489  0299                     	;# 
   490  029A                     	;# 
   491  029B                     	;# 
   492  029C                     	;# 
   493  029C                     	;# 
   494  029D                     	;# 
   495  029E                     	;# 
   496  029E                     	;# 
   497  0311                     	;# 
   498  0311                     	;# 
   499  0312                     	;# 
   500  0313                     	;# 
   501  0318                     	;# 
   502  0318                     	;# 
   503  0319                     	;# 
   504  031A                     	;# 
   505  0394                     	;# 
   506  0395                     	;# 
   507  0396                     	;# 
   508  039A                     	;# 
   509  039C                     	;# 
   510  039D                     	;# 
   511  039E                     	;# 
   512  039F                     	;# 
   513  0415                     	;# 
   514  0416                     	;# 
   515  0417                     	;# 
   516  041C                     	;# 
   517  041D                     	;# 
   518  041E                     	;# 
   519  0FE4                     	;# 
   520  0FE5                     	;# 
   521  0FE6                     	;# 
   522  0FE7                     	;# 
   523  0FE8                     	;# 
   524  0FE9                     	;# 
   525  0FEA                     	;# 
   526  0FEB                     	;# 
   527  0FED                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000D                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0014                     	;# 
   548  0015                     	;# 
   549  0016                     	;# 
   550  0016                     	;# 
   551  0017                     	;# 
   552  0018                     	;# 
   553  0019                     	;# 
   554  001A                     	;# 
   555  001B                     	;# 
   556  001C                     	;# 
   557  001E                     	;# 
   558  001F                     	;# 
   559  008C                     	;# 
   560  008D                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0093                     	;# 
   564  0094                     	;# 
   565  0095                     	;# 
   566  0096                     	;# 
   567  0097                     	;# 
   568  0098                     	;# 
   569  0099                     	;# 
   570  009A                     	;# 
   571  009B                     	;# 
   572  009B                     	;# 
   573  009C                     	;# 
   574  009D                     	;# 
   575  009E                     	;# 
   576  010C                     	;# 
   577  010D                     	;# 
   578  0111                     	;# 
   579  0112                     	;# 
   580  0113                     	;# 
   581  0114                     	;# 
   582  0115                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  0118                     	;# 
   586  0119                     	;# 
   587  011A                     	;# 
   588  011B                     	;# 
   589  011D                     	;# 
   590  011E                     	;# 
   591  018C                     	;# 
   592  018D                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0193                     	;# 
   599  0194                     	;# 
   600  0195                     	;# 
   601  0196                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019C                     	;# 
   609  019C                     	;# 
   610  019D                     	;# 
   611  019E                     	;# 
   612  019F                     	;# 
   613  020C                     	;# 
   614  020D                     	;# 
   615  0211                     	;# 
   616  0211                     	;# 
   617  0212                     	;# 
   618  0212                     	;# 
   619  0213                     	;# 
   620  0213                     	;# 
   621  0214                     	;# 
   622  0214                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0216                     	;# 
   627  0216                     	;# 
   628  0217                     	;# 
   629  0217                     	;# 
   630  0219                     	;# 
   631  021A                     	;# 
   632  021B                     	;# 
   633  021C                     	;# 
   634  021D                     	;# 
   635  021E                     	;# 
   636  021F                     	;# 
   637  0291                     	;# 
   638  0291                     	;# 
   639  0292                     	;# 
   640  0293                     	;# 
   641  0294                     	;# 
   642  0295                     	;# 
   643  0295                     	;# 
   644  0296                     	;# 
   645  0298                     	;# 
   646  0298                     	;# 
   647  0299                     	;# 
   648  029A                     	;# 
   649  029B                     	;# 
   650  029C                     	;# 
   651  029C                     	;# 
   652  029D                     	;# 
   653  029E                     	;# 
   654  029E                     	;# 
   655  0311                     	;# 
   656  0311                     	;# 
   657  0312                     	;# 
   658  0313                     	;# 
   659  0318                     	;# 
   660  0318                     	;# 
   661  0319                     	;# 
   662  031A                     	;# 
   663  0394                     	;# 
   664  0395                     	;# 
   665  0396                     	;# 
   666  039A                     	;# 
   667  039C                     	;# 
   668  039D                     	;# 
   669  039E                     	;# 
   670  039F                     	;# 
   671  0415                     	;# 
   672  0416                     	;# 
   673  0417                     	;# 
   674  041C                     	;# 
   675  041D                     	;# 
   676  041E                     	;# 
   677  0FE4                     	;# 
   678  0FE5                     	;# 
   679  0FE6                     	;# 
   680  0FE7                     	;# 
   681  0FE8                     	;# 
   682  0FE9                     	;# 
   683  0FEA                     	;# 
   684  0FEB                     	;# 
   685  0FED                     	;# 
   686  0FEE                     	;# 
   687  0FEF                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000D                     	;# 
   702  0011                     	;# 
   703  0012                     	;# 
   704  0013                     	;# 
   705  0014                     	;# 
   706  0015                     	;# 
   707  0016                     	;# 
   708  0016                     	;# 
   709  0017                     	;# 
   710  0018                     	;# 
   711  0019                     	;# 
   712  001A                     	;# 
   713  001B                     	;# 
   714  001C                     	;# 
   715  001E                     	;# 
   716  001F                     	;# 
   717  008C                     	;# 
   718  008D                     	;# 
   719  0091                     	;# 
   720  0092                     	;# 
   721  0093                     	;# 
   722  0094                     	;# 
   723  0095                     	;# 
   724  0096                     	;# 
   725  0097                     	;# 
   726  0098                     	;# 
   727  0099                     	;# 
   728  009A                     	;# 
   729  009B                     	;# 
   730  009B                     	;# 
   731  009C                     	;# 
   732  009D                     	;# 
   733  009E                     	;# 
   734  010C                     	;# 
   735  010D                     	;# 
   736  0111                     	;# 
   737  0112                     	;# 
   738  0113                     	;# 
   739  0114                     	;# 
   740  0115                     	;# 
   741  0116                     	;# 
   742  0117                     	;# 
   743  0118                     	;# 
   744  0119                     	;# 
   745  011A                     	;# 
   746  011B                     	;# 
   747  011D                     	;# 
   748  011E                     	;# 
   749  018C                     	;# 
   750  018D                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019C                     	;# 
   767  019C                     	;# 
   768  019D                     	;# 
   769  019E                     	;# 
   770  019F                     	;# 
   771  020C                     	;# 
   772  020D                     	;# 
   773  0211                     	;# 
   774  0211                     	;# 
   775  0212                     	;# 
   776  0212                     	;# 
   777  0213                     	;# 
   778  0213                     	;# 
   779  0214                     	;# 
   780  0214                     	;# 
   781  0215                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0216                     	;# 
   785  0216                     	;# 
   786  0217                     	;# 
   787  0217                     	;# 
   788  0219                     	;# 
   789  021A                     	;# 
   790  021B                     	;# 
   791  021C                     	;# 
   792  021D                     	;# 
   793  021E                     	;# 
   794  021F                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0294                     	;# 
   800  0295                     	;# 
   801  0295                     	;# 
   802  0296                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  029B                     	;# 
   808  029C                     	;# 
   809  029C                     	;# 
   810  029D                     	;# 
   811  029E                     	;# 
   812  029E                     	;# 
   813  0311                     	;# 
   814  0311                     	;# 
   815  0312                     	;# 
   816  0313                     	;# 
   817  0318                     	;# 
   818  0318                     	;# 
   819  0319                     	;# 
   820  031A                     	;# 
   821  0394                     	;# 
   822  0395                     	;# 
   823  0396                     	;# 
   824  039A                     	;# 
   825  039C                     	;# 
   826  039D                     	;# 
   827  039E                     	;# 
   828  039F                     	;# 
   829  0415                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  0FE4                     	;# 
   836  0FE5                     	;# 
   837  0FE6                     	;# 
   838  0FE7                     	;# 
   839  0FE8                     	;# 
   840  0FE9                     	;# 
   841  0FEA                     	;# 
   842  0FEB                     	;# 
   843  0FED                     	;# 
   844  0FEE                     	;# 
   845  0FEF                     	;# 
   846  0000                     	;# 
   847  0001                     	;# 
   848  0002                     	;# 
   849  0003                     	;# 
   850  0004                     	;# 
   851  0005                     	;# 
   852  0006                     	;# 
   853  0007                     	;# 
   854  0008                     	;# 
   855  0009                     	;# 
   856  000A                     	;# 
   857  000B                     	;# 
   858  000C                     	;# 
   859  000D                     	;# 
   860  0011                     	;# 
   861  0012                     	;# 
   862  0013                     	;# 
   863  0014                     	;# 
   864  0015                     	;# 
   865  0016                     	;# 
   866  0016                     	;# 
   867  0017                     	;# 
   868  0018                     	;# 
   869  0019                     	;# 
   870  001A                     	;# 
   871  001B                     	;# 
   872  001C                     	;# 
   873  001E                     	;# 
   874  001F                     	;# 
   875  008C                     	;# 
   876  008D                     	;# 
   877  0091                     	;# 
   878  0092                     	;# 
   879  0093                     	;# 
   880  0094                     	;# 
   881  0095                     	;# 
   882  0096                     	;# 
   883  0097                     	;# 
   884  0098                     	;# 
   885  0099                     	;# 
   886  009A                     	;# 
   887  009B                     	;# 
   888  009B                     	;# 
   889  009C                     	;# 
   890  009D                     	;# 
   891  009E                     	;# 
   892  010C                     	;# 
   893  010D                     	;# 
   894  0111                     	;# 
   895  0112                     	;# 
   896  0113                     	;# 
   897  0114                     	;# 
   898  0115                     	;# 
   899  0116                     	;# 
   900  0117                     	;# 
   901  0118                     	;# 
   902  0119                     	;# 
   903  011A                     	;# 
   904  011B                     	;# 
   905  011D                     	;# 
   906  011E                     	;# 
   907  018C                     	;# 
   908  018D                     	;# 
   909  0191                     	;# 
   910  0191                     	;# 
   911  0192                     	;# 
   912  0193                     	;# 
   913  0193                     	;# 
   914  0193                     	;# 
   915  0194                     	;# 
   916  0195                     	;# 
   917  0196                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019C                     	;# 
   925  019C                     	;# 
   926  019D                     	;# 
   927  019E                     	;# 
   928  019F                     	;# 
   929  020C                     	;# 
   930  020D                     	;# 
   931  0211                     	;# 
   932  0211                     	;# 
   933  0212                     	;# 
   934  0212                     	;# 
   935  0213                     	;# 
   936  0213                     	;# 
   937  0214                     	;# 
   938  0214                     	;# 
   939  0215                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0216                     	;# 
   943  0216                     	;# 
   944  0217                     	;# 
   945  0217                     	;# 
   946  0219                     	;# 
   947  021A                     	;# 
   948  021B                     	;# 
   949  021C                     	;# 
   950  021D                     	;# 
   951  021E                     	;# 
   952  021F                     	;# 
   953  0291                     	;# 
   954  0291                     	;# 
   955  0292                     	;# 
   956  0293                     	;# 
   957  0294                     	;# 
   958  0295                     	;# 
   959  0295                     	;# 
   960  0296                     	;# 
   961  0298                     	;# 
   962  0298                     	;# 
   963  0299                     	;# 
   964  029A                     	;# 
   965  029B                     	;# 
   966  029C                     	;# 
   967  029C                     	;# 
   968  029D                     	;# 
   969  029E                     	;# 
   970  029E                     	;# 
   971  0311                     	;# 
   972  0311                     	;# 
   973  0312                     	;# 
   974  0313                     	;# 
   975  0318                     	;# 
   976  0318                     	;# 
   977  0319                     	;# 
   978  031A                     	;# 
   979  0394                     	;# 
   980  0395                     	;# 
   981  0396                     	;# 
   982  039A                     	;# 
   983  039C                     	;# 
   984  039D                     	;# 
   985  039E                     	;# 
   986  039F                     	;# 
   987  0415                     	;# 
   988  0416                     	;# 
   989  0417                     	;# 
   990  041C                     	;# 
   991  041D                     	;# 
   992  041E                     	;# 
   993  0FE4                     	;# 
   994  0FE5                     	;# 
   995  0FE6                     	;# 
   996  0FE7                     	;# 
   997  0FE8                     	;# 
   998  0FE9                     	;# 
   999  0FEA                     	;# 
  1000  0FEB                     	;# 
  1001  0FED                     	;# 
  1002  0FEE                     	;# 
  1003  0FEF                     	;# 
  1004  0000                     	;# 
  1005  0001                     	;# 
  1006  0002                     	;# 
  1007  0003                     	;# 
  1008  0004                     	;# 
  1009  0005                     	;# 
  1010  0006                     	;# 
  1011  0007                     	;# 
  1012  0008                     	;# 
  1013  0009                     	;# 
  1014  000A                     	;# 
  1015  000B                     	;# 
  1016  000C                     	;# 
  1017  000D                     	;# 
  1018  0011                     	;# 
  1019  0012                     	;# 
  1020  0013                     	;# 
  1021  0014                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  001E                     	;# 
  1032  001F                     	;# 
  1033  008C                     	;# 
  1034  008D                     	;# 
  1035  0091                     	;# 
  1036  0092                     	;# 
  1037  0093                     	;# 
  1038  0094                     	;# 
  1039  0095                     	;# 
  1040  0096                     	;# 
  1041  0097                     	;# 
  1042  0098                     	;# 
  1043  0099                     	;# 
  1044  009A                     	;# 
  1045  009B                     	;# 
  1046  009B                     	;# 
  1047  009C                     	;# 
  1048  009D                     	;# 
  1049  009E                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  0111                     	;# 
  1053  0112                     	;# 
  1054  0113                     	;# 
  1055  0114                     	;# 
  1056  0115                     	;# 
  1057  0116                     	;# 
  1058  0117                     	;# 
  1059  0118                     	;# 
  1060  0119                     	;# 
  1061  011A                     	;# 
  1062  011B                     	;# 
  1063  011D                     	;# 
  1064  011E                     	;# 
  1065  018C                     	;# 
  1066  018D                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0194                     	;# 
  1074  0195                     	;# 
  1075  0196                     	;# 
  1076  0199                     	;# 
  1077  019A                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019D                     	;# 
  1085  019E                     	;# 
  1086  019F                     	;# 
  1087  020C                     	;# 
  1088  020D                     	;# 
  1089  0211                     	;# 
  1090  0211                     	;# 
  1091  0212                     	;# 
  1092  0212                     	;# 
  1093  0213                     	;# 
  1094  0213                     	;# 
  1095  0214                     	;# 
  1096  0214                     	;# 
  1097  0215                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0216                     	;# 
  1101  0216                     	;# 
  1102  0217                     	;# 
  1103  0217                     	;# 
  1104  0219                     	;# 
  1105  021A                     	;# 
  1106  021B                     	;# 
  1107  021C                     	;# 
  1108  021D                     	;# 
  1109  021E                     	;# 
  1110  021F                     	;# 
  1111  0291                     	;# 
  1112  0291                     	;# 
  1113  0292                     	;# 
  1114  0293                     	;# 
  1115  0294                     	;# 
  1116  0295                     	;# 
  1117  0295                     	;# 
  1118  0296                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  029B                     	;# 
  1124  029C                     	;# 
  1125  029C                     	;# 
  1126  029D                     	;# 
  1127  029E                     	;# 
  1128  029E                     	;# 
  1129  0311                     	;# 
  1130  0311                     	;# 
  1131  0312                     	;# 
  1132  0313                     	;# 
  1133  0318                     	;# 
  1134  0318                     	;# 
  1135  0319                     	;# 
  1136  031A                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  039A                     	;# 
  1141  039C                     	;# 
  1142  039D                     	;# 
  1143  039E                     	;# 
  1144  039F                     	;# 
  1145  0415                     	;# 
  1146  0416                     	;# 
  1147  0417                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  0011                     	;# 
  1177  0012                     	;# 
  1178  0013                     	;# 
  1179  0014                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  001E                     	;# 
  1190  001F                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0093                     	;# 
  1196  0094                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0098                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  0111                     	;# 
  1211  0112                     	;# 
  1212  0113                     	;# 
  1213  0114                     	;# 
  1214  0115                     	;# 
  1215  0116                     	;# 
  1216  0117                     	;# 
  1217  0118                     	;# 
  1218  0119                     	;# 
  1219  011A                     	;# 
  1220  011B                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  018C                     	;# 
  1224  018D                     	;# 
  1225  0191                     	;# 
  1226  0191                     	;# 
  1227  0192                     	;# 
  1228  0193                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0194                     	;# 
  1232  0195                     	;# 
  1233  0196                     	;# 
  1234  0199                     	;# 
  1235  019A                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019C                     	;# 
  1242  019D                     	;# 
  1243  019E                     	;# 
  1244  019F                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  0211                     	;# 
  1248  0211                     	;# 
  1249  0212                     	;# 
  1250  0212                     	;# 
  1251  0213                     	;# 
  1252  0213                     	;# 
  1253  0214                     	;# 
  1254  0214                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0216                     	;# 
  1260  0217                     	;# 
  1261  0217                     	;# 
  1262  0219                     	;# 
  1263  021A                     	;# 
  1264  021B                     	;# 
  1265  021C                     	;# 
  1266  021D                     	;# 
  1267  021E                     	;# 
  1268  021F                     	;# 
  1269  0291                     	;# 
  1270  0291                     	;# 
  1271  0292                     	;# 
  1272  0293                     	;# 
  1273  0294                     	;# 
  1274  0295                     	;# 
  1275  0295                     	;# 
  1276  0296                     	;# 
  1277  0298                     	;# 
  1278  0298                     	;# 
  1279  0299                     	;# 
  1280  029A                     	;# 
  1281  029B                     	;# 
  1282  029C                     	;# 
  1283  029C                     	;# 
  1284  029D                     	;# 
  1285  029E                     	;# 
  1286  029E                     	;# 
  1287  0311                     	;# 
  1288  0311                     	;# 
  1289  0312                     	;# 
  1290  0313                     	;# 
  1291  0318                     	;# 
  1292  0318                     	;# 
  1293  0319                     	;# 
  1294  031A                     	;# 
  1295  0394                     	;# 
  1296  0395                     	;# 
  1297  0396                     	;# 
  1298  039A                     	;# 
  1299  039C                     	;# 
  1300  039D                     	;# 
  1301  039E                     	;# 
  1302  039F                     	;# 
  1303  0415                     	;# 
  1304  0416                     	;# 
  1305  0417                     	;# 
  1306  041C                     	;# 
  1307  041D                     	;# 
  1308  041E                     	;# 
  1309  0FE4                     	;# 
  1310  0FE5                     	;# 
  1311  0FE6                     	;# 
  1312  0FE7                     	;# 
  1313  0FE8                     	;# 
  1314  0FE9                     	;# 
  1315  0FEA                     	;# 
  1316  0FEB                     	;# 
  1317  0FED                     	;# 
  1318  0FEE                     	;# 
  1319  0FEF                     	;# 
  1320  0000                     	;# 
  1321  0001                     	;# 
  1322  0002                     	;# 
  1323  0003                     	;# 
  1324  0004                     	;# 
  1325  0005                     	;# 
  1326  0006                     	;# 
  1327  0007                     	;# 
  1328  0008                     	;# 
  1329  0009                     	;# 
  1330  000A                     	;# 
  1331  000B                     	;# 
  1332  000C                     	;# 
  1333  000D                     	;# 
  1334  0011                     	;# 
  1335  0012                     	;# 
  1336  0013                     	;# 
  1337  0014                     	;# 
  1338  0015                     	;# 
  1339  0016                     	;# 
  1340  0016                     	;# 
  1341  0017                     	;# 
  1342  0018                     	;# 
  1343  0019                     	;# 
  1344  001A                     	;# 
  1345  001B                     	;# 
  1346  001C                     	;# 
  1347  001E                     	;# 
  1348  001F                     	;# 
  1349  008C                     	;# 
  1350  008D                     	;# 
  1351  0091                     	;# 
  1352  0092                     	;# 
  1353  0093                     	;# 
  1354  0094                     	;# 
  1355  0095                     	;# 
  1356  0096                     	;# 
  1357  0097                     	;# 
  1358  0098                     	;# 
  1359  0099                     	;# 
  1360  009A                     	;# 
  1361  009B                     	;# 
  1362  009B                     	;# 
  1363  009C                     	;# 
  1364  009D                     	;# 
  1365  009E                     	;# 
  1366  010C                     	;# 
  1367  010D                     	;# 
  1368  0111                     	;# 
  1369  0112                     	;# 
  1370  0113                     	;# 
  1371  0114                     	;# 
  1372  0115                     	;# 
  1373  0116                     	;# 
  1374  0117                     	;# 
  1375  0118                     	;# 
  1376  0119                     	;# 
  1377  011A                     	;# 
  1378  011B                     	;# 
  1379  011D                     	;# 
  1380  011E                     	;# 
  1381  018C                     	;# 
  1382  018D                     	;# 
  1383  0191                     	;# 
  1384  0191                     	;# 
  1385  0192                     	;# 
  1386  0193                     	;# 
  1387  0193                     	;# 
  1388  0193                     	;# 
  1389  0194                     	;# 
  1390  0195                     	;# 
  1391  0196                     	;# 
  1392  0199                     	;# 
  1393  019A                     	;# 
  1394  019B                     	;# 
  1395  019B                     	;# 
  1396  019B                     	;# 
  1397  019B                     	;# 
  1398  019C                     	;# 
  1399  019C                     	;# 
  1400  019D                     	;# 
  1401  019E                     	;# 
  1402  019F                     	;# 
  1403  020C                     	;# 
  1404  020D                     	;# 
  1405  0211                     	;# 
  1406  0211                     	;# 
  1407  0212                     	;# 
  1408  0212                     	;# 
  1409  0213                     	;# 
  1410  0213                     	;# 
  1411  0214                     	;# 
  1412  0214                     	;# 
  1413  0215                     	;# 
  1414  0215                     	;# 
  1415  0215                     	;# 
  1416  0216                     	;# 
  1417  0216                     	;# 
  1418  0217                     	;# 
  1419  0217                     	;# 
  1420  0219                     	;# 
  1421  021A                     	;# 
  1422  021B                     	;# 
  1423  021C                     	;# 
  1424  021D                     	;# 
  1425  021E                     	;# 
  1426  021F                     	;# 
  1427  0291                     	;# 
  1428  0291                     	;# 
  1429  0292                     	;# 
  1430  0293                     	;# 
  1431  0294                     	;# 
  1432  0295                     	;# 
  1433  0295                     	;# 
  1434  0296                     	;# 
  1435  0298                     	;# 
  1436  0298                     	;# 
  1437  0299                     	;# 
  1438  029A                     	;# 
  1439  029B                     	;# 
  1440  029C                     	;# 
  1441  029C                     	;# 
  1442  029D                     	;# 
  1443  029E                     	;# 
  1444  029E                     	;# 
  1445  0311                     	;# 
  1446  0311                     	;# 
  1447  0312                     	;# 
  1448  0313                     	;# 
  1449  0318                     	;# 
  1450  0318                     	;# 
  1451  0319                     	;# 
  1452  031A                     	;# 
  1453  0394                     	;# 
  1454  0395                     	;# 
  1455  0396                     	;# 
  1456  039A                     	;# 
  1457  039C                     	;# 
  1458  039D                     	;# 
  1459  039E                     	;# 
  1460  039F                     	;# 
  1461  0415                     	;# 
  1462  0416                     	;# 
  1463  0417                     	;# 
  1464  041C                     	;# 
  1465  041D                     	;# 
  1466  041E                     	;# 
  1467  0FE4                     	;# 
  1468  0FE5                     	;# 
  1469  0FE6                     	;# 
  1470  0FE7                     	;# 
  1471  0FE8                     	;# 
  1472  0FE9                     	;# 
  1473  0FEA                     	;# 
  1474  0FEB                     	;# 
  1475  0FED                     	;# 
  1476  0FEE                     	;# 
  1477  0FEF                     	;# 
  1478  0000                     	;# 
  1479  0001                     	;# 
  1480  0002                     	;# 
  1481  0003                     	;# 
  1482  0004                     	;# 
  1483  0005                     	;# 
  1484  0006                     	;# 
  1485  0007                     	;# 
  1486  0008                     	;# 
  1487  0009                     	;# 
  1488  000A                     	;# 
  1489  000B                     	;# 
  1490  000C                     	;# 
  1491  000D                     	;# 
  1492  0011                     	;# 
  1493  0012                     	;# 
  1494  0013                     	;# 
  1495  0014                     	;# 
  1496  0015                     	;# 
  1497  0016                     	;# 
  1498  0016                     	;# 
  1499  0017                     	;# 
  1500  0018                     	;# 
  1501  0019                     	;# 
  1502  001A                     	;# 
  1503  001B                     	;# 
  1504  001C                     	;# 
  1505  001E                     	;# 
  1506  001F                     	;# 
  1507  008C                     	;# 
  1508  008D                     	;# 
  1509  0091                     	;# 
  1510  0092                     	;# 
  1511  0093                     	;# 
  1512  0094                     	;# 
  1513  0095                     	;# 
  1514  0096                     	;# 
  1515  0097                     	;# 
  1516  0098                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  010C                     	;# 
  1525  010D                     	;# 
  1526  0111                     	;# 
  1527  0112                     	;# 
  1528  0113                     	;# 
  1529  0114                     	;# 
  1530  0115                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  0118                     	;# 
  1534  0119                     	;# 
  1535  011A                     	;# 
  1536  011B                     	;# 
  1537  011D                     	;# 
  1538  011E                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020C                     	;# 
  1562  020D                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0219                     	;# 
  1579  021A                     	;# 
  1580  021B                     	;# 
  1581  021C                     	;# 
  1582  021D                     	;# 
  1583  021E                     	;# 
  1584  021F                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0294                     	;# 
  1590  0295                     	;# 
  1591  0295                     	;# 
  1592  0296                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  029B                     	;# 
  1598  029C                     	;# 
  1599  029C                     	;# 
  1600  029D                     	;# 
  1601  029E                     	;# 
  1602  029E                     	;# 
  1603  0311                     	;# 
  1604  0311                     	;# 
  1605  0312                     	;# 
  1606  0313                     	;# 
  1607  0318                     	;# 
  1608  0318                     	;# 
  1609  0319                     	;# 
  1610  031A                     	;# 
  1611  0394                     	;# 
  1612  0395                     	;# 
  1613  0396                     	;# 
  1614  039A                     	;# 
  1615  039C                     	;# 
  1616  039D                     	;# 
  1617  039E                     	;# 
  1618  039F                     	;# 
  1619  0415                     	;# 
  1620  0416                     	;# 
  1621  0417                     	;# 
  1622  041C                     	;# 
  1623  041D                     	;# 
  1624  041E                     	;# 
  1625  0FE4                     	;# 
  1626  0FE5                     	;# 
  1627  0FE6                     	;# 
  1628  0FE7                     	;# 
  1629  0FE8                     	;# 
  1630  0FE9                     	;# 
  1631  0FEA                     	;# 
  1632  0FEB                     	;# 
  1633  0FED                     	;# 
  1634  0FEE                     	;# 
  1635  0FEF                     	;# 
  1636  0000                     	;# 
  1637  0001                     	;# 
  1638  0002                     	;# 
  1639  0003                     	;# 
  1640  0004                     	;# 
  1641  0005                     	;# 
  1642  0006                     	;# 
  1643  0007                     	;# 
  1644  0008                     	;# 
  1645  0009                     	;# 
  1646  000A                     	;# 
  1647  000B                     	;# 
  1648  000C                     	;# 
  1649  000D                     	;# 
  1650  0011                     	;# 
  1651  0012                     	;# 
  1652  0013                     	;# 
  1653  0014                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  001E                     	;# 
  1664  001F                     	;# 
  1665  008C                     	;# 
  1666  008D                     	;# 
  1667  0091                     	;# 
  1668  0092                     	;# 
  1669  0093                     	;# 
  1670  0094                     	;# 
  1671  0095                     	;# 
  1672  0096                     	;# 
  1673  0097                     	;# 
  1674  0098                     	;# 
  1675  0099                     	;# 
  1676  009A                     	;# 
  1677  009B                     	;# 
  1678  009B                     	;# 
  1679  009C                     	;# 
  1680  009D                     	;# 
  1681  009E                     	;# 
  1682  010C                     	;# 
  1683  010D                     	;# 
  1684  0111                     	;# 
  1685  0112                     	;# 
  1686  0113                     	;# 
  1687  0114                     	;# 
  1688  0115                     	;# 
  1689  0116                     	;# 
  1690  0117                     	;# 
  1691  0118                     	;# 
  1692  0119                     	;# 
  1693  011A                     	;# 
  1694  011B                     	;# 
  1695  011D                     	;# 
  1696  011E                     	;# 
  1697  018C                     	;# 
  1698  018D                     	;# 
  1699  0191                     	;# 
  1700  0191                     	;# 
  1701  0192                     	;# 
  1702  0193                     	;# 
  1703  0193                     	;# 
  1704  0193                     	;# 
  1705  0194                     	;# 
  1706  0195                     	;# 
  1707  0196                     	;# 
  1708  0199                     	;# 
  1709  019A                     	;# 
  1710  019B                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019C                     	;# 
  1715  019C                     	;# 
  1716  019D                     	;# 
  1717  019E                     	;# 
  1718  019F                     	;# 
  1719  020C                     	;# 
  1720  020D                     	;# 
  1721  0211                     	;# 
  1722  0211                     	;# 
  1723  0212                     	;# 
  1724  0212                     	;# 
  1725  0213                     	;# 
  1726  0213                     	;# 
  1727  0214                     	;# 
  1728  0214                     	;# 
  1729  0215                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0216                     	;# 
  1733  0216                     	;# 
  1734  0217                     	;# 
  1735  0217                     	;# 
  1736  0219                     	;# 
  1737  021A                     	;# 
  1738  021B                     	;# 
  1739  021C                     	;# 
  1740  021D                     	;# 
  1741  021E                     	;# 
  1742  021F                     	;# 
  1743  0291                     	;# 
  1744  0291                     	;# 
  1745  0292                     	;# 
  1746  0293                     	;# 
  1747  0294                     	;# 
  1748  0295                     	;# 
  1749  0295                     	;# 
  1750  0296                     	;# 
  1751  0298                     	;# 
  1752  0298                     	;# 
  1753  0299                     	;# 
  1754  029A                     	;# 
  1755  029B                     	;# 
  1756  029C                     	;# 
  1757  029C                     	;# 
  1758  029D                     	;# 
  1759  029E                     	;# 
  1760  029E                     	;# 
  1761  0311                     	;# 
  1762  0311                     	;# 
  1763  0312                     	;# 
  1764  0313                     	;# 
  1765  0318                     	;# 
  1766  0318                     	;# 
  1767  0319                     	;# 
  1768  031A                     	;# 
  1769  0394                     	;# 
  1770  0395                     	;# 
  1771  0396                     	;# 
  1772  039A                     	;# 
  1773  039C                     	;# 
  1774  039D                     	;# 
  1775  039E                     	;# 
  1776  039F                     	;# 
  1777  0415                     	;# 
  1778  0416                     	;# 
  1779  0417                     	;# 
  1780  041C                     	;# 
  1781  041D                     	;# 
  1782  041E                     	;# 
  1783  0FE4                     	;# 
  1784  0FE5                     	;# 
  1785  0FE6                     	;# 
  1786  0FE7                     	;# 
  1787  0FE8                     	;# 
  1788  0FE9                     	;# 
  1789  0FEA                     	;# 
  1790  0FEB                     	;# 
  1791  0FED                     	;# 
  1792  0FEE                     	;# 
  1793  0FEF                     	;# 
  1794  0000                     	;# 
  1795  0001                     	;# 
  1796  0002                     	;# 
  1797  0003                     	;# 
  1798  0004                     	;# 
  1799  0005                     	;# 
  1800  0006                     	;# 
  1801  0007                     	;# 
  1802  0008                     	;# 
  1803  0009                     	;# 
  1804  000A                     	;# 
  1805  000B                     	;# 
  1806  000C                     	;# 
  1807  000D                     	;# 
  1808  0011                     	;# 
  1809  0012                     	;# 
  1810  0013                     	;# 
  1811  0014                     	;# 
  1812  0015                     	;# 
  1813  0016                     	;# 
  1814  0016                     	;# 
  1815  0017                     	;# 
  1816  0018                     	;# 
  1817  0019                     	;# 
  1818  001A                     	;# 
  1819  001B                     	;# 
  1820  001C                     	;# 
  1821  001E                     	;# 
  1822  001F                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0095                     	;# 
  1830  0096                     	;# 
  1831  0097                     	;# 
  1832  0098                     	;# 
  1833  0099                     	;# 
  1834  009A                     	;# 
  1835  009B                     	;# 
  1836  009B                     	;# 
  1837  009C                     	;# 
  1838  009D                     	;# 
  1839  009E                     	;# 
  1840  010C                     	;# 
  1841  010D                     	;# 
  1842  0111                     	;# 
  1843  0112                     	;# 
  1844  0113                     	;# 
  1845  0114                     	;# 
  1846  0115                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  0118                     	;# 
  1850  0119                     	;# 
  1851  011A                     	;# 
  1852  011B                     	;# 
  1853  011D                     	;# 
  1854  011E                     	;# 
  1855  018C                     	;# 
  1856  018D                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0194                     	;# 
  1864  0195                     	;# 
  1865  0196                     	;# 
  1866  0199                     	;# 
  1867  019A                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019C                     	;# 
  1873  019C                     	;# 
  1874  019D                     	;# 
  1875  019E                     	;# 
  1876  019F                     	;# 
  1877  020C                     	;# 
  1878  020D                     	;# 
  1879  0211                     	;# 
  1880  0211                     	;# 
  1881  0212                     	;# 
  1882  0212                     	;# 
  1883  0213                     	;# 
  1884  0213                     	;# 
  1885  0214                     	;# 
  1886  0214                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0216                     	;# 
  1891  0216                     	;# 
  1892  0217                     	;# 
  1893  0217                     	;# 
  1894  0219                     	;# 
  1895  021A                     	;# 
  1896  021B                     	;# 
  1897  021C                     	;# 
  1898  021D                     	;# 
  1899  021E                     	;# 
  1900  021F                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0298                     	;# 
  1910  0298                     	;# 
  1911  0299                     	;# 
  1912  029A                     	;# 
  1913  029B                     	;# 
  1914  029C                     	;# 
  1915  029C                     	;# 
  1916  029D                     	;# 
  1917  029E                     	;# 
  1918  029E                     	;# 
  1919  0311                     	;# 
  1920  0311                     	;# 
  1921  0312                     	;# 
  1922  0313                     	;# 
  1923  0318                     	;# 
  1924  0318                     	;# 
  1925  0319                     	;# 
  1926  031A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  039A                     	;# 
  1931  039C                     	;# 
  1932  039D                     	;# 
  1933  039E                     	;# 
  1934  039F                     	;# 
  1935  0415                     	;# 
  1936  0416                     	;# 
  1937  0417                     	;# 
  1938  041C                     	;# 
  1939  041D                     	;# 
  1940  041E                     	;# 
  1941  0FE4                     	;# 
  1942  0FE5                     	;# 
  1943  0FE6                     	;# 
  1944  0FE7                     	;# 
  1945  0FE8                     	;# 
  1946  0FE9                     	;# 
  1947  0FEA                     	;# 
  1948  0FEB                     	;# 
  1949  0FED                     	;# 
  1950  0FEE                     	;# 
  1951  0FEF                     	;# 
  1952  0000                     	;# 
  1953  0001                     	;# 
  1954  0002                     	;# 
  1955  0003                     	;# 
  1956  0004                     	;# 
  1957  0005                     	;# 
  1958  0006                     	;# 
  1959  0007                     	;# 
  1960  0008                     	;# 
  1961  0009                     	;# 
  1962  000A                     	;# 
  1963  000B                     	;# 
  1964  000C                     	;# 
  1965  000D                     	;# 
  1966  0011                     	;# 
  1967  0012                     	;# 
  1968  0013                     	;# 
  1969  0014                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  001E                     	;# 
  1980  001F                     	;# 
  1981  008C                     	;# 
  1982  008D                     	;# 
  1983  0091                     	;# 
  1984  0092                     	;# 
  1985  0093                     	;# 
  1986  0094                     	;# 
  1987  0095                     	;# 
  1988  0096                     	;# 
  1989  0097                     	;# 
  1990  0098                     	;# 
  1991  0099                     	;# 
  1992  009A                     	;# 
  1993  009B                     	;# 
  1994  009B                     	;# 
  1995  009C                     	;# 
  1996  009D                     	;# 
  1997  009E                     	;# 
  1998  010C                     	;# 
  1999  010D                     	;# 
  2000  0111                     	;# 
  2001  0112                     	;# 
  2002  0113                     	;# 
  2003  0114                     	;# 
  2004  0115                     	;# 
  2005  0116                     	;# 
  2006  0117                     	;# 
  2007  0118                     	;# 
  2008  0119                     	;# 
  2009  011A                     	;# 
  2010  011B                     	;# 
  2011  011D                     	;# 
  2012  011E                     	;# 
  2013  018C                     	;# 
  2014  018D                     	;# 
  2015  0191                     	;# 
  2016  0191                     	;# 
  2017  0192                     	;# 
  2018  0193                     	;# 
  2019  0193                     	;# 
  2020  0193                     	;# 
  2021  0194                     	;# 
  2022  0195                     	;# 
  2023  0196                     	;# 
  2024  0199                     	;# 
  2025  019A                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019D                     	;# 
  2033  019E                     	;# 
  2034  019F                     	;# 
  2035  020C                     	;# 
  2036  020D                     	;# 
  2037  0211                     	;# 
  2038  0211                     	;# 
  2039  0212                     	;# 
  2040  0212                     	;# 
  2041  0213                     	;# 
  2042  0213                     	;# 
  2043  0214                     	;# 
  2044  0214                     	;# 
  2045  0215                     	;# 
  2046  0215                     	;# 
  2047  0215                     	;# 
  2048  0216                     	;# 
  2049  0216                     	;# 
  2050  0217                     	;# 
  2051  0217                     	;# 
  2052  0219                     	;# 
  2053  021A                     	;# 
  2054  021B                     	;# 
  2055  021C                     	;# 
  2056  021D                     	;# 
  2057  021E                     	;# 
  2058  021F                     	;# 
  2059  0291                     	;# 
  2060  0291                     	;# 
  2061  0292                     	;# 
  2062  0293                     	;# 
  2063  0294                     	;# 
  2064  0295                     	;# 
  2065  0295                     	;# 
  2066  0296                     	;# 
  2067  0298                     	;# 
  2068  0298                     	;# 
  2069  0299                     	;# 
  2070  029A                     	;# 
  2071  029B                     	;# 
  2072  029C                     	;# 
  2073  029C                     	;# 
  2074  029D                     	;# 
  2075  029E                     	;# 
  2076  029E                     	;# 
  2077  0311                     	;# 
  2078  0311                     	;# 
  2079  0312                     	;# 
  2080  0313                     	;# 
  2081  0318                     	;# 
  2082  0318                     	;# 
  2083  0319                     	;# 
  2084  031A                     	;# 
  2085  0394                     	;# 
  2086  0395                     	;# 
  2087  0396                     	;# 
  2088  039A                     	;# 
  2089  039C                     	;# 
  2090  039D                     	;# 
  2091  039E                     	;# 
  2092  039F                     	;# 
  2093  0415                     	;# 
  2094  0416                     	;# 
  2095  0417                     	;# 
  2096  041C                     	;# 
  2097  041D                     	;# 
  2098  041E                     	;# 
  2099  0FE4                     	;# 
  2100  0FE5                     	;# 
  2101  0FE6                     	;# 
  2102  0FE7                     	;# 
  2103  0FE8                     	;# 
  2104  0FE9                     	;# 
  2105  0FEA                     	;# 
  2106  0FEB                     	;# 
  2107  0FED                     	;# 
  2108  0FEE                     	;# 
  2109  0FEF                     	;# 
  2110  0000                     	;# 
  2111  0001                     	;# 
  2112  0002                     	;# 
  2113  0003                     	;# 
  2114  0004                     	;# 
  2115  0005                     	;# 
  2116  0006                     	;# 
  2117  0007                     	;# 
  2118  0008                     	;# 
  2119  0009                     	;# 
  2120  000A                     	;# 
  2121  000B                     	;# 
  2122  000C                     	;# 
  2123  000D                     	;# 
  2124  0011                     	;# 
  2125  0012                     	;# 
  2126  0013                     	;# 
  2127  0014                     	;# 
  2128  0015                     	;# 
  2129  0016                     	;# 
  2130  0016                     	;# 
  2131  0017                     	;# 
  2132  0018                     	;# 
  2133  0019                     	;# 
  2134  001A                     	;# 
  2135  001B                     	;# 
  2136  001C                     	;# 
  2137  001E                     	;# 
  2138  001F                     	;# 
  2139  008C                     	;# 
  2140  008D                     	;# 
  2141  0091                     	;# 
  2142  0092                     	;# 
  2143  0093                     	;# 
  2144  0094                     	;# 
  2145  0095                     	;# 
  2146  0096                     	;# 
  2147  0097                     	;# 
  2148  0098                     	;# 
  2149  0099                     	;# 
  2150  009A                     	;# 
  2151  009B                     	;# 
  2152  009B                     	;# 
  2153  009C                     	;# 
  2154  009D                     	;# 
  2155  009E                     	;# 
  2156  010C                     	;# 
  2157  010D                     	;# 
  2158  0111                     	;# 
  2159  0112                     	;# 
  2160  0113                     	;# 
  2161  0114                     	;# 
  2162  0115                     	;# 
  2163  0116                     	;# 
  2164  0117                     	;# 
  2165  0118                     	;# 
  2166  0119                     	;# 
  2167  011A                     	;# 
  2168  011B                     	;# 
  2169  011D                     	;# 
  2170  011E                     	;# 
  2171  018C                     	;# 
  2172  018D                     	;# 
  2173  0191                     	;# 
  2174  0191                     	;# 
  2175  0192                     	;# 
  2176  0193                     	;# 
  2177  0193                     	;# 
  2178  0193                     	;# 
  2179  0194                     	;# 
  2180  0195                     	;# 
  2181  0196                     	;# 
  2182  0199                     	;# 
  2183  019A                     	;# 
  2184  019B                     	;# 
  2185  019B                     	;# 
  2186  019B                     	;# 
  2187  019B                     	;# 
  2188  019C                     	;# 
  2189  019C                     	;# 
  2190  019D                     	;# 
  2191  019E                     	;# 
  2192  019F                     	;# 
  2193  020C                     	;# 
  2194  020D                     	;# 
  2195  0211                     	;# 
  2196  0211                     	;# 
  2197  0212                     	;# 
  2198  0212                     	;# 
  2199  0213                     	;# 
  2200  0213                     	;# 
  2201  0214                     	;# 
  2202  0214                     	;# 
  2203  0215                     	;# 
  2204  0215                     	;# 
  2205  0215                     	;# 
  2206  0216                     	;# 
  2207  0216                     	;# 
  2208  0217                     	;# 
  2209  0217                     	;# 
  2210  0219                     	;# 
  2211  021A                     	;# 
  2212  021B                     	;# 
  2213  021C                     	;# 
  2214  021D                     	;# 
  2215  021E                     	;# 
  2216  021F                     	;# 
  2217  0291                     	;# 
  2218  0291                     	;# 
  2219  0292                     	;# 
  2220  0293                     	;# 
  2221  0294                     	;# 
  2222  0295                     	;# 
  2223  0295                     	;# 
  2224  0296                     	;# 
  2225  0298                     	;# 
  2226  0298                     	;# 
  2227  0299                     	;# 
  2228  029A                     	;# 
  2229  029B                     	;# 
  2230  029C                     	;# 
  2231  029C                     	;# 
  2232  029D                     	;# 
  2233  029E                     	;# 
  2234  029E                     	;# 
  2235  0311                     	;# 
  2236  0311                     	;# 
  2237  0312                     	;# 
  2238  0313                     	;# 
  2239  0318                     	;# 
  2240  0318                     	;# 
  2241  0319                     	;# 
  2242  031A                     	;# 
  2243  0394                     	;# 
  2244  0395                     	;# 
  2245  0396                     	;# 
  2246  039A                     	;# 
  2247  039C                     	;# 
  2248  039D                     	;# 
  2249  039E                     	;# 
  2250  039F                     	;# 
  2251  0415                     	;# 
  2252  0416                     	;# 
  2253  0417                     	;# 
  2254  041C                     	;# 
  2255  041D                     	;# 
  2256  041E                     	;# 
  2257  0FE4                     	;# 
  2258  0FE5                     	;# 
  2259  0FE6                     	;# 
  2260  0FE7                     	;# 
  2261  0FE8                     	;# 
  2262  0FE9                     	;# 
  2263  0FEA                     	;# 
  2264  0FEB                     	;# 
  2265  0FED                     	;# 
  2266  0FEE                     	;# 
  2267  0FEF                     	;# 
  2268                           
  2269                           	psect	stringtext
  2270  07CA                     __pstringtext:	
  2271  07CA                     _fp_x0_a:	
  2272  07CA  34D0               	retlw	208
  2273  07CB  34D2               	retlw	210
  2274  07CC  3402               	retlw	2
  2275  07CD  3400               	retlw	0
  2276  07CE                     __end_of_fp_x0_a:	
  2277  07CE                     _fp_x0_b:	
  2278  07CE  34E4               	retlw	228
  2279  07CF  34E1               	retlw	225
  2280  07D0  3401               	retlw	1
  2281  07D1  3400               	retlw	0
  2282  07D2                     __end_of_fp_x0_b:	
  2283  07D2                     _ratio_mph:	
  2284  07D2  34F9               	retlw	249
  2285  07D3  349E               	retlw	158
  2286  07D4  3400               	retlw	0
  2287  07D5  3400               	retlw	0
  2288  07D6                     __end_of_ratio_mph:	
  2289  07D6                     convert_to_fp@one:	
  2290  07D6  3401               	retlw	1
  2291  07D7  3400               	retlw	0
  2292  07D8                     __end_ofconvert_to_fp@one:	
  2293  000B                     _INTCONbits	set	11
  2294  0011                     _PIR1bits	set	17
  2295  000D                     _PORTBbits	set	13
  2296  001B                     _PR2	set	27
  2297  001C                     _T2CON	set	28
  2298  001C                     _T2CONbits	set	28
  2299  0015                     _TMR0	set	21
  2300  001A                     _TMR2	set	26
  2301  0095                     _OPTION_REG	set	149
  2302  0095                     _OPTION_REGbits	set	149
  2303  0099                     _OSCCON	set	153
  2304  009A                     _OSCSTAT	set	154
  2305  0098                     _OSCTUNE	set	152
  2306  0091                     _PIE1bits	set	145
  2307  008C                     _TRISA	set	140
  2308  008D                     _TRISB	set	141
  2309  04D6                     _PLLR	set	1238
  2310  011D                     _APFCON0	set	285
  2311  011E                     _APFCON1	set	286
  2312  010C                     _LATA	set	268
  2313  010D                     _LATB	set	269
  2314  0862                     _LATA2	set	2146
  2315  018C                     _ANSELA	set	396
  2316  018D                     _ANSELB	set	397
  2317  019F                     _BAUDCON	set	415
  2318  0192                     _EEADRH	set	402
  2319  0191                     _EEADRL	set	401
  2320  0195                     _EECON1bits	set	405
  2321  0196                     _EECON2	set	406
  2322  0194                     _EEDATH	set	404
  2323  0193                     _EEDATL	set	403
  2324  0199                     _RCREG	set	409
  2325  019D                     _RCSTA	set	413
  2326  019D                     _RCSTAbits	set	413
  2327  019C                     _SPBRGH	set	412
  2328  019B                     _SPBRGL	set	411
  2329  019A                     _TXREG	set	410
  2330  019E                     _TXSTA	set	414
  2331  020C                     _WPUA	set	524
  2332  020D                     _WPUB	set	525
  2333  0293                     _CCP1CON	set	659
  2334  0292                     _CCPR1H	set	658
  2335  0291                     _CCPR1L	set	657
  2336  029E                     _CCPTMRS0bits	set	670
  2337  0295                     _ECCP1AS	set	661
  2338  0296                     _PSTR1CON	set	662
  2339  0294                     _PWM1CON	set	660
  2340  07D8                     STR_1:	
  2341  07D8  3424               	retlw	36	;'$'
  2342  07D9  3450               	retlw	80	;'P'
  2343  07DA  344D               	retlw	77	;'M'
  2344  07DB  3454               	retlw	84	;'T'
  2345  07DC  344B               	retlw	75	;'K'
  2346  07DD  3433               	retlw	51	;'3'
  2347  07DE  3431               	retlw	49	;'1'
  2348  07DF  3434               	retlw	52	;'4'
  2349  07E0  342C               	retlw	44	;','
  2350  07E1  3430               	retlw	48	;'0'
  2351  07E2  342C               	retlw	44	;','
  2352  07E3  3430               	retlw	48	;'0'
  2353  07E4  342C               	retlw	44	;','
  2354  07E5  3431               	retlw	49	;'1'
  2355  07E6  342C               	retlw	44	;','
  2356  07E7  3430               	retlw	48	;'0'
  2357  07E8  342C               	retlw	44	;','
  2358  07E9  3430               	retlw	48	;'0'
  2359  07EA  342C               	retlw	44	;','
  2360  07EB  3430               	retlw	48	;'0'
  2361  07EC  342C               	retlw	44	;','
  2362  07ED  3430               	retlw	48	;'0'
  2363  07EE  342C               	retlw	44	;','
  2364  07EF  3430               	retlw	48	;'0'
  2365  07F0  342C               	retlw	44	;','
  2366  07F1  3430               	retlw	48	;'0'
  2367  07F2  342C               	retlw	44	;','
  2368  07F3  3430               	retlw	48	;'0'
  2369  07F4  342C               	retlw	44	;','
  2370  07F5  3430               	retlw	48	;'0'
  2371  07F6  342C               	retlw	44	;','
  2372  07F7  3430               	retlw	48	;'0'
  2373  07F8  342C               	retlw	44	;','
  2374  07F9  3430               	retlw	48	;'0'
  2375  07FA  342C               	retlw	44	;','
  2376  07FB  3430               	retlw	48	;'0'
  2377  07FC  342C               	retlw	44	;','
  2378  07FD  3430               	retlw	48	;'0'
  2379  07FE  342C               	retlw	44	;','
  2380  07FF  3430               	retlw	48	;'0'
  2381  0800  342C               	retlw	44	;','
  2382  0801  3430               	retlw	48	;'0'
  2383  0802  342C               	retlw	44	;','
  2384  0803  3430               	retlw	48	;'0'
  2385  0804  342C               	retlw	44	;','
  2386  0805  3430               	retlw	48	;'0'
  2387  0806  342A               	retlw	42	;'*'
  2388  0807  3432               	retlw	50	;'2'
  2389  0808  3439               	retlw	57	;'9'
  2390  0809  340D               	retlw	13
  2391  080A  340A               	retlw	10
  2392  080B  3400               	retlw	0
  2393  080C                     STR_2:	
  2394  080C  3424               	retlw	36	;'$'
  2395  080D  3450               	retlw	80	;'P'
  2396  080E  344D               	retlw	77	;'M'
  2397  080F  3454               	retlw	84	;'T'
  2398  0810  344B               	retlw	75	;'K'
  2399  0811  3432               	retlw	50	;'2'
  2400  0812  3432               	retlw	50	;'2'
  2401  0813  3430               	retlw	48	;'0'
  2402  0814  342C               	retlw	44	;','
  2403  0815  3431               	retlw	49	;'1'
  2404  0816  3430               	retlw	48	;'0'
  2405  0817  3430               	retlw	48	;'0'
  2406  0818  342A               	retlw	42	;'*'
  2407  0819  3432               	retlw	50	;'2'
  2408  081A  3446               	retlw	70	;'F'
  2409  081B  340D               	retlw	13
  2410  081C  340A               	retlw	10
  2411  081D  3400               	retlw	0
  2412                           
  2413                           ; #config settings
  2414  0000                     
  2415                           	psect	cinit
  2416  002B                     start_initialization:	
  2417  002B                     __initialization:	
  2418                           
  2419                           ; Clear objects allocated to COMMON
  2420  002B  01F6               	clrf	__pbssCOMMON& (0+127)
  2421  002C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2422  002D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2423  002E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2424                           
  2425                           ; Clear objects allocated to BANK0
  2426  002F  3054               	movlw	low __pbssBANK0
  2427  0030  0084               	movwf	4
  2428  0031  3000               	movlw	high __pbssBANK0
  2429  0032  0085               	movwf	5
  2430  0033  300A               	movlw	10
  2431  0034  3189  21A6  3180   	fcall	clear_ram0
  2432                           
  2433                           ; Clear objects allocated to BANK1
  2434  0037  30A0               	movlw	low __pbssBANK1
  2435  0038  0084               	movwf	4
  2436  0039  3000               	movlw	high __pbssBANK1
  2437  003A  0085               	movwf	5
  2438  003B  304D               	movlw	77
  2439  003C  3189  21A6         	fcall	clear_ram0
  2440  003E                     end_of_initialization:	
  2441                           ;End of C runtime variable initialization code
  2442                           
  2443  003E                     __end_of__initialization:	
  2444  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2445  003F  0020               	movlb	0
  2446  0040  3180  2842         	ljmp	_main	;jump to C main() function
  2447                           
  2448                           	psect	bssCOMMON
  2449  0076                     __pbssCOMMON:	
  2450  0076                     _m_LED:	
  2451  0076                     	ds	2
  2452  0078                     _eusartRxCount:	
  2453  0078                     	ds	1
  2454  0079                     _timer0ReloadVal:	
  2455  0079                     	ds	1
  2456                           
  2457                           	psect	bssBANK0
  2458  0054                     __pbssBANK0:	
  2459  0054                     _m_button:	
  2460  0054                     	ds	7
  2461  005B                     _eusartTxBufferRemaining:	
  2462  005B                     	ds	1
  2463  005C                     _eusartTxHead:	
  2464  005C                     	ds	1
  2465  005D                     _eusartTxTail:	
  2466  005D                     	ds	1
  2467                           
  2468                           	psect	bssBANK1
  2469  00A0                     __pbssBANK1:	
  2470  00A0                     _eusartRxBuffer:	
  2471  00A0                     	ds	8
  2472  00A8                     _eusartTxBuffer:	
  2473  00A8                     	ds	8
  2474  00B0                     _speed:	
  2475  00B0                     	ds	4
  2476  00B4                     TMR0_ISR@CountCallBack:	
  2477  00B4                     	ds	2
  2478  00B6                     _TMR0_InterruptHandler:	
  2479  00B6                     	ds	2
  2480  00B8                     _motor:	
  2481  00B8                     	ds	2
  2482  00BA                     _eusartRxHead:	
  2483  00BA                     	ds	1
  2484  00BB                     _eusartRxTail:	
  2485  00BB                     	ds	1
  2486  00BC                     _m_conf:	
  2487  00BC                     	ds	47
  2488  00EB                     _m_crc:	
  2489  00EB                     	ds	2
  2490                           
  2491                           	psect	clrtext
  2492  09A6                     clear_ram0:	
  2493                           ;	Called with FSR0 containing the base address, and
  2494                           ;	WREG with the size to clear
  2495                           
  2496  09A6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2497  09A7                     clrloop0:	
  2498  09A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2499  09A8  3101               	addfsr 0,1
  2500  09A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2501  09AA  29A7               	goto	clrloop0	;have we reached the end yet?
  2502  09AB  3400               	retlw	0	;all done for this memory range, return
  2503                           
  2504                           	psect	cstackBANK2
  2505  0120                     __pcstackBANK2:	
  2506  0120                     main@fp_motor:	
  2507                           
  2508                           ; 4 bytes @ 0x0
  2509  0120                     	ds	4
  2510  0124                     main@done:	
  2511                           
  2512                           ; 1 bytes @ 0x4
  2513  0124                     	ds	1
  2514  0125                     main@speed_int:	
  2515                           
  2516                           ; 2 bytes @ 0x5
  2517  0125                     	ds	2
  2518  0127                     main@tmp:	
  2519                           
  2520                           ; 4 bytes @ 0x7
  2521  0127                     	ds	4
  2522  012B                     main@a:	
  2523                           
  2524                           ; 4 bytes @ 0xB
  2525  012B                     	ds	4
  2526  012F                     main@b:	
  2527                           
  2528                           ; 4 bytes @ 0xF
  2529  012F                     	ds	4
  2530  0133                     main@new_motor:	
  2531                           
  2532                           ; 2 bytes @ 0x13
  2533  0133                     	ds	2
  2534  0135                     main@i:	
  2535                           
  2536                           ; 1 bytes @ 0x15
  2537  0135                     	ds	1
  2538                           
  2539                           	psect	cstackCOMMON
  2540  0070                     __pcstackCOMMON:	
  2541  0070                     ?_PIN_MANAGER_Initialize:	
  2542  0070                     ?_OSCILLATOR_Initialize:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545  0070                     ?_EPWM1_Initialize:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_TMR2_Initialize:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ?_TMR0_Initialize:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_EUSART_Initialize:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_TMR0_ISR:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ?_EUSART_Transmit_ISR:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ??_EUSART_Transmit_ISR:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ?_EUSART_Receive_ISR:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0070                     ??_EUSART_Receive_ISR:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0070                     ?_TMR0_DefaultInterruptHandler:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575  0070                     ??_TMR0_DefaultInterruptHandler:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578  0070                     ?_TMR0_CallBack:	
  2579                           ; 1 bytes @ 0x0
  2580                           
  2581  0070                     ?_TMR2_StartTimer:	
  2582                           ; 1 bytes @ 0x0
  2583                           
  2584  0070                     ?_LED_set_state:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0070                     ?_my10msTimerISR:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0070                     ?_load_calibration_from_EEPROM:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0070                     ?_button_init:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0070                     ?_perform_calibration:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0070                     ?_write_calibration_to_EEPROM:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0070                     ?_GPS_Initialize:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605  0070                     ?_GPS_read_speed:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0070                     ?_LED_update_loop:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0070                     ??_LED_update_loop:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0070                     ?_button_update_loop:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ?_SYSTEM_Initialize:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?_INTERRUPT_InterruptManager:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ?_EUSART_Read:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?_EUSART_Write:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ?_putch:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ?_DATAEE_ReadByte:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ?_main:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ?_double_fast_blink:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ?_get_button_state:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0070                     ?i1_get_button_state:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0070                     ??i1_get_button_state:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0070                     i1get_button_state@state:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653                           
  2654                           ; 1 bytes @ 0x0
  2655  0070                     	ds	1
  2656  0071                     ??_button_update_loop:	
  2657                           
  2658                           ; 1 bytes @ 0x1
  2659  0071                     	ds	1
  2660  0072                     button_update_loop@current_state:	
  2661                           
  2662                           ; 1 bytes @ 0x2
  2663  0072                     	ds	1
  2664  0073                     ??_TMR0_ISR:	
  2665  0073                     ??_TMR0_CallBack:	
  2666                           ; 1 bytes @ 0x3
  2667                           
  2668  0073                     ??_my10msTimerISR:	
  2669                           ; 1 bytes @ 0x3
  2670                           
  2671  0073                     ??_INTERRUPT_InterruptManager:	
  2672                           ; 1 bytes @ 0x3
  2673                           
  2674                           
  2675                           ; 1 bytes @ 0x3
  2676  0073                     	ds	1
  2677  0074                     ??_PIN_MANAGER_Initialize:	
  2678  0074                     ??_OSCILLATOR_Initialize:	
  2679                           ; 1 bytes @ 0x4
  2680                           
  2681  0074                     ??_EPWM1_Initialize:	
  2682                           ; 1 bytes @ 0x4
  2683                           
  2684  0074                     ??_TMR2_Initialize:	
  2685                           ; 1 bytes @ 0x4
  2686                           
  2687  0074                     ??_EUSART_Initialize:	
  2688                           ; 1 bytes @ 0x4
  2689                           
  2690  0074                     ?_TMR0_SetInterruptHandler:	
  2691                           ; 1 bytes @ 0x4
  2692                           
  2693  0074                     ??_TMR2_StartTimer:	
  2694                           ; 1 bytes @ 0x4
  2695                           
  2696  0074                     ??_LED_set_state:	
  2697                           ; 1 bytes @ 0x4
  2698                           
  2699  0074                     ??_EUSART_Read:	
  2700                           ; 1 bytes @ 0x4
  2701                           
  2702  0074                     ??_EUSART_Write:	
  2703                           ; 1 bytes @ 0x4
  2704                           
  2705  0074                     ?_EPWM1_LoadDutyValue:	
  2706                           ; 1 bytes @ 0x4
  2707                           
  2708  0074                     ?_DATAEE_WriteByte:	
  2709                           ; 1 bytes @ 0x4
  2710                           
  2711  0074                     ??_DATAEE_ReadByte:	
  2712                           ; 1 bytes @ 0x4
  2713                           
  2714  0074                     ??_get_button_state:	
  2715                           ; 1 bytes @ 0x4
  2716                           
  2717  0074                     ??___wmul:	
  2718                           ; 1 bytes @ 0x4
  2719                           
  2720  0074                     ??___lmul:	
  2721                           ; 1 bytes @ 0x4
  2722                           
  2723  0074                     DATAEE_WriteByte@bData:	
  2724                           ; 1 bytes @ 0x4
  2725                           
  2726  0074                     DATAEE_ReadByte@bAdd:	
  2727                           ; 1 bytes @ 0x4
  2728                           
  2729  0074                     get_button_state@state:	
  2730                           ; 1 bytes @ 0x4
  2731                           
  2732  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  2733                           ; 1 bytes @ 0x4
  2734                           
  2735  0074                     EPWM1_LoadDutyValue@dutyValue:	
  2736                           ; 2 bytes @ 0x4
  2737                           
  2738  0074                     ___wmul@product:	
  2739                           ; 2 bytes @ 0x4
  2740                           
  2741                           
  2742                           ; 2 bytes @ 0x4
  2743  0074                     	ds	1
  2744  0075                     ??_load_calibration_from_EEPROM:	
  2745  0075                     ??_button_init:	
  2746                           ; 1 bytes @ 0x5
  2747                           
  2748  0075                     ??_write_calibration_to_EEPROM:	
  2749                           ; 1 bytes @ 0x5
  2750                           
  2751  0075                     ??_DATAEE_WriteByte:	
  2752                           ; 1 bytes @ 0x5
  2753                           
  2754  0075                     EUSART_Read@readValue:	
  2755                           ; 1 bytes @ 0x5
  2756                           
  2757  0075                     EUSART_Write@txData:	
  2758                           ; 1 bytes @ 0x5
  2759                           
  2760  0075                     LED_set_state@new_state:	
  2761                           ; 1 bytes @ 0x5
  2762                           
  2763                           
  2764                           ; 1 bytes @ 0x5
  2765  0075                     	ds	1
  2766  0076                     ??_TMR0_SetInterruptHandler:	
  2767  0076                     ??_SYSTEM_Initialize:	
  2768                           ; 1 bytes @ 0x6
  2769                           
  2770  0076                     ??_putch:	
  2771                           ; 1 bytes @ 0x6
  2772                           
  2773                           
  2774                           	psect	cstackBANK0
  2775  0020                     __pcstackBANK0:	
  2776                           ; 1 bytes @ 0x6
  2777                           
  2778  0020                     ??_TMR0_Initialize:	
  2779  0020                     ??_EPWM1_LoadDutyValue:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0020                     ??_double_fast_blink:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0020                     ?_crc_update:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0020                     ?___wmul:	
  2789                           ; 2 bytes @ 0x0
  2790                           
  2791  0020                     ?___lmul:	
  2792                           ; 2 bytes @ 0x0
  2793                           
  2794  0020                     putch@txData:	
  2795                           ; 4 bytes @ 0x0
  2796                           
  2797  0020                     DATAEE_WriteByte@bAdd:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0020                     crc_update@old_crc:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0020                     ___wmul@multiplier:	
  2804                           ; 2 bytes @ 0x0
  2805                           
  2806  0020                     ___lmul@multiplier:	
  2807                           ; 2 bytes @ 0x0
  2808                           
  2809                           
  2810                           ; 4 bytes @ 0x0
  2811  0020                     	ds	1
  2812  0021                     ?_printf:	
  2813  0021                     DATAEE_WriteByte@GIEBitValue:	
  2814                           ; 2 bytes @ 0x1
  2815                           
  2816  0021                     printf@f:	
  2817                           ; 1 bytes @ 0x1
  2818                           
  2819                           
  2820                           ; 2 bytes @ 0x1
  2821  0021                     	ds	1
  2822  0022                     crc_update@data:	
  2823  0022                     ___wmul@multiplicand:	
  2824                           ; 1 bytes @ 0x2
  2825                           
  2826                           
  2827                           ; 2 bytes @ 0x2
  2828  0022                     	ds	1
  2829  0023                     ??_perform_calibration:	
  2830  0023                     ??_printf:	
  2831                           ; 1 bytes @ 0x3
  2832                           
  2833  0023                     ??_crc_update:	
  2834                           ; 1 bytes @ 0x3
  2835                           
  2836                           
  2837                           ; 1 bytes @ 0x3
  2838  0023                     	ds	1
  2839  0024                     ?_convert_to_fp:	
  2840  0024                     convert_to_fp@int_part:	
  2841                           ; 4 bytes @ 0x4
  2842                           
  2843  0024                     ___lmul@multiplicand:	
  2844                           ; 2 bytes @ 0x4
  2845                           
  2846                           
  2847                           ; 4 bytes @ 0x4
  2848  0024                     	ds	2
  2849  0026                     perform_calibration@done:	
  2850  0026                     printf@ap:	
  2851                           ; 1 bytes @ 0x6
  2852                           
  2853  0026                     convert_to_fp@fract_part:	
  2854                           ; 1 bytes @ 0x6
  2855                           
  2856                           
  2857                           ; 2 bytes @ 0x6
  2858  0026                     	ds	1
  2859  0027                     perform_calibration@replay:	
  2860  0027                     printf@c:	
  2861                           ; 1 bytes @ 0x7
  2862                           
  2863                           
  2864                           ; 1 bytes @ 0x7
  2865  0027                     	ds	1
  2866  0028                     ??_GPS_Initialize:	
  2867  0028                     ??_convert_to_fp:	
  2868                           ; 1 bytes @ 0x8
  2869                           
  2870  0028                     perform_calibration@__delay_tmp:	
  2871                           ; 1 bytes @ 0x8
  2872                           
  2873  0028                     ___lmul@product:	
  2874                           ; 1 bytes @ 0x8
  2875                           
  2876                           
  2877                           ; 4 bytes @ 0x8
  2878  0028                     	ds	1
  2879  0029                     perform_calibration@__delay_tmp_899:	
  2880                           
  2881                           ; 1 bytes @ 0x9
  2882  0029                     	ds	1
  2883  002A                     perform_calibration@__delay_tmp_900:	
  2884                           
  2885                           ; 1 bytes @ 0xA
  2886  002A                     	ds	1
  2887  002B                     GPS_Initialize@__delay_tmp:	
  2888  002B                     perform_calibration@__delay_tmp_902:	
  2889                           ; 1 bytes @ 0xB
  2890                           
  2891                           
  2892                           ; 1 bytes @ 0xB
  2893  002B                     	ds	1
  2894  002C                     ?_multiply_fp:	
  2895  002C                     perform_calibration@__delay_tmp_903:	
  2896                           ; 4 bytes @ 0xC
  2897                           
  2898  002C                     multiply_fp@n1:	
  2899                           ; 1 bytes @ 0xC
  2900                           
  2901                           
  2902                           ; 4 bytes @ 0xC
  2903  002C                     	ds	1
  2904  002D                     perform_calibration@i:	
  2905  002D                     crc_update@crc:	
  2906                           ; 1 bytes @ 0xD
  2907                           
  2908                           
  2909                           ; 2 bytes @ 0xD
  2910  002D                     	ds	1
  2911  002E                     perform_calibration@m_motor:	
  2912                           
  2913                           ; 2 bytes @ 0xE
  2914  002E                     	ds	1
  2915  002F                     crc_update@x:	
  2916                           
  2917                           ; 2 bytes @ 0xF
  2918  002F                     	ds	1
  2919  0030                     convert_to_fp@res_fract:	
  2920  0030                     multiply_fp@n2:	
  2921                           ; 2 bytes @ 0x10
  2922                           
  2923                           
  2924                           ; 4 bytes @ 0x10
  2925  0030                     	ds	1
  2926  0031                     write_calibration_to_EEPROM@addr:	
  2927  0031                     load_calibration_from_EEPROM@crc:	
  2928                           ; 1 bytes @ 0x11
  2929                           
  2930                           
  2931                           ; 2 bytes @ 0x11
  2932  0031                     	ds	1
  2933  0032                     convert_to_fp@i_bit:	
  2934  0032                     write_calibration_to_EEPROM@p:	
  2935                           ; 1 bytes @ 0x12
  2936                           
  2937                           
  2938                           ; 1 bytes @ 0x12
  2939  0032                     	ds	1
  2940  0033                     load_calibration_from_EEPROM@addr:	
  2941  0033                     write_calibration_to_EEPROM@i:	
  2942                           ; 1 bytes @ 0x13
  2943                           
  2944  0033                     convert_to_fp@tmp_left:	
  2945                           ; 1 bytes @ 0x13
  2946                           
  2947                           
  2948                           ; 2 bytes @ 0x13
  2949  0033                     	ds	1
  2950  0034                     ??_multiply_fp:	
  2951  0034                     load_calibration_from_EEPROM@p:	
  2952                           ; 1 bytes @ 0x14
  2953                           
  2954                           
  2955                           ; 1 bytes @ 0x14
  2956  0034                     	ds	1
  2957  0035                     load_calibration_from_EEPROM@i:	
  2958  0035                     convert_to_fp@res:	
  2959                           ; 1 bytes @ 0x15
  2960                           
  2961                           
  2962                           ; 4 bytes @ 0x15
  2963  0035                     	ds	4
  2964  0039                     ??_GPS_read_speed:	
  2965  0039                     ?_integer_part:	
  2966                           ; 1 bytes @ 0x19
  2967                           
  2968  0039                     integer_part@n:	
  2969                           ; 2 bytes @ 0x19
  2970                           
  2971                           
  2972                           ; 4 bytes @ 0x19
  2973  0039                     	ds	2
  2974  003B                     GPS_read_speed@before_dot:	
  2975                           
  2976                           ; 1 bytes @ 0x1B
  2977  003B                     	ds	1
  2978  003C                     GPS_read_speed@no_more_checksum:	
  2979                           
  2980                           ; 1 bytes @ 0x1C
  2981  003C                     	ds	1
  2982  003D                     ??_integer_part:	
  2983  003D                     GPS_read_speed@read_speed_int:	
  2984                           ; 1 bytes @ 0x1D
  2985                           
  2986                           
  2987                           ; 2 bytes @ 0x1D
  2988  003D                     	ds	2
  2989  003F                     GPS_read_speed@read_speed_fra:	
  2990                           
  2991                           ; 2 bytes @ 0x1F
  2992  003F                     	ds	2
  2993  0041                     GPS_read_speed@checksum2:	
  2994                           
  2995                           ; 1 bytes @ 0x21
  2996  0041                     	ds	1
  2997  0042                     GPS_read_speed@checksum:	
  2998  0042                     multiply_fp@res:	
  2999                           ; 1 bytes @ 0x22
  3000                           
  3001  0042                     integer_part@and_a_half:	
  3002                           ; 4 bytes @ 0x22
  3003                           
  3004                           
  3005                           ; 4 bytes @ 0x22
  3006  0042                     	ds	1
  3007  0043                     GPS_read_speed@buffer:	
  3008                           
  3009                           ; 6 bytes @ 0x23
  3010  0043                     	ds	3
  3011  0046                     integer_part@neg:	
  3012                           
  3013                           ; 1 bytes @ 0x26
  3014  0046                     	ds	1
  3015  0047                     integer_part@int_part:	
  3016                           
  3017                           ; 2 bytes @ 0x27
  3018  0047                     	ds	2
  3019  0049                     GPS_read_speed@i_buff2:	
  3020                           
  3021                           ; 1 bytes @ 0x29
  3022  0049                     	ds	1
  3023  004A                     GPS_read_speed@i_buff:	
  3024                           
  3025                           ; 1 bytes @ 0x2A
  3026  004A                     	ds	1
  3027  004B                     GPS_read_speed@m_char:	
  3028                           
  3029                           ; 1 bytes @ 0x2B
  3030  004B                     	ds	1
  3031  004C                     ??_main:	
  3032                           
  3033                           ; 1 bytes @ 0x2C
  3034  004C                     	ds	8
  3035                           
  3036                           	psect	maintext
  3037  0042                     __pmaintext:	
  3038 ;;
  3039 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  3040 ;;
  3041 ;; *************** function _main *****************
  3042 ;; Defined at:
  3043 ;;		line 66 in file "main.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  b               4   15[BANK2 ] long 
  3048 ;;  a               4   11[BANK2 ] long 
  3049 ;;  tmp             4    7[BANK2 ] long 
  3050 ;;  fp_motor        4    0[BANK2 ] long 
  3051 ;;  new_motor       2   19[BANK2 ] unsigned short 
  3052 ;;  speed_int       2    5[BANK2 ] unsigned short 
  3053 ;;  i               1   21[BANK2 ] unsigned char 
  3054 ;;  done            1    4[BANK2 ] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : B1F/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3064 ;;      Params:         0       0       0       0       0       0
  3065 ;;      Locals:         0       0       0      22       0       0
  3066 ;;      Temps:          0       8       0       0       0       0
  3067 ;;      Totals:         0       8       0      22       0       0
  3068 ;;Total ram usage:       30 bytes
  3069 ;; Hardware stack levels required when called:   10
  3070 ;; This function calls:
  3071 ;;		_EPWM1_LoadDutyValue
  3072 ;;		_GPS_Initialize
  3073 ;;		_GPS_read_speed
  3074 ;;		_LED_set_state
  3075 ;;		_SYSTEM_Initialize
  3076 ;;		_TMR0_SetInterruptHandler
  3077 ;;		_TMR2_StartTimer
  3078 ;;		___wmul
  3079 ;;		_button_init
  3080 ;;		_convert_to_fp
  3081 ;;		_integer_part
  3082 ;;		_load_calibration_from_EEPROM
  3083 ;;		_multiply_fp
  3084 ;;		_perform_calibration
  3085 ;;		_write_calibration_to_EEPROM
  3086 ;; This function is called by:
  3087 ;;		Startup code after reset
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           
  3092                           ;psect for function _main
  3093  0042                     _main:	
  3094                           
  3095                           ;main.c: 69: SYSTEM_Initialize();
  3096                           
  3097                           ;incstack = 0
  3098                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3099  0042  318A  2208  3180   	fcall	_SYSTEM_Initialize
  3100                           
  3101                           ;main.c: 71: LED_set_state(manual_mode);
  3102  0045  3004               	movlw	4
  3103  0046  318B  2321  3180   	fcall	_LED_set_state
  3104                           
  3105                           ;main.c: 72: do { LATA2 = 0; } while(0);
  3106  0049  0022               	movlb	2	; select bank2
  3107  004A  110C               	bcf	12,2	;volatile
  3108                           
  3109                           ;main.c: 74: motor = 0;
  3110  004B  0021               	movlb	1	; select bank1
  3111  004C  01B8               	clrf	_motor^(0+128)
  3112  004D  01B9               	clrf	(_motor+1)^(0+128)
  3113                           
  3114                           ;main.c: 75: EPWM1_LoadDutyValue(1023-motor);
  3115  004E  0938               	comf	_motor^(0+128),w
  3116  004F  0020               	movlb	0	; select bank0
  3117  0050  00CC               	movwf	??_main
  3118  0051  0021               	movlb	1	; select bank1
  3119  0052  0939               	comf	(_motor+1)^(0+128),w
  3120  0053  0020               	movlb	0	; select bank0
  3121  0054  00CD               	movwf	??_main+1
  3122  0055  0ACC               	incf	??_main,f
  3123  0056  1903               	skipnz
  3124  0057  0ACD               	incf	??_main+1,f
  3125  0058  084C               	movf	??_main,w
  3126  0059  3EFF               	addlw	255
  3127  005A  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3128  005B  3003               	movlw	3
  3129  005C  3D4D               	addwfc	??_main+1,w
  3130  005D  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3131  005E  318A  22AE  3180   	fcall	_EPWM1_LoadDutyValue
  3132                           
  3133                           ;main.c: 77: TMR2_StartTimer();
  3134  0061  3189  2191  3180   	fcall	_TMR2_StartTimer
  3135                           
  3136                           ;main.c: 78: TMR0_SetInterruptHandler(my10msTimerISR);
  3137  0064  3094               	movlw	low _my10msTimerISR
  3138  0065  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3139  0066  3009               	movlw	high _my10msTimerISR
  3140  0067  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3141  0068  3189  21A0  3180   	fcall	_TMR0_SetInterruptHandler
  3142                           
  3143                           ;main.c: 80: (INTCONbits.GIE = 1);
  3144  006B  178B               	bsf	11,7	;volatile
  3145                           
  3146                           ;main.c: 82: (INTCONbits.PEIE = 1);
  3147  006C  170B               	bsf	11,6	;volatile
  3148                           
  3149                           ;main.c: 85: if (!load_calibration_from_EEPROM())
  3150  006D  318D  25EF  3180   	fcall	_load_calibration_from_EEPROM
  3151  0070  3A00               	xorlw	0
  3152  0071  1D03               	skipz
  3153  0072  288A               	goto	l4704
  3154                           
  3155                           ;main.c: 86: {
  3156                           ;main.c: 88: LED_set_state(slow_blinking);
  3157  0073  3002               	movlw	2
  3158  0074  318B  2321  3180   	fcall	_LED_set_state
  3159  0077                     L3:	
  3160                           
  3161                           ;main.c: 89: button_init();
  3162  0077  3189  21ED  3180   	fcall	_button_init
  3163  007A                     l4700:	
  3164                           ;main.c: 90: while (m_button.confirmed_state != long_push)
  3165                           
  3166  007A  3002               	movlw	2
  3167  007B  0020               	movlb	0	; select bank0
  3168  007C  0654               	xorwf	_m_button,w	;volatile
  3169  007D  1903               	btfsc	3,2
  3170  007E  2884               	goto	l4702
  3171                           
  3172                           ;main.c: 91: {
  3173                           ;main.c: 92: if (m_button.confirmed_state == short_push)
  3174  007F  0020               	movlb	0	; select bank0
  3175  0080  0354               	decf	_m_button,w	;volatile
  3176  0081  1D03               	btfss	3,2
  3177  0082  287A               	goto	l4700
  3178  0083  2877               	goto	L3
  3179  0084                     l4702:	
  3180                           ;main.c: 93: button_init();
  3181                           
  3182                           
  3183                           ;main.c: 94: }
  3184                           ;main.c: 95: perform_calibration();
  3185  0084  3185  25EF  3180   	fcall	_perform_calibration
  3186                           
  3187                           ;main.c: 96: write_calibration_to_EEPROM();
  3188  0087  318D  251C  3180   	fcall	_write_calibration_to_EEPROM
  3189  008A                     l4704:	
  3190                           
  3191                           ;main.c: 97: }
  3192                           ;main.c: 99: GPS_Initialize();
  3193  008A  318B  23D8  3180   	fcall	_GPS_Initialize
  3194                           
  3195                           ;main.c: 100: speed = 0;
  3196  008D  3000               	movlw	0
  3197  008E  0021               	movlb	1	; select bank1
  3198  008F  00B3               	movwf	(_speed+3)^(0+128)
  3199  0090  3000               	movlw	0
  3200  0091  00B2               	movwf	(_speed+2)^(0+128)
  3201  0092  3000               	movlw	0
  3202  0093  00B1               	movwf	(_speed+1)^(0+128)
  3203  0094  3000               	movlw	0
  3204  0095  00B0               	movwf	_speed^(0+128)
  3205  0096                     L1:	
  3206                           
  3207                           ;main.c: 102: button_init();
  3208  0096  3189  21ED  3180   	fcall	_button_init
  3209  0099                     l4710:	
  3210                           ;main.c: 103: unsigned short new_motor, speed_int;
  3211                           ;main.c: 104: t_fp a, b, tmp, fp_motor;
  3212                           ;main.c: 105: unsigned char i;
  3213                           ;main.c: 106: bool done;
  3214                           ;main.c: 107: while (1)
  3215                           
  3216                           
  3217                           ;main.c: 108: {
  3218                           ;main.c: 110: if (GPS_read_speed())
  3219  0099  3183  239A  3180   	fcall	_GPS_read_speed
  3220  009C  3A00               	xorlw	0
  3221  009D  1903               	skipnz
  3222  009E  2B73               	goto	l4776
  3223                           
  3224                           ;main.c: 111: {
  3225                           ;main.c: 113: if (m_conf.use_mph > 0)
  3226  009F  0021               	movlb	1	; select bank1
  3227  00A0  083C               	movf	_m_conf^(0+128),w
  3228  00A1  1903               	btfsc	3,2
  3229  00A2  28D1               	goto	l4716
  3230                           
  3231                           ;main.c: 114: speed = multiply_fp(speed, ratio_mph);
  3232  00A3  0833               	movf	(_speed+3)^(0+128),w
  3233  00A4  0020               	movlb	0	; select bank0
  3234  00A5  00AF               	movwf	multiply_fp@n1+3
  3235  00A6  0021               	movlb	1	; select bank1
  3236  00A7  0832               	movf	(_speed+2)^(0+128),w
  3237  00A8  0020               	movlb	0	; select bank0
  3238  00A9  00AE               	movwf	multiply_fp@n1+2
  3239  00AA  0021               	movlb	1	; select bank1
  3240  00AB  0831               	movf	(_speed+1)^(0+128),w
  3241  00AC  0020               	movlb	0	; select bank0
  3242  00AD  00AD               	movwf	multiply_fp@n1+1
  3243  00AE  0021               	movlb	1	; select bank1
  3244  00AF  0830               	movf	_speed^(0+128),w
  3245  00B0  0020               	movlb	0	; select bank0
  3246  00B1  00AC               	movwf	multiply_fp@n1
  3247  00B2  30D2               	movlw	low (_ratio_mph| (0+32768))
  3248  00B3  0084               	movwf	4
  3249  00B4  3087               	movlw	high (_ratio_mph| (0+32768))
  3250  00B5  0085               	movwf	5
  3251  00B6  3F00               	moviw [0]fsr0
  3252  00B7  00B0               	movwf	multiply_fp@n2
  3253  00B8  3F01               	moviw [1]fsr0
  3254  00B9  00B1               	movwf	multiply_fp@n2+1
  3255  00BA  3F02               	moviw [2]fsr0
  3256  00BB  00B2               	movwf	multiply_fp@n2+2
  3257  00BC  3F03               	moviw [3]fsr0
  3258  00BD  00B3               	movwf	multiply_fp@n2+3
  3259  00BE  318F  2707  3180   	fcall	_multiply_fp
  3260  00C1  0020               	movlb	0	; select bank0
  3261  00C2  082F               	movf	?_multiply_fp+3,w
  3262  00C3  0021               	movlb	1	; select bank1
  3263  00C4  00B3               	movwf	(_speed+3)^(0+128)
  3264  00C5  0020               	movlb	0	; select bank0
  3265  00C6  082E               	movf	?_multiply_fp+2,w
  3266  00C7  0021               	movlb	1	; select bank1
  3267  00C8  00B2               	movwf	(_speed+2)^(0+128)
  3268  00C9  0020               	movlb	0	; select bank0
  3269  00CA  082D               	movf	?_multiply_fp+1,w
  3270  00CB  0021               	movlb	1	; select bank1
  3271  00CC  00B1               	movwf	(_speed+1)^(0+128)
  3272  00CD  0020               	movlb	0	; select bank0
  3273  00CE  082C               	movf	?_multiply_fp,w
  3274  00CF  0021               	movlb	1	; select bank1
  3275  00D0  00B0               	movwf	_speed^(0+128)
  3276  00D1                     l4716:	
  3277                           ;main.c: 118: do { LATA2 = 1; } while(0);
  3278                           
  3279  00D1  0022               	movlb	2	; select bank2
  3280  00D2  150C               	bsf	12,2	;volatile
  3281                           
  3282                           ;main.c: 119: _delay((unsigned long)((20)*(32000000/4000.0)));
  3283  00D3  30D0               	movlw	208
  3284  00D4  0020               	movlb	0	; select bank0
  3285  00D5  00CD               	movwf	??_main+1
  3286  00D6  30C9               	movlw	201
  3287  00D7  00CC               	movwf	??_main
  3288  00D8                     u5627:	
  3289  00D8  0BCC               	decfsz	??_main,f
  3290  00D9  28D8               	goto	u5627
  3291  00DA  0BCD               	decfsz	??_main+1,f
  3292  00DB  28D8               	goto	u5627
  3293  00DC  3200               	nop2
  3294                           
  3295                           ;main.c: 120: do { LATA2 = 0; } while(0);
  3296  00DD  0022               	movlb	2	; select bank2
  3297  00DE  110C               	bcf	12,2	;volatile
  3298                           
  3299                           ;main.c: 123: speed_int = integer_part(speed);
  3300  00DF  0021               	movlb	1	; select bank1
  3301  00E0  0833               	movf	(_speed+3)^(0+128),w
  3302  00E1  0020               	movlb	0	; select bank0
  3303  00E2  00BC               	movwf	integer_part@n+3
  3304  00E3  0021               	movlb	1	; select bank1
  3305  00E4  0832               	movf	(_speed+2)^(0+128),w
  3306  00E5  0020               	movlb	0	; select bank0
  3307  00E6  00BB               	movwf	integer_part@n+2
  3308  00E7  0021               	movlb	1	; select bank1
  3309  00E8  0831               	movf	(_speed+1)^(0+128),w
  3310  00E9  0020               	movlb	0	; select bank0
  3311  00EA  00BA               	movwf	integer_part@n+1
  3312  00EB  0021               	movlb	1	; select bank1
  3313  00EC  0830               	movf	_speed^(0+128),w
  3314  00ED  0020               	movlb	0	; select bank0
  3315  00EE  00B9               	movwf	integer_part@n
  3316  00EF  318D  2584  3180   	fcall	_integer_part
  3317  00F2  0020               	movlb	0	; select bank0
  3318  00F3  083A               	movf	?_integer_part+1,w
  3319  00F4  0022               	movlb	2	; select bank2
  3320  00F5  00A6               	movwf	(main@speed_int+1)^(0+256)
  3321  00F6  0020               	movlb	0	; select bank0
  3322  00F7  0839               	movf	?_integer_part,w
  3323  00F8  0022               	movlb	2	; select bank2
  3324  00F9  00A5               	movwf	main@speed_int^(0+256)
  3325                           
  3326                           ;main.c: 124: i = 1;
  3327  00FA  01B5               	clrf	main@i^(0+256)
  3328  00FB  0AB5               	incf	main@i^(0+256),f
  3329                           
  3330                           ;main.c: 125: done = 0;
  3331  00FC  01A4               	clrf	main@done^(0+256)
  3332                           
  3333                           ;main.c: 126: while ((i<m_conf.nb_steps)&&(!done))
  3334  00FD  2B0A               	goto	l367
  3335  00FE                     l4728:	
  3336                           
  3337                           ;main.c: 127: {
  3338                           ;main.c: 128: if (speed_int >= 10*(m_conf.nb_steps-i))
  3339  00FE  0835               	movf	main@i^(0+256),w
  3340  00FF  0020               	movlb	0	; select bank0
  3341  0100  00CC               	movwf	??_main
  3342  0101  01CD               	clrf	??_main+1
  3343  0102  09CC               	comf	??_main,f
  3344  0103  09CD               	comf	??_main+1,f
  3345  0104  0ACC               	incf	??_main,f
  3346  0105  1903               	skipnz
  3347  0106  0ACD               	incf	??_main+1,f
  3348  0107  0021               	movlb	1	; select bank1
  3349  0108  083F               	movf	(_m_conf^(0+128)+3),w
  3350  0109  0020               	movlb	0	; select bank0
  3351  010A  074C               	addwf	??_main,w
  3352  010B  00A0               	movwf	___wmul@multiplier
  3353  010C  084D               	movf	??_main+1,w
  3354  010D  1803               	skipnc
  3355  010E  0A4D               	incf	??_main+1,w
  3356  010F  00A1               	movwf	___wmul@multiplier+1
  3357  0110  300A               	movlw	10
  3358  0111  00A2               	movwf	___wmul@multiplicand
  3359  0112  3000               	movlw	0
  3360  0113  00A3               	movwf	___wmul@multiplicand+1
  3361  0114  318A  2292  3180   	fcall	___wmul
  3362  0117  0020               	movlb	0	; select bank0
  3363  0118  0821               	movf	?___wmul+1,w
  3364  0119  0022               	movlb	2	; select bank2
  3365  011A  0226               	subwf	(main@speed_int+1)^(0+256),w
  3366  011B  1D03               	skipz
  3367  011C  2921               	goto	u5375
  3368  011D  0020               	movlb	0	; select bank0
  3369  011E  0820               	movf	?___wmul,w
  3370  011F  0022               	movlb	2	; select bank2
  3371  0120  0225               	subwf	main@speed_int^(0+256),w
  3372  0121                     u5375:	
  3373  0121  1C03               	skipc
  3374  0122  2AF0               	goto	l4752
  3375                           
  3376                           ;main.c: 129: {
  3377                           ;main.c: 130: if (speed_int == 10*(m_conf.nb_steps-i))
  3378  0123  0835               	movf	main@i^(0+256),w
  3379  0124  0020               	movlb	0	; select bank0
  3380  0125  00CC               	movwf	??_main
  3381  0126  01CD               	clrf	??_main+1
  3382  0127  09CC               	comf	??_main,f
  3383  0128  09CD               	comf	??_main+1,f
  3384  0129  0ACC               	incf	??_main,f
  3385  012A  1903               	skipnz
  3386  012B  0ACD               	incf	??_main+1,f
  3387  012C  0021               	movlb	1	; select bank1
  3388  012D  083F               	movf	(_m_conf^(0+128)+3),w
  3389  012E  0020               	movlb	0	; select bank0
  3390  012F  074C               	addwf	??_main,w
  3391  0130  00A0               	movwf	___wmul@multiplier
  3392  0131  084D               	movf	??_main+1,w
  3393  0132  1803               	skipnc
  3394  0133  0A4D               	incf	??_main+1,w
  3395  0134  00A1               	movwf	___wmul@multiplier+1
  3396  0135  300A               	movlw	10
  3397  0136  00A2               	movwf	___wmul@multiplicand
  3398  0137  3000               	movlw	0
  3399  0138  00A3               	movwf	___wmul@multiplicand+1
  3400  0139  318A  2292  3180   	fcall	___wmul
  3401  013C  0022               	movlb	2	; select bank2
  3402  013D  0826               	movf	(main@speed_int+1)^(0+256),w
  3403  013E  0020               	movlb	0	; select bank0
  3404  013F  0621               	xorwf	?___wmul+1,w
  3405  0140  1D03               	skipz
  3406  0141  2946               	goto	u5385
  3407  0142  0022               	movlb	2	; select bank2
  3408  0143  0825               	movf	main@speed_int^(0+256),w
  3409  0144  0020               	movlb	0	; select bank0
  3410  0145  0620               	xorwf	?___wmul,w
  3411  0146                     u5385:	
  3412  0146  1D03               	skipz
  3413  0147  2952               	goto	l4734
  3414                           
  3415                           ;main.c: 131: new_motor = m_conf.ref_pwm[i];
  3416  0148  0022               	movlb	2	; select bank2
  3417  0149  3535               	lslf	main@i^(0+256),w
  3418  014A  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3419  014B  0086               	movwf	6
  3420  014C  0187               	clrf	7
  3421  014D  3F40               	moviw [0]fsr1
  3422  014E  00B3               	movwf	main@new_motor^(0+256)
  3423  014F  3F41               	moviw [1]fsr1
  3424  0150  00B4               	movwf	(main@new_motor+1)^(0+256)
  3425  0151  2B08               	goto	l4756
  3426  0152                     l4734:	
  3427                           
  3428                           ;main.c: 132: else
  3429                           ;main.c: 133: {
  3430                           ;main.c: 134: a = convert_to_fp((m_conf.ref_pwm[i-1]-m_conf.ref_pwm[i]),0);
  3431  0152  0022               	movlb	2	; select bank2
  3432  0153  3535               	lslf	main@i^(0+256),w
  3433  0154  3EFE               	addlw	254
  3434  0155  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3435  0156  0086               	movwf	6
  3436  0157  0187               	clrf	7
  3437  0158  3535               	lslf	main@i^(0+256),w
  3438  0159  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3439  015A  0084               	movwf	4
  3440  015B  0185               	clrf	5
  3441  015C  3F00               	moviw [0]fsr0
  3442  015D  0020               	movlb	0	; select bank0
  3443  015E  00CC               	movwf	??_main
  3444  015F  3F01               	moviw [1]fsr0
  3445  0160  00CD               	movwf	??_main+1
  3446  0161  09CC               	comf	??_main,f
  3447  0162  09CD               	comf	??_main+1,f
  3448  0163  0ACC               	incf	??_main,f
  3449  0164  1903               	skipnz
  3450  0165  0ACD               	incf	??_main+1,f
  3451  0166  3F40               	moviw [0]fsr1
  3452  0167  074C               	addwf	??_main,w
  3453  0168  00A4               	movwf	convert_to_fp@int_part
  3454  0169  3F41               	moviw [1]fsr1
  3455  016A  3D4D               	addwfc	??_main+1,w
  3456  016B  00A5               	movwf	convert_to_fp@int_part+1
  3457  016C  3000               	movlw	0
  3458  016D  00A6               	movwf	convert_to_fp@fract_part
  3459  016E  00A7               	movwf	convert_to_fp@fract_part+1
  3460  016F  318E  265E  3180   	fcall	_convert_to_fp
  3461  0172  0020               	movlb	0	; select bank0
  3462  0173  0827               	movf	?_convert_to_fp+3,w
  3463  0174  0022               	movlb	2	; select bank2
  3464  0175  00AE               	movwf	(main@a+3)^(0+256)
  3465  0176  0020               	movlb	0	; select bank0
  3466  0177  0826               	movf	?_convert_to_fp+2,w
  3467  0178  0022               	movlb	2	; select bank2
  3468  0179  00AD               	movwf	(main@a+2)^(0+256)
  3469  017A  0020               	movlb	0	; select bank0
  3470  017B  0825               	movf	?_convert_to_fp+1,w
  3471  017C  0022               	movlb	2	; select bank2
  3472  017D  00AC               	movwf	(main@a+1)^(0+256)
  3473  017E  0020               	movlb	0	; select bank0
  3474  017F  0824               	movf	?_convert_to_fp,w
  3475  0180  0022               	movlb	2	; select bank2
  3476  0181  00AB               	movwf	main@a^(0+256)
  3477                           
  3478                           ;main.c: 135: tmp = convert_to_fp(0,1000);
  3479  0182  3000               	movlw	0
  3480  0183  0020               	movlb	0	; select bank0
  3481  0184  00A4               	movwf	convert_to_fp@int_part
  3482  0185  00A5               	movwf	convert_to_fp@int_part+1
  3483  0186  30E8               	movlw	232
  3484  0187  00A6               	movwf	convert_to_fp@fract_part
  3485  0188  3003               	movlw	3
  3486  0189  00A7               	movwf	convert_to_fp@fract_part+1
  3487  018A  318E  265E  3180   	fcall	_convert_to_fp
  3488  018D  0020               	movlb	0	; select bank0
  3489  018E  0827               	movf	?_convert_to_fp+3,w
  3490  018F  0022               	movlb	2	; select bank2
  3491  0190  00AA               	movwf	(main@tmp+3)^(0+256)
  3492  0191  0020               	movlb	0	; select bank0
  3493  0192  0826               	movf	?_convert_to_fp+2,w
  3494  0193  0022               	movlb	2	; select bank2
  3495  0194  00A9               	movwf	(main@tmp+2)^(0+256)
  3496  0195  0020               	movlb	0	; select bank0
  3497  0196  0825               	movf	?_convert_to_fp+1,w
  3498  0197  0022               	movlb	2	; select bank2
  3499  0198  00A8               	movwf	(main@tmp+1)^(0+256)
  3500  0199  0020               	movlb	0	; select bank0
  3501  019A  0824               	movf	?_convert_to_fp,w
  3502  019B  0022               	movlb	2	; select bank2
  3503  019C  00A7               	movwf	main@tmp^(0+256)
  3504                           
  3505                           ;main.c: 137: a = multiply_fp(a, tmp);
  3506  019D  082E               	movf	(main@a+3)^(0+256),w
  3507  019E  0020               	movlb	0	; select bank0
  3508  019F  00AF               	movwf	multiply_fp@n1+3
  3509  01A0  0022               	movlb	2	; select bank2
  3510  01A1  082D               	movf	(main@a+2)^(0+256),w
  3511  01A2  0020               	movlb	0	; select bank0
  3512  01A3  00AE               	movwf	multiply_fp@n1+2
  3513  01A4  0022               	movlb	2	; select bank2
  3514  01A5  082C               	movf	(main@a+1)^(0+256),w
  3515  01A6  0020               	movlb	0	; select bank0
  3516  01A7  00AD               	movwf	multiply_fp@n1+1
  3517  01A8  0022               	movlb	2	; select bank2
  3518  01A9  082B               	movf	main@a^(0+256),w
  3519  01AA  0020               	movlb	0	; select bank0
  3520  01AB  00AC               	movwf	multiply_fp@n1
  3521  01AC  0022               	movlb	2	; select bank2
  3522  01AD  082A               	movf	(main@tmp+3)^(0+256),w
  3523  01AE  0020               	movlb	0	; select bank0
  3524  01AF  00B3               	movwf	multiply_fp@n2+3
  3525  01B0  0022               	movlb	2	; select bank2
  3526  01B1  0829               	movf	(main@tmp+2)^(0+256),w
  3527  01B2  0020               	movlb	0	; select bank0
  3528  01B3  00B2               	movwf	multiply_fp@n2+2
  3529  01B4  0022               	movlb	2	; select bank2
  3530  01B5  0828               	movf	(main@tmp+1)^(0+256),w
  3531  01B6  0020               	movlb	0	; select bank0
  3532  01B7  00B1               	movwf	multiply_fp@n2+1
  3533  01B8  0022               	movlb	2	; select bank2
  3534  01B9  0827               	movf	main@tmp^(0+256),w
  3535  01BA  0020               	movlb	0	; select bank0
  3536  01BB  00B0               	movwf	multiply_fp@n2
  3537  01BC  318F  2707  3180   	fcall	_multiply_fp
  3538  01BF  0020               	movlb	0	; select bank0
  3539  01C0  082F               	movf	?_multiply_fp+3,w
  3540  01C1  0022               	movlb	2	; select bank2
  3541  01C2  00AE               	movwf	(main@a+3)^(0+256)
  3542  01C3  0020               	movlb	0	; select bank0
  3543  01C4  082E               	movf	?_multiply_fp+2,w
  3544  01C5  0022               	movlb	2	; select bank2
  3545  01C6  00AD               	movwf	(main@a+2)^(0+256)
  3546  01C7  0020               	movlb	0	; select bank0
  3547  01C8  082D               	movf	?_multiply_fp+1,w
  3548  01C9  0022               	movlb	2	; select bank2
  3549  01CA  00AC               	movwf	(main@a+1)^(0+256)
  3550  01CB  0020               	movlb	0	; select bank0
  3551  01CC  082C               	movf	?_multiply_fp,w
  3552  01CD  0022               	movlb	2	; select bank2
  3553  01CE  00AB               	movwf	main@a^(0+256)
  3554                           
  3555                           ;main.c: 138: b = convert_to_fp(10*(m_conf.nb_steps-i), 0);
  3556  01CF  0835               	movf	main@i^(0+256),w
  3557  01D0  0020               	movlb	0	; select bank0
  3558  01D1  00CC               	movwf	??_main
  3559  01D2  01CD               	clrf	??_main+1
  3560  01D3  09CC               	comf	??_main,f
  3561  01D4  09CD               	comf	??_main+1,f
  3562  01D5  0ACC               	incf	??_main,f
  3563  01D6  1903               	skipnz
  3564  01D7  0ACD               	incf	??_main+1,f
  3565  01D8  0021               	movlb	1	; select bank1
  3566  01D9  083F               	movf	(_m_conf^(0+128)+3),w
  3567  01DA  0020               	movlb	0	; select bank0
  3568  01DB  074C               	addwf	??_main,w
  3569  01DC  00A0               	movwf	___wmul@multiplier
  3570  01DD  084D               	movf	??_main+1,w
  3571  01DE  1803               	skipnc
  3572  01DF  0A4D               	incf	??_main+1,w
  3573  01E0  00A1               	movwf	___wmul@multiplier+1
  3574  01E1  300A               	movlw	10
  3575  01E2  00A2               	movwf	___wmul@multiplicand
  3576  01E3  3000               	movlw	0
  3577  01E4  00A3               	movwf	___wmul@multiplicand+1
  3578  01E5  318A  2292  3180   	fcall	___wmul
  3579  01E8  0020               	movlb	0	; select bank0
  3580  01E9  0821               	movf	?___wmul+1,w
  3581  01EA  00A5               	movwf	convert_to_fp@int_part+1
  3582  01EB  0820               	movf	?___wmul,w
  3583  01EC  00A4               	movwf	convert_to_fp@int_part
  3584  01ED  3000               	movlw	0
  3585  01EE  00A6               	movwf	convert_to_fp@fract_part
  3586  01EF  00A7               	movwf	convert_to_fp@fract_part+1
  3587  01F0  318E  265E  3180   	fcall	_convert_to_fp
  3588  01F3  0020               	movlb	0	; select bank0
  3589  01F4  0827               	movf	?_convert_to_fp+3,w
  3590  01F5  0022               	movlb	2	; select bank2
  3591  01F6  00B2               	movwf	(main@b+3)^(0+256)
  3592  01F7  0020               	movlb	0	; select bank0
  3593  01F8  0826               	movf	?_convert_to_fp+2,w
  3594  01F9  0022               	movlb	2	; select bank2
  3595  01FA  00B1               	movwf	(main@b+2)^(0+256)
  3596  01FB  0020               	movlb	0	; select bank0
  3597  01FC  0825               	movf	?_convert_to_fp+1,w
  3598  01FD  0022               	movlb	2	; select bank2
  3599  01FE  00B0               	movwf	(main@b+1)^(0+256)
  3600  01FF  0020               	movlb	0	; select bank0
  3601  0200  0824               	movf	?_convert_to_fp,w
  3602  0201  0022               	movlb	2	; select bank2
  3603  0202  00AF               	movwf	main@b^(0+256)
  3604                           
  3605                           ;main.c: 139: b = multiply_fp(a, b);
  3606  0203  082E               	movf	(main@a+3)^(0+256),w
  3607  0204  0020               	movlb	0	; select bank0
  3608  0205  00AF               	movwf	multiply_fp@n1+3
  3609  0206  0022               	movlb	2	; select bank2
  3610  0207  082D               	movf	(main@a+2)^(0+256),w
  3611  0208  0020               	movlb	0	; select bank0
  3612  0209  00AE               	movwf	multiply_fp@n1+2
  3613  020A  0022               	movlb	2	; select bank2
  3614  020B  082C               	movf	(main@a+1)^(0+256),w
  3615  020C  0020               	movlb	0	; select bank0
  3616  020D  00AD               	movwf	multiply_fp@n1+1
  3617  020E  0022               	movlb	2	; select bank2
  3618  020F  082B               	movf	main@a^(0+256),w
  3619  0210  0020               	movlb	0	; select bank0
  3620  0211  00AC               	movwf	multiply_fp@n1
  3621  0212  0022               	movlb	2	; select bank2
  3622  0213  0832               	movf	(main@b+3)^(0+256),w
  3623  0214  0020               	movlb	0	; select bank0
  3624  0215  00B3               	movwf	multiply_fp@n2+3
  3625  0216  0022               	movlb	2	; select bank2
  3626  0217  0831               	movf	(main@b+2)^(0+256),w
  3627  0218  0020               	movlb	0	; select bank0
  3628  0219  00B2               	movwf	multiply_fp@n2+2
  3629  021A  0022               	movlb	2	; select bank2
  3630  021B  0830               	movf	(main@b+1)^(0+256),w
  3631  021C  0020               	movlb	0	; select bank0
  3632  021D  00B1               	movwf	multiply_fp@n2+1
  3633  021E  0022               	movlb	2	; select bank2
  3634  021F  082F               	movf	main@b^(0+256),w
  3635  0220  0020               	movlb	0	; select bank0
  3636  0221  00B0               	movwf	multiply_fp@n2
  3637  0222  318F  2707  3180   	fcall	_multiply_fp
  3638  0225  0020               	movlb	0	; select bank0
  3639  0226  082F               	movf	?_multiply_fp+3,w
  3640  0227  0022               	movlb	2	; select bank2
  3641  0228  00B2               	movwf	(main@b+3)^(0+256)
  3642  0229  0020               	movlb	0	; select bank0
  3643  022A  082E               	movf	?_multiply_fp+2,w
  3644  022B  0022               	movlb	2	; select bank2
  3645  022C  00B1               	movwf	(main@b+2)^(0+256)
  3646  022D  0020               	movlb	0	; select bank0
  3647  022E  082D               	movf	?_multiply_fp+1,w
  3648  022F  0022               	movlb	2	; select bank2
  3649  0230  00B0               	movwf	(main@b+1)^(0+256)
  3650  0231  0020               	movlb	0	; select bank0
  3651  0232  082C               	movf	?_multiply_fp,w
  3652  0233  0022               	movlb	2	; select bank2
  3653  0234  00AF               	movwf	main@b^(0+256)
  3654                           
  3655                           ;main.c: 140: tmp = convert_to_fp(m_conf.ref_pwm[i], 0);
  3656  0235  3535               	lslf	main@i^(0+256),w
  3657  0236  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3658  0237  0086               	movwf	6
  3659  0238  0187               	clrf	7
  3660  0239  3F40               	moviw [0]fsr1
  3661  023A  0020               	movlb	0	; select bank0
  3662  023B  00A4               	movwf	convert_to_fp@int_part
  3663  023C  3F41               	moviw [1]fsr1
  3664  023D  00A5               	movwf	convert_to_fp@int_part+1
  3665  023E  3000               	movlw	0
  3666  023F  00A6               	movwf	convert_to_fp@fract_part
  3667  0240  00A7               	movwf	convert_to_fp@fract_part+1
  3668  0241  318E  265E  3180   	fcall	_convert_to_fp
  3669  0244  0020               	movlb	0	; select bank0
  3670  0245  0827               	movf	?_convert_to_fp+3,w
  3671  0246  0022               	movlb	2	; select bank2
  3672  0247  00AA               	movwf	(main@tmp+3)^(0+256)
  3673  0248  0020               	movlb	0	; select bank0
  3674  0249  0826               	movf	?_convert_to_fp+2,w
  3675  024A  0022               	movlb	2	; select bank2
  3676  024B  00A9               	movwf	(main@tmp+2)^(0+256)
  3677  024C  0020               	movlb	0	; select bank0
  3678  024D  0825               	movf	?_convert_to_fp+1,w
  3679  024E  0022               	movlb	2	; select bank2
  3680  024F  00A8               	movwf	(main@tmp+1)^(0+256)
  3681  0250  0020               	movlb	0	; select bank0
  3682  0251  0824               	movf	?_convert_to_fp,w
  3683  0252  0022               	movlb	2	; select bank2
  3684  0253  00A7               	movwf	main@tmp^(0+256)
  3685                           
  3686                           ;main.c: 141: b = tmp - b;
  3687  0254  0827               	movf	main@tmp^(0+256),w
  3688  0255  0020               	movlb	0	; select bank0
  3689  0256  00CC               	movwf	??_main
  3690  0257  0022               	movlb	2	; select bank2
  3691  0258  0828               	movf	(main@tmp+1)^(0+256),w
  3692  0259  0020               	movlb	0	; select bank0
  3693  025A  00CD               	movwf	??_main+1
  3694  025B  0022               	movlb	2	; select bank2
  3695  025C  0829               	movf	(main@tmp+2)^(0+256),w
  3696  025D  0020               	movlb	0	; select bank0
  3697  025E  00CE               	movwf	??_main+2
  3698  025F  0022               	movlb	2	; select bank2
  3699  0260  082A               	movf	(main@tmp+3)^(0+256),w
  3700  0261  0020               	movlb	0	; select bank0
  3701  0262  00CF               	movwf	??_main+3
  3702  0263  0022               	movlb	2	; select bank2
  3703  0264  092F               	comf	main@b^(0+256),w
  3704  0265  0020               	movlb	0	; select bank0
  3705  0266  00D0               	movwf	??_main+4
  3706  0267  0022               	movlb	2	; select bank2
  3707  0268  0930               	comf	(main@b+1)^(0+256),w
  3708  0269  0020               	movlb	0	; select bank0
  3709  026A  00D1               	movwf	??_main+5
  3710  026B  0022               	movlb	2	; select bank2
  3711  026C  0931               	comf	(main@b+2)^(0+256),w
  3712  026D  0020               	movlb	0	; select bank0
  3713  026E  00D2               	movwf	??_main+6
  3714  026F  0022               	movlb	2	; select bank2
  3715  0270  0932               	comf	(main@b+3)^(0+256),w
  3716  0271  0020               	movlb	0	; select bank0
  3717  0272  00D3               	movwf	??_main+7
  3718  0273  0AD0               	incf	??_main+4,f
  3719  0274  1903               	skipnz
  3720  0275  0AD1               	incf	??_main+5,f
  3721  0276  1903               	skipnz
  3722  0277  0AD2               	incf	??_main+6,f
  3723  0278  1903               	skipnz
  3724  0279  0AD3               	incf	??_main+7,f
  3725  027A  0850               	movf	??_main+4,w
  3726  027B  07CC               	addwf	??_main,f
  3727  027C  0851               	movf	??_main+5,w
  3728  027D  3DCD               	addwfc	??_main+1,f
  3729  027E  0852               	movf	??_main+6,w
  3730  027F  3DCE               	addwfc	??_main+2,f
  3731  0280  0853               	movf	??_main+7,w
  3732  0281  3DCF               	addwfc	??_main+3,f
  3733  0282  084F               	movf	??_main+3,w
  3734  0283  0022               	movlb	2	; select bank2
  3735  0284  00B2               	movwf	(main@b+3)^(0+256)
  3736  0285  0020               	movlb	0	; select bank0
  3737  0286  084E               	movf	??_main+2,w
  3738  0287  0022               	movlb	2	; select bank2
  3739  0288  00B1               	movwf	(main@b+2)^(0+256)
  3740  0289  0020               	movlb	0	; select bank0
  3741  028A  084D               	movf	??_main+1,w
  3742  028B  0022               	movlb	2	; select bank2
  3743  028C  00B0               	movwf	(main@b+1)^(0+256)
  3744  028D  0020               	movlb	0	; select bank0
  3745  028E  084C               	movf	??_main,w
  3746  028F  0022               	movlb	2	; select bank2
  3747  0290  00AF               	movwf	main@b^(0+256)
  3748                           
  3749                           ;main.c: 143: fp_motor = multiply_fp(a, speed) + b;
  3750  0291  082E               	movf	(main@a+3)^(0+256),w
  3751  0292  0020               	movlb	0	; select bank0
  3752  0293  00AF               	movwf	multiply_fp@n1+3
  3753  0294  0022               	movlb	2	; select bank2
  3754  0295  082D               	movf	(main@a+2)^(0+256),w
  3755  0296  0020               	movlb	0	; select bank0
  3756  0297  00AE               	movwf	multiply_fp@n1+2
  3757  0298  0022               	movlb	2	; select bank2
  3758  0299  082C               	movf	(main@a+1)^(0+256),w
  3759  029A  0020               	movlb	0	; select bank0
  3760  029B  00AD               	movwf	multiply_fp@n1+1
  3761  029C  0022               	movlb	2	; select bank2
  3762  029D  082B               	movf	main@a^(0+256),w
  3763  029E  0020               	movlb	0	; select bank0
  3764  029F  00AC               	movwf	multiply_fp@n1
  3765  02A0  0021               	movlb	1	; select bank1
  3766  02A1  0833               	movf	(_speed+3)^(0+128),w
  3767  02A2  0020               	movlb	0	; select bank0
  3768  02A3  00B3               	movwf	multiply_fp@n2+3
  3769  02A4  0021               	movlb	1	; select bank1
  3770  02A5  0832               	movf	(_speed+2)^(0+128),w
  3771  02A6  0020               	movlb	0	; select bank0
  3772  02A7  00B2               	movwf	multiply_fp@n2+2
  3773  02A8  0021               	movlb	1	; select bank1
  3774  02A9  0831               	movf	(_speed+1)^(0+128),w
  3775  02AA  0020               	movlb	0	; select bank0
  3776  02AB  00B1               	movwf	multiply_fp@n2+1
  3777  02AC  0021               	movlb	1	; select bank1
  3778  02AD  0830               	movf	_speed^(0+128),w
  3779  02AE  0020               	movlb	0	; select bank0
  3780  02AF  00B0               	movwf	multiply_fp@n2
  3781  02B0  318F  2707  3180   	fcall	_multiply_fp
  3782  02B3  0020               	movlb	0	; select bank0
  3783  02B4  082C               	movf	?_multiply_fp,w
  3784  02B5  0022               	movlb	2	; select bank2
  3785  02B6  072F               	addwf	main@b^(0+256),w
  3786  02B7  0020               	movlb	0	; select bank0
  3787  02B8  00CC               	movwf	??_main
  3788  02B9  082D               	movf	?_multiply_fp+1,w
  3789  02BA  0022               	movlb	2	; select bank2
  3790  02BB  3D30               	addwfc	(main@b+1)^(0+256),w
  3791  02BC  0020               	movlb	0	; select bank0
  3792  02BD  00CD               	movwf	??_main+1
  3793  02BE  082E               	movf	?_multiply_fp+2,w
  3794  02BF  0022               	movlb	2	; select bank2
  3795  02C0  3D31               	addwfc	(main@b+2)^(0+256),w
  3796  02C1  0020               	movlb	0	; select bank0
  3797  02C2  00CE               	movwf	??_main+2
  3798  02C3  082F               	movf	?_multiply_fp+3,w
  3799  02C4  0022               	movlb	2	; select bank2
  3800  02C5  3D32               	addwfc	(main@b+3)^(0+256),w
  3801  02C6  0020               	movlb	0	; select bank0
  3802  02C7  00CF               	movwf	??_main+3
  3803  02C8  084F               	movf	??_main+3,w
  3804  02C9  0022               	movlb	2	; select bank2
  3805  02CA  00A3               	movwf	(main@fp_motor+3)^(0+256)
  3806  02CB  0020               	movlb	0	; select bank0
  3807  02CC  084E               	movf	??_main+2,w
  3808  02CD  0022               	movlb	2	; select bank2
  3809  02CE  00A2               	movwf	(main@fp_motor+2)^(0+256)
  3810  02CF  0020               	movlb	0	; select bank0
  3811  02D0  084D               	movf	??_main+1,w
  3812  02D1  0022               	movlb	2	; select bank2
  3813  02D2  00A1               	movwf	(main@fp_motor+1)^(0+256)
  3814  02D3  0020               	movlb	0	; select bank0
  3815  02D4  084C               	movf	??_main,w
  3816  02D5  0022               	movlb	2	; select bank2
  3817  02D6  00A0               	movwf	main@fp_motor^(0+256)
  3818                           
  3819                           ;main.c: 144: new_motor = integer_part(fp_motor);
  3820  02D7  0823               	movf	(main@fp_motor+3)^(0+256),w
  3821  02D8  0020               	movlb	0	; select bank0
  3822  02D9  00BC               	movwf	integer_part@n+3
  3823  02DA  0022               	movlb	2	; select bank2
  3824  02DB  0822               	movf	(main@fp_motor+2)^(0+256),w
  3825  02DC  0020               	movlb	0	; select bank0
  3826  02DD  00BB               	movwf	integer_part@n+2
  3827  02DE  0022               	movlb	2	; select bank2
  3828  02DF  0821               	movf	(main@fp_motor+1)^(0+256),w
  3829  02E0  0020               	movlb	0	; select bank0
  3830  02E1  00BA               	movwf	integer_part@n+1
  3831  02E2  0022               	movlb	2	; select bank2
  3832  02E3  0820               	movf	main@fp_motor^(0+256),w
  3833  02E4  0020               	movlb	0	; select bank0
  3834  02E5  00B9               	movwf	integer_part@n
  3835  02E6  318D  2584  3180   	fcall	_integer_part
  3836  02E9  0020               	movlb	0	; select bank0
  3837  02EA  083A               	movf	?_integer_part+1,w
  3838  02EB  0022               	movlb	2	; select bank2
  3839  02EC  00B4               	movwf	(main@new_motor+1)^(0+256)
  3840  02ED  0020               	movlb	0	; select bank0
  3841  02EE  0839               	movf	?_integer_part,w
  3842  02EF  2B06               	goto	L2
  3843  02F0                     l4752:	
  3844                           ;main.c: 147: }
  3845                           
  3846                           ;main.c: 145: }
  3847                           ;main.c: 146: done = 1;
  3848                           
  3849                           
  3850                           ;main.c: 148: else if (i == (m_conf.nb_steps-1))
  3851  02F0  0021               	movlb	1	; select bank1
  3852  02F1  083F               	movf	(_m_conf^(0+128)+3),w
  3853  02F2  3EFF               	addlw	255
  3854  02F3  0020               	movlb	0	; select bank0
  3855  02F4  00CC               	movwf	??_main
  3856  02F5  30FF               	movlw	255
  3857  02F6  1803               	skipnc
  3858  02F7  3000               	movlw	0
  3859  02F8  00CD               	movwf	??_main+1
  3860  02F9  0022               	movlb	2	; select bank2
  3861  02FA  0835               	movf	main@i^(0+256),w
  3862  02FB  0020               	movlb	0	; select bank0
  3863  02FC  064C               	xorwf	??_main,w
  3864  02FD  044D               	iorwf	??_main+1,w
  3865  02FE  1D03               	skipz
  3866  02FF  2B0A               	goto	l367
  3867                           
  3868                           ;main.c: 149: {
  3869                           ;main.c: 150: new_motor = m_conf.low_speed_pwm;
  3870  0300  0021               	movlb	1	; select bank1
  3871  0301  0869               	movf	((_m_conf+1)^(0+128)+44),w
  3872  0302  0022               	movlb	2	; select bank2
  3873  0303  00B4               	movwf	(main@new_motor+1)^(0+256)
  3874  0304  0021               	movlb	1	; select bank1
  3875  0305  0868               	movf	(_m_conf^(0+128)+44),w
  3876  0306                     L2:	
  3877  0306  0022               	movlb	2	; select bank2
  3878  0307  00B3               	movwf	main@new_motor^(0+256)
  3879  0308                     l4756:	
  3880                           
  3881                           ;main.c: 151: done = 1;
  3882  0308  01A4               	clrf	main@done^(0+256)
  3883  0309  0AA4               	incf	main@done^(0+256),f
  3884  030A                     l367:	
  3885  030A  0021               	movlb	1	; select bank1
  3886  030B  083F               	movf	(_m_conf^(0+128)+3),w
  3887  030C  0022               	movlb	2	; select bank2
  3888  030D  0235               	subwf	main@i^(0+256),w
  3889  030E  1803               	skipnc
  3890  030F  2B13               	goto	l4760
  3891  0310  0824               	movf	main@done^(0+256),w
  3892  0311  1903               	btfsc	3,2
  3893  0312  28FE               	goto	l4728
  3894  0313                     l4760:	
  3895                           
  3896                           ;main.c: 152: }
  3897                           ;main.c: 153: }
  3898                           ;main.c: 155: if (new_motor > m_conf.max_pwm)
  3899  0313  0834               	movf	(main@new_motor+1)^(0+256),w
  3900  0314  0021               	movlb	1	; select bank1
  3901  0315  023E               	subwf	((_m_conf+1)^(0+128)+1),w
  3902  0316  1D03               	skipz
  3903  0317  2B1C               	goto	u5425
  3904  0318  0022               	movlb	2	; select bank2
  3905  0319  0833               	movf	main@new_motor^(0+256),w
  3906  031A  0021               	movlb	1	; select bank1
  3907  031B  023D               	subwf	(_m_conf^(0+128)+1),w
  3908  031C                     u5425:	
  3909  031C  1803               	skipnc
  3910  031D  2B25               	goto	l4764
  3911                           
  3912                           ;main.c: 156: new_motor = m_conf.max_pwm;
  3913  031E  083E               	movf	((_m_conf+1)^(0+128)+1),w
  3914  031F  0022               	movlb	2	; select bank2
  3915  0320  00B4               	movwf	(main@new_motor+1)^(0+256)
  3916  0321  0021               	movlb	1	; select bank1
  3917  0322  083D               	movf	(_m_conf^(0+128)+1),w
  3918  0323  0022               	movlb	2	; select bank2
  3919  0324  00B3               	movwf	main@new_motor^(0+256)
  3920  0325                     l4764:	
  3921                           
  3922                           ;main.c: 157: if (new_motor < m_conf.ref_pwm[m_conf.nb_steps-1])
  3923  0325  0021               	movlb	1	; select bank1
  3924  0326  353F               	lslf	(_m_conf^(0+128)+3),w
  3925  0327  3EFE               	addlw	254
  3926  0328  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3927  0329  0086               	movwf	6
  3928  032A  0187               	clrf	7
  3929  032B  3F40               	moviw [0]fsr1
  3930  032C  0020               	movlb	0	; select bank0
  3931  032D  00CC               	movwf	??_main
  3932  032E  3F41               	moviw [1]fsr1
  3933  032F  00CD               	movwf	??_main+1
  3934  0330  084D               	movf	??_main+1,w
  3935  0331  0022               	movlb	2	; select bank2
  3936  0332  0234               	subwf	(main@new_motor+1)^(0+256),w
  3937  0333  1D03               	skipz
  3938  0334  2B39               	goto	u5435
  3939  0335  0020               	movlb	0	; select bank0
  3940  0336  084C               	movf	??_main,w
  3941  0337  0022               	movlb	2	; select bank2
  3942  0338  0233               	subwf	main@new_motor^(0+256),w
  3943  0339                     u5435:	
  3944  0339  1803               	skipnc
  3945  033A  2B43               	goto	l4768
  3946                           
  3947                           ;main.c: 158: new_motor = m_conf.low_speed_pwm;
  3948  033B  0021               	movlb	1	; select bank1
  3949  033C  0869               	movf	((_m_conf+1)^(0+128)+44),w
  3950  033D  0022               	movlb	2	; select bank2
  3951  033E  00B4               	movwf	(main@new_motor+1)^(0+256)
  3952  033F  0021               	movlb	1	; select bank1
  3953  0340  0868               	movf	(_m_conf^(0+128)+44),w
  3954  0341  0022               	movlb	2	; select bank2
  3955  0342  00B3               	movwf	main@new_motor^(0+256)
  3956  0343                     l4768:	
  3957                           
  3958                           ;main.c: 160: if (motor == 0)
  3959  0343  0021               	movlb	1	; select bank1
  3960  0344  0838               	movf	_motor^(0+128),w
  3961  0345  0439               	iorwf	(_motor+1)^(0+128),w
  3962  0346  1D03               	btfss	3,2
  3963  0347  2B58               	goto	l4774
  3964                           
  3965                           ;main.c: 161: {
  3966                           ;main.c: 162: EPWM1_LoadDutyValue(0);
  3967  0348  3000               	movlw	0
  3968  0349  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3969  034A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3970  034B  318A  22AE  3180   	fcall	_EPWM1_LoadDutyValue
  3971                           
  3972                           ;main.c: 163: _delay((unsigned long)((10)*(32000000/4000.0)));
  3973  034E  3068               	movlw	104
  3974  034F  0020               	movlb	0	; select bank0
  3975  0350  00CD               	movwf	??_main+1
  3976  0351  30E4               	movlw	228
  3977  0352  00CC               	movwf	??_main
  3978  0353                     u5637:	
  3979  0353  0BCC               	decfsz	??_main,f
  3980  0354  2B53               	goto	u5637
  3981  0355  0BCD               	decfsz	??_main+1,f
  3982  0356  2B53               	goto	u5637
  3983  0357  0000               	nop
  3984  0358                     l4774:	
  3985                           
  3986                           ;main.c: 164: }
  3987                           ;main.c: 166: motor = new_motor;
  3988  0358  0022               	movlb	2	; select bank2
  3989  0359  0834               	movf	(main@new_motor+1)^(0+256),w
  3990  035A  0021               	movlb	1	; select bank1
  3991  035B  00B9               	movwf	(_motor+1)^(0+128)
  3992  035C  0022               	movlb	2	; select bank2
  3993  035D  0833               	movf	main@new_motor^(0+256),w
  3994  035E  0021               	movlb	1	; select bank1
  3995  035F  00B8               	movwf	_motor^(0+128)
  3996                           
  3997                           ;main.c: 167: EPWM1_LoadDutyValue(1023 - motor);
  3998  0360  0938               	comf	_motor^(0+128),w
  3999  0361  0020               	movlb	0	; select bank0
  4000  0362  00CC               	movwf	??_main
  4001  0363  0021               	movlb	1	; select bank1
  4002  0364  0939               	comf	(_motor+1)^(0+128),w
  4003  0365  0020               	movlb	0	; select bank0
  4004  0366  00CD               	movwf	??_main+1
  4005  0367  0ACC               	incf	??_main,f
  4006  0368  1903               	skipnz
  4007  0369  0ACD               	incf	??_main+1,f
  4008  036A  084C               	movf	??_main,w
  4009  036B  3EFF               	addlw	255
  4010  036C  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4011  036D  3003               	movlw	3
  4012  036E  3D4D               	addwfc	??_main+1,w
  4013  036F  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4014  0370  318A  22AE  3180   	fcall	_EPWM1_LoadDutyValue
  4015  0373                     l4776:	
  4016                           
  4017                           ;main.c: 168: }
  4018                           ;main.c: 173: if (m_button.confirmed_state == long_push)
  4019  0373  3002               	movlw	2
  4020  0374  0020               	movlb	0	; select bank0
  4021  0375  0654               	xorwf	_m_button,w	;volatile
  4022  0376  1D03               	btfss	3,2
  4023  0377  2B95               	goto	l4786
  4024                           
  4025                           ;main.c: 174: {
  4026                           ;main.c: 175: motor = 0;
  4027  0378  0021               	movlb	1	; select bank1
  4028  0379  01B8               	clrf	_motor^(0+128)
  4029  037A  01B9               	clrf	(_motor+1)^(0+128)
  4030                           
  4031                           ;main.c: 176: EPWM1_LoadDutyValue(1023-motor);
  4032  037B  0938               	comf	_motor^(0+128),w
  4033  037C  0020               	movlb	0	; select bank0
  4034  037D  00CC               	movwf	??_main
  4035  037E  0021               	movlb	1	; select bank1
  4036  037F  0939               	comf	(_motor+1)^(0+128),w
  4037  0380  0020               	movlb	0	; select bank0
  4038  0381  00CD               	movwf	??_main+1
  4039  0382  0ACC               	incf	??_main,f
  4040  0383  1903               	skipnz
  4041  0384  0ACD               	incf	??_main+1,f
  4042  0385  084C               	movf	??_main,w
  4043  0386  3EFF               	addlw	255
  4044  0387  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4045  0388  3003               	movlw	3
  4046  0389  3D4D               	addwfc	??_main+1,w
  4047  038A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4048  038B  318A  22AE  3180   	fcall	_EPWM1_LoadDutyValue
  4049                           
  4050                           ;main.c: 178: perform_calibration();
  4051  038E  3185  25EF  3180   	fcall	_perform_calibration
  4052                           
  4053                           ;main.c: 179: write_calibration_to_EEPROM();
  4054  0391  318D  251C  3180   	fcall	_write_calibration_to_EEPROM
  4055                           
  4056                           ;main.c: 180: }
  4057  0394  2899               	goto	l4710
  4058  0395                     l4786:	
  4059                           
  4060                           ;main.c: 181: else if (m_button.confirmed_state == short_push)
  4061  0395  0020               	movlb	0	; select bank0
  4062  0396  0354               	decf	_m_button,w	;volatile
  4063  0397  1D03               	btfss	3,2
  4064  0398  2899               	goto	l4710
  4065  0399  2896               	goto	L1
  4066  039A                     __end_of_main:	
  4067                           ;main.c: 182: button_init();
  4068                           
  4069                           
  4070                           	psect	text1
  4071  0D1C                     __ptext1:	
  4072 ;; *************** function _write_calibration_to_EEPROM *****************
  4073 ;; Defined at:
  4074 ;;		line 42 in file "calibration.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;  i               1   19[BANK0 ] unsigned char 
  4079 ;;  p               1   18[BANK0 ] PTR unsigned char 
  4080 ;;		 -> m_crc(2), m_conf(47), 
  4081 ;;  addr            1   17[BANK0 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4091 ;;      Params:         0       0       0       0       0       0
  4092 ;;      Locals:         0       3       0       0       0       0
  4093 ;;      Temps:          1       0       0       0       0       0
  4094 ;;      Totals:         1       3       0       0       0       0
  4095 ;;Total ram usage:        4 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    7
  4098 ;; This function calls:
  4099 ;;		_DATAEE_WriteByte
  4100 ;;		_crc_update
  4101 ;; This function is called by:
  4102 ;;		_main
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _write_calibration_to_EEPROM
  4108  0D1C                     _write_calibration_to_EEPROM:	
  4109                           
  4110                           ;calibration.c: 45: unsigned char addr = 0x00;
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _write_calibration_to_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4114  0D1C  0020               	movlb	0	; select bank0
  4115  0D1D  01B1               	clrf	write_calibration_to_EEPROM@addr
  4116                           
  4117                           ;calibration.c: 46: m_crc = 0x00;
  4118  0D1E  0021               	movlb	1	; select bank1
  4119  0D1F  01EB               	clrf	_m_crc^(0+128)
  4120  0D20  01EC               	clrf	(_m_crc+1)^(0+128)
  4121                           
  4122                           ;calibration.c: 47: char i,*p;
  4123                           ;calibration.c: 48: p=(char *)&m_conf;
  4124  0D21  30BC               	movlw	(low (_m_conf| 0))& (0+255)
  4125  0D22  00F5               	movwf	??_write_calibration_to_EEPROM
  4126  0D23  0875               	movf	??_write_calibration_to_EEPROM,w
  4127  0D24  0020               	movlb	0	; select bank0
  4128  0D25  00B2               	movwf	write_calibration_to_EEPROM@p
  4129                           
  4130                           ;calibration.c: 49: for(i=0; i<sizeof(m_conf); i++) {
  4131  0D26  01B3               	clrf	write_calibration_to_EEPROM@i
  4132  0D27  302F               	movlw	47
  4133  0D28  0233               	subwf	write_calibration_to_EEPROM@i,w
  4134  0D29  1803               	btfsc	3,0
  4135  0D2A  2D62               	goto	l4282
  4136  0D2B                     l4274:	
  4137                           
  4138                           ;calibration.c: 50: DATAEE_WriteByte(addr++, *p);
  4139  0D2B  0832               	movf	write_calibration_to_EEPROM@p,w
  4140  0D2C  0086               	movwf	6
  4141  0D2D  0187               	clrf	7
  4142  0D2E  0801               	movf	1,w
  4143  0D2F  00F5               	movwf	??_write_calibration_to_EEPROM
  4144  0D30  0875               	movf	??_write_calibration_to_EEPROM,w
  4145  0D31  00F4               	movwf	DATAEE_WriteByte@bData
  4146  0D32  0831               	movf	write_calibration_to_EEPROM@addr,w
  4147  0D33  318B  233E  318D   	fcall	_DATAEE_WriteByte
  4148  0D36  3001               	movlw	1
  4149  0D37  00F5               	movwf	??_write_calibration_to_EEPROM
  4150  0D38  0875               	movf	??_write_calibration_to_EEPROM,w
  4151  0D39  0020               	movlb	0	; select bank0
  4152  0D3A  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  4153                           
  4154                           ;calibration.c: 51: m_crc = crc_update(m_crc, *p++);
  4155  0D3B  0021               	movlb	1	; select bank1
  4156  0D3C  086C               	movf	(_m_crc+1)^(0+128),w
  4157  0D3D  0020               	movlb	0	; select bank0
  4158  0D3E  00A1               	movwf	crc_update@old_crc+1
  4159  0D3F  0021               	movlb	1	; select bank1
  4160  0D40  086B               	movf	_m_crc^(0+128),w
  4161  0D41  0020               	movlb	0	; select bank0
  4162  0D42  00A0               	movwf	crc_update@old_crc
  4163  0D43  0832               	movf	write_calibration_to_EEPROM@p,w
  4164  0D44  0086               	movwf	6
  4165  0D45  0187               	clrf	7
  4166  0D46  0801               	movf	1,w
  4167  0D47  00F5               	movwf	??_write_calibration_to_EEPROM
  4168  0D48  0875               	movf	??_write_calibration_to_EEPROM,w
  4169  0D49  00A2               	movwf	crc_update@data
  4170  0D4A  318C  241D  318D   	fcall	_crc_update
  4171  0D4D  0020               	movlb	0	; select bank0
  4172  0D4E  0821               	movf	?_crc_update+1,w
  4173  0D4F  0021               	movlb	1	; select bank1
  4174  0D50  00EC               	movwf	(_m_crc+1)^(0+128)
  4175  0D51  0020               	movlb	0	; select bank0
  4176  0D52  0820               	movf	?_crc_update,w
  4177  0D53  0021               	movlb	1	; select bank1
  4178  0D54  00EB               	movwf	_m_crc^(0+128)
  4179  0D55  3001               	movlw	1
  4180  0D56  00F5               	movwf	??_write_calibration_to_EEPROM
  4181  0D57  0875               	movf	??_write_calibration_to_EEPROM,w
  4182  0D58  0020               	movlb	0	; select bank0
  4183  0D59  07B2               	addwf	write_calibration_to_EEPROM@p,f
  4184  0D5A  3001               	movlw	1
  4185  0D5B  00F5               	movwf	??_write_calibration_to_EEPROM
  4186  0D5C  0875               	movf	??_write_calibration_to_EEPROM,w
  4187  0D5D  07B3               	addwf	write_calibration_to_EEPROM@i,f
  4188  0D5E  302F               	movlw	47
  4189  0D5F  0233               	subwf	write_calibration_to_EEPROM@i,w
  4190  0D60  1C03               	skipc
  4191  0D61  2D2B               	goto	l4274
  4192  0D62                     l4282:	
  4193                           
  4194                           ;calibration.c: 52: }
  4195                           ;calibration.c: 53: p=(char *)&m_crc;
  4196  0D62  30EB               	movlw	(low (_m_crc| 0))& (0+255)
  4197  0D63  00F5               	movwf	??_write_calibration_to_EEPROM
  4198  0D64  0875               	movf	??_write_calibration_to_EEPROM,w
  4199  0D65  00B2               	movwf	write_calibration_to_EEPROM@p
  4200                           
  4201                           ;calibration.c: 54: for(i=0; i<sizeof(m_crc); i++)
  4202  0D66  01B3               	clrf	write_calibration_to_EEPROM@i
  4203  0D67                     L4:	
  4204  0D67  3002               	movlw	2
  4205  0D68  0233               	subwf	write_calibration_to_EEPROM@i,w
  4206  0D69  1803               	btfsc	3,0
  4207  0D6A  0008               	return
  4208                           
  4209                           ;calibration.c: 55: DATAEE_WriteByte(addr++, *p++);
  4210  0D6B  0832               	movf	write_calibration_to_EEPROM@p,w
  4211  0D6C  0086               	movwf	6
  4212  0D6D  0187               	clrf	7
  4213  0D6E  0801               	movf	1,w
  4214  0D6F  00F5               	movwf	??_write_calibration_to_EEPROM
  4215  0D70  0875               	movf	??_write_calibration_to_EEPROM,w
  4216  0D71  00F4               	movwf	DATAEE_WriteByte@bData
  4217  0D72  0831               	movf	write_calibration_to_EEPROM@addr,w
  4218  0D73  318B  233E  318D   	fcall	_DATAEE_WriteByte
  4219  0D76  3001               	movlw	1
  4220  0D77  00F5               	movwf	??_write_calibration_to_EEPROM
  4221  0D78  0875               	movf	??_write_calibration_to_EEPROM,w
  4222  0D79  0020               	movlb	0	; select bank0
  4223  0D7A  07B2               	addwf	write_calibration_to_EEPROM@p,f
  4224  0D7B  3001               	movlw	1
  4225  0D7C  00F5               	movwf	??_write_calibration_to_EEPROM
  4226  0D7D  0875               	movf	??_write_calibration_to_EEPROM,w
  4227  0D7E  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  4228  0D7F  3001               	movlw	1
  4229  0D80  00F5               	movwf	??_write_calibration_to_EEPROM
  4230  0D81  0875               	movf	??_write_calibration_to_EEPROM,w
  4231  0D82  07B3               	addwf	write_calibration_to_EEPROM@i,f
  4232  0D83  2D67               	goto	L4
  4233  0D84                     __end_of_write_calibration_to_EEPROM:	
  4234                           
  4235                           	psect	text2
  4236  0B3E                     __ptext2:	
  4237 ;; *************** function _DATAEE_WriteByte *****************
  4238 ;; Defined at:
  4239 ;;		line 180 in file "mcc_generated_files/memory.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  bAdd            1    wreg     unsigned char 
  4242 ;;  bData           1    4[COMMON] unsigned char 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  bAdd            1    0[BANK0 ] unsigned char 
  4245 ;;  GIEBitValue     1    1[BANK0 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, status,2, status,0
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4255 ;;      Params:         1       0       0       0       0       0
  4256 ;;      Locals:         0       2       0       0       0       0
  4257 ;;      Temps:          0       0       0       0       0       0
  4258 ;;      Totals:         1       2       0       0       0       0
  4259 ;;Total ram usage:        3 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    6
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		_write_calibration_to_EEPROM
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           
  4270                           ;psect for function _DATAEE_WriteByte
  4271  0B3E                     _DATAEE_WriteByte:	
  4272                           
  4273                           ;incstack = 0
  4274                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  4275                           ;DATAEE_WriteByte@bAdd stored from wreg
  4276  0B3E  0020               	movlb	0	; select bank0
  4277  0B3F  00A0               	movwf	DATAEE_WriteByte@bAdd
  4278                           
  4279                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  4280  0B40  01A1               	clrf	DATAEE_WriteByte@GIEBitValue
  4281                           
  4282                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  4283  0B41  0820               	movf	DATAEE_WriteByte@bAdd,w
  4284  0B42  0023               	movlb	3	; select bank3
  4285  0B43  0091               	movwf	17	;volatile
  4286                           
  4287                           ;memory.c: 185: EEDATL = bData;
  4288  0B44  0874               	movf	DATAEE_WriteByte@bData,w
  4289  0B45  0093               	movwf	19	;volatile
  4290                           
  4291                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  4292  0B46  1395               	bcf	21,7	;volsfr
  4293                           
  4294                           ;memory.c: 187: EECON1bits.CFGS = 0;
  4295  0B47  1315               	bcf	21,6	;volsfr
  4296                           
  4297                           ;memory.c: 188: EECON1bits.WREN = 1;
  4298  0B48  1515               	bsf	21,2	;volsfr
  4299                           
  4300                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  4301  0B49  3000               	movlw	0
  4302  0B4A  1B8B               	btfsc	11,7	;volatile
  4303  0B4B  3001               	movlw	1
  4304  0B4C  0020               	movlb	0	; select bank0
  4305  0B4D  00A1               	movwf	DATAEE_WriteByte@GIEBitValue
  4306                           
  4307                           ;memory.c: 191: INTCONbits.GIE = 0;
  4308  0B4E  138B               	bcf	11,7	;volatile
  4309                           
  4310                           ;memory.c: 192: EECON2 = 0x55;
  4311  0B4F  3055               	movlw	85
  4312  0B50  0023               	movlb	3	; select bank3
  4313  0B51  0096               	movwf	22	;volsfr
  4314                           
  4315                           ;memory.c: 193: EECON2 = 0xAA;
  4316  0B52  30AA               	movlw	170
  4317  0B53  0096               	movwf	22	;volsfr
  4318                           
  4319                           ;memory.c: 194: EECON1bits.WR = 1;
  4320  0B54  1495               	bsf	21,1	;volsfr
  4321  0B55                     l286:	
  4322                           ;memory.c: 197: {
  4323                           
  4324                           ;memory.c: 196: while (EECON1bits.WR)
  4325                           
  4326  0B55  1895               	btfsc	21,1	;volsfr
  4327  0B56  2B55               	goto	l286
  4328                           
  4329                           ;memory.c: 198: }
  4330                           ;memory.c: 200: EECON1bits.WREN = 0;
  4331  0B57  1115               	bcf	21,2	;volsfr
  4332                           
  4333                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  4334  0B58  0020               	movlb	0	; select bank0
  4335  0B59  0C21               	rrf	DATAEE_WriteByte@GIEBitValue,w
  4336  0B5A  1C03               	skipc
  4337  0B5B  138B               	bcf	11,7	;volatile
  4338  0B5C  1803               	skipnc
  4339  0B5D  178B               	bsf	11,7	;volatile
  4340  0B5E  0008               	return
  4341  0B5F                     __end_of_DATAEE_WriteByte:	
  4342                           
  4343                           	psect	text3
  4344  05EF                     __ptext3:	
  4345 ;; *************** function _perform_calibration *****************
  4346 ;; Defined at:
  4347 ;;		line 58 in file "calibration.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  __delay_tmp     1   11[BANK0 ] unsigned char 
  4352 ;;  __delay_tmp     1    9[BANK0 ] unsigned char 
  4353 ;;  __delay_tmp     1   10[BANK0 ] unsigned char 
  4354 ;;  __delay_tmp     1   12[BANK0 ] unsigned char 
  4355 ;;  i               1   13[BANK0 ] unsigned char 
  4356 ;;  replay          1    7[BANK0 ] unsigned char 
  4357 ;;  __delay_tmp     1    8[BANK0 ] unsigned char 
  4358 ;;  m_motor         2   14[BANK0 ] unsigned short 
  4359 ;;  done            1    6[BANK0 ] unsigned char 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      void 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4369 ;;      Params:         0       0       0       0       0       0
  4370 ;;      Locals:         0      10       0       0       0       0
  4371 ;;      Temps:          0       3       0       0       0       0
  4372 ;;      Totals:         0      13       0       0       0       0
  4373 ;;Total ram usage:       13 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    8
  4376 ;; This function calls:
  4377 ;;		_EPWM1_LoadDutyValue
  4378 ;;		_LED_set_state
  4379 ;;		_button_init
  4380 ;;		_double_fast_blink
  4381 ;;		_get_button_state
  4382 ;; This function is called by:
  4383 ;;		_main
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           
  4388                           ;psect for function _perform_calibration
  4389  05EF                     _perform_calibration:	
  4390                           
  4391                           ;calibration.c: 60: double_fast_blink();
  4392                           
  4393                           ;incstack = 0
  4394                           ; Regs used in _perform_calibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4395  05EF  318C  246C  3185   	fcall	_double_fast_blink
  4396                           
  4397                           ;calibration.c: 61: button_init();
  4398  05F2  3189  21ED  3185   	fcall	_button_init
  4399                           
  4400                           ;calibration.c: 64: LED_set_state(always_on);
  4401  05F5  3000               	movlw	0
  4402  05F6  318B  2321  3185   	fcall	_LED_set_state
  4403                           
  4404                           ;calibration.c: 65: m_conf.use_mph = 0;
  4405  05F9  0021               	movlb	1	; select bank1
  4406  05FA  01BC               	clrf	_m_conf^(0+128)
  4407  05FB                     l4114:	
  4408                           ;calibration.c: 66: while (m_button.confirmed_state != long_push)
  4409                           
  4410  05FB  3002               	movlw	2
  4411  05FC  0020               	movlb	0	; select bank0
  4412  05FD  0654               	xorwf	_m_button,w	;volatile
  4413  05FE  1903               	btfsc	3,2
  4414  05FF  2E1D               	goto	l4116
  4415                           
  4416                           ;calibration.c: 67: {
  4417                           ;calibration.c: 68: if (m_button.confirmed_state == short_push)
  4418  0600  0020               	movlb	0	; select bank0
  4419  0601  0354               	decf	_m_button,w	;volatile
  4420  0602  1D03               	btfss	3,2
  4421  0603  2DFB               	goto	l4114
  4422                           
  4423                           ;calibration.c: 69: {
  4424                           ;calibration.c: 70: m_conf.use_mph = !m_conf.use_mph;
  4425  0604  0021               	movlb	1	; select bank1
  4426  0605  083C               	movf	_m_conf^(0+128),w
  4427  0606  1D03               	btfss	3,2
  4428  0607  2E0A               	goto	u4350
  4429  0608  3001               	movlw	1
  4430  0609  2E0B               	goto	u4360
  4431  060A                     u4350:	
  4432  060A  3000               	movlw	0
  4433  060B                     u4360:	
  4434  060B  0020               	movlb	0	; select bank0
  4435  060C  00A3               	movwf	??_perform_calibration
  4436  060D  0823               	movf	??_perform_calibration,w
  4437  060E  0021               	movlb	1	; select bank1
  4438  060F  00BC               	movwf	_m_conf^(0+128)
  4439                           
  4440                           ;calibration.c: 71: if (m_conf.use_mph)
  4441  0610  083C               	movf	_m_conf^(0+128),w
  4442  0611  1903               	btfsc	3,2
  4443  0612  2E15               	goto	l4112
  4444                           
  4445                           ;calibration.c: 72: LED_set_state(slow_blinking);
  4446  0613  3002               	movlw	2
  4447  0614  2E16               	goto	L5
  4448  0615                     l4112:	
  4449                           
  4450                           ;calibration.c: 73: else
  4451                           ;calibration.c: 74: LED_set_state(fast_blinking);
  4452  0615  3003               	movlw	3
  4453  0616                     L5:	
  4454  0616  318B  2321  3185   	fcall	_LED_set_state
  4455                           
  4456                           ;calibration.c: 75: button_init();
  4457  0619  3189  21ED  3185   	fcall	_button_init
  4458  061C  2DFB               	goto	l4114
  4459  061D                     l4116:	
  4460                           
  4461                           ;calibration.c: 76: }
  4462                           ;calibration.c: 77: }
  4463                           ;calibration.c: 78: double_fast_blink();
  4464  061D  318C  246C  3185   	fcall	_double_fast_blink
  4465                           
  4466                           ;calibration.c: 79: button_init();
  4467  0620  3189  21ED  3185   	fcall	_button_init
  4468                           
  4469                           ;calibration.c: 82: unsigned short m_motor = 200;
  4470  0623  30C8               	movlw	200
  4471  0624  0020               	movlb	0	; select bank0
  4472  0625  00AE               	movwf	perform_calibration@m_motor
  4473  0626  3000               	movlw	0
  4474  0627  00AF               	movwf	perform_calibration@m_motor+1
  4475                           
  4476                           ;calibration.c: 84: EPWM1_LoadDutyValue(0);
  4477  0628  3000               	movlw	0
  4478  0629  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4479  062A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4480  062B  318A  22AE  3185   	fcall	_EPWM1_LoadDutyValue
  4481                           
  4482                           ;calibration.c: 85: _delay((unsigned long)((30)*(32000000/4000.0)));
  4483  062E  3002               	movlw	2
  4484  062F  0020               	movlb	0	; select bank0
  4485  0630  00A5               	movwf	??_perform_calibration+2
  4486  0631  3038               	movlw	56
  4487  0632  00A4               	movwf	??_perform_calibration+1
  4488  0633  30AD               	movlw	173
  4489  0634  00A3               	movwf	??_perform_calibration
  4490  0635                     u5647:	
  4491  0635  0BA3               	decfsz	??_perform_calibration,f
  4492  0636  2E35               	goto	u5647
  4493  0637  0BA4               	decfsz	??_perform_calibration+1,f
  4494  0638  2E35               	goto	u5647
  4495  0639  0BA5               	decfsz	??_perform_calibration+2,f
  4496  063A  2E35               	goto	u5647
  4497  063B                     l4122:	
  4498                           ;calibration.c: 88: while (1)
  4499                           
  4500                           
  4501                           ;calibration.c: 89: {
  4502                           ;calibration.c: 90: if (get_button_state() && (m_motor >= 300))
  4503  063B  3189  21E1  3185   	fcall	_get_button_state
  4504  063E  3A00               	xorlw	0
  4505  063F  1903               	skipnz
  4506  0640  2E49               	goto	l4128
  4507  0641  3001               	movlw	1
  4508  0642  0020               	movlb	0	; select bank0
  4509  0643  022F               	subwf	perform_calibration@m_motor+1,w
  4510  0644  302C               	movlw	44
  4511  0645  1903               	skipnz
  4512  0646  022E               	subwf	perform_calibration@m_motor,w
  4513  0647  1803               	btfsc	3,0
  4514  0648  2E76               	goto	l4138
  4515  0649                     l4128:	
  4516                           ;calibration.c: 91: break;
  4517                           
  4518                           
  4519                           ;calibration.c: 92: m_motor++;
  4520  0649  3001               	movlw	1
  4521  064A  0020               	movlb	0	; select bank0
  4522  064B  07AE               	addwf	perform_calibration@m_motor,f
  4523  064C  3000               	movlw	0
  4524  064D  3DAF               	addwfc	perform_calibration@m_motor+1,f
  4525                           
  4526                           ;calibration.c: 93: if (m_motor == 1023)
  4527  064E  0A2E               	incf	perform_calibration@m_motor,w
  4528  064F  3003               	movlw	3
  4529  0650  1903               	skipnz
  4530  0651  062F               	xorwf	perform_calibration@m_motor+1,w
  4531  0652  1D03               	btfss	3,2
  4532  0653  2E58               	goto	l4134
  4533                           
  4534                           ;calibration.c: 94: m_motor = 300;
  4535  0654  302C               	movlw	44
  4536  0655  00AE               	movwf	perform_calibration@m_motor
  4537  0656  3001               	movlw	1
  4538  0657  00AF               	movwf	perform_calibration@m_motor+1
  4539  0658                     l4134:	
  4540                           
  4541                           ;calibration.c: 95: EPWM1_LoadDutyValue(1023-m_motor);
  4542  0658  092E               	comf	perform_calibration@m_motor,w
  4543  0659  00A3               	movwf	??_perform_calibration
  4544  065A  092F               	comf	perform_calibration@m_motor+1,w
  4545  065B  00A4               	movwf	??_perform_calibration+1
  4546  065C  0AA3               	incf	??_perform_calibration,f
  4547  065D  1903               	skipnz
  4548  065E  0AA4               	incf	??_perform_calibration+1,f
  4549  065F  0823               	movf	??_perform_calibration,w
  4550  0660  3EFF               	addlw	255
  4551  0661  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4552  0662  3003               	movlw	3
  4553  0663  3D24               	addwfc	??_perform_calibration+1,w
  4554  0664  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4555  0665  318A  22AE  3185   	fcall	_EPWM1_LoadDutyValue
  4556                           
  4557                           ;calibration.c: 96: _delay((unsigned long)((30)*(32000000/4000.0)));
  4558  0668  3002               	movlw	2
  4559  0669  0020               	movlb	0	; select bank0
  4560  066A  00A5               	movwf	??_perform_calibration+2
  4561  066B  3038               	movlw	56
  4562  066C  00A4               	movwf	??_perform_calibration+1
  4563  066D  30AD               	movlw	173
  4564  066E  00A3               	movwf	??_perform_calibration
  4565  066F                     u5657:	
  4566  066F  0BA3               	decfsz	??_perform_calibration,f
  4567  0670  2E6F               	goto	u5657
  4568  0671  0BA4               	decfsz	??_perform_calibration+1,f
  4569  0672  2E6F               	goto	u5657
  4570  0673  0BA5               	decfsz	??_perform_calibration+2,f
  4571  0674  2E6F               	goto	u5657
  4572  0675  2E3B               	goto	l4122
  4573  0676                     l4138:	
  4574                           
  4575                           ;calibration.c: 97: }
  4576                           ;calibration.c: 98: m_conf.max_pwm = m_motor;
  4577  0676  0020               	movlb	0	; select bank0
  4578  0677  082F               	movf	perform_calibration@m_motor+1,w
  4579  0678  0021               	movlb	1	; select bank1
  4580  0679  00BE               	movwf	((_m_conf+1)^(0+128)+1)
  4581  067A  0020               	movlb	0	; select bank0
  4582  067B  082E               	movf	perform_calibration@m_motor,w
  4583  067C  0021               	movlb	1	; select bank1
  4584  067D  00BD               	movwf	(_m_conf^(0+128)+1)
  4585                           
  4586                           ;calibration.c: 99: double_fast_blink();
  4587  067E  318C  246C  3185   	fcall	_double_fast_blink
  4588                           
  4589                           ;calibration.c: 100: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4590  0681  0020               	movlb	0	; select bank0
  4591  0682  01A8               	clrf	perform_calibration@__delay_tmp
  4592  0683  300A               	movlw	10
  4593  0684  0228               	subwf	perform_calibration@__delay_tmp,w
  4594  0685  1803               	btfsc	3,0
  4595  0686  2E9C               	goto	l4154
  4596  0687                     l4148:	
  4597  0687  3005               	movlw	5
  4598  0688  00A5               	movwf	??_perform_calibration+2
  4599  0689  300F               	movlw	15
  4600  068A  00A4               	movwf	??_perform_calibration+1
  4601  068B  30F4               	movlw	244
  4602  068C  00A3               	movwf	??_perform_calibration
  4603  068D                     u5667:	
  4604  068D  0BA3               	decfsz	??_perform_calibration,f
  4605  068E  2E8D               	goto	u5667
  4606  068F  0BA4               	decfsz	??_perform_calibration+1,f
  4607  0690  2E8D               	goto	u5667
  4608  0691  0BA5               	decfsz	??_perform_calibration+2,f
  4609  0692  2E8D               	goto	u5667
  4610  0693  3001               	movlw	1
  4611  0694  0020               	movlb	0	; select bank0
  4612  0695  00A3               	movwf	??_perform_calibration
  4613  0696  0823               	movf	??_perform_calibration,w
  4614  0697  07A8               	addwf	perform_calibration@__delay_tmp,f
  4615  0698  300A               	movlw	10
  4616  0699  0228               	subwf	perform_calibration@__delay_tmp,w
  4617  069A  1C03               	skipc
  4618  069B  2E87               	goto	l4148
  4619  069C                     l4154:	
  4620                           
  4621                           ;calibration.c: 104: bool done = 0;
  4622  069C  01A6               	clrf	perform_calibration@done
  4623  069D                     l4238:	
  4624                           ;calibration.c: 105: while (!done)
  4625                           
  4626  069D  0826               	movf	perform_calibration@done,w
  4627  069E  1D03               	btfss	3,2
  4628  069F  2F82               	goto	l4240
  4629                           
  4630                           ;calibration.c: 106: {
  4631                           ;calibration.c: 107: unsigned char i = 0;
  4632  06A0  01AD               	clrf	perform_calibration@i
  4633                           
  4634                           ;calibration.c: 108: m_motor = m_conf.max_pwm;
  4635  06A1  0021               	movlb	1	; select bank1
  4636  06A2  083E               	movf	((_m_conf+1)^(0+128)+1),w
  4637  06A3  0020               	movlb	0	; select bank0
  4638  06A4  00AF               	movwf	perform_calibration@m_motor+1
  4639  06A5  0021               	movlb	1	; select bank1
  4640  06A6  083D               	movf	(_m_conf^(0+128)+1),w
  4641  06A7  0020               	movlb	0	; select bank0
  4642  06A8  00AE               	movwf	perform_calibration@m_motor
  4643  06A9                     l4186:	
  4644                           ;calibration.c: 109: while (m_motor > 100)
  4645                           
  4646  06A9  3000               	movlw	0
  4647  06AA  0020               	movlb	0	; select bank0
  4648  06AB  022F               	subwf	perform_calibration@m_motor+1,w
  4649  06AC  3065               	movlw	101
  4650  06AD  1903               	skipnz
  4651  06AE  022E               	subwf	perform_calibration@m_motor,w
  4652  06AF  1C03               	btfss	3,0
  4653  06B0  2F06               	goto	l4188
  4654                           
  4655                           ;calibration.c: 110: {
  4656                           ;calibration.c: 111: if (get_button_state())
  4657  06B1  3189  21E1  3185   	fcall	_get_button_state
  4658  06B4  3A00               	xorlw	0
  4659  06B5  1903               	skipnz
  4660  06B6  2EE2               	goto	l4180
  4661                           
  4662                           ;calibration.c: 112: {
  4663                           ;calibration.c: 113: m_conf.ref_pwm[i++] = m_motor;
  4664  06B7  0020               	movlb	0	; select bank0
  4665  06B8  352D               	lslf	perform_calibration@i,w
  4666  06B9  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4667  06BA  0086               	movwf	6
  4668  06BB  0187               	clrf	7
  4669  06BC  082E               	movf	perform_calibration@m_motor,w
  4670  06BD  3FC0               	movwi [0]fsr1
  4671  06BE  082F               	movf	perform_calibration@m_motor+1,w
  4672  06BF  3FC1               	movwi [1]fsr1
  4673  06C0  3001               	movlw	1
  4674  06C1  00A3               	movwf	??_perform_calibration
  4675  06C2  0823               	movf	??_perform_calibration,w
  4676  06C3  07AD               	addwf	perform_calibration@i,f
  4677                           
  4678                           ;calibration.c: 114: double_fast_blink();
  4679  06C4  318C  246C  3185   	fcall	_double_fast_blink
  4680                           
  4681                           ;calibration.c: 115: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4682  06C7  0020               	movlb	0	; select bank0
  4683  06C8  01A9               	clrf	perform_calibration@__delay_tmp_899
  4684  06C9  300A               	movlw	10
  4685  06CA  0229               	subwf	perform_calibration@__delay_tmp_899,w
  4686  06CB  1803               	btfsc	3,0
  4687  06CC  2EE2               	goto	l4180
  4688  06CD                     l4174:	
  4689  06CD  3005               	movlw	5
  4690  06CE  00A5               	movwf	??_perform_calibration+2
  4691  06CF  300F               	movlw	15
  4692  06D0  00A4               	movwf	??_perform_calibration+1
  4693  06D1  30F4               	movlw	244
  4694  06D2  00A3               	movwf	??_perform_calibration
  4695  06D3                     u5677:	
  4696  06D3  0BA3               	decfsz	??_perform_calibration,f
  4697  06D4  2ED3               	goto	u5677
  4698  06D5  0BA4               	decfsz	??_perform_calibration+1,f
  4699  06D6  2ED3               	goto	u5677
  4700  06D7  0BA5               	decfsz	??_perform_calibration+2,f
  4701  06D8  2ED3               	goto	u5677
  4702  06D9  3001               	movlw	1
  4703  06DA  0020               	movlb	0	; select bank0
  4704  06DB  00A3               	movwf	??_perform_calibration
  4705  06DC  0823               	movf	??_perform_calibration,w
  4706  06DD  07A9               	addwf	perform_calibration@__delay_tmp_899,f
  4707  06DE  300A               	movlw	10
  4708  06DF  0229               	subwf	perform_calibration@__delay_tmp_899,w
  4709  06E0  1C03               	skipc
  4710  06E1  2ECD               	goto	l4174
  4711  06E2                     l4180:	
  4712                           
  4713                           ;calibration.c: 116: }
  4714                           ;calibration.c: 117: m_motor--;
  4715  06E2  3001               	movlw	1
  4716  06E3  0020               	movlb	0	; select bank0
  4717  06E4  02AE               	subwf	perform_calibration@m_motor,f
  4718  06E5  3000               	movlw	0
  4719  06E6  3BAF               	subwfb	perform_calibration@m_motor+1,f
  4720                           
  4721                           ;calibration.c: 118: EPWM1_LoadDutyValue(1023-m_motor);
  4722  06E7  092E               	comf	perform_calibration@m_motor,w
  4723  06E8  00A3               	movwf	??_perform_calibration
  4724  06E9  092F               	comf	perform_calibration@m_motor+1,w
  4725  06EA  00A4               	movwf	??_perform_calibration+1
  4726  06EB  0AA3               	incf	??_perform_calibration,f
  4727  06EC  1903               	skipnz
  4728  06ED  0AA4               	incf	??_perform_calibration+1,f
  4729  06EE  0823               	movf	??_perform_calibration,w
  4730  06EF  3EFF               	addlw	255
  4731  06F0  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4732  06F1  3003               	movlw	3
  4733  06F2  3D24               	addwfc	??_perform_calibration+1,w
  4734  06F3  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4735  06F4  318A  22AE  3185   	fcall	_EPWM1_LoadDutyValue
  4736                           
  4737                           ;calibration.c: 119: _delay((unsigned long)((150)*(32000000/4000.0)));
  4738  06F7  3007               	movlw	7
  4739  06F8  0020               	movlb	0	; select bank0
  4740  06F9  00A5               	movwf	??_perform_calibration+2
  4741  06FA  3017               	movlw	23
  4742  06FB  00A4               	movwf	??_perform_calibration+1
  4743  06FC  306F               	movlw	111
  4744  06FD  00A3               	movwf	??_perform_calibration
  4745  06FE                     u5687:	
  4746  06FE  0BA3               	decfsz	??_perform_calibration,f
  4747  06FF  2EFE               	goto	u5687
  4748  0700  0BA4               	decfsz	??_perform_calibration+1,f
  4749  0701  2EFE               	goto	u5687
  4750  0702  0BA5               	decfsz	??_perform_calibration+2,f
  4751  0703  2EFE               	goto	u5687
  4752  0704  0000               	nop
  4753  0705  2EA9               	goto	l4186
  4754  0706                     l4188:	
  4755                           
  4756                           ;calibration.c: 120: }
  4757                           ;calibration.c: 121: m_conf.nb_steps = i;
  4758  0706  082D               	movf	perform_calibration@i,w
  4759  0707  00A3               	movwf	??_perform_calibration
  4760  0708  0823               	movf	??_perform_calibration,w
  4761  0709  0021               	movlb	1	; select bank1
  4762  070A  00BF               	movwf	(_m_conf^(0+128)+3)
  4763                           
  4764                           ;calibration.c: 122: EPWM1_LoadDutyValue(1023-0);
  4765  070B  30FF               	movlw	255
  4766  070C  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4767  070D  3003               	movlw	3
  4768  070E  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4769  070F  318A  22AE  3185   	fcall	_EPWM1_LoadDutyValue
  4770                           
  4771                           ;calibration.c: 123: double_fast_blink();
  4772  0712  318C  246C  3185   	fcall	_double_fast_blink
  4773                           
  4774                           ;calibration.c: 124: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4775  0715  0020               	movlb	0	; select bank0
  4776  0716  01AA               	clrf	perform_calibration@__delay_tmp_900
  4777  0717  300A               	movlw	10
  4778  0718  022A               	subwf	perform_calibration@__delay_tmp_900,w
  4779  0719  1803               	btfsc	3,0
  4780  071A  2F30               	goto	l722
  4781  071B                     l4200:	
  4782  071B  3005               	movlw	5
  4783  071C  00A5               	movwf	??_perform_calibration+2
  4784  071D  300F               	movlw	15
  4785  071E  00A4               	movwf	??_perform_calibration+1
  4786  071F  30F4               	movlw	244
  4787  0720  00A3               	movwf	??_perform_calibration
  4788  0721                     u5697:	
  4789  0721  0BA3               	decfsz	??_perform_calibration,f
  4790  0722  2F21               	goto	u5697
  4791  0723  0BA4               	decfsz	??_perform_calibration+1,f
  4792  0724  2F21               	goto	u5697
  4793  0725  0BA5               	decfsz	??_perform_calibration+2,f
  4794  0726  2F21               	goto	u5697
  4795  0727  3001               	movlw	1
  4796  0728  0020               	movlb	0	; select bank0
  4797  0729  00A3               	movwf	??_perform_calibration
  4798  072A  0823               	movf	??_perform_calibration,w
  4799  072B  07AA               	addwf	perform_calibration@__delay_tmp_900,f
  4800  072C  300A               	movlw	10
  4801  072D  022A               	subwf	perform_calibration@__delay_tmp_900,w
  4802  072E  1C03               	skipc
  4803  072F  2F1B               	goto	l4200
  4804  0730                     l722:	
  4805                           
  4806                           ;calibration.c: 126: bool replay = 1;
  4807  0730  01A7               	clrf	perform_calibration@replay
  4808  0731  0AA7               	incf	perform_calibration@replay,f
  4809                           
  4810                           ;calibration.c: 127: button_init();
  4811  0732  3189  21ED  3185   	fcall	_button_init
  4812  0735                     l4236:	
  4813                           ;calibration.c: 128: while (replay)
  4814                           
  4815  0735  0020               	movlb	0	; select bank0
  4816  0736  0827               	movf	perform_calibration@replay,w
  4817  0737  1903               	btfsc	3,2
  4818  0738  2E9D               	goto	l4238
  4819                           
  4820                           ;calibration.c: 129: {
  4821                           ;calibration.c: 130: for (i=0; i<m_conf.nb_steps; i++)
  4822  0739  0020               	movlb	0	; select bank0
  4823  073A  01AD               	clrf	perform_calibration@i
  4824  073B  2F40               	goto	l4230
  4825  073C                     l4228:	
  4826                           ;calibration.c: 137: break;
  4827                           
  4828  073C  3001               	movlw	1
  4829  073D  00A3               	movwf	??_perform_calibration
  4830  073E  0823               	movf	??_perform_calibration,w
  4831  073F  07AD               	addwf	perform_calibration@i,f
  4832  0740                     l4230:	
  4833  0740  0021               	movlb	1	; select bank1
  4834  0741  083F               	movf	(_m_conf^(0+128)+3),w
  4835  0742  0020               	movlb	0	; select bank0
  4836  0743  022D               	subwf	perform_calibration@i,w
  4837  0744  1803               	btfsc	3,0
  4838  0745  2F7B               	goto	l4232
  4839                           
  4840                           ;calibration.c: 131: {
  4841                           ;calibration.c: 132: EPWM1_LoadDutyValue(1023-m_conf.ref_pwm[i]);
  4842  0746  352D               	lslf	perform_calibration@i,w
  4843  0747  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4844  0748  0086               	movwf	6
  4845  0749  0187               	clrf	7
  4846  074A  3F40               	moviw [0]fsr1
  4847  074B  00A3               	movwf	??_perform_calibration
  4848  074C  3F41               	moviw [1]fsr1
  4849  074D  00A4               	movwf	??_perform_calibration+1
  4850  074E  09A3               	comf	??_perform_calibration,f
  4851  074F  09A4               	comf	??_perform_calibration+1,f
  4852  0750  0AA3               	incf	??_perform_calibration,f
  4853  0751  1903               	skipnz
  4854  0752  0AA4               	incf	??_perform_calibration+1,f
  4855  0753  0823               	movf	??_perform_calibration,w
  4856  0754  3EFF               	addlw	255
  4857  0755  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4858  0756  3003               	movlw	3
  4859  0757  3D24               	addwfc	??_perform_calibration+1,w
  4860  0758  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4861  0759  318A  22AE  3185   	fcall	_EPWM1_LoadDutyValue
  4862                           
  4863                           ;calibration.c: 133: for(unsigned char __delay_tmp=0;__delay_tmp<(10*3);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4864  075C  0020               	movlb	0	; select bank0
  4865  075D  01AB               	clrf	perform_calibration@__delay_tmp_902
  4866  075E  301E               	movlw	30
  4867  075F  022B               	subwf	perform_calibration@__delay_tmp_902,w
  4868  0760  1803               	btfsc	3,0
  4869  0761  2F77               	goto	l4224
  4870  0762                     l4218:	
  4871  0762  3005               	movlw	5
  4872  0763  00A5               	movwf	??_perform_calibration+2
  4873  0764  300F               	movlw	15
  4874  0765  00A4               	movwf	??_perform_calibration+1
  4875  0766  30F4               	movlw	244
  4876  0767  00A3               	movwf	??_perform_calibration
  4877  0768                     u5707:	
  4878  0768  0BA3               	decfsz	??_perform_calibration,f
  4879  0769  2F68               	goto	u5707
  4880  076A  0BA4               	decfsz	??_perform_calibration+1,f
  4881  076B  2F68               	goto	u5707
  4882  076C  0BA5               	decfsz	??_perform_calibration+2,f
  4883  076D  2F68               	goto	u5707
  4884  076E  3001               	movlw	1
  4885  076F  0020               	movlb	0	; select bank0
  4886  0770  00A3               	movwf	??_perform_calibration
  4887  0771  0823               	movf	??_perform_calibration,w
  4888  0772  07AB               	addwf	perform_calibration@__delay_tmp_902,f
  4889  0773  301E               	movlw	30
  4890  0774  022B               	subwf	perform_calibration@__delay_tmp_902,w
  4891  0775  1C03               	skipc
  4892  0776  2F62               	goto	l4218
  4893  0777                     l4224:	
  4894                           
  4895                           ;calibration.c: 134: if (m_button.confirmed_state != nothing)
  4896  0777  0854               	movf	_m_button,w	;volatile
  4897  0778  1903               	btfsc	3,2
  4898  0779  2F3C               	goto	l4228
  4899                           
  4900                           ;calibration.c: 135: {
  4901                           ;calibration.c: 136: replay = 0;
  4902  077A  01A7               	clrf	perform_calibration@replay
  4903  077B                     l4232:	
  4904                           
  4905                           ;calibration.c: 138: }
  4906                           ;calibration.c: 139: }
  4907                           ;calibration.c: 141: if (m_button.confirmed_state == long_push)
  4908  077B  3002               	movlw	2
  4909  077C  0654               	xorwf	_m_button,w	;volatile
  4910  077D  1D03               	btfss	3,2
  4911  077E  2F35               	goto	l4236
  4912                           
  4913                           ;calibration.c: 142: done = 1;
  4914  077F  01A6               	clrf	perform_calibration@done
  4915  0780  0AA6               	incf	perform_calibration@done,f
  4916  0781  2F35               	goto	l4236
  4917  0782                     l4240:	
  4918                           
  4919                           ;calibration.c: 143: }
  4920                           ;calibration.c: 144: }
  4921                           ;calibration.c: 145: double_fast_blink();
  4922  0782  318C  246C  3185   	fcall	_double_fast_blink
  4923                           
  4924                           ;calibration.c: 146: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_
      +                          delay((unsigned long)((100)*(32000000/4000.0)));};
  4925  0785  0020               	movlb	0	; select bank0
  4926  0786  01AC               	clrf	perform_calibration@__delay_tmp_903
  4927  0787  300A               	movlw	10
  4928  0788  022C               	subwf	perform_calibration@__delay_tmp_903,w
  4929  0789  1803               	btfsc	3,0
  4930  078A  2FA0               	goto	l4254
  4931  078B                     l4248:	
  4932  078B  3005               	movlw	5
  4933  078C  00A5               	movwf	??_perform_calibration+2
  4934  078D  300F               	movlw	15
  4935  078E  00A4               	movwf	??_perform_calibration+1
  4936  078F  30F4               	movlw	244
  4937  0790  00A3               	movwf	??_perform_calibration
  4938  0791                     u5717:	
  4939  0791  0BA3               	decfsz	??_perform_calibration,f
  4940  0792  2F91               	goto	u5717
  4941  0793  0BA4               	decfsz	??_perform_calibration+1,f
  4942  0794  2F91               	goto	u5717
  4943  0795  0BA5               	decfsz	??_perform_calibration+2,f
  4944  0796  2F91               	goto	u5717
  4945  0797  3001               	movlw	1
  4946  0798  0020               	movlb	0	; select bank0
  4947  0799  00A3               	movwf	??_perform_calibration
  4948  079A  0823               	movf	??_perform_calibration,w
  4949  079B  07AC               	addwf	perform_calibration@__delay_tmp_903,f
  4950  079C  300A               	movlw	10
  4951  079D  022C               	subwf	perform_calibration@__delay_tmp_903,w
  4952  079E  1C03               	skipc
  4953  079F  2F8B               	goto	l4248
  4954  07A0                     l4254:	
  4955                           
  4956                           ;calibration.c: 147: button_init();
  4957  07A0  3189  21ED  3185   	fcall	_button_init
  4958                           
  4959                           ;calibration.c: 150: m_conf.low_speed_pwm = m_conf.ref_pwm[m_conf.nb_steps-1] - 10;
  4960  07A3  0021               	movlb	1	; select bank1
  4961  07A4  353F               	lslf	(_m_conf^(0+128)+3),w
  4962  07A5  3EFE               	addlw	254
  4963  07A6  3EC0               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4964  07A7  0086               	movwf	6
  4965  07A8  0187               	clrf	7
  4966  07A9  3F40               	moviw [0]fsr1
  4967  07AA  0020               	movlb	0	; select bank0
  4968  07AB  00A3               	movwf	??_perform_calibration
  4969  07AC  3F41               	moviw [1]fsr1
  4970  07AD  00A4               	movwf	??_perform_calibration+1
  4971  07AE  0823               	movf	??_perform_calibration,w
  4972  07AF  3EF6               	addlw	246
  4973  07B0  0021               	movlb	1	; select bank1
  4974  07B1  00E8               	movwf	(_m_conf^(0+128)+44)
  4975  07B2  30FF               	movlw	255
  4976  07B3  0020               	movlb	0	; select bank0
  4977  07B4  3D24               	addwfc	??_perform_calibration+1,w
  4978  07B5  0021               	movlb	1	; select bank1
  4979  07B6  00E9               	movwf	((_m_conf+1)^(0+128)+44)
  4980                           
  4981                           ;calibration.c: 151: m_conf.impulse_duration = 10;
  4982  07B7  300A               	movlw	10
  4983  07B8  0020               	movlb	0	; select bank0
  4984  07B9  00A3               	movwf	??_perform_calibration
  4985  07BA  0823               	movf	??_perform_calibration,w
  4986  07BB  0021               	movlb	1	; select bank1
  4987  07BC  00EA               	movwf	(_m_conf^(0+128)+46)
  4988                           
  4989                           ;calibration.c: 156: LED_set_state(manual_mode);
  4990  07BD  3004               	movlw	4
  4991  07BE  318B  2321  3185   	fcall	_LED_set_state
  4992                           
  4993                           ;calibration.c: 157: do { LATA2 = 0; } while(0);
  4994  07C1  0022               	movlb	2	; select bank2
  4995  07C2  110C               	bcf	12,2	;volatile
  4996                           
  4997                           ;calibration.c: 158: EPWM1_LoadDutyValue(1023-0);
  4998  07C3  30FF               	movlw	255
  4999  07C4  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  5000  07C5  3003               	movlw	3
  5001  07C6  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  5002  07C7  318A  22AE         	fcall	_EPWM1_LoadDutyValue
  5003  07C9  0008               	return
  5004  07CA                     __end_of_perform_calibration:	
  5005                           
  5006                           	psect	text4
  5007  0C6C                     __ptext4:	
  5008 ;; *************** function _double_fast_blink *****************
  5009 ;; Defined at:
  5010 ;;		line 14 in file "interact.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      void 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0, pclath, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5024 ;;      Params:         0       0       0       0       0       0
  5025 ;;      Locals:         0       0       0       0       0       0
  5026 ;;      Temps:          0       3       0       0       0       0
  5027 ;;      Totals:         0       3       0       0       0       0
  5028 ;;Total ram usage:        3 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    7
  5031 ;; This function calls:
  5032 ;;		_LED_set_state
  5033 ;; This function is called by:
  5034 ;;		_perform_calibration
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _double_fast_blink
  5040  0C6C                     _double_fast_blink:	
  5041                           
  5042                           ;interact.c: 16: LED_set_state(manual_mode);
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _double_fast_blink: [wreg+status,2+status,0+pclath+cstack]
  5046  0C6C  3004               	movlw	4
  5047  0C6D  318B  2321  318C   	fcall	_LED_set_state
  5048                           
  5049                           ;interact.c: 17: do { LATA2 = 0; } while(0);
  5050  0C70  0022               	movlb	2	; select bank2
  5051  0C71  110C               	bcf	12,2	;volatile
  5052                           
  5053                           ;interact.c: 18: _delay((unsigned long)((250)*(32000000/4000.0)));
  5054  0C72  300B               	movlw	11
  5055  0C73  0020               	movlb	0	; select bank0
  5056  0C74  00A2               	movwf	??_double_fast_blink+2
  5057  0C75  3026               	movlw	38
  5058  0C76  00A1               	movwf	??_double_fast_blink+1
  5059  0C77  3066               	movlw	102
  5060  0C78  00A0               	movwf	??_double_fast_blink
  5061  0C79                     u5727:	
  5062  0C79  0BA0               	decfsz	??_double_fast_blink,f
  5063  0C7A  2C79               	goto	u5727
  5064  0C7B  0BA1               	decfsz	??_double_fast_blink+1,f
  5065  0C7C  2C79               	goto	u5727
  5066  0C7D  0BA2               	decfsz	??_double_fast_blink+2,f
  5067  0C7E  2C79               	goto	u5727
  5068  0C7F  3200               	nop2
  5069                           
  5070                           ;interact.c: 19: do { LATA2 = 1; } while(0);
  5071  0C80  0022               	movlb	2	; select bank2
  5072  0C81  150C               	bsf	12,2	;volatile
  5073                           
  5074                           ;interact.c: 20: _delay((unsigned long)((50)*(32000000/4000.0)));
  5075  0C82  3003               	movlw	3
  5076  0C83  0020               	movlb	0	; select bank0
  5077  0C84  00A2               	movwf	??_double_fast_blink+2
  5078  0C85  3008               	movlw	8
  5079  0C86  00A1               	movwf	??_double_fast_blink+1
  5080  0C87  3078               	movlw	120
  5081  0C88  00A0               	movwf	??_double_fast_blink
  5082  0C89                     u5737:	
  5083  0C89  0BA0               	decfsz	??_double_fast_blink,f
  5084  0C8A  2C89               	goto	u5737
  5085  0C8B  0BA1               	decfsz	??_double_fast_blink+1,f
  5086  0C8C  2C89               	goto	u5737
  5087  0C8D  0BA2               	decfsz	??_double_fast_blink+2,f
  5088  0C8E  2C89               	goto	u5737
  5089                           
  5090                           ;interact.c: 21: do { LATA2 = 0; } while(0);
  5091  0C8F  0022               	movlb	2	; select bank2
  5092  0C90  110C               	bcf	12,2	;volatile
  5093                           
  5094                           ;interact.c: 22: _delay((unsigned long)((50)*(32000000/4000.0)));
  5095  0C91  3003               	movlw	3
  5096  0C92  0020               	movlb	0	; select bank0
  5097  0C93  00A2               	movwf	??_double_fast_blink+2
  5098  0C94  3008               	movlw	8
  5099  0C95  00A1               	movwf	??_double_fast_blink+1
  5100  0C96  3078               	movlw	120
  5101  0C97  00A0               	movwf	??_double_fast_blink
  5102  0C98                     u5747:	
  5103  0C98  0BA0               	decfsz	??_double_fast_blink,f
  5104  0C99  2C98               	goto	u5747
  5105  0C9A  0BA1               	decfsz	??_double_fast_blink+1,f
  5106  0C9B  2C98               	goto	u5747
  5107  0C9C  0BA2               	decfsz	??_double_fast_blink+2,f
  5108  0C9D  2C98               	goto	u5747
  5109                           
  5110                           ;interact.c: 23: do { LATA2 = 1; } while(0);
  5111  0C9E  0022               	movlb	2	; select bank2
  5112  0C9F  150C               	bsf	12,2	;volatile
  5113                           
  5114                           ;interact.c: 24: _delay((unsigned long)((50)*(32000000/4000.0)));
  5115  0CA0  3003               	movlw	3
  5116  0CA1  0020               	movlb	0	; select bank0
  5117  0CA2  00A2               	movwf	??_double_fast_blink+2
  5118  0CA3  3008               	movlw	8
  5119  0CA4  00A1               	movwf	??_double_fast_blink+1
  5120  0CA5  3078               	movlw	120
  5121  0CA6  00A0               	movwf	??_double_fast_blink
  5122  0CA7                     u5757:	
  5123  0CA7  0BA0               	decfsz	??_double_fast_blink,f
  5124  0CA8  2CA7               	goto	u5757
  5125  0CA9  0BA1               	decfsz	??_double_fast_blink+1,f
  5126  0CAA  2CA7               	goto	u5757
  5127  0CAB  0BA2               	decfsz	??_double_fast_blink+2,f
  5128  0CAC  2CA7               	goto	u5757
  5129                           
  5130                           ;interact.c: 25: do { LATA2 = 0; } while(0);
  5131  0CAD  0022               	movlb	2	; select bank2
  5132  0CAE  110C               	bcf	12,2	;volatile
  5133                           
  5134                           ;interact.c: 26: _delay((unsigned long)((250)*(32000000/4000.0)));
  5135  0CAF  300B               	movlw	11
  5136  0CB0  0020               	movlb	0	; select bank0
  5137  0CB1  00A2               	movwf	??_double_fast_blink+2
  5138  0CB2  3026               	movlw	38
  5139  0CB3  00A1               	movwf	??_double_fast_blink+1
  5140  0CB4  3066               	movlw	102
  5141  0CB5  00A0               	movwf	??_double_fast_blink
  5142  0CB6                     u5767:	
  5143  0CB6  0BA0               	decfsz	??_double_fast_blink,f
  5144  0CB7  2CB6               	goto	u5767
  5145  0CB8  0BA1               	decfsz	??_double_fast_blink+1,f
  5146  0CB9  2CB6               	goto	u5767
  5147  0CBA  0BA2               	decfsz	??_double_fast_blink+2,f
  5148  0CBB  2CB6               	goto	u5767
  5149  0CBC  3200               	nop2
  5150  0CBD  0008               	return
  5151  0CBE                     __end_of_double_fast_blink:	
  5152                           
  5153                           	psect	text5
  5154  0B21                     __ptext5:	
  5155 ;; *************** function _LED_set_state *****************
  5156 ;; Defined at:
  5157 ;;		line 29 in file "interact.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  new_state       1    wreg     enum E2937
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  new_state       1    5[COMMON] enum E2937
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5171 ;;      Params:         0       0       0       0       0       0
  5172 ;;      Locals:         1       0       0       0       0       0
  5173 ;;      Temps:          1       0       0       0       0       0
  5174 ;;      Totals:         2       0       0       0       0       0
  5175 ;;Total ram usage:        2 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    6
  5178 ;; This function calls:
  5179 ;;		Nothing
  5180 ;; This function is called by:
  5181 ;;		_main
  5182 ;;		_double_fast_blink
  5183 ;;		_perform_calibration
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           
  5188                           ;psect for function _LED_set_state
  5189  0B21                     _LED_set_state:	
  5190                           
  5191                           ;incstack = 0
  5192                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  5193                           ;LED_set_state@new_state stored from wreg
  5194  0B21  00F5               	movwf	LED_set_state@new_state
  5195                           
  5196                           ;interact.c: 31: m_LED.state = new_state;
  5197  0B22  0875               	movf	LED_set_state@new_state,w
  5198  0B23  00F4               	movwf	??_LED_set_state
  5199  0B24  0874               	movf	??_LED_set_state,w
  5200  0B25  00F6               	movwf	_m_LED	;volatile
  5201                           
  5202                           ;interact.c: 32: m_LED.counter = 0;
  5203  0B26  01F7               	clrf	_m_LED+1	;volatile
  5204                           
  5205                           ;interact.c: 33: if (new_state == always_off)
  5206  0B27  0375               	decf	LED_set_state@new_state,w
  5207  0B28  1D03               	btfss	3,2
  5208  0B29  2B2D               	goto	l3804
  5209                           
  5210                           ;interact.c: 34: do { LATA2 = 0; } while(0);
  5211  0B2A  0022               	movlb	2	; select bank2
  5212  0B2B  110C               	bcf	12,2	;volatile
  5213  0B2C  0008               	return
  5214  0B2D                     l3804:	
  5215                           
  5216                           ;interact.c: 35: else if (new_state == always_on)
  5217  0B2D  0875               	movf	LED_set_state@new_state,w
  5218  0B2E  1D03               	btfss	3,2
  5219  0B2F  2B33               	goto	l3806
  5220                           
  5221                           ;interact.c: 36: do { LATA2 = 1; } while(0);
  5222  0B30  0022               	movlb	2	; select bank2
  5223  0B31  150C               	bsf	12,2	;volatile
  5224  0B32  0008               	return
  5225  0B33                     l3806:	
  5226                           
  5227                           ;interact.c: 37: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  5228  0B33  3002               	movlw	2
  5229  0B34  0675               	xorwf	LED_set_state@new_state,w
  5230  0B35  1903               	btfsc	3,2
  5231  0B36  2B3B               	goto	l475
  5232  0B37  3003               	movlw	3
  5233  0B38  0675               	xorwf	LED_set_state@new_state,w
  5234  0B39  1D03               	btfss	3,2
  5235  0B3A  0008               	return
  5236  0B3B                     l475:	
  5237                           ;interact.c: 38: do { LATA2 = 1; } while(0);
  5238                           
  5239  0B3B  0022               	movlb	2	; select bank2
  5240  0B3C  150C               	bsf	12,2	;volatile
  5241  0B3D  0008               	return
  5242  0B3E                     __end_of_LED_set_state:	
  5243                           
  5244                           	psect	text6
  5245  09ED                     __ptext6:	
  5246 ;; *************** function _button_init *****************
  5247 ;; Defined at:
  5248 ;;		line 78 in file "interact.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      void 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0, pclath, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5262 ;;      Params:         0       0       0       0       0       0
  5263 ;;      Locals:         0       0       0       0       0       0
  5264 ;;      Temps:          1       0       0       0       0       0
  5265 ;;      Totals:         1       0       0       0       0       0
  5266 ;;Total ram usage:        1 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    7
  5269 ;; This function calls:
  5270 ;;		_get_button_state
  5271 ;; This function is called by:
  5272 ;;		_main
  5273 ;;		_perform_calibration
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _button_init
  5279  09ED                     _button_init:	
  5280                           
  5281                           ;interact.c: 80: m_button.last_state = get_button_state();
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _button_init: [wreg+status,2+status,0+pclath+cstack]
  5285  09ED  3189  21E1         	fcall	_get_button_state
  5286  09EF  00F5               	movwf	??_button_init
  5287  09F0  0875               	movf	??_button_init,w
  5288  09F1  0020               	movlb	0	; select bank0
  5289  09F2  00D9               	movwf	_m_button+5	;volatile
  5290                           
  5291                           ;interact.c: 81: m_button.count_pressed = 0;
  5292  09F3  01D5               	clrf	_m_button+1	;volatile
  5293                           
  5294                           ;interact.c: 82: m_button.count_released = 0;
  5295  09F4  01D6               	clrf	_m_button+2	;volatile
  5296                           
  5297                           ;interact.c: 83: m_button.confirmed_state = nothing;
  5298  09F5  01D4               	clrf	_m_button	;volatile
  5299                           
  5300                           ;interact.c: 84: m_button.push_confirmed = 0;
  5301  09F6  01D7               	clrf	_m_button+3	;volatile
  5302                           
  5303                           ;interact.c: 85: m_button.release_confirmed = 0;
  5304  09F7  01D8               	clrf	_m_button+4	;volatile
  5305                           
  5306                           ;interact.c: 86: m_button.has_once_been_released = 0;
  5307  09F8  01DA               	clrf	_m_button+6	;volatile
  5308  09F9  0008               	return
  5309  09FA                     __end_of_button_init:	
  5310                           
  5311                           	psect	text7
  5312  09E1                     __ptext7:	
  5313 ;; *************** function _get_button_state *****************
  5314 ;; Defined at:
  5315 ;;		line 69 in file "interact.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  state           1    4[COMMON] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      unsigned char 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5329 ;;      Params:         0       0       0       0       0       0
  5330 ;;      Locals:         1       0       0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0
  5332 ;;      Totals:         1       0       0       0       0       0
  5333 ;;Total ram usage:        1 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    6
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_button_init
  5340 ;;		_perform_calibration
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _get_button_state
  5346  09E1                     _get_button_state:	
  5347                           
  5348                           ;interact.c: 72: unsigned char state = PORTBbits.RB0;
  5349                           
  5350                           ;incstack = 0
  5351                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5352  09E1  3000               	movlw	0
  5353  09E2  0020               	movlb	0	; select bank0
  5354  09E3  180D               	btfsc	13,0	;volatile
  5355  09E4  3001               	movlw	1
  5356  09E5  00F4               	movwf	get_button_state@state
  5357                           
  5358                           ;interact.c: 73: if (state == 1)
  5359  09E6  0374               	decf	get_button_state@state,w
  5360  09E7  1D03               	btfss	3,2
  5361  09E8  29EB               	goto	l3820
  5362                           
  5363                           ;interact.c: 74: return 0;
  5364  09E9  3000               	movlw	0
  5365  09EA  0008               	return
  5366  09EB                     l3820:	
  5367                           
  5368                           ;interact.c: 75: else return 1;
  5369  09EB  3001               	movlw	1
  5370  09EC  0008               	return
  5371  09ED                     __end_of_get_button_state:	
  5372                           
  5373                           	psect	text8
  5374  0AAE                     __ptext8:	
  5375 ;; *************** function _EPWM1_LoadDutyValue *****************
  5376 ;; Defined at:
  5377 ;;		line 90 in file "mcc_generated_files/epwm1.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  dutyValue       2    4[COMMON] unsigned int 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5391 ;;      Params:         2       0       0       0       0       0
  5392 ;;      Locals:         0       0       0       0       0       0
  5393 ;;      Temps:          0       2       0       0       0       0
  5394 ;;      Totals:         2       2       0       0       0       0
  5395 ;;Total ram usage:        4 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    6
  5398 ;; This function calls:
  5399 ;;		Nothing
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;;		_perform_calibration
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _EPWM1_LoadDutyValue
  5408  0AAE                     _EPWM1_LoadDutyValue:	
  5409                           
  5410                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _EPWM1_LoadDutyValue: [wreg+status,2+status,0]
  5414  0AAE  0875               	movf	EPWM1_LoadDutyValue@dutyValue+1,w
  5415  0AAF  0020               	movlb	0	; select bank0
  5416  0AB0  00A1               	movwf	??_EPWM1_LoadDutyValue+1
  5417  0AB1  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5418  0AB2  00A0               	movwf	??_EPWM1_LoadDutyValue
  5419  0AB3  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5420  0AB4  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5421  0AB5  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5422  0AB6  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5423  0AB7  0820               	movf	??_EPWM1_LoadDutyValue,w
  5424  0AB8  0025               	movlb	5	; select bank5
  5425  0AB9  0091               	movwf	17	;volatile
  5426                           
  5427                           ;epwm1.c: 96: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5428  0ABA  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5429  0ABB  3903               	andlw	3
  5430  0ABC  0020               	movlb	0	; select bank0
  5431  0ABD  00A0               	movwf	??_EPWM1_LoadDutyValue
  5432  0ABE  3004               	movlw	4
  5433  0ABF                     u4095:	
  5434  0ABF  35A0               	lslf	??_EPWM1_LoadDutyValue,f
  5435  0AC0  0B89               	decfsz	9,f
  5436  0AC1  2ABF               	goto	u4095
  5437  0AC2  0025               	movlb	5	; select bank5
  5438  0AC3  0813               	movf	19,w	;volatile
  5439  0AC4  39CF               	andlw	207
  5440  0AC5  0020               	movlb	0	; select bank0
  5441  0AC6  0420               	iorwf	??_EPWM1_LoadDutyValue,w
  5442  0AC7  0025               	movlb	5	; select bank5
  5443  0AC8  0093               	movwf	19	;volatile
  5444  0AC9  0008               	return
  5445  0ACA                     __end_of_EPWM1_LoadDutyValue:	
  5446                           
  5447                           	psect	text9
  5448  0F07                     __ptext9:	
  5449 ;; *************** function _multiply_fp *****************
  5450 ;; Defined at:
  5451 ;;		line 41 in file "fixed_point.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  n1              4   12[BANK0 ] long 
  5454 ;;  n2              4   16[BANK0 ] long 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  res             4   34[BANK0 ] long 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  4   12[BANK0 ] long 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, pclath, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5466 ;;      Params:         0       8       0       0       0       0
  5467 ;;      Locals:         0       4       0       0       0       0
  5468 ;;      Temps:          0      14       0       0       0       0
  5469 ;;      Totals:         0      26       0       0       0       0
  5470 ;;Total ram usage:       26 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    7
  5473 ;; This function calls:
  5474 ;;		___lmul
  5475 ;; This function is called by:
  5476 ;;		_main
  5477 ;;		_reciprocal_fp
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function _multiply_fp
  5483  0F07                     _multiply_fp:	
  5484                           
  5485                           ;fixed_point.c: 45: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  5486                           
  5487                           ;incstack = 0
  5488                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  5489  0F07  0020               	movlb	0	; select bank0
  5490  0F08  082C               	movf	multiply_fp@n1,w
  5491  0F09  00B4               	movwf	??_multiply_fp
  5492  0F0A  082D               	movf	multiply_fp@n1+1,w
  5493  0F0B  00B5               	movwf	??_multiply_fp+1
  5494  0F0C  082E               	movf	multiply_fp@n1+2,w
  5495  0F0D  00B6               	movwf	??_multiply_fp+2
  5496  0F0E  082F               	movf	multiply_fp@n1+3,w
  5497  0F0F  00B7               	movwf	??_multiply_fp+3
  5498  0F10  3010               	movlw	16
  5499  0F11  00B8               	movwf	??_multiply_fp+4
  5500  0F12                     u5205:	
  5501  0F12  37B7               	asrf	??_multiply_fp+3,f
  5502  0F13  0CB6               	rrf	??_multiply_fp+2,f
  5503  0F14  0CB5               	rrf	??_multiply_fp+1,f
  5504  0F15  0CB4               	rrf	??_multiply_fp,f
  5505  0F16  0BB8               	decfsz	??_multiply_fp+4,f
  5506  0F17  2F12               	goto	u5205
  5507  0F18  0837               	movf	??_multiply_fp+3,w
  5508  0F19  00A3               	movwf	___lmul@multiplier+3
  5509  0F1A  0836               	movf	??_multiply_fp+2,w
  5510  0F1B  00A2               	movwf	___lmul@multiplier+2
  5511  0F1C  0835               	movf	??_multiply_fp+1,w
  5512  0F1D  00A1               	movwf	___lmul@multiplier+1
  5513  0F1E  0834               	movf	??_multiply_fp,w
  5514  0F1F  00A0               	movwf	___lmul@multiplier
  5515  0F20  0830               	movf	multiply_fp@n2,w
  5516  0F21  00B9               	movwf	??_multiply_fp+5
  5517  0F22  0831               	movf	multiply_fp@n2+1,w
  5518  0F23  00BA               	movwf	??_multiply_fp+6
  5519  0F24  0832               	movf	multiply_fp@n2+2,w
  5520  0F25  00BB               	movwf	??_multiply_fp+7
  5521  0F26  0833               	movf	multiply_fp@n2+3,w
  5522  0F27  00BC               	movwf	??_multiply_fp+8
  5523  0F28  3010               	movlw	16
  5524  0F29  00BD               	movwf	??_multiply_fp+9
  5525  0F2A                     u5215:	
  5526  0F2A  37BC               	asrf	??_multiply_fp+8,f
  5527  0F2B  0CBB               	rrf	??_multiply_fp+7,f
  5528  0F2C  0CBA               	rrf	??_multiply_fp+6,f
  5529  0F2D  0CB9               	rrf	??_multiply_fp+5,f
  5530  0F2E  0BBD               	decfsz	??_multiply_fp+9,f
  5531  0F2F  2F2A               	goto	u5215
  5532  0F30  083C               	movf	??_multiply_fp+8,w
  5533  0F31  00A7               	movwf	___lmul@multiplicand+3
  5534  0F32  083B               	movf	??_multiply_fp+7,w
  5535  0F33  00A6               	movwf	___lmul@multiplicand+2
  5536  0F34  083A               	movf	??_multiply_fp+6,w
  5537  0F35  00A5               	movwf	___lmul@multiplicand+1
  5538  0F36  0839               	movf	??_multiply_fp+5,w
  5539  0F37  00A4               	movwf	___lmul@multiplicand
  5540  0F38  318B  23A8  318F   	fcall	___lmul
  5541  0F3B  0020               	movlb	0	; select bank0
  5542  0F3C  0820               	movf	?___lmul,w
  5543  0F3D  00BE               	movwf	??_multiply_fp+10
  5544  0F3E  0821               	movf	?___lmul+1,w
  5545  0F3F  00BF               	movwf	??_multiply_fp+11
  5546  0F40  0822               	movf	?___lmul+2,w
  5547  0F41  00C0               	movwf	??_multiply_fp+12
  5548  0F42  0823               	movf	?___lmul+3,w
  5549  0F43  00C1               	movwf	??_multiply_fp+13
  5550  0F44  3010               	movlw	16
  5551  0F45                     u5225:	
  5552  0F45  35BE               	lslf	??_multiply_fp+10,f
  5553  0F46  0DBF               	rlf	??_multiply_fp+11,f
  5554  0F47  0DC0               	rlf	??_multiply_fp+12,f
  5555  0F48  0DC1               	rlf	??_multiply_fp+13,f
  5556  0F49  0B89               	decfsz	9,f
  5557  0F4A  2F45               	goto	u5225
  5558  0F4B  0841               	movf	??_multiply_fp+13,w
  5559  0F4C  00C5               	movwf	multiply_fp@res+3
  5560  0F4D  0840               	movf	??_multiply_fp+12,w
  5561  0F4E  00C4               	movwf	multiply_fp@res+2
  5562  0F4F  083F               	movf	??_multiply_fp+11,w
  5563  0F50  00C3               	movwf	multiply_fp@res+1
  5564  0F51  083E               	movf	??_multiply_fp+10,w
  5565  0F52  00C2               	movwf	multiply_fp@res
  5566                           
  5567                           ;fixed_point.c: 46: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  5568  0F53  082C               	movf	multiply_fp@n1,w
  5569  0F54  00B4               	movwf	??_multiply_fp
  5570  0F55  082D               	movf	multiply_fp@n1+1,w
  5571  0F56  00B5               	movwf	??_multiply_fp+1
  5572  0F57  082E               	movf	multiply_fp@n1+2,w
  5573  0F58  00B6               	movwf	??_multiply_fp+2
  5574  0F59  082F               	movf	multiply_fp@n1+3,w
  5575  0F5A  00B7               	movwf	??_multiply_fp+3
  5576  0F5B  3010               	movlw	16
  5577  0F5C  00B8               	movwf	??_multiply_fp+4
  5578  0F5D                     u5235:	
  5579  0F5D  37B7               	asrf	??_multiply_fp+3,f
  5580  0F5E  0CB6               	rrf	??_multiply_fp+2,f
  5581  0F5F  0CB5               	rrf	??_multiply_fp+1,f
  5582  0F60  0CB4               	rrf	??_multiply_fp,f
  5583  0F61  0BB8               	decfsz	??_multiply_fp+4,f
  5584  0F62  2F5D               	goto	u5235
  5585  0F63  0837               	movf	??_multiply_fp+3,w
  5586  0F64  00A3               	movwf	___lmul@multiplier+3
  5587  0F65  0836               	movf	??_multiply_fp+2,w
  5588  0F66  00A2               	movwf	___lmul@multiplier+2
  5589  0F67  0835               	movf	??_multiply_fp+1,w
  5590  0F68  00A1               	movwf	___lmul@multiplier+1
  5591  0F69  0834               	movf	??_multiply_fp,w
  5592  0F6A  00A0               	movwf	___lmul@multiplier
  5593  0F6B  30FF               	movlw	255
  5594  0F6C  0530               	andwf	multiply_fp@n2,w
  5595  0F6D  00A4               	movwf	___lmul@multiplicand
  5596  0F6E  30FF               	movlw	255
  5597  0F6F  0531               	andwf	multiply_fp@n2+1,w
  5598  0F70  00A5               	movwf	___lmul@multiplicand+1
  5599  0F71  3000               	movlw	0
  5600  0F72  0532               	andwf	multiply_fp@n2+2,w
  5601  0F73  00A6               	movwf	___lmul@multiplicand+2
  5602  0F74  3000               	movlw	0
  5603  0F75  0533               	andwf	multiply_fp@n2+3,w
  5604  0F76  00A7               	movwf	___lmul@multiplicand+3
  5605  0F77  318B  23A8  318F   	fcall	___lmul
  5606  0F7A  0020               	movlb	0	; select bank0
  5607  0F7B  0820               	movf	?___lmul,w
  5608  0F7C  07C2               	addwf	multiply_fp@res,f
  5609  0F7D  0821               	movf	?___lmul+1,w
  5610  0F7E  3DC3               	addwfc	multiply_fp@res+1,f
  5611  0F7F  0822               	movf	?___lmul+2,w
  5612  0F80  3DC4               	addwfc	multiply_fp@res+2,f
  5613  0F81  0823               	movf	?___lmul+3,w
  5614  0F82  3DC5               	addwfc	multiply_fp@res+3,f
  5615                           
  5616                           ;fixed_point.c: 47: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  5617  0F83  0830               	movf	multiply_fp@n2,w
  5618  0F84  00B4               	movwf	??_multiply_fp
  5619  0F85  0831               	movf	multiply_fp@n2+1,w
  5620  0F86  00B5               	movwf	??_multiply_fp+1
  5621  0F87  0832               	movf	multiply_fp@n2+2,w
  5622  0F88  00B6               	movwf	??_multiply_fp+2
  5623  0F89  0833               	movf	multiply_fp@n2+3,w
  5624  0F8A  00B7               	movwf	??_multiply_fp+3
  5625  0F8B  3010               	movlw	16
  5626  0F8C  00B8               	movwf	??_multiply_fp+4
  5627  0F8D                     u5245:	
  5628  0F8D  37B7               	asrf	??_multiply_fp+3,f
  5629  0F8E  0CB6               	rrf	??_multiply_fp+2,f
  5630  0F8F  0CB5               	rrf	??_multiply_fp+1,f
  5631  0F90  0CB4               	rrf	??_multiply_fp,f
  5632  0F91  0BB8               	decfsz	??_multiply_fp+4,f
  5633  0F92  2F8D               	goto	u5245
  5634  0F93  0837               	movf	??_multiply_fp+3,w
  5635  0F94  00A3               	movwf	___lmul@multiplier+3
  5636  0F95  0836               	movf	??_multiply_fp+2,w
  5637  0F96  00A2               	movwf	___lmul@multiplier+2
  5638  0F97  0835               	movf	??_multiply_fp+1,w
  5639  0F98  00A1               	movwf	___lmul@multiplier+1
  5640  0F99  0834               	movf	??_multiply_fp,w
  5641  0F9A  00A0               	movwf	___lmul@multiplier
  5642  0F9B  30FF               	movlw	255
  5643  0F9C  052C               	andwf	multiply_fp@n1,w
  5644  0F9D  00A4               	movwf	___lmul@multiplicand
  5645  0F9E  30FF               	movlw	255
  5646  0F9F  052D               	andwf	multiply_fp@n1+1,w
  5647  0FA0  00A5               	movwf	___lmul@multiplicand+1
  5648  0FA1  3000               	movlw	0
  5649  0FA2  052E               	andwf	multiply_fp@n1+2,w
  5650  0FA3  00A6               	movwf	___lmul@multiplicand+2
  5651  0FA4  3000               	movlw	0
  5652  0FA5  052F               	andwf	multiply_fp@n1+3,w
  5653  0FA6  00A7               	movwf	___lmul@multiplicand+3
  5654  0FA7  318B  23A8  318F   	fcall	___lmul
  5655  0FAA  0020               	movlb	0	; select bank0
  5656  0FAB  0820               	movf	?___lmul,w
  5657  0FAC  07C2               	addwf	multiply_fp@res,f
  5658  0FAD  0821               	movf	?___lmul+1,w
  5659  0FAE  3DC3               	addwfc	multiply_fp@res+1,f
  5660  0FAF  0822               	movf	?___lmul+2,w
  5661  0FB0  3DC4               	addwfc	multiply_fp@res+2,f
  5662  0FB1  0823               	movf	?___lmul+3,w
  5663  0FB2  3DC5               	addwfc	multiply_fp@res+3,f
  5664                           
  5665                           ;fixed_point.c: 48: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  5666  0FB3  30FF               	movlw	255
  5667  0FB4  00B4               	movwf	??_multiply_fp
  5668  0FB5  30FF               	movlw	255
  5669  0FB6  00B5               	movwf	??_multiply_fp+1
  5670  0FB7  3000               	movlw	0
  5671  0FB8  00B6               	movwf	??_multiply_fp+2
  5672  0FB9  3000               	movlw	0
  5673  0FBA  00B7               	movwf	??_multiply_fp+3
  5674  0FBB  30FF               	movlw	255
  5675  0FBC  052C               	andwf	multiply_fp@n1,w
  5676  0FBD  00A0               	movwf	___lmul@multiplier
  5677  0FBE  30FF               	movlw	255
  5678  0FBF  052D               	andwf	multiply_fp@n1+1,w
  5679  0FC0  00A1               	movwf	___lmul@multiplier+1
  5680  0FC1  3000               	movlw	0
  5681  0FC2  052E               	andwf	multiply_fp@n1+2,w
  5682  0FC3  00A2               	movwf	___lmul@multiplier+2
  5683  0FC4  3000               	movlw	0
  5684  0FC5  052F               	andwf	multiply_fp@n1+3,w
  5685  0FC6  00A3               	movwf	___lmul@multiplier+3
  5686  0FC7  30FF               	movlw	255
  5687  0FC8  0530               	andwf	multiply_fp@n2,w
  5688  0FC9  00A4               	movwf	___lmul@multiplicand
  5689  0FCA  30FF               	movlw	255
  5690  0FCB  0531               	andwf	multiply_fp@n2+1,w
  5691  0FCC  00A5               	movwf	___lmul@multiplicand+1
  5692  0FCD  3000               	movlw	0
  5693  0FCE  0532               	andwf	multiply_fp@n2+2,w
  5694  0FCF  00A6               	movwf	___lmul@multiplicand+2
  5695  0FD0  3000               	movlw	0
  5696  0FD1  0533               	andwf	multiply_fp@n2+3,w
  5697  0FD2  00A7               	movwf	___lmul@multiplicand+3
  5698  0FD3  318B  23A8  318F   	fcall	___lmul
  5699  0FD6  0020               	movlb	0	; select bank0
  5700  0FD7  0820               	movf	?___lmul,w
  5701  0FD8  00B8               	movwf	??_multiply_fp+4
  5702  0FD9  0821               	movf	?___lmul+1,w
  5703  0FDA  00B9               	movwf	??_multiply_fp+5
  5704  0FDB  0822               	movf	?___lmul+2,w
  5705  0FDC  00BA               	movwf	??_multiply_fp+6
  5706  0FDD  0823               	movf	?___lmul+3,w
  5707  0FDE  00BB               	movwf	??_multiply_fp+7
  5708  0FDF  3010               	movlw	16
  5709  0FE0  00BC               	movwf	??_multiply_fp+8
  5710  0FE1                     u5255:	
  5711  0FE1  37BB               	asrf	??_multiply_fp+7,f
  5712  0FE2  0CBA               	rrf	??_multiply_fp+6,f
  5713  0FE3  0CB9               	rrf	??_multiply_fp+5,f
  5714  0FE4  0CB8               	rrf	??_multiply_fp+4,f
  5715  0FE5  0BBC               	decfsz	??_multiply_fp+8,f
  5716  0FE6  2FE1               	goto	u5255
  5717  0FE7  0838               	movf	??_multiply_fp+4,w
  5718  0FE8  05B4               	andwf	??_multiply_fp,f
  5719  0FE9  0839               	movf	??_multiply_fp+5,w
  5720  0FEA  05B5               	andwf	??_multiply_fp+1,f
  5721  0FEB  083A               	movf	??_multiply_fp+6,w
  5722  0FEC  05B6               	andwf	??_multiply_fp+2,f
  5723  0FED  083B               	movf	??_multiply_fp+7,w
  5724  0FEE  05B7               	andwf	??_multiply_fp+3,f
  5725  0FEF  0834               	movf	??_multiply_fp,w
  5726  0FF0  07C2               	addwf	multiply_fp@res,f
  5727  0FF1  0835               	movf	??_multiply_fp+1,w
  5728  0FF2  3DC3               	addwfc	multiply_fp@res+1,f
  5729  0FF3  0836               	movf	??_multiply_fp+2,w
  5730  0FF4  3DC4               	addwfc	multiply_fp@res+2,f
  5731  0FF5  0837               	movf	??_multiply_fp+3,w
  5732  0FF6  3DC5               	addwfc	multiply_fp@res+3,f
  5733                           
  5734                           ;fixed_point.c: 49: return res;
  5735  0FF7  0845               	movf	multiply_fp@res+3,w
  5736  0FF8  00AF               	movwf	?_multiply_fp+3
  5737  0FF9  0844               	movf	multiply_fp@res+2,w
  5738  0FFA  00AE               	movwf	?_multiply_fp+2
  5739  0FFB  0843               	movf	multiply_fp@res+1,w
  5740  0FFC  00AD               	movwf	?_multiply_fp+1
  5741  0FFD  0842               	movf	multiply_fp@res,w
  5742  0FFE  00AC               	movwf	?_multiply_fp
  5743  0FFF  0008               	return
  5744  1000                     __end_of_multiply_fp:	
  5745                           
  5746                           	psect	text10
  5747  0BA8                     __ptext10:	
  5748 ;; *************** function ___lmul *****************
  5749 ;; Defined at:
  5750 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul32.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5753 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  product         4    8[BANK0 ] unsigned long 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  4    0[BANK0 ] unsigned long 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5765 ;;      Params:         0       8       0       0       0       0
  5766 ;;      Locals:         0       4       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0
  5768 ;;      Totals:         0      12       0       0       0       0
  5769 ;;Total ram usage:       12 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    6
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_multiply_fp
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           
  5780                           ;psect for function ___lmul
  5781  0BA8                     ___lmul:	
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5785  0BA8  3000               	movlw	0
  5786  0BA9  0020               	movlb	0	; select bank0
  5787  0BAA  00AB               	movwf	___lmul@product+3
  5788  0BAB  3000               	movlw	0
  5789  0BAC  00AA               	movwf	___lmul@product+2
  5790  0BAD  3000               	movlw	0
  5791  0BAE  00A9               	movwf	___lmul@product+1
  5792  0BAF  3000               	movlw	0
  5793  0BB0  00A8               	movwf	___lmul@product
  5794  0BB1                     l4048:	
  5795  0BB1  1C20               	btfss	___lmul@multiplier,0
  5796  0BB2  2BBB               	goto	l4052
  5797  0BB3  0824               	movf	___lmul@multiplicand,w
  5798  0BB4  07A8               	addwf	___lmul@product,f
  5799  0BB5  0825               	movf	___lmul@multiplicand+1,w
  5800  0BB6  3DA9               	addwfc	___lmul@product+1,f
  5801  0BB7  0826               	movf	___lmul@multiplicand+2,w
  5802  0BB8  3DAA               	addwfc	___lmul@product+2,f
  5803  0BB9  0827               	movf	___lmul@multiplicand+3,w
  5804  0BBA  3DAB               	addwfc	___lmul@product+3,f
  5805  0BBB                     l4052:	
  5806  0BBB  3001               	movlw	1
  5807  0BBC                     u4255:	
  5808  0BBC  35A4               	lslf	___lmul@multiplicand,f
  5809  0BBD  0DA5               	rlf	___lmul@multiplicand+1,f
  5810  0BBE  0DA6               	rlf	___lmul@multiplicand+2,f
  5811  0BBF  0DA7               	rlf	___lmul@multiplicand+3,f
  5812  0BC0  0B89               	decfsz	9,f
  5813  0BC1  2BBC               	goto	u4255
  5814  0BC2  3001               	movlw	1
  5815  0BC3                     u4265:	
  5816  0BC3  36A3               	lsrf	___lmul@multiplier+3,f
  5817  0BC4  0CA2               	rrf	___lmul@multiplier+2,f
  5818  0BC5  0CA1               	rrf	___lmul@multiplier+1,f
  5819  0BC6  0CA0               	rrf	___lmul@multiplier,f
  5820  0BC7  0B89               	decfsz	9,f
  5821  0BC8  2BC3               	goto	u4265
  5822  0BC9  0823               	movf	___lmul@multiplier+3,w
  5823  0BCA  0422               	iorwf	___lmul@multiplier+2,w
  5824  0BCB  0421               	iorwf	___lmul@multiplier+1,w
  5825  0BCC  0420               	iorwf	___lmul@multiplier,w
  5826  0BCD  1D03               	skipz
  5827  0BCE  2BB1               	goto	l4048
  5828  0BCF  082B               	movf	___lmul@product+3,w
  5829  0BD0  00A3               	movwf	?___lmul+3
  5830  0BD1  082A               	movf	___lmul@product+2,w
  5831  0BD2  00A2               	movwf	?___lmul+2
  5832  0BD3  0829               	movf	___lmul@product+1,w
  5833  0BD4  00A1               	movwf	?___lmul+1
  5834  0BD5  0828               	movf	___lmul@product,w
  5835  0BD6  00A0               	movwf	?___lmul
  5836  0BD7  0008               	return
  5837  0BD8                     __end_of___lmul:	
  5838                           
  5839                           	psect	text11
  5840  0DEF                     __ptext11:	
  5841 ;; *************** function _load_calibration_from_EEPROM *****************
  5842 ;; Defined at:
  5843 ;;		line 24 in file "calibration.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  crc             2   17[BANK0 ] unsigned short 
  5848 ;;  i               1   21[BANK0 ] unsigned char 
  5849 ;;  p               1   20[BANK0 ] PTR unsigned char 
  5850 ;;		 -> m_crc(2), m_conf(47), 
  5851 ;;  addr            1   19[BANK0 ] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      unsigned char 
  5854 ;; Registers used:
  5855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5861 ;;      Params:         0       0       0       0       0       0
  5862 ;;      Locals:         0       5       0       0       0       0
  5863 ;;      Temps:          1       0       0       0       0       0
  5864 ;;      Totals:         1       5       0       0       0       0
  5865 ;;Total ram usage:        6 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    7
  5868 ;; This function calls:
  5869 ;;		_DATAEE_ReadByte
  5870 ;;		_crc_update
  5871 ;; This function is called by:
  5872 ;;		_main
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function _load_calibration_from_EEPROM
  5878  0DEF                     _load_calibration_from_EEPROM:	
  5879                           
  5880                           ;calibration.c: 27: unsigned char addr = 0x00;
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _load_calibration_from_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  5884  0DEF  0020               	movlb	0	; select bank0
  5885  0DF0  01B3               	clrf	load_calibration_from_EEPROM@addr
  5886                           
  5887                           ;calibration.c: 28: unsigned short crc = 0x00;
  5888  0DF1  01B1               	clrf	load_calibration_from_EEPROM@crc
  5889  0DF2  01B2               	clrf	load_calibration_from_EEPROM@crc+1
  5890                           
  5891                           ;calibration.c: 29: char i,*p;
  5892                           ;calibration.c: 30: p=(char *)&m_conf;
  5893  0DF3  30BC               	movlw	(low (_m_conf| 0))& (0+255)
  5894  0DF4  00F5               	movwf	??_load_calibration_from_EEPROM
  5895  0DF5  0875               	movf	??_load_calibration_from_EEPROM,w
  5896  0DF6  00B4               	movwf	load_calibration_from_EEPROM@p
  5897                           
  5898                           ;calibration.c: 31: for(i=0; i<sizeof(m_conf); i++)
  5899  0DF7  01B5               	clrf	load_calibration_from_EEPROM@i
  5900  0DF8  302F               	movlw	47
  5901  0DF9  0235               	subwf	load_calibration_from_EEPROM@i,w
  5902  0DFA  1803               	btfsc	3,0
  5903  0DFB  2E2A               	goto	l4080
  5904  0DFC                     l4070:	
  5905                           
  5906                           ;calibration.c: 32: {
  5907                           ;calibration.c: 33: *p = DATAEE_ReadByte(addr++);
  5908  0DFC  0833               	movf	load_calibration_from_EEPROM@addr,w
  5909  0DFD  3189  21D5  318D   	fcall	_DATAEE_ReadByte
  5910  0E00  00F5               	movwf	??_load_calibration_from_EEPROM
  5911  0E01  0020               	movlb	0	; select bank0
  5912  0E02  0834               	movf	load_calibration_from_EEPROM@p,w
  5913  0E03  0086               	movwf	6
  5914  0E04  0187               	clrf	7
  5915  0E05  0875               	movf	??_load_calibration_from_EEPROM,w
  5916  0E06  0081               	movwf	1
  5917  0E07  3001               	movlw	1
  5918  0E08  00F5               	movwf	??_load_calibration_from_EEPROM
  5919  0E09  0875               	movf	??_load_calibration_from_EEPROM,w
  5920  0E0A  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  5921                           
  5922                           ;calibration.c: 34: crc = crc_update(crc, *p++);
  5923  0E0B  0832               	movf	load_calibration_from_EEPROM@crc+1,w
  5924  0E0C  00A1               	movwf	crc_update@old_crc+1
  5925  0E0D  0831               	movf	load_calibration_from_EEPROM@crc,w
  5926  0E0E  00A0               	movwf	crc_update@old_crc
  5927  0E0F  0834               	movf	load_calibration_from_EEPROM@p,w
  5928  0E10  0086               	movwf	6
  5929  0E11  0187               	clrf	7
  5930  0E12  0801               	movf	1,w
  5931  0E13  00F5               	movwf	??_load_calibration_from_EEPROM
  5932  0E14  0875               	movf	??_load_calibration_from_EEPROM,w
  5933  0E15  00A2               	movwf	crc_update@data
  5934  0E16  318C  241D  318D   	fcall	_crc_update
  5935  0E19  0020               	movlb	0	; select bank0
  5936  0E1A  0821               	movf	?_crc_update+1,w
  5937  0E1B  00B2               	movwf	load_calibration_from_EEPROM@crc+1
  5938  0E1C  0820               	movf	?_crc_update,w
  5939  0E1D  00B1               	movwf	load_calibration_from_EEPROM@crc
  5940  0E1E  3001               	movlw	1
  5941  0E1F  00F5               	movwf	??_load_calibration_from_EEPROM
  5942  0E20  0875               	movf	??_load_calibration_from_EEPROM,w
  5943  0E21  07B4               	addwf	load_calibration_from_EEPROM@p,f
  5944  0E22  3001               	movlw	1
  5945  0E23  00F5               	movwf	??_load_calibration_from_EEPROM
  5946  0E24  0875               	movf	??_load_calibration_from_EEPROM,w
  5947  0E25  07B5               	addwf	load_calibration_from_EEPROM@i,f
  5948  0E26  302F               	movlw	47
  5949  0E27  0235               	subwf	load_calibration_from_EEPROM@i,w
  5950  0E28  1C03               	skipc
  5951  0E29  2DFC               	goto	l4070
  5952  0E2A                     l4080:	
  5953                           
  5954                           ;calibration.c: 35: }
  5955                           ;calibration.c: 36: p=(char *)&m_crc;
  5956  0E2A  30EB               	movlw	(low (_m_crc| 0))& (0+255)
  5957  0E2B  00F5               	movwf	??_load_calibration_from_EEPROM
  5958  0E2C  0875               	movf	??_load_calibration_from_EEPROM,w
  5959  0E2D  00B4               	movwf	load_calibration_from_EEPROM@p
  5960                           
  5961                           ;calibration.c: 37: for(i=0; i<sizeof(m_crc); i++)
  5962  0E2E  01B5               	clrf	load_calibration_from_EEPROM@i
  5963  0E2F  3002               	movlw	2
  5964  0E30  0235               	subwf	load_calibration_from_EEPROM@i,w
  5965  0E31  1803               	btfsc	3,0
  5966  0E32  2E4E               	goto	l4098
  5967  0E33                     l4088:	
  5968                           
  5969                           ;calibration.c: 38: *p++ = DATAEE_ReadByte(addr++);
  5970  0E33  0833               	movf	load_calibration_from_EEPROM@addr,w
  5971  0E34  3189  21D5  318D   	fcall	_DATAEE_ReadByte
  5972  0E37  00F5               	movwf	??_load_calibration_from_EEPROM
  5973  0E38  0020               	movlb	0	; select bank0
  5974  0E39  0834               	movf	load_calibration_from_EEPROM@p,w
  5975  0E3A  0086               	movwf	6
  5976  0E3B  0187               	clrf	7
  5977  0E3C  0875               	movf	??_load_calibration_from_EEPROM,w
  5978  0E3D  0081               	movwf	1
  5979  0E3E  3001               	movlw	1
  5980  0E3F  00F5               	movwf	??_load_calibration_from_EEPROM
  5981  0E40  0875               	movf	??_load_calibration_from_EEPROM,w
  5982  0E41  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  5983  0E42  3001               	movlw	1
  5984  0E43  00F5               	movwf	??_load_calibration_from_EEPROM
  5985  0E44  0875               	movf	??_load_calibration_from_EEPROM,w
  5986  0E45  07B4               	addwf	load_calibration_from_EEPROM@p,f
  5987  0E46  3001               	movlw	1
  5988  0E47  00F5               	movwf	??_load_calibration_from_EEPROM
  5989  0E48  0875               	movf	??_load_calibration_from_EEPROM,w
  5990  0E49  07B5               	addwf	load_calibration_from_EEPROM@i,f
  5991  0E4A  3002               	movlw	2
  5992  0E4B  0235               	subwf	load_calibration_from_EEPROM@i,w
  5993  0E4C  1C03               	skipc
  5994  0E4D  2E33               	goto	l4088
  5995  0E4E                     l4098:	
  5996                           
  5997                           ;calibration.c: 39: return (crc == m_crc);
  5998  0E4E  0021               	movlb	1	; select bank1
  5999  0E4F  086C               	movf	(_m_crc+1)^(0+128),w
  6000  0E50  0020               	movlb	0	; select bank0
  6001  0E51  0632               	xorwf	load_calibration_from_EEPROM@crc+1,w
  6002  0E52  1D03               	skipz
  6003  0E53  2E58               	goto	u4325
  6004  0E54  0021               	movlb	1	; select bank1
  6005  0E55  086B               	movf	_m_crc^(0+128),w
  6006  0E56  0020               	movlb	0	; select bank0
  6007  0E57  0631               	xorwf	load_calibration_from_EEPROM@crc,w
  6008  0E58                     u4325:	
  6009  0E58  1D03               	btfss	3,2
  6010  0E59  2E5C               	goto	u4320
  6011  0E5A  3001               	movlw	1
  6012  0E5B  0008               	return
  6013  0E5C                     u4320:	
  6014  0E5C  3000               	movlw	0
  6015  0E5D  0008               	return
  6016  0E5E                     __end_of_load_calibration_from_EEPROM:	
  6017                           
  6018                           	psect	text12
  6019  0C1D                     __ptext12:	
  6020 ;; *************** function _crc_update *****************
  6021 ;; Defined at:
  6022 ;;		line 11 in file "CRC.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  old_crc         2    0[BANK0 ] unsigned short 
  6025 ;;  data            1    2[BANK0 ] unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  x               2   15[BANK0 ] unsigned short 
  6028 ;;  crc             2   13[BANK0 ] unsigned short 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  2    0[BANK0 ] unsigned short 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6038 ;;      Params:         0       3       0       0       0       0
  6039 ;;      Locals:         0       4       0       0       0       0
  6040 ;;      Temps:          0      10       0       0       0       0
  6041 ;;      Totals:         0      17       0       0       0       0
  6042 ;;Total ram usage:       17 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    6
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_load_calibration_from_EEPROM
  6049 ;;		_write_calibration_to_EEPROM
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           
  6054                           ;psect for function _crc_update
  6055  0C1D                     _crc_update:	
  6056                           
  6057                           ;CRC.c: 13: unsigned short crc;
  6058                           ;CRC.c: 14: unsigned short x;
  6059                           ;CRC.c: 16: x = ((old_crc>>8) ^ data) & 0xff;
  6060                           
  6061                           ;incstack = 0
  6062                           ; Regs used in _crc_update: [wreg+status,2+status,0]
  6063  0C1D  0020               	movlb	0	; select bank0
  6064  0C1E  0822               	movf	crc_update@data,w
  6065  0C1F  00A3               	movwf	??_crc_update
  6066  0C20  01A4               	clrf	??_crc_update+1
  6067  0C21  0821               	movf	crc_update@old_crc+1,w
  6068  0C22  00A6               	movwf	??_crc_update+3
  6069  0C23  0820               	movf	crc_update@old_crc,w
  6070  0C24  00A5               	movwf	??_crc_update+2
  6071  0C25  0826               	movf	??_crc_update+3,w
  6072  0C26  00A5               	movwf	??_crc_update+2
  6073  0C27  01A6               	clrf	??_crc_update+3
  6074  0C28  0823               	movf	??_crc_update,w
  6075  0C29  0625               	xorwf	??_crc_update+2,w
  6076  0C2A  00A7               	movwf	??_crc_update+4
  6077  0C2B  0824               	movf	??_crc_update+1,w
  6078  0C2C  0626               	xorwf	??_crc_update+3,w
  6079  0C2D  00A8               	movwf	??_crc_update+5
  6080  0C2E  30FF               	movlw	255
  6081  0C2F  0527               	andwf	??_crc_update+4,w
  6082  0C30  00AF               	movwf	crc_update@x
  6083  0C31  3000               	movlw	0
  6084  0C32  0528               	andwf	??_crc_update+5,w
  6085  0C33  00B0               	movwf	crc_update@x+1
  6086                           
  6087                           ;CRC.c: 17: x ^= x>>4;
  6088  0C34  0830               	movf	crc_update@x+1,w
  6089  0C35  00A4               	movwf	??_crc_update+1
  6090  0C36  082F               	movf	crc_update@x,w
  6091  0C37  00A3               	movwf	??_crc_update
  6092  0C38  3004               	movlw	4
  6093  0C39                     u4185:	
  6094  0C39  36A4               	lsrf	??_crc_update+1,f
  6095  0C3A  0CA3               	rrf	??_crc_update,f
  6096  0C3B  0B89               	decfsz	9,f
  6097  0C3C  2C39               	goto	u4185
  6098  0C3D  0823               	movf	??_crc_update,w
  6099  0C3E  06AF               	xorwf	crc_update@x,f
  6100  0C3F  0824               	movf	??_crc_update+1,w
  6101  0C40  06B0               	xorwf	crc_update@x+1,f
  6102                           
  6103                           ;CRC.c: 19: crc = (old_crc << 8) ^ (x << 12) ^ (x <<5) ^ x;
  6104  0C41  0830               	movf	crc_update@x+1,w
  6105  0C42  00A4               	movwf	??_crc_update+1
  6106  0C43  082F               	movf	crc_update@x,w
  6107  0C44  00A3               	movwf	??_crc_update
  6108  0C45  3005               	movlw	5
  6109  0C46                     u4195:	
  6110  0C46  35A3               	lslf	??_crc_update,f
  6111  0C47  0DA4               	rlf	??_crc_update+1,f
  6112  0C48  0B89               	decfsz	9,f
  6113  0C49  2C46               	goto	u4195
  6114  0C4A  0830               	movf	crc_update@x+1,w
  6115  0C4B  00A6               	movwf	??_crc_update+3
  6116  0C4C  082F               	movf	crc_update@x,w
  6117  0C4D  00A5               	movwf	??_crc_update+2
  6118  0C4E  0E25               	swapf	??_crc_update+2,w
  6119  0C4F  39F0               	andlw	240
  6120  0C50  00A6               	movwf	??_crc_update+3
  6121  0C51  01A5               	clrf	??_crc_update+2
  6122  0C52  0820               	movf	crc_update@old_crc,w
  6123  0C53  00A8               	movwf	??_crc_update+5
  6124  0C54  01A7               	clrf	??_crc_update+4
  6125  0C55  0825               	movf	??_crc_update+2,w
  6126  0C56  0627               	xorwf	??_crc_update+4,w
  6127  0C57  00A9               	movwf	??_crc_update+6
  6128  0C58  0826               	movf	??_crc_update+3,w
  6129  0C59  0628               	xorwf	??_crc_update+5,w
  6130  0C5A  00AA               	movwf	??_crc_update+7
  6131  0C5B  0823               	movf	??_crc_update,w
  6132  0C5C  0629               	xorwf	??_crc_update+6,w
  6133  0C5D  00AB               	movwf	??_crc_update+8
  6134  0C5E  0824               	movf	??_crc_update+1,w
  6135  0C5F  062A               	xorwf	??_crc_update+7,w
  6136  0C60  00AC               	movwf	??_crc_update+9
  6137  0C61  082F               	movf	crc_update@x,w
  6138  0C62  062B               	xorwf	??_crc_update+8,w
  6139  0C63  00AD               	movwf	crc_update@crc
  6140  0C64  0830               	movf	crc_update@x+1,w
  6141  0C65  062C               	xorwf	??_crc_update+9,w
  6142  0C66  00AE               	movwf	crc_update@crc+1
  6143                           
  6144                           ;CRC.c: 21: return crc;
  6145  0C67  082E               	movf	crc_update@crc+1,w
  6146  0C68  00A1               	movwf	?_crc_update+1
  6147  0C69  082D               	movf	crc_update@crc,w
  6148  0C6A  00A0               	movwf	?_crc_update
  6149  0C6B  0008               	return
  6150  0C6C                     __end_of_crc_update:	
  6151                           
  6152                           	psect	text13
  6153  09D5                     __ptext13:	
  6154 ;; *************** function _DATAEE_ReadByte *****************
  6155 ;; Defined at:
  6156 ;;		line 204 in file "mcc_generated_files/memory.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  bAdd            1    wreg     unsigned char 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  bAdd            1    4[COMMON] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      unsigned char 
  6163 ;; Registers used:
  6164 ;;		wreg
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6170 ;;      Params:         0       0       0       0       0       0
  6171 ;;      Locals:         1       0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0
  6173 ;;      Totals:         1       0       0       0       0       0
  6174 ;;Total ram usage:        1 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    6
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_load_calibration_from_EEPROM
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           
  6185                           ;psect for function _DATAEE_ReadByte
  6186  09D5                     _DATAEE_ReadByte:	
  6187                           
  6188                           ;incstack = 0
  6189                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6190                           ;DATAEE_ReadByte@bAdd stored from wreg
  6191  09D5  00F4               	movwf	DATAEE_ReadByte@bAdd
  6192                           
  6193                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6194  09D6  0874               	movf	DATAEE_ReadByte@bAdd,w
  6195  09D7  0023               	movlb	3	; select bank3
  6196  09D8  0091               	movwf	17	;volatile
  6197                           
  6198                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6199  09D9  1315               	bcf	21,6	;volsfr
  6200                           
  6201                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6202  09DA  1395               	bcf	21,7	;volsfr
  6203                           
  6204                           ;memory.c: 209: EECON1bits.RD = 1;
  6205  09DB  1415               	bsf	21,0	;volsfr
  6206                           
  6207                           ;memory.c: 210: __nop();
  6208  09DC  0000               	nop
  6209                           
  6210                           ;memory.c: 211: __nop();
  6211  09DD  0000               	nop
  6212                           
  6213                           ;memory.c: 213: return (EEDATL);
  6214  09DE  0023               	movlb	3	; select bank3
  6215  09DF  0813               	movf	19,w	;volatile
  6216  09E0  0008               	return
  6217  09E1                     __end_of_DATAEE_ReadByte:	
  6218                           
  6219                           	psect	text14
  6220  0D84                     __ptext14:	
  6221 ;; *************** function _integer_part *****************
  6222 ;; Defined at:
  6223 ;;		line 87 in file "fixed_point.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  n               4   25[BANK0 ] long 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  and_a_half      4   34[BANK0 ] long 
  6228 ;;  int_part        2   39[BANK0 ] unsigned short 
  6229 ;;  neg             1   38[BANK0 ] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  2   25[BANK0 ] short 
  6232 ;; Registers used:
  6233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6239 ;;      Params:         0       4       0       0       0       0
  6240 ;;      Locals:         0       7       0       0       0       0
  6241 ;;      Temps:          0       5       0       0       0       0
  6242 ;;      Totals:         0      16       0       0       0       0
  6243 ;;Total ram usage:       16 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    7
  6246 ;; This function calls:
  6247 ;;		_convert_to_fp
  6248 ;; This function is called by:
  6249 ;;		_main
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _integer_part
  6255  0D84                     _integer_part:	
  6256                           
  6257                           ;fixed_point.c: 89: bool neg = (n<0);
  6258                           
  6259                           ;incstack = 0
  6260                           ; Regs used in _integer_part: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6261  0D84  0020               	movlb	0	; select bank0
  6262  0D85  1FBC               	btfss	integer_part@n+3,7
  6263  0D86  2D89               	goto	u5260
  6264  0D87  3001               	movlw	1
  6265  0D88  2D8A               	goto	u5270
  6266  0D89                     u5260:	
  6267  0D89  3000               	movlw	0
  6268  0D8A                     u5270:	
  6269  0D8A  00BD               	movwf	??_integer_part
  6270  0D8B  083D               	movf	??_integer_part,w
  6271  0D8C  00C6               	movwf	integer_part@neg
  6272                           
  6273                           ;fixed_point.c: 90: if (neg)
  6274  0D8D  0846               	movf	integer_part@neg,w
  6275  0D8E  1903               	btfsc	3,2
  6276  0D8F  2D9B               	goto	l4652
  6277                           
  6278                           ;fixed_point.c: 91: n = -n;
  6279  0D90  09B9               	comf	integer_part@n,f
  6280  0D91  09BA               	comf	integer_part@n+1,f
  6281  0D92  09BB               	comf	integer_part@n+2,f
  6282  0D93  09BC               	comf	integer_part@n+3,f
  6283  0D94  0AB9               	incf	integer_part@n,f
  6284  0D95  1903               	skipnz
  6285  0D96  0ABA               	incf	integer_part@n+1,f
  6286  0D97  1903               	skipnz
  6287  0D98  0ABB               	incf	integer_part@n+2,f
  6288  0D99  1903               	skipnz
  6289  0D9A  0ABC               	incf	integer_part@n+3,f
  6290  0D9B                     l4652:	
  6291                           
  6292                           ;fixed_point.c: 92: unsigned short int_part = n >> 16;
  6293  0D9B  0839               	movf	integer_part@n,w
  6294  0D9C  00BD               	movwf	??_integer_part
  6295  0D9D  083A               	movf	integer_part@n+1,w
  6296  0D9E  00BE               	movwf	??_integer_part+1
  6297  0D9F  083B               	movf	integer_part@n+2,w
  6298  0DA0  00BF               	movwf	??_integer_part+2
  6299  0DA1  083C               	movf	integer_part@n+3,w
  6300  0DA2  00C0               	movwf	??_integer_part+3
  6301  0DA3  3010               	movlw	16
  6302  0DA4  00C1               	movwf	??_integer_part+4
  6303  0DA5                     u5295:	
  6304  0DA5  37C0               	asrf	??_integer_part+3,f
  6305  0DA6  0CBF               	rrf	??_integer_part+2,f
  6306  0DA7  0CBE               	rrf	??_integer_part+1,f
  6307  0DA8  0CBD               	rrf	??_integer_part,f
  6308  0DA9  0BC1               	decfsz	??_integer_part+4,f
  6309  0DAA  2DA5               	goto	u5295
  6310  0DAB  083E               	movf	??_integer_part+1,w
  6311  0DAC  00C8               	movwf	integer_part@int_part+1
  6312  0DAD  083D               	movf	??_integer_part,w
  6313  0DAE  00C7               	movwf	integer_part@int_part
  6314                           
  6315                           ;fixed_point.c: 93: t_fp and_a_half = convert_to_fp(int_part, 5000);
  6316  0DAF  0848               	movf	integer_part@int_part+1,w
  6317  0DB0  00A5               	movwf	convert_to_fp@int_part+1
  6318  0DB1  0847               	movf	integer_part@int_part,w
  6319  0DB2  00A4               	movwf	convert_to_fp@int_part
  6320  0DB3  3088               	movlw	136
  6321  0DB4  00A6               	movwf	convert_to_fp@fract_part
  6322  0DB5  3013               	movlw	19
  6323  0DB6  00A7               	movwf	convert_to_fp@fract_part+1
  6324  0DB7  318E  265E  318D   	fcall	_convert_to_fp
  6325  0DBA  0020               	movlb	0	; select bank0
  6326  0DBB  0827               	movf	?_convert_to_fp+3,w
  6327  0DBC  00C5               	movwf	integer_part@and_a_half+3
  6328  0DBD  0826               	movf	?_convert_to_fp+2,w
  6329  0DBE  00C4               	movwf	integer_part@and_a_half+2
  6330  0DBF  0825               	movf	?_convert_to_fp+1,w
  6331  0DC0  00C3               	movwf	integer_part@and_a_half+1
  6332  0DC1  0824               	movf	?_convert_to_fp,w
  6333  0DC2  00C2               	movwf	integer_part@and_a_half
  6334                           
  6335                           ;fixed_point.c: 94: if (n > and_a_half)
  6336  0DC3  0845               	movf	integer_part@and_a_half+3,w
  6337  0DC4  3A80               	xorlw	128
  6338  0DC5  00BD               	movwf	??_integer_part
  6339  0DC6  083C               	movf	integer_part@n+3,w
  6340  0DC7  3A80               	xorlw	128
  6341  0DC8  023D               	subwf	??_integer_part,w
  6342  0DC9  1D03               	skipz
  6343  0DCA  2DD5               	goto	u5303
  6344  0DCB  083B               	movf	integer_part@n+2,w
  6345  0DCC  0244               	subwf	integer_part@and_a_half+2,w
  6346  0DCD  1D03               	skipz
  6347  0DCE  2DD5               	goto	u5303
  6348  0DCF  083A               	movf	integer_part@n+1,w
  6349  0DD0  0243               	subwf	integer_part@and_a_half+1,w
  6350  0DD1  1D03               	skipz
  6351  0DD2  2DD5               	goto	u5303
  6352  0DD3  0839               	movf	integer_part@n,w
  6353  0DD4  0242               	subwf	integer_part@and_a_half,w
  6354  0DD5                     u5303:	
  6355  0DD5  1803               	skipnc
  6356  0DD6  2DDB               	goto	l4660
  6357                           
  6358                           ;fixed_point.c: 95: int_part++;
  6359  0DD7  3001               	movlw	1
  6360  0DD8  07C7               	addwf	integer_part@int_part,f
  6361  0DD9  3000               	movlw	0
  6362  0DDA  3DC8               	addwfc	integer_part@int_part+1,f
  6363  0DDB                     l4660:	
  6364                           
  6365                           ;fixed_point.c: 96: if (neg)
  6366  0DDB  0846               	movf	integer_part@neg,w
  6367  0DDC  1903               	btfsc	3,2
  6368  0DDD  2DEA               	goto	l4668
  6369                           
  6370                           ;fixed_point.c: 97: return -int_part;
  6371  0DDE  0947               	comf	integer_part@int_part,w
  6372  0DDF  00BD               	movwf	??_integer_part
  6373  0DE0  0948               	comf	integer_part@int_part+1,w
  6374  0DE1  00BE               	movwf	??_integer_part+1
  6375  0DE2  0ABD               	incf	??_integer_part,f
  6376  0DE3  1903               	skipnz
  6377  0DE4  0ABE               	incf	??_integer_part+1,f
  6378  0DE5  083D               	movf	??_integer_part,w
  6379  0DE6  00B9               	movwf	?_integer_part
  6380  0DE7  083E               	movf	??_integer_part+1,w
  6381  0DE8  00BA               	movwf	?_integer_part+1
  6382  0DE9  0008               	return
  6383  0DEA                     l4668:	
  6384                           
  6385                           ;fixed_point.c: 98: else
  6386                           ;fixed_point.c: 99: return int_part;
  6387  0DEA  0848               	movf	integer_part@int_part+1,w
  6388  0DEB  00BA               	movwf	?_integer_part+1
  6389  0DEC  0847               	movf	integer_part@int_part,w
  6390  0DED  00B9               	movwf	?_integer_part
  6391  0DEE  0008               	return
  6392  0DEF                     __end_of_integer_part:	
  6393                           
  6394                           	psect	text15
  6395  0A08                     __ptext15:	
  6396 ;; *************** function _SYSTEM_Initialize *****************
  6397 ;; Defined at:
  6398 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0, pclath, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6412 ;;      Params:         0       0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0
  6415 ;;      Totals:         0       0       0       0       0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    8
  6419 ;; This function calls:
  6420 ;;		_EPWM1_Initialize
  6421 ;;		_EUSART_Initialize
  6422 ;;		_OSCILLATOR_Initialize
  6423 ;;		_PIN_MANAGER_Initialize
  6424 ;;		_TMR0_Initialize
  6425 ;;		_TMR2_Initialize
  6426 ;; This function is called by:
  6427 ;;		_main
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _SYSTEM_Initialize
  6433  0A08                     _SYSTEM_Initialize:	
  6434                           
  6435                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6439  0A08  318A  2245  318A   	fcall	_PIN_MANAGER_Initialize
  6440                           
  6441                           ;mcc.c: 73: OSCILLATOR_Initialize();
  6442  0A0B  3189  21AC  318A   	fcall	_OSCILLATOR_Initialize
  6443                           
  6444                           ;mcc.c: 74: EPWM1_Initialize();
  6445  0A0E  3189  21FA  318A   	fcall	_EPWM1_Initialize
  6446                           
  6447                           ;mcc.c: 75: TMR2_Initialize();
  6448  0A11  3189  21B4  318A   	fcall	_TMR2_Initialize
  6449                           
  6450                           ;mcc.c: 76: TMR0_Initialize();
  6451  0A14  318A  221A  318A   	fcall	_TMR0_Initialize
  6452                           
  6453                           ;mcc.c: 77: EUSART_Initialize();
  6454  0A17  318A  2277         	fcall	_EUSART_Initialize
  6455  0A19  0008               	return
  6456  0A1A                     __end_of_SYSTEM_Initialize:	
  6457                           
  6458                           	psect	text16
  6459  09B4                     __ptext16:	
  6460 ;; *************** function _TMR2_Initialize *****************
  6461 ;; Defined at:
  6462 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;		None
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;		None
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      void 
  6469 ;; Registers used:
  6470 ;;		wreg, status,2, status,0, pclath, cstack
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6476 ;;      Params:         0       0       0       0       0       0
  6477 ;;      Locals:         0       0       0       0       0       0
  6478 ;;      Temps:          0       0       0       0       0       0
  6479 ;;      Totals:         0       0       0       0       0       0
  6480 ;;Total ram usage:        0 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    7
  6483 ;; This function calls:
  6484 ;;		_TMR2_StartTimer
  6485 ;; This function is called by:
  6486 ;;		_SYSTEM_Initialize
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function _TMR2_Initialize
  6492  09B4                     _TMR2_Initialize:	
  6493                           
  6494                           ;tmr2.c: 62: T2CON = 0x02;
  6495                           
  6496                           ;incstack = 0
  6497                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6498  09B4  3002               	movlw	2
  6499  09B5  0020               	movlb	0	; select bank0
  6500  09B6  009C               	movwf	28	;volatile
  6501                           
  6502                           ;tmr2.c: 65: PR2 = 0xFF;
  6503  09B7  30FF               	movlw	255
  6504  09B8  009B               	movwf	27	;volatile
  6505                           
  6506                           ;tmr2.c: 68: TMR2 = 0x00;
  6507  09B9  019A               	clrf	26	;volatile
  6508                           
  6509                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  6510  09BA  1091               	bcf	17,1	;volatile
  6511                           
  6512                           ;tmr2.c: 74: TMR2_StartTimer();
  6513  09BB  3189  2191         	fcall	_TMR2_StartTimer
  6514  09BD  0008               	return
  6515  09BE                     __end_of_TMR2_Initialize:	
  6516                           
  6517                           	psect	text17
  6518  0991                     __ptext17:	
  6519 ;; *************** function _TMR2_StartTimer *****************
  6520 ;; Defined at:
  6521 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  1    wreg      void 
  6528 ;; Registers used:
  6529 ;;		None
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6535 ;;      Params:         0       0       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0
  6538 ;;      Totals:         0       0       0       0       0       0
  6539 ;;Total ram usage:        0 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    6
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_TMR2_Initialize
  6546 ;;		_main
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           
  6551                           ;psect for function _TMR2_StartTimer
  6552  0991                     _TMR2_StartTimer:	
  6553                           
  6554                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  6555                           
  6556                           ;incstack = 0
  6557                           ; Regs used in _TMR2_StartTimer: []
  6558  0991  0020               	movlb	0	; select bank0
  6559  0992  151C               	bsf	28,2	;volatile
  6560  0993  0008               	return
  6561  0994                     __end_of_TMR2_StartTimer:	
  6562                           
  6563                           	psect	text18
  6564  0A1A                     __ptext18:	
  6565 ;; *************** function _TMR0_Initialize *****************
  6566 ;; Defined at:
  6567 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		wreg, status,2, status,0, pclath, cstack
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6581 ;;      Params:         0       0       0       0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0
  6583 ;;      Temps:          0       1       0       0       0       0
  6584 ;;      Totals:         0       1       0       0       0       0
  6585 ;;Total ram usage:        1 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:    7
  6588 ;; This function calls:
  6589 ;;		_TMR0_SetInterruptHandler
  6590 ;; This function is called by:
  6591 ;;		_SYSTEM_Initialize
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           
  6596                           ;psect for function _TMR0_Initialize
  6597  0A1A                     _TMR0_Initialize:	
  6598                           
  6599                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6603  0A1A  0021               	movlb	1	; select bank1
  6604  0A1B  0815               	movf	21,w	;volatile
  6605  0A1C  39C0               	andlw	192
  6606  0A1D  3817               	iorlw	23
  6607  0A1E  0095               	movwf	21	;volatile
  6608                           
  6609                           ;tmr0.c: 71: TMR0 = 0x64;
  6610  0A1F  3064               	movlw	100
  6611  0A20  0020               	movlb	0	; select bank0
  6612  0A21  0095               	movwf	21	;volatile
  6613                           
  6614                           ;tmr0.c: 74: timer0ReloadVal= 100;
  6615  0A22  3064               	movlw	100
  6616  0A23  00A0               	movwf	??_TMR0_Initialize
  6617  0A24  0820               	movf	??_TMR0_Initialize,w
  6618  0A25  00F9               	movwf	_timer0ReloadVal	;volatile
  6619                           
  6620                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6621  0A26  110B               	bcf	11,2	;volatile
  6622                           
  6623                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  6624  0A27  168B               	bsf	11,5	;volatile
  6625                           
  6626                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6627  0A28  3003               	movlw	low _TMR0_DefaultInterruptHandler
  6628  0A29  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  6629  0A2A  3000               	movlw	high _TMR0_DefaultInterruptHandler
  6630  0A2B  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  6631  0A2C  3189  21A0         	fcall	_TMR0_SetInterruptHandler
  6632  0A2E  0008               	return
  6633  0A2F                     __end_of_TMR0_Initialize:	
  6634                           
  6635                           	psect	text19
  6636  09A0                     __ptext19:	
  6637 ;; *************** function _TMR0_SetInterruptHandler *****************
  6638 ;; Defined at:
  6639 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  InterruptHan    2    4[COMMON] PTR void 
  6642 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;		None
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  1    wreg      void 
  6647 ;; Registers used:
  6648 ;;		wreg
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6654 ;;      Params:         2       0       0       0       0       0
  6655 ;;      Locals:         0       0       0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0
  6657 ;;      Totals:         2       0       0       0       0       0
  6658 ;;Total ram usage:        2 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    6
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_TMR0_Initialize
  6665 ;;		_main
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           
  6670                           ;psect for function _TMR0_SetInterruptHandler
  6671  09A0                     _TMR0_SetInterruptHandler:	
  6672                           
  6673                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6677  09A0  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  6678  09A1  0021               	movlb	1	; select bank1
  6679  09A2  00B7               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  6680  09A3  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  6681  09A4  00B6               	movwf	_TMR0_InterruptHandler^(0+128)
  6682  09A5  0008               	return
  6683  09A6                     __end_of_TMR0_SetInterruptHandler:	
  6684                           
  6685                           	psect	text20
  6686  0A45                     __ptext20:	
  6687 ;; *************** function _PIN_MANAGER_Initialize *****************
  6688 ;; Defined at:
  6689 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;		None
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, status,2
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6703 ;;      Params:         0       0       0       0       0       0
  6704 ;;      Locals:         0       0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0
  6706 ;;      Totals:         0       0       0       0       0       0
  6707 ;;Total ram usage:        0 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    6
  6710 ;; This function calls:
  6711 ;;		Nothing
  6712 ;; This function is called by:
  6713 ;;		_SYSTEM_Initialize
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           
  6718                           ;psect for function _PIN_MANAGER_Initialize
  6719  0A45                     _PIN_MANAGER_Initialize:	
  6720                           
  6721                           ;pin_manager.c: 51: LATB = 0x0;
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6725  0A45  0022               	movlb	2	; select bank2
  6726  0A46  018D               	clrf	13	;volatile
  6727                           
  6728                           ;pin_manager.c: 52: LATA = 0x0;
  6729  0A47  018C               	clrf	12	;volatile
  6730                           
  6731                           ;pin_manager.c: 53: ANSELA = 0x1F;
  6732  0A48  301F               	movlw	31
  6733  0A49  0023               	movlb	3	; select bank3
  6734  0A4A  008C               	movwf	12	;volatile
  6735                           
  6736                           ;pin_manager.c: 54: ANSELB = 0xF0;
  6737  0A4B  30F0               	movlw	240
  6738  0A4C  008D               	movwf	13	;volatile
  6739                           
  6740                           ;pin_manager.c: 55: WPUA = 0x20;
  6741  0A4D  3020               	movlw	32
  6742  0A4E  0024               	movlb	4	; select bank4
  6743  0A4F  008C               	movwf	12	;volatile
  6744                           
  6745                           ;pin_manager.c: 56: WPUB = 0xFF;
  6746  0A50  30FF               	movlw	255
  6747  0A51  008D               	movwf	13	;volatile
  6748                           
  6749                           ;pin_manager.c: 57: TRISB = 0xF7;
  6750  0A52  30F7               	movlw	247
  6751  0A53  0021               	movlb	1	; select bank1
  6752  0A54  008D               	movwf	13	;volatile
  6753                           
  6754                           ;pin_manager.c: 58: TRISA = 0xFB;
  6755  0A55  30FB               	movlw	251
  6756  0A56  008C               	movwf	12	;volatile
  6757                           
  6758                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  6759  0A57  1395               	bcf	21,7	;volatile
  6760                           
  6761                           ;pin_manager.c: 61: APFCON0 = 0x00;
  6762  0A58  0022               	movlb	2	; select bank2
  6763  0A59  019D               	clrf	29	;volatile
  6764                           
  6765                           ;pin_manager.c: 62: APFCON1 = 0x00;
  6766  0A5A  019E               	clrf	30	;volatile
  6767  0A5B  0008               	return
  6768  0A5C                     __end_of_PIN_MANAGER_Initialize:	
  6769                           
  6770                           	psect	text21
  6771  09AC                     __ptext21:	
  6772 ;; *************** function _OSCILLATOR_Initialize *****************
  6773 ;; Defined at:
  6774 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;		None
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg, status,2
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6788 ;;      Params:         0       0       0       0       0       0
  6789 ;;      Locals:         0       0       0       0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0
  6791 ;;      Totals:         0       0       0       0       0       0
  6792 ;;Total ram usage:        0 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    6
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_SYSTEM_Initialize
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           
  6803                           ;psect for function _OSCILLATOR_Initialize
  6804  09AC                     _OSCILLATOR_Initialize:	
  6805                           
  6806                           ;mcc.c: 83: OSCCON = 0x70;
  6807                           
  6808                           ;incstack = 0
  6809                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6810  09AC  3070               	movlw	112
  6811  09AD  0021               	movlb	1	; select bank1
  6812  09AE  0099               	movwf	25	;volatile
  6813                           
  6814                           ;mcc.c: 85: OSCSTAT = 0x00;
  6815  09AF  019A               	clrf	26	;volatile
  6816                           
  6817                           ;mcc.c: 87: OSCTUNE = 0x00;
  6818  09B0  0198               	clrf	24	;volatile
  6819  09B1                     l28:	
  6820                           ;mcc.c: 92: {
  6821                           
  6822                           ;mcc.c: 91: while(PLLR == 0)
  6823                           
  6824  09B1  1B1A               	btfsc	26,6	;volatile
  6825  09B2  0008               	return
  6826  09B3  29B1               	goto	l28
  6827  09B4                     __end_of_OSCILLATOR_Initialize:	
  6828                           
  6829                           	psect	text22
  6830  0A77                     __ptext22:	
  6831 ;; *************** function _EUSART_Initialize *****************
  6832 ;; Defined at:
  6833 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6847 ;;      Params:         0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0
  6849 ;;      Temps:          1       0       0       0       0       0
  6850 ;;      Totals:         1       0       0       0       0       0
  6851 ;;Total ram usage:        1 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    6
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_SYSTEM_Initialize
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           
  6862                           ;psect for function _EUSART_Initialize
  6863  0A77                     _EUSART_Initialize:	
  6864                           
  6865                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  6866                           
  6867                           ;incstack = 0
  6868                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6869  0A77  0021               	movlb	1	; select bank1
  6870  0A78  1291               	bcf	17,5	;volatile
  6871                           
  6872                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  6873  0A79  1211               	bcf	17,4	;volatile
  6874                           
  6875                           ;eusart.c: 84: BAUDCON = 0x08;
  6876  0A7A  3008               	movlw	8
  6877  0A7B  0023               	movlb	3	; select bank3
  6878  0A7C  009F               	movwf	31	;volatile
  6879                           
  6880                           ;eusart.c: 87: RCSTA = 0x90;
  6881  0A7D  3090               	movlw	144
  6882  0A7E  009D               	movwf	29	;volatile
  6883                           
  6884                           ;eusart.c: 90: TXSTA = 0x24;
  6885  0A7F  3024               	movlw	36
  6886  0A80  009E               	movwf	30	;volatile
  6887                           
  6888                           ;eusart.c: 93: SPBRGL = 0x40;
  6889  0A81  3040               	movlw	64
  6890  0A82  009B               	movwf	27	;volatile
  6891                           
  6892                           ;eusart.c: 96: SPBRGH = 0x03;
  6893  0A83  3003               	movlw	3
  6894  0A84  009C               	movwf	28	;volatile
  6895                           
  6896                           ;eusart.c: 100: eusartTxHead = 0;
  6897  0A85  0020               	movlb	0	; select bank0
  6898  0A86  01DC               	clrf	_eusartTxHead
  6899                           
  6900                           ;eusart.c: 101: eusartTxTail = 0;
  6901  0A87  01DD               	clrf	_eusartTxTail
  6902                           
  6903                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  6904  0A88  3008               	movlw	8
  6905  0A89  00F4               	movwf	??_EUSART_Initialize
  6906  0A8A  0874               	movf	??_EUSART_Initialize,w
  6907  0A8B  00DB               	movwf	_eusartTxBufferRemaining	;volatile
  6908                           
  6909                           ;eusart.c: 104: eusartRxHead = 0;
  6910  0A8C  0021               	movlb	1	; select bank1
  6911  0A8D  01BA               	clrf	_eusartRxHead^(0+128)
  6912                           
  6913                           ;eusart.c: 105: eusartRxTail = 0;
  6914  0A8E  01BB               	clrf	_eusartRxTail^(0+128)
  6915                           
  6916                           ;eusart.c: 106: eusartRxCount = 0;
  6917  0A8F  01F8               	clrf	_eusartRxCount	;volatile
  6918                           
  6919                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  6920  0A90  1691               	bsf	17,5	;volatile
  6921  0A91  0008               	return
  6922  0A92                     __end_of_EUSART_Initialize:	
  6923                           
  6924                           	psect	text23
  6925  09FA                     __ptext23:	
  6926 ;; *************** function _EPWM1_Initialize *****************
  6927 ;; Defined at:
  6928 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      void 
  6935 ;; Registers used:
  6936 ;;		wreg, status,2, status,0
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6942 ;;      Params:         0       0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    6
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_SYSTEM_Initialize
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           
  6957                           ;psect for function _EPWM1_Initialize
  6958  09FA                     _EPWM1_Initialize:	
  6959                           
  6960                           ;epwm1.c: 68: CCP1CON = 0x3C;
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
  6964  09FA  303C               	movlw	60
  6965  09FB  0025               	movlb	5	; select bank5
  6966  09FC  0093               	movwf	19	;volatile
  6967                           
  6968                           ;epwm1.c: 71: ECCP1AS = 0x00;
  6969  09FD  0195               	clrf	21	;volatile
  6970                           
  6971                           ;epwm1.c: 74: PWM1CON = 0x80;
  6972  09FE  3080               	movlw	128
  6973  09FF  0094               	movwf	20	;volatile
  6974                           
  6975                           ;epwm1.c: 77: PSTR1CON = 0x01;
  6976  0A00  3001               	movlw	1
  6977  0A01  0096               	movwf	22	;volatile
  6978                           
  6979                           ;epwm1.c: 80: CCPR1L = 0x7F;
  6980  0A02  307F               	movlw	127
  6981  0A03  0091               	movwf	17	;volatile
  6982                           
  6983                           ;epwm1.c: 83: CCPR1H = 0x00;
  6984  0A04  0192               	clrf	18	;volatile
  6985                           
  6986                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  6987  0A05  30FC               	movlw	-4
  6988  0A06  059E               	andwf	30,f	;volatile
  6989  0A07  0008               	return
  6990  0A08                     __end_of_EPWM1_Initialize:	
  6991                           
  6992                           	psect	text24
  6993  039A                     __ptext24:	
  6994 ;; *************** function _GPS_read_speed *****************
  6995 ;; Defined at:
  6996 ;;		line 24 in file "GPS.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;		None
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  buffer          6   35[BANK0 ] unsigned char [6]
  7001 ;;  read_speed_f    2   31[BANK0 ] unsigned short 
  7002 ;;  read_speed_i    2   29[BANK0 ] unsigned short 
  7003 ;;  m_char          1   43[BANK0 ] unsigned char 
  7004 ;;  i_buff          1   42[BANK0 ] unsigned char 
  7005 ;;  i_buff2         1   41[BANK0 ] unsigned char 
  7006 ;;  checksum        1   34[BANK0 ] unsigned char 
  7007 ;;  checksum2       1   33[BANK0 ] unsigned char 
  7008 ;;  no_more_chec    1   28[BANK0 ] unsigned char 
  7009 ;;  before_dot      1   27[BANK0 ] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;                  1    wreg      unsigned char 
  7012 ;; Registers used:
  7013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7019 ;;      Params:         0       0       0       0       0       0
  7020 ;;      Locals:         0      17       0       0       0       0
  7021 ;;      Temps:          0       2       0       0       0       0
  7022 ;;      Totals:         0      19       0       0       0       0
  7023 ;;Total ram usage:       19 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:    7
  7026 ;; This function calls:
  7027 ;;		_EUSART_Read
  7028 ;;		___wmul
  7029 ;;		_convert_to_fp
  7030 ;; This function is called by:
  7031 ;;		_main
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           
  7036                           ;psect for function _GPS_read_speed
  7037  039A                     _GPS_read_speed:	
  7038                           
  7039                           ;GPS.c: 28: unsigned char buffer[6];
  7040                           ;GPS.c: 29: unsigned char i_buff = 0;
  7041                           
  7042                           ;incstack = 0
  7043                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7044  039A  0020               	movlb	0	; select bank0
  7045  039B  01CA               	clrf	GPS_read_speed@i_buff
  7046                           
  7047                           ;GPS.c: 30: unsigned char checksum = 0x00;
  7048  039C  01C2               	clrf	GPS_read_speed@checksum
  7049                           
  7050                           ;GPS.c: 32: unsigned char m_char = 0x00;
  7051  039D  01CB               	clrf	GPS_read_speed@m_char
  7052  039E                     l4324:	
  7053                           ;GPS.c: 33: while (m_char != '$')
  7054                           
  7055  039E  3024               	movlw	36
  7056  039F  064B               	xorwf	GPS_read_speed@m_char,w
  7057  03A0  1903               	btfsc	3,2
  7058  03A1  2BAD               	goto	l4326
  7059                           
  7060                           ;GPS.c: 34: if(eusartRxCount!=0)
  7061  03A2  0878               	movf	_eusartRxCount,w	;volatile
  7062  03A3  1903               	btfsc	3,2
  7063  03A4  2B9E               	goto	l4324
  7064                           
  7065                           ;GPS.c: 35: m_char=EUSART_Read();
  7066  03A5  318B  2304  3183   	fcall	_EUSART_Read
  7067  03A8  0020               	movlb	0	; select bank0
  7068  03A9  00B9               	movwf	??_GPS_read_speed
  7069  03AA  0839               	movf	??_GPS_read_speed,w
  7070  03AB  00CB               	movwf	GPS_read_speed@m_char
  7071  03AC  2B9E               	goto	l4324
  7072  03AD                     l4326:	
  7073                           ;GPS.c: 39: while (1)
  7074                           
  7075                           
  7076                           ;GPS.c: 40: if (eusartRxCount!=0)
  7077  03AD  0878               	movf	_eusartRxCount,w	;volatile
  7078  03AE  1903               	btfsc	3,2
  7079  03AF  2BAD               	goto	l4326
  7080                           
  7081                           ;GPS.c: 41: {
  7082                           ;GPS.c: 42: m_char=EUSART_Read();
  7083  03B0  318B  2304  3183   	fcall	_EUSART_Read
  7084  03B3  0020               	movlb	0	; select bank0
  7085  03B4  00B9               	movwf	??_GPS_read_speed
  7086  03B5  0839               	movf	??_GPS_read_speed,w
  7087  03B6  00CB               	movwf	GPS_read_speed@m_char
  7088                           
  7089                           ;GPS.c: 43: checksum ^= m_char;
  7090  03B7  084B               	movf	GPS_read_speed@m_char,w
  7091  03B8  00B9               	movwf	??_GPS_read_speed
  7092  03B9  0839               	movf	??_GPS_read_speed,w
  7093  03BA  06C2               	xorwf	GPS_read_speed@checksum,f
  7094                           
  7095                           ;GPS.c: 44: if (m_char == ',')
  7096  03BB  302C               	movlw	44
  7097  03BC  064B               	xorwf	GPS_read_speed@m_char,w
  7098  03BD  1903               	btfsc	3,2
  7099  03BE  2BD1               	goto	l4348
  7100                           
  7101                           ;GPS.c: 46: else
  7102                           ;GPS.c: 47: {
  7103                           ;GPS.c: 48: buffer[i_buff++] = m_char;
  7104                           
  7105                           ;GPS.c: 45: break;
  7106  03BF  084B               	movf	GPS_read_speed@m_char,w
  7107  03C0  00B9               	movwf	??_GPS_read_speed
  7108  03C1  084A               	movf	GPS_read_speed@i_buff,w
  7109  03C2  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7110  03C3  0086               	movwf	6
  7111  03C4  0187               	clrf	7
  7112  03C5  0839               	movf	??_GPS_read_speed,w
  7113  03C6  0081               	movwf	1
  7114  03C7  3001               	movlw	1
  7115  03C8  00B9               	movwf	??_GPS_read_speed
  7116  03C9  0839               	movf	??_GPS_read_speed,w
  7117  03CA  07CA               	addwf	GPS_read_speed@i_buff,f
  7118                           
  7119                           ;GPS.c: 49: if (i_buff >= 6)
  7120  03CB  3006               	movlw	6
  7121  03CC  024A               	subwf	GPS_read_speed@i_buff,w
  7122  03CD  1C03               	skipc
  7123  03CE  2BAD               	goto	l4326
  7124                           
  7125                           ;GPS.c: 50: return 0;
  7126  03CF  3000               	movlw	0
  7127  03D0  0008               	return
  7128  03D1                     l4348:	
  7129                           
  7130                           ;GPS.c: 51: }
  7131                           ;GPS.c: 52: }
  7132                           ;GPS.c: 54: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  7133  03D1  3047               	movlw	71
  7134  03D2  0643               	xorwf	GPS_read_speed@buffer,w
  7135  03D3  1D03               	btfss	3,2
  7136  03D4  2BE5               	goto	l4358
  7137  03D5  3050               	movlw	80
  7138  03D6  0644               	xorwf	GPS_read_speed@buffer+1,w
  7139  03D7  1D03               	btfss	3,2
  7140  03D8  2BE5               	goto	l4358
  7141  03D9  3056               	movlw	86
  7142  03DA  0645               	xorwf	GPS_read_speed@buffer+2,w
  7143  03DB  1D03               	btfss	3,2
  7144  03DC  2BE5               	goto	l4358
  7145  03DD  3054               	movlw	84
  7146  03DE  0646               	xorwf	GPS_read_speed@buffer+3,w
  7147  03DF  1D03               	btfss	3,2
  7148  03E0  2BE5               	goto	l4358
  7149  03E1  3047               	movlw	71
  7150  03E2  0647               	xorwf	GPS_read_speed@buffer+4,w
  7151  03E3  1903               	btfsc	3,2
  7152  03E4  2BE7               	goto	l4362
  7153  03E5                     l4358:	
  7154                           
  7155                           ;GPS.c: 55: return 0;
  7156  03E5  3000               	movlw	0
  7157  03E6  0008               	return
  7158  03E7                     l4362:	
  7159                           
  7160                           ;GPS.c: 56: i_buff = 0;
  7161  03E7  01CA               	clrf	GPS_read_speed@i_buff
  7162  03E8                     l4364:	
  7163                           ;GPS.c: 59: while (1)
  7164                           
  7165                           
  7166                           ;GPS.c: 60: if (eusartRxCount!=0)
  7167  03E8  0878               	movf	_eusartRxCount,w	;volatile
  7168  03E9  1903               	btfsc	3,2
  7169  03EA  2BE8               	goto	l4364
  7170                           
  7171                           ;GPS.c: 61: {
  7172                           ;GPS.c: 62: m_char=EUSART_Read();
  7173  03EB  318B  2304  3183   	fcall	_EUSART_Read
  7174  03EE  0020               	movlb	0	; select bank0
  7175  03EF  00B9               	movwf	??_GPS_read_speed
  7176  03F0  0839               	movf	??_GPS_read_speed,w
  7177  03F1  00CB               	movwf	GPS_read_speed@m_char
  7178                           
  7179                           ;GPS.c: 63: checksum ^= m_char;
  7180  03F2  084B               	movf	GPS_read_speed@m_char,w
  7181  03F3  00B9               	movwf	??_GPS_read_speed
  7182  03F4  0839               	movf	??_GPS_read_speed,w
  7183  03F5  06C2               	xorwf	GPS_read_speed@checksum,f
  7184                           
  7185                           ;GPS.c: 64: if (m_char == ',')
  7186  03F6  302C               	movlw	44
  7187  03F7  064B               	xorwf	GPS_read_speed@m_char,w
  7188  03F8  1D03               	btfss	3,2
  7189  03F9  2BE8               	goto	l4364
  7190  03FA                     l4374:	
  7191                           ;GPS.c: 66: }
  7192                           ;GPS.c: 68: while (1)
  7193                           
  7194                           ;GPS.c: 65: break;
  7195                           
  7196                           
  7197                           ;GPS.c: 69: if (eusartRxCount!=0)
  7198  03FA  0878               	movf	_eusartRxCount,w	;volatile
  7199  03FB  1903               	btfsc	3,2
  7200  03FC  2BFA               	goto	l4374
  7201                           
  7202                           ;GPS.c: 70: {
  7203                           ;GPS.c: 71: m_char=EUSART_Read();
  7204  03FD  318B  2304  3183   	fcall	_EUSART_Read
  7205  0400  0020               	movlb	0	; select bank0
  7206  0401  00B9               	movwf	??_GPS_read_speed
  7207  0402  0839               	movf	??_GPS_read_speed,w
  7208  0403  00CB               	movwf	GPS_read_speed@m_char
  7209                           
  7210                           ;GPS.c: 72: checksum ^= m_char;
  7211  0404  084B               	movf	GPS_read_speed@m_char,w
  7212  0405  00B9               	movwf	??_GPS_read_speed
  7213  0406  0839               	movf	??_GPS_read_speed,w
  7214  0407  06C2               	xorwf	GPS_read_speed@checksum,f
  7215                           
  7216                           ;GPS.c: 73: if (m_char == ',')
  7217  0408  302C               	movlw	44
  7218  0409  064B               	xorwf	GPS_read_speed@m_char,w
  7219  040A  1903               	btfsc	3,2
  7220  040B  2C1E               	goto	l4396
  7221                           
  7222                           ;GPS.c: 75: else
  7223                           ;GPS.c: 76: {
  7224                           ;GPS.c: 77: buffer[i_buff++] = m_char;
  7225                           
  7226                           ;GPS.c: 74: break;
  7227  040C  084B               	movf	GPS_read_speed@m_char,w
  7228  040D  00B9               	movwf	??_GPS_read_speed
  7229  040E  084A               	movf	GPS_read_speed@i_buff,w
  7230  040F  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7231  0410  0086               	movwf	6
  7232  0411  0187               	clrf	7
  7233  0412  0839               	movf	??_GPS_read_speed,w
  7234  0413  0081               	movwf	1
  7235  0414  3001               	movlw	1
  7236  0415  00B9               	movwf	??_GPS_read_speed
  7237  0416  0839               	movf	??_GPS_read_speed,w
  7238  0417  07CA               	addwf	GPS_read_speed@i_buff,f
  7239                           
  7240                           ;GPS.c: 78: if (i_buff >= 6)
  7241  0418  3006               	movlw	6
  7242  0419  024A               	subwf	GPS_read_speed@i_buff,w
  7243  041A  1C03               	skipc
  7244  041B  2BFA               	goto	l4374
  7245                           
  7246                           ;GPS.c: 79: return 0;
  7247  041C  3000               	movlw	0
  7248  041D  0008               	return
  7249  041E                     l4396:	
  7250                           
  7251                           ;GPS.c: 80: }
  7252                           ;GPS.c: 81: }
  7253                           ;GPS.c: 82: if ((buffer[0] != 'T')||(i_buff != 1))
  7254  041E  3054               	movlw	84
  7255  041F  0643               	xorwf	GPS_read_speed@buffer,w
  7256  0420  1903               	btfsc	3,2
  7257  0421  034A               	decf	GPS_read_speed@i_buff,w
  7258  0422  1903               	btfsc	3,2
  7259  0423  2C26               	goto	l4404
  7260                           
  7261                           ;GPS.c: 83: return 0;
  7262  0424  3000               	movlw	0
  7263  0425  0008               	return
  7264  0426                     l4404:	
  7265                           
  7266                           ;GPS.c: 84: i_buff = 0;
  7267  0426  01CA               	clrf	GPS_read_speed@i_buff
  7268  0427                     l4406:	
  7269                           ;GPS.c: 87: while (1)
  7270                           
  7271                           
  7272                           ;GPS.c: 88: if (eusartRxCount!=0)
  7273  0427  0878               	movf	_eusartRxCount,w	;volatile
  7274  0428  1903               	btfsc	3,2
  7275  0429  2C27               	goto	l4406
  7276                           
  7277                           ;GPS.c: 89: {
  7278                           ;GPS.c: 90: m_char=EUSART_Read();
  7279  042A  318B  2304  3183   	fcall	_EUSART_Read
  7280  042D  0020               	movlb	0	; select bank0
  7281  042E  00B9               	movwf	??_GPS_read_speed
  7282  042F  0839               	movf	??_GPS_read_speed,w
  7283  0430  00CB               	movwf	GPS_read_speed@m_char
  7284                           
  7285                           ;GPS.c: 91: checksum ^= m_char;
  7286  0431  084B               	movf	GPS_read_speed@m_char,w
  7287  0432  00B9               	movwf	??_GPS_read_speed
  7288  0433  0839               	movf	??_GPS_read_speed,w
  7289  0434  06C2               	xorwf	GPS_read_speed@checksum,f
  7290                           
  7291                           ;GPS.c: 92: if (m_char == ',')
  7292  0435  302C               	movlw	44
  7293  0436  064B               	xorwf	GPS_read_speed@m_char,w
  7294  0437  1D03               	btfss	3,2
  7295  0438  2C27               	goto	l4406
  7296  0439                     l4416:	
  7297                           ;GPS.c: 94: }
  7298                           ;GPS.c: 96: while (1)
  7299                           
  7300                           ;GPS.c: 93: break;
  7301                           
  7302                           
  7303                           ;GPS.c: 97: if (eusartRxCount!=0)
  7304  0439  0878               	movf	_eusartRxCount,w	;volatile
  7305  043A  1903               	btfsc	3,2
  7306  043B  2C39               	goto	l4416
  7307                           
  7308                           ;GPS.c: 98: {
  7309                           ;GPS.c: 99: m_char=EUSART_Read();
  7310  043C  318B  2304  3183   	fcall	_EUSART_Read
  7311  043F  0020               	movlb	0	; select bank0
  7312  0440  00B9               	movwf	??_GPS_read_speed
  7313  0441  0839               	movf	??_GPS_read_speed,w
  7314  0442  00CB               	movwf	GPS_read_speed@m_char
  7315                           
  7316                           ;GPS.c: 100: checksum ^= m_char;
  7317  0443  084B               	movf	GPS_read_speed@m_char,w
  7318  0444  00B9               	movwf	??_GPS_read_speed
  7319  0445  0839               	movf	??_GPS_read_speed,w
  7320  0446  06C2               	xorwf	GPS_read_speed@checksum,f
  7321                           
  7322                           ;GPS.c: 101: if (m_char == ',')
  7323  0447  302C               	movlw	44
  7324  0448  064B               	xorwf	GPS_read_speed@m_char,w
  7325  0449  1903               	btfsc	3,2
  7326  044A  2C5D               	goto	l4438
  7327                           
  7328                           ;GPS.c: 103: else
  7329                           ;GPS.c: 104: {
  7330                           ;GPS.c: 105: buffer[i_buff++] = m_char;
  7331                           
  7332                           ;GPS.c: 102: break;
  7333  044B  084B               	movf	GPS_read_speed@m_char,w
  7334  044C  00B9               	movwf	??_GPS_read_speed
  7335  044D  084A               	movf	GPS_read_speed@i_buff,w
  7336  044E  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7337  044F  0086               	movwf	6
  7338  0450  0187               	clrf	7
  7339  0451  0839               	movf	??_GPS_read_speed,w
  7340  0452  0081               	movwf	1
  7341  0453  3001               	movlw	1
  7342  0454  00B9               	movwf	??_GPS_read_speed
  7343  0455  0839               	movf	??_GPS_read_speed,w
  7344  0456  07CA               	addwf	GPS_read_speed@i_buff,f
  7345                           
  7346                           ;GPS.c: 106: if (i_buff >= 6)
  7347  0457  3006               	movlw	6
  7348  0458  024A               	subwf	GPS_read_speed@i_buff,w
  7349  0459  1C03               	skipc
  7350  045A  2C39               	goto	l4416
  7351                           
  7352                           ;GPS.c: 107: return 0;
  7353  045B  3000               	movlw	0
  7354  045C  0008               	return
  7355  045D                     l4438:	
  7356                           
  7357                           ;GPS.c: 108: }
  7358                           ;GPS.c: 109: }
  7359                           ;GPS.c: 110: if ((buffer[0] != 'M')||(i_buff != 1))
  7360  045D  304D               	movlw	77
  7361  045E  0643               	xorwf	GPS_read_speed@buffer,w
  7362  045F  1903               	btfsc	3,2
  7363  0460  034A               	decf	GPS_read_speed@i_buff,w
  7364  0461  1903               	btfsc	3,2
  7365  0462  2C65               	goto	l4446
  7366                           
  7367                           ;GPS.c: 111: return 0;
  7368  0463  3000               	movlw	0
  7369  0464  0008               	return
  7370  0465                     l4446:	
  7371                           
  7372                           ;GPS.c: 112: i_buff = 0;
  7373  0465  01CA               	clrf	GPS_read_speed@i_buff
  7374  0466                     l4448:	
  7375                           ;GPS.c: 115: while (1)
  7376                           
  7377                           
  7378                           ;GPS.c: 116: if (eusartRxCount!=0)
  7379  0466  0878               	movf	_eusartRxCount,w	;volatile
  7380  0467  1903               	btfsc	3,2
  7381  0468  2C66               	goto	l4448
  7382                           
  7383                           ;GPS.c: 117: {
  7384                           ;GPS.c: 118: m_char=EUSART_Read();
  7385  0469  318B  2304  3183   	fcall	_EUSART_Read
  7386  046C  0020               	movlb	0	; select bank0
  7387  046D  00B9               	movwf	??_GPS_read_speed
  7388  046E  0839               	movf	??_GPS_read_speed,w
  7389  046F  00CB               	movwf	GPS_read_speed@m_char
  7390                           
  7391                           ;GPS.c: 119: checksum ^= m_char;
  7392  0470  084B               	movf	GPS_read_speed@m_char,w
  7393  0471  00B9               	movwf	??_GPS_read_speed
  7394  0472  0839               	movf	??_GPS_read_speed,w
  7395  0473  06C2               	xorwf	GPS_read_speed@checksum,f
  7396                           
  7397                           ;GPS.c: 120: if (m_char == ',')
  7398  0474  302C               	movlw	44
  7399  0475  064B               	xorwf	GPS_read_speed@m_char,w
  7400  0476  1D03               	btfss	3,2
  7401  0477  2C66               	goto	l4448
  7402  0478                     l4458:	
  7403                           ;GPS.c: 122: }
  7404                           ;GPS.c: 124: while (1)
  7405                           
  7406                           ;GPS.c: 121: break;
  7407                           
  7408                           
  7409                           ;GPS.c: 125: if (eusartRxCount!=0)
  7410  0478  0878               	movf	_eusartRxCount,w	;volatile
  7411  0479  1903               	btfsc	3,2
  7412  047A  2C78               	goto	l4458
  7413                           
  7414                           ;GPS.c: 126: {
  7415                           ;GPS.c: 127: m_char=EUSART_Read();
  7416  047B  318B  2304  3183   	fcall	_EUSART_Read
  7417  047E  0020               	movlb	0	; select bank0
  7418  047F  00B9               	movwf	??_GPS_read_speed
  7419  0480  0839               	movf	??_GPS_read_speed,w
  7420  0481  00CB               	movwf	GPS_read_speed@m_char
  7421                           
  7422                           ;GPS.c: 128: checksum ^= m_char;
  7423  0482  084B               	movf	GPS_read_speed@m_char,w
  7424  0483  00B9               	movwf	??_GPS_read_speed
  7425  0484  0839               	movf	??_GPS_read_speed,w
  7426  0485  06C2               	xorwf	GPS_read_speed@checksum,f
  7427                           
  7428                           ;GPS.c: 129: if (m_char == ',')
  7429  0486  302C               	movlw	44
  7430  0487  064B               	xorwf	GPS_read_speed@m_char,w
  7431  0488  1903               	btfsc	3,2
  7432  0489  2C9C               	goto	l4480
  7433                           
  7434                           ;GPS.c: 131: else
  7435                           ;GPS.c: 132: {
  7436                           ;GPS.c: 133: buffer[i_buff++] = m_char;
  7437                           
  7438                           ;GPS.c: 130: break;
  7439  048A  084B               	movf	GPS_read_speed@m_char,w
  7440  048B  00B9               	movwf	??_GPS_read_speed
  7441  048C  084A               	movf	GPS_read_speed@i_buff,w
  7442  048D  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7443  048E  0086               	movwf	6
  7444  048F  0187               	clrf	7
  7445  0490  0839               	movf	??_GPS_read_speed,w
  7446  0491  0081               	movwf	1
  7447  0492  3001               	movlw	1
  7448  0493  00B9               	movwf	??_GPS_read_speed
  7449  0494  0839               	movf	??_GPS_read_speed,w
  7450  0495  07CA               	addwf	GPS_read_speed@i_buff,f
  7451                           
  7452                           ;GPS.c: 134: if (i_buff >= 6)
  7453  0496  3006               	movlw	6
  7454  0497  024A               	subwf	GPS_read_speed@i_buff,w
  7455  0498  1C03               	skipc
  7456  0499  2C78               	goto	l4458
  7457                           
  7458                           ;GPS.c: 135: return 0;
  7459  049A  3000               	movlw	0
  7460  049B  0008               	return
  7461  049C                     l4480:	
  7462                           
  7463                           ;GPS.c: 136: }
  7464                           ;GPS.c: 137: }
  7465                           ;GPS.c: 138: if ((buffer[0] != 'N')||(i_buff != 1))
  7466  049C  304E               	movlw	78
  7467  049D  0643               	xorwf	GPS_read_speed@buffer,w
  7468  049E  1903               	btfsc	3,2
  7469  049F  034A               	decf	GPS_read_speed@i_buff,w
  7470  04A0  1903               	btfsc	3,2
  7471  04A1  2CA4               	goto	l4488
  7472                           
  7473                           ;GPS.c: 139: return 0;
  7474  04A2  3000               	movlw	0
  7475  04A3  0008               	return
  7476  04A4                     l4488:	
  7477                           
  7478                           ;GPS.c: 140: i_buff = 0;
  7479  04A4  01CA               	clrf	GPS_read_speed@i_buff
  7480  04A5                     l4490:	
  7481                           ;GPS.c: 143: while (1)
  7482                           
  7483                           
  7484                           ;GPS.c: 144: if (eusartRxCount!=0)
  7485  04A5  0878               	movf	_eusartRxCount,w	;volatile
  7486  04A6  1903               	btfsc	3,2
  7487  04A7  2CA5               	goto	l4490
  7488                           
  7489                           ;GPS.c: 145: {
  7490                           ;GPS.c: 146: m_char=EUSART_Read();
  7491  04A8  318B  2304  3183   	fcall	_EUSART_Read
  7492  04AB  0020               	movlb	0	; select bank0
  7493  04AC  00B9               	movwf	??_GPS_read_speed
  7494  04AD  0839               	movf	??_GPS_read_speed,w
  7495  04AE  00CB               	movwf	GPS_read_speed@m_char
  7496                           
  7497                           ;GPS.c: 147: checksum ^= m_char;
  7498  04AF  084B               	movf	GPS_read_speed@m_char,w
  7499  04B0  00B9               	movwf	??_GPS_read_speed
  7500  04B1  0839               	movf	??_GPS_read_speed,w
  7501  04B2  06C2               	xorwf	GPS_read_speed@checksum,f
  7502                           
  7503                           ;GPS.c: 148: if (m_char == ',')
  7504  04B3  302C               	movlw	44
  7505  04B4  064B               	xorwf	GPS_read_speed@m_char,w
  7506  04B5  1903               	btfsc	3,2
  7507  04B6  2CC9               	goto	l4512
  7508                           
  7509                           ;GPS.c: 150: else
  7510                           ;GPS.c: 151: {
  7511                           ;GPS.c: 152: buffer[i_buff++] = m_char;
  7512                           
  7513                           ;GPS.c: 149: break;
  7514  04B7  084B               	movf	GPS_read_speed@m_char,w
  7515  04B8  00B9               	movwf	??_GPS_read_speed
  7516  04B9  084A               	movf	GPS_read_speed@i_buff,w
  7517  04BA  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7518  04BB  0086               	movwf	6
  7519  04BC  0187               	clrf	7
  7520  04BD  0839               	movf	??_GPS_read_speed,w
  7521  04BE  0081               	movwf	1
  7522  04BF  3001               	movlw	1
  7523  04C0  00B9               	movwf	??_GPS_read_speed
  7524  04C1  0839               	movf	??_GPS_read_speed,w
  7525  04C2  07CA               	addwf	GPS_read_speed@i_buff,f
  7526                           
  7527                           ;GPS.c: 153: if (i_buff >= 6)
  7528  04C3  3006               	movlw	6
  7529  04C4  024A               	subwf	GPS_read_speed@i_buff,w
  7530  04C5  1C03               	skipc
  7531  04C6  2CA5               	goto	l4490
  7532                           
  7533                           ;GPS.c: 154: return 0;
  7534  04C7  3000               	movlw	0
  7535  04C8  0008               	return
  7536  04C9                     l4512:	
  7537                           
  7538                           ;GPS.c: 155: }
  7539                           ;GPS.c: 156: }
  7540                           ;GPS.c: 159: unsigned char i_buff2 = 0;
  7541  04C9  01C9               	clrf	GPS_read_speed@i_buff2
  7542                           
  7543                           ;GPS.c: 160: unsigned short read_speed_int=0;
  7544  04CA  01BD               	clrf	GPS_read_speed@read_speed_int
  7545  04CB  01BE               	clrf	GPS_read_speed@read_speed_int+1
  7546                           
  7547                           ;GPS.c: 161: unsigned short read_speed_fra=0;
  7548  04CC  01BF               	clrf	GPS_read_speed@read_speed_fra
  7549  04CD  01C0               	clrf	GPS_read_speed@read_speed_fra+1
  7550                           
  7551                           ;GPS.c: 162: bool before_dot = 1;
  7552  04CE  01BB               	clrf	GPS_read_speed@before_dot
  7553  04CF  0ABB               	incf	GPS_read_speed@before_dot,f
  7554  04D0                     l4540:	
  7555                           ;GPS.c: 163: while (i_buff2 < i_buff)
  7556                           
  7557  04D0  084A               	movf	GPS_read_speed@i_buff,w
  7558  04D1  0249               	subwf	GPS_read_speed@i_buff2,w
  7559  04D2  1803               	btfsc	3,0
  7560  04D3  2D33               	goto	l4542
  7561                           
  7562                           ;GPS.c: 164: if (buffer[i_buff2]=='.')
  7563  04D4  0849               	movf	GPS_read_speed@i_buff2,w
  7564  04D5  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7565  04D6  0086               	movwf	6
  7566  04D7  0187               	clrf	7
  7567  04D8  302E               	movlw	46
  7568  04D9  0601               	xorwf	1,w
  7569  04DA  1D03               	btfss	3,2
  7570  04DB  2CDE               	goto	l4522
  7571                           
  7572                           ;GPS.c: 165: {
  7573                           ;GPS.c: 166: before_dot = 0;
  7574  04DC  01BB               	clrf	GPS_read_speed@before_dot
  7575  04DD  2D2E               	goto	l4538
  7576  04DE                     l4522:	
  7577                           ;GPS.c: 168: }
  7578                           
  7579                           ;GPS.c: 167: i_buff2++;
  7580                           
  7581                           
  7582                           ;GPS.c: 169: else
  7583                           ;GPS.c: 170: {
  7584                           ;GPS.c: 171: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  7585  04DE  0849               	movf	GPS_read_speed@i_buff2,w
  7586  04DF  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7587  04E0  0086               	movwf	6
  7588  04E1  0187               	clrf	7
  7589  04E2  3030               	movlw	48
  7590  04E3  0201               	subwf	1,w
  7591  04E4  1C03               	skipc
  7592  04E5  2CEE               	goto	l4526
  7593  04E6  0849               	movf	GPS_read_speed@i_buff2,w
  7594  04E7  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7595  04E8  0086               	movwf	6
  7596  04E9  0187               	clrf	7
  7597  04EA  303A               	movlw	58
  7598  04EB  0201               	subwf	1,w
  7599  04EC  1C03               	skipc
  7600  04ED  2CF0               	goto	l4532
  7601  04EE                     l4526:	
  7602                           
  7603                           ;GPS.c: 172: return 0;
  7604  04EE  3000               	movlw	0
  7605  04EF  0008               	return
  7606  04F0                     l4532:	
  7607                           
  7608                           ;GPS.c: 173: else
  7609                           ;GPS.c: 174: {
  7610                           ;GPS.c: 175: if (before_dot)
  7611  04F0  083B               	movf	GPS_read_speed@before_dot,w
  7612  04F1  1903               	btfsc	3,2
  7613  04F2  2D11               	goto	l4536
  7614                           
  7615                           ;GPS.c: 176: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  7616  04F3  083E               	movf	GPS_read_speed@read_speed_int+1,w
  7617  04F4  00A1               	movwf	___wmul@multiplier+1
  7618  04F5  083D               	movf	GPS_read_speed@read_speed_int,w
  7619  04F6  00A0               	movwf	___wmul@multiplier
  7620  04F7  300A               	movlw	10
  7621  04F8  00A2               	movwf	___wmul@multiplicand
  7622  04F9  3000               	movlw	0
  7623  04FA  00A3               	movwf	___wmul@multiplicand+1
  7624  04FB  318A  2292  3183   	fcall	___wmul
  7625  04FE  0020               	movlb	0	; select bank0
  7626  04FF  0849               	movf	GPS_read_speed@i_buff2,w
  7627  0500  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7628  0501  0086               	movwf	6
  7629  0502  0187               	clrf	7
  7630  0503  0801               	movf	1,w
  7631  0504  0720               	addwf	?___wmul,w
  7632  0505  00B9               	movwf	??_GPS_read_speed
  7633  0506  0821               	movf	?___wmul+1,w
  7634  0507  1803               	skipnc
  7635  0508  0A21               	incf	?___wmul+1,w
  7636  0509  00BA               	movwf	??_GPS_read_speed+1
  7637  050A  0839               	movf	??_GPS_read_speed,w
  7638  050B  3ED0               	addlw	208
  7639  050C  00BD               	movwf	GPS_read_speed@read_speed_int
  7640  050D  30FF               	movlw	255
  7641  050E  3D3A               	addwfc	??_GPS_read_speed+1,w
  7642  050F  00BE               	movwf	GPS_read_speed@read_speed_int+1
  7643  0510  2D2E               	goto	l4538
  7644  0511                     l4536:	
  7645                           
  7646                           ;GPS.c: 177: else
  7647                           ;GPS.c: 178: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  7648  0511  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7649  0512  00A1               	movwf	___wmul@multiplier+1
  7650  0513  083F               	movf	GPS_read_speed@read_speed_fra,w
  7651  0514  00A0               	movwf	___wmul@multiplier
  7652  0515  300A               	movlw	10
  7653  0516  00A2               	movwf	___wmul@multiplicand
  7654  0517  3000               	movlw	0
  7655  0518  00A3               	movwf	___wmul@multiplicand+1
  7656  0519  318A  2292  3183   	fcall	___wmul
  7657  051C  0020               	movlb	0	; select bank0
  7658  051D  0849               	movf	GPS_read_speed@i_buff2,w
  7659  051E  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7660  051F  0086               	movwf	6
  7661  0520  0187               	clrf	7
  7662  0521  0801               	movf	1,w
  7663  0522  0720               	addwf	?___wmul,w
  7664  0523  00B9               	movwf	??_GPS_read_speed
  7665  0524  0821               	movf	?___wmul+1,w
  7666  0525  1803               	skipnc
  7667  0526  0A21               	incf	?___wmul+1,w
  7668  0527  00BA               	movwf	??_GPS_read_speed+1
  7669  0528  0839               	movf	??_GPS_read_speed,w
  7670  0529  3ED0               	addlw	208
  7671  052A  00BF               	movwf	GPS_read_speed@read_speed_fra
  7672  052B  30FF               	movlw	255
  7673  052C  3D3A               	addwfc	??_GPS_read_speed+1,w
  7674  052D  00C0               	movwf	GPS_read_speed@read_speed_fra+1
  7675  052E                     l4538:	
  7676                           
  7677                           ;GPS.c: 179: i_buff2++;
  7678  052E  3001               	movlw	1
  7679  052F  00B9               	movwf	??_GPS_read_speed
  7680  0530  0839               	movf	??_GPS_read_speed,w
  7681  0531  07C9               	addwf	GPS_read_speed@i_buff2,f
  7682  0532  2CD0               	goto	l4540
  7683  0533                     l4542:	
  7684                           
  7685                           ;GPS.c: 180: }
  7686                           ;GPS.c: 181: }
  7687                           ;GPS.c: 185: read_speed_fra *= 100;
  7688  0533  3064               	movlw	100
  7689  0534  00A0               	movwf	___wmul@multiplier
  7690  0535  3000               	movlw	0
  7691  0536  00A1               	movwf	___wmul@multiplier+1
  7692  0537  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7693  0538  00A3               	movwf	___wmul@multiplicand+1
  7694  0539  083F               	movf	GPS_read_speed@read_speed_fra,w
  7695  053A  00A2               	movwf	___wmul@multiplicand
  7696  053B  318A  2292  3183   	fcall	___wmul
  7697  053E  0020               	movlb	0	; select bank0
  7698  053F  0821               	movf	?___wmul+1,w
  7699  0540  00C0               	movwf	GPS_read_speed@read_speed_fra+1
  7700  0541  0820               	movf	?___wmul,w
  7701  0542  00BF               	movwf	GPS_read_speed@read_speed_fra
  7702                           
  7703                           ;GPS.c: 188: i_buff = 0;
  7704  0543  01CA               	clrf	GPS_read_speed@i_buff
  7705  0544                     l4546:	
  7706                           ;GPS.c: 191: while (1)
  7707                           
  7708                           
  7709                           ;GPS.c: 192: if (eusartRxCount!=0)
  7710  0544  0878               	movf	_eusartRxCount,w	;volatile
  7711  0545  1903               	btfsc	3,2
  7712  0546  2D44               	goto	l4546
  7713                           
  7714                           ;GPS.c: 193: {
  7715                           ;GPS.c: 194: m_char=EUSART_Read();
  7716  0547  318B  2304  3183   	fcall	_EUSART_Read
  7717  054A  0020               	movlb	0	; select bank0
  7718  054B  00B9               	movwf	??_GPS_read_speed
  7719  054C  0839               	movf	??_GPS_read_speed,w
  7720  054D  00CB               	movwf	GPS_read_speed@m_char
  7721                           
  7722                           ;GPS.c: 195: checksum ^= m_char;
  7723  054E  084B               	movf	GPS_read_speed@m_char,w
  7724  054F  00B9               	movwf	??_GPS_read_speed
  7725  0550  0839               	movf	??_GPS_read_speed,w
  7726  0551  06C2               	xorwf	GPS_read_speed@checksum,f
  7727                           
  7728                           ;GPS.c: 196: if (m_char == ',')
  7729  0552  302C               	movlw	44
  7730  0553  064B               	xorwf	GPS_read_speed@m_char,w
  7731  0554  1903               	btfsc	3,2
  7732  0555  2D68               	goto	l4568
  7733                           
  7734                           ;GPS.c: 198: else
  7735                           ;GPS.c: 199: {
  7736                           ;GPS.c: 200: buffer[i_buff++] = m_char;
  7737                           
  7738                           ;GPS.c: 197: break;
  7739  0556  084B               	movf	GPS_read_speed@m_char,w
  7740  0557  00B9               	movwf	??_GPS_read_speed
  7741  0558  084A               	movf	GPS_read_speed@i_buff,w
  7742  0559  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7743  055A  0086               	movwf	6
  7744  055B  0187               	clrf	7
  7745  055C  0839               	movf	??_GPS_read_speed,w
  7746  055D  0081               	movwf	1
  7747  055E  3001               	movlw	1
  7748  055F  00B9               	movwf	??_GPS_read_speed
  7749  0560  0839               	movf	??_GPS_read_speed,w
  7750  0561  07CA               	addwf	GPS_read_speed@i_buff,f
  7751                           
  7752                           ;GPS.c: 201: if (i_buff >= 6)
  7753  0562  3006               	movlw	6
  7754  0563  024A               	subwf	GPS_read_speed@i_buff,w
  7755  0564  1C03               	skipc
  7756  0565  2D44               	goto	l4546
  7757                           
  7758                           ;GPS.c: 202: return 0;
  7759  0566  3000               	movlw	0
  7760  0567  0008               	return
  7761  0568                     l4568:	
  7762                           
  7763                           ;GPS.c: 203: }
  7764                           ;GPS.c: 204: }
  7765                           ;GPS.c: 205: if ((buffer[0] != 'K')||(i_buff != 1))
  7766  0568  304B               	movlw	75
  7767  0569  0643               	xorwf	GPS_read_speed@buffer,w
  7768  056A  1903               	btfsc	3,2
  7769  056B  034A               	decf	GPS_read_speed@i_buff,w
  7770  056C  1903               	btfsc	3,2
  7771  056D  2D70               	goto	l4576
  7772                           
  7773                           ;GPS.c: 206: return 0;
  7774  056E  3000               	movlw	0
  7775  056F  0008               	return
  7776  0570                     l4576:	
  7777                           
  7778                           ;GPS.c: 207: i_buff = 0;
  7779  0570  01CA               	clrf	GPS_read_speed@i_buff
  7780                           
  7781                           ;GPS.c: 210: bool no_more_checksum = 0;
  7782  0571  01BC               	clrf	GPS_read_speed@no_more_checksum
  7783  0572                     l4578:	
  7784                           ;GPS.c: 211: while (1)
  7785                           
  7786                           
  7787                           ;GPS.c: 212: if (eusartRxCount!=0)
  7788  0572  0878               	movf	_eusartRxCount,w	;volatile
  7789  0573  1903               	btfsc	3,2
  7790  0574  2D72               	goto	l4578
  7791                           
  7792                           ;GPS.c: 213: {
  7793                           ;GPS.c: 214: m_char=EUSART_Read();
  7794  0575  318B  2304  3183   	fcall	_EUSART_Read
  7795  0578  0020               	movlb	0	; select bank0
  7796  0579  00B9               	movwf	??_GPS_read_speed
  7797  057A  0839               	movf	??_GPS_read_speed,w
  7798  057B  00CB               	movwf	GPS_read_speed@m_char
  7799                           
  7800                           ;GPS.c: 215: if (m_char == '*')
  7801  057C  302A               	movlw	42
  7802  057D  064B               	xorwf	GPS_read_speed@m_char,w
  7803  057E  1D03               	btfss	3,2
  7804  057F  2D82               	goto	l4586
  7805                           
  7806                           ;GPS.c: 216: no_more_checksum = 1;
  7807  0580  01BC               	clrf	GPS_read_speed@no_more_checksum
  7808  0581  0ABC               	incf	GPS_read_speed@no_more_checksum,f
  7809  0582                     l4586:	
  7810                           
  7811                           ;GPS.c: 217: if (!no_more_checksum)
  7812  0582  083C               	movf	GPS_read_speed@no_more_checksum,w
  7813  0583  1D03               	btfss	3,2
  7814  0584  2D89               	goto	l634
  7815                           
  7816                           ;GPS.c: 218: checksum ^= m_char;
  7817  0585  084B               	movf	GPS_read_speed@m_char,w
  7818  0586  00B9               	movwf	??_GPS_read_speed
  7819  0587  0839               	movf	??_GPS_read_speed,w
  7820  0588  06C2               	xorwf	GPS_read_speed@checksum,f
  7821  0589                     l634:	
  7822                           
  7823                           ;GPS.c: 219: if (m_char == 0x0D)
  7824  0589  300D               	movlw	13
  7825  058A  064B               	xorwf	GPS_read_speed@m_char,w
  7826  058B  1903               	btfsc	3,2
  7827  058C  2D9F               	goto	l4604
  7828                           
  7829                           ;GPS.c: 221: else
  7830                           ;GPS.c: 222: {
  7831                           ;GPS.c: 223: buffer[i_buff++] = m_char;
  7832                           
  7833                           ;GPS.c: 220: break;
  7834  058D  084B               	movf	GPS_read_speed@m_char,w
  7835  058E  00B9               	movwf	??_GPS_read_speed
  7836  058F  084A               	movf	GPS_read_speed@i_buff,w
  7837  0590  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7838  0591  0086               	movwf	6
  7839  0592  0187               	clrf	7
  7840  0593  0839               	movf	??_GPS_read_speed,w
  7841  0594  0081               	movwf	1
  7842  0595  3001               	movlw	1
  7843  0596  00B9               	movwf	??_GPS_read_speed
  7844  0597  0839               	movf	??_GPS_read_speed,w
  7845  0598  07CA               	addwf	GPS_read_speed@i_buff,f
  7846                           
  7847                           ;GPS.c: 224: if (i_buff >= 6)
  7848  0599  3006               	movlw	6
  7849  059A  024A               	subwf	GPS_read_speed@i_buff,w
  7850  059B  1C03               	skipc
  7851  059C  2D72               	goto	l4578
  7852                           
  7853                           ;GPS.c: 225: return 0;
  7854  059D  3000               	movlw	0
  7855  059E  0008               	return
  7856  059F                     l4604:	
  7857                           
  7858                           ;GPS.c: 226: }
  7859                           ;GPS.c: 227: }
  7860                           ;GPS.c: 228: if ((buffer[1] != '*')||(i_buff != 4))
  7861  059F  302A               	movlw	42
  7862  05A0  0644               	xorwf	GPS_read_speed@buffer+1,w
  7863  05A1  1D03               	btfss	3,2
  7864  05A2  2DA7               	goto	l4608
  7865  05A3  3004               	movlw	4
  7866  05A4  064A               	xorwf	GPS_read_speed@i_buff,w
  7867  05A5  1903               	btfsc	3,2
  7868  05A6  2DA9               	goto	l4612
  7869  05A7                     l4608:	
  7870                           
  7871                           ;GPS.c: 229: return 0;
  7872  05A7  3000               	movlw	0
  7873  05A8  0008               	return
  7874  05A9                     l4612:	
  7875                           
  7876                           ;GPS.c: 232: unsigned char checksum2 = 0;
  7877  05A9  01C1               	clrf	GPS_read_speed@checksum2
  7878                           
  7879                           ;GPS.c: 233: if (buffer[2] > 0x39)
  7880  05AA  303A               	movlw	58
  7881  05AB  0245               	subwf	GPS_read_speed@buffer+2,w
  7882  05AC  1C03               	skipc
  7883  05AD  2DB1               	goto	l4618
  7884                           
  7885                           ;GPS.c: 234: checksum2 = buffer[2] - 0x37;
  7886  05AE  0845               	movf	GPS_read_speed@buffer+2,w
  7887  05AF  3EC9               	addlw	201
  7888  05B0  2DB3               	goto	L6
  7889  05B1                     l4618:	
  7890                           
  7891                           ;GPS.c: 235: else
  7892                           ;GPS.c: 236: checksum2 = buffer[2] - 0x30;
  7893  05B1  0845               	movf	GPS_read_speed@buffer+2,w
  7894  05B2  3ED0               	addlw	208
  7895  05B3                     L6:	
  7896  05B3  00B9               	movwf	??_GPS_read_speed
  7897  05B4  0839               	movf	??_GPS_read_speed,w
  7898  05B5  00C1               	movwf	GPS_read_speed@checksum2
  7899                           
  7900                           ;GPS.c: 237: checksum2 = checksum2 << 4;
  7901  05B6  0841               	movf	GPS_read_speed@checksum2,w
  7902  05B7  00B9               	movwf	??_GPS_read_speed
  7903  05B8  3003               	movlw	3
  7904  05B9                     u5175:	
  7905  05B9  35B9               	lslf	??_GPS_read_speed,f
  7906  05BA  3EFF               	addlw	-1
  7907  05BB  1D03               	skipz
  7908  05BC  2DB9               	goto	u5175
  7909  05BD  3539               	lslf	??_GPS_read_speed,w
  7910  05BE  00BA               	movwf	??_GPS_read_speed+1
  7911  05BF  083A               	movf	??_GPS_read_speed+1,w
  7912  05C0  00C1               	movwf	GPS_read_speed@checksum2
  7913                           
  7914                           ;GPS.c: 238: if (buffer[3] > 0x39)
  7915  05C1  303A               	movlw	58
  7916  05C2  0246               	subwf	GPS_read_speed@buffer+3,w
  7917  05C3  1C03               	skipc
  7918  05C4  2DC8               	goto	l4624
  7919                           
  7920                           ;GPS.c: 239: checksum2 += buffer[3] - 0x37;
  7921  05C5  0846               	movf	GPS_read_speed@buffer+3,w
  7922  05C6  3EC9               	addlw	201
  7923  05C7  2DCA               	goto	L7
  7924  05C8                     l4624:	
  7925                           
  7926                           ;GPS.c: 240: else
  7927                           ;GPS.c: 241: checksum2 += buffer[3] - 0x30;
  7928  05C8  0846               	movf	GPS_read_speed@buffer+3,w
  7929  05C9  3ED0               	addlw	208
  7930  05CA                     L7:	
  7931  05CA  00B9               	movwf	??_GPS_read_speed
  7932  05CB  0839               	movf	??_GPS_read_speed,w
  7933  05CC  07C1               	addwf	GPS_read_speed@checksum2,f
  7934                           
  7935                           ;GPS.c: 242: if (checksum == checksum2)
  7936  05CD  0842               	movf	GPS_read_speed@checksum,w
  7937  05CE  0641               	xorwf	GPS_read_speed@checksum2,w
  7938  05CF  1D03               	skipz
  7939  05D0  2DED               	goto	l4636
  7940                           
  7941                           ;GPS.c: 243: {
  7942                           ;GPS.c: 244: speed = convert_to_fp(read_speed_int, read_speed_fra);
  7943  05D1  083E               	movf	GPS_read_speed@read_speed_int+1,w
  7944  05D2  00A5               	movwf	convert_to_fp@int_part+1
  7945  05D3  083D               	movf	GPS_read_speed@read_speed_int,w
  7946  05D4  00A4               	movwf	convert_to_fp@int_part
  7947  05D5  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7948  05D6  00A7               	movwf	convert_to_fp@fract_part+1
  7949  05D7  083F               	movf	GPS_read_speed@read_speed_fra,w
  7950  05D8  00A6               	movwf	convert_to_fp@fract_part
  7951  05D9  318E  265E         	fcall	_convert_to_fp
  7952  05DB  0020               	movlb	0	; select bank0
  7953  05DC  0827               	movf	?_convert_to_fp+3,w
  7954  05DD  0021               	movlb	1	; select bank1
  7955  05DE  00B3               	movwf	(_speed+3)^(0+128)
  7956  05DF  0020               	movlb	0	; select bank0
  7957  05E0  0826               	movf	?_convert_to_fp+2,w
  7958  05E1  0021               	movlb	1	; select bank1
  7959  05E2  00B2               	movwf	(_speed+2)^(0+128)
  7960  05E3  0020               	movlb	0	; select bank0
  7961  05E4  0825               	movf	?_convert_to_fp+1,w
  7962  05E5  0021               	movlb	1	; select bank1
  7963  05E6  00B1               	movwf	(_speed+1)^(0+128)
  7964  05E7  0020               	movlb	0	; select bank0
  7965  05E8  0824               	movf	?_convert_to_fp,w
  7966  05E9  0021               	movlb	1	; select bank1
  7967  05EA  00B0               	movwf	_speed^(0+128)
  7968                           
  7969                           ;GPS.c: 245: return 1;
  7970  05EB  3001               	movlw	1
  7971                           
  7972                           ;GPS.c: 246: }
  7973  05EC  0008               	return
  7974  05ED                     l4636:	
  7975                           
  7976                           ;GPS.c: 247: else
  7977                           ;GPS.c: 248: return 0;
  7978  05ED  3000               	movlw	0
  7979  05EE  0008               	return
  7980  05EF                     __end_of_GPS_read_speed:	
  7981                           
  7982                           	psect	text25
  7983  0E5E                     __ptext25:	
  7984 ;; *************** function _convert_to_fp *****************
  7985 ;; Defined at:
  7986 ;;		line 10 in file "fixed_point.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;  int_part        2    4[BANK0 ] short 
  7989 ;;  fract_part      2    6[BANK0 ] short 
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  i_bit           1   18[BANK0 ] unsigned char 
  7992 ;;  res             4   21[BANK0 ] long 
  7993 ;;  tmp_left        2   19[BANK0 ] unsigned short 
  7994 ;;  res_fract       2   16[BANK0 ] unsigned short 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  4    4[BANK0 ] long 
  7997 ;; Registers used:
  7998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8004 ;;      Params:         0       4       0       0       0       0
  8005 ;;      Locals:         0       9       0       0       0       0
  8006 ;;      Temps:          0       8       0       0       0       0
  8007 ;;      Totals:         0      21       0       0       0       0
  8008 ;;Total ram usage:       21 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    6
  8011 ;; This function calls:
  8012 ;;		Nothing
  8013 ;; This function is called by:
  8014 ;;		_main
  8015 ;;		_integer_part
  8016 ;;		_GPS_read_speed
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function _convert_to_fp
  8022  0E5E                     _convert_to_fp:	
  8023                           
  8024                           ;fixed_point.c: 16: t_fp res = 0;
  8025                           
  8026                           ;incstack = 0
  8027                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  8028  0E5E  3000               	movlw	0
  8029  0E5F  0020               	movlb	0	; select bank0
  8030  0E60  00B8               	movwf	convert_to_fp@res+3
  8031  0E61  3000               	movlw	0
  8032  0E62  00B7               	movwf	convert_to_fp@res+2
  8033  0E63  3000               	movlw	0
  8034  0E64  00B6               	movwf	convert_to_fp@res+1
  8035  0E65  3000               	movlw	0
  8036  0E66  00B5               	movwf	convert_to_fp@res
  8037                           
  8038                           ;fixed_point.c: 18: res = int_part;
  8039  0E67  0824               	movf	convert_to_fp@int_part,w
  8040  0E68  00B5               	movwf	convert_to_fp@res
  8041  0E69  0825               	movf	convert_to_fp@int_part+1,w
  8042  0E6A  00B6               	movwf	convert_to_fp@res+1
  8043  0E6B  0D89               	rlf	9,f
  8044  0E6C  3B89               	subwfb	9,f
  8045  0E6D  0989               	comf	9,f
  8046  0E6E  00B7               	movwf	convert_to_fp@res+2
  8047  0E6F  00B8               	movwf	convert_to_fp@res+3
  8048                           
  8049                           ;fixed_point.c: 19: res = res << 16;
  8050  0E70  0835               	movf	convert_to_fp@res,w
  8051  0E71  00A8               	movwf	??_convert_to_fp
  8052  0E72  0836               	movf	convert_to_fp@res+1,w
  8053  0E73  00A9               	movwf	??_convert_to_fp+1
  8054  0E74  0837               	movf	convert_to_fp@res+2,w
  8055  0E75  00AA               	movwf	??_convert_to_fp+2
  8056  0E76  0838               	movf	convert_to_fp@res+3,w
  8057  0E77  00AB               	movwf	??_convert_to_fp+3
  8058  0E78  3010               	movlw	16
  8059  0E79                     u4115:	
  8060  0E79  35A8               	lslf	??_convert_to_fp,f
  8061  0E7A  0DA9               	rlf	??_convert_to_fp+1,f
  8062  0E7B  0DAA               	rlf	??_convert_to_fp+2,f
  8063  0E7C  0DAB               	rlf	??_convert_to_fp+3,f
  8064  0E7D  0B89               	decfsz	9,f
  8065  0E7E  2E79               	goto	u4115
  8066  0E7F  082B               	movf	??_convert_to_fp+3,w
  8067  0E80  00B8               	movwf	convert_to_fp@res+3
  8068  0E81  082A               	movf	??_convert_to_fp+2,w
  8069  0E82  00B7               	movwf	convert_to_fp@res+2
  8070  0E83  0829               	movf	??_convert_to_fp+1,w
  8071  0E84  00B6               	movwf	convert_to_fp@res+1
  8072  0E85  0828               	movf	??_convert_to_fp,w
  8073  0E86  00B5               	movwf	convert_to_fp@res
  8074                           
  8075                           ;fixed_point.c: 21: unsigned short tmp_left = fract_part;
  8076  0E87  0827               	movf	convert_to_fp@fract_part+1,w
  8077  0E88  00B4               	movwf	convert_to_fp@tmp_left+1
  8078  0E89  0826               	movf	convert_to_fp@fract_part,w
  8079  0E8A  00B3               	movwf	convert_to_fp@tmp_left
  8080                           
  8081                           ;fixed_point.c: 22: unsigned short res_fract = 0;
  8082  0E8B  01B0               	clrf	convert_to_fp@res_fract
  8083  0E8C  01B1               	clrf	convert_to_fp@res_fract+1
  8084                           
  8085                           ;fixed_point.c: 23: const unsigned short one = 1;
  8086                           ;fixed_point.c: 24: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  8087  0E8D  01B2               	clrf	convert_to_fp@i_bit
  8088  0E8E  3010               	movlw	16
  8089  0E8F  0232               	subwf	convert_to_fp@i_bit,w
  8090  0E90  1803               	btfsc	3,0
  8091  0E91  2EC4               	goto	l400
  8092  0E92                     l3980:	
  8093                           
  8094                           ;fixed_point.c: 25: {
  8095                           ;fixed_point.c: 26: tmp_left = tmp_left << 1;
  8096  0E92  3533               	lslf	convert_to_fp@tmp_left,w
  8097  0E93  00B3               	movwf	convert_to_fp@tmp_left
  8098  0E94  0D34               	rlf	convert_to_fp@tmp_left+1,w
  8099  0E95  00B4               	movwf	convert_to_fp@tmp_left+1
  8100                           
  8101                           ;fixed_point.c: 27: if (tmp_left >= 10000)
  8102  0E96  3027               	movlw	39
  8103  0E97  0234               	subwf	convert_to_fp@tmp_left+1,w
  8104  0E98  3010               	movlw	16
  8105  0E99  1903               	skipnz
  8106  0E9A  0233               	subwf	convert_to_fp@tmp_left,w
  8107  0E9B  1C03               	skipc
  8108  0E9C  2EBC               	goto	l3986
  8109                           
  8110                           ;fixed_point.c: 28: {
  8111                           ;fixed_point.c: 29: res_fract = res_fract | one<<(16-i_bit-1);
  8112  0E9D  30D6               	movlw	low (convert_to_fp@one| (0+32768))
  8113  0E9E  0084               	movwf	4
  8114  0E9F  3087               	movlw	high (convert_to_fp@one| (0+32768))
  8115  0EA0  0085               	movwf	5
  8116  0EA1  3F00               	moviw [0]fsr0
  8117  0EA2  00A8               	movwf	??_convert_to_fp
  8118  0EA3  3F01               	moviw [1]fsr0
  8119  0EA4  00A9               	movwf	??_convert_to_fp+1
  8120  0EA5  0832               	movf	convert_to_fp@i_bit,w
  8121  0EA6  3E01               	addlw	1
  8122  0EA7  3AFF               	xorlw	255
  8123  0EA8  3E01               	addlw	1
  8124  0EA9  3E10               	addlw	16
  8125  0EAA  0A89               	incf	9,f
  8126  0EAB  2EAE               	goto	u4144
  8127  0EAC                     u4145:	
  8128  0EAC  35A8               	lslf	??_convert_to_fp,f
  8129  0EAD  0DA9               	rlf	??_convert_to_fp+1,f
  8130  0EAE                     u4144:	
  8131  0EAE  0B89               	decfsz	9,f
  8132  0EAF  2EAC               	goto	u4145
  8133  0EB0  0830               	movf	convert_to_fp@res_fract,w
  8134  0EB1  0428               	iorwf	??_convert_to_fp,w
  8135  0EB2  00B0               	movwf	convert_to_fp@res_fract
  8136  0EB3  0831               	movf	convert_to_fp@res_fract+1,w
  8137  0EB4  0429               	iorwf	??_convert_to_fp+1,w
  8138  0EB5  00B1               	movwf	convert_to_fp@res_fract+1
  8139                           
  8140                           ;fixed_point.c: 30: tmp_left = tmp_left - 10000;
  8141  0EB6  0833               	movf	convert_to_fp@tmp_left,w
  8142  0EB7  3EF0               	addlw	240
  8143  0EB8  00B3               	movwf	convert_to_fp@tmp_left
  8144  0EB9  30D8               	movlw	216
  8145  0EBA  3D34               	addwfc	convert_to_fp@tmp_left+1,w
  8146  0EBB  00B4               	movwf	convert_to_fp@tmp_left+1
  8147  0EBC                     l3986:	
  8148  0EBC  3001               	movlw	1
  8149  0EBD  00A8               	movwf	??_convert_to_fp
  8150  0EBE  0828               	movf	??_convert_to_fp,w
  8151  0EBF  07B2               	addwf	convert_to_fp@i_bit,f
  8152  0EC0  3010               	movlw	16
  8153  0EC1  0232               	subwf	convert_to_fp@i_bit,w
  8154  0EC2  1C03               	skipc
  8155  0EC3  2E92               	goto	l3980
  8156  0EC4                     l400:	
  8157                           
  8158                           ;fixed_point.c: 31: }
  8159                           ;fixed_point.c: 32: }
  8160                           ;fixed_point.c: 34: if (res < 0)
  8161  0EC4  1FB8               	btfss	convert_to_fp@res+3,7
  8162  0EC5  2EE0               	goto	l3992
  8163                           
  8164                           ;fixed_point.c: 35: res = res - res_fract;
  8165  0EC6  0835               	movf	convert_to_fp@res,w
  8166  0EC7  00A8               	movwf	??_convert_to_fp
  8167  0EC8  0836               	movf	convert_to_fp@res+1,w
  8168  0EC9  00A9               	movwf	??_convert_to_fp+1
  8169  0ECA  0837               	movf	convert_to_fp@res+2,w
  8170  0ECB  00AA               	movwf	??_convert_to_fp+2
  8171  0ECC  0838               	movf	convert_to_fp@res+3,w
  8172  0ECD  00AB               	movwf	??_convert_to_fp+3
  8173  0ECE  0830               	movf	convert_to_fp@res_fract,w
  8174  0ECF  00AC               	movwf	??_convert_to_fp+4
  8175  0ED0  0831               	movf	convert_to_fp@res_fract+1,w
  8176  0ED1  00AD               	movwf	??_convert_to_fp+5
  8177  0ED2  01AE               	clrf	??_convert_to_fp+6
  8178  0ED3  01AF               	clrf	??_convert_to_fp+7
  8179  0ED4  09AC               	comf	??_convert_to_fp+4,f
  8180  0ED5  09AD               	comf	??_convert_to_fp+5,f
  8181  0ED6  09AE               	comf	??_convert_to_fp+6,f
  8182  0ED7  09AF               	comf	??_convert_to_fp+7,f
  8183  0ED8  0AAC               	incf	??_convert_to_fp+4,f
  8184  0ED9  1903               	skipnz
  8185  0EDA  0AAD               	incf	??_convert_to_fp+5,f
  8186  0EDB  1903               	skipnz
  8187  0EDC  0AAE               	incf	??_convert_to_fp+6,f
  8188  0EDD  1903               	skipnz
  8189  0EDE  0AAF               	incf	??_convert_to_fp+7,f
  8190  0EDF  2EEE               	goto	L8
  8191  0EE0                     l3992:	
  8192                           
  8193                           ;fixed_point.c: 36: else
  8194                           ;fixed_point.c: 37: res = res + res_fract;
  8195  0EE0  0835               	movf	convert_to_fp@res,w
  8196  0EE1  00A8               	movwf	??_convert_to_fp
  8197  0EE2  0836               	movf	convert_to_fp@res+1,w
  8198  0EE3  00A9               	movwf	??_convert_to_fp+1
  8199  0EE4  0837               	movf	convert_to_fp@res+2,w
  8200  0EE5  00AA               	movwf	??_convert_to_fp+2
  8201  0EE6  0838               	movf	convert_to_fp@res+3,w
  8202  0EE7  00AB               	movwf	??_convert_to_fp+3
  8203  0EE8  0830               	movf	convert_to_fp@res_fract,w
  8204  0EE9  00AC               	movwf	??_convert_to_fp+4
  8205  0EEA  0831               	movf	convert_to_fp@res_fract+1,w
  8206  0EEB  00AD               	movwf	??_convert_to_fp+5
  8207  0EEC  01AE               	clrf	??_convert_to_fp+6
  8208  0EED  01AF               	clrf	??_convert_to_fp+7
  8209  0EEE                     L8:	
  8210  0EEE  082C               	movf	??_convert_to_fp+4,w
  8211  0EEF  07A8               	addwf	??_convert_to_fp,f
  8212  0EF0  082D               	movf	??_convert_to_fp+5,w
  8213  0EF1  3DA9               	addwfc	??_convert_to_fp+1,f
  8214  0EF2  082E               	movf	??_convert_to_fp+6,w
  8215  0EF3  3DAA               	addwfc	??_convert_to_fp+2,f
  8216  0EF4  082F               	movf	??_convert_to_fp+7,w
  8217  0EF5  3DAB               	addwfc	??_convert_to_fp+3,f
  8218  0EF6  082B               	movf	??_convert_to_fp+3,w
  8219  0EF7  00B8               	movwf	convert_to_fp@res+3
  8220  0EF8  082A               	movf	??_convert_to_fp+2,w
  8221  0EF9  00B7               	movwf	convert_to_fp@res+2
  8222  0EFA  0829               	movf	??_convert_to_fp+1,w
  8223  0EFB  00B6               	movwf	convert_to_fp@res+1
  8224  0EFC  0828               	movf	??_convert_to_fp,w
  8225  0EFD  00B5               	movwf	convert_to_fp@res
  8226                           
  8227                           ;fixed_point.c: 38: return res;
  8228  0EFE  0838               	movf	convert_to_fp@res+3,w
  8229  0EFF  00A7               	movwf	?_convert_to_fp+3
  8230  0F00  0837               	movf	convert_to_fp@res+2,w
  8231  0F01  00A6               	movwf	?_convert_to_fp+2
  8232  0F02  0836               	movf	convert_to_fp@res+1,w
  8233  0F03  00A5               	movwf	?_convert_to_fp+1
  8234  0F04  0835               	movf	convert_to_fp@res,w
  8235  0F05  00A4               	movwf	?_convert_to_fp
  8236  0F06  0008               	return
  8237  0F07                     __end_of_convert_to_fp:	
  8238                           
  8239                           	psect	text26
  8240  0A92                     __ptext26:	
  8241 ;; *************** function ___wmul *****************
  8242 ;; Defined at:
  8243 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8246 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  product         2    4[COMMON] unsigned int 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  2    0[BANK0 ] unsigned int 
  8251 ;; Registers used:
  8252 ;;		wreg, status,2, status,0
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8258 ;;      Params:         0       4       0       0       0       0
  8259 ;;      Locals:         2       0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0
  8261 ;;      Totals:         2       4       0       0       0       0
  8262 ;;Total ram usage:        6 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    6
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_main
  8269 ;;		_GPS_read_speed
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function ___wmul
  8275  0A92                     ___wmul:	
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8279  0A92  01F4               	clrf	___wmul@product
  8280  0A93  01F5               	clrf	___wmul@product+1
  8281  0A94                     l4034:	
  8282  0A94  0020               	movlb	0	; select bank0
  8283  0A95  1C20               	btfss	___wmul@multiplier,0
  8284  0A96  2A9B               	goto	l832
  8285  0A97  0822               	movf	___wmul@multiplicand,w
  8286  0A98  07F4               	addwf	___wmul@product,f
  8287  0A99  0823               	movf	___wmul@multiplicand+1,w
  8288  0A9A  3DF5               	addwfc	___wmul@product+1,f
  8289  0A9B                     l832:	
  8290  0A9B  3001               	movlw	1
  8291  0A9C                     u4215:	
  8292  0A9C  35A2               	lslf	___wmul@multiplicand,f
  8293  0A9D  0DA3               	rlf	___wmul@multiplicand+1,f
  8294  0A9E  0B89               	decfsz	9,f
  8295  0A9F  2A9C               	goto	u4215
  8296  0AA0  3001               	movlw	1
  8297  0AA1                     u4225:	
  8298  0AA1  36A1               	lsrf	___wmul@multiplier+1,f
  8299  0AA2  0CA0               	rrf	___wmul@multiplier,f
  8300  0AA3  0B89               	decfsz	9,f
  8301  0AA4  2AA1               	goto	u4225
  8302  0AA5  0820               	movf	___wmul@multiplier,w
  8303  0AA6  0421               	iorwf	___wmul@multiplier+1,w
  8304  0AA7  1D03               	btfss	3,2
  8305  0AA8  2A94               	goto	l4034
  8306  0AA9  0875               	movf	___wmul@product+1,w
  8307  0AAA  00A1               	movwf	?___wmul+1
  8308  0AAB  0874               	movf	___wmul@product,w
  8309  0AAC  00A0               	movwf	?___wmul
  8310  0AAD  0008               	return
  8311  0AAE                     __end_of___wmul:	
  8312                           
  8313                           	psect	text27
  8314  0B04                     __ptext27:	
  8315 ;; *************** function _EUSART_Read *****************
  8316 ;; Defined at:
  8317 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;  readValue       1    5[COMMON] unsigned char 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      unsigned char 
  8324 ;; Registers used:
  8325 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8331 ;;      Params:         0       0       0       0       0       0
  8332 ;;      Locals:         1       0       0       0       0       0
  8333 ;;      Temps:          1       0       0       0       0       0
  8334 ;;      Totals:         2       0       0       0       0       0
  8335 ;;Total ram usage:        2 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    6
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_GPS_read_speed
  8342 ;;		_getch
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           
  8347                           ;psect for function _EUSART_Read
  8348  0B04                     _EUSART_Read:	
  8349                           
  8350                           ;eusart.c: 114: uint8_t readValue = 0;
  8351                           
  8352                           ;incstack = 0
  8353                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8354  0B04  01F5               	clrf	EUSART_Read@readValue
  8355                           
  8356                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  8357  0B05  0023               	movlb	3	; select bank3
  8358  0B06  169D               	bsf	29,5	;volatile
  8359  0B07                     l3898:	
  8360                           ;eusart.c: 120: {
  8361                           
  8362                           ;eusart.c: 119: while(0 == eusartRxCount)
  8363                           
  8364  0B07  0878               	movf	_eusartRxCount,w	;volatile
  8365  0B08  1903               	btfsc	3,2
  8366  0B09  2B07               	goto	l3898
  8367                           
  8368                           ;eusart.c: 121: }
  8369                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  8370  0B0A  0021               	movlb	1	; select bank1
  8371  0B0B  1291               	bcf	17,5	;volatile
  8372                           
  8373                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  8374  0B0C  083B               	movf	_eusartRxTail^(0+128),w
  8375  0B0D  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8376  0B0E  0086               	movwf	6
  8377  0B0F  0187               	clrf	7
  8378  0B10  0801               	movf	1,w
  8379  0B11  00F4               	movwf	??_EUSART_Read
  8380  0B12  0874               	movf	??_EUSART_Read,w
  8381  0B13  00F5               	movwf	EUSART_Read@readValue
  8382  0B14  3001               	movlw	1
  8383  0B15  00F4               	movwf	??_EUSART_Read
  8384  0B16  0874               	movf	??_EUSART_Read,w
  8385  0B17  07BB               	addwf	_eusartRxTail^(0+128),f
  8386                           
  8387                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8388  0B18  3008               	movlw	8
  8389  0B19  023B               	subwf	_eusartRxTail^(0+128),w
  8390  0B1A  1803               	btfsc	3,0
  8391                           
  8392                           ;eusart.c: 127: {
  8393                           ;eusart.c: 128: eusartRxTail = 0;
  8394  0B1B  01BB               	clrf	_eusartRxTail^(0+128)
  8395                           
  8396                           ;eusart.c: 129: }
  8397                           ;eusart.c: 130: eusartRxCount--;
  8398  0B1C  3001               	movlw	1
  8399  0B1D  02F8               	subwf	_eusartRxCount,f	;volatile
  8400                           
  8401                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  8402  0B1E  1691               	bsf	17,5	;volatile
  8403                           
  8404                           ;eusart.c: 133: return readValue;
  8405  0B1F  0875               	movf	EUSART_Read@readValue,w
  8406  0B20  0008               	return
  8407  0B21                     __end_of_EUSART_Read:	
  8408                           
  8409                           	psect	text28
  8410  0BD8                     __ptext28:	
  8411 ;; *************** function _GPS_Initialize *****************
  8412 ;; Defined at:
  8413 ;;		line 13 in file "GPS.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;		None
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  __delay_tmp     1   11[BANK0 ] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      void 
  8420 ;; Registers used:
  8421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8427 ;;      Params:         0       0       0       0       0       0
  8428 ;;      Locals:         0       1       0       0       0       0
  8429 ;;      Temps:          0       3       0       0       0       0
  8430 ;;      Totals:         0       4       0       0       0       0
  8431 ;;Total ram usage:        4 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    9
  8434 ;; This function calls:
  8435 ;;		_printf
  8436 ;; This function is called by:
  8437 ;;		_main
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           
  8442                           ;psect for function _GPS_Initialize
  8443  0BD8                     _GPS_Initialize:	
  8444                           
  8445                           ;GPS.c: 15: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((un
      +                          signed long)((100)*(32000000/4000.0)));};
  8446                           
  8447                           ;incstack = 0
  8448                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8449  0BD8  0020               	movlb	0	; select bank0
  8450  0BD9  01AB               	clrf	GPS_Initialize@__delay_tmp
  8451  0BDA  300A               	movlw	10
  8452  0BDB  022B               	subwf	GPS_Initialize@__delay_tmp,w
  8453  0BDC  1803               	btfsc	3,0
  8454  0BDD  2BF3               	goto	l4312
  8455  0BDE                     l4306:	
  8456  0BDE  3005               	movlw	5
  8457  0BDF  00AA               	movwf	??_GPS_Initialize+2
  8458  0BE0  300F               	movlw	15
  8459  0BE1  00A9               	movwf	??_GPS_Initialize+1
  8460  0BE2  30F4               	movlw	244
  8461  0BE3  00A8               	movwf	??_GPS_Initialize
  8462  0BE4                     u5777:	
  8463  0BE4  0BA8               	decfsz	??_GPS_Initialize,f
  8464  0BE5  2BE4               	goto	u5777
  8465  0BE6  0BA9               	decfsz	??_GPS_Initialize+1,f
  8466  0BE7  2BE4               	goto	u5777
  8467  0BE8  0BAA               	decfsz	??_GPS_Initialize+2,f
  8468  0BE9  2BE4               	goto	u5777
  8469  0BEA  3001               	movlw	1
  8470  0BEB  0020               	movlb	0	; select bank0
  8471  0BEC  00A8               	movwf	??_GPS_Initialize
  8472  0BED  0828               	movf	??_GPS_Initialize,w
  8473  0BEE  07AB               	addwf	GPS_Initialize@__delay_tmp,f
  8474  0BEF  300A               	movlw	10
  8475  0BF0  022B               	subwf	GPS_Initialize@__delay_tmp,w
  8476  0BF1  1C03               	skipc
  8477  0BF2  2BDE               	goto	l4306
  8478  0BF3                     l4312:	
  8479                           
  8480                           ;GPS.c: 17: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  8481  0BF3  30D8               	movlw	low (STR_1| (0+32768))
  8482  0BF4  00A1               	movwf	printf@f
  8483  0BF5  3087               	movlw	high (STR_1| (0+32768))
  8484  0BF6  00A2               	movwf	printf@f+1
  8485  0BF7  318A  22E7  318B   	fcall	_printf
  8486                           
  8487                           ;GPS.c: 18: _delay((unsigned long)((100)*(32000000/4000.0)));
  8488  0BFA  3005               	movlw	5
  8489  0BFB  0020               	movlb	0	; select bank0
  8490  0BFC  00AA               	movwf	??_GPS_Initialize+2
  8491  0BFD  300F               	movlw	15
  8492  0BFE  00A9               	movwf	??_GPS_Initialize+1
  8493  0BFF  30F4               	movlw	244
  8494  0C00  00A8               	movwf	??_GPS_Initialize
  8495  0C01                     u5787:	
  8496  0C01  0BA8               	decfsz	??_GPS_Initialize,f
  8497  0C02  2C01               	goto	u5787
  8498  0C03  0BA9               	decfsz	??_GPS_Initialize+1,f
  8499  0C04  2C01               	goto	u5787
  8500  0C05  0BAA               	decfsz	??_GPS_Initialize+2,f
  8501  0C06  2C01               	goto	u5787
  8502                           
  8503                           ;GPS.c: 20: printf("$PMTK220,100*2F\r\n");
  8504  0C07  300C               	movlw	low (STR_2| (0+32768))
  8505  0C08  0020               	movlb	0	; select bank0
  8506  0C09  00A1               	movwf	printf@f
  8507  0C0A  3088               	movlw	high (STR_2| (0+32768))
  8508  0C0B  00A2               	movwf	printf@f+1
  8509  0C0C  318A  22E7  318B   	fcall	_printf
  8510                           
  8511                           ;GPS.c: 21: _delay((unsigned long)((100)*(32000000/4000.0)));
  8512  0C0F  3005               	movlw	5
  8513  0C10  0020               	movlb	0	; select bank0
  8514  0C11  00AA               	movwf	??_GPS_Initialize+2
  8515  0C12  300F               	movlw	15
  8516  0C13  00A9               	movwf	??_GPS_Initialize+1
  8517  0C14  30F4               	movlw	244
  8518  0C15  00A8               	movwf	??_GPS_Initialize
  8519  0C16                     u5797:	
  8520  0C16  0BA8               	decfsz	??_GPS_Initialize,f
  8521  0C17  2C16               	goto	u5797
  8522  0C18  0BA9               	decfsz	??_GPS_Initialize+1,f
  8523  0C19  2C16               	goto	u5797
  8524  0C1A  0BAA               	decfsz	??_GPS_Initialize+2,f
  8525  0C1B  2C16               	goto	u5797
  8526  0C1C  0008               	return
  8527  0C1D                     __end_of_GPS_Initialize:	
  8528                           
  8529                           	psect	text29
  8530  0AE7                     __ptext29:	
  8531 ;; *************** function _printf *****************
  8532 ;; Defined at:
  8533 ;;		line 464 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  8536 ;;		 -> STR_2(18), STR_1(52), 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  tmpval          4    0        struct .
  8539 ;;  cp              2    0        PTR const unsigned char 
  8540 ;;  len             2    0        unsigned int 
  8541 ;;  val             2    0        unsigned int 
  8542 ;;  c               1    7[BANK0 ] char 
  8543 ;;  ap              1    6[BANK0 ] PTR void [1]
  8544 ;;		 -> ?_printf(2), 
  8545 ;;  flag            1    0        unsigned char 
  8546 ;;  prec            1    0        char 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  2    1[BANK0 ] int 
  8549 ;; Registers used:
  8550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8556 ;;      Params:         0       2       0       0       0       0
  8557 ;;      Locals:         0       2       0       0       0       0
  8558 ;;      Temps:          0       3       0       0       0       0
  8559 ;;      Totals:         0       7       0       0       0       0
  8560 ;;Total ram usage:        7 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    8
  8563 ;; This function calls:
  8564 ;;		_putch
  8565 ;; This function is called by:
  8566 ;;		_GPS_Initialize
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           
  8571                           ;psect for function _printf
  8572  0AE7                     _printf:	
  8573                           
  8574                           ;doprnt.c: 466: va_list ap;
  8575                           ;doprnt.c: 499: signed char c;
  8576                           ;doprnt.c: 506: signed char prec;
  8577                           ;doprnt.c: 508: unsigned char flag;
  8578                           ;doprnt.c: 523: union {
  8579                           ;doprnt.c: 524: unsigned long vd;
  8580                           ;doprnt.c: 525: double integ;
  8581                           ;doprnt.c: 526: } tmpval;
  8582                           ;doprnt.c: 528: unsigned int val;
  8583                           ;doprnt.c: 529: unsigned len;
  8584                           ;doprnt.c: 530: const char * cp;
  8585                           ;doprnt.c: 533: *ap = __va_start();
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8589  0AE7  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8590  0AE8  0020               	movlb	0	; select bank0
  8591  0AE9  00A3               	movwf	??_printf
  8592  0AEA  0823               	movf	??_printf,w
  8593  0AEB  00A6               	movwf	printf@ap
  8594  0AEC                     l4022:	
  8595                           ;doprnt.c: 543: }
  8596                           ;doprnt.c: 1422: {
  8597                           
  8598                           ;doprnt.c: 542: continue;
  8599                           
  8600                           ;doprnt.c: 536: while(c = *f++) {
  8601                           
  8602  0AEC  0020               	movlb	0	; select bank0
  8603  0AED  0822               	movf	printf@f+1,w
  8604  0AEE  00A4               	movwf	??_printf+1
  8605  0AEF  0821               	movf	printf@f,w
  8606  0AF0  00A3               	movwf	??_printf
  8607  0AF1  0AA1               	incf	printf@f,f
  8608  0AF2  1903               	skipnz
  8609  0AF3  0AA2               	incf	printf@f+1,f
  8610  0AF4  0823               	movf	??_printf,w
  8611  0AF5  0084               	movwf	4
  8612  0AF6  0824               	movf	??_printf+1,w
  8613  0AF7  0085               	movwf	5
  8614  0AF8  0800               	movf	0,w	;code access
  8615  0AF9  00A5               	movwf	??_printf+2
  8616  0AFA  0825               	movf	??_printf+2,w
  8617  0AFB  00A7               	movwf	printf@c
  8618  0AFC  0827               	movf	printf@c,w
  8619  0AFD  1903               	btfsc	3,2
  8620  0AFE  0008               	return
  8621                           
  8622                           ;doprnt.c: 540: {
  8623                           ;doprnt.c: 541: (putch(c) );
  8624  0AFF  0827               	movf	printf@c,w
  8625  0B00  3189  219A  318A   	fcall	_putch
  8626  0B03  2AEC               	goto	l4022
  8627  0B04                     __end_of_printf:	
  8628                           ;doprnt.c: 1469: }
  8629                           ;doprnt.c: 1533: }
  8630                           ;doprnt.c: 1540: return 0;
  8631                           ;	Return value of _printf is never used
  8632                           
  8633                           
  8634                           	psect	text30
  8635  099A                     __ptext30:	
  8636 ;; *************** function _putch *****************
  8637 ;; Defined at:
  8638 ;;		line 164 in file "mcc_generated_files/eusart.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;  txData          1    wreg     unsigned char 
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  txData          1    0[BANK0 ] unsigned char 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8652 ;;      Params:         0       0       0       0       0       0
  8653 ;;      Locals:         0       1       0       0       0       0
  8654 ;;      Temps:          0       0       0       0       0       0
  8655 ;;      Totals:         0       1       0       0       0       0
  8656 ;;Total ram usage:        1 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    7
  8659 ;; This function calls:
  8660 ;;		_EUSART_Write
  8661 ;; This function is called by:
  8662 ;;		_printf
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           
  8667                           ;psect for function _putch
  8668  099A                     _putch:	
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8672                           ;putch@txData stored from wreg
  8673  099A  0020               	movlb	0	; select bank0
  8674  099B  00A0               	movwf	putch@txData
  8675                           
  8676                           ;eusart.c: 166: EUSART_Write(txData);
  8677  099C  0820               	movf	putch@txData,w
  8678  099D  318B  235F         	fcall	_EUSART_Write
  8679  099F  0008               	return
  8680  09A0                     __end_of_putch:	
  8681                           
  8682                           	psect	text31
  8683  0B5F                     __ptext31:	
  8684 ;; *************** function _EUSART_Write *****************
  8685 ;; Defined at:
  8686 ;;		line 136 in file "mcc_generated_files/eusart.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;  txData          1    wreg     unsigned char 
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  txData          1    5[COMMON] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8700 ;;      Params:         0       0       0       0       0       0
  8701 ;;      Locals:         1       0       0       0       0       0
  8702 ;;      Temps:          1       0       0       0       0       0
  8703 ;;      Totals:         2       0       0       0       0       0
  8704 ;;Total ram usage:        2 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    6
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_putch
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           
  8715                           ;psect for function _EUSART_Write
  8716  0B5F                     _EUSART_Write:	
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8720                           ;EUSART_Write@txData stored from wreg
  8721  0B5F  00F5               	movwf	EUSART_Write@txData
  8722  0B60                     l3776:	
  8723                           ;eusart.c: 139: {
  8724                           
  8725                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  8726                           
  8727  0B60  0020               	movlb	0	; select bank0
  8728  0B61  085B               	movf	_eusartTxBufferRemaining,w	;volatile
  8729  0B62  1903               	btfsc	3,2
  8730  0B63  2B60               	goto	l3776
  8731                           
  8732                           ;eusart.c: 140: }
  8733                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  8734  0B64  0021               	movlb	1	; select bank1
  8735  0B65  1A11               	btfsc	17,4	;volatile
  8736  0B66  2B6B               	goto	l171
  8737                           
  8738                           ;eusart.c: 143: {
  8739                           ;eusart.c: 144: TXREG = txData;
  8740  0B67  0875               	movf	EUSART_Write@txData,w
  8741  0B68  0023               	movlb	3	; select bank3
  8742  0B69  009A               	movwf	26	;volatile
  8743                           
  8744                           ;eusart.c: 145: }
  8745  0B6A  2B7F               	goto	l3790
  8746  0B6B                     l171:	
  8747                           
  8748                           ;eusart.c: 146: else
  8749                           ;eusart.c: 147: {
  8750                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  8751  0B6B  1211               	bcf	17,4	;volatile
  8752                           
  8753                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  8754  0B6C  0875               	movf	EUSART_Write@txData,w
  8755  0B6D  00F4               	movwf	??_EUSART_Write
  8756  0B6E  0020               	movlb	0	; select bank0
  8757  0B6F  085C               	movf	_eusartTxHead,w
  8758  0B70  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8759  0B71  0086               	movwf	6
  8760  0B72  0187               	clrf	7
  8761  0B73  0874               	movf	??_EUSART_Write,w
  8762  0B74  0081               	movwf	1
  8763  0B75  3001               	movlw	1
  8764  0B76  00F4               	movwf	??_EUSART_Write
  8765  0B77  0874               	movf	??_EUSART_Write,w
  8766  0B78  07DC               	addwf	_eusartTxHead,f
  8767                           
  8768                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8769  0B79  3008               	movlw	8
  8770  0B7A  025C               	subwf	_eusartTxHead,w
  8771  0B7B  1803               	btfsc	3,0
  8772                           
  8773                           ;eusart.c: 151: {
  8774                           ;eusart.c: 152: eusartTxHead = 0;
  8775  0B7C  01DC               	clrf	_eusartTxHead
  8776                           
  8777                           ;eusart.c: 153: }
  8778                           ;eusart.c: 154: eusartTxBufferRemaining--;
  8779  0B7D  3001               	movlw	1
  8780  0B7E  02DB               	subwf	_eusartTxBufferRemaining,f	;volatile
  8781  0B7F                     l3790:	
  8782                           
  8783                           ;eusart.c: 155: }
  8784                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  8785  0B7F  0021               	movlb	1	; select bank1
  8786  0B80  1611               	bsf	17,4	;volatile
  8787  0B81  0008               	return
  8788  0B82                     __end_of_EUSART_Write:	
  8789                           
  8790                           	psect	intentry
  8791  0004                     __pintentry:	
  8792 ;; *************** function _INTERRUPT_InterruptManager *****************
  8793 ;; Defined at:
  8794 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8808 ;;      Params:         0       0       0       0       0       0
  8809 ;;      Locals:         0       0       0       0       0       0
  8810 ;;      Temps:          1       0       0       0       0       0
  8811 ;;      Totals:         1       0       0       0       0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    5
  8815 ;; This function calls:
  8816 ;;		_EUSART_Receive_ISR
  8817 ;;		_EUSART_Transmit_ISR
  8818 ;;		_TMR0_ISR
  8819 ;; This function is called by:
  8820 ;;		Interrupt level 1
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824  0004                     _INTERRUPT_InterruptManager:	
  8825                           
  8826                           ;incstack = 0
  8827  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8828                           
  8829                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8830  0005  3180               	pagesel	$
  8831  0006  0020               	movlb	0	; select bank0
  8832  0007  087F               	movf	127,w
  8833  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  8834                           
  8835                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  8836  0009  1A8B               	btfsc	11,5	;volatile
  8837  000A  1D0B               	btfss	11,2	;volatile
  8838  000B  280F               	goto	i1l3596
  8839                           
  8840                           ;interrupt_manager.c: 55: {
  8841                           ;interrupt_manager.c: 56: TMR0_ISR();
  8842  000C  318A  222F  3180   	fcall	_TMR0_ISR
  8843  000F                     i1l3596:	
  8844                           
  8845                           ;interrupt_manager.c: 57: }
  8846                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  8847  000F  1F0B               	btfss	11,6	;volatile
  8848  0010  281A               	goto	i1l3604
  8849  0011  0021               	movlb	1	; select bank1
  8850  0012  1E11               	btfss	17,4	;volatile
  8851  0013  281A               	goto	i1l3604
  8852  0014  0020               	movlb	0	; select bank0
  8853  0015  1E11               	btfss	17,4	;volatile
  8854  0016  281A               	goto	i1l3604
  8855                           
  8856                           ;interrupt_manager.c: 59: {
  8857                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  8858  0017  318A  22CA  3180   	fcall	_EUSART_Transmit_ISR
  8859  001A                     i1l3604:	
  8860                           
  8861                           ;interrupt_manager.c: 61: }
  8862                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  8863  001A  1F0B               	btfss	11,6	;volatile
  8864  001B  2824               	goto	i1l77
  8865  001C  0021               	movlb	1	; select bank1
  8866  001D  1E91               	btfss	17,5	;volatile
  8867  001E  2824               	goto	i1l77
  8868  001F  0020               	movlb	0	; select bank0
  8869  0020  1E91               	btfss	17,5	;volatile
  8870  0021  2824               	goto	i1l77
  8871                           
  8872                           ;interrupt_manager.c: 63: {
  8873                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  8874  0022  318A  225C         	fcall	_EUSART_Receive_ISR
  8875  0024                     i1l77:	
  8876                           ;interrupt_manager.c: 66: else
  8877                           ;interrupt_manager.c: 67: {
  8878                           
  8879                           ;interrupt_manager.c: 65: }
  8880                           
  8881  0024  0873               	movf	??_INTERRUPT_InterruptManager,w
  8882  0025  0020               	movlb	0	; select bank0
  8883  0026  00FF               	movwf	127
  8884  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8885  0028  0009               	retfie
  8886  0029                     __end_of_INTERRUPT_InterruptManager:	
  8887                           
  8888                           	psect	text33
  8889  0A2F                     __ptext33:	
  8890 ;; *************** function _TMR0_ISR *****************
  8891 ;; Defined at:
  8892 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;		None
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  1    wreg      void 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0, pclath, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8906 ;;      Params:         0       0       0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0
  8909 ;;      Totals:         0       0       0       0       0       0
  8910 ;;Total ram usage:        0 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    4
  8913 ;; This function calls:
  8914 ;;		_TMR0_CallBack
  8915 ;; This function is called by:
  8916 ;;		_INTERRUPT_InterruptManager
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _TMR0_ISR
  8922  0A2F                     _TMR0_ISR:	
  8923                           
  8924                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  8925                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  8929  0A2F  110B               	bcf	11,2	;volatile
  8930                           
  8931                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  8932  0A30  0879               	movf	_timer0ReloadVal,w	;volatile
  8933  0A31  0020               	movlb	0	; select bank0
  8934  0A32  0095               	movwf	21	;volatile
  8935                           
  8936                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  8937  0A33  3001               	movlw	1
  8938  0A34  0021               	movlb	1	; select bank1
  8939  0A35  07B4               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
  8940  0A36  3000               	movlw	0
  8941  0A37  3DB5               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
  8942  0A38  3000               	movlw	0
  8943  0A39  0235               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
  8944  0A3A  3002               	movlw	2
  8945  0A3B  1903               	skipnz
  8946  0A3C  0234               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
  8947  0A3D  1C03               	skipc
  8948  0A3E  0008               	return
  8949                           
  8950                           ;tmr0.c: 119: {
  8951                           ;tmr0.c: 121: TMR0_CallBack();
  8952  0A3F  3189  21BE         	fcall	_TMR0_CallBack
  8953                           
  8954                           ;tmr0.c: 124: CountCallBack = 0;
  8955  0A41  0021               	movlb	1	; select bank1
  8956  0A42  01B4               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
  8957  0A43  01B5               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
  8958  0A44  0008               	return
  8959  0A45                     __end_of_TMR0_ISR:	
  8960                           
  8961                           	psect	text34
  8962  09BE                     __ptext34:	
  8963 ;; *************** function _TMR0_CallBack *****************
  8964 ;; Defined at:
  8965 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;		None
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;		None
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  1    wreg      void 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0, pclath, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8979 ;;      Params:         0       0       0       0       0       0
  8980 ;;      Locals:         0       0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0
  8982 ;;      Totals:         0       0       0       0       0       0
  8983 ;;Total ram usage:        0 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    3
  8986 ;; This function calls:
  8987 ;;		Absolute function
  8988 ;;		_TMR0_DefaultInterruptHandler
  8989 ;;		_my10msTimerISR
  8990 ;; This function is called by:
  8991 ;;		_TMR0_ISR
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           
  8996                           ;psect for function _TMR0_CallBack
  8997  09BE                     _TMR0_CallBack:	
  8998                           
  8999                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  9000                           
  9001                           ;incstack = 0
  9002                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  9003  09BE  0021               	movlb	1	; select bank1
  9004  09BF  0836               	movf	_TMR0_InterruptHandler^(0+128),w
  9005  09C0  0437               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  9006  09C1  1903               	btfsc	3,2
  9007  09C2  0008               	return
  9008                           
  9009                           ;tmr0.c: 135: {
  9010                           ;tmr0.c: 136: TMR0_InterruptHandler();
  9011  09C3  0837               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  9012  09C4  008A               	movwf	10
  9013  09C5  0836               	movf	_TMR0_InterruptHandler^(0+128),w
  9014  09C6  000A               	callw
  9015  09C7  3189               	pagesel	$
  9016  09C8  0008               	return
  9017  09C9                     __end_of_TMR0_CallBack:	
  9018                           
  9019                           	psect	text35
  9020  0003                     __ptext35:	
  9021 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  9022 ;; Defined at:
  9023 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;		None
  9026 ;; Auto vars:     Size  Location     Type
  9027 ;;		None
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  1    wreg      void 
  9030 ;; Registers used:
  9031 ;;		None
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9037 ;;      Params:         0       0       0       0       0       0
  9038 ;;      Locals:         0       0       0       0       0       0
  9039 ;;      Temps:          0       0       0       0       0       0
  9040 ;;      Totals:         0       0       0       0       0       0
  9041 ;;Total ram usage:        0 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_TMR0_Initialize
  9047 ;;		_TMR0_CallBack
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           
  9052                           ;psect for function _TMR0_DefaultInterruptHandler
  9053  0003                     _TMR0_DefaultInterruptHandler:	
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  9057  0003  0008               	return
  9058  0004                     __end_of_TMR0_DefaultInterruptHandler:	
  9059                           
  9060                           	psect	text36
  9061  0994                     __ptext36:	
  9062 ;; *************** function _my10msTimerISR *****************
  9063 ;; Defined at:
  9064 ;;		line 186 in file "main.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;		None
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  1    wreg      void 
  9071 ;; Registers used:
  9072 ;;		wreg, status,2, status,0, pclath, cstack
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9078 ;;      Params:         0       0       0       0       0       0
  9079 ;;      Locals:         0       0       0       0       0       0
  9080 ;;      Temps:          0       0       0       0       0       0
  9081 ;;      Totals:         0       0       0       0       0       0
  9082 ;;Total ram usage:        0 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    2
  9085 ;; This function calls:
  9086 ;;		_LED_update_loop
  9087 ;;		_button_update_loop
  9088 ;; This function is called by:
  9089 ;;		_main
  9090 ;;		_TMR0_CallBack
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           
  9095                           ;psect for function _my10msTimerISR
  9096  0994                     _my10msTimerISR:	
  9097                           
  9098                           ;main.c: 188: LED_update_loop();
  9099                           
  9100                           ;incstack = 0
  9101                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  9102  0994  318B  2382  3189   	fcall	_LED_update_loop
  9103                           
  9104                           ;main.c: 189: button_update_loop();
  9105  0997  318C  24BE         	fcall	_button_update_loop
  9106  0999  0008               	return
  9107  099A                     __end_of_my10msTimerISR:	
  9108                           
  9109                           	psect	text37
  9110  0CBE                     __ptext37:	
  9111 ;; *************** function _button_update_loop *****************
  9112 ;; Defined at:
  9113 ;;		line 89 in file "interact.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;		None
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  current_stat    1    2[COMMON] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      void 
  9120 ;; Registers used:
  9121 ;;		wreg, status,2, status,0, pclath, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9127 ;;      Params:         0       0       0       0       0       0
  9128 ;;      Locals:         1       0       0       0       0       0
  9129 ;;      Temps:          1       0       0       0       0       0
  9130 ;;      Totals:         2       0       0       0       0       0
  9131 ;;Total ram usage:        2 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    1
  9134 ;; This function calls:
  9135 ;;		i1_get_button_state
  9136 ;; This function is called by:
  9137 ;;		_my10msTimerISR
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           
  9142                           ;psect for function _button_update_loop
  9143  0CBE                     _button_update_loop:	
  9144                           
  9145                           ;interact.c: 91: unsigned char current_state = get_button_state();
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  9149  0CBE  3189  21C9  318C   	fcall	i1_get_button_state
  9150  0CC1  00F1               	movwf	??_button_update_loop
  9151  0CC2  0871               	movf	??_button_update_loop,w
  9152  0CC3  00F2               	movwf	button_update_loop@current_state
  9153                           
  9154                           ;interact.c: 92: if (!m_button.push_confirmed)
  9155  0CC4  0020               	movlb	0	; select bank0
  9156  0CC5  0857               	movf	_m_button+3,w	;volatile
  9157  0CC6  1D03               	btfss	3,2
  9158  0CC7  2CE2               	goto	i1l2640
  9159                           
  9160                           ;interact.c: 93: {
  9161                           ;interact.c: 95: if (current_state != m_button.last_state)
  9162  0CC8  0859               	movf	_m_button+5,w	;volatile
  9163  0CC9  0672               	xorwf	button_update_loop@current_state,w
  9164  0CCA  1903               	skipnz
  9165  0CCB  2CD2               	goto	i1l2632
  9166                           
  9167                           ;interact.c: 96: {
  9168                           ;interact.c: 97: m_button.count_pressed = 0;
  9169  0CCC  01D5               	clrf	_m_button+1	;volatile
  9170                           
  9171                           ;interact.c: 98: m_button.last_state = current_state;
  9172  0CCD  0872               	movf	button_update_loop@current_state,w
  9173  0CCE  00F1               	movwf	??_button_update_loop
  9174  0CCF  0871               	movf	??_button_update_loop,w
  9175  0CD0  00D9               	movwf	_m_button+5	;volatile
  9176                           
  9177                           ;interact.c: 99: }
  9178  0CD1  0008               	return
  9179  0CD2                     i1l2632:	
  9180                           
  9181                           ;interact.c: 100: else if (m_button.last_state == 1)
  9182  0CD2  0359               	decf	_m_button+5,w	;volatile
  9183  0CD3  1D03               	btfss	3,2
  9184  0CD4  0008               	return
  9185                           
  9186                           ;interact.c: 101: {
  9187                           ;interact.c: 102: m_button.count_pressed++;
  9188  0CD5  3001               	movlw	1
  9189  0CD6  00F1               	movwf	??_button_update_loop
  9190  0CD7  0871               	movf	??_button_update_loop,w
  9191  0CD8  07D5               	addwf	_m_button+1,f	;volatile
  9192                           
  9193                           ;interact.c: 103: if (m_button.count_pressed > 5)
  9194  0CD9  3006               	movlw	6
  9195  0CDA  0255               	subwf	_m_button+1,w	;volatile
  9196  0CDB  1C03               	skipc
  9197  0CDC  0008               	return
  9198                           
  9199                           ;interact.c: 104: m_button.push_confirmed = 1;
  9200  0CDD  3001               	movlw	1
  9201  0CDE  00F1               	movwf	??_button_update_loop
  9202  0CDF  0871               	movf	??_button_update_loop,w
  9203  0CE0  00D7               	movwf	_m_button+3	;volatile
  9204                           
  9205                           ;interact.c: 105: }
  9206                           ;interact.c: 106: }
  9207  0CE1  0008               	return
  9208  0CE2                     i1l2640:	
  9209                           
  9210                           ;interact.c: 107: else
  9211                           ;interact.c: 108: {
  9212                           ;interact.c: 109: if (current_state != m_button.last_state)
  9213  0CE2  0859               	movf	_m_button+5,w	;volatile
  9214  0CE3  0672               	xorwf	button_update_loop@current_state,w
  9215  0CE4  1903               	skipnz
  9216  0CE5  2CF0               	goto	i1l2648
  9217                           
  9218                           ;interact.c: 110: {
  9219                           ;interact.c: 111: m_button.count_released = 0;
  9220  0CE6  01D6               	clrf	_m_button+2	;volatile
  9221                           
  9222                           ;interact.c: 112: m_button.last_state = current_state;
  9223  0CE7  0872               	movf	button_update_loop@current_state,w
  9224  0CE8  00F1               	movwf	??_button_update_loop
  9225  0CE9  0871               	movf	??_button_update_loop,w
  9226  0CEA  00D9               	movwf	_m_button+5	;volatile
  9227                           
  9228                           ;interact.c: 113: m_button.has_once_been_released = 1;
  9229  0CEB  3001               	movlw	1
  9230  0CEC  00F1               	movwf	??_button_update_loop
  9231  0CED  0871               	movf	??_button_update_loop,w
  9232  0CEE  00DA               	movwf	_m_button+6	;volatile
  9233                           
  9234                           ;interact.c: 114: }
  9235  0CEF  0008               	return
  9236  0CF0                     i1l2648:	
  9237                           
  9238                           ;interact.c: 115: else if ((m_button.last_state == 1)&&(!m_button.has_once_been_released
      +                          ))
  9239  0CF0  0359               	decf	_m_button+5,w	;volatile
  9240  0CF1  1D03               	btfss	3,2
  9241  0CF2  2D03               	goto	i1l2658
  9242  0CF3  085A               	movf	_m_button+6,w	;volatile
  9243  0CF4  1D03               	btfss	3,2
  9244  0CF5  2D03               	goto	i1l2658
  9245                           
  9246                           ;interact.c: 116: {
  9247                           ;interact.c: 117: m_button.count_pressed++;
  9248  0CF6  3001               	movlw	1
  9249  0CF7  00F1               	movwf	??_button_update_loop
  9250  0CF8  0871               	movf	??_button_update_loop,w
  9251  0CF9  07D5               	addwf	_m_button+1,f	;volatile
  9252                           
  9253                           ;interact.c: 118: if (m_button.count_pressed >= 100)
  9254  0CFA  3064               	movlw	100
  9255  0CFB  0255               	subwf	_m_button+1,w	;volatile
  9256  0CFC  1C03               	skipc
  9257  0CFD  0008               	return
  9258                           
  9259                           ;interact.c: 119: m_button.confirmed_state = long_push;
  9260  0CFE  3002               	movlw	2
  9261  0CFF  00F1               	movwf	??_button_update_loop
  9262  0D00  0871               	movf	??_button_update_loop,w
  9263  0D01  00D4               	movwf	_m_button	;volatile
  9264                           
  9265                           ;interact.c: 120: }
  9266  0D02  0008               	return
  9267  0D03                     i1l2658:	
  9268                           
  9269                           ;interact.c: 121: else if (m_button.last_state == 0)
  9270  0D03  0859               	movf	_m_button+5,w	;volatile
  9271  0D04  1D03               	btfss	3,2
  9272  0D05  0008               	return
  9273                           
  9274                           ;interact.c: 122: {
  9275                           ;interact.c: 123: m_button.count_released++;
  9276  0D06  3001               	movlw	1
  9277  0D07  00F1               	movwf	??_button_update_loop
  9278  0D08  0871               	movf	??_button_update_loop,w
  9279  0D09  07D6               	addwf	_m_button+2,f	;volatile
  9280                           
  9281                           ;interact.c: 124: if (m_button.count_released > 10)
  9282  0D0A  300B               	movlw	11
  9283  0D0B  0256               	subwf	_m_button+2,w	;volatile
  9284  0D0C  1C03               	skipc
  9285  0D0D  0008               	return
  9286                           
  9287                           ;interact.c: 125: if (m_button.count_pressed >= 75)
  9288  0D0E  304B               	movlw	75
  9289  0D0F  0255               	subwf	_m_button+1,w	;volatile
  9290  0D10  1C03               	skipc
  9291  0D11  2D17               	goto	i1l2668
  9292                           
  9293                           ;interact.c: 126: m_button.confirmed_state = long_push;
  9294  0D12  3002               	movlw	2
  9295  0D13  00F1               	movwf	??_button_update_loop
  9296  0D14  0871               	movf	??_button_update_loop,w
  9297  0D15  00D4               	movwf	_m_button	;volatile
  9298  0D16  0008               	return
  9299  0D17                     i1l2668:	
  9300                           
  9301                           ;interact.c: 127: else
  9302                           ;interact.c: 128: m_button.confirmed_state = short_push;
  9303  0D17  3001               	movlw	1
  9304  0D18  00F1               	movwf	??_button_update_loop
  9305  0D19  0871               	movf	??_button_update_loop,w
  9306  0D1A  00D4               	movwf	_m_button	;volatile
  9307  0D1B  0008               	return
  9308  0D1C                     __end_of_button_update_loop:	
  9309                           
  9310                           	psect	text38
  9311  09C9                     __ptext38:	
  9312 ;; *************** function i1_get_button_state *****************
  9313 ;; Defined at:
  9314 ;;		line 69 in file "interact.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;		None
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;  get_button_s    1    0[COMMON] unsigned char 
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      unsigned char 
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9328 ;;      Params:         0       0       0       0       0       0
  9329 ;;      Locals:         1       0       0       0       0       0
  9330 ;;      Temps:          0       0       0       0       0       0
  9331 ;;      Totals:         1       0       0       0       0       0
  9332 ;;Total ram usage:        1 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_button_update_loop
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           
  9342                           ;psect for function i1_get_button_state
  9343  09C9                     i1_get_button_state:	
  9344                           
  9345                           ;interact.c: 72: unsigned char state = PORTBbits.RB0;
  9346                           
  9347                           ;incstack = 0
  9348                           ; Regs used in i1_get_button_state: [wreg+status,2+status,0]
  9349  09C9  3000               	movlw	0
  9350  09CA  0020               	movlb	0	; select bank0
  9351  09CB  180D               	btfsc	13,0	;volatile
  9352  09CC  3001               	movlw	1
  9353  09CD  00F0               	movwf	i1get_button_state@state
  9354                           
  9355                           ;interact.c: 73: if (state == 1)
  9356  09CE  0370               	decf	i1get_button_state@state,w
  9357  09CF  1D03               	btfss	3,2
  9358  09D0  29D3               	goto	i1l2574
  9359                           
  9360                           ;interact.c: 74: return 0;
  9361  09D1  3000               	movlw	0
  9362  09D2  0008               	return
  9363  09D3                     i1l2574:	
  9364                           
  9365                           ;interact.c: 75: else return 1;
  9366  09D3  3001               	movlw	1
  9367  09D4  0008               	return
  9368  09D5                     __end_ofi1_get_button_state:	
  9369                           
  9370                           	psect	text39
  9371  0B82                     __ptext39:	
  9372 ;; *************** function _LED_update_loop *****************
  9373 ;; Defined at:
  9374 ;;		line 41 in file "interact.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;		None
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;		None
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  1    wreg      void 
  9381 ;; Registers used:
  9382 ;;		wreg, status,2, status,0
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9388 ;;      Params:         0       0       0       0       0       0
  9389 ;;      Locals:         0       0       0       0       0       0
  9390 ;;      Temps:          1       0       0       0       0       0
  9391 ;;      Totals:         1       0       0       0       0       0
  9392 ;;Total ram usage:        1 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; This function calls:
  9395 ;;		Nothing
  9396 ;; This function is called by:
  9397 ;;		_my10msTimerISR
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           
  9402                           ;psect for function _LED_update_loop
  9403  0B82                     _LED_update_loop:	
  9404                           
  9405                           ;interact.c: 43: if (m_LED.state == manual_mode)
  9406                           
  9407                           ;incstack = 0
  9408                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  9409  0B82  3004               	movlw	4
  9410  0B83  0676               	xorwf	_m_LED,w	;volatile
  9411  0B84  1903               	btfsc	3,2
  9412  0B85  0008               	return
  9413                           
  9414                           ;interact.c: 45: else if (m_LED.state == slow_blinking)
  9415                           
  9416                           ;interact.c: 44: return;
  9417  0B86  3002               	movlw	2
  9418  0B87  0676               	xorwf	_m_LED,w	;volatile
  9419  0B88  1D03               	btfss	3,2
  9420  0B89  2B97               	goto	i1l2612
  9421                           
  9422                           ;interact.c: 46: {
  9423                           ;interact.c: 47: m_LED.counter++;
  9424  0B8A  3001               	movlw	1
  9425  0B8B  00F0               	movwf	??_LED_update_loop
  9426  0B8C  0870               	movf	??_LED_update_loop,w
  9427  0B8D  07F7               	addwf	_m_LED+1,f	;volatile
  9428                           
  9429                           ;interact.c: 48: if (m_LED.counter >= 60)
  9430  0B8E  303C               	movlw	60
  9431  0B8F  0277               	subwf	_m_LED+1,w	;volatile
  9432  0B90  1C03               	skipc
  9433  0B91  0008               	return
  9434                           
  9435                           ;interact.c: 49: {
  9436                           ;interact.c: 50: m_LED.counter = 0;
  9437  0B92  01F7               	clrf	_m_LED+1	;volatile
  9438                           
  9439                           ;interact.c: 51: do { LATA2 = ~LATA2; } while(0);
  9440  0B93  3004               	movlw	4
  9441  0B94  0022               	movlb	2	; select bank2
  9442  0B95  068C               	xorwf	12,f
  9443                           
  9444                           ;interact.c: 52: }
  9445                           ;interact.c: 53: }
  9446  0B96  0008               	return
  9447  0B97                     i1l2612:	
  9448                           
  9449                           ;interact.c: 54: else if (m_LED.state == fast_blinking)
  9450  0B97  3003               	movlw	3
  9451  0B98  0676               	xorwf	_m_LED,w	;volatile
  9452  0B99  1D03               	btfss	3,2
  9453  0B9A  0008               	return
  9454                           
  9455                           ;interact.c: 55: {
  9456                           ;interact.c: 56: m_LED.counter++;
  9457  0B9B  3001               	movlw	1
  9458  0B9C  00F0               	movwf	??_LED_update_loop
  9459  0B9D  0870               	movf	??_LED_update_loop,w
  9460  0B9E  07F7               	addwf	_m_LED+1,f	;volatile
  9461                           
  9462                           ;interact.c: 57: if (m_LED.counter >= 15)
  9463  0B9F  300F               	movlw	15
  9464  0BA0  0277               	subwf	_m_LED+1,w	;volatile
  9465  0BA1  1C03               	skipc
  9466  0BA2  0008               	return
  9467                           
  9468                           ;interact.c: 58: {
  9469                           ;interact.c: 59: m_LED.counter = 0;
  9470  0BA3  01F7               	clrf	_m_LED+1	;volatile
  9471                           
  9472                           ;interact.c: 60: do { LATA2 = ~LATA2; } while(0);
  9473  0BA4  3004               	movlw	4
  9474  0BA5  0022               	movlb	2	; select bank2
  9475  0BA6  068C               	xorwf	12,f
  9476  0BA7  0008               	return
  9477  0BA8                     __end_of_LED_update_loop:	
  9478                           
  9479                           	psect	text40
  9480  0ACA                     __ptext40:	
  9481 ;; *************** function _EUSART_Transmit_ISR *****************
  9482 ;; Defined at:
  9483 ;;		line 169 in file "mcc_generated_files/eusart.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;		None
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  1    wreg      void 
  9490 ;; Registers used:
  9491 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9497 ;;      Params:         0       0       0       0       0       0
  9498 ;;      Locals:         0       0       0       0       0       0
  9499 ;;      Temps:          1       0       0       0       0       0
  9500 ;;      Totals:         1       0       0       0       0       0
  9501 ;;Total ram usage:        1 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; This function calls:
  9504 ;;		Nothing
  9505 ;; This function is called by:
  9506 ;;		_INTERRUPT_InterruptManager
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _EUSART_Transmit_ISR
  9512  0ACA                     _EUSART_Transmit_ISR:	
  9513                           
  9514                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9518  0ACA  3008               	movlw	8
  9519  0ACB  0020               	movlb	0	; select bank0
  9520  0ACC  025B               	subwf	_eusartTxBufferRemaining,w	;volatile
  9521  0ACD  1803               	skipnc
  9522  0ACE  2AE4               	goto	i1l183
  9523                           
  9524                           ;eusart.c: 174: {
  9525                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  9526  0ACF  085D               	movf	_eusartTxTail,w
  9527  0AD0  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  9528  0AD1  0086               	movwf	6
  9529  0AD2  0187               	clrf	7
  9530  0AD3  0801               	movf	1,w
  9531  0AD4  0023               	movlb	3	; select bank3
  9532  0AD5  009A               	movwf	26	;volatile
  9533  0AD6  3001               	movlw	1
  9534  0AD7  00F0               	movwf	??_EUSART_Transmit_ISR
  9535  0AD8  0870               	movf	??_EUSART_Transmit_ISR,w
  9536  0AD9  0020               	movlb	0	; select bank0
  9537  0ADA  07DD               	addwf	_eusartTxTail,f
  9538                           
  9539                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  9540  0ADB  3008               	movlw	8
  9541  0ADC  025D               	subwf	_eusartTxTail,w
  9542  0ADD  1803               	btfsc	3,0
  9543                           
  9544                           ;eusart.c: 177: {
  9545                           ;eusart.c: 178: eusartTxTail = 0;
  9546  0ADE  01DD               	clrf	_eusartTxTail
  9547                           
  9548                           ;eusart.c: 179: }
  9549                           ;eusart.c: 180: eusartTxBufferRemaining++;
  9550  0ADF  3001               	movlw	1
  9551  0AE0  00F0               	movwf	??_EUSART_Transmit_ISR
  9552  0AE1  0870               	movf	??_EUSART_Transmit_ISR,w
  9553  0AE2  07DB               	addwf	_eusartTxBufferRemaining,f	;volatile
  9554                           
  9555                           ;eusart.c: 181: }
  9556  0AE3  0008               	return
  9557  0AE4                     i1l183:	
  9558                           
  9559                           ;eusart.c: 182: else
  9560                           ;eusart.c: 183: {
  9561                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  9562  0AE4  0021               	movlb	1	; select bank1
  9563  0AE5  1211               	bcf	17,4	;volatile
  9564  0AE6  0008               	return
  9565  0AE7                     __end_of_EUSART_Transmit_ISR:	
  9566                           
  9567                           	psect	text41
  9568  0A5C                     __ptext41:	
  9569 ;; *************** function _EUSART_Receive_ISR *****************
  9570 ;; Defined at:
  9571 ;;		line 188 in file "mcc_generated_files/eusart.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      void 
  9578 ;; Registers used:
  9579 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9585 ;;      Params:         0       0       0       0       0       0
  9586 ;;      Locals:         0       0       0       0       0       0
  9587 ;;      Temps:          1       0       0       0       0       0
  9588 ;;      Totals:         1       0       0       0       0       0
  9589 ;;Total ram usage:        1 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_INTERRUPT_InterruptManager
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           
  9599                           ;psect for function _EUSART_Receive_ISR
  9600  0A5C                     _EUSART_Receive_ISR:	
  9601                           
  9602                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9606  0A5C  0023               	movlb	3	; select bank3
  9607  0A5D  1C9D               	btfss	29,1	;volatile
  9608  0A5E  2A61               	goto	i1l2970
  9609                           
  9610                           ;eusart.c: 192: {
  9611                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  9612  0A5F  139D               	bcf	29,7	;volatile
  9613                           
  9614                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  9615  0A60  179D               	bsf	29,7	;volatile
  9616  0A61                     i1l2970:	
  9617                           
  9618                           ;eusart.c: 197: }
  9619                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  9620  0A61  0819               	movf	25,w	;volatile
  9621  0A62  00F0               	movwf	??_EUSART_Receive_ISR
  9622  0A63  0021               	movlb	1	; select bank1
  9623  0A64  083A               	movf	_eusartRxHead^(0+128),w
  9624  0A65  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9625  0A66  0086               	movwf	6
  9626  0A67  0187               	clrf	7
  9627  0A68  0870               	movf	??_EUSART_Receive_ISR,w
  9628  0A69  0081               	movwf	1
  9629  0A6A  3001               	movlw	1
  9630  0A6B  00F0               	movwf	??_EUSART_Receive_ISR
  9631  0A6C  0870               	movf	??_EUSART_Receive_ISR,w
  9632  0A6D  07BA               	addwf	_eusartRxHead^(0+128),f
  9633                           
  9634                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9635  0A6E  3008               	movlw	8
  9636  0A6F  023A               	subwf	_eusartRxHead^(0+128),w
  9637  0A70  1803               	btfsc	3,0
  9638                           
  9639                           ;eusart.c: 202: {
  9640                           ;eusart.c: 203: eusartRxHead = 0;
  9641  0A71  01BA               	clrf	_eusartRxHead^(0+128)
  9642                           
  9643                           ;eusart.c: 204: }
  9644                           ;eusart.c: 205: eusartRxCount++;
  9645  0A72  3001               	movlw	1
  9646  0A73  00F0               	movwf	??_EUSART_Receive_ISR
  9647  0A74  0870               	movf	??_EUSART_Receive_ISR,w
  9648  0A75  07F8               	addwf	_eusartRxCount,f	;volatile
  9649  0A76  0008               	return
  9650  0A77                     __end_of_EUSART_Receive_ISR:	
  9651  007E                     btemp	set	126	;btemp
  9652  007E                     int$flags	set	126
  9653  007E                     wtemp	set	126
  9654  007E                     wtemp0	set	126
  9655  0080                     wtemp1	set	128
  9656  0082                     wtemp2	set	130
  9657  0084                     wtemp3	set	132
  9658  0086                     wtemp4	set	134
  9659  0088                     wtemp5	set	136
  9660  007F                     wtemp6	set	127
  9661  007E                     ttemp	set	126
  9662  007E                     ttemp0	set	126
  9663  0081                     ttemp1	set	129
  9664  0084                     ttemp2	set	132
  9665  0087                     ttemp3	set	135
  9666  007F                     ttemp4	set	127
  9667  007E                     ltemp	set	126
  9668  007E                     ltemp0	set	126
  9669  0082                     ltemp1	set	130
  9670  0086                     ltemp2	set	134
  9671  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     52      62
    BANK1            80      0      77
    BANK2            80     22      22
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    write_calibration_to_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK1[2]), m_conf(BANK1[47]), 

    load_calibration_from_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK1[2]), m_conf(BANK1[47]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_EPWM1_LoadDutyValue
    _main->_LED_set_state
    _main->_TMR0_SetInterruptHandler
    _main->___wmul
    _main->_button_init
    _main->_load_calibration_from_EEPROM
    _main->_write_calibration_to_EEPROM
    _write_calibration_to_EEPROM->_DATAEE_WriteByte
    _perform_calibration->_EPWM1_LoadDutyValue
    _perform_calibration->_LED_set_state
    _perform_calibration->_button_init
    _double_fast_blink->_LED_set_state
    _button_init->_get_button_state
    _load_calibration_from_EEPROM->_DATAEE_ReadByte
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _convert_to_fp->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->i1_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _write_calibration_to_EEPROM->_crc_update
    _perform_calibration->_double_fast_blink
    _multiply_fp->___lmul
    _load_calibration_from_EEPROM->_crc_update
    _integer_part->_convert_to_fp
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->_convert_to_fp
    _convert_to_fp->___wmul
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   18933
                                             44 BANK0      8     8      0
                                              0 BANK2     22    22      0
                _EPWM1_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                             ___wmul
                        _button_init
                      _convert_to_fp
                       _integer_part
       _load_calibration_from_EEPROM
                        _multiply_fp
                _perform_calibration
        _write_calibration_to_EEPROM
 ---------------------------------------------------------------------------------
 (1) _write_calibration_to_EEPROM                          4     4      0    1130
                                              5 COMMON     1     1      0
                                             17 BANK0      3     3      0
                   _DATAEE_WriteByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     253
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _perform_calibration                                 13    13      0    1992
                                              3 BANK0     13    13      0
                _EPWM1_LoadDutyValue
                      _LED_set_state
                        _button_init
                  _double_fast_blink
                   _get_button_state
 ---------------------------------------------------------------------------------
 (2) _double_fast_blink                                    3     3      0     155
                                              0 BANK0      3     3      0
                      _LED_set_state
 ---------------------------------------------------------------------------------
 (3) _LED_set_state                                        2     2      0     155
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _button_init                                          1     1      0      34
                                              5 COMMON     1     1      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (2) _get_button_state                                     1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  4     2      2     832
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    2121
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _load_calibration_from_EEPROM                         6     6      0     976
                                              5 COMMON     1     1      0
                                             17 BANK0      5     5      0
                    _DATAEE_ReadByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _crc_update                                          17    14      3     565
                                              0 BANK0     17    14      3
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _integer_part                                        16    12      4    1935
                                             25 BANK0     16    12      4
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                   _EPWM1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    5691
                                             25 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4    1456
                                              4 BANK0     21    17      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1060
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   2     2      0     112
                                              1 COMMON     2     2      0
                 i1_get_button_state
 ---------------------------------------------------------------------------------
 (10) i1_get_button_state                                  1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
       ___wmul (ARG)
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___wmul
   _button_init
     _get_button_state
   _convert_to_fp
     ___wmul (ARG)
   _integer_part
     _convert_to_fp
       ___wmul (ARG)
   _load_calibration_from_EEPROM
     _DATAEE_ReadByte
     _crc_update
   _multiply_fp
     ___lmul
   _perform_calibration
     _EPWM1_LoadDutyValue
     _LED_set_state
     _button_init
       _get_button_state
     _double_fast_blink
       _LED_set_state
     _get_button_state
   _write_calibration_to_EEPROM
     _DATAEE_WriteByte
     _crc_update

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           i1_get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4D       8       96.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     16      16      10       27.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      AB      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 22 09:58:40 2016

             __size_ofi1_get_button_state 000C                               __CFG_CP$OFF 0000  
                                      l28 09B1                       ___wmul@multiplicand 0022  
                         _timer0ReloadVal 0079                    __end_of_my10msTimerISR 099A  
                                     l400 0EC4                                       l171 0B6B  
                                     l286 0B55                                       l367 030A  
                                     l634 0589                                       l722 0730  
                                     l475 0B3B                                       l832 0A9B  
                                     _PR2 001B                              __CFG_CPD$OFF 0000  
                         _TMR2_Initialize 09B4                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0070                              __CFG_LVP$OFF 0000  
                                    l4022 0AEC                                      l4200 071B  
                                    l4112 0615                                      l4034 0A94  
                                    l4122 063B                                      l4114 05FB  
                                    l4052 0BBB                                      l4116 061D  
                                    l4070 0DFC                                      l4230 0740  
                                    l4134 0658                                      l4312 0BF3  
                                    l4080 0E2A                                      l4048 0BB1  
                                    l4240 0782                                      l4232 077B  
                                    l4224 0777                                      l4128 0649  
                                    l4306 0BDE                                      l4218 0762  
                                    l4154 069C                                      l4138 0676  
                                    l4404 0426                                      l4324 039E  
                                    l4228 073C                                      l4236 0735  
                                    l4180 06E2                                      l4148 0687  
                                    l4406 0427                                      l4326 03AD  
                                    l4254 07A0                                      l4174 06CD  
                                    l4238 069D                                      l4512 04C9  
                                    l4416 0439                                      l4088 0E33  
                                    l4248 078B                                      l4522 04DE  
                                    l4362 03E7                                      l4098 0E4E  
                                    l4186 06A9                                      l4282 0D62  
                                    l4274 0D2B                                      l4612 05A9  
                                    l4604 059F                                      l4532 04F0  
                                    l4540 04D0                                      l4364 03E8  
                                    l4348 03D1                                      l3820 09EB  
                                    l3804 0B2D                                      l4188 0706  
                                    l4700 007A                                      l4542 0533  
                                    l4526 04EE                                      l4446 0465  
                                    l4438 045D                                      l4374 03FA  
                                    l4358 03E5                                      l3806 0B33  
                                    l4710 0099                                      l4702 0084  
                                    l4624 05C8                                      l4608 05A7  
                                    l4536 0511                                      l4480 049C  
                                    l4448 0466                                      l4704 008A  
                                    l4618 05B1                                      l4546 0544  
                                    l4538 052E                                      l4490 04A5  
                                    l4458 0478                                      l4636 05ED  
                                    l4396 041E                                      l4660 0DDB  
                                    l4652 0D9B                                      l4716 00D1  
                                    l3790 0B7F                                      l4734 0152  
                                    l3776 0B60                                      l4576 0570  
                                    l4568 0568                                      l4488 04A4  
                                    l4760 0313                                      l4752 02F0  
                                    l4728 00FE                                      l4586 0582  
                                    l4578 0572                                      l3980 0E92  
                                    l4668 0DEA                                      l4764 0325  
                                    l4756 0308                                      l4774 0358  
                                    l3992 0EE0                                      l4768 0343  
                                    l4776 0373                                      l3898 0B07  
                                    l3986 0EBC                                      l4786 0395  
                                    STR_1 07D8                                      STR_2 080C  
                                    _LATA 010C                                      _LATB 010D  
                                    u4115 0E79                                      u4215 0A9C  
                                    u4144 0EAE                                      u4320 0E5C  
                                    u4225 0AA1                                      u4145 0EAC  
                                    u4325 0E58                                      u5205 0F12  
                                    u4350 060A                                      u5303 0DD5  
                                    u4255 0BBC                                      u5215 0F2A  
                                    u4095 0ABF                                      u4360 060B  
                                    u4185 0C39                                      u4265 0BC3  
                                    u5225 0F45                                      u4195 0C46  
                                    u5235 0F5D                                      u5260 0D89  
                                    u5245 0F8D                                      u5270 0D8A  
                                    u5175 05B9                                      u5255 0FE1  
                                    u5425 031C                                      u5435 0339  
                                    u5295 0DA5                                      u5375 0121  
                                    u5385 0146                                      u5707 0768  
                                    u5627 00D8                                      i1l77 0024  
                                    u5717 0791                                      u5637 0353  
                                    u5727 0C79                                      u5647 0635  
                                    u5737 0C89                                      u5657 066F  
                                    u5747 0C98                                      u5667 068D  
                                    u5757 0CA7                                      u5677 06D3  
                                    u5767 0CB6                                      u5687 06FE  
                                    u5777 0BE4                                      u5697 0721  
                                    u5787 0C01                                      u5797 0C16  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUB 020D                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                    __end_of_GPS_read_speed 05EF  
                                    _main 0042                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      ltemp 007E  
                           integer_part@n 0039                                      start 0029  
                                    ttemp 007E                                      wtemp 007E  
                   ??_EPWM1_LoadDutyValue 0020                             __CFG_MCLRE$ON 0000  
               __size_of_DATAEE_WriteByte 0021                   __end_of_TMR0_Initialize 0A2F  
                           __CFG_PLLEN$ON 0000            ??_TMR0_DefaultInterruptHandler 0070  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0008  
           __end_of_OSCILLATOR_Initialize 09B4                                     ?_main 0070  
                            main@fp_motor 0120                             _convert_to_fp 0E5E  
                           __CFG_WDTE$OFF 0000                                     _T2CON 001C  
                                   _LATA2 0862                           ?_my10msTimerISR 0070  
                                   i1l183 0AE4                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISB 008D                                     _TXREG 019A  
                                   _TXSTA 019E                          ??_GPS_Initialize 0028  
       __size_of_TMR0_SetInterruptHandler 0006                              ?_button_init 0070  
                     ___lmul@multiplicand 0024                 ?_TMR0_SetInterruptHandler 0074  
                         __end_of_fp_x0_a 07CE                           __end_of_fp_x0_b 07D2  
                        __end_of_TMR0_ISR 0A45                                     _m_LED 0076  
                         _DATAEE_ReadByte 09D5                                     _m_crc 00EB  
                                   _motor 00B8                                     _speed 00B0  
                                   _putch 099A                                     main@a 012B  
                                   main@b 012F                                     main@i 0135  
                 __end_of_LED_update_loop 0BA8                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0070                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                         _TMR2_StartTimer 0991                             multiply_fp@n1 002C  
                           multiply_fp@n2 0030                           __initialization 002B  
                  __size_of_LED_set_state 001D                              __end_of_main 039A  
         write_calibration_to_EEPROM@addr 0031                            ??_EUSART_Write 0074  
                 __end_of_TMR2_Initialize 09BE               ?_INTERRUPT_InterruptManager 0070  
    __end_of_load_calibration_from_EEPROM 0E5E     __size_of_load_calibration_from_EEPROM 006F  
            _load_calibration_from_EEPROM 0DEF                            ?_convert_to_fp 0024  
                                  ??_main 004C                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _CCPR1H 0292  
                                  _EEDATH 0194                                    _CCPR1L 0291  
                                  _EEDATL 0193                                    _EECON2 0196  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELB 018D                                    i1l2612 0B97  
                                  i1l2632 0CD2                                    i1l2640 0CE2  
                                  i1l3604 001A                                    i1l2574 09D3  
                                  i1l2648 0CF0                                    i1l2658 0D03  
                                  i1l2668 0D17                                    i1l2970 0A61  
                                  i1l3596 000F                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                          __CFG_PWRTE$OFF 0000                        convert_to_fp@i_bit 0032  
                           main@new_motor 0133                              _CCPTMRS0bits 029E  
                                  ___lmul 0BA8                                    ___wmul 0A92  
                          __CFG_STVREN$ON 0000               __end_of_perform_calibration 07CA  
                                  _m_conf 00BC                       _EUSART_Transmit_ISR 0ACA  
                        ?_TMR0_Initialize 0070                __end_of_button_update_loop 0D1C  
                 i1get_button_state@state 0070                perform_calibration@m_motor 002E  
                                  _printf 0AE7                   __end_of_DATAEE_ReadByte 09E1  
           ?_load_calibration_from_EEPROM 0070                             main@speed_int 0125  
                           ?_integer_part 0039                           integer_part@neg 0046  
                           _LED_set_state 0B21                     __end_of_TMR0_CallBack 09C9  
                 __end_of_TMR2_StartTimer 0994  TMR0_SetInterruptHandler@InterruptHandler 0074  
               __size_of_get_button_state 000C                      ?_EUSART_Transmit_ISR 0070  
                  convert_to_fp@res_fract 0030                          ?_LED_update_loop 0070  
                            ?_multiply_fp 002C                      __size_of_EUSART_Read 001D  
                       _SYSTEM_Initialize 0A08                   __end_of__initialization 003E  
                          multiply_fp@res 0042                        ?_SYSTEM_Initialize 0070  
                       ?_EPWM1_Initialize 0070      __size_of_write_calibration_to_EEPROM 0068  
                          __pcstackCOMMON 0070                       ??_SYSTEM_Initialize 0076  
                               ?_TMR0_ISR 0070                        ??_EPWM1_Initialize 0074  
                        _DATAEE_WriteByte 0B3E        perform_calibration@__delay_tmp_900 002A  
      perform_calibration@__delay_tmp_902 002B        perform_calibration@__delay_tmp_903 002C  
                         ??_convert_to_fp 0028        perform_calibration@__delay_tmp_899 0029  
                           __end_of_putch 09A0                          ?_TMR2_Initialize 0070  
                          ??_integer_part 003D                            _OPTION_REGbits 0095  
                   TMR0_ISR@CountCallBack 00B4                            ?_LED_set_state 0070  
                    __size_of_button_init 000D                 __end_of_SYSTEM_Initialize 0A1A  
                   ??_EUSART_Transmit_ISR 0070                                   ??_putch 0076  
                              __pbssBANK0 0054                                __pbssBANK1 00A0  
                    __end_of_EUSART_Write 0B82                 perform_calibration@replay 0027  
             __size_of_EUSART_Receive_ISR 001B                __end_ofi1_get_button_state 09D5  
                              __pmaintext 0042          __end_of_TMR0_SetInterruptHandler 09A6  
                                 ?___lmul 0020                                   ?___wmul 0020  
                              ??_TMR0_ISR 0073                          ??_my10msTimerISR 0073  
                              __pintentry 0004                                   _CCP1CON 0293  
                                 _ECCP1AS 0295                                   _BAUDCON 019F  
                       _double_fast_blink 0C6C                            ___lmul@product 0028  
                                 _APFCON0 011D                                   _APFCON1 011E  
                                 ?_printf 0021                        ?_double_fast_blink 0070  
                        ?_DATAEE_ReadByte 0070                                _crc_update 0C1D  
                   get_button_state@state 0074                             _eusartRxCount 0078  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                                 _PWM1CON 0294                          ??_GPS_read_speed 0039  
          ??_load_calibration_from_EEPROM 0075                       ??_double_fast_blink 0020  
                        ?_TMR2_StartTimer 0070          load_calibration_from_EEPROM@addr 0033  
             __end_of_EPWM1_LoadDutyValue 0ACA                      DATAEE_WriteByte@bAdd 0020  
               __end_of_double_fast_blink 0CBE                           __size_of___lmul 0030  
                         __size_of___wmul 001C                   convert_to_fp@fract_part 0026  
                                 _fp_x0_a 07CA                                   _fp_x0_b 07CE  
                                 __ptext1 0D1C                                   __ptext2 0B3E  
                                 __ptext3 05EF                                   __ptext4 0C6C  
                                 __ptext5 0B21                                   __ptext6 09ED  
                                 __ptext7 09E1                                   __ptext8 0AAE  
                                 __ptext9 0F07                           __size_of_printf 001D  
                         ??_LED_set_state 0074                 GPS_Initialize@__delay_tmp 002B  
                   _OSCILLATOR_Initialize 09AC                                 _T2CONbits 001C  
            GPS_read_speed@read_speed_fra 003F                  ??_PIN_MANAGER_Initialize 0074  
            GPS_read_speed@read_speed_int 003D                __size_of_SYSTEM_Initialize 0012  
                                 clrloop0 09A7                          _get_button_state 09E1  
                                 main@tmp 0127                      end_of_initialization 003E  
                       __end_of_ratio_mph 07D6                    LED_set_state@new_state 0075  
                    __size_of_multiply_fp 00F9                         _EUSART_Initialize 0A77  
                    __end_of_integer_part 0DEF                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@c 0027  
                                 printf@f 0021                              __pstringtext 07CA  
                    integer_part@int_part 0047                       ??_EUSART_Initialize 0074  
                _TMR0_SetInterruptHandler 09A0                                 _PORTBbits 000D  
                             ?_crc_update 0020                      GPS_read_speed@i_buff 004A  
                    GPS_read_speed@m_char 004B                      GPS_read_speed@buffer 0043  
                        __CFG_FOSC$INTOSC 0000                     __size_of_EUSART_Write 0023  
                      _button_update_loop 0CBE              ?_write_calibration_to_EEPROM 0070  
                __end_of_DATAEE_WriteByte 0B5F                 __end_of_EUSART_Initialize 0A92  
                 __size_of_GPS_Initialize 0045                       ?_button_update_loop 0070  
              __size_of_double_fast_blink 0052                            __end_of___lmul 0BD8  
                          __end_of___wmul 0AAE                              _EUSART_Write 0B5F  
                       __size_of_TMR0_ISR 0016                          convert_to_fp@one 07D6  
                        convert_to_fp@res 0035                    ?_OSCILLATOR_Initialize 0070  
                    ??_button_update_loop 0071                            __end_of_printf 0B04  
            __size_of_perform_calibration 01DB                       start_initialization 002B  
               __size_of_EPWM1_Initialize 000E                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0017                             ??_EUSART_Read 0074  
                             putch@txData 0020              EPWM1_LoadDutyValue@dutyValue 0074  
           ??_write_calibration_to_EEPROM 0075                       DATAEE_ReadByte@bAdd 0074  
                       crc_update@old_crc 0020                       __size_of_crc_update 004F  
                __size_of_LED_update_loop 0026                                  ??___lmul 0074  
                                ??___wmul 0074                    __size_of_TMR0_CallBack 000B  
                   convert_to_fp@int_part 0024                     __end_of_convert_to_fp 0F07  
                                ??_printf 0023                        i1_get_button_state 09C9  
             __end_of_EUSART_Transmit_ISR 0AE7             load_calibration_from_EEPROM@i 0035  
           load_calibration_from_EEPROM@p 0034                             ??_button_init 0075  
                             __pbssCOMMON 0076                                 ___latbits 0001  
                           __pcstackBANK0 0020                             __pcstackBANK2 0120  
                   convert_to_fp@tmp_left 0033                  __size_of_TMR2_Initialize 000A  
                     ?i1_get_button_state 0070                     __size_of_integer_part 006B  
              __end_of_EUSART_Receive_ISR 0A77                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 0B21                     _TMR0_InterruptHandler 00B6  
                  _PIN_MANAGER_Initialize 0A45                      EUSART_Read@readValue 0075  
                    ??i1_get_button_state 0070                  __end_of_get_button_state 09ED  
                            _eusartRxHead 00BA                              _eusartTxHead 005C  
                            _eusartRxTail 00BB                              _eusartTxTail 005D  
            ??_INTERRUPT_InterruptManager 0073                   _eusartTxBufferRemaining 005B  
         load_calibration_from_EEPROM@crc 0031                              _integer_part 0D84  
                           _TMR0_CallBack 09BE            perform_calibration@__delay_tmp 0028  
                __size_of_DATAEE_ReadByte 000C                            __size_of_putch 0006  
                     __end_of_button_init 09FA                            _eusartRxBuffer 00A0  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 0BD8  
                          _eusartTxBuffer 00A8                            ___wmul@product 0074  
                               clear_ram0 09A6                                  _PIE1bits 0091  
                               _ratio_mph 07D2                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0025                ??_TMR0_SetInterruptHandler 0076  
                                _PIR1bits 0011              __size_of_EPWM1_LoadDutyValue 001C  
                                _TMR0_ISR 0A2F                      perform_calibration@i 002D  
                                _PSTR1CON 0296                         ??_LED_update_loop 0070  
                       ___wmul@multiplier 0020                              ??_crc_update 0023  
                        _EPWM1_Initialize 09FA                     __end_of_LED_set_state 0B3E  
                 __size_of_my10msTimerISR 0006                     DATAEE_WriteByte@bData 0074  
                          ?_TMR0_CallBack 0070                               _EUSART_Read 0B04  
                       ___lmul@multiplier 0020                    __end_of_GPS_Initialize 0C1D  
                           ??_multiply_fp 0034                         ?_DATAEE_WriteByte 0074  
                __end_ofconvert_to_fp@one 07D8            GPS_read_speed@no_more_checksum 003C  
                       ??_TMR2_Initialize 0074                        ??_DATAEE_WriteByte 0075  
                              _EECON1bits 0195                       _perform_calibration 05EF  
                  integer_part@and_a_half 0042                   __size_of_GPS_read_speed 0255  
                      __end_of_crc_update 0C6C                   ??_OSCILLATOR_Initialize 0074  
                    ?_perform_calibration 0070           button_update_loop@current_state 0072  
                             _button_init 09ED                  GPS_read_speed@before_dot 003B  
                                __ptext10 0BA8                                  __ptext11 0DEF  
                                __ptext20 0A45                                  __ptext12 0C1D  
                                __ptext21 09AC                                  __ptext13 09D5  
                                __ptext30 099A                                  __ptext22 0A77  
                                __ptext14 0D84                                  __ptext31 0B5F  
                                __ptext23 09FA                                  __ptext15 0A08  
                                __ptext40 0ACA                                  __ptext24 039A  
                                __ptext16 09B4                                  __ptext41 0A5C  
                                __ptext33 0A2F                                  __ptext25 0E5E  
                                __ptext17 0991                                  __ptext34 09BE  
                                __ptext26 0A92                                  __ptext18 0A1A  
                                __ptext35 0003                                  __ptext27 0B04  
                                __ptext19 09A0                                  __ptext36 0994  
                                __ptext28 0BD8                                  __ptext37 0CBE  
                                __ptext29 0AE7                                  __ptext38 09C9  
                                __ptext39 0B82                           ?_GPS_Initialize 0070  
             DATAEE_WriteByte@GIEBitValue 0021                                  _m_button 0054  
                           __size_of_main 0358      __end_of_TMR0_DefaultInterruptHandler 0004  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0003  
                       ??_DATAEE_ReadByte 0074                       __end_of_multiply_fp 1000  
                                int$flags 007E                         ??_TMR2_StartTimer 0074  
      __end_of_INTERRUPT_InterruptManager 0029                _INTERRUPT_InterruptManager 0004  
                                main@done 0124                     ??_perform_calibration 0023  
             __size_of_button_update_loop 005E                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0073                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0070                   GPS_read_speed@checksum2 0041  
                       __CFG_CLKOUTEN$OFF 0000                   perform_calibration@done 0026  
           ?_TMR0_DefaultInterruptHandler 0070                                  printf@ap 0026  
                      _EUSART_Receive_ISR 0A5C                         ?_get_button_state 0070  
                          crc_update@data 0022                        ??_get_button_state 0074  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0070  
                         _TMR0_Initialize 0A1A                    GPS_read_speed@checksum 0042  
                          _my10msTimerISR 0994                       _EPWM1_LoadDutyValue 0AAE  
     __end_of_write_calibration_to_EEPROM 0D84               _write_calibration_to_EEPROM 0D1C  
                           crc_update@crc 002D                        EUSART_Write@txData 0075  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 0A5C  
                   GPS_read_speed@i_buff2 0049                               _multiply_fp 0F07  
                  __size_of_convert_to_fp 00A9                      ??_EUSART_Receive_ISR 0070  
                          _GPS_read_speed 039A                               crc_update@x 002F  
                         _LED_update_loop 0B82              write_calibration_to_EEPROM@i 0033  
            write_calibration_to_EEPROM@p 0032                  __end_of_EPWM1_Initialize 0A08  
                    ?_EPWM1_LoadDutyValue 0074  

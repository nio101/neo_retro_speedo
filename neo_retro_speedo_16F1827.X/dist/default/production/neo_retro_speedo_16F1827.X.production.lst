

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Sep 21 19:33:56 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0093                     	;# 
    90  0094                     	;# 
    91  0095                     	;# 
    92  0096                     	;# 
    93  0097                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011A                     	;# 
   114  011B                     	;# 
   115  011D                     	;# 
   116  011E                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0191                     	;# 
   120  0191                     	;# 
   121  0192                     	;# 
   122  0193                     	;# 
   123  0193                     	;# 
   124  0193                     	;# 
   125  0194                     	;# 
   126  0195                     	;# 
   127  0196                     	;# 
   128  0199                     	;# 
   129  019A                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019C                     	;# 
   135  019C                     	;# 
   136  019D                     	;# 
   137  019E                     	;# 
   138  019F                     	;# 
   139  020C                     	;# 
   140  020D                     	;# 
   141  0211                     	;# 
   142  0211                     	;# 
   143  0212                     	;# 
   144  0212                     	;# 
   145  0213                     	;# 
   146  0213                     	;# 
   147  0214                     	;# 
   148  0214                     	;# 
   149  0215                     	;# 
   150  0215                     	;# 
   151  0215                     	;# 
   152  0216                     	;# 
   153  0216                     	;# 
   154  0217                     	;# 
   155  0217                     	;# 
   156  0219                     	;# 
   157  021A                     	;# 
   158  021B                     	;# 
   159  021C                     	;# 
   160  021D                     	;# 
   161  021E                     	;# 
   162  021F                     	;# 
   163  0291                     	;# 
   164  0291                     	;# 
   165  0292                     	;# 
   166  0293                     	;# 
   167  0294                     	;# 
   168  0295                     	;# 
   169  0295                     	;# 
   170  0296                     	;# 
   171  0298                     	;# 
   172  0298                     	;# 
   173  0299                     	;# 
   174  029A                     	;# 
   175  029B                     	;# 
   176  029C                     	;# 
   177  029C                     	;# 
   178  029D                     	;# 
   179  029E                     	;# 
   180  029E                     	;# 
   181  0311                     	;# 
   182  0311                     	;# 
   183  0312                     	;# 
   184  0313                     	;# 
   185  0318                     	;# 
   186  0318                     	;# 
   187  0319                     	;# 
   188  031A                     	;# 
   189  0394                     	;# 
   190  0395                     	;# 
   191  0396                     	;# 
   192  039A                     	;# 
   193  039C                     	;# 
   194  039D                     	;# 
   195  039E                     	;# 
   196  039F                     	;# 
   197  0415                     	;# 
   198  0416                     	;# 
   199  0417                     	;# 
   200  041C                     	;# 
   201  041D                     	;# 
   202  041E                     	;# 
   203  0FE4                     	;# 
   204  0FE5                     	;# 
   205  0FE6                     	;# 
   206  0FE7                     	;# 
   207  0FE8                     	;# 
   208  0FE9                     	;# 
   209  0FEA                     	;# 
   210  0FEB                     	;# 
   211  0FED                     	;# 
   212  0FEE                     	;# 
   213  0FEF                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  008C                     	;# 
   244  008D                     	;# 
   245  0091                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0094                     	;# 
   249  0095                     	;# 
   250  0096                     	;# 
   251  0097                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009A                     	;# 
   255  009B                     	;# 
   256  009B                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  010C                     	;# 
   261  010D                     	;# 
   262  0111                     	;# 
   263  0112                     	;# 
   264  0113                     	;# 
   265  0114                     	;# 
   266  0115                     	;# 
   267  0116                     	;# 
   268  0117                     	;# 
   269  0118                     	;# 
   270  0119                     	;# 
   271  011A                     	;# 
   272  011B                     	;# 
   273  011D                     	;# 
   274  011E                     	;# 
   275  018C                     	;# 
   276  018D                     	;# 
   277  0191                     	;# 
   278  0191                     	;# 
   279  0192                     	;# 
   280  0193                     	;# 
   281  0193                     	;# 
   282  0193                     	;# 
   283  0194                     	;# 
   284  0195                     	;# 
   285  0196                     	;# 
   286  0199                     	;# 
   287  019A                     	;# 
   288  019B                     	;# 
   289  019B                     	;# 
   290  019B                     	;# 
   291  019B                     	;# 
   292  019C                     	;# 
   293  019C                     	;# 
   294  019D                     	;# 
   295  019E                     	;# 
   296  019F                     	;# 
   297  020C                     	;# 
   298  020D                     	;# 
   299  0211                     	;# 
   300  0211                     	;# 
   301  0212                     	;# 
   302  0212                     	;# 
   303  0213                     	;# 
   304  0213                     	;# 
   305  0214                     	;# 
   306  0214                     	;# 
   307  0215                     	;# 
   308  0215                     	;# 
   309  0215                     	;# 
   310  0216                     	;# 
   311  0216                     	;# 
   312  0217                     	;# 
   313  0217                     	;# 
   314  0219                     	;# 
   315  021A                     	;# 
   316  021B                     	;# 
   317  021C                     	;# 
   318  021D                     	;# 
   319  021E                     	;# 
   320  021F                     	;# 
   321  0291                     	;# 
   322  0291                     	;# 
   323  0292                     	;# 
   324  0293                     	;# 
   325  0294                     	;# 
   326  0295                     	;# 
   327  0295                     	;# 
   328  0296                     	;# 
   329  0298                     	;# 
   330  0298                     	;# 
   331  0299                     	;# 
   332  029A                     	;# 
   333  029B                     	;# 
   334  029C                     	;# 
   335  029C                     	;# 
   336  029D                     	;# 
   337  029E                     	;# 
   338  029E                     	;# 
   339  0311                     	;# 
   340  0311                     	;# 
   341  0312                     	;# 
   342  0313                     	;# 
   343  0318                     	;# 
   344  0318                     	;# 
   345  0319                     	;# 
   346  031A                     	;# 
   347  0394                     	;# 
   348  0395                     	;# 
   349  0396                     	;# 
   350  039A                     	;# 
   351  039C                     	;# 
   352  039D                     	;# 
   353  039E                     	;# 
   354  039F                     	;# 
   355  0415                     	;# 
   356  0416                     	;# 
   357  0417                     	;# 
   358  041C                     	;# 
   359  041D                     	;# 
   360  041E                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEF                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000D                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0014                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0093                     	;# 
   406  0094                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0098                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  0111                     	;# 
   421  0112                     	;# 
   422  0113                     	;# 
   423  0114                     	;# 
   424  0115                     	;# 
   425  0116                     	;# 
   426  0117                     	;# 
   427  0118                     	;# 
   428  0119                     	;# 
   429  011A                     	;# 
   430  011B                     	;# 
   431  011D                     	;# 
   432  011E                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0199                     	;# 
   445  019A                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019C                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020C                     	;# 
   456  020D                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0219                     	;# 
   473  021A                     	;# 
   474  021B                     	;# 
   475  021C                     	;# 
   476  021D                     	;# 
   477  021E                     	;# 
   478  021F                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0294                     	;# 
   484  0295                     	;# 
   485  0295                     	;# 
   486  0296                     	;# 
   487  0298                     	;# 
   488  0298                     	;# 
   489  0299                     	;# 
   490  029A                     	;# 
   491  029B                     	;# 
   492  029C                     	;# 
   493  029C                     	;# 
   494  029D                     	;# 
   495  029E                     	;# 
   496  029E                     	;# 
   497  0311                     	;# 
   498  0311                     	;# 
   499  0312                     	;# 
   500  0313                     	;# 
   501  0318                     	;# 
   502  0318                     	;# 
   503  0319                     	;# 
   504  031A                     	;# 
   505  0394                     	;# 
   506  0395                     	;# 
   507  0396                     	;# 
   508  039A                     	;# 
   509  039C                     	;# 
   510  039D                     	;# 
   511  039E                     	;# 
   512  039F                     	;# 
   513  0415                     	;# 
   514  0416                     	;# 
   515  0417                     	;# 
   516  041C                     	;# 
   517  041D                     	;# 
   518  041E                     	;# 
   519  0FE4                     	;# 
   520  0FE5                     	;# 
   521  0FE6                     	;# 
   522  0FE7                     	;# 
   523  0FE8                     	;# 
   524  0FE9                     	;# 
   525  0FEA                     	;# 
   526  0FEB                     	;# 
   527  0FED                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000D                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0014                     	;# 
   548  0015                     	;# 
   549  0016                     	;# 
   550  0016                     	;# 
   551  0017                     	;# 
   552  0018                     	;# 
   553  0019                     	;# 
   554  001A                     	;# 
   555  001B                     	;# 
   556  001C                     	;# 
   557  001E                     	;# 
   558  001F                     	;# 
   559  008C                     	;# 
   560  008D                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0093                     	;# 
   564  0094                     	;# 
   565  0095                     	;# 
   566  0096                     	;# 
   567  0097                     	;# 
   568  0098                     	;# 
   569  0099                     	;# 
   570  009A                     	;# 
   571  009B                     	;# 
   572  009B                     	;# 
   573  009C                     	;# 
   574  009D                     	;# 
   575  009E                     	;# 
   576  010C                     	;# 
   577  010D                     	;# 
   578  0111                     	;# 
   579  0112                     	;# 
   580  0113                     	;# 
   581  0114                     	;# 
   582  0115                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  0118                     	;# 
   586  0119                     	;# 
   587  011A                     	;# 
   588  011B                     	;# 
   589  011D                     	;# 
   590  011E                     	;# 
   591  018C                     	;# 
   592  018D                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0193                     	;# 
   599  0194                     	;# 
   600  0195                     	;# 
   601  0196                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019C                     	;# 
   609  019C                     	;# 
   610  019D                     	;# 
   611  019E                     	;# 
   612  019F                     	;# 
   613  020C                     	;# 
   614  020D                     	;# 
   615  0211                     	;# 
   616  0211                     	;# 
   617  0212                     	;# 
   618  0212                     	;# 
   619  0213                     	;# 
   620  0213                     	;# 
   621  0214                     	;# 
   622  0214                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0216                     	;# 
   627  0216                     	;# 
   628  0217                     	;# 
   629  0217                     	;# 
   630  0219                     	;# 
   631  021A                     	;# 
   632  021B                     	;# 
   633  021C                     	;# 
   634  021D                     	;# 
   635  021E                     	;# 
   636  021F                     	;# 
   637  0291                     	;# 
   638  0291                     	;# 
   639  0292                     	;# 
   640  0293                     	;# 
   641  0294                     	;# 
   642  0295                     	;# 
   643  0295                     	;# 
   644  0296                     	;# 
   645  0298                     	;# 
   646  0298                     	;# 
   647  0299                     	;# 
   648  029A                     	;# 
   649  029B                     	;# 
   650  029C                     	;# 
   651  029C                     	;# 
   652  029D                     	;# 
   653  029E                     	;# 
   654  029E                     	;# 
   655  0311                     	;# 
   656  0311                     	;# 
   657  0312                     	;# 
   658  0313                     	;# 
   659  0318                     	;# 
   660  0318                     	;# 
   661  0319                     	;# 
   662  031A                     	;# 
   663  0394                     	;# 
   664  0395                     	;# 
   665  0396                     	;# 
   666  039A                     	;# 
   667  039C                     	;# 
   668  039D                     	;# 
   669  039E                     	;# 
   670  039F                     	;# 
   671  0415                     	;# 
   672  0416                     	;# 
   673  0417                     	;# 
   674  041C                     	;# 
   675  041D                     	;# 
   676  041E                     	;# 
   677  0FE4                     	;# 
   678  0FE5                     	;# 
   679  0FE6                     	;# 
   680  0FE7                     	;# 
   681  0FE8                     	;# 
   682  0FE9                     	;# 
   683  0FEA                     	;# 
   684  0FEB                     	;# 
   685  0FED                     	;# 
   686  0FEE                     	;# 
   687  0FEF                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000D                     	;# 
   702  0011                     	;# 
   703  0012                     	;# 
   704  0013                     	;# 
   705  0014                     	;# 
   706  0015                     	;# 
   707  0016                     	;# 
   708  0016                     	;# 
   709  0017                     	;# 
   710  0018                     	;# 
   711  0019                     	;# 
   712  001A                     	;# 
   713  001B                     	;# 
   714  001C                     	;# 
   715  001E                     	;# 
   716  001F                     	;# 
   717  008C                     	;# 
   718  008D                     	;# 
   719  0091                     	;# 
   720  0092                     	;# 
   721  0093                     	;# 
   722  0094                     	;# 
   723  0095                     	;# 
   724  0096                     	;# 
   725  0097                     	;# 
   726  0098                     	;# 
   727  0099                     	;# 
   728  009A                     	;# 
   729  009B                     	;# 
   730  009B                     	;# 
   731  009C                     	;# 
   732  009D                     	;# 
   733  009E                     	;# 
   734  010C                     	;# 
   735  010D                     	;# 
   736  0111                     	;# 
   737  0112                     	;# 
   738  0113                     	;# 
   739  0114                     	;# 
   740  0115                     	;# 
   741  0116                     	;# 
   742  0117                     	;# 
   743  0118                     	;# 
   744  0119                     	;# 
   745  011A                     	;# 
   746  011B                     	;# 
   747  011D                     	;# 
   748  011E                     	;# 
   749  018C                     	;# 
   750  018D                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019C                     	;# 
   767  019C                     	;# 
   768  019D                     	;# 
   769  019E                     	;# 
   770  019F                     	;# 
   771  020C                     	;# 
   772  020D                     	;# 
   773  0211                     	;# 
   774  0211                     	;# 
   775  0212                     	;# 
   776  0212                     	;# 
   777  0213                     	;# 
   778  0213                     	;# 
   779  0214                     	;# 
   780  0214                     	;# 
   781  0215                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0216                     	;# 
   785  0216                     	;# 
   786  0217                     	;# 
   787  0217                     	;# 
   788  0219                     	;# 
   789  021A                     	;# 
   790  021B                     	;# 
   791  021C                     	;# 
   792  021D                     	;# 
   793  021E                     	;# 
   794  021F                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0294                     	;# 
   800  0295                     	;# 
   801  0295                     	;# 
   802  0296                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  029B                     	;# 
   808  029C                     	;# 
   809  029C                     	;# 
   810  029D                     	;# 
   811  029E                     	;# 
   812  029E                     	;# 
   813  0311                     	;# 
   814  0311                     	;# 
   815  0312                     	;# 
   816  0313                     	;# 
   817  0318                     	;# 
   818  0318                     	;# 
   819  0319                     	;# 
   820  031A                     	;# 
   821  0394                     	;# 
   822  0395                     	;# 
   823  0396                     	;# 
   824  039A                     	;# 
   825  039C                     	;# 
   826  039D                     	;# 
   827  039E                     	;# 
   828  039F                     	;# 
   829  0415                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  0FE4                     	;# 
   836  0FE5                     	;# 
   837  0FE6                     	;# 
   838  0FE7                     	;# 
   839  0FE8                     	;# 
   840  0FE9                     	;# 
   841  0FEA                     	;# 
   842  0FEB                     	;# 
   843  0FED                     	;# 
   844  0FEE                     	;# 
   845  0FEF                     	;# 
   846  0000                     	;# 
   847  0001                     	;# 
   848  0002                     	;# 
   849  0003                     	;# 
   850  0004                     	;# 
   851  0005                     	;# 
   852  0006                     	;# 
   853  0007                     	;# 
   854  0008                     	;# 
   855  0009                     	;# 
   856  000A                     	;# 
   857  000B                     	;# 
   858  000C                     	;# 
   859  000D                     	;# 
   860  0011                     	;# 
   861  0012                     	;# 
   862  0013                     	;# 
   863  0014                     	;# 
   864  0015                     	;# 
   865  0016                     	;# 
   866  0016                     	;# 
   867  0017                     	;# 
   868  0018                     	;# 
   869  0019                     	;# 
   870  001A                     	;# 
   871  001B                     	;# 
   872  001C                     	;# 
   873  001E                     	;# 
   874  001F                     	;# 
   875  008C                     	;# 
   876  008D                     	;# 
   877  0091                     	;# 
   878  0092                     	;# 
   879  0093                     	;# 
   880  0094                     	;# 
   881  0095                     	;# 
   882  0096                     	;# 
   883  0097                     	;# 
   884  0098                     	;# 
   885  0099                     	;# 
   886  009A                     	;# 
   887  009B                     	;# 
   888  009B                     	;# 
   889  009C                     	;# 
   890  009D                     	;# 
   891  009E                     	;# 
   892  010C                     	;# 
   893  010D                     	;# 
   894  0111                     	;# 
   895  0112                     	;# 
   896  0113                     	;# 
   897  0114                     	;# 
   898  0115                     	;# 
   899  0116                     	;# 
   900  0117                     	;# 
   901  0118                     	;# 
   902  0119                     	;# 
   903  011A                     	;# 
   904  011B                     	;# 
   905  011D                     	;# 
   906  011E                     	;# 
   907  018C                     	;# 
   908  018D                     	;# 
   909  0191                     	;# 
   910  0191                     	;# 
   911  0192                     	;# 
   912  0193                     	;# 
   913  0193                     	;# 
   914  0193                     	;# 
   915  0194                     	;# 
   916  0195                     	;# 
   917  0196                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019C                     	;# 
   925  019C                     	;# 
   926  019D                     	;# 
   927  019E                     	;# 
   928  019F                     	;# 
   929  020C                     	;# 
   930  020D                     	;# 
   931  0211                     	;# 
   932  0211                     	;# 
   933  0212                     	;# 
   934  0212                     	;# 
   935  0213                     	;# 
   936  0213                     	;# 
   937  0214                     	;# 
   938  0214                     	;# 
   939  0215                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0216                     	;# 
   943  0216                     	;# 
   944  0217                     	;# 
   945  0217                     	;# 
   946  0219                     	;# 
   947  021A                     	;# 
   948  021B                     	;# 
   949  021C                     	;# 
   950  021D                     	;# 
   951  021E                     	;# 
   952  021F                     	;# 
   953  0291                     	;# 
   954  0291                     	;# 
   955  0292                     	;# 
   956  0293                     	;# 
   957  0294                     	;# 
   958  0295                     	;# 
   959  0295                     	;# 
   960  0296                     	;# 
   961  0298                     	;# 
   962  0298                     	;# 
   963  0299                     	;# 
   964  029A                     	;# 
   965  029B                     	;# 
   966  029C                     	;# 
   967  029C                     	;# 
   968  029D                     	;# 
   969  029E                     	;# 
   970  029E                     	;# 
   971  0311                     	;# 
   972  0311                     	;# 
   973  0312                     	;# 
   974  0313                     	;# 
   975  0318                     	;# 
   976  0318                     	;# 
   977  0319                     	;# 
   978  031A                     	;# 
   979  0394                     	;# 
   980  0395                     	;# 
   981  0396                     	;# 
   982  039A                     	;# 
   983  039C                     	;# 
   984  039D                     	;# 
   985  039E                     	;# 
   986  039F                     	;# 
   987  0415                     	;# 
   988  0416                     	;# 
   989  0417                     	;# 
   990  041C                     	;# 
   991  041D                     	;# 
   992  041E                     	;# 
   993  0FE4                     	;# 
   994  0FE5                     	;# 
   995  0FE6                     	;# 
   996  0FE7                     	;# 
   997  0FE8                     	;# 
   998  0FE9                     	;# 
   999  0FEA                     	;# 
  1000  0FEB                     	;# 
  1001  0FED                     	;# 
  1002  0FEE                     	;# 
  1003  0FEF                     	;# 
  1004  0000                     	;# 
  1005  0001                     	;# 
  1006  0002                     	;# 
  1007  0003                     	;# 
  1008  0004                     	;# 
  1009  0005                     	;# 
  1010  0006                     	;# 
  1011  0007                     	;# 
  1012  0008                     	;# 
  1013  0009                     	;# 
  1014  000A                     	;# 
  1015  000B                     	;# 
  1016  000C                     	;# 
  1017  000D                     	;# 
  1018  0011                     	;# 
  1019  0012                     	;# 
  1020  0013                     	;# 
  1021  0014                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  001E                     	;# 
  1032  001F                     	;# 
  1033  008C                     	;# 
  1034  008D                     	;# 
  1035  0091                     	;# 
  1036  0092                     	;# 
  1037  0093                     	;# 
  1038  0094                     	;# 
  1039  0095                     	;# 
  1040  0096                     	;# 
  1041  0097                     	;# 
  1042  0098                     	;# 
  1043  0099                     	;# 
  1044  009A                     	;# 
  1045  009B                     	;# 
  1046  009B                     	;# 
  1047  009C                     	;# 
  1048  009D                     	;# 
  1049  009E                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  0111                     	;# 
  1053  0112                     	;# 
  1054  0113                     	;# 
  1055  0114                     	;# 
  1056  0115                     	;# 
  1057  0116                     	;# 
  1058  0117                     	;# 
  1059  0118                     	;# 
  1060  0119                     	;# 
  1061  011A                     	;# 
  1062  011B                     	;# 
  1063  011D                     	;# 
  1064  011E                     	;# 
  1065  018C                     	;# 
  1066  018D                     	;# 
  1067  0191                     	;# 
  1068  0191                     	;# 
  1069  0192                     	;# 
  1070  0193                     	;# 
  1071  0193                     	;# 
  1072  0193                     	;# 
  1073  0194                     	;# 
  1074  0195                     	;# 
  1075  0196                     	;# 
  1076  0199                     	;# 
  1077  019A                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019C                     	;# 
  1083  019C                     	;# 
  1084  019D                     	;# 
  1085  019E                     	;# 
  1086  019F                     	;# 
  1087  020C                     	;# 
  1088  020D                     	;# 
  1089  0211                     	;# 
  1090  0211                     	;# 
  1091  0212                     	;# 
  1092  0212                     	;# 
  1093  0213                     	;# 
  1094  0213                     	;# 
  1095  0214                     	;# 
  1096  0214                     	;# 
  1097  0215                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0216                     	;# 
  1101  0216                     	;# 
  1102  0217                     	;# 
  1103  0217                     	;# 
  1104  0219                     	;# 
  1105  021A                     	;# 
  1106  021B                     	;# 
  1107  021C                     	;# 
  1108  021D                     	;# 
  1109  021E                     	;# 
  1110  021F                     	;# 
  1111  0291                     	;# 
  1112  0291                     	;# 
  1113  0292                     	;# 
  1114  0293                     	;# 
  1115  0294                     	;# 
  1116  0295                     	;# 
  1117  0295                     	;# 
  1118  0296                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  029B                     	;# 
  1124  029C                     	;# 
  1125  029C                     	;# 
  1126  029D                     	;# 
  1127  029E                     	;# 
  1128  029E                     	;# 
  1129  0311                     	;# 
  1130  0311                     	;# 
  1131  0312                     	;# 
  1132  0313                     	;# 
  1133  0318                     	;# 
  1134  0318                     	;# 
  1135  0319                     	;# 
  1136  031A                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  039A                     	;# 
  1141  039C                     	;# 
  1142  039D                     	;# 
  1143  039E                     	;# 
  1144  039F                     	;# 
  1145  0415                     	;# 
  1146  0416                     	;# 
  1147  0417                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  0011                     	;# 
  1177  0012                     	;# 
  1178  0013                     	;# 
  1179  0014                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  001E                     	;# 
  1190  001F                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0093                     	;# 
  1196  0094                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0098                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  0111                     	;# 
  1211  0112                     	;# 
  1212  0113                     	;# 
  1213  0114                     	;# 
  1214  0115                     	;# 
  1215  0116                     	;# 
  1216  0117                     	;# 
  1217  0118                     	;# 
  1218  0119                     	;# 
  1219  011A                     	;# 
  1220  011B                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  018C                     	;# 
  1224  018D                     	;# 
  1225  0191                     	;# 
  1226  0191                     	;# 
  1227  0192                     	;# 
  1228  0193                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0194                     	;# 
  1232  0195                     	;# 
  1233  0196                     	;# 
  1234  0199                     	;# 
  1235  019A                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019C                     	;# 
  1242  019D                     	;# 
  1243  019E                     	;# 
  1244  019F                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  0211                     	;# 
  1248  0211                     	;# 
  1249  0212                     	;# 
  1250  0212                     	;# 
  1251  0213                     	;# 
  1252  0213                     	;# 
  1253  0214                     	;# 
  1254  0214                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0216                     	;# 
  1260  0217                     	;# 
  1261  0217                     	;# 
  1262  0219                     	;# 
  1263  021A                     	;# 
  1264  021B                     	;# 
  1265  021C                     	;# 
  1266  021D                     	;# 
  1267  021E                     	;# 
  1268  021F                     	;# 
  1269  0291                     	;# 
  1270  0291                     	;# 
  1271  0292                     	;# 
  1272  0293                     	;# 
  1273  0294                     	;# 
  1274  0295                     	;# 
  1275  0295                     	;# 
  1276  0296                     	;# 
  1277  0298                     	;# 
  1278  0298                     	;# 
  1279  0299                     	;# 
  1280  029A                     	;# 
  1281  029B                     	;# 
  1282  029C                     	;# 
  1283  029C                     	;# 
  1284  029D                     	;# 
  1285  029E                     	;# 
  1286  029E                     	;# 
  1287  0311                     	;# 
  1288  0311                     	;# 
  1289  0312                     	;# 
  1290  0313                     	;# 
  1291  0318                     	;# 
  1292  0318                     	;# 
  1293  0319                     	;# 
  1294  031A                     	;# 
  1295  0394                     	;# 
  1296  0395                     	;# 
  1297  0396                     	;# 
  1298  039A                     	;# 
  1299  039C                     	;# 
  1300  039D                     	;# 
  1301  039E                     	;# 
  1302  039F                     	;# 
  1303  0415                     	;# 
  1304  0416                     	;# 
  1305  0417                     	;# 
  1306  041C                     	;# 
  1307  041D                     	;# 
  1308  041E                     	;# 
  1309  0FE4                     	;# 
  1310  0FE5                     	;# 
  1311  0FE6                     	;# 
  1312  0FE7                     	;# 
  1313  0FE8                     	;# 
  1314  0FE9                     	;# 
  1315  0FEA                     	;# 
  1316  0FEB                     	;# 
  1317  0FED                     	;# 
  1318  0FEE                     	;# 
  1319  0FEF                     	;# 
  1320  0000                     	;# 
  1321  0001                     	;# 
  1322  0002                     	;# 
  1323  0003                     	;# 
  1324  0004                     	;# 
  1325  0005                     	;# 
  1326  0006                     	;# 
  1327  0007                     	;# 
  1328  0008                     	;# 
  1329  0009                     	;# 
  1330  000A                     	;# 
  1331  000B                     	;# 
  1332  000C                     	;# 
  1333  000D                     	;# 
  1334  0011                     	;# 
  1335  0012                     	;# 
  1336  0013                     	;# 
  1337  0014                     	;# 
  1338  0015                     	;# 
  1339  0016                     	;# 
  1340  0016                     	;# 
  1341  0017                     	;# 
  1342  0018                     	;# 
  1343  0019                     	;# 
  1344  001A                     	;# 
  1345  001B                     	;# 
  1346  001C                     	;# 
  1347  001E                     	;# 
  1348  001F                     	;# 
  1349  008C                     	;# 
  1350  008D                     	;# 
  1351  0091                     	;# 
  1352  0092                     	;# 
  1353  0093                     	;# 
  1354  0094                     	;# 
  1355  0095                     	;# 
  1356  0096                     	;# 
  1357  0097                     	;# 
  1358  0098                     	;# 
  1359  0099                     	;# 
  1360  009A                     	;# 
  1361  009B                     	;# 
  1362  009B                     	;# 
  1363  009C                     	;# 
  1364  009D                     	;# 
  1365  009E                     	;# 
  1366  010C                     	;# 
  1367  010D                     	;# 
  1368  0111                     	;# 
  1369  0112                     	;# 
  1370  0113                     	;# 
  1371  0114                     	;# 
  1372  0115                     	;# 
  1373  0116                     	;# 
  1374  0117                     	;# 
  1375  0118                     	;# 
  1376  0119                     	;# 
  1377  011A                     	;# 
  1378  011B                     	;# 
  1379  011D                     	;# 
  1380  011E                     	;# 
  1381  018C                     	;# 
  1382  018D                     	;# 
  1383  0191                     	;# 
  1384  0191                     	;# 
  1385  0192                     	;# 
  1386  0193                     	;# 
  1387  0193                     	;# 
  1388  0193                     	;# 
  1389  0194                     	;# 
  1390  0195                     	;# 
  1391  0196                     	;# 
  1392  0199                     	;# 
  1393  019A                     	;# 
  1394  019B                     	;# 
  1395  019B                     	;# 
  1396  019B                     	;# 
  1397  019B                     	;# 
  1398  019C                     	;# 
  1399  019C                     	;# 
  1400  019D                     	;# 
  1401  019E                     	;# 
  1402  019F                     	;# 
  1403  020C                     	;# 
  1404  020D                     	;# 
  1405  0211                     	;# 
  1406  0211                     	;# 
  1407  0212                     	;# 
  1408  0212                     	;# 
  1409  0213                     	;# 
  1410  0213                     	;# 
  1411  0214                     	;# 
  1412  0214                     	;# 
  1413  0215                     	;# 
  1414  0215                     	;# 
  1415  0215                     	;# 
  1416  0216                     	;# 
  1417  0216                     	;# 
  1418  0217                     	;# 
  1419  0217                     	;# 
  1420  0219                     	;# 
  1421  021A                     	;# 
  1422  021B                     	;# 
  1423  021C                     	;# 
  1424  021D                     	;# 
  1425  021E                     	;# 
  1426  021F                     	;# 
  1427  0291                     	;# 
  1428  0291                     	;# 
  1429  0292                     	;# 
  1430  0293                     	;# 
  1431  0294                     	;# 
  1432  0295                     	;# 
  1433  0295                     	;# 
  1434  0296                     	;# 
  1435  0298                     	;# 
  1436  0298                     	;# 
  1437  0299                     	;# 
  1438  029A                     	;# 
  1439  029B                     	;# 
  1440  029C                     	;# 
  1441  029C                     	;# 
  1442  029D                     	;# 
  1443  029E                     	;# 
  1444  029E                     	;# 
  1445  0311                     	;# 
  1446  0311                     	;# 
  1447  0312                     	;# 
  1448  0313                     	;# 
  1449  0318                     	;# 
  1450  0318                     	;# 
  1451  0319                     	;# 
  1452  031A                     	;# 
  1453  0394                     	;# 
  1454  0395                     	;# 
  1455  0396                     	;# 
  1456  039A                     	;# 
  1457  039C                     	;# 
  1458  039D                     	;# 
  1459  039E                     	;# 
  1460  039F                     	;# 
  1461  0415                     	;# 
  1462  0416                     	;# 
  1463  0417                     	;# 
  1464  041C                     	;# 
  1465  041D                     	;# 
  1466  041E                     	;# 
  1467  0FE4                     	;# 
  1468  0FE5                     	;# 
  1469  0FE6                     	;# 
  1470  0FE7                     	;# 
  1471  0FE8                     	;# 
  1472  0FE9                     	;# 
  1473  0FEA                     	;# 
  1474  0FEB                     	;# 
  1475  0FED                     	;# 
  1476  0FEE                     	;# 
  1477  0FEF                     	;# 
  1478  0000                     	;# 
  1479  0001                     	;# 
  1480  0002                     	;# 
  1481  0003                     	;# 
  1482  0004                     	;# 
  1483  0005                     	;# 
  1484  0006                     	;# 
  1485  0007                     	;# 
  1486  0008                     	;# 
  1487  0009                     	;# 
  1488  000A                     	;# 
  1489  000B                     	;# 
  1490  000C                     	;# 
  1491  000D                     	;# 
  1492  0011                     	;# 
  1493  0012                     	;# 
  1494  0013                     	;# 
  1495  0014                     	;# 
  1496  0015                     	;# 
  1497  0016                     	;# 
  1498  0016                     	;# 
  1499  0017                     	;# 
  1500  0018                     	;# 
  1501  0019                     	;# 
  1502  001A                     	;# 
  1503  001B                     	;# 
  1504  001C                     	;# 
  1505  001E                     	;# 
  1506  001F                     	;# 
  1507  008C                     	;# 
  1508  008D                     	;# 
  1509  0091                     	;# 
  1510  0092                     	;# 
  1511  0093                     	;# 
  1512  0094                     	;# 
  1513  0095                     	;# 
  1514  0096                     	;# 
  1515  0097                     	;# 
  1516  0098                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  010C                     	;# 
  1525  010D                     	;# 
  1526  0111                     	;# 
  1527  0112                     	;# 
  1528  0113                     	;# 
  1529  0114                     	;# 
  1530  0115                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  0118                     	;# 
  1534  0119                     	;# 
  1535  011A                     	;# 
  1536  011B                     	;# 
  1537  011D                     	;# 
  1538  011E                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020C                     	;# 
  1562  020D                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0219                     	;# 
  1579  021A                     	;# 
  1580  021B                     	;# 
  1581  021C                     	;# 
  1582  021D                     	;# 
  1583  021E                     	;# 
  1584  021F                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0294                     	;# 
  1590  0295                     	;# 
  1591  0295                     	;# 
  1592  0296                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  029B                     	;# 
  1598  029C                     	;# 
  1599  029C                     	;# 
  1600  029D                     	;# 
  1601  029E                     	;# 
  1602  029E                     	;# 
  1603  0311                     	;# 
  1604  0311                     	;# 
  1605  0312                     	;# 
  1606  0313                     	;# 
  1607  0318                     	;# 
  1608  0318                     	;# 
  1609  0319                     	;# 
  1610  031A                     	;# 
  1611  0394                     	;# 
  1612  0395                     	;# 
  1613  0396                     	;# 
  1614  039A                     	;# 
  1615  039C                     	;# 
  1616  039D                     	;# 
  1617  039E                     	;# 
  1618  039F                     	;# 
  1619  0415                     	;# 
  1620  0416                     	;# 
  1621  0417                     	;# 
  1622  041C                     	;# 
  1623  041D                     	;# 
  1624  041E                     	;# 
  1625  0FE4                     	;# 
  1626  0FE5                     	;# 
  1627  0FE6                     	;# 
  1628  0FE7                     	;# 
  1629  0FE8                     	;# 
  1630  0FE9                     	;# 
  1631  0FEA                     	;# 
  1632  0FEB                     	;# 
  1633  0FED                     	;# 
  1634  0FEE                     	;# 
  1635  0FEF                     	;# 
  1636  0000                     	;# 
  1637  0001                     	;# 
  1638  0002                     	;# 
  1639  0003                     	;# 
  1640  0004                     	;# 
  1641  0005                     	;# 
  1642  0006                     	;# 
  1643  0007                     	;# 
  1644  0008                     	;# 
  1645  0009                     	;# 
  1646  000A                     	;# 
  1647  000B                     	;# 
  1648  000C                     	;# 
  1649  000D                     	;# 
  1650  0011                     	;# 
  1651  0012                     	;# 
  1652  0013                     	;# 
  1653  0014                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  001E                     	;# 
  1664  001F                     	;# 
  1665  008C                     	;# 
  1666  008D                     	;# 
  1667  0091                     	;# 
  1668  0092                     	;# 
  1669  0093                     	;# 
  1670  0094                     	;# 
  1671  0095                     	;# 
  1672  0096                     	;# 
  1673  0097                     	;# 
  1674  0098                     	;# 
  1675  0099                     	;# 
  1676  009A                     	;# 
  1677  009B                     	;# 
  1678  009B                     	;# 
  1679  009C                     	;# 
  1680  009D                     	;# 
  1681  009E                     	;# 
  1682  010C                     	;# 
  1683  010D                     	;# 
  1684  0111                     	;# 
  1685  0112                     	;# 
  1686  0113                     	;# 
  1687  0114                     	;# 
  1688  0115                     	;# 
  1689  0116                     	;# 
  1690  0117                     	;# 
  1691  0118                     	;# 
  1692  0119                     	;# 
  1693  011A                     	;# 
  1694  011B                     	;# 
  1695  011D                     	;# 
  1696  011E                     	;# 
  1697  018C                     	;# 
  1698  018D                     	;# 
  1699  0191                     	;# 
  1700  0191                     	;# 
  1701  0192                     	;# 
  1702  0193                     	;# 
  1703  0193                     	;# 
  1704  0193                     	;# 
  1705  0194                     	;# 
  1706  0195                     	;# 
  1707  0196                     	;# 
  1708  0199                     	;# 
  1709  019A                     	;# 
  1710  019B                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019C                     	;# 
  1715  019C                     	;# 
  1716  019D                     	;# 
  1717  019E                     	;# 
  1718  019F                     	;# 
  1719  020C                     	;# 
  1720  020D                     	;# 
  1721  0211                     	;# 
  1722  0211                     	;# 
  1723  0212                     	;# 
  1724  0212                     	;# 
  1725  0213                     	;# 
  1726  0213                     	;# 
  1727  0214                     	;# 
  1728  0214                     	;# 
  1729  0215                     	;# 
  1730  0215                     	;# 
  1731  0215                     	;# 
  1732  0216                     	;# 
  1733  0216                     	;# 
  1734  0217                     	;# 
  1735  0217                     	;# 
  1736  0219                     	;# 
  1737  021A                     	;# 
  1738  021B                     	;# 
  1739  021C                     	;# 
  1740  021D                     	;# 
  1741  021E                     	;# 
  1742  021F                     	;# 
  1743  0291                     	;# 
  1744  0291                     	;# 
  1745  0292                     	;# 
  1746  0293                     	;# 
  1747  0294                     	;# 
  1748  0295                     	;# 
  1749  0295                     	;# 
  1750  0296                     	;# 
  1751  0298                     	;# 
  1752  0298                     	;# 
  1753  0299                     	;# 
  1754  029A                     	;# 
  1755  029B                     	;# 
  1756  029C                     	;# 
  1757  029C                     	;# 
  1758  029D                     	;# 
  1759  029E                     	;# 
  1760  029E                     	;# 
  1761  0311                     	;# 
  1762  0311                     	;# 
  1763  0312                     	;# 
  1764  0313                     	;# 
  1765  0318                     	;# 
  1766  0318                     	;# 
  1767  0319                     	;# 
  1768  031A                     	;# 
  1769  0394                     	;# 
  1770  0395                     	;# 
  1771  0396                     	;# 
  1772  039A                     	;# 
  1773  039C                     	;# 
  1774  039D                     	;# 
  1775  039E                     	;# 
  1776  039F                     	;# 
  1777  0415                     	;# 
  1778  0416                     	;# 
  1779  0417                     	;# 
  1780  041C                     	;# 
  1781  041D                     	;# 
  1782  041E                     	;# 
  1783  0FE4                     	;# 
  1784  0FE5                     	;# 
  1785  0FE6                     	;# 
  1786  0FE7                     	;# 
  1787  0FE8                     	;# 
  1788  0FE9                     	;# 
  1789  0FEA                     	;# 
  1790  0FEB                     	;# 
  1791  0FED                     	;# 
  1792  0FEE                     	;# 
  1793  0FEF                     	;# 
  1794  0000                     	;# 
  1795  0001                     	;# 
  1796  0002                     	;# 
  1797  0003                     	;# 
  1798  0004                     	;# 
  1799  0005                     	;# 
  1800  0006                     	;# 
  1801  0007                     	;# 
  1802  0008                     	;# 
  1803  0009                     	;# 
  1804  000A                     	;# 
  1805  000B                     	;# 
  1806  000C                     	;# 
  1807  000D                     	;# 
  1808  0011                     	;# 
  1809  0012                     	;# 
  1810  0013                     	;# 
  1811  0014                     	;# 
  1812  0015                     	;# 
  1813  0016                     	;# 
  1814  0016                     	;# 
  1815  0017                     	;# 
  1816  0018                     	;# 
  1817  0019                     	;# 
  1818  001A                     	;# 
  1819  001B                     	;# 
  1820  001C                     	;# 
  1821  001E                     	;# 
  1822  001F                     	;# 
  1823  008C                     	;# 
  1824  008D                     	;# 
  1825  0091                     	;# 
  1826  0092                     	;# 
  1827  0093                     	;# 
  1828  0094                     	;# 
  1829  0095                     	;# 
  1830  0096                     	;# 
  1831  0097                     	;# 
  1832  0098                     	;# 
  1833  0099                     	;# 
  1834  009A                     	;# 
  1835  009B                     	;# 
  1836  009B                     	;# 
  1837  009C                     	;# 
  1838  009D                     	;# 
  1839  009E                     	;# 
  1840  010C                     	;# 
  1841  010D                     	;# 
  1842  0111                     	;# 
  1843  0112                     	;# 
  1844  0113                     	;# 
  1845  0114                     	;# 
  1846  0115                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  0118                     	;# 
  1850  0119                     	;# 
  1851  011A                     	;# 
  1852  011B                     	;# 
  1853  011D                     	;# 
  1854  011E                     	;# 
  1855  018C                     	;# 
  1856  018D                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0194                     	;# 
  1864  0195                     	;# 
  1865  0196                     	;# 
  1866  0199                     	;# 
  1867  019A                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019C                     	;# 
  1873  019C                     	;# 
  1874  019D                     	;# 
  1875  019E                     	;# 
  1876  019F                     	;# 
  1877  020C                     	;# 
  1878  020D                     	;# 
  1879  0211                     	;# 
  1880  0211                     	;# 
  1881  0212                     	;# 
  1882  0212                     	;# 
  1883  0213                     	;# 
  1884  0213                     	;# 
  1885  0214                     	;# 
  1886  0214                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0216                     	;# 
  1891  0216                     	;# 
  1892  0217                     	;# 
  1893  0217                     	;# 
  1894  0219                     	;# 
  1895  021A                     	;# 
  1896  021B                     	;# 
  1897  021C                     	;# 
  1898  021D                     	;# 
  1899  021E                     	;# 
  1900  021F                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0298                     	;# 
  1910  0298                     	;# 
  1911  0299                     	;# 
  1912  029A                     	;# 
  1913  029B                     	;# 
  1914  029C                     	;# 
  1915  029C                     	;# 
  1916  029D                     	;# 
  1917  029E                     	;# 
  1918  029E                     	;# 
  1919  0311                     	;# 
  1920  0311                     	;# 
  1921  0312                     	;# 
  1922  0313                     	;# 
  1923  0318                     	;# 
  1924  0318                     	;# 
  1925  0319                     	;# 
  1926  031A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  039A                     	;# 
  1931  039C                     	;# 
  1932  039D                     	;# 
  1933  039E                     	;# 
  1934  039F                     	;# 
  1935  0415                     	;# 
  1936  0416                     	;# 
  1937  0417                     	;# 
  1938  041C                     	;# 
  1939  041D                     	;# 
  1940  041E                     	;# 
  1941  0FE4                     	;# 
  1942  0FE5                     	;# 
  1943  0FE6                     	;# 
  1944  0FE7                     	;# 
  1945  0FE8                     	;# 
  1946  0FE9                     	;# 
  1947  0FEA                     	;# 
  1948  0FEB                     	;# 
  1949  0FED                     	;# 
  1950  0FEE                     	;# 
  1951  0FEF                     	;# 
  1952  0000                     	;# 
  1953  0001                     	;# 
  1954  0002                     	;# 
  1955  0003                     	;# 
  1956  0004                     	;# 
  1957  0005                     	;# 
  1958  0006                     	;# 
  1959  0007                     	;# 
  1960  0008                     	;# 
  1961  0009                     	;# 
  1962  000A                     	;# 
  1963  000B                     	;# 
  1964  000C                     	;# 
  1965  000D                     	;# 
  1966  0011                     	;# 
  1967  0012                     	;# 
  1968  0013                     	;# 
  1969  0014                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  001E                     	;# 
  1980  001F                     	;# 
  1981  008C                     	;# 
  1982  008D                     	;# 
  1983  0091                     	;# 
  1984  0092                     	;# 
  1985  0093                     	;# 
  1986  0094                     	;# 
  1987  0095                     	;# 
  1988  0096                     	;# 
  1989  0097                     	;# 
  1990  0098                     	;# 
  1991  0099                     	;# 
  1992  009A                     	;# 
  1993  009B                     	;# 
  1994  009B                     	;# 
  1995  009C                     	;# 
  1996  009D                     	;# 
  1997  009E                     	;# 
  1998  010C                     	;# 
  1999  010D                     	;# 
  2000  0111                     	;# 
  2001  0112                     	;# 
  2002  0113                     	;# 
  2003  0114                     	;# 
  2004  0115                     	;# 
  2005  0116                     	;# 
  2006  0117                     	;# 
  2007  0118                     	;# 
  2008  0119                     	;# 
  2009  011A                     	;# 
  2010  011B                     	;# 
  2011  011D                     	;# 
  2012  011E                     	;# 
  2013  018C                     	;# 
  2014  018D                     	;# 
  2015  0191                     	;# 
  2016  0191                     	;# 
  2017  0192                     	;# 
  2018  0193                     	;# 
  2019  0193                     	;# 
  2020  0193                     	;# 
  2021  0194                     	;# 
  2022  0195                     	;# 
  2023  0196                     	;# 
  2024  0199                     	;# 
  2025  019A                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019D                     	;# 
  2033  019E                     	;# 
  2034  019F                     	;# 
  2035  020C                     	;# 
  2036  020D                     	;# 
  2037  0211                     	;# 
  2038  0211                     	;# 
  2039  0212                     	;# 
  2040  0212                     	;# 
  2041  0213                     	;# 
  2042  0213                     	;# 
  2043  0214                     	;# 
  2044  0214                     	;# 
  2045  0215                     	;# 
  2046  0215                     	;# 
  2047  0215                     	;# 
  2048  0216                     	;# 
  2049  0216                     	;# 
  2050  0217                     	;# 
  2051  0217                     	;# 
  2052  0219                     	;# 
  2053  021A                     	;# 
  2054  021B                     	;# 
  2055  021C                     	;# 
  2056  021D                     	;# 
  2057  021E                     	;# 
  2058  021F                     	;# 
  2059  0291                     	;# 
  2060  0291                     	;# 
  2061  0292                     	;# 
  2062  0293                     	;# 
  2063  0294                     	;# 
  2064  0295                     	;# 
  2065  0295                     	;# 
  2066  0296                     	;# 
  2067  0298                     	;# 
  2068  0298                     	;# 
  2069  0299                     	;# 
  2070  029A                     	;# 
  2071  029B                     	;# 
  2072  029C                     	;# 
  2073  029C                     	;# 
  2074  029D                     	;# 
  2075  029E                     	;# 
  2076  029E                     	;# 
  2077  0311                     	;# 
  2078  0311                     	;# 
  2079  0312                     	;# 
  2080  0313                     	;# 
  2081  0318                     	;# 
  2082  0318                     	;# 
  2083  0319                     	;# 
  2084  031A                     	;# 
  2085  0394                     	;# 
  2086  0395                     	;# 
  2087  0396                     	;# 
  2088  039A                     	;# 
  2089  039C                     	;# 
  2090  039D                     	;# 
  2091  039E                     	;# 
  2092  039F                     	;# 
  2093  0415                     	;# 
  2094  0416                     	;# 
  2095  0417                     	;# 
  2096  041C                     	;# 
  2097  041D                     	;# 
  2098  041E                     	;# 
  2099  0FE4                     	;# 
  2100  0FE5                     	;# 
  2101  0FE6                     	;# 
  2102  0FE7                     	;# 
  2103  0FE8                     	;# 
  2104  0FE9                     	;# 
  2105  0FEA                     	;# 
  2106  0FEB                     	;# 
  2107  0FED                     	;# 
  2108  0FEE                     	;# 
  2109  0FEF                     	;# 
  2110                           
  2111                           	psect	stringtext
  2112  07D9                     __pstringtext:	
  2113  07D9                     _fp_x0_a:	
  2114  07D9  34D0               	retlw	208
  2115  07DA  34D2               	retlw	210
  2116  07DB  3402               	retlw	2
  2117  07DC  3400               	retlw	0
  2118  07DD                     __end_of_fp_x0_a:	
  2119  07DD                     _fp_x0_b:	
  2120  07DD  34E4               	retlw	228
  2121  07DE  34E1               	retlw	225
  2122  07DF  3401               	retlw	1
  2123  07E0  3400               	retlw	0
  2124  07E1                     __end_of_fp_x0_b:	
  2125  07E1                     _ratio_mph:	
  2126  07E1  34F9               	retlw	249
  2127  07E2  349E               	retlw	158
  2128  07E3  3400               	retlw	0
  2129  07E4  3400               	retlw	0
  2130  07E5                     __end_of_ratio_mph:	
  2131  07E5                     convert_to_fp@one:	
  2132  07E5  3401               	retlw	1
  2133  07E6  3400               	retlw	0
  2134  07E7                     __end_ofconvert_to_fp@one:	
  2135  000B                     _INTCONbits	set	11
  2136  0011                     _PIR1bits	set	17
  2137  000D                     _PORTBbits	set	13
  2138  001B                     _PR2	set	27
  2139  001C                     _T2CON	set	28
  2140  001C                     _T2CONbits	set	28
  2141  0015                     _TMR0	set	21
  2142  001A                     _TMR2	set	26
  2143  0095                     _OPTION_REG	set	149
  2144  0095                     _OPTION_REGbits	set	149
  2145  0099                     _OSCCON	set	153
  2146  009A                     _OSCSTAT	set	154
  2147  0098                     _OSCTUNE	set	152
  2148  0091                     _PIE1bits	set	145
  2149  008C                     _TRISA	set	140
  2150  008D                     _TRISB	set	141
  2151  04D6                     _PLLR	set	1238
  2152  011D                     _APFCON0	set	285
  2153  011E                     _APFCON1	set	286
  2154  010C                     _LATA	set	268
  2155  010D                     _LATB	set	269
  2156  0862                     _LATA2	set	2146
  2157  018C                     _ANSELA	set	396
  2158  018D                     _ANSELB	set	397
  2159  019F                     _BAUDCON	set	415
  2160  0192                     _EEADRH	set	402
  2161  0191                     _EEADRL	set	401
  2162  0195                     _EECON1bits	set	405
  2163  0196                     _EECON2	set	406
  2164  0194                     _EEDATH	set	404
  2165  0193                     _EEDATL	set	403
  2166  0199                     _RCREG	set	409
  2167  019D                     _RCSTA	set	413
  2168  019D                     _RCSTAbits	set	413
  2169  019C                     _SPBRGH	set	412
  2170  019B                     _SPBRGL	set	411
  2171  019A                     _TXREG	set	410
  2172  019E                     _TXSTA	set	414
  2173  020C                     _WPUA	set	524
  2174  020D                     _WPUB	set	525
  2175  0293                     _CCP1CON	set	659
  2176  0292                     _CCPR1H	set	658
  2177  0291                     _CCPR1L	set	657
  2178  029E                     _CCPTMRS0bits	set	670
  2179  0295                     _ECCP1AS	set	661
  2180  0296                     _PSTR1CON	set	662
  2181  0294                     _PWM1CON	set	660
  2182  07E7                     STR_1:	
  2183  07E7  3424               	retlw	36	;'$'
  2184  07E8  3450               	retlw	80	;'P'
  2185  07E9  344D               	retlw	77	;'M'
  2186  07EA  3454               	retlw	84	;'T'
  2187  07EB  344B               	retlw	75	;'K'
  2188  07EC  3433               	retlw	51	;'3'
  2189  07ED  3431               	retlw	49	;'1'
  2190  07EE  3434               	retlw	52	;'4'
  2191  07EF  342C               	retlw	44	;','
  2192  07F0  3430               	retlw	48	;'0'
  2193  07F1  342C               	retlw	44	;','
  2194  07F2  3430               	retlw	48	;'0'
  2195  07F3  342C               	retlw	44	;','
  2196  07F4  3431               	retlw	49	;'1'
  2197  07F5  342C               	retlw	44	;','
  2198  07F6  3430               	retlw	48	;'0'
  2199  07F7  342C               	retlw	44	;','
  2200  07F8  3430               	retlw	48	;'0'
  2201  07F9  342C               	retlw	44	;','
  2202  07FA  3430               	retlw	48	;'0'
  2203  07FB  342C               	retlw	44	;','
  2204  07FC  3430               	retlw	48	;'0'
  2205  07FD  342C               	retlw	44	;','
  2206  07FE  3430               	retlw	48	;'0'
  2207  07FF  342C               	retlw	44	;','
  2208  0800  3430               	retlw	48	;'0'
  2209  0801  342C               	retlw	44	;','
  2210  0802  3430               	retlw	48	;'0'
  2211  0803  342C               	retlw	44	;','
  2212  0804  3430               	retlw	48	;'0'
  2213  0805  342C               	retlw	44	;','
  2214  0806  3430               	retlw	48	;'0'
  2215  0807  342C               	retlw	44	;','
  2216  0808  3430               	retlw	48	;'0'
  2217  0809  342C               	retlw	44	;','
  2218  080A  3430               	retlw	48	;'0'
  2219  080B  342C               	retlw	44	;','
  2220  080C  3430               	retlw	48	;'0'
  2221  080D  342C               	retlw	44	;','
  2222  080E  3430               	retlw	48	;'0'
  2223  080F  342C               	retlw	44	;','
  2224  0810  3430               	retlw	48	;'0'
  2225  0811  342C               	retlw	44	;','
  2226  0812  3430               	retlw	48	;'0'
  2227  0813  342C               	retlw	44	;','
  2228  0814  3430               	retlw	48	;'0'
  2229  0815  342A               	retlw	42	;'*'
  2230  0816  3432               	retlw	50	;'2'
  2231  0817  3439               	retlw	57	;'9'
  2232  0818  340D               	retlw	13
  2233  0819  340A               	retlw	10
  2234  081A  3400               	retlw	0
  2235  081B                     STR_2:	
  2236  081B  3424               	retlw	36	;'$'
  2237  081C  3450               	retlw	80	;'P'
  2238  081D  344D               	retlw	77	;'M'
  2239  081E  3454               	retlw	84	;'T'
  2240  081F  344B               	retlw	75	;'K'
  2241  0820  3432               	retlw	50	;'2'
  2242  0821  3432               	retlw	50	;'2'
  2243  0822  3430               	retlw	48	;'0'
  2244  0823  342C               	retlw	44	;','
  2245  0824  3431               	retlw	49	;'1'
  2246  0825  3430               	retlw	48	;'0'
  2247  0826  3430               	retlw	48	;'0'
  2248  0827  342A               	retlw	42	;'*'
  2249  0828  3432               	retlw	50	;'2'
  2250  0829  3446               	retlw	70	;'F'
  2251  082A  340D               	retlw	13
  2252  082B  340A               	retlw	10
  2253  082C  3400               	retlw	0
  2254                           
  2255                           ; #config settings
  2256  0000                     
  2257                           	psect	cinit
  2258  002B                     start_initialization:	
  2259  002B                     __initialization:	
  2260                           
  2261                           ; Clear objects allocated to COMMON
  2262  002B  01F6               	clrf	__pbssCOMMON& (0+127)
  2263  002C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2264  002D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2265  002E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2266                           
  2267                           ; Clear objects allocated to BANK0
  2268  002F  3054               	movlw	low __pbssBANK0
  2269  0030  0084               	movwf	4
  2270  0031  3000               	movlw	high __pbssBANK0
  2271  0032  0085               	movwf	5
  2272  0033  3007               	movlw	7
  2273  0034  3189  2168  3180   	fcall	clear_ram0
  2274                           
  2275                           ; Clear objects allocated to BANK1
  2276  0037  30A0               	movlw	low __pbssBANK1
  2277  0038  0084               	movwf	4
  2278  0039  3000               	movlw	high __pbssBANK1
  2279  003A  0085               	movwf	5
  2280  003B  3050               	movlw	80
  2281  003C  3189  2168         	fcall	clear_ram0
  2282  003E                     end_of_initialization:	
  2283                           ;End of C runtime variable initialization code
  2284                           
  2285  003E                     __end_of__initialization:	
  2286  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2287  003F  0020               	movlb	0
  2288  0040  3180  2842         	ljmp	_main	;jump to C main() function
  2289                           
  2290                           	psect	bssCOMMON
  2291  0076                     __pbssCOMMON:	
  2292  0076                     _m_LED:	
  2293  0076                     	ds	2
  2294  0078                     _eusartRxCount:	
  2295  0078                     	ds	1
  2296  0079                     _timer0ReloadVal:	
  2297  0079                     	ds	1
  2298                           
  2299                           	psect	bssBANK0
  2300  0054                     __pbssBANK0:	
  2301  0054                     _motor:	
  2302  0054                     	ds	2
  2303  0056                     _eusartRxHead:	
  2304  0056                     	ds	1
  2305  0057                     _eusartRxTail:	
  2306  0057                     	ds	1
  2307  0058                     _eusartTxBufferRemaining:	
  2308  0058                     	ds	1
  2309  0059                     _eusartTxHead:	
  2310  0059                     	ds	1
  2311  005A                     _eusartTxTail:	
  2312  005A                     	ds	1
  2313                           
  2314                           	psect	bssBANK1
  2315  00A0                     __pbssBANK1:	
  2316  00A0                     _eusartRxBuffer:	
  2317  00A0                     	ds	8
  2318  00A8                     _eusartTxBuffer:	
  2319  00A8                     	ds	8
  2320  00B0                     _m_button:	
  2321  00B0                     	ds	7
  2322  00B7                     _speed:	
  2323  00B7                     	ds	4
  2324  00BB                     TMR0_ISR@CountCallBack:	
  2325  00BB                     	ds	2
  2326  00BD                     _TMR0_InterruptHandler:	
  2327  00BD                     	ds	2
  2328  00BF                     _m_conf:	
  2329  00BF                     	ds	47
  2330  00EE                     _m_crc:	
  2331  00EE                     	ds	2
  2332                           
  2333                           	psect	clrtext
  2334  0968                     clear_ram0:	
  2335                           ;	Called with FSR0 containing the base address, and
  2336                           ;	WREG with the size to clear
  2337                           
  2338  0968  0064               	clrwdt	;clear the watchdog before getting into this loop
  2339  0969                     clrloop0:	
  2340  0969  0180               	clrf	0	;clear RAM location pointed to by FSR
  2341  096A  3101               	addfsr 0,1
  2342  096B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2343  096C  2969               	goto	clrloop0	;have we reached the end yet?
  2344  096D  3400               	retlw	0	;all done for this memory range, return
  2345                           
  2346                           	psect	cstackBANK2
  2347  0120                     __pcstackBANK2:	
  2348  0120                     main@new_motor:	
  2349                           
  2350                           ; 2 bytes @ 0x0
  2351  0120                     	ds	2
  2352  0122                     main@fp_motor:	
  2353                           
  2354                           ; 4 bytes @ 0x2
  2355  0122                     	ds	4
  2356  0126                     main@done:	
  2357                           
  2358                           ; 1 bytes @ 0x6
  2359  0126                     	ds	1
  2360  0127                     main@up:	
  2361                           
  2362                           ; 1 bytes @ 0x7
  2363  0127                     	ds	1
  2364  0128                     main@speed_int:	
  2365                           
  2366                           ; 2 bytes @ 0x8
  2367  0128                     	ds	2
  2368  012A                     main@tmp:	
  2369                           
  2370                           ; 4 bytes @ 0xA
  2371  012A                     	ds	4
  2372  012E                     main@__delay_tmp:	
  2373                           
  2374                           ; 1 bytes @ 0xE
  2375  012E                     	ds	1
  2376  012F                     main@__delay_tmp_731:	
  2377                           
  2378                           ; 1 bytes @ 0xF
  2379  012F                     	ds	1
  2380  0130                     main@a:	
  2381                           
  2382                           ; 4 bytes @ 0x10
  2383  0130                     	ds	4
  2384  0134                     main@b:	
  2385                           
  2386                           ; 4 bytes @ 0x14
  2387  0134                     	ds	4
  2388  0138                     main@i:	
  2389                           
  2390                           ; 1 bytes @ 0x18
  2391  0138                     	ds	1
  2392                           
  2393                           	psect	cstackCOMMON
  2394  0070                     __pcstackCOMMON:	
  2395  0070                     ?_PIN_MANAGER_Initialize:	
  2396  0070                     ?_OSCILLATOR_Initialize:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0070                     ?_EPWM1_Initialize:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0070                     ?_TMR2_Initialize:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_TMR0_Initialize:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_EUSART_Initialize:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?_TMR0_ISR:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_EUSART_Transmit_ISR:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ??_EUSART_Transmit_ISR:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?_EUSART_Receive_ISR:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ??_EUSART_Receive_ISR:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?_TMR0_DefaultInterruptHandler:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ??_TMR0_DefaultInterruptHandler:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ?_TMR0_CallBack:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?_TMR2_StartTimer:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ?_double_fast_blink:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?_button_init:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_LED_set_state:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ?_get_button_state:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?_my10msTimerISR:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_GPS_Initialize:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ?_GPS_read_speed:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_LED_update_loop:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ??_LED_update_loop:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_button_update_loop:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ?_SYSTEM_Initialize:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_INTERRUPT_InterruptManager:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_EUSART_Read:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_EUSART_Write:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_putch:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_DATAEE_ReadByte:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ?_load_calibration_from_EEPROM:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_write_calibration_to_EEPROM:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_perform_calibration:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_main:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ?i1_get_button_state:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ??i1_get_button_state:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     i1get_button_state@state:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507                           
  2508                           ; 1 bytes @ 0x0
  2509  0070                     	ds	1
  2510  0071                     ??_button_update_loop:	
  2511                           
  2512                           ; 1 bytes @ 0x1
  2513  0071                     	ds	1
  2514  0072                     button_update_loop@current_state:	
  2515                           
  2516                           ; 1 bytes @ 0x2
  2517  0072                     	ds	1
  2518  0073                     ??_TMR0_ISR:	
  2519  0073                     ??_TMR0_CallBack:	
  2520                           ; 1 bytes @ 0x3
  2521                           
  2522  0073                     ??_my10msTimerISR:	
  2523                           ; 1 bytes @ 0x3
  2524                           
  2525  0073                     ??_INTERRUPT_InterruptManager:	
  2526                           ; 1 bytes @ 0x3
  2527                           
  2528                           
  2529                           ; 1 bytes @ 0x3
  2530  0073                     	ds	1
  2531  0074                     ??_PIN_MANAGER_Initialize:	
  2532  0074                     ??_OSCILLATOR_Initialize:	
  2533                           ; 1 bytes @ 0x4
  2534                           
  2535  0074                     ??_EPWM1_Initialize:	
  2536                           ; 1 bytes @ 0x4
  2537                           
  2538  0074                     ??_TMR2_Initialize:	
  2539                           ; 1 bytes @ 0x4
  2540                           
  2541  0074                     ??_EUSART_Initialize:	
  2542                           ; 1 bytes @ 0x4
  2543                           
  2544  0074                     ?_TMR0_SetInterruptHandler:	
  2545                           ; 1 bytes @ 0x4
  2546                           
  2547  0074                     ??_TMR2_StartTimer:	
  2548                           ; 1 bytes @ 0x4
  2549                           
  2550  0074                     ??_LED_set_state:	
  2551                           ; 1 bytes @ 0x4
  2552                           
  2553  0074                     ??_get_button_state:	
  2554                           ; 1 bytes @ 0x4
  2555                           
  2556  0074                     ??_EUSART_Read:	
  2557                           ; 1 bytes @ 0x4
  2558                           
  2559  0074                     ??_EUSART_Write:	
  2560                           ; 1 bytes @ 0x4
  2561                           
  2562  0074                     ?_EPWM1_LoadDutyValue:	
  2563                           ; 1 bytes @ 0x4
  2564                           
  2565  0074                     ?_DATAEE_WriteByte:	
  2566                           ; 1 bytes @ 0x4
  2567                           
  2568  0074                     ??_DATAEE_ReadByte:	
  2569                           ; 1 bytes @ 0x4
  2570                           
  2571  0074                     ??___wmul:	
  2572                           ; 1 bytes @ 0x4
  2573                           
  2574  0074                     ??___lmul:	
  2575                           ; 1 bytes @ 0x4
  2576                           
  2577  0074                     DATAEE_WriteByte@bData:	
  2578                           ; 1 bytes @ 0x4
  2579                           
  2580  0074                     DATAEE_ReadByte@bAdd:	
  2581                           ; 1 bytes @ 0x4
  2582                           
  2583  0074                     get_button_state@state:	
  2584                           ; 1 bytes @ 0x4
  2585                           
  2586  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  2587                           ; 1 bytes @ 0x4
  2588                           
  2589  0074                     EPWM1_LoadDutyValue@dutyValue:	
  2590                           ; 2 bytes @ 0x4
  2591                           
  2592  0074                     ___wmul@product:	
  2593                           ; 2 bytes @ 0x4
  2594                           
  2595                           
  2596                           ; 2 bytes @ 0x4
  2597  0074                     	ds	1
  2598  0075                     ??_button_init:	
  2599  0075                     ??_DATAEE_WriteByte:	
  2600                           ; 1 bytes @ 0x5
  2601                           
  2602  0075                     ??_load_calibration_from_EEPROM:	
  2603                           ; 1 bytes @ 0x5
  2604                           
  2605  0075                     ??_write_calibration_to_EEPROM:	
  2606                           ; 1 bytes @ 0x5
  2607                           
  2608  0075                     EUSART_Read@readValue:	
  2609                           ; 1 bytes @ 0x5
  2610                           
  2611  0075                     EUSART_Write@txData:	
  2612                           ; 1 bytes @ 0x5
  2613                           
  2614  0075                     LED_set_state@new_state:	
  2615                           ; 1 bytes @ 0x5
  2616                           
  2617                           
  2618                           ; 1 bytes @ 0x5
  2619  0075                     	ds	1
  2620  0076                     ??_TMR0_SetInterruptHandler:	
  2621  0076                     ??_SYSTEM_Initialize:	
  2622                           ; 1 bytes @ 0x6
  2623                           
  2624  0076                     ??_putch:	
  2625                           ; 1 bytes @ 0x6
  2626                           
  2627                           
  2628                           	psect	cstackBANK0
  2629  0020                     __pcstackBANK0:	
  2630                           ; 1 bytes @ 0x6
  2631                           
  2632  0020                     ??_TMR0_Initialize:	
  2633  0020                     ??_double_fast_blink:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0020                     ??_EPWM1_LoadDutyValue:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0020                     ?_crc_update:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0020                     ?___wmul:	
  2643                           ; 2 bytes @ 0x0
  2644                           
  2645  0020                     ?___lmul:	
  2646                           ; 2 bytes @ 0x0
  2647                           
  2648  0020                     putch@txData:	
  2649                           ; 4 bytes @ 0x0
  2650                           
  2651  0020                     DATAEE_WriteByte@bAdd:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0020                     crc_update@old_crc:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0020                     ___wmul@multiplier:	
  2658                           ; 2 bytes @ 0x0
  2659                           
  2660  0020                     ___lmul@multiplier:	
  2661                           ; 2 bytes @ 0x0
  2662                           
  2663                           
  2664                           ; 4 bytes @ 0x0
  2665  0020                     	ds	1
  2666  0021                     ?_printf:	
  2667  0021                     DATAEE_WriteByte@GIEBitValue:	
  2668                           ; 2 bytes @ 0x1
  2669                           
  2670  0021                     printf@f:	
  2671                           ; 1 bytes @ 0x1
  2672                           
  2673                           
  2674                           ; 2 bytes @ 0x1
  2675  0021                     	ds	1
  2676  0022                     crc_update@data:	
  2677  0022                     ___wmul@multiplicand:	
  2678                           ; 1 bytes @ 0x2
  2679                           
  2680                           
  2681                           ; 2 bytes @ 0x2
  2682  0022                     	ds	1
  2683  0023                     ??_crc_update:	
  2684  0023                     ??_printf:	
  2685                           ; 1 bytes @ 0x3
  2686                           
  2687  0023                     ??_perform_calibration:	
  2688                           ; 1 bytes @ 0x3
  2689                           
  2690                           
  2691                           ; 1 bytes @ 0x3
  2692  0023                     	ds	1
  2693  0024                     ?_convert_to_fp:	
  2694  0024                     convert_to_fp@int_part:	
  2695                           ; 4 bytes @ 0x4
  2696                           
  2697  0024                     ___lmul@multiplicand:	
  2698                           ; 2 bytes @ 0x4
  2699                           
  2700                           
  2701                           ; 4 bytes @ 0x4
  2702  0024                     	ds	2
  2703  0026                     perform_calibration@done:	
  2704  0026                     printf@ap:	
  2705                           ; 1 bytes @ 0x6
  2706                           
  2707  0026                     convert_to_fp@fract_part:	
  2708                           ; 1 bytes @ 0x6
  2709                           
  2710                           
  2711                           ; 2 bytes @ 0x6
  2712  0026                     	ds	1
  2713  0027                     perform_calibration@replay:	
  2714  0027                     printf@c:	
  2715                           ; 1 bytes @ 0x7
  2716                           
  2717                           
  2718                           ; 1 bytes @ 0x7
  2719  0027                     	ds	1
  2720  0028                     ??_GPS_Initialize:	
  2721  0028                     ??_convert_to_fp:	
  2722                           ; 1 bytes @ 0x8
  2723                           
  2724  0028                     perform_calibration@__delay_tmp:	
  2725                           ; 1 bytes @ 0x8
  2726                           
  2727  0028                     ___lmul@product:	
  2728                           ; 1 bytes @ 0x8
  2729                           
  2730                           
  2731                           ; 4 bytes @ 0x8
  2732  0028                     	ds	1
  2733  0029                     perform_calibration@__delay_tmp_711:	
  2734                           
  2735                           ; 1 bytes @ 0x9
  2736  0029                     	ds	1
  2737  002A                     perform_calibration@__delay_tmp_712:	
  2738                           
  2739                           ; 1 bytes @ 0xA
  2740  002A                     	ds	1
  2741  002B                     perform_calibration@__delay_tmp_714:	
  2742  002B                     GPS_Initialize@__delay_tmp:	
  2743                           ; 1 bytes @ 0xB
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0xB
  2747  002B                     	ds	1
  2748  002C                     ?_multiply_fp:	
  2749  002C                     perform_calibration@__delay_tmp_715:	
  2750                           ; 4 bytes @ 0xC
  2751                           
  2752  002C                     multiply_fp@n1:	
  2753                           ; 1 bytes @ 0xC
  2754                           
  2755                           
  2756                           ; 4 bytes @ 0xC
  2757  002C                     	ds	1
  2758  002D                     perform_calibration@i:	
  2759  002D                     crc_update@crc:	
  2760                           ; 1 bytes @ 0xD
  2761                           
  2762                           
  2763                           ; 2 bytes @ 0xD
  2764  002D                     	ds	2
  2765  002F                     crc_update@x:	
  2766                           
  2767                           ; 2 bytes @ 0xF
  2768  002F                     	ds	1
  2769  0030                     convert_to_fp@res_fract:	
  2770  0030                     multiply_fp@n2:	
  2771                           ; 2 bytes @ 0x10
  2772                           
  2773                           
  2774                           ; 4 bytes @ 0x10
  2775  0030                     	ds	1
  2776  0031                     write_calibration_to_EEPROM@addr:	
  2777  0031                     load_calibration_from_EEPROM@crc:	
  2778                           ; 1 bytes @ 0x11
  2779                           
  2780                           
  2781                           ; 2 bytes @ 0x11
  2782  0031                     	ds	1
  2783  0032                     write_calibration_to_EEPROM@p:	
  2784  0032                     convert_to_fp@i_bit:	
  2785                           ; 1 bytes @ 0x12
  2786                           
  2787                           
  2788                           ; 1 bytes @ 0x12
  2789  0032                     	ds	1
  2790  0033                     load_calibration_from_EEPROM@addr:	
  2791  0033                     write_calibration_to_EEPROM@i:	
  2792                           ; 1 bytes @ 0x13
  2793                           
  2794  0033                     convert_to_fp@tmp_left:	
  2795                           ; 1 bytes @ 0x13
  2796                           
  2797                           
  2798                           ; 2 bytes @ 0x13
  2799  0033                     	ds	1
  2800  0034                     ??_multiply_fp:	
  2801  0034                     load_calibration_from_EEPROM@p:	
  2802                           ; 1 bytes @ 0x14
  2803                           
  2804                           
  2805                           ; 1 bytes @ 0x14
  2806  0034                     	ds	1
  2807  0035                     load_calibration_from_EEPROM@i:	
  2808  0035                     convert_to_fp@res:	
  2809                           ; 1 bytes @ 0x15
  2810                           
  2811                           
  2812                           ; 4 bytes @ 0x15
  2813  0035                     	ds	4
  2814  0039                     ??_GPS_read_speed:	
  2815  0039                     ?_integer_part:	
  2816                           ; 1 bytes @ 0x19
  2817                           
  2818  0039                     integer_part@n:	
  2819                           ; 2 bytes @ 0x19
  2820                           
  2821                           
  2822                           ; 4 bytes @ 0x19
  2823  0039                     	ds	2
  2824  003B                     GPS_read_speed@before_dot:	
  2825                           
  2826                           ; 1 bytes @ 0x1B
  2827  003B                     	ds	1
  2828  003C                     GPS_read_speed@no_more_checksum:	
  2829                           
  2830                           ; 1 bytes @ 0x1C
  2831  003C                     	ds	1
  2832  003D                     ??_integer_part:	
  2833  003D                     GPS_read_speed@read_speed_int:	
  2834                           ; 1 bytes @ 0x1D
  2835                           
  2836                           
  2837                           ; 2 bytes @ 0x1D
  2838  003D                     	ds	2
  2839  003F                     GPS_read_speed@read_speed_fra:	
  2840                           
  2841                           ; 2 bytes @ 0x1F
  2842  003F                     	ds	2
  2843  0041                     GPS_read_speed@checksum2:	
  2844                           
  2845                           ; 1 bytes @ 0x21
  2846  0041                     	ds	1
  2847  0042                     GPS_read_speed@checksum:	
  2848  0042                     multiply_fp@res:	
  2849                           ; 1 bytes @ 0x22
  2850                           
  2851  0042                     integer_part@and_a_half:	
  2852                           ; 4 bytes @ 0x22
  2853                           
  2854                           
  2855                           ; 4 bytes @ 0x22
  2856  0042                     	ds	1
  2857  0043                     GPS_read_speed@buffer:	
  2858                           
  2859                           ; 6 bytes @ 0x23
  2860  0043                     	ds	3
  2861  0046                     integer_part@neg:	
  2862                           
  2863                           ; 1 bytes @ 0x26
  2864  0046                     	ds	1
  2865  0047                     integer_part@int_part:	
  2866                           
  2867                           ; 2 bytes @ 0x27
  2868  0047                     	ds	2
  2869  0049                     GPS_read_speed@i_buff2:	
  2870                           
  2871                           ; 1 bytes @ 0x29
  2872  0049                     	ds	1
  2873  004A                     GPS_read_speed@i_buff:	
  2874                           
  2875                           ; 1 bytes @ 0x2A
  2876  004A                     	ds	1
  2877  004B                     GPS_read_speed@m_char:	
  2878                           
  2879                           ; 1 bytes @ 0x2B
  2880  004B                     	ds	1
  2881  004C                     ??_main:	
  2882                           
  2883                           ; 1 bytes @ 0x2C
  2884  004C                     	ds	8
  2885                           
  2886                           	psect	maintext
  2887  0042                     __pmaintext:	
  2888 ;;
  2889 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  2890 ;;
  2891 ;; *************** function _main *****************
  2892 ;; Defined at:
  2893 ;;		line 229 in file "main.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;		None
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  __delay_tmp     1   15[BANK2 ] unsigned char 
  2898 ;;  __delay_tmp     1   14[BANK2 ] unsigned char 
  2899 ;;  b               4   20[BANK2 ] long 
  2900 ;;  a               4   16[BANK2 ] long 
  2901 ;;  tmp             4   10[BANK2 ] long 
  2902 ;;  fp_motor        4    2[BANK2 ] long 
  2903 ;;  speed_int       2    8[BANK2 ] unsigned short 
  2904 ;;  new_motor       2    0[BANK2 ] unsigned short 
  2905 ;;  i               1   24[BANK2 ] unsigned char 
  2906 ;;  up              1    7[BANK2 ] unsigned char 
  2907 ;;  done            1    6[BANK2 ] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : B1F/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2917 ;;      Params:         0       0       0       0       0       0
  2918 ;;      Locals:         0       0       0      25       0       0
  2919 ;;      Temps:          0       8       0       0       0       0
  2920 ;;      Totals:         0       8       0      25       0       0
  2921 ;;Total ram usage:       33 bytes
  2922 ;; Hardware stack levels required when called:   10
  2923 ;; This function calls:
  2924 ;;		_EPWM1_LoadDutyValue
  2925 ;;		_GPS_Initialize
  2926 ;;		_GPS_read_speed
  2927 ;;		_LED_set_state
  2928 ;;		_SYSTEM_Initialize
  2929 ;;		_TMR0_SetInterruptHandler
  2930 ;;		_TMR2_StartTimer
  2931 ;;		___wmul
  2932 ;;		_button_init
  2933 ;;		_convert_to_fp
  2934 ;;		_integer_part
  2935 ;;		_load_calibration_from_EEPROM
  2936 ;;		_multiply_fp
  2937 ;;		_perform_calibration
  2938 ;;		_write_calibration_to_EEPROM
  2939 ;; This function is called by:
  2940 ;;		Startup code after reset
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           
  2945                           ;psect for function _main
  2946  0042                     _main:	
  2947                           
  2948                           ;main.c: 232: SYSTEM_Initialize();
  2949                           
  2950                           ;incstack = 0
  2951                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2952  0042  3189  21CA  3180   	fcall	_SYSTEM_Initialize
  2953                           
  2954                           ;main.c: 234: LED_set_state(manual_mode);
  2955  0045  3004               	movlw	4
  2956  0046  318A  22C6  3180   	fcall	_LED_set_state
  2957                           
  2958                           ;main.c: 235: do { LATA2 = 0; } while(0);
  2959  0049  0022               	movlb	2	; select bank2
  2960  004A  110C               	bcf	12,2	;volatile
  2961                           
  2962                           ;main.c: 237: motor = 0;
  2963  004B  0020               	movlb	0	; select bank0
  2964  004C  01D4               	clrf	_motor
  2965  004D  01D5               	clrf	_motor+1
  2966                           
  2967                           ;main.c: 238: EPWM1_LoadDutyValue(1023-motor);
  2968  004E  0954               	comf	_motor,w
  2969  004F  00CC               	movwf	??_main
  2970  0050  0955               	comf	_motor+1,w
  2971  0051  00CD               	movwf	??_main+1
  2972  0052  0ACC               	incf	??_main,f
  2973  0053  1903               	skipnz
  2974  0054  0ACD               	incf	??_main+1,f
  2975  0055  084C               	movf	??_main,w
  2976  0056  3EFF               	addlw	255
  2977  0057  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  2978  0058  3003               	movlw	3
  2979  0059  3D4D               	addwfc	??_main+1,w
  2980  005A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  2981  005B  318A  2270  3180   	fcall	_EPWM1_LoadDutyValue
  2982                           
  2983                           ;main.c: 240: TMR2_StartTimer();
  2984  005E  3189  2153  3180   	fcall	_TMR2_StartTimer
  2985                           
  2986                           ;main.c: 241: TMR0_SetInterruptHandler(my10msTimerISR);
  2987  0061  3056               	movlw	low _my10msTimerISR
  2988  0062  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2989  0063  3009               	movlw	high _my10msTimerISR
  2990  0064  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2991  0065  3189  2162  3180   	fcall	_TMR0_SetInterruptHandler
  2992                           
  2993                           ;main.c: 243: (INTCONbits.GIE = 1);
  2994  0068  178B               	bsf	11,7	;volatile
  2995                           
  2996                           ;main.c: 245: (INTCONbits.PEIE = 1);
  2997  0069  170B               	bsf	11,6	;volatile
  2998                           
  2999                           ;main.c: 248: if (!load_calibration_from_EEPROM())
  3000  006A  318D  25B3  3180   	fcall	_load_calibration_from_EEPROM
  3001  006D  3A00               	xorlw	0
  3002  006E  1D03               	skipz
  3003  006F  2887               	goto	l4763
  3004                           
  3005                           ;main.c: 249: {
  3006                           ;main.c: 251: LED_set_state(slow_blinking);
  3007  0070  3002               	movlw	2
  3008  0071  318A  22C6  3180   	fcall	_LED_set_state
  3009  0074                     L4:	
  3010                           
  3011                           ;main.c: 252: button_init();
  3012  0074  3189  21AF  3180   	fcall	_button_init
  3013  0077                     l4759:	
  3014                           ;main.c: 253: while (m_button.confirmed_state != long_push)
  3015                           
  3016  0077  3002               	movlw	2
  3017  0078  0021               	movlb	1	; select bank1
  3018  0079  0630               	xorwf	_m_button^(0+128),w	;volatile
  3019  007A  1903               	btfsc	3,2
  3020  007B  2881               	goto	l4761
  3021                           
  3022                           ;main.c: 254: {
  3023                           ;main.c: 255: if (m_button.confirmed_state == short_push)
  3024  007C  0021               	movlb	1	; select bank1
  3025  007D  0330               	decf	_m_button^(0+128),w	;volatile
  3026  007E  1D03               	btfss	3,2
  3027  007F  2877               	goto	l4759
  3028  0080  2874               	goto	L4
  3029  0081                     l4761:	
  3030                           ;main.c: 256: button_init();
  3031                           
  3032                           
  3033                           ;main.c: 257: }
  3034                           ;main.c: 258: perform_calibration();
  3035  0081  318E  2622  3180   	fcall	_perform_calibration
  3036                           
  3037                           ;main.c: 259: write_calibration_to_EEPROM();
  3038  0084  318C  24E0  3180   	fcall	_write_calibration_to_EEPROM
  3039  0087                     l4763:	
  3040                           
  3041                           ;main.c: 260: }
  3042                           ;main.c: 262: GPS_Initialize();
  3043  0087  318B  239C  3180   	fcall	_GPS_Initialize
  3044                           
  3045                           ;main.c: 263: speed = 0;
  3046  008A  3000               	movlw	0
  3047  008B  0021               	movlb	1	; select bank1
  3048  008C  00BA               	movwf	(_speed+3)^(0+128)
  3049  008D  3000               	movlw	0
  3050  008E  00B9               	movwf	(_speed+2)^(0+128)
  3051  008F  3000               	movlw	0
  3052  0090  00B8               	movwf	(_speed+1)^(0+128)
  3053  0091  3000               	movlw	0
  3054  0092  00B7               	movwf	_speed^(0+128)
  3055  0093                     L1:	
  3056                           
  3057                           ;main.c: 265: button_init();
  3058  0093  3189  21AF  3180   	fcall	_button_init
  3059  0096                     l4769:	
  3060                           ;main.c: 266: unsigned short new_motor, speed_int;
  3061                           ;main.c: 267: t_fp a, b, tmp, fp_motor;
  3062                           ;main.c: 268: unsigned char i;
  3063                           ;main.c: 269: bool done;
  3064                           ;main.c: 270: while (1)
  3065                           
  3066                           
  3067                           ;main.c: 271: {
  3068                           ;main.c: 273: if (GPS_read_speed())
  3069  0096  3183  23E2  3180   	fcall	_GPS_read_speed
  3070  0099  3A00               	xorlw	0
  3071  009A  1903               	skipnz
  3072  009B  2B10               	goto	l4819
  3073                           
  3074                           ;main.c: 274: {
  3075                           ;main.c: 276: if (m_conf.use_mph > 0)
  3076  009C  0021               	movlb	1	; select bank1
  3077  009D  083F               	movf	_m_conf^(0+128),w
  3078  009E  1903               	btfsc	3,2
  3079  009F  28CE               	goto	l4775
  3080                           
  3081                           ;main.c: 277: speed = multiply_fp(speed, ratio_mph);
  3082  00A0  083A               	movf	(_speed+3)^(0+128),w
  3083  00A1  0020               	movlb	0	; select bank0
  3084  00A2  00AF               	movwf	multiply_fp@n1+3
  3085  00A3  0021               	movlb	1	; select bank1
  3086  00A4  0839               	movf	(_speed+2)^(0+128),w
  3087  00A5  0020               	movlb	0	; select bank0
  3088  00A6  00AE               	movwf	multiply_fp@n1+2
  3089  00A7  0021               	movlb	1	; select bank1
  3090  00A8  0838               	movf	(_speed+1)^(0+128),w
  3091  00A9  0020               	movlb	0	; select bank0
  3092  00AA  00AD               	movwf	multiply_fp@n1+1
  3093  00AB  0021               	movlb	1	; select bank1
  3094  00AC  0837               	movf	_speed^(0+128),w
  3095  00AD  0020               	movlb	0	; select bank0
  3096  00AE  00AC               	movwf	multiply_fp@n1
  3097  00AF  30E1               	movlw	low (_ratio_mph| (0+32768))
  3098  00B0  0084               	movwf	4
  3099  00B1  3087               	movlw	high (_ratio_mph| (0+32768))
  3100  00B2  0085               	movwf	5
  3101  00B3  3F00               	moviw [0]fsr0
  3102  00B4  00B0               	movwf	multiply_fp@n2
  3103  00B5  3F01               	moviw [1]fsr0
  3104  00B6  00B1               	movwf	multiply_fp@n2+1
  3105  00B7  3F02               	moviw [2]fsr0
  3106  00B8  00B2               	movwf	multiply_fp@n2+2
  3107  00B9  3F03               	moviw [3]fsr0
  3108  00BA  00B3               	movwf	multiply_fp@n2+3
  3109  00BB  3186  2637  3180   	fcall	_multiply_fp
  3110  00BE  0020               	movlb	0	; select bank0
  3111  00BF  082F               	movf	?_multiply_fp+3,w
  3112  00C0  0021               	movlb	1	; select bank1
  3113  00C1  00BA               	movwf	(_speed+3)^(0+128)
  3114  00C2  0020               	movlb	0	; select bank0
  3115  00C3  082E               	movf	?_multiply_fp+2,w
  3116  00C4  0021               	movlb	1	; select bank1
  3117  00C5  00B9               	movwf	(_speed+2)^(0+128)
  3118  00C6  0020               	movlb	0	; select bank0
  3119  00C7  082D               	movf	?_multiply_fp+1,w
  3120  00C8  0021               	movlb	1	; select bank1
  3121  00C9  00B8               	movwf	(_speed+1)^(0+128)
  3122  00CA  0020               	movlb	0	; select bank0
  3123  00CB  082C               	movf	?_multiply_fp,w
  3124  00CC  0021               	movlb	1	; select bank1
  3125  00CD  00B7               	movwf	_speed^(0+128)
  3126  00CE                     l4775:	
  3127                           ;main.c: 281: do { LATA2 = 1; } while(0);
  3128                           
  3129  00CE  0022               	movlb	2	; select bank2
  3130  00CF  150C               	bsf	12,2	;volatile
  3131                           
  3132                           ;main.c: 282: _delay((unsigned long)((20)*(32000000/4000.0)));
  3133  00D0  30D0               	movlw	208
  3134  00D1  0020               	movlb	0	; select bank0
  3135  00D2  00CD               	movwf	??_main+1
  3136  00D3  30C9               	movlw	201
  3137  00D4  00CC               	movwf	??_main
  3138  00D5                     u5777:	
  3139  00D5  0BCC               	decfsz	??_main,f
  3140  00D6  28D5               	goto	u5777
  3141  00D7  0BCD               	decfsz	??_main+1,f
  3142  00D8  28D5               	goto	u5777
  3143  00D9  3200               	nop2
  3144                           
  3145                           ;main.c: 283: do { LATA2 = 0; } while(0);
  3146  00DA  0022               	movlb	2	; select bank2
  3147  00DB  110C               	bcf	12,2	;volatile
  3148                           
  3149                           ;main.c: 286: speed_int = integer_part(speed);
  3150  00DC  0021               	movlb	1	; select bank1
  3151  00DD  083A               	movf	(_speed+3)^(0+128),w
  3152  00DE  0020               	movlb	0	; select bank0
  3153  00DF  00BC               	movwf	integer_part@n+3
  3154  00E0  0021               	movlb	1	; select bank1
  3155  00E1  0839               	movf	(_speed+2)^(0+128),w
  3156  00E2  0020               	movlb	0	; select bank0
  3157  00E3  00BB               	movwf	integer_part@n+2
  3158  00E4  0021               	movlb	1	; select bank1
  3159  00E5  0838               	movf	(_speed+1)^(0+128),w
  3160  00E6  0020               	movlb	0	; select bank0
  3161  00E7  00BA               	movwf	integer_part@n+1
  3162  00E8  0021               	movlb	1	; select bank1
  3163  00E9  0837               	movf	_speed^(0+128),w
  3164  00EA  0020               	movlb	0	; select bank0
  3165  00EB  00B9               	movwf	integer_part@n
  3166  00EC  318D  2548  3180   	fcall	_integer_part
  3167  00EF  0020               	movlb	0	; select bank0
  3168  00F0  083A               	movf	?_integer_part+1,w
  3169  00F1  0022               	movlb	2	; select bank2
  3170  00F2  00A9               	movwf	(main@speed_int+1)^(0+256)
  3171  00F3  0020               	movlb	0	; select bank0
  3172  00F4  0839               	movf	?_integer_part,w
  3173  00F5  0022               	movlb	2	; select bank2
  3174  00F6  00A8               	movwf	main@speed_int^(0+256)
  3175                           
  3176                           ;main.c: 287: i = 1;
  3177  00F7  01B8               	clrf	main@i^(0+256)
  3178  00F8  0AB8               	incf	main@i^(0+256),f
  3179                           
  3180                           ;main.c: 288: done = 0;
  3181  00F9  01A6               	clrf	main@done^(0+256)
  3182                           
  3183                           ;main.c: 289: while ((i<m_conf.nb_steps)&&(!done))
  3184  00FA  2B07               	goto	l424
  3185  00FB                     l4787:	
  3186                           
  3187                           ;main.c: 290: {
  3188                           ;main.c: 291: if (speed_int >= 10*(m_conf.nb_steps-i))
  3189  00FB  0838               	movf	main@i^(0+256),w
  3190  00FC  0020               	movlb	0	; select bank0
  3191  00FD  00CC               	movwf	??_main
  3192  00FE  01CD               	clrf	??_main+1
  3193  00FF  09CC               	comf	??_main,f
  3194  0100  09CD               	comf	??_main+1,f
  3195  0101  0ACC               	incf	??_main,f
  3196  0102  1903               	skipnz
  3197  0103  0ACD               	incf	??_main+1,f
  3198  0104  0021               	movlb	1	; select bank1
  3199  0105  0842               	movf	(_m_conf^(0+128)+3),w
  3200  0106  0020               	movlb	0	; select bank0
  3201  0107  074C               	addwf	??_main,w
  3202  0108  00A0               	movwf	___wmul@multiplier
  3203  0109  084D               	movf	??_main+1,w
  3204  010A  1803               	skipnc
  3205  010B  0A4D               	incf	??_main+1,w
  3206  010C  00A1               	movwf	___wmul@multiplier+1
  3207  010D  300A               	movlw	10
  3208  010E  00A2               	movwf	___wmul@multiplicand
  3209  010F  3000               	movlw	0
  3210  0110  00A3               	movwf	___wmul@multiplicand+1
  3211  0111  318A  2254  3180   	fcall	___wmul
  3212  0114  0020               	movlb	0	; select bank0
  3213  0115  0821               	movf	?___wmul+1,w
  3214  0116  0022               	movlb	2	; select bank2
  3215  0117  0229               	subwf	(main@speed_int+1)^(0+256),w
  3216  0118  1D03               	skipz
  3217  0119  291E               	goto	u5475
  3218  011A  0020               	movlb	0	; select bank0
  3219  011B  0820               	movf	?___wmul,w
  3220  011C  0022               	movlb	2	; select bank2
  3221  011D  0228               	subwf	main@speed_int^(0+256),w
  3222  011E                     u5475:	
  3223  011E  1C03               	skipc
  3224  011F  2AED               	goto	l4811
  3225                           
  3226                           ;main.c: 292: {
  3227                           ;main.c: 293: if (speed_int == 10*(m_conf.nb_steps-i))
  3228  0120  0838               	movf	main@i^(0+256),w
  3229  0121  0020               	movlb	0	; select bank0
  3230  0122  00CC               	movwf	??_main
  3231  0123  01CD               	clrf	??_main+1
  3232  0124  09CC               	comf	??_main,f
  3233  0125  09CD               	comf	??_main+1,f
  3234  0126  0ACC               	incf	??_main,f
  3235  0127  1903               	skipnz
  3236  0128  0ACD               	incf	??_main+1,f
  3237  0129  0021               	movlb	1	; select bank1
  3238  012A  0842               	movf	(_m_conf^(0+128)+3),w
  3239  012B  0020               	movlb	0	; select bank0
  3240  012C  074C               	addwf	??_main,w
  3241  012D  00A0               	movwf	___wmul@multiplier
  3242  012E  084D               	movf	??_main+1,w
  3243  012F  1803               	skipnc
  3244  0130  0A4D               	incf	??_main+1,w
  3245  0131  00A1               	movwf	___wmul@multiplier+1
  3246  0132  300A               	movlw	10
  3247  0133  00A2               	movwf	___wmul@multiplicand
  3248  0134  3000               	movlw	0
  3249  0135  00A3               	movwf	___wmul@multiplicand+1
  3250  0136  318A  2254  3180   	fcall	___wmul
  3251  0139  0022               	movlb	2	; select bank2
  3252  013A  0829               	movf	(main@speed_int+1)^(0+256),w
  3253  013B  0020               	movlb	0	; select bank0
  3254  013C  0621               	xorwf	?___wmul+1,w
  3255  013D  1D03               	skipz
  3256  013E  2943               	goto	u5485
  3257  013F  0022               	movlb	2	; select bank2
  3258  0140  0828               	movf	main@speed_int^(0+256),w
  3259  0141  0020               	movlb	0	; select bank0
  3260  0142  0620               	xorwf	?___wmul,w
  3261  0143                     u5485:	
  3262  0143  1D03               	skipz
  3263  0144  294F               	goto	l4793
  3264                           
  3265                           ;main.c: 294: new_motor = m_conf.ref_pwm[i];
  3266  0145  0022               	movlb	2	; select bank2
  3267  0146  3538               	lslf	main@i^(0+256),w
  3268  0147  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3269  0148  0086               	movwf	6
  3270  0149  0187               	clrf	7
  3271  014A  3F40               	moviw [0]fsr1
  3272  014B  00A0               	movwf	main@new_motor^(0+256)
  3273  014C  3F41               	moviw [1]fsr1
  3274  014D  00A1               	movwf	(main@new_motor+1)^(0+256)
  3275  014E  2B05               	goto	l4815
  3276  014F                     l4793:	
  3277                           
  3278                           ;main.c: 295: else
  3279                           ;main.c: 296: {
  3280                           ;main.c: 297: a = convert_to_fp((m_conf.ref_pwm[i-1]-m_conf.ref_pwm[i]),0);
  3281  014F  0022               	movlb	2	; select bank2
  3282  0150  3538               	lslf	main@i^(0+256),w
  3283  0151  3EFE               	addlw	254
  3284  0152  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3285  0153  0086               	movwf	6
  3286  0154  0187               	clrf	7
  3287  0155  3538               	lslf	main@i^(0+256),w
  3288  0156  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3289  0157  0084               	movwf	4
  3290  0158  0185               	clrf	5
  3291  0159  3F00               	moviw [0]fsr0
  3292  015A  0020               	movlb	0	; select bank0
  3293  015B  00CC               	movwf	??_main
  3294  015C  3F01               	moviw [1]fsr0
  3295  015D  00CD               	movwf	??_main+1
  3296  015E  09CC               	comf	??_main,f
  3297  015F  09CD               	comf	??_main+1,f
  3298  0160  0ACC               	incf	??_main,f
  3299  0161  1903               	skipnz
  3300  0162  0ACD               	incf	??_main+1,f
  3301  0163  3F40               	moviw [0]fsr1
  3302  0164  074C               	addwf	??_main,w
  3303  0165  00A4               	movwf	convert_to_fp@int_part
  3304  0166  3F41               	moviw [1]fsr1
  3305  0167  3D4D               	addwfc	??_main+1,w
  3306  0168  00A5               	movwf	convert_to_fp@int_part+1
  3307  0169  3000               	movlw	0
  3308  016A  00A6               	movwf	convert_to_fp@fract_part
  3309  016B  00A7               	movwf	convert_to_fp@fract_part+1
  3310  016C  3187  2730  3180   	fcall	_convert_to_fp
  3311  016F  0020               	movlb	0	; select bank0
  3312  0170  0827               	movf	?_convert_to_fp+3,w
  3313  0171  0022               	movlb	2	; select bank2
  3314  0172  00B3               	movwf	(main@a+3)^(0+256)
  3315  0173  0020               	movlb	0	; select bank0
  3316  0174  0826               	movf	?_convert_to_fp+2,w
  3317  0175  0022               	movlb	2	; select bank2
  3318  0176  00B2               	movwf	(main@a+2)^(0+256)
  3319  0177  0020               	movlb	0	; select bank0
  3320  0178  0825               	movf	?_convert_to_fp+1,w
  3321  0179  0022               	movlb	2	; select bank2
  3322  017A  00B1               	movwf	(main@a+1)^(0+256)
  3323  017B  0020               	movlb	0	; select bank0
  3324  017C  0824               	movf	?_convert_to_fp,w
  3325  017D  0022               	movlb	2	; select bank2
  3326  017E  00B0               	movwf	main@a^(0+256)
  3327                           
  3328                           ;main.c: 298: tmp = convert_to_fp(0,1000);
  3329  017F  3000               	movlw	0
  3330  0180  0020               	movlb	0	; select bank0
  3331  0181  00A4               	movwf	convert_to_fp@int_part
  3332  0182  00A5               	movwf	convert_to_fp@int_part+1
  3333  0183  30E8               	movlw	232
  3334  0184  00A6               	movwf	convert_to_fp@fract_part
  3335  0185  3003               	movlw	3
  3336  0186  00A7               	movwf	convert_to_fp@fract_part+1
  3337  0187  3187  2730  3180   	fcall	_convert_to_fp
  3338  018A  0020               	movlb	0	; select bank0
  3339  018B  0827               	movf	?_convert_to_fp+3,w
  3340  018C  0022               	movlb	2	; select bank2
  3341  018D  00AD               	movwf	(main@tmp+3)^(0+256)
  3342  018E  0020               	movlb	0	; select bank0
  3343  018F  0826               	movf	?_convert_to_fp+2,w
  3344  0190  0022               	movlb	2	; select bank2
  3345  0191  00AC               	movwf	(main@tmp+2)^(0+256)
  3346  0192  0020               	movlb	0	; select bank0
  3347  0193  0825               	movf	?_convert_to_fp+1,w
  3348  0194  0022               	movlb	2	; select bank2
  3349  0195  00AB               	movwf	(main@tmp+1)^(0+256)
  3350  0196  0020               	movlb	0	; select bank0
  3351  0197  0824               	movf	?_convert_to_fp,w
  3352  0198  0022               	movlb	2	; select bank2
  3353  0199  00AA               	movwf	main@tmp^(0+256)
  3354                           
  3355                           ;main.c: 300: a = multiply_fp(a, tmp);
  3356  019A  0833               	movf	(main@a+3)^(0+256),w
  3357  019B  0020               	movlb	0	; select bank0
  3358  019C  00AF               	movwf	multiply_fp@n1+3
  3359  019D  0022               	movlb	2	; select bank2
  3360  019E  0832               	movf	(main@a+2)^(0+256),w
  3361  019F  0020               	movlb	0	; select bank0
  3362  01A0  00AE               	movwf	multiply_fp@n1+2
  3363  01A1  0022               	movlb	2	; select bank2
  3364  01A2  0831               	movf	(main@a+1)^(0+256),w
  3365  01A3  0020               	movlb	0	; select bank0
  3366  01A4  00AD               	movwf	multiply_fp@n1+1
  3367  01A5  0022               	movlb	2	; select bank2
  3368  01A6  0830               	movf	main@a^(0+256),w
  3369  01A7  0020               	movlb	0	; select bank0
  3370  01A8  00AC               	movwf	multiply_fp@n1
  3371  01A9  0022               	movlb	2	; select bank2
  3372  01AA  082D               	movf	(main@tmp+3)^(0+256),w
  3373  01AB  0020               	movlb	0	; select bank0
  3374  01AC  00B3               	movwf	multiply_fp@n2+3
  3375  01AD  0022               	movlb	2	; select bank2
  3376  01AE  082C               	movf	(main@tmp+2)^(0+256),w
  3377  01AF  0020               	movlb	0	; select bank0
  3378  01B0  00B2               	movwf	multiply_fp@n2+2
  3379  01B1  0022               	movlb	2	; select bank2
  3380  01B2  082B               	movf	(main@tmp+1)^(0+256),w
  3381  01B3  0020               	movlb	0	; select bank0
  3382  01B4  00B1               	movwf	multiply_fp@n2+1
  3383  01B5  0022               	movlb	2	; select bank2
  3384  01B6  082A               	movf	main@tmp^(0+256),w
  3385  01B7  0020               	movlb	0	; select bank0
  3386  01B8  00B0               	movwf	multiply_fp@n2
  3387  01B9  3186  2637  3180   	fcall	_multiply_fp
  3388  01BC  0020               	movlb	0	; select bank0
  3389  01BD  082F               	movf	?_multiply_fp+3,w
  3390  01BE  0022               	movlb	2	; select bank2
  3391  01BF  00B3               	movwf	(main@a+3)^(0+256)
  3392  01C0  0020               	movlb	0	; select bank0
  3393  01C1  082E               	movf	?_multiply_fp+2,w
  3394  01C2  0022               	movlb	2	; select bank2
  3395  01C3  00B2               	movwf	(main@a+2)^(0+256)
  3396  01C4  0020               	movlb	0	; select bank0
  3397  01C5  082D               	movf	?_multiply_fp+1,w
  3398  01C6  0022               	movlb	2	; select bank2
  3399  01C7  00B1               	movwf	(main@a+1)^(0+256)
  3400  01C8  0020               	movlb	0	; select bank0
  3401  01C9  082C               	movf	?_multiply_fp,w
  3402  01CA  0022               	movlb	2	; select bank2
  3403  01CB  00B0               	movwf	main@a^(0+256)
  3404                           
  3405                           ;main.c: 301: b = convert_to_fp(10*(m_conf.nb_steps-i), 0);
  3406  01CC  0838               	movf	main@i^(0+256),w
  3407  01CD  0020               	movlb	0	; select bank0
  3408  01CE  00CC               	movwf	??_main
  3409  01CF  01CD               	clrf	??_main+1
  3410  01D0  09CC               	comf	??_main,f
  3411  01D1  09CD               	comf	??_main+1,f
  3412  01D2  0ACC               	incf	??_main,f
  3413  01D3  1903               	skipnz
  3414  01D4  0ACD               	incf	??_main+1,f
  3415  01D5  0021               	movlb	1	; select bank1
  3416  01D6  0842               	movf	(_m_conf^(0+128)+3),w
  3417  01D7  0020               	movlb	0	; select bank0
  3418  01D8  074C               	addwf	??_main,w
  3419  01D9  00A0               	movwf	___wmul@multiplier
  3420  01DA  084D               	movf	??_main+1,w
  3421  01DB  1803               	skipnc
  3422  01DC  0A4D               	incf	??_main+1,w
  3423  01DD  00A1               	movwf	___wmul@multiplier+1
  3424  01DE  300A               	movlw	10
  3425  01DF  00A2               	movwf	___wmul@multiplicand
  3426  01E0  3000               	movlw	0
  3427  01E1  00A3               	movwf	___wmul@multiplicand+1
  3428  01E2  318A  2254  3180   	fcall	___wmul
  3429  01E5  0020               	movlb	0	; select bank0
  3430  01E6  0821               	movf	?___wmul+1,w
  3431  01E7  00A5               	movwf	convert_to_fp@int_part+1
  3432  01E8  0820               	movf	?___wmul,w
  3433  01E9  00A4               	movwf	convert_to_fp@int_part
  3434  01EA  3000               	movlw	0
  3435  01EB  00A6               	movwf	convert_to_fp@fract_part
  3436  01EC  00A7               	movwf	convert_to_fp@fract_part+1
  3437  01ED  3187  2730  3180   	fcall	_convert_to_fp
  3438  01F0  0020               	movlb	0	; select bank0
  3439  01F1  0827               	movf	?_convert_to_fp+3,w
  3440  01F2  0022               	movlb	2	; select bank2
  3441  01F3  00B7               	movwf	(main@b+3)^(0+256)
  3442  01F4  0020               	movlb	0	; select bank0
  3443  01F5  0826               	movf	?_convert_to_fp+2,w
  3444  01F6  0022               	movlb	2	; select bank2
  3445  01F7  00B6               	movwf	(main@b+2)^(0+256)
  3446  01F8  0020               	movlb	0	; select bank0
  3447  01F9  0825               	movf	?_convert_to_fp+1,w
  3448  01FA  0022               	movlb	2	; select bank2
  3449  01FB  00B5               	movwf	(main@b+1)^(0+256)
  3450  01FC  0020               	movlb	0	; select bank0
  3451  01FD  0824               	movf	?_convert_to_fp,w
  3452  01FE  0022               	movlb	2	; select bank2
  3453  01FF  00B4               	movwf	main@b^(0+256)
  3454                           
  3455                           ;main.c: 302: b = multiply_fp(a, b);
  3456  0200  0833               	movf	(main@a+3)^(0+256),w
  3457  0201  0020               	movlb	0	; select bank0
  3458  0202  00AF               	movwf	multiply_fp@n1+3
  3459  0203  0022               	movlb	2	; select bank2
  3460  0204  0832               	movf	(main@a+2)^(0+256),w
  3461  0205  0020               	movlb	0	; select bank0
  3462  0206  00AE               	movwf	multiply_fp@n1+2
  3463  0207  0022               	movlb	2	; select bank2
  3464  0208  0831               	movf	(main@a+1)^(0+256),w
  3465  0209  0020               	movlb	0	; select bank0
  3466  020A  00AD               	movwf	multiply_fp@n1+1
  3467  020B  0022               	movlb	2	; select bank2
  3468  020C  0830               	movf	main@a^(0+256),w
  3469  020D  0020               	movlb	0	; select bank0
  3470  020E  00AC               	movwf	multiply_fp@n1
  3471  020F  0022               	movlb	2	; select bank2
  3472  0210  0837               	movf	(main@b+3)^(0+256),w
  3473  0211  0020               	movlb	0	; select bank0
  3474  0212  00B3               	movwf	multiply_fp@n2+3
  3475  0213  0022               	movlb	2	; select bank2
  3476  0214  0836               	movf	(main@b+2)^(0+256),w
  3477  0215  0020               	movlb	0	; select bank0
  3478  0216  00B2               	movwf	multiply_fp@n2+2
  3479  0217  0022               	movlb	2	; select bank2
  3480  0218  0835               	movf	(main@b+1)^(0+256),w
  3481  0219  0020               	movlb	0	; select bank0
  3482  021A  00B1               	movwf	multiply_fp@n2+1
  3483  021B  0022               	movlb	2	; select bank2
  3484  021C  0834               	movf	main@b^(0+256),w
  3485  021D  0020               	movlb	0	; select bank0
  3486  021E  00B0               	movwf	multiply_fp@n2
  3487  021F  3186  2637  3180   	fcall	_multiply_fp
  3488  0222  0020               	movlb	0	; select bank0
  3489  0223  082F               	movf	?_multiply_fp+3,w
  3490  0224  0022               	movlb	2	; select bank2
  3491  0225  00B7               	movwf	(main@b+3)^(0+256)
  3492  0226  0020               	movlb	0	; select bank0
  3493  0227  082E               	movf	?_multiply_fp+2,w
  3494  0228  0022               	movlb	2	; select bank2
  3495  0229  00B6               	movwf	(main@b+2)^(0+256)
  3496  022A  0020               	movlb	0	; select bank0
  3497  022B  082D               	movf	?_multiply_fp+1,w
  3498  022C  0022               	movlb	2	; select bank2
  3499  022D  00B5               	movwf	(main@b+1)^(0+256)
  3500  022E  0020               	movlb	0	; select bank0
  3501  022F  082C               	movf	?_multiply_fp,w
  3502  0230  0022               	movlb	2	; select bank2
  3503  0231  00B4               	movwf	main@b^(0+256)
  3504                           
  3505                           ;main.c: 303: tmp = convert_to_fp(m_conf.ref_pwm[i], 0);
  3506  0232  3538               	lslf	main@i^(0+256),w
  3507  0233  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  3508  0234  0086               	movwf	6
  3509  0235  0187               	clrf	7
  3510  0236  3F40               	moviw [0]fsr1
  3511  0237  0020               	movlb	0	; select bank0
  3512  0238  00A4               	movwf	convert_to_fp@int_part
  3513  0239  3F41               	moviw [1]fsr1
  3514  023A  00A5               	movwf	convert_to_fp@int_part+1
  3515  023B  3000               	movlw	0
  3516  023C  00A6               	movwf	convert_to_fp@fract_part
  3517  023D  00A7               	movwf	convert_to_fp@fract_part+1
  3518  023E  3187  2730  3180   	fcall	_convert_to_fp
  3519  0241  0020               	movlb	0	; select bank0
  3520  0242  0827               	movf	?_convert_to_fp+3,w
  3521  0243  0022               	movlb	2	; select bank2
  3522  0244  00AD               	movwf	(main@tmp+3)^(0+256)
  3523  0245  0020               	movlb	0	; select bank0
  3524  0246  0826               	movf	?_convert_to_fp+2,w
  3525  0247  0022               	movlb	2	; select bank2
  3526  0248  00AC               	movwf	(main@tmp+2)^(0+256)
  3527  0249  0020               	movlb	0	; select bank0
  3528  024A  0825               	movf	?_convert_to_fp+1,w
  3529  024B  0022               	movlb	2	; select bank2
  3530  024C  00AB               	movwf	(main@tmp+1)^(0+256)
  3531  024D  0020               	movlb	0	; select bank0
  3532  024E  0824               	movf	?_convert_to_fp,w
  3533  024F  0022               	movlb	2	; select bank2
  3534  0250  00AA               	movwf	main@tmp^(0+256)
  3535                           
  3536                           ;main.c: 304: b = tmp - b;
  3537  0251  082A               	movf	main@tmp^(0+256),w
  3538  0252  0020               	movlb	0	; select bank0
  3539  0253  00CC               	movwf	??_main
  3540  0254  0022               	movlb	2	; select bank2
  3541  0255  082B               	movf	(main@tmp+1)^(0+256),w
  3542  0256  0020               	movlb	0	; select bank0
  3543  0257  00CD               	movwf	??_main+1
  3544  0258  0022               	movlb	2	; select bank2
  3545  0259  082C               	movf	(main@tmp+2)^(0+256),w
  3546  025A  0020               	movlb	0	; select bank0
  3547  025B  00CE               	movwf	??_main+2
  3548  025C  0022               	movlb	2	; select bank2
  3549  025D  082D               	movf	(main@tmp+3)^(0+256),w
  3550  025E  0020               	movlb	0	; select bank0
  3551  025F  00CF               	movwf	??_main+3
  3552  0260  0022               	movlb	2	; select bank2
  3553  0261  0934               	comf	main@b^(0+256),w
  3554  0262  0020               	movlb	0	; select bank0
  3555  0263  00D0               	movwf	??_main+4
  3556  0264  0022               	movlb	2	; select bank2
  3557  0265  0935               	comf	(main@b+1)^(0+256),w
  3558  0266  0020               	movlb	0	; select bank0
  3559  0267  00D1               	movwf	??_main+5
  3560  0268  0022               	movlb	2	; select bank2
  3561  0269  0936               	comf	(main@b+2)^(0+256),w
  3562  026A  0020               	movlb	0	; select bank0
  3563  026B  00D2               	movwf	??_main+6
  3564  026C  0022               	movlb	2	; select bank2
  3565  026D  0937               	comf	(main@b+3)^(0+256),w
  3566  026E  0020               	movlb	0	; select bank0
  3567  026F  00D3               	movwf	??_main+7
  3568  0270  0AD0               	incf	??_main+4,f
  3569  0271  1903               	skipnz
  3570  0272  0AD1               	incf	??_main+5,f
  3571  0273  1903               	skipnz
  3572  0274  0AD2               	incf	??_main+6,f
  3573  0275  1903               	skipnz
  3574  0276  0AD3               	incf	??_main+7,f
  3575  0277  0850               	movf	??_main+4,w
  3576  0278  07CC               	addwf	??_main,f
  3577  0279  0851               	movf	??_main+5,w
  3578  027A  3DCD               	addwfc	??_main+1,f
  3579  027B  0852               	movf	??_main+6,w
  3580  027C  3DCE               	addwfc	??_main+2,f
  3581  027D  0853               	movf	??_main+7,w
  3582  027E  3DCF               	addwfc	??_main+3,f
  3583  027F  084F               	movf	??_main+3,w
  3584  0280  0022               	movlb	2	; select bank2
  3585  0281  00B7               	movwf	(main@b+3)^(0+256)
  3586  0282  0020               	movlb	0	; select bank0
  3587  0283  084E               	movf	??_main+2,w
  3588  0284  0022               	movlb	2	; select bank2
  3589  0285  00B6               	movwf	(main@b+2)^(0+256)
  3590  0286  0020               	movlb	0	; select bank0
  3591  0287  084D               	movf	??_main+1,w
  3592  0288  0022               	movlb	2	; select bank2
  3593  0289  00B5               	movwf	(main@b+1)^(0+256)
  3594  028A  0020               	movlb	0	; select bank0
  3595  028B  084C               	movf	??_main,w
  3596  028C  0022               	movlb	2	; select bank2
  3597  028D  00B4               	movwf	main@b^(0+256)
  3598                           
  3599                           ;main.c: 306: fp_motor = multiply_fp(a, speed) + b;
  3600  028E  0833               	movf	(main@a+3)^(0+256),w
  3601  028F  0020               	movlb	0	; select bank0
  3602  0290  00AF               	movwf	multiply_fp@n1+3
  3603  0291  0022               	movlb	2	; select bank2
  3604  0292  0832               	movf	(main@a+2)^(0+256),w
  3605  0293  0020               	movlb	0	; select bank0
  3606  0294  00AE               	movwf	multiply_fp@n1+2
  3607  0295  0022               	movlb	2	; select bank2
  3608  0296  0831               	movf	(main@a+1)^(0+256),w
  3609  0297  0020               	movlb	0	; select bank0
  3610  0298  00AD               	movwf	multiply_fp@n1+1
  3611  0299  0022               	movlb	2	; select bank2
  3612  029A  0830               	movf	main@a^(0+256),w
  3613  029B  0020               	movlb	0	; select bank0
  3614  029C  00AC               	movwf	multiply_fp@n1
  3615  029D  0021               	movlb	1	; select bank1
  3616  029E  083A               	movf	(_speed+3)^(0+128),w
  3617  029F  0020               	movlb	0	; select bank0
  3618  02A0  00B3               	movwf	multiply_fp@n2+3
  3619  02A1  0021               	movlb	1	; select bank1
  3620  02A2  0839               	movf	(_speed+2)^(0+128),w
  3621  02A3  0020               	movlb	0	; select bank0
  3622  02A4  00B2               	movwf	multiply_fp@n2+2
  3623  02A5  0021               	movlb	1	; select bank1
  3624  02A6  0838               	movf	(_speed+1)^(0+128),w
  3625  02A7  0020               	movlb	0	; select bank0
  3626  02A8  00B1               	movwf	multiply_fp@n2+1
  3627  02A9  0021               	movlb	1	; select bank1
  3628  02AA  0837               	movf	_speed^(0+128),w
  3629  02AB  0020               	movlb	0	; select bank0
  3630  02AC  00B0               	movwf	multiply_fp@n2
  3631  02AD  3186  2637  3180   	fcall	_multiply_fp
  3632  02B0  0020               	movlb	0	; select bank0
  3633  02B1  082C               	movf	?_multiply_fp,w
  3634  02B2  0022               	movlb	2	; select bank2
  3635  02B3  0734               	addwf	main@b^(0+256),w
  3636  02B4  0020               	movlb	0	; select bank0
  3637  02B5  00CC               	movwf	??_main
  3638  02B6  082D               	movf	?_multiply_fp+1,w
  3639  02B7  0022               	movlb	2	; select bank2
  3640  02B8  3D35               	addwfc	(main@b+1)^(0+256),w
  3641  02B9  0020               	movlb	0	; select bank0
  3642  02BA  00CD               	movwf	??_main+1
  3643  02BB  082E               	movf	?_multiply_fp+2,w
  3644  02BC  0022               	movlb	2	; select bank2
  3645  02BD  3D36               	addwfc	(main@b+2)^(0+256),w
  3646  02BE  0020               	movlb	0	; select bank0
  3647  02BF  00CE               	movwf	??_main+2
  3648  02C0  082F               	movf	?_multiply_fp+3,w
  3649  02C1  0022               	movlb	2	; select bank2
  3650  02C2  3D37               	addwfc	(main@b+3)^(0+256),w
  3651  02C3  0020               	movlb	0	; select bank0
  3652  02C4  00CF               	movwf	??_main+3
  3653  02C5  084F               	movf	??_main+3,w
  3654  02C6  0022               	movlb	2	; select bank2
  3655  02C7  00A5               	movwf	(main@fp_motor+3)^(0+256)
  3656  02C8  0020               	movlb	0	; select bank0
  3657  02C9  084E               	movf	??_main+2,w
  3658  02CA  0022               	movlb	2	; select bank2
  3659  02CB  00A4               	movwf	(main@fp_motor+2)^(0+256)
  3660  02CC  0020               	movlb	0	; select bank0
  3661  02CD  084D               	movf	??_main+1,w
  3662  02CE  0022               	movlb	2	; select bank2
  3663  02CF  00A3               	movwf	(main@fp_motor+1)^(0+256)
  3664  02D0  0020               	movlb	0	; select bank0
  3665  02D1  084C               	movf	??_main,w
  3666  02D2  0022               	movlb	2	; select bank2
  3667  02D3  00A2               	movwf	main@fp_motor^(0+256)
  3668                           
  3669                           ;main.c: 307: new_motor = integer_part(fp_motor);
  3670  02D4  0825               	movf	(main@fp_motor+3)^(0+256),w
  3671  02D5  0020               	movlb	0	; select bank0
  3672  02D6  00BC               	movwf	integer_part@n+3
  3673  02D7  0022               	movlb	2	; select bank2
  3674  02D8  0824               	movf	(main@fp_motor+2)^(0+256),w
  3675  02D9  0020               	movlb	0	; select bank0
  3676  02DA  00BB               	movwf	integer_part@n+2
  3677  02DB  0022               	movlb	2	; select bank2
  3678  02DC  0823               	movf	(main@fp_motor+1)^(0+256),w
  3679  02DD  0020               	movlb	0	; select bank0
  3680  02DE  00BA               	movwf	integer_part@n+1
  3681  02DF  0022               	movlb	2	; select bank2
  3682  02E0  0822               	movf	main@fp_motor^(0+256),w
  3683  02E1  0020               	movlb	0	; select bank0
  3684  02E2  00B9               	movwf	integer_part@n
  3685  02E3  318D  2548  3180   	fcall	_integer_part
  3686  02E6  0020               	movlb	0	; select bank0
  3687  02E7  083A               	movf	?_integer_part+1,w
  3688  02E8  0022               	movlb	2	; select bank2
  3689  02E9  00A1               	movwf	(main@new_motor+1)^(0+256)
  3690  02EA  0020               	movlb	0	; select bank0
  3691  02EB  0839               	movf	?_integer_part,w
  3692  02EC  2B03               	goto	L2
  3693  02ED                     l4811:	
  3694                           ;main.c: 310: }
  3695                           
  3696                           ;main.c: 308: }
  3697                           ;main.c: 309: done = 1;
  3698                           
  3699                           
  3700                           ;main.c: 311: else if (i == (m_conf.nb_steps-1))
  3701  02ED  0021               	movlb	1	; select bank1
  3702  02EE  0842               	movf	(_m_conf^(0+128)+3),w
  3703  02EF  3EFF               	addlw	255
  3704  02F0  0020               	movlb	0	; select bank0
  3705  02F1  00CC               	movwf	??_main
  3706  02F2  30FF               	movlw	255
  3707  02F3  1803               	skipnc
  3708  02F4  3000               	movlw	0
  3709  02F5  00CD               	movwf	??_main+1
  3710  02F6  0022               	movlb	2	; select bank2
  3711  02F7  0838               	movf	main@i^(0+256),w
  3712  02F8  0020               	movlb	0	; select bank0
  3713  02F9  064C               	xorwf	??_main,w
  3714  02FA  044D               	iorwf	??_main+1,w
  3715  02FB  1D03               	skipz
  3716  02FC  2B07               	goto	l424
  3717                           
  3718                           ;main.c: 312: {
  3719                           ;main.c: 313: new_motor = m_conf.low_speed_pwm;
  3720  02FD  0021               	movlb	1	; select bank1
  3721  02FE  086C               	movf	((_m_conf+1)^(0+128)+44),w
  3722  02FF  0022               	movlb	2	; select bank2
  3723  0300  00A1               	movwf	(main@new_motor+1)^(0+256)
  3724  0301  0021               	movlb	1	; select bank1
  3725  0302  086B               	movf	(_m_conf^(0+128)+44),w
  3726  0303                     L2:	
  3727  0303  0022               	movlb	2	; select bank2
  3728  0304  00A0               	movwf	main@new_motor^(0+256)
  3729  0305                     l4815:	
  3730                           
  3731                           ;main.c: 314: done = 1;
  3732  0305  01A6               	clrf	main@done^(0+256)
  3733  0306  0AA6               	incf	main@done^(0+256),f
  3734  0307                     l424:	
  3735  0307  0021               	movlb	1	; select bank1
  3736  0308  0842               	movf	(_m_conf^(0+128)+3),w
  3737  0309  0022               	movlb	2	; select bank2
  3738  030A  0238               	subwf	main@i^(0+256),w
  3739  030B  1803               	skipnc
  3740  030C  2B10               	goto	l4819
  3741  030D  0826               	movf	main@done^(0+256),w
  3742  030E  1903               	btfsc	3,2
  3743  030F  28FB               	goto	l4787
  3744  0310                     l4819:	
  3745                           
  3746                           ;main.c: 315: }
  3747                           ;main.c: 316: }
  3748                           ;main.c: 320: }
  3749                           ;main.c: 325: if (m_button.confirmed_state == long_push)
  3750  0310  3002               	movlw	2
  3751  0311  0021               	movlb	1	; select bank1
  3752  0312  0630               	xorwf	_m_button^(0+128),w	;volatile
  3753  0313  1D03               	btfss	3,2
  3754  0314  2B2F               	goto	l4829
  3755                           
  3756                           ;main.c: 326: {
  3757                           ;main.c: 327: motor = 0;
  3758  0315  0020               	movlb	0	; select bank0
  3759  0316  01D4               	clrf	_motor
  3760  0317  01D5               	clrf	_motor+1
  3761                           
  3762                           ;main.c: 328: EPWM1_LoadDutyValue(1023-motor);
  3763  0318  0954               	comf	_motor,w
  3764  0319  00CC               	movwf	??_main
  3765  031A  0955               	comf	_motor+1,w
  3766  031B  00CD               	movwf	??_main+1
  3767  031C  0ACC               	incf	??_main,f
  3768  031D  1903               	skipnz
  3769  031E  0ACD               	incf	??_main+1,f
  3770  031F  084C               	movf	??_main,w
  3771  0320  3EFF               	addlw	255
  3772  0321  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3773  0322  3003               	movlw	3
  3774  0323  3D4D               	addwfc	??_main+1,w
  3775  0324  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3776  0325  318A  2270  3180   	fcall	_EPWM1_LoadDutyValue
  3777                           
  3778                           ;main.c: 330: perform_calibration();
  3779  0328  318E  2622  3180   	fcall	_perform_calibration
  3780                           
  3781                           ;main.c: 331: write_calibration_to_EEPROM();
  3782  032B  318C  24E0  3180   	fcall	_write_calibration_to_EEPROM
  3783                           
  3784                           ;main.c: 332: }
  3785  032E  2896               	goto	l4769
  3786  032F                     l4829:	
  3787                           
  3788                           ;main.c: 333: else if (m_button.confirmed_state == short_push)
  3789  032F  0021               	movlb	1	; select bank1
  3790  0330  0330               	decf	_m_button^(0+128),w	;volatile
  3791  0331  1D03               	btfss	3,2
  3792  0332  2896               	goto	l4769
  3793  0333  2893               	goto	L1
  3794                           
  3795                           ;main.c: 358: _delay((unsigned long)((10)*(32000000/4000.0)));
  3796                           
  3797                           ;main.c: 357: EPWM1_LoadDutyValue(0);
  3798                           
  3799                           ;main.c: 335: }
  3800                           ;main.c: 337: bool up = 1;
  3801                           
  3802                           ;main.c: 334: button_init();
  3803  0334  3068               	movlw	104
  3804  0335  0020               	movlb	0	; select bank0
  3805  0336  00CD               	movwf	??_main+1
  3806  0337  30E4               	movlw	228
  3807  0338  00CC               	movwf	??_main
  3808  0339                     u5787:	
  3809  0339  0BCC               	decfsz	??_main,f
  3810  033A  2B39               	goto	u5787
  3811  033B  0BCD               	decfsz	??_main+1,f
  3812  033C  2B39               	goto	u5787
  3813  033D  0000               	nop
  3814                           
  3815                           ;main.c: 359: EPWM1_LoadDutyValue(1023-148);
  3816  033E  306B               	movlw	107
  3817  033F  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3818  0340  3003               	movlw	3
  3819  0341  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3820  0342  318A  2270  3180   	fcall	_EPWM1_LoadDutyValue
  3821                           
  3822                           ;main.c: 360: for(unsigned char __delay_tmp=0;__delay_tmp<(10*5);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  3823  0345  0022               	movlb	2	; select bank2
  3824  0346  01AE               	clrf	main@__delay_tmp^(0+256)
  3825  0347  3032               	movlw	50
  3826  0348  022E               	subwf	main@__delay_tmp^(0+256),w
  3827  0349  1803               	btfsc	3,0
  3828  034A  2B62               	goto	l4851
  3829  034B                     l4845:	
  3830  034B  3005               	movlw	5
  3831  034C  0020               	movlb	0	; select bank0
  3832  034D  00CE               	movwf	??_main+2
  3833  034E  300F               	movlw	15
  3834  034F  00CD               	movwf	??_main+1
  3835  0350  30F4               	movlw	244
  3836  0351  00CC               	movwf	??_main
  3837  0352                     u5797:	
  3838  0352  0BCC               	decfsz	??_main,f
  3839  0353  2B52               	goto	u5797
  3840  0354  0BCD               	decfsz	??_main+1,f
  3841  0355  2B52               	goto	u5797
  3842  0356  0BCE               	decfsz	??_main+2,f
  3843  0357  2B52               	goto	u5797
  3844  0358  3001               	movlw	1
  3845  0359  0020               	movlb	0	; select bank0
  3846  035A  00CC               	movwf	??_main
  3847  035B  084C               	movf	??_main,w
  3848  035C  0022               	movlb	2	; select bank2
  3849  035D  07AE               	addwf	main@__delay_tmp^(0+256),f
  3850  035E  3032               	movlw	50
  3851  035F  022E               	subwf	main@__delay_tmp^(0+256),w
  3852  0360  1C03               	skipc
  3853  0361  2B4B               	goto	l4845
  3854  0362                     l4851:	
  3855                           ;main.c: 361: while (1)
  3856                           
  3857                           
  3858                           ;main.c: 362: {
  3859                           ;main.c: 363: if (up == 1)
  3860  0362  0022               	movlb	2	; select bank2
  3861  0363  0327               	decf	main@up^(0+256),w
  3862  0364  1D03               	btfss	3,2
  3863  0365  2B6C               	goto	l4855
  3864                           
  3865                           ;main.c: 364: motor += 1;
  3866  0366  3001               	movlw	1
  3867  0367  0020               	movlb	0	; select bank0
  3868  0368  07D4               	addwf	_motor,f
  3869  0369  3000               	movlw	0
  3870  036A  3DD5               	addwfc	_motor+1,f
  3871  036B  2B71               	goto	l443
  3872  036C                     l4855:	
  3873                           
  3874                           ;main.c: 365: else
  3875                           ;main.c: 366: motor -= 1;
  3876  036C  3001               	movlw	1
  3877  036D  0020               	movlb	0	; select bank0
  3878  036E  02D4               	subwf	_motor,f
  3879  036F  3000               	movlw	0
  3880  0370  3BD5               	subwfb	_motor+1,f
  3881  0371                     l443:	
  3882                           
  3883                           ;main.c: 367: if (motor > 300)
  3884  0371  3001               	movlw	1
  3885  0372  0255               	subwf	_motor+1,w
  3886  0373  302D               	movlw	45
  3887  0374  1903               	skipnz
  3888  0375  0254               	subwf	_motor,w
  3889  0376  1C03               	skipc
  3890  0377  2B7B               	goto	l4859
  3891                           
  3892                           ;main.c: 368: up = 0;
  3893  0378  0022               	movlb	2	; select bank2
  3894  0379  01A7               	clrf	main@up^(0+256)
  3895  037A  2BB7               	goto	l4881
  3896  037B                     l4859:	
  3897                           
  3898                           ;main.c: 369: else if (motor == 0)
  3899  037B  0020               	movlb	0	; select bank0
  3900  037C  0854               	movf	_motor,w
  3901  037D  0455               	iorwf	_motor+1,w
  3902  037E  1D03               	btfss	3,2
  3903  037F  2BB7               	goto	l4881
  3904                           
  3905                           ;main.c: 370: {
  3906                           ;main.c: 371: up = 1;
  3907  0380  0022               	movlb	2	; select bank2
  3908  0381  01A7               	clrf	main@up^(0+256)
  3909  0382  0AA7               	incf	main@up^(0+256),f
  3910                           
  3911                           ;main.c: 372: EPWM1_LoadDutyValue(1023);
  3912  0383  30FF               	movlw	255
  3913  0384  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3914  0385  3003               	movlw	3
  3915  0386  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3916  0387  318A  2270  3180   	fcall	_EPWM1_LoadDutyValue
  3917                           
  3918                           ;main.c: 373: for(unsigned char __delay_tmp=0;__delay_tmp<(10*5);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  3919  038A  0022               	movlb	2	; select bank2
  3920  038B  01AF               	clrf	main@__delay_tmp_731^(0+256)
  3921  038C  3032               	movlw	50
  3922  038D  022F               	subwf	main@__delay_tmp_731^(0+256),w
  3923  038E  1803               	btfsc	3,0
  3924  038F  2BA7               	goto	l4877
  3925  0390                     l4871:	
  3926  0390  3005               	movlw	5
  3927  0391  0020               	movlb	0	; select bank0
  3928  0392  00CE               	movwf	??_main+2
  3929  0393  300F               	movlw	15
  3930  0394  00CD               	movwf	??_main+1
  3931  0395  30F4               	movlw	244
  3932  0396  00CC               	movwf	??_main
  3933  0397                     u5807:	
  3934  0397  0BCC               	decfsz	??_main,f
  3935  0398  2B97               	goto	u5807
  3936  0399  0BCD               	decfsz	??_main+1,f
  3937  039A  2B97               	goto	u5807
  3938  039B  0BCE               	decfsz	??_main+2,f
  3939  039C  2B97               	goto	u5807
  3940  039D  3001               	movlw	1
  3941  039E  0020               	movlb	0	; select bank0
  3942  039F  00CC               	movwf	??_main
  3943  03A0  084C               	movf	??_main,w
  3944  03A1  0022               	movlb	2	; select bank2
  3945  03A2  07AF               	addwf	main@__delay_tmp_731^(0+256),f
  3946  03A3  3032               	movlw	50
  3947  03A4  022F               	subwf	main@__delay_tmp_731^(0+256),w
  3948  03A5  1C03               	skipc
  3949  03A6  2B90               	goto	l4871
  3950  03A7                     l4877:	
  3951                           
  3952                           ;main.c: 375: EPWM1_LoadDutyValue(0);
  3953  03A7  3000               	movlw	0
  3954  03A8  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3955  03A9  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  3956  03AA  318A  2270  3180   	fcall	_EPWM1_LoadDutyValue
  3957                           
  3958                           ;main.c: 376: _delay((unsigned long)((10)*(32000000/4000.0)));
  3959  03AD  3068               	movlw	104
  3960  03AE  0020               	movlb	0	; select bank0
  3961  03AF  00CD               	movwf	??_main+1
  3962  03B0  30E4               	movlw	228
  3963  03B1  00CC               	movwf	??_main
  3964  03B2                     u5817:	
  3965  03B2  0BCC               	decfsz	??_main,f
  3966  03B3  2BB2               	goto	u5817
  3967  03B4  0BCD               	decfsz	??_main+1,f
  3968  03B5  2BB2               	goto	u5817
  3969  03B6  0000               	nop
  3970  03B7                     l4881:	
  3971                           
  3972                           ;main.c: 377: }
  3973                           ;main.c: 378: if (motor < 148)
  3974  03B7  3000               	movlw	0
  3975  03B8  0020               	movlb	0	; select bank0
  3976  03B9  0255               	subwf	_motor+1,w
  3977  03BA  3094               	movlw	148
  3978  03BB  1903               	skipnz
  3979  03BC  0254               	subwf	_motor,w
  3980  03BD  1803               	skipnc
  3981  03BE  2BC3               	goto	l4885
  3982                           
  3983                           ;main.c: 379: EPWM1_LoadDutyValue(1023-135);
  3984  03BF  3078               	movlw	120
  3985  03C0  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  3986  03C1  3003               	movlw	3
  3987  03C2  2BD0               	goto	L3
  3988  03C3                     l4885:	
  3989                           
  3990                           ;main.c: 380: else
  3991                           ;main.c: 381: EPWM1_LoadDutyValue(1023-motor);
  3992  03C3  0020               	movlb	0	; select bank0
  3993  03C4  0954               	comf	_motor,w
  3994  03C5  00CC               	movwf	??_main
  3995  03C6  0955               	comf	_motor+1,w
  3996  03C7  00CD               	movwf	??_main+1
  3997  03C8  0ACC               	incf	??_main,f
  3998  03C9  1903               	skipnz
  3999  03CA  0ACD               	incf	??_main+1,f
  4000  03CB  084C               	movf	??_main,w
  4001  03CC  3EFF               	addlw	255
  4002  03CD  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4003  03CE  3003               	movlw	3
  4004  03CF  3D4D               	addwfc	??_main+1,w
  4005  03D0                     L3:	
  4006  03D0  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4007  03D1  318A  2270  3180   	fcall	_EPWM1_LoadDutyValue
  4008                           
  4009                           ;main.c: 382: _delay((unsigned long)((50)*(32000000/4000.0)));
  4010  03D4  3003               	movlw	3
  4011  03D5  0020               	movlb	0	; select bank0
  4012  03D6  00CE               	movwf	??_main+2
  4013  03D7  3008               	movlw	8
  4014  03D8  00CD               	movwf	??_main+1
  4015  03D9  3078               	movlw	120
  4016  03DA  00CC               	movwf	??_main
  4017  03DB                     u5827:	
  4018  03DB  0BCC               	decfsz	??_main,f
  4019  03DC  2BDB               	goto	u5827
  4020  03DD  0BCD               	decfsz	??_main+1,f
  4021  03DE  2BDB               	goto	u5827
  4022  03DF  0BCE               	decfsz	??_main+2,f
  4023  03E0  2BDB               	goto	u5827
  4024  03E1  2B62               	goto	l4851
  4025  03E2                     __end_of_main:	
  4026                           
  4027                           	psect	text1
  4028  0CE0                     __ptext1:	
  4029 ;; *************** function _write_calibration_to_EEPROM *****************
  4030 ;; Defined at:
  4031 ;;		line 110 in file "main.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  i               1   19[BANK0 ] unsigned char 
  4036 ;;  p               1   18[BANK0 ] PTR unsigned char 
  4037 ;;		 -> m_crc(2), m_conf(47), 
  4038 ;;  addr            1   17[BANK0 ] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4048 ;;      Params:         0       0       0       0       0       0
  4049 ;;      Locals:         0       3       0       0       0       0
  4050 ;;      Temps:          1       0       0       0       0       0
  4051 ;;      Totals:         1       3       0       0       0       0
  4052 ;;Total ram usage:        4 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    7
  4055 ;; This function calls:
  4056 ;;		_DATAEE_WriteByte
  4057 ;;		_crc_update
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           
  4064                           ;psect for function _write_calibration_to_EEPROM
  4065  0CE0                     _write_calibration_to_EEPROM:	
  4066                           
  4067                           ;main.c: 113: unsigned char addr = 0x00;
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _write_calibration_to_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4071  0CE0  0020               	movlb	0	; select bank0
  4072  0CE1  01B1               	clrf	write_calibration_to_EEPROM@addr
  4073                           
  4074                           ;main.c: 114: m_crc = 0x00;
  4075  0CE2  0021               	movlb	1	; select bank1
  4076  0CE3  01EE               	clrf	_m_crc^(0+128)
  4077  0CE4  01EF               	clrf	(_m_crc+1)^(0+128)
  4078                           
  4079                           ;main.c: 115: char i,*p;
  4080                           ;main.c: 116: p=(char *)&m_conf;
  4081  0CE5  30BF               	movlw	(low (_m_conf| 0))& (0+255)
  4082  0CE6  00F5               	movwf	??_write_calibration_to_EEPROM
  4083  0CE7  0875               	movf	??_write_calibration_to_EEPROM,w
  4084  0CE8  0020               	movlb	0	; select bank0
  4085  0CE9  00B2               	movwf	write_calibration_to_EEPROM@p
  4086                           
  4087                           ;main.c: 117: for(i=0; i<sizeof(m_conf); i++) {
  4088  0CEA  01B3               	clrf	write_calibration_to_EEPROM@i
  4089  0CEB  302F               	movlw	47
  4090  0CEC  0233               	subwf	write_calibration_to_EEPROM@i,w
  4091  0CED  1803               	btfsc	3,0
  4092  0CEE  2D26               	goto	l4177
  4093  0CEF                     l4169:	
  4094                           
  4095                           ;main.c: 118: DATAEE_WriteByte(addr++, *p);
  4096  0CEF  0832               	movf	write_calibration_to_EEPROM@p,w
  4097  0CF0  0086               	movwf	6
  4098  0CF1  0187               	clrf	7
  4099  0CF2  0801               	movf	1,w
  4100  0CF3  00F5               	movwf	??_write_calibration_to_EEPROM
  4101  0CF4  0875               	movf	??_write_calibration_to_EEPROM,w
  4102  0CF5  00F4               	movwf	DATAEE_WriteByte@bData
  4103  0CF6  0831               	movf	write_calibration_to_EEPROM@addr,w
  4104  0CF7  318B  2302  318C   	fcall	_DATAEE_WriteByte
  4105  0CFA  3001               	movlw	1
  4106  0CFB  00F5               	movwf	??_write_calibration_to_EEPROM
  4107  0CFC  0875               	movf	??_write_calibration_to_EEPROM,w
  4108  0CFD  0020               	movlb	0	; select bank0
  4109  0CFE  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  4110                           
  4111                           ;main.c: 119: m_crc = crc_update(m_crc, *p++);
  4112  0CFF  0021               	movlb	1	; select bank1
  4113  0D00  086F               	movf	(_m_crc+1)^(0+128),w
  4114  0D01  0020               	movlb	0	; select bank0
  4115  0D02  00A1               	movwf	crc_update@old_crc+1
  4116  0D03  0021               	movlb	1	; select bank1
  4117  0D04  086E               	movf	_m_crc^(0+128),w
  4118  0D05  0020               	movlb	0	; select bank0
  4119  0D06  00A0               	movwf	crc_update@old_crc
  4120  0D07  0832               	movf	write_calibration_to_EEPROM@p,w
  4121  0D08  0086               	movwf	6
  4122  0D09  0187               	clrf	7
  4123  0D0A  0801               	movf	1,w
  4124  0D0B  00F5               	movwf	??_write_calibration_to_EEPROM
  4125  0D0C  0875               	movf	??_write_calibration_to_EEPROM,w
  4126  0D0D  00A2               	movwf	crc_update@data
  4127  0D0E  318B  23E1  318C   	fcall	_crc_update
  4128  0D11  0020               	movlb	0	; select bank0
  4129  0D12  0821               	movf	?_crc_update+1,w
  4130  0D13  0021               	movlb	1	; select bank1
  4131  0D14  00EF               	movwf	(_m_crc+1)^(0+128)
  4132  0D15  0020               	movlb	0	; select bank0
  4133  0D16  0820               	movf	?_crc_update,w
  4134  0D17  0021               	movlb	1	; select bank1
  4135  0D18  00EE               	movwf	_m_crc^(0+128)
  4136  0D19  3001               	movlw	1
  4137  0D1A  00F5               	movwf	??_write_calibration_to_EEPROM
  4138  0D1B  0875               	movf	??_write_calibration_to_EEPROM,w
  4139  0D1C  0020               	movlb	0	; select bank0
  4140  0D1D  07B2               	addwf	write_calibration_to_EEPROM@p,f
  4141  0D1E  3001               	movlw	1
  4142  0D1F  00F5               	movwf	??_write_calibration_to_EEPROM
  4143  0D20  0875               	movf	??_write_calibration_to_EEPROM,w
  4144  0D21  07B3               	addwf	write_calibration_to_EEPROM@i,f
  4145  0D22  302F               	movlw	47
  4146  0D23  0233               	subwf	write_calibration_to_EEPROM@i,w
  4147  0D24  1C03               	skipc
  4148  0D25  2CEF               	goto	l4169
  4149  0D26                     l4177:	
  4150                           
  4151                           ;main.c: 120: }
  4152                           ;main.c: 121: p=(char *)&m_crc;
  4153  0D26  30EE               	movlw	(low (_m_crc| 0))& (0+255)
  4154  0D27  00F5               	movwf	??_write_calibration_to_EEPROM
  4155  0D28  0875               	movf	??_write_calibration_to_EEPROM,w
  4156  0D29  00B2               	movwf	write_calibration_to_EEPROM@p
  4157                           
  4158                           ;main.c: 122: for(i=0; i<sizeof(m_crc); i++)
  4159  0D2A  01B3               	clrf	write_calibration_to_EEPROM@i
  4160  0D2B                     L5:	
  4161  0D2B  3002               	movlw	2
  4162  0D2C  0233               	subwf	write_calibration_to_EEPROM@i,w
  4163  0D2D  1803               	btfsc	3,0
  4164  0D2E  0008               	return
  4165                           
  4166                           ;main.c: 123: DATAEE_WriteByte(addr++, *p++);
  4167  0D2F  0832               	movf	write_calibration_to_EEPROM@p,w
  4168  0D30  0086               	movwf	6
  4169  0D31  0187               	clrf	7
  4170  0D32  0801               	movf	1,w
  4171  0D33  00F5               	movwf	??_write_calibration_to_EEPROM
  4172  0D34  0875               	movf	??_write_calibration_to_EEPROM,w
  4173  0D35  00F4               	movwf	DATAEE_WriteByte@bData
  4174  0D36  0831               	movf	write_calibration_to_EEPROM@addr,w
  4175  0D37  318B  2302  318C   	fcall	_DATAEE_WriteByte
  4176  0D3A  3001               	movlw	1
  4177  0D3B  00F5               	movwf	??_write_calibration_to_EEPROM
  4178  0D3C  0875               	movf	??_write_calibration_to_EEPROM,w
  4179  0D3D  0020               	movlb	0	; select bank0
  4180  0D3E  07B2               	addwf	write_calibration_to_EEPROM@p,f
  4181  0D3F  3001               	movlw	1
  4182  0D40  00F5               	movwf	??_write_calibration_to_EEPROM
  4183  0D41  0875               	movf	??_write_calibration_to_EEPROM,w
  4184  0D42  07B1               	addwf	write_calibration_to_EEPROM@addr,f
  4185  0D43  3001               	movlw	1
  4186  0D44  00F5               	movwf	??_write_calibration_to_EEPROM
  4187  0D45  0875               	movf	??_write_calibration_to_EEPROM,w
  4188  0D46  07B3               	addwf	write_calibration_to_EEPROM@i,f
  4189  0D47  2D2B               	goto	L5
  4190  0D48                     __end_of_write_calibration_to_EEPROM:	
  4191                           
  4192                           	psect	text2
  4193  0B02                     __ptext2:	
  4194 ;; *************** function _DATAEE_WriteByte *****************
  4195 ;; Defined at:
  4196 ;;		line 180 in file "mcc_generated_files/memory.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  bAdd            1    wreg     unsigned char 
  4199 ;;  bData           1    4[COMMON] unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  bAdd            1    0[BANK0 ] unsigned char 
  4202 ;;  GIEBitValue     1    1[BANK0 ] unsigned char 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4212 ;;      Params:         1       0       0       0       0       0
  4213 ;;      Locals:         0       2       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0
  4215 ;;      Totals:         1       2       0       0       0       0
  4216 ;;Total ram usage:        3 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    6
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_write_calibration_to_EEPROM
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _DATAEE_WriteByte
  4228  0B02                     _DATAEE_WriteByte:	
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  4232                           ;DATAEE_WriteByte@bAdd stored from wreg
  4233  0B02  0020               	movlb	0	; select bank0
  4234  0B03  00A0               	movwf	DATAEE_WriteByte@bAdd
  4235                           
  4236                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  4237  0B04  01A1               	clrf	DATAEE_WriteByte@GIEBitValue
  4238                           
  4239                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  4240  0B05  0820               	movf	DATAEE_WriteByte@bAdd,w
  4241  0B06  0023               	movlb	3	; select bank3
  4242  0B07  0091               	movwf	17	;volatile
  4243                           
  4244                           ;memory.c: 185: EEDATL = bData;
  4245  0B08  0874               	movf	DATAEE_WriteByte@bData,w
  4246  0B09  0093               	movwf	19	;volatile
  4247                           
  4248                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  4249  0B0A  1395               	bcf	21,7	;volsfr
  4250                           
  4251                           ;memory.c: 187: EECON1bits.CFGS = 0;
  4252  0B0B  1315               	bcf	21,6	;volsfr
  4253                           
  4254                           ;memory.c: 188: EECON1bits.WREN = 1;
  4255  0B0C  1515               	bsf	21,2	;volsfr
  4256                           
  4257                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  4258  0B0D  3000               	movlw	0
  4259  0B0E  1B8B               	btfsc	11,7	;volatile
  4260  0B0F  3001               	movlw	1
  4261  0B10  0020               	movlb	0	; select bank0
  4262  0B11  00A1               	movwf	DATAEE_WriteByte@GIEBitValue
  4263                           
  4264                           ;memory.c: 191: INTCONbits.GIE = 0;
  4265  0B12  138B               	bcf	11,7	;volatile
  4266                           
  4267                           ;memory.c: 192: EECON2 = 0x55;
  4268  0B13  3055               	movlw	85
  4269  0B14  0023               	movlb	3	; select bank3
  4270  0B15  0096               	movwf	22	;volsfr
  4271                           
  4272                           ;memory.c: 193: EECON2 = 0xAA;
  4273  0B16  30AA               	movlw	170
  4274  0B17  0096               	movwf	22	;volsfr
  4275                           
  4276                           ;memory.c: 194: EECON1bits.WR = 1;
  4277  0B18  1495               	bsf	21,1	;volsfr
  4278  0B19                     l286:	
  4279                           ;memory.c: 197: {
  4280                           
  4281                           ;memory.c: 196: while (EECON1bits.WR)
  4282                           
  4283  0B19  1895               	btfsc	21,1	;volsfr
  4284  0B1A  2B19               	goto	l286
  4285                           
  4286                           ;memory.c: 198: }
  4287                           ;memory.c: 200: EECON1bits.WREN = 0;
  4288  0B1B  1115               	bcf	21,2	;volsfr
  4289                           
  4290                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  4291  0B1C  0020               	movlb	0	; select bank0
  4292  0B1D  0C21               	rrf	DATAEE_WriteByte@GIEBitValue,w
  4293  0B1E  1C03               	skipc
  4294  0B1F  138B               	bcf	11,7	;volatile
  4295  0B20  1803               	skipnc
  4296  0B21  178B               	bsf	11,7	;volatile
  4297  0B22  0008               	return
  4298  0B23                     __end_of_DATAEE_WriteByte:	
  4299                           
  4300                           	psect	text3
  4301  0E22                     __ptext3:	
  4302 ;; *************** function _perform_calibration *****************
  4303 ;; Defined at:
  4304 ;;		line 126 in file "main.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  __delay_tmp     1   11[BANK0 ] unsigned char 
  4309 ;;  __delay_tmp     1    9[BANK0 ] unsigned char 
  4310 ;;  __delay_tmp     1   10[BANK0 ] unsigned char 
  4311 ;;  __delay_tmp     1   12[BANK0 ] unsigned char 
  4312 ;;  i               1   13[BANK0 ] unsigned char 
  4313 ;;  replay          1    7[BANK0 ] unsigned char 
  4314 ;;  __delay_tmp     1    8[BANK0 ] unsigned char 
  4315 ;;  done            1    6[BANK0 ] unsigned char 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4325 ;;      Params:         0       0       0       0       0       0
  4326 ;;      Locals:         0       8       0       0       0       0
  4327 ;;      Temps:          0       3       0       0       0       0
  4328 ;;      Totals:         0      11       0       0       0       0
  4329 ;;Total ram usage:       11 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    8
  4332 ;; This function calls:
  4333 ;;		_EPWM1_LoadDutyValue
  4334 ;;		_LED_set_state
  4335 ;;		_button_init
  4336 ;;		_double_fast_blink
  4337 ;;		_get_button_state
  4338 ;; This function is called by:
  4339 ;;		_main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           
  4344                           ;psect for function _perform_calibration
  4345  0E22                     _perform_calibration:	
  4346                           
  4347                           ;main.c: 128: double_fast_blink();
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _perform_calibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4351  0E22  318C  2430  318E   	fcall	_double_fast_blink
  4352                           
  4353                           ;main.c: 129: button_init();
  4354  0E25  3189  21AF  318E   	fcall	_button_init
  4355                           
  4356                           ;main.c: 132: LED_set_state(always_on);
  4357  0E28  3000               	movlw	0
  4358  0E29  318A  22C6  318E   	fcall	_LED_set_state
  4359                           
  4360                           ;main.c: 133: m_conf.use_mph = 0;
  4361  0E2C  0021               	movlb	1	; select bank1
  4362  0E2D  01BF               	clrf	_m_conf^(0+128)
  4363  0E2E                     l4207:	
  4364                           ;main.c: 134: while (m_button.confirmed_state != long_push)
  4365                           
  4366  0E2E  3002               	movlw	2
  4367  0E2F  0021               	movlb	1	; select bank1
  4368  0E30  0630               	xorwf	_m_button^(0+128),w	;volatile
  4369  0E31  1903               	btfsc	3,2
  4370  0E32  2E4E               	goto	l4209
  4371                           
  4372                           ;main.c: 135: {
  4373                           ;main.c: 136: if (m_button.confirmed_state == short_push)
  4374  0E33  0330               	decf	_m_button^(0+128),w	;volatile
  4375  0E34  1D03               	btfss	3,2
  4376  0E35  2E2E               	goto	l4207
  4377                           
  4378                           ;main.c: 137: {
  4379                           ;main.c: 138: m_conf.use_mph = !m_conf.use_mph;
  4380  0E36  083F               	movf	_m_conf^(0+128),w
  4381  0E37  1D03               	btfss	3,2
  4382  0E38  2E3B               	goto	u4490
  4383  0E39  3001               	movlw	1
  4384  0E3A  2E3C               	goto	u4500
  4385  0E3B                     u4490:	
  4386  0E3B  3000               	movlw	0
  4387  0E3C                     u4500:	
  4388  0E3C  0020               	movlb	0	; select bank0
  4389  0E3D  00A3               	movwf	??_perform_calibration
  4390  0E3E  0823               	movf	??_perform_calibration,w
  4391  0E3F  0021               	movlb	1	; select bank1
  4392  0E40  00BF               	movwf	_m_conf^(0+128)
  4393                           
  4394                           ;main.c: 139: if (m_conf.use_mph)
  4395  0E41  083F               	movf	_m_conf^(0+128),w
  4396  0E42  1903               	btfsc	3,2
  4397  0E43  2E46               	goto	l4205
  4398                           
  4399                           ;main.c: 140: LED_set_state(slow_blinking);
  4400  0E44  3002               	movlw	2
  4401  0E45  2E47               	goto	L6
  4402  0E46                     l4205:	
  4403                           
  4404                           ;main.c: 141: else
  4405                           ;main.c: 142: LED_set_state(fast_blinking);
  4406  0E46  3003               	movlw	3
  4407  0E47                     L6:	
  4408  0E47  318A  22C6  318E   	fcall	_LED_set_state
  4409                           
  4410                           ;main.c: 143: button_init();
  4411  0E4A  3189  21AF  318E   	fcall	_button_init
  4412  0E4D  2E2E               	goto	l4207
  4413  0E4E                     l4209:	
  4414                           
  4415                           ;main.c: 144: }
  4416                           ;main.c: 145: }
  4417                           ;main.c: 146: double_fast_blink();
  4418  0E4E  318C  2430  318E   	fcall	_double_fast_blink
  4419                           
  4420                           ;main.c: 147: button_init();
  4421  0E51  3189  21AF  318E   	fcall	_button_init
  4422                           
  4423                           ;main.c: 150: motor = 200;
  4424  0E54  30C8               	movlw	200
  4425  0E55  0020               	movlb	0	; select bank0
  4426  0E56  00D4               	movwf	_motor
  4427  0E57  3000               	movlw	0
  4428  0E58  00D5               	movwf	_motor+1
  4429                           
  4430                           ;main.c: 152: EPWM1_LoadDutyValue(0);
  4431  0E59  3000               	movlw	0
  4432  0E5A  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4433  0E5B  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4434  0E5C  318A  2270  318E   	fcall	_EPWM1_LoadDutyValue
  4435                           
  4436                           ;main.c: 153: _delay((unsigned long)((30)*(32000000/4000.0)));
  4437  0E5F  3002               	movlw	2
  4438  0E60  0020               	movlb	0	; select bank0
  4439  0E61  00A5               	movwf	??_perform_calibration+2
  4440  0E62  3038               	movlw	56
  4441  0E63  00A4               	movwf	??_perform_calibration+1
  4442  0E64  30AD               	movlw	173
  4443  0E65  00A3               	movwf	??_perform_calibration
  4444  0E66                     u5837:	
  4445  0E66  0BA3               	decfsz	??_perform_calibration,f
  4446  0E67  2E66               	goto	u5837
  4447  0E68  0BA4               	decfsz	??_perform_calibration+1,f
  4448  0E69  2E66               	goto	u5837
  4449  0E6A  0BA5               	decfsz	??_perform_calibration+2,f
  4450  0E6B  2E66               	goto	u5837
  4451  0E6C                     l4215:	
  4452                           ;main.c: 156: while (1)
  4453                           
  4454                           
  4455                           ;main.c: 157: {
  4456                           ;main.c: 158: if (get_button_state() && (motor >= 300))
  4457  0E6C  3189  21A3  318E   	fcall	_get_button_state
  4458  0E6F  3A00               	xorlw	0
  4459  0E70  1903               	skipnz
  4460  0E71  2E7A               	goto	l4221
  4461  0E72  3001               	movlw	1
  4462  0E73  0020               	movlb	0	; select bank0
  4463  0E74  0255               	subwf	_motor+1,w
  4464  0E75  302C               	movlw	44
  4465  0E76  1903               	skipnz
  4466  0E77  0254               	subwf	_motor,w
  4467  0E78  1803               	btfsc	3,0
  4468  0E79  2EA7               	goto	l4231
  4469  0E7A                     l4221:	
  4470                           ;main.c: 159: break;
  4471                           
  4472                           
  4473                           ;main.c: 160: motor++;
  4474  0E7A  3001               	movlw	1
  4475  0E7B  0020               	movlb	0	; select bank0
  4476  0E7C  07D4               	addwf	_motor,f
  4477  0E7D  3000               	movlw	0
  4478  0E7E  3DD5               	addwfc	_motor+1,f
  4479                           
  4480                           ;main.c: 161: if (motor == 1023)
  4481  0E7F  0A54               	incf	_motor,w
  4482  0E80  3003               	movlw	3
  4483  0E81  1903               	skipnz
  4484  0E82  0655               	xorwf	_motor+1,w
  4485  0E83  1D03               	btfss	3,2
  4486  0E84  2E89               	goto	l4227
  4487                           
  4488                           ;main.c: 162: motor = 300;
  4489  0E85  302C               	movlw	44
  4490  0E86  00D4               	movwf	_motor
  4491  0E87  3001               	movlw	1
  4492  0E88  00D5               	movwf	_motor+1
  4493  0E89                     l4227:	
  4494                           
  4495                           ;main.c: 163: EPWM1_LoadDutyValue(1023-motor);
  4496  0E89  0954               	comf	_motor,w
  4497  0E8A  00A3               	movwf	??_perform_calibration
  4498  0E8B  0955               	comf	_motor+1,w
  4499  0E8C  00A4               	movwf	??_perform_calibration+1
  4500  0E8D  0AA3               	incf	??_perform_calibration,f
  4501  0E8E  1903               	skipnz
  4502  0E8F  0AA4               	incf	??_perform_calibration+1,f
  4503  0E90  0823               	movf	??_perform_calibration,w
  4504  0E91  3EFF               	addlw	255
  4505  0E92  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4506  0E93  3003               	movlw	3
  4507  0E94  3D24               	addwfc	??_perform_calibration+1,w
  4508  0E95  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4509  0E96  318A  2270  318E   	fcall	_EPWM1_LoadDutyValue
  4510                           
  4511                           ;main.c: 164: _delay((unsigned long)((30)*(32000000/4000.0)));
  4512  0E99  3002               	movlw	2
  4513  0E9A  0020               	movlb	0	; select bank0
  4514  0E9B  00A5               	movwf	??_perform_calibration+2
  4515  0E9C  3038               	movlw	56
  4516  0E9D  00A4               	movwf	??_perform_calibration+1
  4517  0E9E  30AD               	movlw	173
  4518  0E9F  00A3               	movwf	??_perform_calibration
  4519  0EA0                     u5847:	
  4520  0EA0  0BA3               	decfsz	??_perform_calibration,f
  4521  0EA1  2EA0               	goto	u5847
  4522  0EA2  0BA4               	decfsz	??_perform_calibration+1,f
  4523  0EA3  2EA0               	goto	u5847
  4524  0EA4  0BA5               	decfsz	??_perform_calibration+2,f
  4525  0EA5  2EA0               	goto	u5847
  4526  0EA6  2E6C               	goto	l4215
  4527  0EA7                     l4231:	
  4528                           
  4529                           ;main.c: 165: }
  4530                           ;main.c: 166: m_conf.max_pwm = motor;
  4531  0EA7  0020               	movlb	0	; select bank0
  4532  0EA8  0855               	movf	_motor+1,w
  4533  0EA9  0021               	movlb	1	; select bank1
  4534  0EAA  00C1               	movwf	((_m_conf+1)^(0+128)+1)
  4535  0EAB  0020               	movlb	0	; select bank0
  4536  0EAC  0854               	movf	_motor,w
  4537  0EAD  0021               	movlb	1	; select bank1
  4538  0EAE  00C0               	movwf	(_m_conf^(0+128)+1)
  4539                           
  4540                           ;main.c: 167: double_fast_blink();
  4541  0EAF  318C  2430  318E   	fcall	_double_fast_blink
  4542                           
  4543                           ;main.c: 168: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  4544  0EB2  0020               	movlb	0	; select bank0
  4545  0EB3  01A8               	clrf	perform_calibration@__delay_tmp
  4546  0EB4  300A               	movlw	10
  4547  0EB5  0228               	subwf	perform_calibration@__delay_tmp,w
  4548  0EB6  1803               	btfsc	3,0
  4549  0EB7  2ECD               	goto	l4247
  4550  0EB8                     l4241:	
  4551  0EB8  3005               	movlw	5
  4552  0EB9  00A5               	movwf	??_perform_calibration+2
  4553  0EBA  300F               	movlw	15
  4554  0EBB  00A4               	movwf	??_perform_calibration+1
  4555  0EBC  30F4               	movlw	244
  4556  0EBD  00A3               	movwf	??_perform_calibration
  4557  0EBE                     u5857:	
  4558  0EBE  0BA3               	decfsz	??_perform_calibration,f
  4559  0EBF  2EBE               	goto	u5857
  4560  0EC0  0BA4               	decfsz	??_perform_calibration+1,f
  4561  0EC1  2EBE               	goto	u5857
  4562  0EC2  0BA5               	decfsz	??_perform_calibration+2,f
  4563  0EC3  2EBE               	goto	u5857
  4564  0EC4  3001               	movlw	1
  4565  0EC5  0020               	movlb	0	; select bank0
  4566  0EC6  00A3               	movwf	??_perform_calibration
  4567  0EC7  0823               	movf	??_perform_calibration,w
  4568  0EC8  07A8               	addwf	perform_calibration@__delay_tmp,f
  4569  0EC9  300A               	movlw	10
  4570  0ECA  0228               	subwf	perform_calibration@__delay_tmp,w
  4571  0ECB  1C03               	skipc
  4572  0ECC  2EB8               	goto	l4241
  4573  0ECD                     l4247:	
  4574                           
  4575                           ;main.c: 172: bool done = 0;
  4576  0ECD  01A6               	clrf	perform_calibration@done
  4577  0ECE                     l4331:	
  4578                           ;main.c: 173: while (!done)
  4579                           
  4580  0ECE  0826               	movf	perform_calibration@done,w
  4581  0ECF  1D03               	btfss	3,2
  4582  0ED0  2FB8               	goto	l4333
  4583                           
  4584                           ;main.c: 174: {
  4585                           ;main.c: 175: unsigned char i = 0;
  4586  0ED1  01AD               	clrf	perform_calibration@i
  4587                           
  4588                           ;main.c: 176: motor = m_conf.max_pwm;
  4589  0ED2  0021               	movlb	1	; select bank1
  4590  0ED3  0841               	movf	((_m_conf+1)^(0+128)+1),w
  4591  0ED4  0020               	movlb	0	; select bank0
  4592  0ED5  00D5               	movwf	_motor+1
  4593  0ED6  0021               	movlb	1	; select bank1
  4594  0ED7  0840               	movf	(_m_conf^(0+128)+1),w
  4595  0ED8  0020               	movlb	0	; select bank0
  4596  0ED9  00D4               	movwf	_motor
  4597  0EDA                     l4279:	
  4598                           ;main.c: 177: while (motor > 100)
  4599                           
  4600  0EDA  3000               	movlw	0
  4601  0EDB  0020               	movlb	0	; select bank0
  4602  0EDC  0255               	subwf	_motor+1,w
  4603  0EDD  3065               	movlw	101
  4604  0EDE  1903               	skipnz
  4605  0EDF  0254               	subwf	_motor,w
  4606  0EE0  1C03               	btfss	3,0
  4607  0EE1  2F37               	goto	l4281
  4608                           
  4609                           ;main.c: 178: {
  4610                           ;main.c: 179: if (get_button_state())
  4611  0EE2  3189  21A3  318E   	fcall	_get_button_state
  4612  0EE5  3A00               	xorlw	0
  4613  0EE6  1903               	skipnz
  4614  0EE7  2F13               	goto	l4273
  4615                           
  4616                           ;main.c: 180: {
  4617                           ;main.c: 181: m_conf.ref_pwm[i++] = motor;
  4618  0EE8  0020               	movlb	0	; select bank0
  4619  0EE9  352D               	lslf	perform_calibration@i,w
  4620  0EEA  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4621  0EEB  0086               	movwf	6
  4622  0EEC  0187               	clrf	7
  4623  0EED  0854               	movf	_motor,w
  4624  0EEE  3FC0               	movwi [0]fsr1
  4625  0EEF  0855               	movf	_motor+1,w
  4626  0EF0  3FC1               	movwi [1]fsr1
  4627  0EF1  3001               	movlw	1
  4628  0EF2  00A3               	movwf	??_perform_calibration
  4629  0EF3  0823               	movf	??_perform_calibration,w
  4630  0EF4  07AD               	addwf	perform_calibration@i,f
  4631                           
  4632                           ;main.c: 182: double_fast_blink();
  4633  0EF5  318C  2430  318E   	fcall	_double_fast_blink
  4634                           
  4635                           ;main.c: 183: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  4636  0EF8  0020               	movlb	0	; select bank0
  4637  0EF9  01A9               	clrf	perform_calibration@__delay_tmp_711
  4638  0EFA  300A               	movlw	10
  4639  0EFB  0229               	subwf	perform_calibration@__delay_tmp_711,w
  4640  0EFC  1803               	btfsc	3,0
  4641  0EFD  2F13               	goto	l4273
  4642  0EFE                     l4267:	
  4643  0EFE  3005               	movlw	5
  4644  0EFF  00A5               	movwf	??_perform_calibration+2
  4645  0F00  300F               	movlw	15
  4646  0F01  00A4               	movwf	??_perform_calibration+1
  4647  0F02  30F4               	movlw	244
  4648  0F03  00A3               	movwf	??_perform_calibration
  4649  0F04                     u5867:	
  4650  0F04  0BA3               	decfsz	??_perform_calibration,f
  4651  0F05  2F04               	goto	u5867
  4652  0F06  0BA4               	decfsz	??_perform_calibration+1,f
  4653  0F07  2F04               	goto	u5867
  4654  0F08  0BA5               	decfsz	??_perform_calibration+2,f
  4655  0F09  2F04               	goto	u5867
  4656  0F0A  3001               	movlw	1
  4657  0F0B  0020               	movlb	0	; select bank0
  4658  0F0C  00A3               	movwf	??_perform_calibration
  4659  0F0D  0823               	movf	??_perform_calibration,w
  4660  0F0E  07A9               	addwf	perform_calibration@__delay_tmp_711,f
  4661  0F0F  300A               	movlw	10
  4662  0F10  0229               	subwf	perform_calibration@__delay_tmp_711,w
  4663  0F11  1C03               	skipc
  4664  0F12  2EFE               	goto	l4267
  4665  0F13                     l4273:	
  4666                           
  4667                           ;main.c: 184: }
  4668                           ;main.c: 185: motor--;
  4669  0F13  3001               	movlw	1
  4670  0F14  0020               	movlb	0	; select bank0
  4671  0F15  02D4               	subwf	_motor,f
  4672  0F16  3000               	movlw	0
  4673  0F17  3BD5               	subwfb	_motor+1,f
  4674                           
  4675                           ;main.c: 186: EPWM1_LoadDutyValue(1023-motor);
  4676  0F18  0954               	comf	_motor,w
  4677  0F19  00A3               	movwf	??_perform_calibration
  4678  0F1A  0955               	comf	_motor+1,w
  4679  0F1B  00A4               	movwf	??_perform_calibration+1
  4680  0F1C  0AA3               	incf	??_perform_calibration,f
  4681  0F1D  1903               	skipnz
  4682  0F1E  0AA4               	incf	??_perform_calibration+1,f
  4683  0F1F  0823               	movf	??_perform_calibration,w
  4684  0F20  3EFF               	addlw	255
  4685  0F21  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4686  0F22  3003               	movlw	3
  4687  0F23  3D24               	addwfc	??_perform_calibration+1,w
  4688  0F24  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4689  0F25  318A  2270  318E   	fcall	_EPWM1_LoadDutyValue
  4690                           
  4691                           ;main.c: 187: _delay((unsigned long)((150)*(32000000/4000.0)));
  4692  0F28  3007               	movlw	7
  4693  0F29  0020               	movlb	0	; select bank0
  4694  0F2A  00A5               	movwf	??_perform_calibration+2
  4695  0F2B  3017               	movlw	23
  4696  0F2C  00A4               	movwf	??_perform_calibration+1
  4697  0F2D  306F               	movlw	111
  4698  0F2E  00A3               	movwf	??_perform_calibration
  4699  0F2F                     u5877:	
  4700  0F2F  0BA3               	decfsz	??_perform_calibration,f
  4701  0F30  2F2F               	goto	u5877
  4702  0F31  0BA4               	decfsz	??_perform_calibration+1,f
  4703  0F32  2F2F               	goto	u5877
  4704  0F33  0BA5               	decfsz	??_perform_calibration+2,f
  4705  0F34  2F2F               	goto	u5877
  4706  0F35  0000               	nop
  4707  0F36  2EDA               	goto	l4279
  4708  0F37                     l4281:	
  4709                           
  4710                           ;main.c: 188: }
  4711                           ;main.c: 189: m_conf.nb_steps = i;
  4712  0F37  082D               	movf	perform_calibration@i,w
  4713  0F38  00A3               	movwf	??_perform_calibration
  4714  0F39  0823               	movf	??_perform_calibration,w
  4715  0F3A  0021               	movlb	1	; select bank1
  4716  0F3B  00C2               	movwf	(_m_conf^(0+128)+3)
  4717                           
  4718                           ;main.c: 190: EPWM1_LoadDutyValue(1023-0);
  4719  0F3C  30FF               	movlw	255
  4720  0F3D  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4721  0F3E  3003               	movlw	3
  4722  0F3F  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4723  0F40  318A  2270  318E   	fcall	_EPWM1_LoadDutyValue
  4724                           
  4725                           ;main.c: 191: double_fast_blink();
  4726  0F43  318C  2430  318E   	fcall	_double_fast_blink
  4727                           
  4728                           ;main.c: 192: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  4729  0F46  0020               	movlb	0	; select bank0
  4730  0F47  01AA               	clrf	perform_calibration@__delay_tmp_712
  4731  0F48  300A               	movlw	10
  4732  0F49  022A               	subwf	perform_calibration@__delay_tmp_712,w
  4733  0F4A  1803               	btfsc	3,0
  4734  0F4B  2F61               	goto	l391
  4735  0F4C                     l4293:	
  4736  0F4C  3005               	movlw	5
  4737  0F4D  00A5               	movwf	??_perform_calibration+2
  4738  0F4E  300F               	movlw	15
  4739  0F4F  00A4               	movwf	??_perform_calibration+1
  4740  0F50  30F4               	movlw	244
  4741  0F51  00A3               	movwf	??_perform_calibration
  4742  0F52                     u5887:	
  4743  0F52  0BA3               	decfsz	??_perform_calibration,f
  4744  0F53  2F52               	goto	u5887
  4745  0F54  0BA4               	decfsz	??_perform_calibration+1,f
  4746  0F55  2F52               	goto	u5887
  4747  0F56  0BA5               	decfsz	??_perform_calibration+2,f
  4748  0F57  2F52               	goto	u5887
  4749  0F58  3001               	movlw	1
  4750  0F59  0020               	movlb	0	; select bank0
  4751  0F5A  00A3               	movwf	??_perform_calibration
  4752  0F5B  0823               	movf	??_perform_calibration,w
  4753  0F5C  07AA               	addwf	perform_calibration@__delay_tmp_712,f
  4754  0F5D  300A               	movlw	10
  4755  0F5E  022A               	subwf	perform_calibration@__delay_tmp_712,w
  4756  0F5F  1C03               	skipc
  4757  0F60  2F4C               	goto	l4293
  4758  0F61                     l391:	
  4759                           
  4760                           ;main.c: 194: bool replay = 1;
  4761  0F61  01A7               	clrf	perform_calibration@replay
  4762  0F62  0AA7               	incf	perform_calibration@replay,f
  4763                           
  4764                           ;main.c: 195: button_init();
  4765  0F63  3189  21AF  318E   	fcall	_button_init
  4766  0F66                     l4329:	
  4767                           ;main.c: 196: while (replay)
  4768                           
  4769  0F66  0020               	movlb	0	; select bank0
  4770  0F67  0827               	movf	perform_calibration@replay,w
  4771  0F68  1903               	btfsc	3,2
  4772  0F69  2ECE               	goto	l4331
  4773                           
  4774                           ;main.c: 197: {
  4775                           ;main.c: 198: for (i=0; i<m_conf.nb_steps; i++)
  4776  0F6A  0020               	movlb	0	; select bank0
  4777  0F6B  01AD               	clrf	perform_calibration@i
  4778  0F6C  2F72               	goto	l4323
  4779  0F6D                     l4321:	
  4780                           ;main.c: 205: break;
  4781                           
  4782  0F6D  3001               	movlw	1
  4783  0F6E  0020               	movlb	0	; select bank0
  4784  0F6F  00A3               	movwf	??_perform_calibration
  4785  0F70  0823               	movf	??_perform_calibration,w
  4786  0F71  07AD               	addwf	perform_calibration@i,f
  4787  0F72                     l4323:	
  4788  0F72  0021               	movlb	1	; select bank1
  4789  0F73  0842               	movf	(_m_conf^(0+128)+3),w
  4790  0F74  0020               	movlb	0	; select bank0
  4791  0F75  022D               	subwf	perform_calibration@i,w
  4792  0F76  1803               	btfsc	3,0
  4793  0F77  2FAF               	goto	l4325
  4794                           
  4795                           ;main.c: 199: {
  4796                           ;main.c: 200: EPWM1_LoadDutyValue(1023-m_conf.ref_pwm[i]);
  4797  0F78  352D               	lslf	perform_calibration@i,w
  4798  0F79  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4799  0F7A  0086               	movwf	6
  4800  0F7B  0187               	clrf	7
  4801  0F7C  3F40               	moviw [0]fsr1
  4802  0F7D  00A3               	movwf	??_perform_calibration
  4803  0F7E  3F41               	moviw [1]fsr1
  4804  0F7F  00A4               	movwf	??_perform_calibration+1
  4805  0F80  09A3               	comf	??_perform_calibration,f
  4806  0F81  09A4               	comf	??_perform_calibration+1,f
  4807  0F82  0AA3               	incf	??_perform_calibration,f
  4808  0F83  1903               	skipnz
  4809  0F84  0AA4               	incf	??_perform_calibration+1,f
  4810  0F85  0823               	movf	??_perform_calibration,w
  4811  0F86  3EFF               	addlw	255
  4812  0F87  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4813  0F88  3003               	movlw	3
  4814  0F89  3D24               	addwfc	??_perform_calibration+1,w
  4815  0F8A  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4816  0F8B  318A  2270  318E   	fcall	_EPWM1_LoadDutyValue
  4817                           
  4818                           ;main.c: 201: for(unsigned char __delay_tmp=0;__delay_tmp<(10*3);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  4819  0F8E  0020               	movlb	0	; select bank0
  4820  0F8F  01AB               	clrf	perform_calibration@__delay_tmp_714
  4821  0F90  301E               	movlw	30
  4822  0F91  022B               	subwf	perform_calibration@__delay_tmp_714,w
  4823  0F92  1803               	btfsc	3,0
  4824  0F93  2FA9               	goto	l4317
  4825  0F94                     l4311:	
  4826  0F94  3005               	movlw	5
  4827  0F95  00A5               	movwf	??_perform_calibration+2
  4828  0F96  300F               	movlw	15
  4829  0F97  00A4               	movwf	??_perform_calibration+1
  4830  0F98  30F4               	movlw	244
  4831  0F99  00A3               	movwf	??_perform_calibration
  4832  0F9A                     u5897:	
  4833  0F9A  0BA3               	decfsz	??_perform_calibration,f
  4834  0F9B  2F9A               	goto	u5897
  4835  0F9C  0BA4               	decfsz	??_perform_calibration+1,f
  4836  0F9D  2F9A               	goto	u5897
  4837  0F9E  0BA5               	decfsz	??_perform_calibration+2,f
  4838  0F9F  2F9A               	goto	u5897
  4839  0FA0  3001               	movlw	1
  4840  0FA1  0020               	movlb	0	; select bank0
  4841  0FA2  00A3               	movwf	??_perform_calibration
  4842  0FA3  0823               	movf	??_perform_calibration,w
  4843  0FA4  07AB               	addwf	perform_calibration@__delay_tmp_714,f
  4844  0FA5  301E               	movlw	30
  4845  0FA6  022B               	subwf	perform_calibration@__delay_tmp_714,w
  4846  0FA7  1C03               	skipc
  4847  0FA8  2F94               	goto	l4311
  4848  0FA9                     l4317:	
  4849                           
  4850                           ;main.c: 202: if (m_button.confirmed_state != nothing)
  4851  0FA9  0021               	movlb	1	; select bank1
  4852  0FAA  0830               	movf	_m_button^(0+128),w	;volatile
  4853  0FAB  1903               	btfsc	3,2
  4854  0FAC  2F6D               	goto	l4321
  4855                           
  4856                           ;main.c: 203: {
  4857                           ;main.c: 204: replay = 0;
  4858  0FAD  0020               	movlb	0	; select bank0
  4859  0FAE  01A7               	clrf	perform_calibration@replay
  4860  0FAF                     l4325:	
  4861                           
  4862                           ;main.c: 206: }
  4863                           ;main.c: 207: }
  4864                           ;main.c: 209: if (m_button.confirmed_state == long_push)
  4865  0FAF  3002               	movlw	2
  4866  0FB0  0021               	movlb	1	; select bank1
  4867  0FB1  0630               	xorwf	_m_button^(0+128),w	;volatile
  4868  0FB2  1D03               	btfss	3,2
  4869  0FB3  2F66               	goto	l4329
  4870                           
  4871                           ;main.c: 210: done = 1;
  4872  0FB4  0020               	movlb	0	; select bank0
  4873  0FB5  01A6               	clrf	perform_calibration@done
  4874  0FB6  0AA6               	incf	perform_calibration@done,f
  4875  0FB7  2F66               	goto	l4329
  4876  0FB8                     l4333:	
  4877                           
  4878                           ;main.c: 211: }
  4879                           ;main.c: 212: }
  4880                           ;main.c: 213: double_fast_blink();
  4881  0FB8  318C  2430  318E   	fcall	_double_fast_blink
  4882                           
  4883                           ;main.c: 214: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((
      +                          unsigned long)((100)*(32000000/4000.0)));};
  4884  0FBB  0020               	movlb	0	; select bank0
  4885  0FBC  01AC               	clrf	perform_calibration@__delay_tmp_715
  4886  0FBD  300A               	movlw	10
  4887  0FBE  022C               	subwf	perform_calibration@__delay_tmp_715,w
  4888  0FBF  1803               	btfsc	3,0
  4889  0FC0  2FD6               	goto	l4347
  4890  0FC1                     l4341:	
  4891  0FC1  3005               	movlw	5
  4892  0FC2  00A5               	movwf	??_perform_calibration+2
  4893  0FC3  300F               	movlw	15
  4894  0FC4  00A4               	movwf	??_perform_calibration+1
  4895  0FC5  30F4               	movlw	244
  4896  0FC6  00A3               	movwf	??_perform_calibration
  4897  0FC7                     u5907:	
  4898  0FC7  0BA3               	decfsz	??_perform_calibration,f
  4899  0FC8  2FC7               	goto	u5907
  4900  0FC9  0BA4               	decfsz	??_perform_calibration+1,f
  4901  0FCA  2FC7               	goto	u5907
  4902  0FCB  0BA5               	decfsz	??_perform_calibration+2,f
  4903  0FCC  2FC7               	goto	u5907
  4904  0FCD  3001               	movlw	1
  4905  0FCE  0020               	movlb	0	; select bank0
  4906  0FCF  00A3               	movwf	??_perform_calibration
  4907  0FD0  0823               	movf	??_perform_calibration,w
  4908  0FD1  07AC               	addwf	perform_calibration@__delay_tmp_715,f
  4909  0FD2  300A               	movlw	10
  4910  0FD3  022C               	subwf	perform_calibration@__delay_tmp_715,w
  4911  0FD4  1C03               	skipc
  4912  0FD5  2FC1               	goto	l4341
  4913  0FD6                     l4347:	
  4914                           
  4915                           ;main.c: 215: button_init();
  4916  0FD6  3189  21AF  318E   	fcall	_button_init
  4917                           
  4918                           ;main.c: 218: m_conf.low_speed_pwm = m_conf.ref_pwm[m_conf.nb_steps-1] - 10;
  4919  0FD9  0021               	movlb	1	; select bank1
  4920  0FDA  3542               	lslf	(_m_conf^(0+128)+3),w
  4921  0FDB  3EFE               	addlw	254
  4922  0FDC  3EC3               	addlw	(low ((_m_conf| 0+4)))& (0+255)
  4923  0FDD  0086               	movwf	6
  4924  0FDE  0187               	clrf	7
  4925  0FDF  3F40               	moviw [0]fsr1
  4926  0FE0  0020               	movlb	0	; select bank0
  4927  0FE1  00A3               	movwf	??_perform_calibration
  4928  0FE2  3F41               	moviw [1]fsr1
  4929  0FE3  00A4               	movwf	??_perform_calibration+1
  4930  0FE4  0823               	movf	??_perform_calibration,w
  4931  0FE5  3EF6               	addlw	246
  4932  0FE6  0021               	movlb	1	; select bank1
  4933  0FE7  00EB               	movwf	(_m_conf^(0+128)+44)
  4934  0FE8  30FF               	movlw	255
  4935  0FE9  0020               	movlb	0	; select bank0
  4936  0FEA  3D24               	addwfc	??_perform_calibration+1,w
  4937  0FEB  0021               	movlb	1	; select bank1
  4938  0FEC  00EC               	movwf	((_m_conf+1)^(0+128)+44)
  4939                           
  4940                           ;main.c: 220: m_conf.impulse_duration = 10;
  4941  0FED  300A               	movlw	10
  4942  0FEE  0020               	movlb	0	; select bank0
  4943  0FEF  00A3               	movwf	??_perform_calibration
  4944  0FF0  0823               	movf	??_perform_calibration,w
  4945  0FF1  0021               	movlb	1	; select bank1
  4946  0FF2  00ED               	movwf	(_m_conf^(0+128)+46)
  4947                           
  4948                           ;main.c: 223: LED_set_state(manual_mode);
  4949  0FF3  3004               	movlw	4
  4950  0FF4  318A  22C6  318E   	fcall	_LED_set_state
  4951                           
  4952                           ;main.c: 224: do { LATA2 = 0; } while(0);
  4953  0FF7  0022               	movlb	2	; select bank2
  4954  0FF8  110C               	bcf	12,2	;volatile
  4955                           
  4956                           ;main.c: 225: EPWM1_LoadDutyValue(1023-0);
  4957  0FF9  30FF               	movlw	255
  4958  0FFA  00F4               	movwf	EPWM1_LoadDutyValue@dutyValue
  4959  0FFB  3003               	movlw	3
  4960  0FFC  00F5               	movwf	EPWM1_LoadDutyValue@dutyValue+1
  4961  0FFD  318A  2270         	fcall	_EPWM1_LoadDutyValue
  4962  0FFF  0008               	return
  4963  1000                     __end_of_perform_calibration:	
  4964                           
  4965                           	psect	text4
  4966  0C30                     __ptext4:	
  4967 ;; *************** function _double_fast_blink *****************
  4968 ;; Defined at:
  4969 ;;		line 14 in file "interact.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4983 ;;      Params:         0       0       0       0       0       0
  4984 ;;      Locals:         0       0       0       0       0       0
  4985 ;;      Temps:          0       3       0       0       0       0
  4986 ;;      Totals:         0       3       0       0       0       0
  4987 ;;Total ram usage:        3 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    7
  4990 ;; This function calls:
  4991 ;;		_LED_set_state
  4992 ;; This function is called by:
  4993 ;;		_perform_calibration
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _double_fast_blink
  4999  0C30                     _double_fast_blink:	
  5000                           
  5001                           ;interact.c: 16: LED_set_state(manual_mode);
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _double_fast_blink: [wreg+status,2+status,0+pclath+cstack]
  5005  0C30  3004               	movlw	4
  5006  0C31  318A  22C6  318C   	fcall	_LED_set_state
  5007                           
  5008                           ;interact.c: 17: do { LATA2 = 0; } while(0);
  5009  0C34  0022               	movlb	2	; select bank2
  5010  0C35  110C               	bcf	12,2	;volatile
  5011                           
  5012                           ;interact.c: 18: _delay((unsigned long)((250)*(32000000/4000.0)));
  5013  0C36  300B               	movlw	11
  5014  0C37  0020               	movlb	0	; select bank0
  5015  0C38  00A2               	movwf	??_double_fast_blink+2
  5016  0C39  3026               	movlw	38
  5017  0C3A  00A1               	movwf	??_double_fast_blink+1
  5018  0C3B  3066               	movlw	102
  5019  0C3C  00A0               	movwf	??_double_fast_blink
  5020  0C3D                     u5917:	
  5021  0C3D  0BA0               	decfsz	??_double_fast_blink,f
  5022  0C3E  2C3D               	goto	u5917
  5023  0C3F  0BA1               	decfsz	??_double_fast_blink+1,f
  5024  0C40  2C3D               	goto	u5917
  5025  0C41  0BA2               	decfsz	??_double_fast_blink+2,f
  5026  0C42  2C3D               	goto	u5917
  5027  0C43  3200               	nop2
  5028                           
  5029                           ;interact.c: 19: do { LATA2 = 1; } while(0);
  5030  0C44  0022               	movlb	2	; select bank2
  5031  0C45  150C               	bsf	12,2	;volatile
  5032                           
  5033                           ;interact.c: 20: _delay((unsigned long)((50)*(32000000/4000.0)));
  5034  0C46  3003               	movlw	3
  5035  0C47  0020               	movlb	0	; select bank0
  5036  0C48  00A2               	movwf	??_double_fast_blink+2
  5037  0C49  3008               	movlw	8
  5038  0C4A  00A1               	movwf	??_double_fast_blink+1
  5039  0C4B  3078               	movlw	120
  5040  0C4C  00A0               	movwf	??_double_fast_blink
  5041  0C4D                     u5927:	
  5042  0C4D  0BA0               	decfsz	??_double_fast_blink,f
  5043  0C4E  2C4D               	goto	u5927
  5044  0C4F  0BA1               	decfsz	??_double_fast_blink+1,f
  5045  0C50  2C4D               	goto	u5927
  5046  0C51  0BA2               	decfsz	??_double_fast_blink+2,f
  5047  0C52  2C4D               	goto	u5927
  5048                           
  5049                           ;interact.c: 21: do { LATA2 = 0; } while(0);
  5050  0C53  0022               	movlb	2	; select bank2
  5051  0C54  110C               	bcf	12,2	;volatile
  5052                           
  5053                           ;interact.c: 22: _delay((unsigned long)((50)*(32000000/4000.0)));
  5054  0C55  3003               	movlw	3
  5055  0C56  0020               	movlb	0	; select bank0
  5056  0C57  00A2               	movwf	??_double_fast_blink+2
  5057  0C58  3008               	movlw	8
  5058  0C59  00A1               	movwf	??_double_fast_blink+1
  5059  0C5A  3078               	movlw	120
  5060  0C5B  00A0               	movwf	??_double_fast_blink
  5061  0C5C                     u5937:	
  5062  0C5C  0BA0               	decfsz	??_double_fast_blink,f
  5063  0C5D  2C5C               	goto	u5937
  5064  0C5E  0BA1               	decfsz	??_double_fast_blink+1,f
  5065  0C5F  2C5C               	goto	u5937
  5066  0C60  0BA2               	decfsz	??_double_fast_blink+2,f
  5067  0C61  2C5C               	goto	u5937
  5068                           
  5069                           ;interact.c: 23: do { LATA2 = 1; } while(0);
  5070  0C62  0022               	movlb	2	; select bank2
  5071  0C63  150C               	bsf	12,2	;volatile
  5072                           
  5073                           ;interact.c: 24: _delay((unsigned long)((50)*(32000000/4000.0)));
  5074  0C64  3003               	movlw	3
  5075  0C65  0020               	movlb	0	; select bank0
  5076  0C66  00A2               	movwf	??_double_fast_blink+2
  5077  0C67  3008               	movlw	8
  5078  0C68  00A1               	movwf	??_double_fast_blink+1
  5079  0C69  3078               	movlw	120
  5080  0C6A  00A0               	movwf	??_double_fast_blink
  5081  0C6B                     u5947:	
  5082  0C6B  0BA0               	decfsz	??_double_fast_blink,f
  5083  0C6C  2C6B               	goto	u5947
  5084  0C6D  0BA1               	decfsz	??_double_fast_blink+1,f
  5085  0C6E  2C6B               	goto	u5947
  5086  0C6F  0BA2               	decfsz	??_double_fast_blink+2,f
  5087  0C70  2C6B               	goto	u5947
  5088                           
  5089                           ;interact.c: 25: do { LATA2 = 0; } while(0);
  5090  0C71  0022               	movlb	2	; select bank2
  5091  0C72  110C               	bcf	12,2	;volatile
  5092                           
  5093                           ;interact.c: 26: _delay((unsigned long)((250)*(32000000/4000.0)));
  5094  0C73  300B               	movlw	11
  5095  0C74  0020               	movlb	0	; select bank0
  5096  0C75  00A2               	movwf	??_double_fast_blink+2
  5097  0C76  3026               	movlw	38
  5098  0C77  00A1               	movwf	??_double_fast_blink+1
  5099  0C78  3066               	movlw	102
  5100  0C79  00A0               	movwf	??_double_fast_blink
  5101  0C7A                     u5957:	
  5102  0C7A  0BA0               	decfsz	??_double_fast_blink,f
  5103  0C7B  2C7A               	goto	u5957
  5104  0C7C  0BA1               	decfsz	??_double_fast_blink+1,f
  5105  0C7D  2C7A               	goto	u5957
  5106  0C7E  0BA2               	decfsz	??_double_fast_blink+2,f
  5107  0C7F  2C7A               	goto	u5957
  5108  0C80  3200               	nop2
  5109  0C81  0008               	return
  5110  0C82                     __end_of_double_fast_blink:	
  5111                           
  5112                           	psect	text5
  5113  0AC6                     __ptext5:	
  5114 ;; *************** function _LED_set_state *****************
  5115 ;; Defined at:
  5116 ;;		line 29 in file "interact.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  new_state       1    wreg     enum E2938
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  new_state       1    5[COMMON] enum E2938
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5130 ;;      Params:         0       0       0       0       0       0
  5131 ;;      Locals:         1       0       0       0       0       0
  5132 ;;      Temps:          1       0       0       0       0       0
  5133 ;;      Totals:         2       0       0       0       0       0
  5134 ;;Total ram usage:        2 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    6
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_perform_calibration
  5141 ;;		_main
  5142 ;;		_double_fast_blink
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           
  5147                           ;psect for function _LED_set_state
  5148  0AC6                     _LED_set_state:	
  5149                           
  5150                           ;incstack = 0
  5151                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  5152                           ;LED_set_state@new_state stored from wreg
  5153  0AC6  00F5               	movwf	LED_set_state@new_state
  5154                           
  5155                           ;interact.c: 31: m_LED.state = new_state;
  5156  0AC7  0875               	movf	LED_set_state@new_state,w
  5157  0AC8  00F4               	movwf	??_LED_set_state
  5158  0AC9  0874               	movf	??_LED_set_state,w
  5159  0ACA  00F6               	movwf	_m_LED	;volatile
  5160                           
  5161                           ;interact.c: 32: m_LED.counter = 0;
  5162  0ACB  01F7               	clrf	_m_LED+1	;volatile
  5163                           
  5164                           ;interact.c: 33: if (new_state == always_off)
  5165  0ACC  0375               	decf	LED_set_state@new_state,w
  5166  0ACD  1D03               	btfss	3,2
  5167  0ACE  2AD2               	goto	l3863
  5168                           
  5169                           ;interact.c: 34: do { LATA2 = 0; } while(0);
  5170  0ACF  0022               	movlb	2	; select bank2
  5171  0AD0  110C               	bcf	12,2	;volatile
  5172  0AD1  0008               	return
  5173  0AD2                     l3863:	
  5174                           
  5175                           ;interact.c: 35: else if (new_state == always_on)
  5176  0AD2  0875               	movf	LED_set_state@new_state,w
  5177  0AD3  1D03               	btfss	3,2
  5178  0AD4  2AD8               	goto	l3865
  5179                           
  5180                           ;interact.c: 36: do { LATA2 = 1; } while(0);
  5181  0AD5  0022               	movlb	2	; select bank2
  5182  0AD6  150C               	bsf	12,2	;volatile
  5183  0AD7  0008               	return
  5184  0AD8                     l3865:	
  5185                           
  5186                           ;interact.c: 37: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  5187  0AD8  3002               	movlw	2
  5188  0AD9  0675               	xorwf	LED_set_state@new_state,w
  5189  0ADA  1903               	btfsc	3,2
  5190  0ADB  2AE0               	goto	l543
  5191  0ADC  3003               	movlw	3
  5192  0ADD  0675               	xorwf	LED_set_state@new_state,w
  5193  0ADE  1D03               	btfss	3,2
  5194  0ADF  0008               	return
  5195  0AE0                     l543:	
  5196                           ;interact.c: 38: do { LATA2 = 1; } while(0);
  5197                           
  5198  0AE0  0022               	movlb	2	; select bank2
  5199  0AE1  150C               	bsf	12,2	;volatile
  5200  0AE2  0008               	return
  5201  0AE3                     __end_of_LED_set_state:	
  5202                           
  5203                           	psect	text6
  5204  09AF                     __ptext6:	
  5205 ;; *************** function _button_init *****************
  5206 ;; Defined at:
  5207 ;;		line 78 in file "interact.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;		None
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0, pclath, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5221 ;;      Params:         0       0       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0       0
  5223 ;;      Temps:          1       0       0       0       0       0
  5224 ;;      Totals:         1       0       0       0       0       0
  5225 ;;Total ram usage:        1 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    7
  5228 ;; This function calls:
  5229 ;;		_get_button_state
  5230 ;; This function is called by:
  5231 ;;		_perform_calibration
  5232 ;;		_main
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           
  5237                           ;psect for function _button_init
  5238  09AF                     _button_init:	
  5239                           
  5240                           ;interact.c: 80: m_button.last_state = get_button_state();
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in _button_init: [wreg+status,2+status,0+pclath+cstack]
  5244  09AF  3189  21A3         	fcall	_get_button_state
  5245  09B1  00F5               	movwf	??_button_init
  5246  09B2  0875               	movf	??_button_init,w
  5247  09B3  0021               	movlb	1	; select bank1
  5248  09B4  00B5               	movwf	(_m_button^(0+128)+5)	;volatile
  5249                           
  5250                           ;interact.c: 81: m_button.count_pressed = 0;
  5251  09B5  01B1               	clrf	(_m_button^(0+128)+1)	;volatile
  5252                           
  5253                           ;interact.c: 82: m_button.count_released = 0;
  5254  09B6  01B2               	clrf	(_m_button^(0+128)+2)	;volatile
  5255                           
  5256                           ;interact.c: 83: m_button.confirmed_state = nothing;
  5257  09B7  01B0               	clrf	_m_button^(0+128)	;volatile
  5258                           
  5259                           ;interact.c: 84: m_button.push_confirmed = 0;
  5260  09B8  01B3               	clrf	(_m_button^(0+128)+3)	;volatile
  5261                           
  5262                           ;interact.c: 85: m_button.release_confirmed = 0;
  5263  09B9  01B4               	clrf	(_m_button^(0+128)+4)	;volatile
  5264                           
  5265                           ;interact.c: 86: m_button.has_once_been_released = 0;
  5266  09BA  01B6               	clrf	(_m_button^(0+128)+6)	;volatile
  5267  09BB  0008               	return
  5268  09BC                     __end_of_button_init:	
  5269                           
  5270                           	psect	text7
  5271  09A3                     __ptext7:	
  5272 ;; *************** function _get_button_state *****************
  5273 ;; Defined at:
  5274 ;;		line 69 in file "interact.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  state           1    4[COMMON] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      unsigned char 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5288 ;;      Params:         0       0       0       0       0       0
  5289 ;;      Locals:         1       0       0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0
  5291 ;;      Totals:         1       0       0       0       0       0
  5292 ;;Total ram usage:        1 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    6
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_perform_calibration
  5299 ;;		_button_init
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function _get_button_state
  5305  09A3                     _get_button_state:	
  5306                           
  5307                           ;interact.c: 72: unsigned char state = PORTBbits.RB0;
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5311  09A3  3000               	movlw	0
  5312  09A4  0020               	movlb	0	; select bank0
  5313  09A5  180D               	btfsc	13,0	;volatile
  5314  09A6  3001               	movlw	1
  5315  09A7  00F4               	movwf	get_button_state@state
  5316                           
  5317                           ;interact.c: 73: if (state == 1)
  5318  09A8  0374               	decf	get_button_state@state,w
  5319  09A9  1D03               	btfss	3,2
  5320  09AA  29AD               	goto	l3879
  5321                           
  5322                           ;interact.c: 74: return 0;
  5323  09AB  3000               	movlw	0
  5324  09AC  0008               	return
  5325  09AD                     l3879:	
  5326                           
  5327                           ;interact.c: 75: else return 1;
  5328  09AD  3001               	movlw	1
  5329  09AE  0008               	return
  5330  09AF                     __end_of_get_button_state:	
  5331                           
  5332                           	psect	text8
  5333  0A70                     __ptext8:	
  5334 ;; *************** function _EPWM1_LoadDutyValue *****************
  5335 ;; Defined at:
  5336 ;;		line 90 in file "mcc_generated_files/epwm1.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  dutyValue       2    4[COMMON] unsigned int 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5350 ;;      Params:         2       0       0       0       0       0
  5351 ;;      Locals:         0       0       0       0       0       0
  5352 ;;      Temps:          0       2       0       0       0       0
  5353 ;;      Totals:         2       2       0       0       0       0
  5354 ;;Total ram usage:        4 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    6
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_perform_calibration
  5361 ;;		_main
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _EPWM1_LoadDutyValue
  5367  0A70                     _EPWM1_LoadDutyValue:	
  5368                           
  5369                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
  5370                           
  5371                           ;incstack = 0
  5372                           ; Regs used in _EPWM1_LoadDutyValue: [wreg+status,2+status,0]
  5373  0A70  0875               	movf	EPWM1_LoadDutyValue@dutyValue+1,w
  5374  0A71  0020               	movlb	0	; select bank0
  5375  0A72  00A1               	movwf	??_EPWM1_LoadDutyValue+1
  5376  0A73  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5377  0A74  00A0               	movwf	??_EPWM1_LoadDutyValue
  5378  0A75  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5379  0A76  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5380  0A77  36A1               	lsrf	??_EPWM1_LoadDutyValue+1,f
  5381  0A78  0CA0               	rrf	??_EPWM1_LoadDutyValue,f
  5382  0A79  0820               	movf	??_EPWM1_LoadDutyValue,w
  5383  0A7A  0025               	movlb	5	; select bank5
  5384  0A7B  0091               	movwf	17	;volatile
  5385                           
  5386                           ;epwm1.c: 96: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5387  0A7C  0874               	movf	EPWM1_LoadDutyValue@dutyValue,w
  5388  0A7D  3903               	andlw	3
  5389  0A7E  0020               	movlb	0	; select bank0
  5390  0A7F  00A0               	movwf	??_EPWM1_LoadDutyValue
  5391  0A80  3004               	movlw	4
  5392  0A81                     u4195:	
  5393  0A81  35A0               	lslf	??_EPWM1_LoadDutyValue,f
  5394  0A82  0B89               	decfsz	9,f
  5395  0A83  2A81               	goto	u4195
  5396  0A84  0025               	movlb	5	; select bank5
  5397  0A85  0813               	movf	19,w	;volatile
  5398  0A86  39CF               	andlw	207
  5399  0A87  0020               	movlb	0	; select bank0
  5400  0A88  0420               	iorwf	??_EPWM1_LoadDutyValue,w
  5401  0A89  0025               	movlb	5	; select bank5
  5402  0A8A  0093               	movwf	19	;volatile
  5403  0A8B  0008               	return
  5404  0A8C                     __end_of_EPWM1_LoadDutyValue:	
  5405                           
  5406                           	psect	text9
  5407  0637                     __ptext9:	
  5408 ;; *************** function _multiply_fp *****************
  5409 ;; Defined at:
  5410 ;;		line 44 in file "fixed_point.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  n1              4   12[BANK0 ] long 
  5413 ;;  n2              4   16[BANK0 ] long 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  res             4   34[BANK0 ] long 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  4   12[BANK0 ] long 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2, status,0, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5425 ;;      Params:         0       8       0       0       0       0
  5426 ;;      Locals:         0       4       0       0       0       0
  5427 ;;      Temps:          0      14       0       0       0       0
  5428 ;;      Totals:         0      26       0       0       0       0
  5429 ;;Total ram usage:       26 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    7
  5432 ;; This function calls:
  5433 ;;		___lmul
  5434 ;; This function is called by:
  5435 ;;		_main
  5436 ;;		_reciprocal_fp
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _multiply_fp
  5442  0637                     _multiply_fp:	
  5443                           
  5444                           ;fixed_point.c: 48: signed long long res = ((signed long long) (n1 >> 16) * (signed long
      +                           long) (n2 >> 16))<<16;
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  5448  0637  0020               	movlb	0	; select bank0
  5449  0638  082C               	movf	multiply_fp@n1,w
  5450  0639  00B4               	movwf	??_multiply_fp
  5451  063A  082D               	movf	multiply_fp@n1+1,w
  5452  063B  00B5               	movwf	??_multiply_fp+1
  5453  063C  082E               	movf	multiply_fp@n1+2,w
  5454  063D  00B6               	movwf	??_multiply_fp+2
  5455  063E  082F               	movf	multiply_fp@n1+3,w
  5456  063F  00B7               	movwf	??_multiply_fp+3
  5457  0640  3010               	movlw	16
  5458  0641  00B8               	movwf	??_multiply_fp+4
  5459  0642                     u5305:	
  5460  0642  37B7               	asrf	??_multiply_fp+3,f
  5461  0643  0CB6               	rrf	??_multiply_fp+2,f
  5462  0644  0CB5               	rrf	??_multiply_fp+1,f
  5463  0645  0CB4               	rrf	??_multiply_fp,f
  5464  0646  0BB8               	decfsz	??_multiply_fp+4,f
  5465  0647  2E42               	goto	u5305
  5466  0648  0837               	movf	??_multiply_fp+3,w
  5467  0649  00A3               	movwf	___lmul@multiplier+3
  5468  064A  0836               	movf	??_multiply_fp+2,w
  5469  064B  00A2               	movwf	___lmul@multiplier+2
  5470  064C  0835               	movf	??_multiply_fp+1,w
  5471  064D  00A1               	movwf	___lmul@multiplier+1
  5472  064E  0834               	movf	??_multiply_fp,w
  5473  064F  00A0               	movwf	___lmul@multiplier
  5474  0650  0830               	movf	multiply_fp@n2,w
  5475  0651  00B9               	movwf	??_multiply_fp+5
  5476  0652  0831               	movf	multiply_fp@n2+1,w
  5477  0653  00BA               	movwf	??_multiply_fp+6
  5478  0654  0832               	movf	multiply_fp@n2+2,w
  5479  0655  00BB               	movwf	??_multiply_fp+7
  5480  0656  0833               	movf	multiply_fp@n2+3,w
  5481  0657  00BC               	movwf	??_multiply_fp+8
  5482  0658  3010               	movlw	16
  5483  0659  00BD               	movwf	??_multiply_fp+9
  5484  065A                     u5315:	
  5485  065A  37BC               	asrf	??_multiply_fp+8,f
  5486  065B  0CBB               	rrf	??_multiply_fp+7,f
  5487  065C  0CBA               	rrf	??_multiply_fp+6,f
  5488  065D  0CB9               	rrf	??_multiply_fp+5,f
  5489  065E  0BBD               	decfsz	??_multiply_fp+9,f
  5490  065F  2E5A               	goto	u5315
  5491  0660  083C               	movf	??_multiply_fp+8,w
  5492  0661  00A7               	movwf	___lmul@multiplicand+3
  5493  0662  083B               	movf	??_multiply_fp+7,w
  5494  0663  00A6               	movwf	___lmul@multiplicand+2
  5495  0664  083A               	movf	??_multiply_fp+6,w
  5496  0665  00A5               	movwf	___lmul@multiplicand+1
  5497  0666  0839               	movf	??_multiply_fp+5,w
  5498  0667  00A4               	movwf	___lmul@multiplicand
  5499  0668  318B  236C  3186   	fcall	___lmul
  5500  066B  0020               	movlb	0	; select bank0
  5501  066C  0820               	movf	?___lmul,w
  5502  066D  00BE               	movwf	??_multiply_fp+10
  5503  066E  0821               	movf	?___lmul+1,w
  5504  066F  00BF               	movwf	??_multiply_fp+11
  5505  0670  0822               	movf	?___lmul+2,w
  5506  0671  00C0               	movwf	??_multiply_fp+12
  5507  0672  0823               	movf	?___lmul+3,w
  5508  0673  00C1               	movwf	??_multiply_fp+13
  5509  0674  3010               	movlw	16
  5510  0675                     u5325:	
  5511  0675  35BE               	lslf	??_multiply_fp+10,f
  5512  0676  0DBF               	rlf	??_multiply_fp+11,f
  5513  0677  0DC0               	rlf	??_multiply_fp+12,f
  5514  0678  0DC1               	rlf	??_multiply_fp+13,f
  5515  0679  0B89               	decfsz	9,f
  5516  067A  2E75               	goto	u5325
  5517  067B  0841               	movf	??_multiply_fp+13,w
  5518  067C  00C5               	movwf	multiply_fp@res+3
  5519  067D  0840               	movf	??_multiply_fp+12,w
  5520  067E  00C4               	movwf	multiply_fp@res+2
  5521  067F  083F               	movf	??_multiply_fp+11,w
  5522  0680  00C3               	movwf	multiply_fp@res+1
  5523  0681  083E               	movf	??_multiply_fp+10,w
  5524  0682  00C2               	movwf	multiply_fp@res
  5525                           
  5526                           ;fixed_point.c: 49: res+= ((signed long long) (n1 >> 16) * (signed long long) (n2 & 0x00
      +                          00FFFF));
  5527  0683  082C               	movf	multiply_fp@n1,w
  5528  0684  00B4               	movwf	??_multiply_fp
  5529  0685  082D               	movf	multiply_fp@n1+1,w
  5530  0686  00B5               	movwf	??_multiply_fp+1
  5531  0687  082E               	movf	multiply_fp@n1+2,w
  5532  0688  00B6               	movwf	??_multiply_fp+2
  5533  0689  082F               	movf	multiply_fp@n1+3,w
  5534  068A  00B7               	movwf	??_multiply_fp+3
  5535  068B  3010               	movlw	16
  5536  068C  00B8               	movwf	??_multiply_fp+4
  5537  068D                     u5335:	
  5538  068D  37B7               	asrf	??_multiply_fp+3,f
  5539  068E  0CB6               	rrf	??_multiply_fp+2,f
  5540  068F  0CB5               	rrf	??_multiply_fp+1,f
  5541  0690  0CB4               	rrf	??_multiply_fp,f
  5542  0691  0BB8               	decfsz	??_multiply_fp+4,f
  5543  0692  2E8D               	goto	u5335
  5544  0693  0837               	movf	??_multiply_fp+3,w
  5545  0694  00A3               	movwf	___lmul@multiplier+3
  5546  0695  0836               	movf	??_multiply_fp+2,w
  5547  0696  00A2               	movwf	___lmul@multiplier+2
  5548  0697  0835               	movf	??_multiply_fp+1,w
  5549  0698  00A1               	movwf	___lmul@multiplier+1
  5550  0699  0834               	movf	??_multiply_fp,w
  5551  069A  00A0               	movwf	___lmul@multiplier
  5552  069B  30FF               	movlw	255
  5553  069C  0530               	andwf	multiply_fp@n2,w
  5554  069D  00A4               	movwf	___lmul@multiplicand
  5555  069E  30FF               	movlw	255
  5556  069F  0531               	andwf	multiply_fp@n2+1,w
  5557  06A0  00A5               	movwf	___lmul@multiplicand+1
  5558  06A1  3000               	movlw	0
  5559  06A2  0532               	andwf	multiply_fp@n2+2,w
  5560  06A3  00A6               	movwf	___lmul@multiplicand+2
  5561  06A4  3000               	movlw	0
  5562  06A5  0533               	andwf	multiply_fp@n2+3,w
  5563  06A6  00A7               	movwf	___lmul@multiplicand+3
  5564  06A7  318B  236C  3186   	fcall	___lmul
  5565  06AA  0020               	movlb	0	; select bank0
  5566  06AB  0820               	movf	?___lmul,w
  5567  06AC  07C2               	addwf	multiply_fp@res,f
  5568  06AD  0821               	movf	?___lmul+1,w
  5569  06AE  3DC3               	addwfc	multiply_fp@res+1,f
  5570  06AF  0822               	movf	?___lmul+2,w
  5571  06B0  3DC4               	addwfc	multiply_fp@res+2,f
  5572  06B1  0823               	movf	?___lmul+3,w
  5573  06B2  3DC5               	addwfc	multiply_fp@res+3,f
  5574                           
  5575                           ;fixed_point.c: 50: res+= ((signed long long) (n2 >> 16) * (signed long long) (n1 & 0x00
      +                          00FFFF));
  5576  06B3  0830               	movf	multiply_fp@n2,w
  5577  06B4  00B4               	movwf	??_multiply_fp
  5578  06B5  0831               	movf	multiply_fp@n2+1,w
  5579  06B6  00B5               	movwf	??_multiply_fp+1
  5580  06B7  0832               	movf	multiply_fp@n2+2,w
  5581  06B8  00B6               	movwf	??_multiply_fp+2
  5582  06B9  0833               	movf	multiply_fp@n2+3,w
  5583  06BA  00B7               	movwf	??_multiply_fp+3
  5584  06BB  3010               	movlw	16
  5585  06BC  00B8               	movwf	??_multiply_fp+4
  5586  06BD                     u5345:	
  5587  06BD  37B7               	asrf	??_multiply_fp+3,f
  5588  06BE  0CB6               	rrf	??_multiply_fp+2,f
  5589  06BF  0CB5               	rrf	??_multiply_fp+1,f
  5590  06C0  0CB4               	rrf	??_multiply_fp,f
  5591  06C1  0BB8               	decfsz	??_multiply_fp+4,f
  5592  06C2  2EBD               	goto	u5345
  5593  06C3  0837               	movf	??_multiply_fp+3,w
  5594  06C4  00A3               	movwf	___lmul@multiplier+3
  5595  06C5  0836               	movf	??_multiply_fp+2,w
  5596  06C6  00A2               	movwf	___lmul@multiplier+2
  5597  06C7  0835               	movf	??_multiply_fp+1,w
  5598  06C8  00A1               	movwf	___lmul@multiplier+1
  5599  06C9  0834               	movf	??_multiply_fp,w
  5600  06CA  00A0               	movwf	___lmul@multiplier
  5601  06CB  30FF               	movlw	255
  5602  06CC  052C               	andwf	multiply_fp@n1,w
  5603  06CD  00A4               	movwf	___lmul@multiplicand
  5604  06CE  30FF               	movlw	255
  5605  06CF  052D               	andwf	multiply_fp@n1+1,w
  5606  06D0  00A5               	movwf	___lmul@multiplicand+1
  5607  06D1  3000               	movlw	0
  5608  06D2  052E               	andwf	multiply_fp@n1+2,w
  5609  06D3  00A6               	movwf	___lmul@multiplicand+2
  5610  06D4  3000               	movlw	0
  5611  06D5  052F               	andwf	multiply_fp@n1+3,w
  5612  06D6  00A7               	movwf	___lmul@multiplicand+3
  5613  06D7  318B  236C  3186   	fcall	___lmul
  5614  06DA  0020               	movlb	0	; select bank0
  5615  06DB  0820               	movf	?___lmul,w
  5616  06DC  07C2               	addwf	multiply_fp@res,f
  5617  06DD  0821               	movf	?___lmul+1,w
  5618  06DE  3DC3               	addwfc	multiply_fp@res+1,f
  5619  06DF  0822               	movf	?___lmul+2,w
  5620  06E0  3DC4               	addwfc	multiply_fp@res+2,f
  5621  06E1  0823               	movf	?___lmul+3,w
  5622  06E2  3DC5               	addwfc	multiply_fp@res+3,f
  5623                           
  5624                           ;fixed_point.c: 51: res+= (((signed long long) (n1 & 0x0000FFFF) * (signed long long) (n
      +                          2 & 0x0000FFFF))>>16)& 0x0000FFFF;
  5625  06E3  30FF               	movlw	255
  5626  06E4  00B4               	movwf	??_multiply_fp
  5627  06E5  30FF               	movlw	255
  5628  06E6  00B5               	movwf	??_multiply_fp+1
  5629  06E7  3000               	movlw	0
  5630  06E8  00B6               	movwf	??_multiply_fp+2
  5631  06E9  3000               	movlw	0
  5632  06EA  00B7               	movwf	??_multiply_fp+3
  5633  06EB  30FF               	movlw	255
  5634  06EC  052C               	andwf	multiply_fp@n1,w
  5635  06ED  00A0               	movwf	___lmul@multiplier
  5636  06EE  30FF               	movlw	255
  5637  06EF  052D               	andwf	multiply_fp@n1+1,w
  5638  06F0  00A1               	movwf	___lmul@multiplier+1
  5639  06F1  3000               	movlw	0
  5640  06F2  052E               	andwf	multiply_fp@n1+2,w
  5641  06F3  00A2               	movwf	___lmul@multiplier+2
  5642  06F4  3000               	movlw	0
  5643  06F5  052F               	andwf	multiply_fp@n1+3,w
  5644  06F6  00A3               	movwf	___lmul@multiplier+3
  5645  06F7  30FF               	movlw	255
  5646  06F8  0530               	andwf	multiply_fp@n2,w
  5647  06F9  00A4               	movwf	___lmul@multiplicand
  5648  06FA  30FF               	movlw	255
  5649  06FB  0531               	andwf	multiply_fp@n2+1,w
  5650  06FC  00A5               	movwf	___lmul@multiplicand+1
  5651  06FD  3000               	movlw	0
  5652  06FE  0532               	andwf	multiply_fp@n2+2,w
  5653  06FF  00A6               	movwf	___lmul@multiplicand+2
  5654  0700  3000               	movlw	0
  5655  0701  0533               	andwf	multiply_fp@n2+3,w
  5656  0702  00A7               	movwf	___lmul@multiplicand+3
  5657  0703  318B  236C  3186   	fcall	___lmul
  5658  0706  0020               	movlb	0	; select bank0
  5659  0707  0820               	movf	?___lmul,w
  5660  0708  00B8               	movwf	??_multiply_fp+4
  5661  0709  0821               	movf	?___lmul+1,w
  5662  070A  00B9               	movwf	??_multiply_fp+5
  5663  070B  0822               	movf	?___lmul+2,w
  5664  070C  00BA               	movwf	??_multiply_fp+6
  5665  070D  0823               	movf	?___lmul+3,w
  5666  070E  00BB               	movwf	??_multiply_fp+7
  5667  070F  3010               	movlw	16
  5668  0710  00BC               	movwf	??_multiply_fp+8
  5669  0711                     u5355:	
  5670  0711  37BB               	asrf	??_multiply_fp+7,f
  5671  0712  0CBA               	rrf	??_multiply_fp+6,f
  5672  0713  0CB9               	rrf	??_multiply_fp+5,f
  5673  0714  0CB8               	rrf	??_multiply_fp+4,f
  5674  0715  0BBC               	decfsz	??_multiply_fp+8,f
  5675  0716  2F11               	goto	u5355
  5676  0717  0838               	movf	??_multiply_fp+4,w
  5677  0718  05B4               	andwf	??_multiply_fp,f
  5678  0719  0839               	movf	??_multiply_fp+5,w
  5679  071A  05B5               	andwf	??_multiply_fp+1,f
  5680  071B  083A               	movf	??_multiply_fp+6,w
  5681  071C  05B6               	andwf	??_multiply_fp+2,f
  5682  071D  083B               	movf	??_multiply_fp+7,w
  5683  071E  05B7               	andwf	??_multiply_fp+3,f
  5684  071F  0834               	movf	??_multiply_fp,w
  5685  0720  07C2               	addwf	multiply_fp@res,f
  5686  0721  0835               	movf	??_multiply_fp+1,w
  5687  0722  3DC3               	addwfc	multiply_fp@res+1,f
  5688  0723  0836               	movf	??_multiply_fp+2,w
  5689  0724  3DC4               	addwfc	multiply_fp@res+2,f
  5690  0725  0837               	movf	??_multiply_fp+3,w
  5691  0726  3DC5               	addwfc	multiply_fp@res+3,f
  5692                           
  5693                           ;fixed_point.c: 52: return res;
  5694  0727  0845               	movf	multiply_fp@res+3,w
  5695  0728  00AF               	movwf	?_multiply_fp+3
  5696  0729  0844               	movf	multiply_fp@res+2,w
  5697  072A  00AE               	movwf	?_multiply_fp+2
  5698  072B  0843               	movf	multiply_fp@res+1,w
  5699  072C  00AD               	movwf	?_multiply_fp+1
  5700  072D  0842               	movf	multiply_fp@res,w
  5701  072E  00AC               	movwf	?_multiply_fp
  5702  072F  0008               	return
  5703  0730                     __end_of_multiply_fp:	
  5704                           
  5705                           	psect	text10
  5706  0B6C                     __ptext10:	
  5707 ;; *************** function ___lmul *****************
  5708 ;; Defined at:
  5709 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5712 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  product         4    8[BANK0 ] unsigned long 
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  4    0[BANK0 ] unsigned long 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5724 ;;      Params:         0       8       0       0       0       0
  5725 ;;      Locals:         0       4       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0
  5727 ;;      Totals:         0      12       0       0       0       0
  5728 ;;Total ram usage:       12 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    6
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_multiply_fp
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function ___lmul
  5740  0B6C                     ___lmul:	
  5741                           
  5742                           ;incstack = 0
  5743                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5744  0B6C  3000               	movlw	0
  5745  0B6D  0020               	movlb	0	; select bank0
  5746  0B6E  00AB               	movwf	___lmul@product+3
  5747  0B6F  3000               	movlw	0
  5748  0B70  00AA               	movwf	___lmul@product+2
  5749  0B71  3000               	movlw	0
  5750  0B72  00A9               	movwf	___lmul@product+1
  5751  0B73  3000               	movlw	0
  5752  0B74  00A8               	movwf	___lmul@product
  5753  0B75                     l4107:	
  5754  0B75  1C20               	btfss	___lmul@multiplier,0
  5755  0B76  2B7F               	goto	l4111
  5756  0B77  0824               	movf	___lmul@multiplicand,w
  5757  0B78  07A8               	addwf	___lmul@product,f
  5758  0B79  0825               	movf	___lmul@multiplicand+1,w
  5759  0B7A  3DA9               	addwfc	___lmul@product+1,f
  5760  0B7B  0826               	movf	___lmul@multiplicand+2,w
  5761  0B7C  3DAA               	addwfc	___lmul@product+2,f
  5762  0B7D  0827               	movf	___lmul@multiplicand+3,w
  5763  0B7E  3DAB               	addwfc	___lmul@product+3,f
  5764  0B7F                     l4111:	
  5765  0B7F  3001               	movlw	1
  5766  0B80                     u4355:	
  5767  0B80  35A4               	lslf	___lmul@multiplicand,f
  5768  0B81  0DA5               	rlf	___lmul@multiplicand+1,f
  5769  0B82  0DA6               	rlf	___lmul@multiplicand+2,f
  5770  0B83  0DA7               	rlf	___lmul@multiplicand+3,f
  5771  0B84  0B89               	decfsz	9,f
  5772  0B85  2B80               	goto	u4355
  5773  0B86  3001               	movlw	1
  5774  0B87                     u4365:	
  5775  0B87  36A3               	lsrf	___lmul@multiplier+3,f
  5776  0B88  0CA2               	rrf	___lmul@multiplier+2,f
  5777  0B89  0CA1               	rrf	___lmul@multiplier+1,f
  5778  0B8A  0CA0               	rrf	___lmul@multiplier,f
  5779  0B8B  0B89               	decfsz	9,f
  5780  0B8C  2B87               	goto	u4365
  5781  0B8D  0823               	movf	___lmul@multiplier+3,w
  5782  0B8E  0422               	iorwf	___lmul@multiplier+2,w
  5783  0B8F  0421               	iorwf	___lmul@multiplier+1,w
  5784  0B90  0420               	iorwf	___lmul@multiplier,w
  5785  0B91  1D03               	skipz
  5786  0B92  2B75               	goto	l4107
  5787  0B93  082B               	movf	___lmul@product+3,w
  5788  0B94  00A3               	movwf	?___lmul+3
  5789  0B95  082A               	movf	___lmul@product+2,w
  5790  0B96  00A2               	movwf	?___lmul+2
  5791  0B97  0829               	movf	___lmul@product+1,w
  5792  0B98  00A1               	movwf	?___lmul+1
  5793  0B99  0828               	movf	___lmul@product,w
  5794  0B9A  00A0               	movwf	?___lmul
  5795  0B9B  0008               	return
  5796  0B9C                     __end_of___lmul:	
  5797                           
  5798                           	psect	text11
  5799  0DB3                     __ptext11:	
  5800 ;; *************** function _load_calibration_from_EEPROM *****************
  5801 ;; Defined at:
  5802 ;;		line 92 in file "main.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  crc             2   17[BANK0 ] unsigned short 
  5807 ;;  i               1   21[BANK0 ] unsigned char 
  5808 ;;  p               1   20[BANK0 ] PTR unsigned char 
  5809 ;;		 -> m_crc(2), m_conf(47), 
  5810 ;;  addr            1   19[BANK0 ] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      unsigned char 
  5813 ;; Registers used:
  5814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5820 ;;      Params:         0       0       0       0       0       0
  5821 ;;      Locals:         0       5       0       0       0       0
  5822 ;;      Temps:          1       0       0       0       0       0
  5823 ;;      Totals:         1       5       0       0       0       0
  5824 ;;Total ram usage:        6 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    7
  5827 ;; This function calls:
  5828 ;;		_DATAEE_ReadByte
  5829 ;;		_crc_update
  5830 ;; This function is called by:
  5831 ;;		_main
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           
  5836                           ;psect for function _load_calibration_from_EEPROM
  5837  0DB3                     _load_calibration_from_EEPROM:	
  5838                           
  5839                           ;main.c: 95: unsigned char addr = 0x00;
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _load_calibration_from_EEPROM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  5843  0DB3  0020               	movlb	0	; select bank0
  5844  0DB4  01B3               	clrf	load_calibration_from_EEPROM@addr
  5845                           
  5846                           ;main.c: 96: unsigned short crc = 0x00;
  5847  0DB5  01B1               	clrf	load_calibration_from_EEPROM@crc
  5848  0DB6  01B2               	clrf	load_calibration_from_EEPROM@crc+1
  5849                           
  5850                           ;main.c: 97: char i,*p;
  5851                           ;main.c: 98: p=(char *)&m_conf;
  5852  0DB7  30BF               	movlw	(low (_m_conf| 0))& (0+255)
  5853  0DB8  00F5               	movwf	??_load_calibration_from_EEPROM
  5854  0DB9  0875               	movf	??_load_calibration_from_EEPROM,w
  5855  0DBA  00B4               	movwf	load_calibration_from_EEPROM@p
  5856                           
  5857                           ;main.c: 99: for(i=0; i<sizeof(m_conf); i++)
  5858  0DBB  01B5               	clrf	load_calibration_from_EEPROM@i
  5859  0DBC  302F               	movlw	47
  5860  0DBD  0235               	subwf	load_calibration_from_EEPROM@i,w
  5861  0DBE  1803               	btfsc	3,0
  5862  0DBF  2DEE               	goto	l4139
  5863  0DC0                     l4129:	
  5864                           
  5865                           ;main.c: 100: {
  5866                           ;main.c: 101: *p = DATAEE_ReadByte(addr++);
  5867  0DC0  0833               	movf	load_calibration_from_EEPROM@addr,w
  5868  0DC1  3189  2197  318D   	fcall	_DATAEE_ReadByte
  5869  0DC4  00F5               	movwf	??_load_calibration_from_EEPROM
  5870  0DC5  0020               	movlb	0	; select bank0
  5871  0DC6  0834               	movf	load_calibration_from_EEPROM@p,w
  5872  0DC7  0086               	movwf	6
  5873  0DC8  0187               	clrf	7
  5874  0DC9  0875               	movf	??_load_calibration_from_EEPROM,w
  5875  0DCA  0081               	movwf	1
  5876  0DCB  3001               	movlw	1
  5877  0DCC  00F5               	movwf	??_load_calibration_from_EEPROM
  5878  0DCD  0875               	movf	??_load_calibration_from_EEPROM,w
  5879  0DCE  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  5880                           
  5881                           ;main.c: 102: crc = crc_update(crc, *p++);
  5882  0DCF  0832               	movf	load_calibration_from_EEPROM@crc+1,w
  5883  0DD0  00A1               	movwf	crc_update@old_crc+1
  5884  0DD1  0831               	movf	load_calibration_from_EEPROM@crc,w
  5885  0DD2  00A0               	movwf	crc_update@old_crc
  5886  0DD3  0834               	movf	load_calibration_from_EEPROM@p,w
  5887  0DD4  0086               	movwf	6
  5888  0DD5  0187               	clrf	7
  5889  0DD6  0801               	movf	1,w
  5890  0DD7  00F5               	movwf	??_load_calibration_from_EEPROM
  5891  0DD8  0875               	movf	??_load_calibration_from_EEPROM,w
  5892  0DD9  00A2               	movwf	crc_update@data
  5893  0DDA  318B  23E1  318D   	fcall	_crc_update
  5894  0DDD  0020               	movlb	0	; select bank0
  5895  0DDE  0821               	movf	?_crc_update+1,w
  5896  0DDF  00B2               	movwf	load_calibration_from_EEPROM@crc+1
  5897  0DE0  0820               	movf	?_crc_update,w
  5898  0DE1  00B1               	movwf	load_calibration_from_EEPROM@crc
  5899  0DE2  3001               	movlw	1
  5900  0DE3  00F5               	movwf	??_load_calibration_from_EEPROM
  5901  0DE4  0875               	movf	??_load_calibration_from_EEPROM,w
  5902  0DE5  07B4               	addwf	load_calibration_from_EEPROM@p,f
  5903  0DE6  3001               	movlw	1
  5904  0DE7  00F5               	movwf	??_load_calibration_from_EEPROM
  5905  0DE8  0875               	movf	??_load_calibration_from_EEPROM,w
  5906  0DE9  07B5               	addwf	load_calibration_from_EEPROM@i,f
  5907  0DEA  302F               	movlw	47
  5908  0DEB  0235               	subwf	load_calibration_from_EEPROM@i,w
  5909  0DEC  1C03               	skipc
  5910  0DED  2DC0               	goto	l4129
  5911  0DEE                     l4139:	
  5912                           
  5913                           ;main.c: 103: }
  5914                           ;main.c: 104: p=(char *)&m_crc;
  5915  0DEE  30EE               	movlw	(low (_m_crc| 0))& (0+255)
  5916  0DEF  00F5               	movwf	??_load_calibration_from_EEPROM
  5917  0DF0  0875               	movf	??_load_calibration_from_EEPROM,w
  5918  0DF1  00B4               	movwf	load_calibration_from_EEPROM@p
  5919                           
  5920                           ;main.c: 105: for(i=0; i<sizeof(m_crc); i++)
  5921  0DF2  01B5               	clrf	load_calibration_from_EEPROM@i
  5922  0DF3  3002               	movlw	2
  5923  0DF4  0235               	subwf	load_calibration_from_EEPROM@i,w
  5924  0DF5  1803               	btfsc	3,0
  5925  0DF6  2E12               	goto	l4157
  5926  0DF7                     l4147:	
  5927                           
  5928                           ;main.c: 106: *p++ = DATAEE_ReadByte(addr++);
  5929  0DF7  0833               	movf	load_calibration_from_EEPROM@addr,w
  5930  0DF8  3189  2197  318D   	fcall	_DATAEE_ReadByte
  5931  0DFB  00F5               	movwf	??_load_calibration_from_EEPROM
  5932  0DFC  0020               	movlb	0	; select bank0
  5933  0DFD  0834               	movf	load_calibration_from_EEPROM@p,w
  5934  0DFE  0086               	movwf	6
  5935  0DFF  0187               	clrf	7
  5936  0E00  0875               	movf	??_load_calibration_from_EEPROM,w
  5937  0E01  0081               	movwf	1
  5938  0E02  3001               	movlw	1
  5939  0E03  00F5               	movwf	??_load_calibration_from_EEPROM
  5940  0E04  0875               	movf	??_load_calibration_from_EEPROM,w
  5941  0E05  07B3               	addwf	load_calibration_from_EEPROM@addr,f
  5942  0E06  3001               	movlw	1
  5943  0E07  00F5               	movwf	??_load_calibration_from_EEPROM
  5944  0E08  0875               	movf	??_load_calibration_from_EEPROM,w
  5945  0E09  07B4               	addwf	load_calibration_from_EEPROM@p,f
  5946  0E0A  3001               	movlw	1
  5947  0E0B  00F5               	movwf	??_load_calibration_from_EEPROM
  5948  0E0C  0875               	movf	??_load_calibration_from_EEPROM,w
  5949  0E0D  07B5               	addwf	load_calibration_from_EEPROM@i,f
  5950  0E0E  3002               	movlw	2
  5951  0E0F  0235               	subwf	load_calibration_from_EEPROM@i,w
  5952  0E10  1C03               	skipc
  5953  0E11  2DF7               	goto	l4147
  5954  0E12                     l4157:	
  5955                           
  5956                           ;main.c: 107: return (crc == m_crc);
  5957  0E12  0021               	movlb	1	; select bank1
  5958  0E13  086F               	movf	(_m_crc+1)^(0+128),w
  5959  0E14  0020               	movlb	0	; select bank0
  5960  0E15  0632               	xorwf	load_calibration_from_EEPROM@crc+1,w
  5961  0E16  1D03               	skipz
  5962  0E17  2E1C               	goto	u4425
  5963  0E18  0021               	movlb	1	; select bank1
  5964  0E19  086E               	movf	_m_crc^(0+128),w
  5965  0E1A  0020               	movlb	0	; select bank0
  5966  0E1B  0631               	xorwf	load_calibration_from_EEPROM@crc,w
  5967  0E1C                     u4425:	
  5968  0E1C  1D03               	btfss	3,2
  5969  0E1D  2E20               	goto	u4420
  5970  0E1E  3001               	movlw	1
  5971  0E1F  0008               	return
  5972  0E20                     u4420:	
  5973  0E20  3000               	movlw	0
  5974  0E21  0008               	return
  5975  0E22                     __end_of_load_calibration_from_EEPROM:	
  5976                           
  5977                           	psect	text12
  5978  0BE1                     __ptext12:	
  5979 ;; *************** function _crc_update *****************
  5980 ;; Defined at:
  5981 ;;		line 11 in file "CRC.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  old_crc         2    0[BANK0 ] unsigned short 
  5984 ;;  data            1    2[BANK0 ] unsigned char 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  x               2   15[BANK0 ] unsigned short 
  5987 ;;  crc             2   13[BANK0 ] unsigned short 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  2    0[BANK0 ] unsigned short 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5997 ;;      Params:         0       3       0       0       0       0
  5998 ;;      Locals:         0       4       0       0       0       0
  5999 ;;      Temps:          0      10       0       0       0       0
  6000 ;;      Totals:         0      17       0       0       0       0
  6001 ;;Total ram usage:       17 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    6
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_load_calibration_from_EEPROM
  6008 ;;		_write_calibration_to_EEPROM
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _crc_update
  6014  0BE1                     _crc_update:	
  6015                           
  6016                           ;CRC.c: 13: unsigned short crc;
  6017                           ;CRC.c: 14: unsigned short x;
  6018                           ;CRC.c: 16: x = ((old_crc>>8) ^ data) & 0xff;
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _crc_update: [wreg+status,2+status,0]
  6022  0BE1  0020               	movlb	0	; select bank0
  6023  0BE2  0822               	movf	crc_update@data,w
  6024  0BE3  00A3               	movwf	??_crc_update
  6025  0BE4  01A4               	clrf	??_crc_update+1
  6026  0BE5  0821               	movf	crc_update@old_crc+1,w
  6027  0BE6  00A6               	movwf	??_crc_update+3
  6028  0BE7  0820               	movf	crc_update@old_crc,w
  6029  0BE8  00A5               	movwf	??_crc_update+2
  6030  0BE9  0826               	movf	??_crc_update+3,w
  6031  0BEA  00A5               	movwf	??_crc_update+2
  6032  0BEB  01A6               	clrf	??_crc_update+3
  6033  0BEC  0823               	movf	??_crc_update,w
  6034  0BED  0625               	xorwf	??_crc_update+2,w
  6035  0BEE  00A7               	movwf	??_crc_update+4
  6036  0BEF  0824               	movf	??_crc_update+1,w
  6037  0BF0  0626               	xorwf	??_crc_update+3,w
  6038  0BF1  00A8               	movwf	??_crc_update+5
  6039  0BF2  30FF               	movlw	255
  6040  0BF3  0527               	andwf	??_crc_update+4,w
  6041  0BF4  00AF               	movwf	crc_update@x
  6042  0BF5  3000               	movlw	0
  6043  0BF6  0528               	andwf	??_crc_update+5,w
  6044  0BF7  00B0               	movwf	crc_update@x+1
  6045                           
  6046                           ;CRC.c: 17: x ^= x>>4;
  6047  0BF8  0830               	movf	crc_update@x+1,w
  6048  0BF9  00A4               	movwf	??_crc_update+1
  6049  0BFA  082F               	movf	crc_update@x,w
  6050  0BFB  00A3               	movwf	??_crc_update
  6051  0BFC  3004               	movlw	4
  6052  0BFD                     u4215:	
  6053  0BFD  36A4               	lsrf	??_crc_update+1,f
  6054  0BFE  0CA3               	rrf	??_crc_update,f
  6055  0BFF  0B89               	decfsz	9,f
  6056  0C00  2BFD               	goto	u4215
  6057  0C01  0823               	movf	??_crc_update,w
  6058  0C02  06AF               	xorwf	crc_update@x,f
  6059  0C03  0824               	movf	??_crc_update+1,w
  6060  0C04  06B0               	xorwf	crc_update@x+1,f
  6061                           
  6062                           ;CRC.c: 19: crc = (old_crc << 8) ^ (x << 12) ^ (x <<5) ^ x;
  6063  0C05  0830               	movf	crc_update@x+1,w
  6064  0C06  00A4               	movwf	??_crc_update+1
  6065  0C07  082F               	movf	crc_update@x,w
  6066  0C08  00A3               	movwf	??_crc_update
  6067  0C09  3005               	movlw	5
  6068  0C0A                     u4225:	
  6069  0C0A  35A3               	lslf	??_crc_update,f
  6070  0C0B  0DA4               	rlf	??_crc_update+1,f
  6071  0C0C  0B89               	decfsz	9,f
  6072  0C0D  2C0A               	goto	u4225
  6073  0C0E  0830               	movf	crc_update@x+1,w
  6074  0C0F  00A6               	movwf	??_crc_update+3
  6075  0C10  082F               	movf	crc_update@x,w
  6076  0C11  00A5               	movwf	??_crc_update+2
  6077  0C12  0E25               	swapf	??_crc_update+2,w
  6078  0C13  39F0               	andlw	240
  6079  0C14  00A6               	movwf	??_crc_update+3
  6080  0C15  01A5               	clrf	??_crc_update+2
  6081  0C16  0820               	movf	crc_update@old_crc,w
  6082  0C17  00A8               	movwf	??_crc_update+5
  6083  0C18  01A7               	clrf	??_crc_update+4
  6084  0C19  0825               	movf	??_crc_update+2,w
  6085  0C1A  0627               	xorwf	??_crc_update+4,w
  6086  0C1B  00A9               	movwf	??_crc_update+6
  6087  0C1C  0826               	movf	??_crc_update+3,w
  6088  0C1D  0628               	xorwf	??_crc_update+5,w
  6089  0C1E  00AA               	movwf	??_crc_update+7
  6090  0C1F  0823               	movf	??_crc_update,w
  6091  0C20  0629               	xorwf	??_crc_update+6,w
  6092  0C21  00AB               	movwf	??_crc_update+8
  6093  0C22  0824               	movf	??_crc_update+1,w
  6094  0C23  062A               	xorwf	??_crc_update+7,w
  6095  0C24  00AC               	movwf	??_crc_update+9
  6096  0C25  082F               	movf	crc_update@x,w
  6097  0C26  062B               	xorwf	??_crc_update+8,w
  6098  0C27  00AD               	movwf	crc_update@crc
  6099  0C28  0830               	movf	crc_update@x+1,w
  6100  0C29  062C               	xorwf	??_crc_update+9,w
  6101  0C2A  00AE               	movwf	crc_update@crc+1
  6102                           
  6103                           ;CRC.c: 21: return crc;
  6104  0C2B  082E               	movf	crc_update@crc+1,w
  6105  0C2C  00A1               	movwf	?_crc_update+1
  6106  0C2D  082D               	movf	crc_update@crc,w
  6107  0C2E  00A0               	movwf	?_crc_update
  6108  0C2F  0008               	return
  6109  0C30                     __end_of_crc_update:	
  6110                           
  6111                           	psect	text13
  6112  0997                     __ptext13:	
  6113 ;; *************** function _DATAEE_ReadByte *****************
  6114 ;; Defined at:
  6115 ;;		line 204 in file "mcc_generated_files/memory.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  bAdd            1    wreg     unsigned char 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  bAdd            1    4[COMMON] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      unsigned char 
  6122 ;; Registers used:
  6123 ;;		wreg
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6129 ;;      Params:         0       0       0       0       0       0
  6130 ;;      Locals:         1       0       0       0       0       0
  6131 ;;      Temps:          0       0       0       0       0       0
  6132 ;;      Totals:         1       0       0       0       0       0
  6133 ;;Total ram usage:        1 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    6
  6136 ;; This function calls:
  6137 ;;		Nothing
  6138 ;; This function is called by:
  6139 ;;		_load_calibration_from_EEPROM
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           
  6144                           ;psect for function _DATAEE_ReadByte
  6145  0997                     _DATAEE_ReadByte:	
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6149                           ;DATAEE_ReadByte@bAdd stored from wreg
  6150  0997  00F4               	movwf	DATAEE_ReadByte@bAdd
  6151                           
  6152                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6153  0998  0874               	movf	DATAEE_ReadByte@bAdd,w
  6154  0999  0023               	movlb	3	; select bank3
  6155  099A  0091               	movwf	17	;volatile
  6156                           
  6157                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6158  099B  1315               	bcf	21,6	;volsfr
  6159                           
  6160                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6161  099C  1395               	bcf	21,7	;volsfr
  6162                           
  6163                           ;memory.c: 209: EECON1bits.RD = 1;
  6164  099D  1415               	bsf	21,0	;volsfr
  6165                           
  6166                           ;memory.c: 210: __nop();
  6167  099E  0000               	nop
  6168                           
  6169                           ;memory.c: 211: __nop();
  6170  099F  0000               	nop
  6171                           
  6172                           ;memory.c: 213: return (EEDATL);
  6173  09A0  0023               	movlb	3	; select bank3
  6174  09A1  0813               	movf	19,w	;volatile
  6175  09A2  0008               	return
  6176  09A3                     __end_of_DATAEE_ReadByte:	
  6177                           
  6178                           	psect	text14
  6179  0D48                     __ptext14:	
  6180 ;; *************** function _integer_part *****************
  6181 ;; Defined at:
  6182 ;;		line 90 in file "fixed_point.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  n               4   25[BANK0 ] long 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  and_a_half      4   34[BANK0 ] long 
  6187 ;;  int_part        2   39[BANK0 ] unsigned short 
  6188 ;;  neg             1   38[BANK0 ] unsigned char 
  6189 ;; Return value:  Size  Location     Type
  6190 ;;                  2   25[BANK0 ] short 
  6191 ;; Registers used:
  6192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6193 ;; Tracked objects:
  6194 ;;		On entry : 0/0
  6195 ;;		On exit  : 0/0
  6196 ;;		Unchanged: 0/0
  6197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6198 ;;      Params:         0       4       0       0       0       0
  6199 ;;      Locals:         0       7       0       0       0       0
  6200 ;;      Temps:          0       5       0       0       0       0
  6201 ;;      Totals:         0      16       0       0       0       0
  6202 ;;Total ram usage:       16 bytes
  6203 ;; Hardware stack levels used:    1
  6204 ;; Hardware stack levels required when called:    7
  6205 ;; This function calls:
  6206 ;;		_convert_to_fp
  6207 ;; This function is called by:
  6208 ;;		_main
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           
  6213                           ;psect for function _integer_part
  6214  0D48                     _integer_part:	
  6215                           
  6216                           ;fixed_point.c: 92: bool neg = (n<0);
  6217                           
  6218                           ;incstack = 0
  6219                           ; Regs used in _integer_part: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6220  0D48  0020               	movlb	0	; select bank0
  6221  0D49  1FBC               	btfss	integer_part@n+3,7
  6222  0D4A  2D4D               	goto	u5360
  6223  0D4B  3001               	movlw	1
  6224  0D4C  2D4E               	goto	u5370
  6225  0D4D                     u5360:	
  6226  0D4D  3000               	movlw	0
  6227  0D4E                     u5370:	
  6228  0D4E  00BD               	movwf	??_integer_part
  6229  0D4F  083D               	movf	??_integer_part,w
  6230  0D50  00C6               	movwf	integer_part@neg
  6231                           
  6232                           ;fixed_point.c: 93: if (neg)
  6233  0D51  0846               	movf	integer_part@neg,w
  6234  0D52  1903               	btfsc	3,2
  6235  0D53  2D5F               	goto	l4711
  6236                           
  6237                           ;fixed_point.c: 94: n = -n;
  6238  0D54  09B9               	comf	integer_part@n,f
  6239  0D55  09BA               	comf	integer_part@n+1,f
  6240  0D56  09BB               	comf	integer_part@n+2,f
  6241  0D57  09BC               	comf	integer_part@n+3,f
  6242  0D58  0AB9               	incf	integer_part@n,f
  6243  0D59  1903               	skipnz
  6244  0D5A  0ABA               	incf	integer_part@n+1,f
  6245  0D5B  1903               	skipnz
  6246  0D5C  0ABB               	incf	integer_part@n+2,f
  6247  0D5D  1903               	skipnz
  6248  0D5E  0ABC               	incf	integer_part@n+3,f
  6249  0D5F                     l4711:	
  6250                           
  6251                           ;fixed_point.c: 95: unsigned short int_part = n >> 16;
  6252  0D5F  0839               	movf	integer_part@n,w
  6253  0D60  00BD               	movwf	??_integer_part
  6254  0D61  083A               	movf	integer_part@n+1,w
  6255  0D62  00BE               	movwf	??_integer_part+1
  6256  0D63  083B               	movf	integer_part@n+2,w
  6257  0D64  00BF               	movwf	??_integer_part+2
  6258  0D65  083C               	movf	integer_part@n+3,w
  6259  0D66  00C0               	movwf	??_integer_part+3
  6260  0D67  3010               	movlw	16
  6261  0D68  00C1               	movwf	??_integer_part+4
  6262  0D69                     u5395:	
  6263  0D69  37C0               	asrf	??_integer_part+3,f
  6264  0D6A  0CBF               	rrf	??_integer_part+2,f
  6265  0D6B  0CBE               	rrf	??_integer_part+1,f
  6266  0D6C  0CBD               	rrf	??_integer_part,f
  6267  0D6D  0BC1               	decfsz	??_integer_part+4,f
  6268  0D6E  2D69               	goto	u5395
  6269  0D6F  083E               	movf	??_integer_part+1,w
  6270  0D70  00C8               	movwf	integer_part@int_part+1
  6271  0D71  083D               	movf	??_integer_part,w
  6272  0D72  00C7               	movwf	integer_part@int_part
  6273                           
  6274                           ;fixed_point.c: 96: t_fp and_a_half = convert_to_fp(int_part, 5000);
  6275  0D73  0848               	movf	integer_part@int_part+1,w
  6276  0D74  00A5               	movwf	convert_to_fp@int_part+1
  6277  0D75  0847               	movf	integer_part@int_part,w
  6278  0D76  00A4               	movwf	convert_to_fp@int_part
  6279  0D77  3088               	movlw	136
  6280  0D78  00A6               	movwf	convert_to_fp@fract_part
  6281  0D79  3013               	movlw	19
  6282  0D7A  00A7               	movwf	convert_to_fp@fract_part+1
  6283  0D7B  3187  2730  318D   	fcall	_convert_to_fp
  6284  0D7E  0020               	movlb	0	; select bank0
  6285  0D7F  0827               	movf	?_convert_to_fp+3,w
  6286  0D80  00C5               	movwf	integer_part@and_a_half+3
  6287  0D81  0826               	movf	?_convert_to_fp+2,w
  6288  0D82  00C4               	movwf	integer_part@and_a_half+2
  6289  0D83  0825               	movf	?_convert_to_fp+1,w
  6290  0D84  00C3               	movwf	integer_part@and_a_half+1
  6291  0D85  0824               	movf	?_convert_to_fp,w
  6292  0D86  00C2               	movwf	integer_part@and_a_half
  6293                           
  6294                           ;fixed_point.c: 97: if (n > and_a_half)
  6295  0D87  0845               	movf	integer_part@and_a_half+3,w
  6296  0D88  3A80               	xorlw	128
  6297  0D89  00BD               	movwf	??_integer_part
  6298  0D8A  083C               	movf	integer_part@n+3,w
  6299  0D8B  3A80               	xorlw	128
  6300  0D8C  023D               	subwf	??_integer_part,w
  6301  0D8D  1D03               	skipz
  6302  0D8E  2D99               	goto	u5403
  6303  0D8F  083B               	movf	integer_part@n+2,w
  6304  0D90  0244               	subwf	integer_part@and_a_half+2,w
  6305  0D91  1D03               	skipz
  6306  0D92  2D99               	goto	u5403
  6307  0D93  083A               	movf	integer_part@n+1,w
  6308  0D94  0243               	subwf	integer_part@and_a_half+1,w
  6309  0D95  1D03               	skipz
  6310  0D96  2D99               	goto	u5403
  6311  0D97  0839               	movf	integer_part@n,w
  6312  0D98  0242               	subwf	integer_part@and_a_half,w
  6313  0D99                     u5403:	
  6314  0D99  1803               	skipnc
  6315  0D9A  2D9F               	goto	l4719
  6316                           
  6317                           ;fixed_point.c: 98: int_part++;
  6318  0D9B  3001               	movlw	1
  6319  0D9C  07C7               	addwf	integer_part@int_part,f
  6320  0D9D  3000               	movlw	0
  6321  0D9E  3DC8               	addwfc	integer_part@int_part+1,f
  6322  0D9F                     l4719:	
  6323                           
  6324                           ;fixed_point.c: 99: if (neg)
  6325  0D9F  0846               	movf	integer_part@neg,w
  6326  0DA0  1903               	btfsc	3,2
  6327  0DA1  2DAE               	goto	l4727
  6328                           
  6329                           ;fixed_point.c: 100: return -int_part;
  6330  0DA2  0947               	comf	integer_part@int_part,w
  6331  0DA3  00BD               	movwf	??_integer_part
  6332  0DA4  0948               	comf	integer_part@int_part+1,w
  6333  0DA5  00BE               	movwf	??_integer_part+1
  6334  0DA6  0ABD               	incf	??_integer_part,f
  6335  0DA7  1903               	skipnz
  6336  0DA8  0ABE               	incf	??_integer_part+1,f
  6337  0DA9  083D               	movf	??_integer_part,w
  6338  0DAA  00B9               	movwf	?_integer_part
  6339  0DAB  083E               	movf	??_integer_part+1,w
  6340  0DAC  00BA               	movwf	?_integer_part+1
  6341  0DAD  0008               	return
  6342  0DAE                     l4727:	
  6343                           
  6344                           ;fixed_point.c: 101: else
  6345                           ;fixed_point.c: 102: return int_part;
  6346  0DAE  0848               	movf	integer_part@int_part+1,w
  6347  0DAF  00BA               	movwf	?_integer_part+1
  6348  0DB0  0847               	movf	integer_part@int_part,w
  6349  0DB1  00B9               	movwf	?_integer_part
  6350  0DB2  0008               	return
  6351  0DB3                     __end_of_integer_part:	
  6352                           
  6353                           	psect	text15
  6354  09CA                     __ptext15:	
  6355 ;; *************** function _SYSTEM_Initialize *****************
  6356 ;; Defined at:
  6357 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0, pclath, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6371 ;;      Params:         0       0       0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0
  6374 ;;      Totals:         0       0       0       0       0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    8
  6378 ;; This function calls:
  6379 ;;		_EPWM1_Initialize
  6380 ;;		_EUSART_Initialize
  6381 ;;		_OSCILLATOR_Initialize
  6382 ;;		_PIN_MANAGER_Initialize
  6383 ;;		_TMR0_Initialize
  6384 ;;		_TMR2_Initialize
  6385 ;; This function is called by:
  6386 ;;		_main
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function _SYSTEM_Initialize
  6392  09CA                     _SYSTEM_Initialize:	
  6393                           
  6394                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6398  09CA  318A  2207  3189   	fcall	_PIN_MANAGER_Initialize
  6399                           
  6400                           ;mcc.c: 73: OSCILLATOR_Initialize();
  6401  09CD  3189  216E  3189   	fcall	_OSCILLATOR_Initialize
  6402                           
  6403                           ;mcc.c: 74: EPWM1_Initialize();
  6404  09D0  3189  21BC  3189   	fcall	_EPWM1_Initialize
  6405                           
  6406                           ;mcc.c: 75: TMR2_Initialize();
  6407  09D3  3189  2176  3189   	fcall	_TMR2_Initialize
  6408                           
  6409                           ;mcc.c: 76: TMR0_Initialize();
  6410  09D6  3189  21DC  3189   	fcall	_TMR0_Initialize
  6411                           
  6412                           ;mcc.c: 77: EUSART_Initialize();
  6413  09D9  318A  2239         	fcall	_EUSART_Initialize
  6414  09DB  0008               	return
  6415  09DC                     __end_of_SYSTEM_Initialize:	
  6416                           
  6417                           	psect	text16
  6418  0976                     __ptext16:	
  6419 ;; *************** function _TMR2_Initialize *****************
  6420 ;; Defined at:
  6421 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;		None
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;		None
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  1    wreg      void 
  6428 ;; Registers used:
  6429 ;;		wreg, status,2, status,0, pclath, cstack
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6435 ;;      Params:         0       0       0       0       0       0
  6436 ;;      Locals:         0       0       0       0       0       0
  6437 ;;      Temps:          0       0       0       0       0       0
  6438 ;;      Totals:         0       0       0       0       0       0
  6439 ;;Total ram usage:        0 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    7
  6442 ;; This function calls:
  6443 ;;		_TMR2_StartTimer
  6444 ;; This function is called by:
  6445 ;;		_SYSTEM_Initialize
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function _TMR2_Initialize
  6451  0976                     _TMR2_Initialize:	
  6452                           
  6453                           ;tmr2.c: 62: T2CON = 0x02;
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6457  0976  3002               	movlw	2
  6458  0977  0020               	movlb	0	; select bank0
  6459  0978  009C               	movwf	28	;volatile
  6460                           
  6461                           ;tmr2.c: 65: PR2 = 0xFF;
  6462  0979  30FF               	movlw	255
  6463  097A  009B               	movwf	27	;volatile
  6464                           
  6465                           ;tmr2.c: 68: TMR2 = 0x00;
  6466  097B  019A               	clrf	26	;volatile
  6467                           
  6468                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  6469  097C  1091               	bcf	17,1	;volatile
  6470                           
  6471                           ;tmr2.c: 74: TMR2_StartTimer();
  6472  097D  3189  2153         	fcall	_TMR2_StartTimer
  6473  097F  0008               	return
  6474  0980                     __end_of_TMR2_Initialize:	
  6475                           
  6476                           	psect	text17
  6477  0953                     __ptext17:	
  6478 ;; *************** function _TMR2_StartTimer *****************
  6479 ;; Defined at:
  6480 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		None
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6494 ;;      Params:         0       0       0       0       0       0
  6495 ;;      Locals:         0       0       0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0       0
  6497 ;;      Totals:         0       0       0       0       0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    6
  6501 ;; This function calls:
  6502 ;;		Nothing
  6503 ;; This function is called by:
  6504 ;;		_TMR2_Initialize
  6505 ;;		_main
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _TMR2_StartTimer
  6511  0953                     _TMR2_StartTimer:	
  6512                           
  6513                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _TMR2_StartTimer: []
  6517  0953  0020               	movlb	0	; select bank0
  6518  0954  151C               	bsf	28,2	;volatile
  6519  0955  0008               	return
  6520  0956                     __end_of_TMR2_StartTimer:	
  6521                           
  6522                           	psect	text18
  6523  09DC                     __ptext18:	
  6524 ;; *************** function _TMR0_Initialize *****************
  6525 ;; Defined at:
  6526 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, pclath, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6540 ;;      Params:         0       0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0
  6542 ;;      Temps:          0       1       0       0       0       0
  6543 ;;      Totals:         0       1       0       0       0       0
  6544 ;;Total ram usage:        1 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    7
  6547 ;; This function calls:
  6548 ;;		_TMR0_SetInterruptHandler
  6549 ;; This function is called by:
  6550 ;;		_SYSTEM_Initialize
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function _TMR0_Initialize
  6556  09DC                     _TMR0_Initialize:	
  6557                           
  6558                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  6559                           
  6560                           ;incstack = 0
  6561                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6562  09DC  0021               	movlb	1	; select bank1
  6563  09DD  0815               	movf	21,w	;volatile
  6564  09DE  39C0               	andlw	192
  6565  09DF  3817               	iorlw	23
  6566  09E0  0095               	movwf	21	;volatile
  6567                           
  6568                           ;tmr0.c: 71: TMR0 = 0x64;
  6569  09E1  3064               	movlw	100
  6570  09E2  0020               	movlb	0	; select bank0
  6571  09E3  0095               	movwf	21	;volatile
  6572                           
  6573                           ;tmr0.c: 74: timer0ReloadVal= 100;
  6574  09E4  3064               	movlw	100
  6575  09E5  00A0               	movwf	??_TMR0_Initialize
  6576  09E6  0820               	movf	??_TMR0_Initialize,w
  6577  09E7  00F9               	movwf	_timer0ReloadVal	;volatile
  6578                           
  6579                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  6580  09E8  110B               	bcf	11,2	;volatile
  6581                           
  6582                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  6583  09E9  168B               	bsf	11,5	;volatile
  6584                           
  6585                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6586  09EA  3003               	movlw	low _TMR0_DefaultInterruptHandler
  6587  09EB  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  6588  09EC  3000               	movlw	high _TMR0_DefaultInterruptHandler
  6589  09ED  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  6590  09EE  3189  2162         	fcall	_TMR0_SetInterruptHandler
  6591  09F0  0008               	return
  6592  09F1                     __end_of_TMR0_Initialize:	
  6593                           
  6594                           	psect	text19
  6595  0962                     __ptext19:	
  6596 ;; *************** function _TMR0_SetInterruptHandler *****************
  6597 ;; Defined at:
  6598 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  InterruptHan    2    4[COMMON] PTR void 
  6601 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		wreg
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6613 ;;      Params:         2       0       0       0       0       0
  6614 ;;      Locals:         0       0       0       0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0
  6616 ;;      Totals:         2       0       0       0       0       0
  6617 ;;Total ram usage:        2 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    6
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_TMR0_Initialize
  6624 ;;		_main
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _TMR0_SetInterruptHandler
  6630  0962                     _TMR0_SetInterruptHandler:	
  6631                           
  6632                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6636  0962  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  6637  0963  0021               	movlb	1	; select bank1
  6638  0964  00BE               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  6639  0965  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  6640  0966  00BD               	movwf	_TMR0_InterruptHandler^(0+128)
  6641  0967  0008               	return
  6642  0968                     __end_of_TMR0_SetInterruptHandler:	
  6643                           
  6644                           	psect	text20
  6645  0A07                     __ptext20:	
  6646 ;; *************** function _PIN_MANAGER_Initialize *****************
  6647 ;; Defined at:
  6648 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6662 ;;      Params:         0       0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0
  6665 ;;      Totals:         0       0       0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    6
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_SYSTEM_Initialize
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           
  6677                           ;psect for function _PIN_MANAGER_Initialize
  6678  0A07                     _PIN_MANAGER_Initialize:	
  6679                           
  6680                           ;pin_manager.c: 51: LATB = 0x0;
  6681                           
  6682                           ;incstack = 0
  6683                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6684  0A07  0022               	movlb	2	; select bank2
  6685  0A08  018D               	clrf	13	;volatile
  6686                           
  6687                           ;pin_manager.c: 52: LATA = 0x0;
  6688  0A09  018C               	clrf	12	;volatile
  6689                           
  6690                           ;pin_manager.c: 53: ANSELA = 0x1F;
  6691  0A0A  301F               	movlw	31
  6692  0A0B  0023               	movlb	3	; select bank3
  6693  0A0C  008C               	movwf	12	;volatile
  6694                           
  6695                           ;pin_manager.c: 54: ANSELB = 0xF0;
  6696  0A0D  30F0               	movlw	240
  6697  0A0E  008D               	movwf	13	;volatile
  6698                           
  6699                           ;pin_manager.c: 55: WPUA = 0x20;
  6700  0A0F  3020               	movlw	32
  6701  0A10  0024               	movlb	4	; select bank4
  6702  0A11  008C               	movwf	12	;volatile
  6703                           
  6704                           ;pin_manager.c: 56: WPUB = 0xFF;
  6705  0A12  30FF               	movlw	255
  6706  0A13  008D               	movwf	13	;volatile
  6707                           
  6708                           ;pin_manager.c: 57: TRISB = 0xF7;
  6709  0A14  30F7               	movlw	247
  6710  0A15  0021               	movlb	1	; select bank1
  6711  0A16  008D               	movwf	13	;volatile
  6712                           
  6713                           ;pin_manager.c: 58: TRISA = 0xFB;
  6714  0A17  30FB               	movlw	251
  6715  0A18  008C               	movwf	12	;volatile
  6716                           
  6717                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  6718  0A19  1395               	bcf	21,7	;volatile
  6719                           
  6720                           ;pin_manager.c: 61: APFCON0 = 0x00;
  6721  0A1A  0022               	movlb	2	; select bank2
  6722  0A1B  019D               	clrf	29	;volatile
  6723                           
  6724                           ;pin_manager.c: 62: APFCON1 = 0x00;
  6725  0A1C  019E               	clrf	30	;volatile
  6726  0A1D  0008               	return
  6727  0A1E                     __end_of_PIN_MANAGER_Initialize:	
  6728                           
  6729                           	psect	text21
  6730  096E                     __ptext21:	
  6731 ;; *************** function _OSCILLATOR_Initialize *****************
  6732 ;; Defined at:
  6733 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6747 ;;      Params:         0       0       0       0       0       0
  6748 ;;      Locals:         0       0       0       0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0
  6750 ;;      Totals:         0       0       0       0       0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    6
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_SYSTEM_Initialize
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _OSCILLATOR_Initialize
  6763  096E                     _OSCILLATOR_Initialize:	
  6764                           
  6765                           ;mcc.c: 83: OSCCON = 0x70;
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6769  096E  3070               	movlw	112
  6770  096F  0021               	movlb	1	; select bank1
  6771  0970  0099               	movwf	25	;volatile
  6772                           
  6773                           ;mcc.c: 85: OSCSTAT = 0x00;
  6774  0971  019A               	clrf	26	;volatile
  6775                           
  6776                           ;mcc.c: 87: OSCTUNE = 0x00;
  6777  0972  0198               	clrf	24	;volatile
  6778  0973                     l28:	
  6779                           ;mcc.c: 92: {
  6780                           
  6781                           ;mcc.c: 91: while(PLLR == 0)
  6782                           
  6783  0973  1B1A               	btfsc	26,6	;volatile
  6784  0974  0008               	return
  6785  0975  2973               	goto	l28
  6786  0976                     __end_of_OSCILLATOR_Initialize:	
  6787                           
  6788                           	psect	text22
  6789  0A39                     __ptext22:	
  6790 ;; *************** function _EUSART_Initialize *****************
  6791 ;; Defined at:
  6792 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, status,2
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6806 ;;      Params:         0       0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0       0
  6808 ;;      Temps:          1       0       0       0       0       0
  6809 ;;      Totals:         1       0       0       0       0       0
  6810 ;;Total ram usage:        1 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    6
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		_SYSTEM_Initialize
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           
  6821                           ;psect for function _EUSART_Initialize
  6822  0A39                     _EUSART_Initialize:	
  6823                           
  6824                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  6825                           
  6826                           ;incstack = 0
  6827                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6828  0A39  0021               	movlb	1	; select bank1
  6829  0A3A  1291               	bcf	17,5	;volatile
  6830                           
  6831                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  6832  0A3B  1211               	bcf	17,4	;volatile
  6833                           
  6834                           ;eusart.c: 84: BAUDCON = 0x08;
  6835  0A3C  3008               	movlw	8
  6836  0A3D  0023               	movlb	3	; select bank3
  6837  0A3E  009F               	movwf	31	;volatile
  6838                           
  6839                           ;eusart.c: 87: RCSTA = 0x90;
  6840  0A3F  3090               	movlw	144
  6841  0A40  009D               	movwf	29	;volatile
  6842                           
  6843                           ;eusart.c: 90: TXSTA = 0x24;
  6844  0A41  3024               	movlw	36
  6845  0A42  009E               	movwf	30	;volatile
  6846                           
  6847                           ;eusart.c: 93: SPBRGL = 0x40;
  6848  0A43  3040               	movlw	64
  6849  0A44  009B               	movwf	27	;volatile
  6850                           
  6851                           ;eusart.c: 96: SPBRGH = 0x03;
  6852  0A45  3003               	movlw	3
  6853  0A46  009C               	movwf	28	;volatile
  6854                           
  6855                           ;eusart.c: 100: eusartTxHead = 0;
  6856  0A47  0020               	movlb	0	; select bank0
  6857  0A48  01D9               	clrf	_eusartTxHead
  6858                           
  6859                           ;eusart.c: 101: eusartTxTail = 0;
  6860  0A49  01DA               	clrf	_eusartTxTail
  6861                           
  6862                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  6863  0A4A  3008               	movlw	8
  6864  0A4B  00F4               	movwf	??_EUSART_Initialize
  6865  0A4C  0874               	movf	??_EUSART_Initialize,w
  6866  0A4D  00D8               	movwf	_eusartTxBufferRemaining	;volatile
  6867                           
  6868                           ;eusart.c: 104: eusartRxHead = 0;
  6869  0A4E  01D6               	clrf	_eusartRxHead
  6870                           
  6871                           ;eusart.c: 105: eusartRxTail = 0;
  6872  0A4F  01D7               	clrf	_eusartRxTail
  6873                           
  6874                           ;eusart.c: 106: eusartRxCount = 0;
  6875  0A50  01F8               	clrf	_eusartRxCount	;volatile
  6876                           
  6877                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  6878  0A51  0021               	movlb	1	; select bank1
  6879  0A52  1691               	bsf	17,5	;volatile
  6880  0A53  0008               	return
  6881  0A54                     __end_of_EUSART_Initialize:	
  6882                           
  6883                           	psect	text23
  6884  09BC                     __ptext23:	
  6885 ;; *************** function _EPWM1_Initialize *****************
  6886 ;; Defined at:
  6887 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      void 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6901 ;;      Params:         0       0       0       0       0       0
  6902 ;;      Locals:         0       0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0
  6904 ;;      Totals:         0       0       0       0       0       0
  6905 ;;Total ram usage:        0 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    6
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		_SYSTEM_Initialize
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           
  6916                           ;psect for function _EPWM1_Initialize
  6917  09BC                     _EPWM1_Initialize:	
  6918                           
  6919                           ;epwm1.c: 68: CCP1CON = 0x3C;
  6920                           
  6921                           ;incstack = 0
  6922                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
  6923  09BC  303C               	movlw	60
  6924  09BD  0025               	movlb	5	; select bank5
  6925  09BE  0093               	movwf	19	;volatile
  6926                           
  6927                           ;epwm1.c: 71: ECCP1AS = 0x00;
  6928  09BF  0195               	clrf	21	;volatile
  6929                           
  6930                           ;epwm1.c: 74: PWM1CON = 0x80;
  6931  09C0  3080               	movlw	128
  6932  09C1  0094               	movwf	20	;volatile
  6933                           
  6934                           ;epwm1.c: 77: PSTR1CON = 0x01;
  6935  09C2  3001               	movlw	1
  6936  09C3  0096               	movwf	22	;volatile
  6937                           
  6938                           ;epwm1.c: 80: CCPR1L = 0x7F;
  6939  09C4  307F               	movlw	127
  6940  09C5  0091               	movwf	17	;volatile
  6941                           
  6942                           ;epwm1.c: 83: CCPR1H = 0x00;
  6943  09C6  0192               	clrf	18	;volatile
  6944                           
  6945                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x0;
  6946  09C7  30FC               	movlw	-4
  6947  09C8  059E               	andwf	30,f	;volatile
  6948  09C9  0008               	return
  6949  09CA                     __end_of_EPWM1_Initialize:	
  6950                           
  6951                           	psect	text24
  6952  03E2                     __ptext24:	
  6953 ;; *************** function _GPS_read_speed *****************
  6954 ;; Defined at:
  6955 ;;		line 23 in file "GPS.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  buffer          6   35[BANK0 ] unsigned char [6]
  6960 ;;  read_speed_f    2   31[BANK0 ] unsigned short 
  6961 ;;  read_speed_i    2   29[BANK0 ] unsigned short 
  6962 ;;  m_char          1   43[BANK0 ] unsigned char 
  6963 ;;  i_buff          1   42[BANK0 ] unsigned char 
  6964 ;;  i_buff2         1   41[BANK0 ] unsigned char 
  6965 ;;  checksum        1   34[BANK0 ] unsigned char 
  6966 ;;  checksum2       1   33[BANK0 ] unsigned char 
  6967 ;;  no_more_chec    1   28[BANK0 ] unsigned char 
  6968 ;;  before_dot      1   27[BANK0 ] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      unsigned char 
  6971 ;; Registers used:
  6972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6978 ;;      Params:         0       0       0       0       0       0
  6979 ;;      Locals:         0      17       0       0       0       0
  6980 ;;      Temps:          0       2       0       0       0       0
  6981 ;;      Totals:         0      19       0       0       0       0
  6982 ;;Total ram usage:       19 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    7
  6985 ;; This function calls:
  6986 ;;		_EUSART_Read
  6987 ;;		___wmul
  6988 ;;		_convert_to_fp
  6989 ;; This function is called by:
  6990 ;;		_main
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           
  6995                           ;psect for function _GPS_read_speed
  6996  03E2                     _GPS_read_speed:	
  6997                           
  6998                           ;GPS.c: 27: unsigned char buffer[6];
  6999                           ;GPS.c: 28: unsigned char i_buff = 0;
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7003  03E2  0020               	movlb	0	; select bank0
  7004  03E3  01CA               	clrf	GPS_read_speed@i_buff
  7005                           
  7006                           ;GPS.c: 29: unsigned char checksum = 0x00;
  7007  03E4  01C2               	clrf	GPS_read_speed@checksum
  7008                           
  7009                           ;GPS.c: 31: unsigned char m_char = 0x00;
  7010  03E5  01CB               	clrf	GPS_read_speed@m_char
  7011  03E6                     l4383:	
  7012                           ;GPS.c: 32: while (m_char != '$')
  7013                           
  7014  03E6  3024               	movlw	36
  7015  03E7  064B               	xorwf	GPS_read_speed@m_char,w
  7016  03E8  1903               	btfsc	3,2
  7017  03E9  2BF5               	goto	l4385
  7018                           
  7019                           ;GPS.c: 33: if(eusartRxCount!=0)
  7020  03EA  0878               	movf	_eusartRxCount,w	;volatile
  7021  03EB  1903               	btfsc	3,2
  7022  03EC  2BE6               	goto	l4383
  7023                           
  7024                           ;GPS.c: 34: m_char=EUSART_Read();
  7025  03ED  318A  22E3  3183   	fcall	_EUSART_Read
  7026  03F0  0020               	movlb	0	; select bank0
  7027  03F1  00B9               	movwf	??_GPS_read_speed
  7028  03F2  0839               	movf	??_GPS_read_speed,w
  7029  03F3  00CB               	movwf	GPS_read_speed@m_char
  7030  03F4  2BE6               	goto	l4383
  7031  03F5                     l4385:	
  7032                           ;GPS.c: 38: while (1)
  7033                           
  7034                           
  7035                           ;GPS.c: 39: if (eusartRxCount!=0)
  7036  03F5  0878               	movf	_eusartRxCount,w	;volatile
  7037  03F6  1903               	btfsc	3,2
  7038  03F7  2BF5               	goto	l4385
  7039                           
  7040                           ;GPS.c: 40: {
  7041                           ;GPS.c: 41: m_char=EUSART_Read();
  7042  03F8  318A  22E3  3183   	fcall	_EUSART_Read
  7043  03FB  0020               	movlb	0	; select bank0
  7044  03FC  00B9               	movwf	??_GPS_read_speed
  7045  03FD  0839               	movf	??_GPS_read_speed,w
  7046  03FE  00CB               	movwf	GPS_read_speed@m_char
  7047                           
  7048                           ;GPS.c: 42: checksum ^= m_char;
  7049  03FF  084B               	movf	GPS_read_speed@m_char,w
  7050  0400  00B9               	movwf	??_GPS_read_speed
  7051  0401  0839               	movf	??_GPS_read_speed,w
  7052  0402  06C2               	xorwf	GPS_read_speed@checksum,f
  7053                           
  7054                           ;GPS.c: 43: if (m_char == ',')
  7055  0403  302C               	movlw	44
  7056  0404  064B               	xorwf	GPS_read_speed@m_char,w
  7057  0405  1903               	btfsc	3,2
  7058  0406  2C19               	goto	l4407
  7059                           
  7060                           ;GPS.c: 45: else
  7061                           ;GPS.c: 46: {
  7062                           ;GPS.c: 47: buffer[i_buff++] = m_char;
  7063                           
  7064                           ;GPS.c: 44: break;
  7065  0407  084B               	movf	GPS_read_speed@m_char,w
  7066  0408  00B9               	movwf	??_GPS_read_speed
  7067  0409  084A               	movf	GPS_read_speed@i_buff,w
  7068  040A  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7069  040B  0086               	movwf	6
  7070  040C  0187               	clrf	7
  7071  040D  0839               	movf	??_GPS_read_speed,w
  7072  040E  0081               	movwf	1
  7073  040F  3001               	movlw	1
  7074  0410  00B9               	movwf	??_GPS_read_speed
  7075  0411  0839               	movf	??_GPS_read_speed,w
  7076  0412  07CA               	addwf	GPS_read_speed@i_buff,f
  7077                           
  7078                           ;GPS.c: 48: if (i_buff >= 6)
  7079  0413  3006               	movlw	6
  7080  0414  024A               	subwf	GPS_read_speed@i_buff,w
  7081  0415  1C03               	skipc
  7082  0416  2BF5               	goto	l4385
  7083                           
  7084                           ;GPS.c: 49: return 0;
  7085  0417  3000               	movlw	0
  7086  0418  0008               	return
  7087  0419                     l4407:	
  7088                           
  7089                           ;GPS.c: 50: }
  7090                           ;GPS.c: 51: }
  7091                           ;GPS.c: 53: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3] !
      +                          = 'T')||(buffer[4] != 'G'))
  7092  0419  3047               	movlw	71
  7093  041A  0643               	xorwf	GPS_read_speed@buffer,w
  7094  041B  1D03               	btfss	3,2
  7095  041C  2C2D               	goto	l4417
  7096  041D  3050               	movlw	80
  7097  041E  0644               	xorwf	GPS_read_speed@buffer+1,w
  7098  041F  1D03               	btfss	3,2
  7099  0420  2C2D               	goto	l4417
  7100  0421  3056               	movlw	86
  7101  0422  0645               	xorwf	GPS_read_speed@buffer+2,w
  7102  0423  1D03               	btfss	3,2
  7103  0424  2C2D               	goto	l4417
  7104  0425  3054               	movlw	84
  7105  0426  0646               	xorwf	GPS_read_speed@buffer+3,w
  7106  0427  1D03               	btfss	3,2
  7107  0428  2C2D               	goto	l4417
  7108  0429  3047               	movlw	71
  7109  042A  0647               	xorwf	GPS_read_speed@buffer+4,w
  7110  042B  1903               	btfsc	3,2
  7111  042C  2C2F               	goto	l4421
  7112  042D                     l4417:	
  7113                           
  7114                           ;GPS.c: 54: return 0;
  7115  042D  3000               	movlw	0
  7116  042E  0008               	return
  7117  042F                     l4421:	
  7118                           
  7119                           ;GPS.c: 55: i_buff = 0;
  7120  042F  01CA               	clrf	GPS_read_speed@i_buff
  7121  0430                     l4423:	
  7122                           ;GPS.c: 58: while (1)
  7123                           
  7124                           
  7125                           ;GPS.c: 59: if (eusartRxCount!=0)
  7126  0430  0878               	movf	_eusartRxCount,w	;volatile
  7127  0431  1903               	btfsc	3,2
  7128  0432  2C30               	goto	l4423
  7129                           
  7130                           ;GPS.c: 60: {
  7131                           ;GPS.c: 61: m_char=EUSART_Read();
  7132  0433  318A  22E3  3183   	fcall	_EUSART_Read
  7133  0436  0020               	movlb	0	; select bank0
  7134  0437  00B9               	movwf	??_GPS_read_speed
  7135  0438  0839               	movf	??_GPS_read_speed,w
  7136  0439  00CB               	movwf	GPS_read_speed@m_char
  7137                           
  7138                           ;GPS.c: 62: checksum ^= m_char;
  7139  043A  084B               	movf	GPS_read_speed@m_char,w
  7140  043B  00B9               	movwf	??_GPS_read_speed
  7141  043C  0839               	movf	??_GPS_read_speed,w
  7142  043D  06C2               	xorwf	GPS_read_speed@checksum,f
  7143                           
  7144                           ;GPS.c: 63: if (m_char == ',')
  7145  043E  302C               	movlw	44
  7146  043F  064B               	xorwf	GPS_read_speed@m_char,w
  7147  0440  1D03               	btfss	3,2
  7148  0441  2C30               	goto	l4423
  7149  0442                     l4433:	
  7150                           ;GPS.c: 65: }
  7151                           ;GPS.c: 67: while (1)
  7152                           
  7153                           ;GPS.c: 64: break;
  7154                           
  7155                           
  7156                           ;GPS.c: 68: if (eusartRxCount!=0)
  7157  0442  0878               	movf	_eusartRxCount,w	;volatile
  7158  0443  1903               	btfsc	3,2
  7159  0444  2C42               	goto	l4433
  7160                           
  7161                           ;GPS.c: 69: {
  7162                           ;GPS.c: 70: m_char=EUSART_Read();
  7163  0445  318A  22E3  3183   	fcall	_EUSART_Read
  7164  0448  0020               	movlb	0	; select bank0
  7165  0449  00B9               	movwf	??_GPS_read_speed
  7166  044A  0839               	movf	??_GPS_read_speed,w
  7167  044B  00CB               	movwf	GPS_read_speed@m_char
  7168                           
  7169                           ;GPS.c: 71: checksum ^= m_char;
  7170  044C  084B               	movf	GPS_read_speed@m_char,w
  7171  044D  00B9               	movwf	??_GPS_read_speed
  7172  044E  0839               	movf	??_GPS_read_speed,w
  7173  044F  06C2               	xorwf	GPS_read_speed@checksum,f
  7174                           
  7175                           ;GPS.c: 72: if (m_char == ',')
  7176  0450  302C               	movlw	44
  7177  0451  064B               	xorwf	GPS_read_speed@m_char,w
  7178  0452  1903               	btfsc	3,2
  7179  0453  2C66               	goto	l4455
  7180                           
  7181                           ;GPS.c: 74: else
  7182                           ;GPS.c: 75: {
  7183                           ;GPS.c: 76: buffer[i_buff++] = m_char;
  7184                           
  7185                           ;GPS.c: 73: break;
  7186  0454  084B               	movf	GPS_read_speed@m_char,w
  7187  0455  00B9               	movwf	??_GPS_read_speed
  7188  0456  084A               	movf	GPS_read_speed@i_buff,w
  7189  0457  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7190  0458  0086               	movwf	6
  7191  0459  0187               	clrf	7
  7192  045A  0839               	movf	??_GPS_read_speed,w
  7193  045B  0081               	movwf	1
  7194  045C  3001               	movlw	1
  7195  045D  00B9               	movwf	??_GPS_read_speed
  7196  045E  0839               	movf	??_GPS_read_speed,w
  7197  045F  07CA               	addwf	GPS_read_speed@i_buff,f
  7198                           
  7199                           ;GPS.c: 77: if (i_buff >= 6)
  7200  0460  3006               	movlw	6
  7201  0461  024A               	subwf	GPS_read_speed@i_buff,w
  7202  0462  1C03               	skipc
  7203  0463  2C42               	goto	l4433
  7204                           
  7205                           ;GPS.c: 78: return 0;
  7206  0464  3000               	movlw	0
  7207  0465  0008               	return
  7208  0466                     l4455:	
  7209                           
  7210                           ;GPS.c: 79: }
  7211                           ;GPS.c: 80: }
  7212                           ;GPS.c: 81: if ((buffer[0] != 'T')||(i_buff != 1))
  7213  0466  3054               	movlw	84
  7214  0467  0643               	xorwf	GPS_read_speed@buffer,w
  7215  0468  1903               	btfsc	3,2
  7216  0469  034A               	decf	GPS_read_speed@i_buff,w
  7217  046A  1903               	btfsc	3,2
  7218  046B  2C6E               	goto	l4463
  7219                           
  7220                           ;GPS.c: 82: return 0;
  7221  046C  3000               	movlw	0
  7222  046D  0008               	return
  7223  046E                     l4463:	
  7224                           
  7225                           ;GPS.c: 83: i_buff = 0;
  7226  046E  01CA               	clrf	GPS_read_speed@i_buff
  7227  046F                     l4465:	
  7228                           ;GPS.c: 86: while (1)
  7229                           
  7230                           
  7231                           ;GPS.c: 87: if (eusartRxCount!=0)
  7232  046F  0878               	movf	_eusartRxCount,w	;volatile
  7233  0470  1903               	btfsc	3,2
  7234  0471  2C6F               	goto	l4465
  7235                           
  7236                           ;GPS.c: 88: {
  7237                           ;GPS.c: 89: m_char=EUSART_Read();
  7238  0472  318A  22E3  3183   	fcall	_EUSART_Read
  7239  0475  0020               	movlb	0	; select bank0
  7240  0476  00B9               	movwf	??_GPS_read_speed
  7241  0477  0839               	movf	??_GPS_read_speed,w
  7242  0478  00CB               	movwf	GPS_read_speed@m_char
  7243                           
  7244                           ;GPS.c: 90: checksum ^= m_char;
  7245  0479  084B               	movf	GPS_read_speed@m_char,w
  7246  047A  00B9               	movwf	??_GPS_read_speed
  7247  047B  0839               	movf	??_GPS_read_speed,w
  7248  047C  06C2               	xorwf	GPS_read_speed@checksum,f
  7249                           
  7250                           ;GPS.c: 91: if (m_char == ',')
  7251  047D  302C               	movlw	44
  7252  047E  064B               	xorwf	GPS_read_speed@m_char,w
  7253  047F  1D03               	btfss	3,2
  7254  0480  2C6F               	goto	l4465
  7255  0481                     l4475:	
  7256                           ;GPS.c: 93: }
  7257                           ;GPS.c: 95: while (1)
  7258                           
  7259                           ;GPS.c: 92: break;
  7260                           
  7261                           
  7262                           ;GPS.c: 96: if (eusartRxCount!=0)
  7263  0481  0878               	movf	_eusartRxCount,w	;volatile
  7264  0482  1903               	btfsc	3,2
  7265  0483  2C81               	goto	l4475
  7266                           
  7267                           ;GPS.c: 97: {
  7268                           ;GPS.c: 98: m_char=EUSART_Read();
  7269  0484  318A  22E3  3183   	fcall	_EUSART_Read
  7270  0487  0020               	movlb	0	; select bank0
  7271  0488  00B9               	movwf	??_GPS_read_speed
  7272  0489  0839               	movf	??_GPS_read_speed,w
  7273  048A  00CB               	movwf	GPS_read_speed@m_char
  7274                           
  7275                           ;GPS.c: 99: checksum ^= m_char;
  7276  048B  084B               	movf	GPS_read_speed@m_char,w
  7277  048C  00B9               	movwf	??_GPS_read_speed
  7278  048D  0839               	movf	??_GPS_read_speed,w
  7279  048E  06C2               	xorwf	GPS_read_speed@checksum,f
  7280                           
  7281                           ;GPS.c: 100: if (m_char == ',')
  7282  048F  302C               	movlw	44
  7283  0490  064B               	xorwf	GPS_read_speed@m_char,w
  7284  0491  1903               	btfsc	3,2
  7285  0492  2CA5               	goto	l4497
  7286                           
  7287                           ;GPS.c: 102: else
  7288                           ;GPS.c: 103: {
  7289                           ;GPS.c: 104: buffer[i_buff++] = m_char;
  7290                           
  7291                           ;GPS.c: 101: break;
  7292  0493  084B               	movf	GPS_read_speed@m_char,w
  7293  0494  00B9               	movwf	??_GPS_read_speed
  7294  0495  084A               	movf	GPS_read_speed@i_buff,w
  7295  0496  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7296  0497  0086               	movwf	6
  7297  0498  0187               	clrf	7
  7298  0499  0839               	movf	??_GPS_read_speed,w
  7299  049A  0081               	movwf	1
  7300  049B  3001               	movlw	1
  7301  049C  00B9               	movwf	??_GPS_read_speed
  7302  049D  0839               	movf	??_GPS_read_speed,w
  7303  049E  07CA               	addwf	GPS_read_speed@i_buff,f
  7304                           
  7305                           ;GPS.c: 105: if (i_buff >= 6)
  7306  049F  3006               	movlw	6
  7307  04A0  024A               	subwf	GPS_read_speed@i_buff,w
  7308  04A1  1C03               	skipc
  7309  04A2  2C81               	goto	l4475
  7310                           
  7311                           ;GPS.c: 106: return 0;
  7312  04A3  3000               	movlw	0
  7313  04A4  0008               	return
  7314  04A5                     l4497:	
  7315                           
  7316                           ;GPS.c: 107: }
  7317                           ;GPS.c: 108: }
  7318                           ;GPS.c: 109: if ((buffer[0] != 'M')||(i_buff != 1))
  7319  04A5  304D               	movlw	77
  7320  04A6  0643               	xorwf	GPS_read_speed@buffer,w
  7321  04A7  1903               	btfsc	3,2
  7322  04A8  034A               	decf	GPS_read_speed@i_buff,w
  7323  04A9  1903               	btfsc	3,2
  7324  04AA  2CAD               	goto	l4505
  7325                           
  7326                           ;GPS.c: 110: return 0;
  7327  04AB  3000               	movlw	0
  7328  04AC  0008               	return
  7329  04AD                     l4505:	
  7330                           
  7331                           ;GPS.c: 111: i_buff = 0;
  7332  04AD  01CA               	clrf	GPS_read_speed@i_buff
  7333  04AE                     l4507:	
  7334                           ;GPS.c: 114: while (1)
  7335                           
  7336                           
  7337                           ;GPS.c: 115: if (eusartRxCount!=0)
  7338  04AE  0878               	movf	_eusartRxCount,w	;volatile
  7339  04AF  1903               	btfsc	3,2
  7340  04B0  2CAE               	goto	l4507
  7341                           
  7342                           ;GPS.c: 116: {
  7343                           ;GPS.c: 117: m_char=EUSART_Read();
  7344  04B1  318A  22E3  3183   	fcall	_EUSART_Read
  7345  04B4  0020               	movlb	0	; select bank0
  7346  04B5  00B9               	movwf	??_GPS_read_speed
  7347  04B6  0839               	movf	??_GPS_read_speed,w
  7348  04B7  00CB               	movwf	GPS_read_speed@m_char
  7349                           
  7350                           ;GPS.c: 118: checksum ^= m_char;
  7351  04B8  084B               	movf	GPS_read_speed@m_char,w
  7352  04B9  00B9               	movwf	??_GPS_read_speed
  7353  04BA  0839               	movf	??_GPS_read_speed,w
  7354  04BB  06C2               	xorwf	GPS_read_speed@checksum,f
  7355                           
  7356                           ;GPS.c: 119: if (m_char == ',')
  7357  04BC  302C               	movlw	44
  7358  04BD  064B               	xorwf	GPS_read_speed@m_char,w
  7359  04BE  1D03               	btfss	3,2
  7360  04BF  2CAE               	goto	l4507
  7361  04C0                     l4517:	
  7362                           ;GPS.c: 121: }
  7363                           ;GPS.c: 123: while (1)
  7364                           
  7365                           ;GPS.c: 120: break;
  7366                           
  7367                           
  7368                           ;GPS.c: 124: if (eusartRxCount!=0)
  7369  04C0  0878               	movf	_eusartRxCount,w	;volatile
  7370  04C1  1903               	btfsc	3,2
  7371  04C2  2CC0               	goto	l4517
  7372                           
  7373                           ;GPS.c: 125: {
  7374                           ;GPS.c: 126: m_char=EUSART_Read();
  7375  04C3  318A  22E3  3183   	fcall	_EUSART_Read
  7376  04C6  0020               	movlb	0	; select bank0
  7377  04C7  00B9               	movwf	??_GPS_read_speed
  7378  04C8  0839               	movf	??_GPS_read_speed,w
  7379  04C9  00CB               	movwf	GPS_read_speed@m_char
  7380                           
  7381                           ;GPS.c: 127: checksum ^= m_char;
  7382  04CA  084B               	movf	GPS_read_speed@m_char,w
  7383  04CB  00B9               	movwf	??_GPS_read_speed
  7384  04CC  0839               	movf	??_GPS_read_speed,w
  7385  04CD  06C2               	xorwf	GPS_read_speed@checksum,f
  7386                           
  7387                           ;GPS.c: 128: if (m_char == ',')
  7388  04CE  302C               	movlw	44
  7389  04CF  064B               	xorwf	GPS_read_speed@m_char,w
  7390  04D0  1903               	btfsc	3,2
  7391  04D1  2CE4               	goto	l4539
  7392                           
  7393                           ;GPS.c: 130: else
  7394                           ;GPS.c: 131: {
  7395                           ;GPS.c: 132: buffer[i_buff++] = m_char;
  7396                           
  7397                           ;GPS.c: 129: break;
  7398  04D2  084B               	movf	GPS_read_speed@m_char,w
  7399  04D3  00B9               	movwf	??_GPS_read_speed
  7400  04D4  084A               	movf	GPS_read_speed@i_buff,w
  7401  04D5  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7402  04D6  0086               	movwf	6
  7403  04D7  0187               	clrf	7
  7404  04D8  0839               	movf	??_GPS_read_speed,w
  7405  04D9  0081               	movwf	1
  7406  04DA  3001               	movlw	1
  7407  04DB  00B9               	movwf	??_GPS_read_speed
  7408  04DC  0839               	movf	??_GPS_read_speed,w
  7409  04DD  07CA               	addwf	GPS_read_speed@i_buff,f
  7410                           
  7411                           ;GPS.c: 133: if (i_buff >= 6)
  7412  04DE  3006               	movlw	6
  7413  04DF  024A               	subwf	GPS_read_speed@i_buff,w
  7414  04E0  1C03               	skipc
  7415  04E1  2CC0               	goto	l4517
  7416                           
  7417                           ;GPS.c: 134: return 0;
  7418  04E2  3000               	movlw	0
  7419  04E3  0008               	return
  7420  04E4                     l4539:	
  7421                           
  7422                           ;GPS.c: 135: }
  7423                           ;GPS.c: 136: }
  7424                           ;GPS.c: 137: if ((buffer[0] != 'N')||(i_buff != 1))
  7425  04E4  304E               	movlw	78
  7426  04E5  0643               	xorwf	GPS_read_speed@buffer,w
  7427  04E6  1903               	btfsc	3,2
  7428  04E7  034A               	decf	GPS_read_speed@i_buff,w
  7429  04E8  1903               	btfsc	3,2
  7430  04E9  2CEC               	goto	l4547
  7431                           
  7432                           ;GPS.c: 138: return 0;
  7433  04EA  3000               	movlw	0
  7434  04EB  0008               	return
  7435  04EC                     l4547:	
  7436                           
  7437                           ;GPS.c: 139: i_buff = 0;
  7438  04EC  01CA               	clrf	GPS_read_speed@i_buff
  7439  04ED                     l4549:	
  7440                           ;GPS.c: 142: while (1)
  7441                           
  7442                           
  7443                           ;GPS.c: 143: if (eusartRxCount!=0)
  7444  04ED  0878               	movf	_eusartRxCount,w	;volatile
  7445  04EE  1903               	btfsc	3,2
  7446  04EF  2CED               	goto	l4549
  7447                           
  7448                           ;GPS.c: 144: {
  7449                           ;GPS.c: 145: m_char=EUSART_Read();
  7450  04F0  318A  22E3  3183   	fcall	_EUSART_Read
  7451  04F3  0020               	movlb	0	; select bank0
  7452  04F4  00B9               	movwf	??_GPS_read_speed
  7453  04F5  0839               	movf	??_GPS_read_speed,w
  7454  04F6  00CB               	movwf	GPS_read_speed@m_char
  7455                           
  7456                           ;GPS.c: 146: checksum ^= m_char;
  7457  04F7  084B               	movf	GPS_read_speed@m_char,w
  7458  04F8  00B9               	movwf	??_GPS_read_speed
  7459  04F9  0839               	movf	??_GPS_read_speed,w
  7460  04FA  06C2               	xorwf	GPS_read_speed@checksum,f
  7461                           
  7462                           ;GPS.c: 147: if (m_char == ',')
  7463  04FB  302C               	movlw	44
  7464  04FC  064B               	xorwf	GPS_read_speed@m_char,w
  7465  04FD  1903               	btfsc	3,2
  7466  04FE  2D11               	goto	l4571
  7467                           
  7468                           ;GPS.c: 149: else
  7469                           ;GPS.c: 150: {
  7470                           ;GPS.c: 151: buffer[i_buff++] = m_char;
  7471                           
  7472                           ;GPS.c: 148: break;
  7473  04FF  084B               	movf	GPS_read_speed@m_char,w
  7474  0500  00B9               	movwf	??_GPS_read_speed
  7475  0501  084A               	movf	GPS_read_speed@i_buff,w
  7476  0502  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7477  0503  0086               	movwf	6
  7478  0504  0187               	clrf	7
  7479  0505  0839               	movf	??_GPS_read_speed,w
  7480  0506  0081               	movwf	1
  7481  0507  3001               	movlw	1
  7482  0508  00B9               	movwf	??_GPS_read_speed
  7483  0509  0839               	movf	??_GPS_read_speed,w
  7484  050A  07CA               	addwf	GPS_read_speed@i_buff,f
  7485                           
  7486                           ;GPS.c: 152: if (i_buff >= 6)
  7487  050B  3006               	movlw	6
  7488  050C  024A               	subwf	GPS_read_speed@i_buff,w
  7489  050D  1C03               	skipc
  7490  050E  2CED               	goto	l4549
  7491                           
  7492                           ;GPS.c: 153: return 0;
  7493  050F  3000               	movlw	0
  7494  0510  0008               	return
  7495  0511                     l4571:	
  7496                           
  7497                           ;GPS.c: 154: }
  7498                           ;GPS.c: 155: }
  7499                           ;GPS.c: 158: unsigned char i_buff2 = 0;
  7500  0511  01C9               	clrf	GPS_read_speed@i_buff2
  7501                           
  7502                           ;GPS.c: 159: unsigned short read_speed_int=0;
  7503  0512  01BD               	clrf	GPS_read_speed@read_speed_int
  7504  0513  01BE               	clrf	GPS_read_speed@read_speed_int+1
  7505                           
  7506                           ;GPS.c: 160: unsigned short read_speed_fra=0;
  7507  0514  01BF               	clrf	GPS_read_speed@read_speed_fra
  7508  0515  01C0               	clrf	GPS_read_speed@read_speed_fra+1
  7509                           
  7510                           ;GPS.c: 161: bool before_dot = 1;
  7511  0516  01BB               	clrf	GPS_read_speed@before_dot
  7512  0517  0ABB               	incf	GPS_read_speed@before_dot,f
  7513  0518                     l4599:	
  7514                           ;GPS.c: 162: while (i_buff2 < i_buff)
  7515                           
  7516  0518  084A               	movf	GPS_read_speed@i_buff,w
  7517  0519  0249               	subwf	GPS_read_speed@i_buff2,w
  7518  051A  1803               	btfsc	3,0
  7519  051B  2D7B               	goto	l4601
  7520                           
  7521                           ;GPS.c: 163: if (buffer[i_buff2]=='.')
  7522  051C  0849               	movf	GPS_read_speed@i_buff2,w
  7523  051D  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7524  051E  0086               	movwf	6
  7525  051F  0187               	clrf	7
  7526  0520  302E               	movlw	46
  7527  0521  0601               	xorwf	1,w
  7528  0522  1D03               	btfss	3,2
  7529  0523  2D26               	goto	l4581
  7530                           
  7531                           ;GPS.c: 164: {
  7532                           ;GPS.c: 165: before_dot = 0;
  7533  0524  01BB               	clrf	GPS_read_speed@before_dot
  7534  0525  2D76               	goto	l4597
  7535  0526                     l4581:	
  7536                           ;GPS.c: 167: }
  7537                           
  7538                           ;GPS.c: 166: i_buff2++;
  7539                           
  7540                           
  7541                           ;GPS.c: 168: else
  7542                           ;GPS.c: 169: {
  7543                           ;GPS.c: 170: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  7544  0526  0849               	movf	GPS_read_speed@i_buff2,w
  7545  0527  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7546  0528  0086               	movwf	6
  7547  0529  0187               	clrf	7
  7548  052A  3030               	movlw	48
  7549  052B  0201               	subwf	1,w
  7550  052C  1C03               	skipc
  7551  052D  2D36               	goto	l4585
  7552  052E  0849               	movf	GPS_read_speed@i_buff2,w
  7553  052F  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7554  0530  0086               	movwf	6
  7555  0531  0187               	clrf	7
  7556  0532  303A               	movlw	58
  7557  0533  0201               	subwf	1,w
  7558  0534  1C03               	skipc
  7559  0535  2D38               	goto	l4591
  7560  0536                     l4585:	
  7561                           
  7562                           ;GPS.c: 171: return 0;
  7563  0536  3000               	movlw	0
  7564  0537  0008               	return
  7565  0538                     l4591:	
  7566                           
  7567                           ;GPS.c: 172: else
  7568                           ;GPS.c: 173: {
  7569                           ;GPS.c: 174: if (before_dot)
  7570  0538  083B               	movf	GPS_read_speed@before_dot,w
  7571  0539  1903               	btfsc	3,2
  7572  053A  2D59               	goto	l4595
  7573                           
  7574                           ;GPS.c: 175: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  7575  053B  083E               	movf	GPS_read_speed@read_speed_int+1,w
  7576  053C  00A1               	movwf	___wmul@multiplier+1
  7577  053D  083D               	movf	GPS_read_speed@read_speed_int,w
  7578  053E  00A0               	movwf	___wmul@multiplier
  7579  053F  300A               	movlw	10
  7580  0540  00A2               	movwf	___wmul@multiplicand
  7581  0541  3000               	movlw	0
  7582  0542  00A3               	movwf	___wmul@multiplicand+1
  7583  0543  318A  2254  3183   	fcall	___wmul
  7584  0546  0020               	movlb	0	; select bank0
  7585  0547  0849               	movf	GPS_read_speed@i_buff2,w
  7586  0548  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7587  0549  0086               	movwf	6
  7588  054A  0187               	clrf	7
  7589  054B  0801               	movf	1,w
  7590  054C  0720               	addwf	?___wmul,w
  7591  054D  00B9               	movwf	??_GPS_read_speed
  7592  054E  0821               	movf	?___wmul+1,w
  7593  054F  1803               	skipnc
  7594  0550  0A21               	incf	?___wmul+1,w
  7595  0551  00BA               	movwf	??_GPS_read_speed+1
  7596  0552  0839               	movf	??_GPS_read_speed,w
  7597  0553  3ED0               	addlw	208
  7598  0554  00BD               	movwf	GPS_read_speed@read_speed_int
  7599  0555  30FF               	movlw	255
  7600  0556  3D3A               	addwfc	??_GPS_read_speed+1,w
  7601  0557  00BE               	movwf	GPS_read_speed@read_speed_int+1
  7602  0558  2D76               	goto	l4597
  7603  0559                     l4595:	
  7604                           
  7605                           ;GPS.c: 176: else
  7606                           ;GPS.c: 177: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  7607  0559  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7608  055A  00A1               	movwf	___wmul@multiplier+1
  7609  055B  083F               	movf	GPS_read_speed@read_speed_fra,w
  7610  055C  00A0               	movwf	___wmul@multiplier
  7611  055D  300A               	movlw	10
  7612  055E  00A2               	movwf	___wmul@multiplicand
  7613  055F  3000               	movlw	0
  7614  0560  00A3               	movwf	___wmul@multiplicand+1
  7615  0561  318A  2254  3183   	fcall	___wmul
  7616  0564  0020               	movlb	0	; select bank0
  7617  0565  0849               	movf	GPS_read_speed@i_buff2,w
  7618  0566  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7619  0567  0086               	movwf	6
  7620  0568  0187               	clrf	7
  7621  0569  0801               	movf	1,w
  7622  056A  0720               	addwf	?___wmul,w
  7623  056B  00B9               	movwf	??_GPS_read_speed
  7624  056C  0821               	movf	?___wmul+1,w
  7625  056D  1803               	skipnc
  7626  056E  0A21               	incf	?___wmul+1,w
  7627  056F  00BA               	movwf	??_GPS_read_speed+1
  7628  0570  0839               	movf	??_GPS_read_speed,w
  7629  0571  3ED0               	addlw	208
  7630  0572  00BF               	movwf	GPS_read_speed@read_speed_fra
  7631  0573  30FF               	movlw	255
  7632  0574  3D3A               	addwfc	??_GPS_read_speed+1,w
  7633  0575  00C0               	movwf	GPS_read_speed@read_speed_fra+1
  7634  0576                     l4597:	
  7635                           
  7636                           ;GPS.c: 178: i_buff2++;
  7637  0576  3001               	movlw	1
  7638  0577  00B9               	movwf	??_GPS_read_speed
  7639  0578  0839               	movf	??_GPS_read_speed,w
  7640  0579  07C9               	addwf	GPS_read_speed@i_buff2,f
  7641  057A  2D18               	goto	l4599
  7642  057B                     l4601:	
  7643                           
  7644                           ;GPS.c: 179: }
  7645                           ;GPS.c: 180: }
  7646                           ;GPS.c: 184: read_speed_fra *= 100;
  7647  057B  3064               	movlw	100
  7648  057C  00A0               	movwf	___wmul@multiplier
  7649  057D  3000               	movlw	0
  7650  057E  00A1               	movwf	___wmul@multiplier+1
  7651  057F  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7652  0580  00A3               	movwf	___wmul@multiplicand+1
  7653  0581  083F               	movf	GPS_read_speed@read_speed_fra,w
  7654  0582  00A2               	movwf	___wmul@multiplicand
  7655  0583  318A  2254  3183   	fcall	___wmul
  7656  0586  0020               	movlb	0	; select bank0
  7657  0587  0821               	movf	?___wmul+1,w
  7658  0588  00C0               	movwf	GPS_read_speed@read_speed_fra+1
  7659  0589  0820               	movf	?___wmul,w
  7660  058A  00BF               	movwf	GPS_read_speed@read_speed_fra
  7661                           
  7662                           ;GPS.c: 187: i_buff = 0;
  7663  058B  01CA               	clrf	GPS_read_speed@i_buff
  7664  058C                     l4605:	
  7665                           ;GPS.c: 190: while (1)
  7666                           
  7667                           
  7668                           ;GPS.c: 191: if (eusartRxCount!=0)
  7669  058C  0878               	movf	_eusartRxCount,w	;volatile
  7670  058D  1903               	btfsc	3,2
  7671  058E  2D8C               	goto	l4605
  7672                           
  7673                           ;GPS.c: 192: {
  7674                           ;GPS.c: 193: m_char=EUSART_Read();
  7675  058F  318A  22E3  3183   	fcall	_EUSART_Read
  7676  0592  0020               	movlb	0	; select bank0
  7677  0593  00B9               	movwf	??_GPS_read_speed
  7678  0594  0839               	movf	??_GPS_read_speed,w
  7679  0595  00CB               	movwf	GPS_read_speed@m_char
  7680                           
  7681                           ;GPS.c: 194: checksum ^= m_char;
  7682  0596  084B               	movf	GPS_read_speed@m_char,w
  7683  0597  00B9               	movwf	??_GPS_read_speed
  7684  0598  0839               	movf	??_GPS_read_speed,w
  7685  0599  06C2               	xorwf	GPS_read_speed@checksum,f
  7686                           
  7687                           ;GPS.c: 195: if (m_char == ',')
  7688  059A  302C               	movlw	44
  7689  059B  064B               	xorwf	GPS_read_speed@m_char,w
  7690  059C  1903               	btfsc	3,2
  7691  059D  2DB0               	goto	l4627
  7692                           
  7693                           ;GPS.c: 197: else
  7694                           ;GPS.c: 198: {
  7695                           ;GPS.c: 199: buffer[i_buff++] = m_char;
  7696                           
  7697                           ;GPS.c: 196: break;
  7698  059E  084B               	movf	GPS_read_speed@m_char,w
  7699  059F  00B9               	movwf	??_GPS_read_speed
  7700  05A0  084A               	movf	GPS_read_speed@i_buff,w
  7701  05A1  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7702  05A2  0086               	movwf	6
  7703  05A3  0187               	clrf	7
  7704  05A4  0839               	movf	??_GPS_read_speed,w
  7705  05A5  0081               	movwf	1
  7706  05A6  3001               	movlw	1
  7707  05A7  00B9               	movwf	??_GPS_read_speed
  7708  05A8  0839               	movf	??_GPS_read_speed,w
  7709  05A9  07CA               	addwf	GPS_read_speed@i_buff,f
  7710                           
  7711                           ;GPS.c: 200: if (i_buff >= 6)
  7712  05AA  3006               	movlw	6
  7713  05AB  024A               	subwf	GPS_read_speed@i_buff,w
  7714  05AC  1C03               	skipc
  7715  05AD  2D8C               	goto	l4605
  7716                           
  7717                           ;GPS.c: 201: return 0;
  7718  05AE  3000               	movlw	0
  7719  05AF  0008               	return
  7720  05B0                     l4627:	
  7721                           
  7722                           ;GPS.c: 202: }
  7723                           ;GPS.c: 203: }
  7724                           ;GPS.c: 204: if ((buffer[0] != 'K')||(i_buff != 1))
  7725  05B0  304B               	movlw	75
  7726  05B1  0643               	xorwf	GPS_read_speed@buffer,w
  7727  05B2  1903               	btfsc	3,2
  7728  05B3  034A               	decf	GPS_read_speed@i_buff,w
  7729  05B4  1903               	btfsc	3,2
  7730  05B5  2DB8               	goto	l4635
  7731                           
  7732                           ;GPS.c: 205: return 0;
  7733  05B6  3000               	movlw	0
  7734  05B7  0008               	return
  7735  05B8                     l4635:	
  7736                           
  7737                           ;GPS.c: 206: i_buff = 0;
  7738  05B8  01CA               	clrf	GPS_read_speed@i_buff
  7739                           
  7740                           ;GPS.c: 209: bool no_more_checksum = 0;
  7741  05B9  01BC               	clrf	GPS_read_speed@no_more_checksum
  7742  05BA                     l4637:	
  7743                           ;GPS.c: 210: while (1)
  7744                           
  7745                           
  7746                           ;GPS.c: 211: if (eusartRxCount!=0)
  7747  05BA  0878               	movf	_eusartRxCount,w	;volatile
  7748  05BB  1903               	btfsc	3,2
  7749  05BC  2DBA               	goto	l4637
  7750                           
  7751                           ;GPS.c: 212: {
  7752                           ;GPS.c: 213: m_char=EUSART_Read();
  7753  05BD  318A  22E3  3183   	fcall	_EUSART_Read
  7754  05C0  0020               	movlb	0	; select bank0
  7755  05C1  00B9               	movwf	??_GPS_read_speed
  7756  05C2  0839               	movf	??_GPS_read_speed,w
  7757  05C3  00CB               	movwf	GPS_read_speed@m_char
  7758                           
  7759                           ;GPS.c: 214: if (m_char == '*')
  7760  05C4  302A               	movlw	42
  7761  05C5  064B               	xorwf	GPS_read_speed@m_char,w
  7762  05C6  1D03               	btfss	3,2
  7763  05C7  2DCA               	goto	l4645
  7764                           
  7765                           ;GPS.c: 215: no_more_checksum = 1;
  7766  05C8  01BC               	clrf	GPS_read_speed@no_more_checksum
  7767  05C9  0ABC               	incf	GPS_read_speed@no_more_checksum,f
  7768  05CA                     l4645:	
  7769                           
  7770                           ;GPS.c: 216: if (!no_more_checksum)
  7771  05CA  083C               	movf	GPS_read_speed@no_more_checksum,w
  7772  05CB  1D03               	btfss	3,2
  7773  05CC  2DD1               	goto	l698
  7774                           
  7775                           ;GPS.c: 217: checksum ^= m_char;
  7776  05CD  084B               	movf	GPS_read_speed@m_char,w
  7777  05CE  00B9               	movwf	??_GPS_read_speed
  7778  05CF  0839               	movf	??_GPS_read_speed,w
  7779  05D0  06C2               	xorwf	GPS_read_speed@checksum,f
  7780  05D1                     l698:	
  7781                           
  7782                           ;GPS.c: 218: if (m_char == 0x0D)
  7783  05D1  300D               	movlw	13
  7784  05D2  064B               	xorwf	GPS_read_speed@m_char,w
  7785  05D3  1903               	btfsc	3,2
  7786  05D4  2DE7               	goto	l4663
  7787                           
  7788                           ;GPS.c: 220: else
  7789                           ;GPS.c: 221: {
  7790                           ;GPS.c: 222: buffer[i_buff++] = m_char;
  7791                           
  7792                           ;GPS.c: 219: break;
  7793  05D5  084B               	movf	GPS_read_speed@m_char,w
  7794  05D6  00B9               	movwf	??_GPS_read_speed
  7795  05D7  084A               	movf	GPS_read_speed@i_buff,w
  7796  05D8  3E43               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  7797  05D9  0086               	movwf	6
  7798  05DA  0187               	clrf	7
  7799  05DB  0839               	movf	??_GPS_read_speed,w
  7800  05DC  0081               	movwf	1
  7801  05DD  3001               	movlw	1
  7802  05DE  00B9               	movwf	??_GPS_read_speed
  7803  05DF  0839               	movf	??_GPS_read_speed,w
  7804  05E0  07CA               	addwf	GPS_read_speed@i_buff,f
  7805                           
  7806                           ;GPS.c: 223: if (i_buff >= 6)
  7807  05E1  3006               	movlw	6
  7808  05E2  024A               	subwf	GPS_read_speed@i_buff,w
  7809  05E3  1C03               	skipc
  7810  05E4  2DBA               	goto	l4637
  7811                           
  7812                           ;GPS.c: 224: return 0;
  7813  05E5  3000               	movlw	0
  7814  05E6  0008               	return
  7815  05E7                     l4663:	
  7816                           
  7817                           ;GPS.c: 225: }
  7818                           ;GPS.c: 226: }
  7819                           ;GPS.c: 227: if ((buffer[1] != '*')||(i_buff != 4))
  7820  05E7  302A               	movlw	42
  7821  05E8  0644               	xorwf	GPS_read_speed@buffer+1,w
  7822  05E9  1D03               	btfss	3,2
  7823  05EA  2DEF               	goto	l4667
  7824  05EB  3004               	movlw	4
  7825  05EC  064A               	xorwf	GPS_read_speed@i_buff,w
  7826  05ED  1903               	btfsc	3,2
  7827  05EE  2DF1               	goto	l4671
  7828  05EF                     l4667:	
  7829                           
  7830                           ;GPS.c: 228: return 0;
  7831  05EF  3000               	movlw	0
  7832  05F0  0008               	return
  7833  05F1                     l4671:	
  7834                           
  7835                           ;GPS.c: 231: unsigned char checksum2 = 0;
  7836  05F1  01C1               	clrf	GPS_read_speed@checksum2
  7837                           
  7838                           ;GPS.c: 232: if (buffer[2] > 0x39)
  7839  05F2  303A               	movlw	58
  7840  05F3  0245               	subwf	GPS_read_speed@buffer+2,w
  7841  05F4  1C03               	skipc
  7842  05F5  2DF9               	goto	l4677
  7843                           
  7844                           ;GPS.c: 233: checksum2 = buffer[2] - 0x37;
  7845  05F6  0845               	movf	GPS_read_speed@buffer+2,w
  7846  05F7  3EC9               	addlw	201
  7847  05F8  2DFB               	goto	L7
  7848  05F9                     l4677:	
  7849                           
  7850                           ;GPS.c: 234: else
  7851                           ;GPS.c: 235: checksum2 = buffer[2] - 0x30;
  7852  05F9  0845               	movf	GPS_read_speed@buffer+2,w
  7853  05FA  3ED0               	addlw	208
  7854  05FB                     L7:	
  7855  05FB  00B9               	movwf	??_GPS_read_speed
  7856  05FC  0839               	movf	??_GPS_read_speed,w
  7857  05FD  00C1               	movwf	GPS_read_speed@checksum2
  7858                           
  7859                           ;GPS.c: 236: checksum2 = checksum2 << 4;
  7860  05FE  0841               	movf	GPS_read_speed@checksum2,w
  7861  05FF  00B9               	movwf	??_GPS_read_speed
  7862  0600  3003               	movlw	3
  7863  0601                     u5275:	
  7864  0601  35B9               	lslf	??_GPS_read_speed,f
  7865  0602  3EFF               	addlw	-1
  7866  0603  1D03               	skipz
  7867  0604  2E01               	goto	u5275
  7868  0605  3539               	lslf	??_GPS_read_speed,w
  7869  0606  00BA               	movwf	??_GPS_read_speed+1
  7870  0607  083A               	movf	??_GPS_read_speed+1,w
  7871  0608  00C1               	movwf	GPS_read_speed@checksum2
  7872                           
  7873                           ;GPS.c: 237: if (buffer[3] > 0x39)
  7874  0609  303A               	movlw	58
  7875  060A  0246               	subwf	GPS_read_speed@buffer+3,w
  7876  060B  1C03               	skipc
  7877  060C  2E10               	goto	l4683
  7878                           
  7879                           ;GPS.c: 238: checksum2 += buffer[3] - 0x37;
  7880  060D  0846               	movf	GPS_read_speed@buffer+3,w
  7881  060E  3EC9               	addlw	201
  7882  060F  2E12               	goto	L8
  7883  0610                     l4683:	
  7884                           
  7885                           ;GPS.c: 239: else
  7886                           ;GPS.c: 240: checksum2 += buffer[3] - 0x30;
  7887  0610  0846               	movf	GPS_read_speed@buffer+3,w
  7888  0611  3ED0               	addlw	208
  7889  0612                     L8:	
  7890  0612  00B9               	movwf	??_GPS_read_speed
  7891  0613  0839               	movf	??_GPS_read_speed,w
  7892  0614  07C1               	addwf	GPS_read_speed@checksum2,f
  7893                           
  7894                           ;GPS.c: 241: if (checksum == checksum2)
  7895  0615  0842               	movf	GPS_read_speed@checksum,w
  7896  0616  0641               	xorwf	GPS_read_speed@checksum2,w
  7897  0617  1D03               	skipz
  7898  0618  2E35               	goto	l4695
  7899                           
  7900                           ;GPS.c: 242: {
  7901                           ;GPS.c: 243: speed = convert_to_fp(read_speed_int, read_speed_fra);
  7902  0619  083E               	movf	GPS_read_speed@read_speed_int+1,w
  7903  061A  00A5               	movwf	convert_to_fp@int_part+1
  7904  061B  083D               	movf	GPS_read_speed@read_speed_int,w
  7905  061C  00A4               	movwf	convert_to_fp@int_part
  7906  061D  0840               	movf	GPS_read_speed@read_speed_fra+1,w
  7907  061E  00A7               	movwf	convert_to_fp@fract_part+1
  7908  061F  083F               	movf	GPS_read_speed@read_speed_fra,w
  7909  0620  00A6               	movwf	convert_to_fp@fract_part
  7910  0621  3187  2730         	fcall	_convert_to_fp
  7911  0623  0020               	movlb	0	; select bank0
  7912  0624  0827               	movf	?_convert_to_fp+3,w
  7913  0625  0021               	movlb	1	; select bank1
  7914  0626  00BA               	movwf	(_speed+3)^(0+128)
  7915  0627  0020               	movlb	0	; select bank0
  7916  0628  0826               	movf	?_convert_to_fp+2,w
  7917  0629  0021               	movlb	1	; select bank1
  7918  062A  00B9               	movwf	(_speed+2)^(0+128)
  7919  062B  0020               	movlb	0	; select bank0
  7920  062C  0825               	movf	?_convert_to_fp+1,w
  7921  062D  0021               	movlb	1	; select bank1
  7922  062E  00B8               	movwf	(_speed+1)^(0+128)
  7923  062F  0020               	movlb	0	; select bank0
  7924  0630  0824               	movf	?_convert_to_fp,w
  7925  0631  0021               	movlb	1	; select bank1
  7926  0632  00B7               	movwf	_speed^(0+128)
  7927                           
  7928                           ;GPS.c: 244: return 1;
  7929  0633  3001               	movlw	1
  7930                           
  7931                           ;GPS.c: 245: }
  7932  0634  0008               	return
  7933  0635                     l4695:	
  7934                           
  7935                           ;GPS.c: 246: else
  7936                           ;GPS.c: 247: return 0;
  7937  0635  3000               	movlw	0
  7938  0636  0008               	return
  7939  0637                     __end_of_GPS_read_speed:	
  7940                           
  7941                           	psect	text25
  7942  0730                     __ptext25:	
  7943 ;; *************** function _convert_to_fp *****************
  7944 ;; Defined at:
  7945 ;;		line 13 in file "fixed_point.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  int_part        2    4[BANK0 ] short 
  7948 ;;  fract_part      2    6[BANK0 ] short 
  7949 ;; Auto vars:     Size  Location     Type
  7950 ;;  i_bit           1   18[BANK0 ] unsigned char 
  7951 ;;  res             4   21[BANK0 ] long 
  7952 ;;  tmp_left        2   19[BANK0 ] unsigned short 
  7953 ;;  res_fract       2   16[BANK0 ] unsigned short 
  7954 ;; Return value:  Size  Location     Type
  7955 ;;                  4    4[BANK0 ] long 
  7956 ;; Registers used:
  7957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7963 ;;      Params:         0       4       0       0       0       0
  7964 ;;      Locals:         0       9       0       0       0       0
  7965 ;;      Temps:          0       8       0       0       0       0
  7966 ;;      Totals:         0      21       0       0       0       0
  7967 ;;Total ram usage:       21 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:    6
  7970 ;; This function calls:
  7971 ;;		Nothing
  7972 ;; This function is called by:
  7973 ;;		_main
  7974 ;;		_integer_part
  7975 ;;		_GPS_read_speed
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           
  7980                           ;psect for function _convert_to_fp
  7981  0730                     _convert_to_fp:	
  7982                           
  7983                           ;fixed_point.c: 19: t_fp res = 0;
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  7987  0730  3000               	movlw	0
  7988  0731  0020               	movlb	0	; select bank0
  7989  0732  00B8               	movwf	convert_to_fp@res+3
  7990  0733  3000               	movlw	0
  7991  0734  00B7               	movwf	convert_to_fp@res+2
  7992  0735  3000               	movlw	0
  7993  0736  00B6               	movwf	convert_to_fp@res+1
  7994  0737  3000               	movlw	0
  7995  0738  00B5               	movwf	convert_to_fp@res
  7996                           
  7997                           ;fixed_point.c: 21: res = int_part;
  7998  0739  0824               	movf	convert_to_fp@int_part,w
  7999  073A  00B5               	movwf	convert_to_fp@res
  8000  073B  0825               	movf	convert_to_fp@int_part+1,w
  8001  073C  00B6               	movwf	convert_to_fp@res+1
  8002  073D  0D89               	rlf	9,f
  8003  073E  3B89               	subwfb	9,f
  8004  073F  0989               	comf	9,f
  8005  0740  00B7               	movwf	convert_to_fp@res+2
  8006  0741  00B8               	movwf	convert_to_fp@res+3
  8007                           
  8008                           ;fixed_point.c: 22: res = res << 16;
  8009  0742  0835               	movf	convert_to_fp@res,w
  8010  0743  00A8               	movwf	??_convert_to_fp
  8011  0744  0836               	movf	convert_to_fp@res+1,w
  8012  0745  00A9               	movwf	??_convert_to_fp+1
  8013  0746  0837               	movf	convert_to_fp@res+2,w
  8014  0747  00AA               	movwf	??_convert_to_fp+2
  8015  0748  0838               	movf	convert_to_fp@res+3,w
  8016  0749  00AB               	movwf	??_convert_to_fp+3
  8017  074A  3010               	movlw	16
  8018  074B                     u4235:	
  8019  074B  35A8               	lslf	??_convert_to_fp,f
  8020  074C  0DA9               	rlf	??_convert_to_fp+1,f
  8021  074D  0DAA               	rlf	??_convert_to_fp+2,f
  8022  074E  0DAB               	rlf	??_convert_to_fp+3,f
  8023  074F  0B89               	decfsz	9,f
  8024  0750  2F4B               	goto	u4235
  8025  0751  082B               	movf	??_convert_to_fp+3,w
  8026  0752  00B8               	movwf	convert_to_fp@res+3
  8027  0753  082A               	movf	??_convert_to_fp+2,w
  8028  0754  00B7               	movwf	convert_to_fp@res+2
  8029  0755  0829               	movf	??_convert_to_fp+1,w
  8030  0756  00B6               	movwf	convert_to_fp@res+1
  8031  0757  0828               	movf	??_convert_to_fp,w
  8032  0758  00B5               	movwf	convert_to_fp@res
  8033                           
  8034                           ;fixed_point.c: 24: unsigned short tmp_left = fract_part;
  8035  0759  0827               	movf	convert_to_fp@fract_part+1,w
  8036  075A  00B4               	movwf	convert_to_fp@tmp_left+1
  8037  075B  0826               	movf	convert_to_fp@fract_part,w
  8038  075C  00B3               	movwf	convert_to_fp@tmp_left
  8039                           
  8040                           ;fixed_point.c: 25: unsigned short res_fract = 0;
  8041  075D  01B0               	clrf	convert_to_fp@res_fract
  8042  075E  01B1               	clrf	convert_to_fp@res_fract+1
  8043                           
  8044                           ;fixed_point.c: 26: const unsigned short one = 1;
  8045                           ;fixed_point.c: 27: for (unsigned char i_bit = 0; i_bit < 16; i_bit++)
  8046  075F  01B2               	clrf	convert_to_fp@i_bit
  8047  0760  3010               	movlw	16
  8048  0761  0232               	subwf	convert_to_fp@i_bit,w
  8049  0762  1803               	btfsc	3,0
  8050  0763  2F96               	goto	l468
  8051  0764                     l4069:	
  8052                           
  8053                           ;fixed_point.c: 28: {
  8054                           ;fixed_point.c: 29: tmp_left = tmp_left << 1;
  8055  0764  3533               	lslf	convert_to_fp@tmp_left,w
  8056  0765  00B3               	movwf	convert_to_fp@tmp_left
  8057  0766  0D34               	rlf	convert_to_fp@tmp_left+1,w
  8058  0767  00B4               	movwf	convert_to_fp@tmp_left+1
  8059                           
  8060                           ;fixed_point.c: 30: if (tmp_left >= 10000)
  8061  0768  3027               	movlw	39
  8062  0769  0234               	subwf	convert_to_fp@tmp_left+1,w
  8063  076A  3010               	movlw	16
  8064  076B  1903               	skipnz
  8065  076C  0233               	subwf	convert_to_fp@tmp_left,w
  8066  076D  1C03               	skipc
  8067  076E  2F8E               	goto	l4075
  8068                           
  8069                           ;fixed_point.c: 31: {
  8070                           ;fixed_point.c: 32: res_fract = res_fract | one<<(16-i_bit-1);
  8071  076F  30E5               	movlw	low (convert_to_fp@one| (0+32768))
  8072  0770  0084               	movwf	4
  8073  0771  3087               	movlw	high (convert_to_fp@one| (0+32768))
  8074  0772  0085               	movwf	5
  8075  0773  3F00               	moviw [0]fsr0
  8076  0774  00A8               	movwf	??_convert_to_fp
  8077  0775  3F01               	moviw [1]fsr0
  8078  0776  00A9               	movwf	??_convert_to_fp+1
  8079  0777  0832               	movf	convert_to_fp@i_bit,w
  8080  0778  3E01               	addlw	1
  8081  0779  3AFF               	xorlw	255
  8082  077A  3E01               	addlw	1
  8083  077B  3E10               	addlw	16
  8084  077C  0A89               	incf	9,f
  8085  077D  2F80               	goto	u4264
  8086  077E                     u4265:	
  8087  077E  35A8               	lslf	??_convert_to_fp,f
  8088  077F  0DA9               	rlf	??_convert_to_fp+1,f
  8089  0780                     u4264:	
  8090  0780  0B89               	decfsz	9,f
  8091  0781  2F7E               	goto	u4265
  8092  0782  0830               	movf	convert_to_fp@res_fract,w
  8093  0783  0428               	iorwf	??_convert_to_fp,w
  8094  0784  00B0               	movwf	convert_to_fp@res_fract
  8095  0785  0831               	movf	convert_to_fp@res_fract+1,w
  8096  0786  0429               	iorwf	??_convert_to_fp+1,w
  8097  0787  00B1               	movwf	convert_to_fp@res_fract+1
  8098                           
  8099                           ;fixed_point.c: 33: tmp_left = tmp_left - 10000;
  8100  0788  0833               	movf	convert_to_fp@tmp_left,w
  8101  0789  3EF0               	addlw	240
  8102  078A  00B3               	movwf	convert_to_fp@tmp_left
  8103  078B  30D8               	movlw	216
  8104  078C  3D34               	addwfc	convert_to_fp@tmp_left+1,w
  8105  078D  00B4               	movwf	convert_to_fp@tmp_left+1
  8106  078E                     l4075:	
  8107  078E  3001               	movlw	1
  8108  078F  00A8               	movwf	??_convert_to_fp
  8109  0790  0828               	movf	??_convert_to_fp,w
  8110  0791  07B2               	addwf	convert_to_fp@i_bit,f
  8111  0792  3010               	movlw	16
  8112  0793  0232               	subwf	convert_to_fp@i_bit,w
  8113  0794  1C03               	skipc
  8114  0795  2F64               	goto	l4069
  8115  0796                     l468:	
  8116                           
  8117                           ;fixed_point.c: 34: }
  8118                           ;fixed_point.c: 35: }
  8119                           ;fixed_point.c: 37: if (res < 0)
  8120  0796  1FB8               	btfss	convert_to_fp@res+3,7
  8121  0797  2FB2               	goto	l4081
  8122                           
  8123                           ;fixed_point.c: 38: res = res - res_fract;
  8124  0798  0835               	movf	convert_to_fp@res,w
  8125  0799  00A8               	movwf	??_convert_to_fp
  8126  079A  0836               	movf	convert_to_fp@res+1,w
  8127  079B  00A9               	movwf	??_convert_to_fp+1
  8128  079C  0837               	movf	convert_to_fp@res+2,w
  8129  079D  00AA               	movwf	??_convert_to_fp+2
  8130  079E  0838               	movf	convert_to_fp@res+3,w
  8131  079F  00AB               	movwf	??_convert_to_fp+3
  8132  07A0  0830               	movf	convert_to_fp@res_fract,w
  8133  07A1  00AC               	movwf	??_convert_to_fp+4
  8134  07A2  0831               	movf	convert_to_fp@res_fract+1,w
  8135  07A3  00AD               	movwf	??_convert_to_fp+5
  8136  07A4  01AE               	clrf	??_convert_to_fp+6
  8137  07A5  01AF               	clrf	??_convert_to_fp+7
  8138  07A6  09AC               	comf	??_convert_to_fp+4,f
  8139  07A7  09AD               	comf	??_convert_to_fp+5,f
  8140  07A8  09AE               	comf	??_convert_to_fp+6,f
  8141  07A9  09AF               	comf	??_convert_to_fp+7,f
  8142  07AA  0AAC               	incf	??_convert_to_fp+4,f
  8143  07AB  1903               	skipnz
  8144  07AC  0AAD               	incf	??_convert_to_fp+5,f
  8145  07AD  1903               	skipnz
  8146  07AE  0AAE               	incf	??_convert_to_fp+6,f
  8147  07AF  1903               	skipnz
  8148  07B0  0AAF               	incf	??_convert_to_fp+7,f
  8149  07B1  2FC0               	goto	L9
  8150  07B2                     l4081:	
  8151                           
  8152                           ;fixed_point.c: 39: else
  8153                           ;fixed_point.c: 40: res = res + res_fract;
  8154  07B2  0835               	movf	convert_to_fp@res,w
  8155  07B3  00A8               	movwf	??_convert_to_fp
  8156  07B4  0836               	movf	convert_to_fp@res+1,w
  8157  07B5  00A9               	movwf	??_convert_to_fp+1
  8158  07B6  0837               	movf	convert_to_fp@res+2,w
  8159  07B7  00AA               	movwf	??_convert_to_fp+2
  8160  07B8  0838               	movf	convert_to_fp@res+3,w
  8161  07B9  00AB               	movwf	??_convert_to_fp+3
  8162  07BA  0830               	movf	convert_to_fp@res_fract,w
  8163  07BB  00AC               	movwf	??_convert_to_fp+4
  8164  07BC  0831               	movf	convert_to_fp@res_fract+1,w
  8165  07BD  00AD               	movwf	??_convert_to_fp+5
  8166  07BE  01AE               	clrf	??_convert_to_fp+6
  8167  07BF  01AF               	clrf	??_convert_to_fp+7
  8168  07C0                     L9:	
  8169  07C0  082C               	movf	??_convert_to_fp+4,w
  8170  07C1  07A8               	addwf	??_convert_to_fp,f
  8171  07C2  082D               	movf	??_convert_to_fp+5,w
  8172  07C3  3DA9               	addwfc	??_convert_to_fp+1,f
  8173  07C4  082E               	movf	??_convert_to_fp+6,w
  8174  07C5  3DAA               	addwfc	??_convert_to_fp+2,f
  8175  07C6  082F               	movf	??_convert_to_fp+7,w
  8176  07C7  3DAB               	addwfc	??_convert_to_fp+3,f
  8177  07C8  082B               	movf	??_convert_to_fp+3,w
  8178  07C9  00B8               	movwf	convert_to_fp@res+3
  8179  07CA  082A               	movf	??_convert_to_fp+2,w
  8180  07CB  00B7               	movwf	convert_to_fp@res+2
  8181  07CC  0829               	movf	??_convert_to_fp+1,w
  8182  07CD  00B6               	movwf	convert_to_fp@res+1
  8183  07CE  0828               	movf	??_convert_to_fp,w
  8184  07CF  00B5               	movwf	convert_to_fp@res
  8185                           
  8186                           ;fixed_point.c: 41: return res;
  8187  07D0  0838               	movf	convert_to_fp@res+3,w
  8188  07D1  00A7               	movwf	?_convert_to_fp+3
  8189  07D2  0837               	movf	convert_to_fp@res+2,w
  8190  07D3  00A6               	movwf	?_convert_to_fp+2
  8191  07D4  0836               	movf	convert_to_fp@res+1,w
  8192  07D5  00A5               	movwf	?_convert_to_fp+1
  8193  07D6  0835               	movf	convert_to_fp@res,w
  8194  07D7  00A4               	movwf	?_convert_to_fp
  8195  07D8  0008               	return
  8196  07D9                     __end_of_convert_to_fp:	
  8197                           
  8198                           	psect	text26
  8199  0A54                     __ptext26:	
  8200 ;; *************** function ___wmul *****************
  8201 ;; Defined at:
  8202 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8205 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  product         2    4[COMMON] unsigned int 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  2    0[BANK0 ] unsigned int 
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8217 ;;      Params:         0       4       0       0       0       0
  8218 ;;      Locals:         2       0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0
  8220 ;;      Totals:         2       4       0       0       0       0
  8221 ;;Total ram usage:        6 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    6
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_main
  8228 ;;		_GPS_read_speed
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function ___wmul
  8234  0A54                     ___wmul:	
  8235                           
  8236                           ;incstack = 0
  8237                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8238  0A54  01F4               	clrf	___wmul@product
  8239  0A55  01F5               	clrf	___wmul@product+1
  8240  0A56                     l4093:	
  8241  0A56  0020               	movlb	0	; select bank0
  8242  0A57  1C20               	btfss	___wmul@multiplier,0
  8243  0A58  2A5D               	goto	l811
  8244  0A59  0822               	movf	___wmul@multiplicand,w
  8245  0A5A  07F4               	addwf	___wmul@product,f
  8246  0A5B  0823               	movf	___wmul@multiplicand+1,w
  8247  0A5C  3DF5               	addwfc	___wmul@product+1,f
  8248  0A5D                     l811:	
  8249  0A5D  3001               	movlw	1
  8250  0A5E                     u4315:	
  8251  0A5E  35A2               	lslf	___wmul@multiplicand,f
  8252  0A5F  0DA3               	rlf	___wmul@multiplicand+1,f
  8253  0A60  0B89               	decfsz	9,f
  8254  0A61  2A5E               	goto	u4315
  8255  0A62  3001               	movlw	1
  8256  0A63                     u4325:	
  8257  0A63  36A1               	lsrf	___wmul@multiplier+1,f
  8258  0A64  0CA0               	rrf	___wmul@multiplier,f
  8259  0A65  0B89               	decfsz	9,f
  8260  0A66  2A63               	goto	u4325
  8261  0A67  0820               	movf	___wmul@multiplier,w
  8262  0A68  0421               	iorwf	___wmul@multiplier+1,w
  8263  0A69  1D03               	btfss	3,2
  8264  0A6A  2A56               	goto	l4093
  8265  0A6B  0875               	movf	___wmul@product+1,w
  8266  0A6C  00A1               	movwf	?___wmul+1
  8267  0A6D  0874               	movf	___wmul@product,w
  8268  0A6E  00A0               	movwf	?___wmul
  8269  0A6F  0008               	return
  8270  0A70                     __end_of___wmul:	
  8271                           
  8272                           	psect	text27
  8273  0AE3                     __ptext27:	
  8274 ;; *************** function _EUSART_Read *****************
  8275 ;; Defined at:
  8276 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;		None
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;  readValue       1    5[COMMON] unsigned char 
  8281 ;; Return value:  Size  Location     Type
  8282 ;;                  1    wreg      unsigned char 
  8283 ;; Registers used:
  8284 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8290 ;;      Params:         0       0       0       0       0       0
  8291 ;;      Locals:         1       0       0       0       0       0
  8292 ;;      Temps:          1       0       0       0       0       0
  8293 ;;      Totals:         2       0       0       0       0       0
  8294 ;;Total ram usage:        2 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    6
  8297 ;; This function calls:
  8298 ;;		Nothing
  8299 ;; This function is called by:
  8300 ;;		_GPS_read_speed
  8301 ;;		_getch
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function _EUSART_Read
  8307  0AE3                     _EUSART_Read:	
  8308                           
  8309                           ;eusart.c: 114: uint8_t readValue = 0;
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8313  0AE3  01F5               	clrf	EUSART_Read@readValue
  8314                           
  8315                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  8316  0AE4  0023               	movlb	3	; select bank3
  8317  0AE5  169D               	bsf	29,5	;volatile
  8318  0AE6                     l3957:	
  8319                           ;eusart.c: 120: {
  8320                           
  8321                           ;eusart.c: 119: while(0 == eusartRxCount)
  8322                           
  8323  0AE6  0878               	movf	_eusartRxCount,w	;volatile
  8324  0AE7  1903               	btfsc	3,2
  8325  0AE8  2AE6               	goto	l3957
  8326                           
  8327                           ;eusart.c: 121: }
  8328                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  8329  0AE9  0021               	movlb	1	; select bank1
  8330  0AEA  1291               	bcf	17,5	;volatile
  8331                           
  8332                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  8333  0AEB  0020               	movlb	0	; select bank0
  8334  0AEC  0857               	movf	_eusartRxTail,w
  8335  0AED  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8336  0AEE  0086               	movwf	6
  8337  0AEF  0187               	clrf	7
  8338  0AF0  0801               	movf	1,w
  8339  0AF1  00F4               	movwf	??_EUSART_Read
  8340  0AF2  0874               	movf	??_EUSART_Read,w
  8341  0AF3  00F5               	movwf	EUSART_Read@readValue
  8342  0AF4  3001               	movlw	1
  8343  0AF5  00F4               	movwf	??_EUSART_Read
  8344  0AF6  0874               	movf	??_EUSART_Read,w
  8345  0AF7  07D7               	addwf	_eusartRxTail,f
  8346                           
  8347                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8348  0AF8  3008               	movlw	8
  8349  0AF9  0257               	subwf	_eusartRxTail,w
  8350  0AFA  1803               	btfsc	3,0
  8351                           
  8352                           ;eusart.c: 127: {
  8353                           ;eusart.c: 128: eusartRxTail = 0;
  8354  0AFB  01D7               	clrf	_eusartRxTail
  8355                           
  8356                           ;eusart.c: 129: }
  8357                           ;eusart.c: 130: eusartRxCount--;
  8358  0AFC  3001               	movlw	1
  8359  0AFD  02F8               	subwf	_eusartRxCount,f	;volatile
  8360                           
  8361                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  8362  0AFE  0021               	movlb	1	; select bank1
  8363  0AFF  1691               	bsf	17,5	;volatile
  8364                           
  8365                           ;eusart.c: 133: return readValue;
  8366  0B00  0875               	movf	EUSART_Read@readValue,w
  8367  0B01  0008               	return
  8368  0B02                     __end_of_EUSART_Read:	
  8369                           
  8370                           	psect	text28
  8371  0B9C                     __ptext28:	
  8372 ;; *************** function _GPS_Initialize *****************
  8373 ;; Defined at:
  8374 ;;		line 12 in file "GPS.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;		None
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;  __delay_tmp     1   11[BANK0 ] unsigned char 
  8379 ;; Return value:  Size  Location     Type
  8380 ;;                  1    wreg      void 
  8381 ;; Registers used:
  8382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8383 ;; Tracked objects:
  8384 ;;		On entry : 0/0
  8385 ;;		On exit  : 0/0
  8386 ;;		Unchanged: 0/0
  8387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8388 ;;      Params:         0       0       0       0       0       0
  8389 ;;      Locals:         0       1       0       0       0       0
  8390 ;;      Temps:          0       3       0       0       0       0
  8391 ;;      Totals:         0       4       0       0       0       0
  8392 ;;Total ram usage:        4 bytes
  8393 ;; Hardware stack levels used:    1
  8394 ;; Hardware stack levels required when called:    9
  8395 ;; This function calls:
  8396 ;;		_printf
  8397 ;; This function is called by:
  8398 ;;		_main
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _GPS_Initialize
  8404  0B9C                     _GPS_Initialize:	
  8405                           
  8406                           ;GPS.c: 14: for(unsigned char __delay_tmp=0;__delay_tmp<(10*1);__delay_tmp++){_delay((un
      +                          signed long)((100)*(32000000/4000.0)));};
  8407                           
  8408                           ;incstack = 0
  8409                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8410  0B9C  0020               	movlb	0	; select bank0
  8411  0B9D  01AB               	clrf	GPS_Initialize@__delay_tmp
  8412  0B9E  300A               	movlw	10
  8413  0B9F  022B               	subwf	GPS_Initialize@__delay_tmp,w
  8414  0BA0  1803               	btfsc	3,0
  8415  0BA1  2BB7               	goto	l4371
  8416  0BA2                     l4365:	
  8417  0BA2  3005               	movlw	5
  8418  0BA3  00AA               	movwf	??_GPS_Initialize+2
  8419  0BA4  300F               	movlw	15
  8420  0BA5  00A9               	movwf	??_GPS_Initialize+1
  8421  0BA6  30F4               	movlw	244
  8422  0BA7  00A8               	movwf	??_GPS_Initialize
  8423  0BA8                     u5967:	
  8424  0BA8  0BA8               	decfsz	??_GPS_Initialize,f
  8425  0BA9  2BA8               	goto	u5967
  8426  0BAA  0BA9               	decfsz	??_GPS_Initialize+1,f
  8427  0BAB  2BA8               	goto	u5967
  8428  0BAC  0BAA               	decfsz	??_GPS_Initialize+2,f
  8429  0BAD  2BA8               	goto	u5967
  8430  0BAE  3001               	movlw	1
  8431  0BAF  0020               	movlb	0	; select bank0
  8432  0BB0  00A8               	movwf	??_GPS_Initialize
  8433  0BB1  0828               	movf	??_GPS_Initialize,w
  8434  0BB2  07AB               	addwf	GPS_Initialize@__delay_tmp,f
  8435  0BB3  300A               	movlw	10
  8436  0BB4  022B               	subwf	GPS_Initialize@__delay_tmp,w
  8437  0BB5  1C03               	skipc
  8438  0BB6  2BA2               	goto	l4365
  8439  0BB7                     l4371:	
  8440                           
  8441                           ;GPS.c: 16: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  8442  0BB7  30E7               	movlw	low (STR_1| (0+32768))
  8443  0BB8  00A1               	movwf	printf@f
  8444  0BB9  3087               	movlw	high (STR_1| (0+32768))
  8445  0BBA  00A2               	movwf	printf@f+1
  8446  0BBB  318A  22A9  318B   	fcall	_printf
  8447                           
  8448                           ;GPS.c: 17: _delay((unsigned long)((100)*(32000000/4000.0)));
  8449  0BBE  3005               	movlw	5
  8450  0BBF  0020               	movlb	0	; select bank0
  8451  0BC0  00AA               	movwf	??_GPS_Initialize+2
  8452  0BC1  300F               	movlw	15
  8453  0BC2  00A9               	movwf	??_GPS_Initialize+1
  8454  0BC3  30F4               	movlw	244
  8455  0BC4  00A8               	movwf	??_GPS_Initialize
  8456  0BC5                     u5977:	
  8457  0BC5  0BA8               	decfsz	??_GPS_Initialize,f
  8458  0BC6  2BC5               	goto	u5977
  8459  0BC7  0BA9               	decfsz	??_GPS_Initialize+1,f
  8460  0BC8  2BC5               	goto	u5977
  8461  0BC9  0BAA               	decfsz	??_GPS_Initialize+2,f
  8462  0BCA  2BC5               	goto	u5977
  8463                           
  8464                           ;GPS.c: 19: printf("$PMTK220,100*2F\r\n");
  8465  0BCB  301B               	movlw	low (STR_2| (0+32768))
  8466  0BCC  0020               	movlb	0	; select bank0
  8467  0BCD  00A1               	movwf	printf@f
  8468  0BCE  3088               	movlw	high (STR_2| (0+32768))
  8469  0BCF  00A2               	movwf	printf@f+1
  8470  0BD0  318A  22A9  318B   	fcall	_printf
  8471                           
  8472                           ;GPS.c: 20: _delay((unsigned long)((100)*(32000000/4000.0)));
  8473  0BD3  3005               	movlw	5
  8474  0BD4  0020               	movlb	0	; select bank0
  8475  0BD5  00AA               	movwf	??_GPS_Initialize+2
  8476  0BD6  300F               	movlw	15
  8477  0BD7  00A9               	movwf	??_GPS_Initialize+1
  8478  0BD8  30F4               	movlw	244
  8479  0BD9  00A8               	movwf	??_GPS_Initialize
  8480  0BDA                     u5987:	
  8481  0BDA  0BA8               	decfsz	??_GPS_Initialize,f
  8482  0BDB  2BDA               	goto	u5987
  8483  0BDC  0BA9               	decfsz	??_GPS_Initialize+1,f
  8484  0BDD  2BDA               	goto	u5987
  8485  0BDE  0BAA               	decfsz	??_GPS_Initialize+2,f
  8486  0BDF  2BDA               	goto	u5987
  8487  0BE0  0008               	return
  8488  0BE1                     __end_of_GPS_Initialize:	
  8489                           
  8490                           	psect	text29
  8491  0AA9                     __ptext29:	
  8492 ;; *************** function _printf *****************
  8493 ;; Defined at:
  8494 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  8497 ;;		 -> STR_2(18), STR_1(52), 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  tmpval          4    0        struct .
  8500 ;;  cp              2    0        PTR const unsigned char 
  8501 ;;  len             2    0        unsigned int 
  8502 ;;  val             2    0        unsigned int 
  8503 ;;  c               1    7[BANK0 ] char 
  8504 ;;  ap              1    6[BANK0 ] PTR void [1]
  8505 ;;		 -> ?_printf(2), 
  8506 ;;  flag            1    0        unsigned char 
  8507 ;;  prec            1    0        char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  2    1[BANK0 ] int 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8517 ;;      Params:         0       2       0       0       0       0
  8518 ;;      Locals:         0       2       0       0       0       0
  8519 ;;      Temps:          0       3       0       0       0       0
  8520 ;;      Totals:         0       7       0       0       0       0
  8521 ;;Total ram usage:        7 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    8
  8524 ;; This function calls:
  8525 ;;		_putch
  8526 ;; This function is called by:
  8527 ;;		_GPS_Initialize
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           
  8532                           ;psect for function _printf
  8533  0AA9                     _printf:	
  8534                           
  8535                           ;doprnt.c: 466: va_list ap;
  8536                           ;doprnt.c: 499: signed char c;
  8537                           ;doprnt.c: 506: signed char prec;
  8538                           ;doprnt.c: 508: unsigned char flag;
  8539                           ;doprnt.c: 523: union {
  8540                           ;doprnt.c: 524: unsigned long vd;
  8541                           ;doprnt.c: 525: double integ;
  8542                           ;doprnt.c: 526: } tmpval;
  8543                           ;doprnt.c: 528: unsigned int val;
  8544                           ;doprnt.c: 529: unsigned len;
  8545                           ;doprnt.c: 530: const char * cp;
  8546                           ;doprnt.c: 533: *ap = __va_start();
  8547                           
  8548                           ;incstack = 0
  8549                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8550  0AA9  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8551  0AAA  0020               	movlb	0	; select bank0
  8552  0AAB  00A3               	movwf	??_printf
  8553  0AAC  0823               	movf	??_printf,w
  8554  0AAD  00A6               	movwf	printf@ap
  8555  0AAE                     l4089:	
  8556                           ;doprnt.c: 543: }
  8557                           ;doprnt.c: 1422: {
  8558                           
  8559                           ;doprnt.c: 542: continue;
  8560                           
  8561                           ;doprnt.c: 536: while(c = *f++) {
  8562                           
  8563  0AAE  0020               	movlb	0	; select bank0
  8564  0AAF  0822               	movf	printf@f+1,w
  8565  0AB0  00A4               	movwf	??_printf+1
  8566  0AB1  0821               	movf	printf@f,w
  8567  0AB2  00A3               	movwf	??_printf
  8568  0AB3  0AA1               	incf	printf@f,f
  8569  0AB4  1903               	skipnz
  8570  0AB5  0AA2               	incf	printf@f+1,f
  8571  0AB6  0823               	movf	??_printf,w
  8572  0AB7  0084               	movwf	4
  8573  0AB8  0824               	movf	??_printf+1,w
  8574  0AB9  0085               	movwf	5
  8575  0ABA  0800               	movf	0,w	;code access
  8576  0ABB  00A5               	movwf	??_printf+2
  8577  0ABC  0825               	movf	??_printf+2,w
  8578  0ABD  00A7               	movwf	printf@c
  8579  0ABE  0827               	movf	printf@c,w
  8580  0ABF  1903               	btfsc	3,2
  8581  0AC0  0008               	return
  8582                           
  8583                           ;doprnt.c: 540: {
  8584                           ;doprnt.c: 541: (putch(c) );
  8585  0AC1  0827               	movf	printf@c,w
  8586  0AC2  3189  215C  318A   	fcall	_putch
  8587  0AC5  2AAE               	goto	l4089
  8588  0AC6                     __end_of_printf:	
  8589                           ;doprnt.c: 1469: }
  8590                           ;doprnt.c: 1533: }
  8591                           ;doprnt.c: 1540: return 0;
  8592                           ;	Return value of _printf is never used
  8593                           
  8594                           
  8595                           	psect	text30
  8596  095C                     __ptext30:	
  8597 ;; *************** function _putch *****************
  8598 ;; Defined at:
  8599 ;;		line 164 in file "mcc_generated_files/eusart.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;  txData          1    wreg     unsigned char 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  txData          1    0[BANK0 ] unsigned char 
  8604 ;; Return value:  Size  Location     Type
  8605 ;;                  1    wreg      void 
  8606 ;; Registers used:
  8607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8613 ;;      Params:         0       0       0       0       0       0
  8614 ;;      Locals:         0       1       0       0       0       0
  8615 ;;      Temps:          0       0       0       0       0       0
  8616 ;;      Totals:         0       1       0       0       0       0
  8617 ;;Total ram usage:        1 bytes
  8618 ;; Hardware stack levels used:    1
  8619 ;; Hardware stack levels required when called:    7
  8620 ;; This function calls:
  8621 ;;		_EUSART_Write
  8622 ;; This function is called by:
  8623 ;;		_printf
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _putch
  8629  095C                     _putch:	
  8630                           
  8631                           ;incstack = 0
  8632                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8633                           ;putch@txData stored from wreg
  8634  095C  0020               	movlb	0	; select bank0
  8635  095D  00A0               	movwf	putch@txData
  8636                           
  8637                           ;eusart.c: 166: EUSART_Write(txData);
  8638  095E  0820               	movf	putch@txData,w
  8639  095F  318B  2323         	fcall	_EUSART_Write
  8640  0961  0008               	return
  8641  0962                     __end_of_putch:	
  8642                           
  8643                           	psect	text31
  8644  0B23                     __ptext31:	
  8645 ;; *************** function _EUSART_Write *****************
  8646 ;; Defined at:
  8647 ;;		line 136 in file "mcc_generated_files/eusart.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  txData          1    wreg     unsigned char 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  txData          1    5[COMMON] unsigned char 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  1    wreg      void 
  8654 ;; Registers used:
  8655 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8661 ;;      Params:         0       0       0       0       0       0
  8662 ;;      Locals:         1       0       0       0       0       0
  8663 ;;      Temps:          1       0       0       0       0       0
  8664 ;;      Totals:         2       0       0       0       0       0
  8665 ;;Total ram usage:        2 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    6
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_putch
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _EUSART_Write
  8677  0B23                     _EUSART_Write:	
  8678                           
  8679                           ;incstack = 0
  8680                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8681                           ;EUSART_Write@txData stored from wreg
  8682  0B23  00F5               	movwf	EUSART_Write@txData
  8683  0B24                     l3835:	
  8684                           ;eusart.c: 139: {
  8685                           
  8686                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  8687                           
  8688  0B24  0020               	movlb	0	; select bank0
  8689  0B25  0858               	movf	_eusartTxBufferRemaining,w	;volatile
  8690  0B26  1903               	btfsc	3,2
  8691  0B27  2B24               	goto	l3835
  8692                           
  8693                           ;eusart.c: 140: }
  8694                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  8695  0B28  0021               	movlb	1	; select bank1
  8696  0B29  1A11               	btfsc	17,4	;volatile
  8697  0B2A  2B2F               	goto	l171
  8698                           
  8699                           ;eusart.c: 143: {
  8700                           ;eusart.c: 144: TXREG = txData;
  8701  0B2B  0875               	movf	EUSART_Write@txData,w
  8702  0B2C  0023               	movlb	3	; select bank3
  8703  0B2D  009A               	movwf	26	;volatile
  8704                           
  8705                           ;eusart.c: 145: }
  8706  0B2E  2B43               	goto	l3849
  8707  0B2F                     l171:	
  8708                           
  8709                           ;eusart.c: 146: else
  8710                           ;eusart.c: 147: {
  8711                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  8712  0B2F  1211               	bcf	17,4	;volatile
  8713                           
  8714                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  8715  0B30  0875               	movf	EUSART_Write@txData,w
  8716  0B31  00F4               	movwf	??_EUSART_Write
  8717  0B32  0020               	movlb	0	; select bank0
  8718  0B33  0859               	movf	_eusartTxHead,w
  8719  0B34  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8720  0B35  0086               	movwf	6
  8721  0B36  0187               	clrf	7
  8722  0B37  0874               	movf	??_EUSART_Write,w
  8723  0B38  0081               	movwf	1
  8724  0B39  3001               	movlw	1
  8725  0B3A  00F4               	movwf	??_EUSART_Write
  8726  0B3B  0874               	movf	??_EUSART_Write,w
  8727  0B3C  07D9               	addwf	_eusartTxHead,f
  8728                           
  8729                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8730  0B3D  3008               	movlw	8
  8731  0B3E  0259               	subwf	_eusartTxHead,w
  8732  0B3F  1803               	btfsc	3,0
  8733                           
  8734                           ;eusart.c: 151: {
  8735                           ;eusart.c: 152: eusartTxHead = 0;
  8736  0B40  01D9               	clrf	_eusartTxHead
  8737                           
  8738                           ;eusart.c: 153: }
  8739                           ;eusart.c: 154: eusartTxBufferRemaining--;
  8740  0B41  3001               	movlw	1
  8741  0B42  02D8               	subwf	_eusartTxBufferRemaining,f	;volatile
  8742  0B43                     l3849:	
  8743                           
  8744                           ;eusart.c: 155: }
  8745                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  8746  0B43  0021               	movlb	1	; select bank1
  8747  0B44  1611               	bsf	17,4	;volatile
  8748  0B45  0008               	return
  8749  0B46                     __end_of_EUSART_Write:	
  8750                           
  8751                           	psect	intentry
  8752  0004                     __pintentry:	
  8753 ;; *************** function _INTERRUPT_InterruptManager *****************
  8754 ;; Defined at:
  8755 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;		None
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      void 
  8762 ;; Registers used:
  8763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8769 ;;      Params:         0       0       0       0       0       0
  8770 ;;      Locals:         0       0       0       0       0       0
  8771 ;;      Temps:          1       0       0       0       0       0
  8772 ;;      Totals:         1       0       0       0       0       0
  8773 ;;Total ram usage:        1 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    5
  8776 ;; This function calls:
  8777 ;;		_EUSART_Receive_ISR
  8778 ;;		_EUSART_Transmit_ISR
  8779 ;;		_TMR0_ISR
  8780 ;; This function is called by:
  8781 ;;		Interrupt level 1
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785  0004                     _INTERRUPT_InterruptManager:	
  8786                           
  8787                           ;incstack = 0
  8788  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8789                           
  8790                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8791  0005  3180               	pagesel	$
  8792  0006  0020               	movlb	0	; select bank0
  8793  0007  087F               	movf	127,w
  8794  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  8795                           
  8796                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  8797  0009  1A8B               	btfsc	11,5	;volatile
  8798  000A  1D0B               	btfss	11,2	;volatile
  8799  000B  280F               	goto	i1l3615
  8800                           
  8801                           ;interrupt_manager.c: 55: {
  8802                           ;interrupt_manager.c: 56: TMR0_ISR();
  8803  000C  3189  21F1  3180   	fcall	_TMR0_ISR
  8804  000F                     i1l3615:	
  8805                           
  8806                           ;interrupt_manager.c: 57: }
  8807                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  8808  000F  1F0B               	btfss	11,6	;volatile
  8809  0010  281A               	goto	i1l3623
  8810  0011  0021               	movlb	1	; select bank1
  8811  0012  1E11               	btfss	17,4	;volatile
  8812  0013  281A               	goto	i1l3623
  8813  0014  0020               	movlb	0	; select bank0
  8814  0015  1E11               	btfss	17,4	;volatile
  8815  0016  281A               	goto	i1l3623
  8816                           
  8817                           ;interrupt_manager.c: 59: {
  8818                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  8819  0017  318A  228C  3180   	fcall	_EUSART_Transmit_ISR
  8820  001A                     i1l3623:	
  8821                           
  8822                           ;interrupt_manager.c: 61: }
  8823                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  8824  001A  1F0B               	btfss	11,6	;volatile
  8825  001B  2824               	goto	i1l77
  8826  001C  0021               	movlb	1	; select bank1
  8827  001D  1E91               	btfss	17,5	;volatile
  8828  001E  2824               	goto	i1l77
  8829  001F  0020               	movlb	0	; select bank0
  8830  0020  1E91               	btfss	17,5	;volatile
  8831  0021  2824               	goto	i1l77
  8832                           
  8833                           ;interrupt_manager.c: 63: {
  8834                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  8835  0022  318A  221E         	fcall	_EUSART_Receive_ISR
  8836  0024                     i1l77:	
  8837                           ;interrupt_manager.c: 66: else
  8838                           ;interrupt_manager.c: 67: {
  8839                           
  8840                           ;interrupt_manager.c: 65: }
  8841                           
  8842  0024  0873               	movf	??_INTERRUPT_InterruptManager,w
  8843  0025  0020               	movlb	0	; select bank0
  8844  0026  00FF               	movwf	127
  8845  0027  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8846  0028  0009               	retfie
  8847  0029                     __end_of_INTERRUPT_InterruptManager:	
  8848                           
  8849                           	psect	text33
  8850  09F1                     __ptext33:	
  8851 ;; *************** function _TMR0_ISR *****************
  8852 ;; Defined at:
  8853 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;		None
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  1    wreg      void 
  8860 ;; Registers used:
  8861 ;;		wreg, status,2, status,0, pclath, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8867 ;;      Params:         0       0       0       0       0       0
  8868 ;;      Locals:         0       0       0       0       0       0
  8869 ;;      Temps:          0       0       0       0       0       0
  8870 ;;      Totals:         0       0       0       0       0       0
  8871 ;;Total ram usage:        0 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    4
  8874 ;; This function calls:
  8875 ;;		_TMR0_CallBack
  8876 ;; This function is called by:
  8877 ;;		_INTERRUPT_InterruptManager
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _TMR0_ISR
  8883  09F1                     _TMR0_ISR:	
  8884                           
  8885                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  8886                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  8887                           
  8888                           ;incstack = 0
  8889                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  8890  09F1  110B               	bcf	11,2	;volatile
  8891                           
  8892                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  8893  09F2  0879               	movf	_timer0ReloadVal,w	;volatile
  8894  09F3  0020               	movlb	0	; select bank0
  8895  09F4  0095               	movwf	21	;volatile
  8896                           
  8897                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  8898  09F5  3001               	movlw	1
  8899  09F6  0021               	movlb	1	; select bank1
  8900  09F7  07BB               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
  8901  09F8  3000               	movlw	0
  8902  09F9  3DBC               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
  8903  09FA  3000               	movlw	0
  8904  09FB  023C               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
  8905  09FC  3002               	movlw	2
  8906  09FD  1903               	skipnz
  8907  09FE  023B               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
  8908  09FF  1C03               	skipc
  8909  0A00  0008               	return
  8910                           
  8911                           ;tmr0.c: 119: {
  8912                           ;tmr0.c: 121: TMR0_CallBack();
  8913  0A01  3189  2180         	fcall	_TMR0_CallBack
  8914                           
  8915                           ;tmr0.c: 124: CountCallBack = 0;
  8916  0A03  0021               	movlb	1	; select bank1
  8917  0A04  01BB               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
  8918  0A05  01BC               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
  8919  0A06  0008               	return
  8920  0A07                     __end_of_TMR0_ISR:	
  8921                           
  8922                           	psect	text34
  8923  0980                     __ptext34:	
  8924 ;; *************** function _TMR0_CallBack *****************
  8925 ;; Defined at:
  8926 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, pclath, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8940 ;;      Params:         0       0       0       0       0       0
  8941 ;;      Locals:         0       0       0       0       0       0
  8942 ;;      Temps:          0       0       0       0       0       0
  8943 ;;      Totals:         0       0       0       0       0       0
  8944 ;;Total ram usage:        0 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    3
  8947 ;; This function calls:
  8948 ;;		Absolute function
  8949 ;;		_TMR0_DefaultInterruptHandler
  8950 ;;		_my10msTimerISR
  8951 ;; This function is called by:
  8952 ;;		_TMR0_ISR
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _TMR0_CallBack
  8958  0980                     _TMR0_CallBack:	
  8959                           
  8960                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  8964  0980  0021               	movlb	1	; select bank1
  8965  0981  083D               	movf	_TMR0_InterruptHandler^(0+128),w
  8966  0982  043E               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  8967  0983  1903               	btfsc	3,2
  8968  0984  0008               	return
  8969                           
  8970                           ;tmr0.c: 135: {
  8971                           ;tmr0.c: 136: TMR0_InterruptHandler();
  8972  0985  083E               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  8973  0986  008A               	movwf	10
  8974  0987  083D               	movf	_TMR0_InterruptHandler^(0+128),w
  8975  0988  000A               	callw
  8976  0989  3189               	pagesel	$
  8977  098A  0008               	return
  8978  098B                     __end_of_TMR0_CallBack:	
  8979                           
  8980                           	psect	text35
  8981  0003                     __ptext35:	
  8982 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  8983 ;; Defined at:
  8984 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  8985 ;; Parameters:    Size  Location     Type
  8986 ;;		None
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;		None
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      void 
  8991 ;; Registers used:
  8992 ;;		None
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8998 ;;      Params:         0       0       0       0       0       0
  8999 ;;      Locals:         0       0       0       0       0       0
  9000 ;;      Temps:          0       0       0       0       0       0
  9001 ;;      Totals:         0       0       0       0       0       0
  9002 ;;Total ram usage:        0 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; This function calls:
  9005 ;;		Nothing
  9006 ;; This function is called by:
  9007 ;;		_TMR0_Initialize
  9008 ;;		_TMR0_CallBack
  9009 ;; This function uses a non-reentrant model
  9010 ;;
  9011                           
  9012                           
  9013                           ;psect for function _TMR0_DefaultInterruptHandler
  9014  0003                     _TMR0_DefaultInterruptHandler:	
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  9018  0003  0008               	return
  9019  0004                     __end_of_TMR0_DefaultInterruptHandler:	
  9020                           
  9021                           	psect	text36
  9022  0956                     __ptext36:	
  9023 ;; *************** function _my10msTimerISR *****************
  9024 ;; Defined at:
  9025 ;;		line 386 in file "main.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;		None
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;		None
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, status,2, status,0, pclath, cstack
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9039 ;;      Params:         0       0       0       0       0       0
  9040 ;;      Locals:         0       0       0       0       0       0
  9041 ;;      Temps:          0       0       0       0       0       0
  9042 ;;      Totals:         0       0       0       0       0       0
  9043 ;;Total ram usage:        0 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    2
  9046 ;; This function calls:
  9047 ;;		_LED_update_loop
  9048 ;;		_button_update_loop
  9049 ;; This function is called by:
  9050 ;;		_main
  9051 ;;		_TMR0_CallBack
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           
  9056                           ;psect for function _my10msTimerISR
  9057  0956                     _my10msTimerISR:	
  9058                           
  9059                           ;main.c: 388: LED_update_loop();
  9060                           
  9061                           ;incstack = 0
  9062                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  9063  0956  318B  2346  3189   	fcall	_LED_update_loop
  9064                           
  9065                           ;main.c: 389: button_update_loop();
  9066  0959  318C  2482         	fcall	_button_update_loop
  9067  095B  0008               	return
  9068  095C                     __end_of_my10msTimerISR:	
  9069                           
  9070                           	psect	text37
  9071  0C82                     __ptext37:	
  9072 ;; *************** function _button_update_loop *****************
  9073 ;; Defined at:
  9074 ;;		line 89 in file "interact.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;		None
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;  current_stat    1    2[COMMON] unsigned char 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  1    wreg      void 
  9081 ;; Registers used:
  9082 ;;		wreg, status,2, status,0, pclath, cstack
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9088 ;;      Params:         0       0       0       0       0       0
  9089 ;;      Locals:         1       0       0       0       0       0
  9090 ;;      Temps:          1       0       0       0       0       0
  9091 ;;      Totals:         2       0       0       0       0       0
  9092 ;;Total ram usage:        2 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    1
  9095 ;; This function calls:
  9096 ;;		i1_get_button_state
  9097 ;; This function is called by:
  9098 ;;		_my10msTimerISR
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           
  9103                           ;psect for function _button_update_loop
  9104  0C82                     _button_update_loop:	
  9105                           
  9106                           ;interact.c: 91: unsigned char current_state = get_button_state();
  9107                           
  9108                           ;incstack = 0
  9109                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  9110  0C82  3189  218B  318C   	fcall	i1_get_button_state
  9111  0C85  00F1               	movwf	??_button_update_loop
  9112  0C86  0871               	movf	??_button_update_loop,w
  9113  0C87  00F2               	movwf	button_update_loop@current_state
  9114                           
  9115                           ;interact.c: 92: if (!m_button.push_confirmed)
  9116  0C88  0021               	movlb	1	; select bank1
  9117  0C89  0833               	movf	(_m_button^(0+128)+3),w	;volatile
  9118  0C8A  1D03               	btfss	3,2
  9119  0C8B  2CA6               	goto	i1l2659
  9120                           
  9121                           ;interact.c: 93: {
  9122                           ;interact.c: 95: if (current_state != m_button.last_state)
  9123  0C8C  0835               	movf	(_m_button^(0+128)+5),w	;volatile
  9124  0C8D  0672               	xorwf	button_update_loop@current_state,w
  9125  0C8E  1903               	skipnz
  9126  0C8F  2C96               	goto	i1l2651
  9127                           
  9128                           ;interact.c: 96: {
  9129                           ;interact.c: 97: m_button.count_pressed = 0;
  9130  0C90  01B1               	clrf	(_m_button^(0+128)+1)	;volatile
  9131                           
  9132                           ;interact.c: 98: m_button.last_state = current_state;
  9133  0C91  0872               	movf	button_update_loop@current_state,w
  9134  0C92  00F1               	movwf	??_button_update_loop
  9135  0C93  0871               	movf	??_button_update_loop,w
  9136  0C94  00B5               	movwf	(_m_button^(0+128)+5)	;volatile
  9137                           
  9138                           ;interact.c: 99: }
  9139  0C95  0008               	return
  9140  0C96                     i1l2651:	
  9141                           
  9142                           ;interact.c: 100: else if (m_button.last_state == 1)
  9143  0C96  0335               	decf	(_m_button^(0+128)+5),w	;volatile
  9144  0C97  1D03               	btfss	3,2
  9145  0C98  0008               	return
  9146                           
  9147                           ;interact.c: 101: {
  9148                           ;interact.c: 102: m_button.count_pressed++;
  9149  0C99  3001               	movlw	1
  9150  0C9A  00F1               	movwf	??_button_update_loop
  9151  0C9B  0871               	movf	??_button_update_loop,w
  9152  0C9C  07B1               	addwf	(_m_button^(0+128)+1),f	;volatile
  9153                           
  9154                           ;interact.c: 103: if (m_button.count_pressed > 5)
  9155  0C9D  3006               	movlw	6
  9156  0C9E  0231               	subwf	(_m_button^(0+128)+1),w	;volatile
  9157  0C9F  1C03               	skipc
  9158  0CA0  0008               	return
  9159                           
  9160                           ;interact.c: 104: m_button.push_confirmed = 1;
  9161  0CA1  3001               	movlw	1
  9162  0CA2  00F1               	movwf	??_button_update_loop
  9163  0CA3  0871               	movf	??_button_update_loop,w
  9164  0CA4  00B3               	movwf	(_m_button^(0+128)+3)	;volatile
  9165                           
  9166                           ;interact.c: 105: }
  9167                           ;interact.c: 106: }
  9168  0CA5  0008               	return
  9169  0CA6                     i1l2659:	
  9170                           
  9171                           ;interact.c: 107: else
  9172                           ;interact.c: 108: {
  9173                           ;interact.c: 109: if (current_state != m_button.last_state)
  9174  0CA6  0835               	movf	(_m_button^(0+128)+5),w	;volatile
  9175  0CA7  0672               	xorwf	button_update_loop@current_state,w
  9176  0CA8  1903               	skipnz
  9177  0CA9  2CB4               	goto	i1l2667
  9178                           
  9179                           ;interact.c: 110: {
  9180                           ;interact.c: 111: m_button.count_released = 0;
  9181  0CAA  01B2               	clrf	(_m_button^(0+128)+2)	;volatile
  9182                           
  9183                           ;interact.c: 112: m_button.last_state = current_state;
  9184  0CAB  0872               	movf	button_update_loop@current_state,w
  9185  0CAC  00F1               	movwf	??_button_update_loop
  9186  0CAD  0871               	movf	??_button_update_loop,w
  9187  0CAE  00B5               	movwf	(_m_button^(0+128)+5)	;volatile
  9188                           
  9189                           ;interact.c: 113: m_button.has_once_been_released = 1;
  9190  0CAF  3001               	movlw	1
  9191  0CB0  00F1               	movwf	??_button_update_loop
  9192  0CB1  0871               	movf	??_button_update_loop,w
  9193  0CB2  00B6               	movwf	(_m_button^(0+128)+6)	;volatile
  9194                           
  9195                           ;interact.c: 114: }
  9196  0CB3  0008               	return
  9197  0CB4                     i1l2667:	
  9198                           
  9199                           ;interact.c: 115: else if ((m_button.last_state == 1)&&(!m_button.has_once_been_released
      +                          ))
  9200  0CB4  0335               	decf	(_m_button^(0+128)+5),w	;volatile
  9201  0CB5  1D03               	btfss	3,2
  9202  0CB6  2CC7               	goto	i1l2677
  9203  0CB7  0836               	movf	(_m_button^(0+128)+6),w	;volatile
  9204  0CB8  1D03               	btfss	3,2
  9205  0CB9  2CC7               	goto	i1l2677
  9206                           
  9207                           ;interact.c: 116: {
  9208                           ;interact.c: 117: m_button.count_pressed++;
  9209  0CBA  3001               	movlw	1
  9210  0CBB  00F1               	movwf	??_button_update_loop
  9211  0CBC  0871               	movf	??_button_update_loop,w
  9212  0CBD  07B1               	addwf	(_m_button^(0+128)+1),f	;volatile
  9213                           
  9214                           ;interact.c: 118: if (m_button.count_pressed >= 100)
  9215  0CBE  3064               	movlw	100
  9216  0CBF  0231               	subwf	(_m_button^(0+128)+1),w	;volatile
  9217  0CC0  1C03               	skipc
  9218  0CC1  0008               	return
  9219                           
  9220                           ;interact.c: 119: m_button.confirmed_state = long_push;
  9221  0CC2  3002               	movlw	2
  9222  0CC3  00F1               	movwf	??_button_update_loop
  9223  0CC4  0871               	movf	??_button_update_loop,w
  9224  0CC5  00B0               	movwf	_m_button^(0+128)	;volatile
  9225                           
  9226                           ;interact.c: 120: }
  9227  0CC6  0008               	return
  9228  0CC7                     i1l2677:	
  9229                           
  9230                           ;interact.c: 121: else if (m_button.last_state == 0)
  9231  0CC7  0835               	movf	(_m_button^(0+128)+5),w	;volatile
  9232  0CC8  1D03               	btfss	3,2
  9233  0CC9  0008               	return
  9234                           
  9235                           ;interact.c: 122: {
  9236                           ;interact.c: 123: m_button.count_released++;
  9237  0CCA  3001               	movlw	1
  9238  0CCB  00F1               	movwf	??_button_update_loop
  9239  0CCC  0871               	movf	??_button_update_loop,w
  9240  0CCD  07B2               	addwf	(_m_button^(0+128)+2),f	;volatile
  9241                           
  9242                           ;interact.c: 124: if (m_button.count_released > 10)
  9243  0CCE  300B               	movlw	11
  9244  0CCF  0232               	subwf	(_m_button^(0+128)+2),w	;volatile
  9245  0CD0  1C03               	skipc
  9246  0CD1  0008               	return
  9247                           
  9248                           ;interact.c: 125: if (m_button.count_pressed >= 75)
  9249  0CD2  304B               	movlw	75
  9250  0CD3  0231               	subwf	(_m_button^(0+128)+1),w	;volatile
  9251  0CD4  1C03               	skipc
  9252  0CD5  2CDB               	goto	i1l2687
  9253                           
  9254                           ;interact.c: 126: m_button.confirmed_state = long_push;
  9255  0CD6  3002               	movlw	2
  9256  0CD7  00F1               	movwf	??_button_update_loop
  9257  0CD8  0871               	movf	??_button_update_loop,w
  9258  0CD9  00B0               	movwf	_m_button^(0+128)	;volatile
  9259  0CDA  0008               	return
  9260  0CDB                     i1l2687:	
  9261                           
  9262                           ;interact.c: 127: else
  9263                           ;interact.c: 128: m_button.confirmed_state = short_push;
  9264  0CDB  3001               	movlw	1
  9265  0CDC  00F1               	movwf	??_button_update_loop
  9266  0CDD  0871               	movf	??_button_update_loop,w
  9267  0CDE  00B0               	movwf	_m_button^(0+128)	;volatile
  9268  0CDF  0008               	return
  9269  0CE0                     __end_of_button_update_loop:	
  9270                           
  9271                           	psect	text38
  9272  098B                     __ptext38:	
  9273 ;; *************** function i1_get_button_state *****************
  9274 ;; Defined at:
  9275 ;;		line 69 in file "interact.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;  get_button_s    1    0[COMMON] unsigned char 
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      unsigned char 
  9282 ;; Registers used:
  9283 ;;		wreg, status,2, status,0
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9289 ;;      Params:         0       0       0       0       0       0
  9290 ;;      Locals:         1       0       0       0       0       0
  9291 ;;      Temps:          0       0       0       0       0       0
  9292 ;;      Totals:         1       0       0       0       0       0
  9293 ;;Total ram usage:        1 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; This function calls:
  9296 ;;		Nothing
  9297 ;; This function is called by:
  9298 ;;		_button_update_loop
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function i1_get_button_state
  9304  098B                     i1_get_button_state:	
  9305                           
  9306                           ;interact.c: 72: unsigned char state = PORTBbits.RB0;
  9307                           
  9308                           ;incstack = 0
  9309                           ; Regs used in i1_get_button_state: [wreg+status,2+status,0]
  9310  098B  3000               	movlw	0
  9311  098C  0020               	movlb	0	; select bank0
  9312  098D  180D               	btfsc	13,0	;volatile
  9313  098E  3001               	movlw	1
  9314  098F  00F0               	movwf	i1get_button_state@state
  9315                           
  9316                           ;interact.c: 73: if (state == 1)
  9317  0990  0370               	decf	i1get_button_state@state,w
  9318  0991  1D03               	btfss	3,2
  9319  0992  2995               	goto	i1l2593
  9320                           
  9321                           ;interact.c: 74: return 0;
  9322  0993  3000               	movlw	0
  9323  0994  0008               	return
  9324  0995                     i1l2593:	
  9325                           
  9326                           ;interact.c: 75: else return 1;
  9327  0995  3001               	movlw	1
  9328  0996  0008               	return
  9329  0997                     __end_ofi1_get_button_state:	
  9330                           
  9331                           	psect	text39
  9332  0B46                     __ptext39:	
  9333 ;; *************** function _LED_update_loop *****************
  9334 ;; Defined at:
  9335 ;;		line 41 in file "interact.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, status,0
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9349 ;;      Params:         0       0       0       0       0       0
  9350 ;;      Locals:         0       0       0       0       0       0
  9351 ;;      Temps:          1       0       0       0       0       0
  9352 ;;      Totals:         1       0       0       0       0       0
  9353 ;;Total ram usage:        1 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; This function calls:
  9356 ;;		Nothing
  9357 ;; This function is called by:
  9358 ;;		_my10msTimerISR
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           
  9363                           ;psect for function _LED_update_loop
  9364  0B46                     _LED_update_loop:	
  9365                           
  9366                           ;interact.c: 43: if (m_LED.state == manual_mode)
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  9370  0B46  3004               	movlw	4
  9371  0B47  0676               	xorwf	_m_LED,w	;volatile
  9372  0B48  1903               	btfsc	3,2
  9373  0B49  0008               	return
  9374                           
  9375                           ;interact.c: 45: else if (m_LED.state == slow_blinking)
  9376                           
  9377                           ;interact.c: 44: return;
  9378  0B4A  3002               	movlw	2
  9379  0B4B  0676               	xorwf	_m_LED,w	;volatile
  9380  0B4C  1D03               	btfss	3,2
  9381  0B4D  2B5B               	goto	i1l2631
  9382                           
  9383                           ;interact.c: 46: {
  9384                           ;interact.c: 47: m_LED.counter++;
  9385  0B4E  3001               	movlw	1
  9386  0B4F  00F0               	movwf	??_LED_update_loop
  9387  0B50  0870               	movf	??_LED_update_loop,w
  9388  0B51  07F7               	addwf	_m_LED+1,f	;volatile
  9389                           
  9390                           ;interact.c: 48: if (m_LED.counter >= 60)
  9391  0B52  303C               	movlw	60
  9392  0B53  0277               	subwf	_m_LED+1,w	;volatile
  9393  0B54  1C03               	skipc
  9394  0B55  0008               	return
  9395                           
  9396                           ;interact.c: 49: {
  9397                           ;interact.c: 50: m_LED.counter = 0;
  9398  0B56  01F7               	clrf	_m_LED+1	;volatile
  9399                           
  9400                           ;interact.c: 51: do { LATA2 = ~LATA2; } while(0);
  9401  0B57  3004               	movlw	4
  9402  0B58  0022               	movlb	2	; select bank2
  9403  0B59  068C               	xorwf	12,f
  9404                           
  9405                           ;interact.c: 52: }
  9406                           ;interact.c: 53: }
  9407  0B5A  0008               	return
  9408  0B5B                     i1l2631:	
  9409                           
  9410                           ;interact.c: 54: else if (m_LED.state == fast_blinking)
  9411  0B5B  3003               	movlw	3
  9412  0B5C  0676               	xorwf	_m_LED,w	;volatile
  9413  0B5D  1D03               	btfss	3,2
  9414  0B5E  0008               	return
  9415                           
  9416                           ;interact.c: 55: {
  9417                           ;interact.c: 56: m_LED.counter++;
  9418  0B5F  3001               	movlw	1
  9419  0B60  00F0               	movwf	??_LED_update_loop
  9420  0B61  0870               	movf	??_LED_update_loop,w
  9421  0B62  07F7               	addwf	_m_LED+1,f	;volatile
  9422                           
  9423                           ;interact.c: 57: if (m_LED.counter >= 15)
  9424  0B63  300F               	movlw	15
  9425  0B64  0277               	subwf	_m_LED+1,w	;volatile
  9426  0B65  1C03               	skipc
  9427  0B66  0008               	return
  9428                           
  9429                           ;interact.c: 58: {
  9430                           ;interact.c: 59: m_LED.counter = 0;
  9431  0B67  01F7               	clrf	_m_LED+1	;volatile
  9432                           
  9433                           ;interact.c: 60: do { LATA2 = ~LATA2; } while(0);
  9434  0B68  3004               	movlw	4
  9435  0B69  0022               	movlb	2	; select bank2
  9436  0B6A  068C               	xorwf	12,f
  9437  0B6B  0008               	return
  9438  0B6C                     __end_of_LED_update_loop:	
  9439                           
  9440                           	psect	text40
  9441  0A8C                     __ptext40:	
  9442 ;; *************** function _EUSART_Transmit_ISR *****************
  9443 ;; Defined at:
  9444 ;;		line 169 in file "mcc_generated_files/eusart.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;		None
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  1    wreg      void 
  9451 ;; Registers used:
  9452 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9453 ;; Tracked objects:
  9454 ;;		On entry : 0/0
  9455 ;;		On exit  : 0/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9458 ;;      Params:         0       0       0       0       0       0
  9459 ;;      Locals:         0       0       0       0       0       0
  9460 ;;      Temps:          1       0       0       0       0       0
  9461 ;;      Totals:         1       0       0       0       0       0
  9462 ;;Total ram usage:        1 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_INTERRUPT_InterruptManager
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           
  9472                           ;psect for function _EUSART_Transmit_ISR
  9473  0A8C                     _EUSART_Transmit_ISR:	
  9474                           
  9475                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  9476                           
  9477                           ;incstack = 0
  9478                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9479  0A8C  3008               	movlw	8
  9480  0A8D  0020               	movlb	0	; select bank0
  9481  0A8E  0258               	subwf	_eusartTxBufferRemaining,w	;volatile
  9482  0A8F  1803               	skipnc
  9483  0A90  2AA6               	goto	i1l183
  9484                           
  9485                           ;eusart.c: 174: {
  9486                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  9487  0A91  085A               	movf	_eusartTxTail,w
  9488  0A92  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  9489  0A93  0086               	movwf	6
  9490  0A94  0187               	clrf	7
  9491  0A95  0801               	movf	1,w
  9492  0A96  0023               	movlb	3	; select bank3
  9493  0A97  009A               	movwf	26	;volatile
  9494  0A98  3001               	movlw	1
  9495  0A99  00F0               	movwf	??_EUSART_Transmit_ISR
  9496  0A9A  0870               	movf	??_EUSART_Transmit_ISR,w
  9497  0A9B  0020               	movlb	0	; select bank0
  9498  0A9C  07DA               	addwf	_eusartTxTail,f
  9499                           
  9500                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  9501  0A9D  3008               	movlw	8
  9502  0A9E  025A               	subwf	_eusartTxTail,w
  9503  0A9F  1803               	btfsc	3,0
  9504                           
  9505                           ;eusart.c: 177: {
  9506                           ;eusart.c: 178: eusartTxTail = 0;
  9507  0AA0  01DA               	clrf	_eusartTxTail
  9508                           
  9509                           ;eusart.c: 179: }
  9510                           ;eusart.c: 180: eusartTxBufferRemaining++;
  9511  0AA1  3001               	movlw	1
  9512  0AA2  00F0               	movwf	??_EUSART_Transmit_ISR
  9513  0AA3  0870               	movf	??_EUSART_Transmit_ISR,w
  9514  0AA4  07D8               	addwf	_eusartTxBufferRemaining,f	;volatile
  9515                           
  9516                           ;eusart.c: 181: }
  9517  0AA5  0008               	return
  9518  0AA6                     i1l183:	
  9519                           
  9520                           ;eusart.c: 182: else
  9521                           ;eusart.c: 183: {
  9522                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  9523  0AA6  0021               	movlb	1	; select bank1
  9524  0AA7  1211               	bcf	17,4	;volatile
  9525  0AA8  0008               	return
  9526  0AA9                     __end_of_EUSART_Transmit_ISR:	
  9527                           
  9528                           	psect	text41
  9529  0A1E                     __ptext41:	
  9530 ;; *************** function _EUSART_Receive_ISR *****************
  9531 ;; Defined at:
  9532 ;;		line 188 in file "mcc_generated_files/eusart.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  9546 ;;      Params:         0       0       0       0       0       0
  9547 ;;      Locals:         0       0       0       0       0       0
  9548 ;;      Temps:          1       0       0       0       0       0
  9549 ;;      Totals:         1       0       0       0       0       0
  9550 ;;Total ram usage:        1 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_INTERRUPT_InterruptManager
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _EUSART_Receive_ISR
  9561  0A1E                     _EUSART_Receive_ISR:	
  9562                           
  9563                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9567  0A1E  0023               	movlb	3	; select bank3
  9568  0A1F  1C9D               	btfss	29,1	;volatile
  9569  0A20  2A23               	goto	i1l2989
  9570                           
  9571                           ;eusart.c: 192: {
  9572                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  9573  0A21  139D               	bcf	29,7	;volatile
  9574                           
  9575                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  9576  0A22  179D               	bsf	29,7	;volatile
  9577  0A23                     i1l2989:	
  9578                           
  9579                           ;eusart.c: 197: }
  9580                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  9581  0A23  0819               	movf	25,w	;volatile
  9582  0A24  00F0               	movwf	??_EUSART_Receive_ISR
  9583  0A25  0020               	movlb	0	; select bank0
  9584  0A26  0856               	movf	_eusartRxHead,w
  9585  0A27  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9586  0A28  0086               	movwf	6
  9587  0A29  0187               	clrf	7
  9588  0A2A  0870               	movf	??_EUSART_Receive_ISR,w
  9589  0A2B  0081               	movwf	1
  9590  0A2C  3001               	movlw	1
  9591  0A2D  00F0               	movwf	??_EUSART_Receive_ISR
  9592  0A2E  0870               	movf	??_EUSART_Receive_ISR,w
  9593  0A2F  07D6               	addwf	_eusartRxHead,f
  9594                           
  9595                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9596  0A30  3008               	movlw	8
  9597  0A31  0256               	subwf	_eusartRxHead,w
  9598  0A32  1803               	btfsc	3,0
  9599                           
  9600                           ;eusart.c: 202: {
  9601                           ;eusart.c: 203: eusartRxHead = 0;
  9602  0A33  01D6               	clrf	_eusartRxHead
  9603                           
  9604                           ;eusart.c: 204: }
  9605                           ;eusart.c: 205: eusartRxCount++;
  9606  0A34  3001               	movlw	1
  9607  0A35  00F0               	movwf	??_EUSART_Receive_ISR
  9608  0A36  0870               	movf	??_EUSART_Receive_ISR,w
  9609  0A37  07F8               	addwf	_eusartRxCount,f	;volatile
  9610  0A38  0008               	return
  9611  0A39                     __end_of_EUSART_Receive_ISR:	
  9612  007E                     btemp	set	126	;btemp
  9613  007E                     int$flags	set	126
  9614  007E                     wtemp	set	126
  9615  007E                     wtemp0	set	126
  9616  0080                     wtemp1	set	128
  9617  0082                     wtemp2	set	130
  9618  0084                     wtemp3	set	132
  9619  0086                     wtemp4	set	134
  9620  0088                     wtemp5	set	136
  9621  007F                     wtemp6	set	127
  9622  007E                     ttemp	set	126
  9623  007E                     ttemp0	set	126
  9624  0081                     ttemp1	set	129
  9625  0084                     ttemp2	set	132
  9626  0087                     ttemp3	set	135
  9627  007F                     ttemp4	set	127
  9628  007E                     ltemp	set	126
  9629  007E                     ltemp0	set	126
  9630  0082                     ltemp1	set	130
  9631  0086                     ltemp2	set	134
  9632  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    14
    Data        0
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     52      59
    BANK1            80      0      80
    BANK2            80     25      25
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    write_calibration_to_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK1[2]), m_conf(BANK1[47]), 

    load_calibration_from_EEPROM@p	PTR unsigned char  size(1) Largest target is 47
		 -> m_crc(BANK1[2]), m_conf(BANK1[47]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_EPWM1_LoadDutyValue
    _main->_LED_set_state
    _main->_TMR0_SetInterruptHandler
    _main->___wmul
    _main->_button_init
    _main->_load_calibration_from_EEPROM
    _main->_write_calibration_to_EEPROM
    _write_calibration_to_EEPROM->_DATAEE_WriteByte
    _perform_calibration->_EPWM1_LoadDutyValue
    _perform_calibration->_LED_set_state
    _perform_calibration->_button_init
    _double_fast_blink->_LED_set_state
    _button_init->_get_button_state
    _load_calibration_from_EEPROM->_DATAEE_ReadByte
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _convert_to_fp->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->i1_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _write_calibration_to_EEPROM->_crc_update
    _perform_calibration->_double_fast_blink
    _multiply_fp->___lmul
    _load_calibration_from_EEPROM->_crc_update
    _integer_part->_convert_to_fp
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->_convert_to_fp
    _convert_to_fp->___wmul
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0   19394
                                             44 BANK0      8     8      0
                                              0 BANK2     25    25      0
                _EPWM1_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                             ___wmul
                        _button_init
                      _convert_to_fp
                       _integer_part
       _load_calibration_from_EEPROM
                        _multiply_fp
                _perform_calibration
        _write_calibration_to_EEPROM
 ---------------------------------------------------------------------------------
 (1) _write_calibration_to_EEPROM                          4     4      0    1130
                                              5 COMMON     1     1      0
                                             17 BANK0      3     3      0
                   _DATAEE_WriteByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     253
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _perform_calibration                                 11    11      0    2068
                                              3 BANK0     11    11      0
                _EPWM1_LoadDutyValue
                      _LED_set_state
                        _button_init
                  _double_fast_blink
                   _get_button_state
 ---------------------------------------------------------------------------------
 (2) _double_fast_blink                                    3     3      0     155
                                              0 BANK0      3     3      0
                      _LED_set_state
 ---------------------------------------------------------------------------------
 (3) _LED_set_state                                        2     2      0     155
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _button_init                                          1     1      0      34
                                              5 COMMON     1     1      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (2) _get_button_state                                     1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  4     2      2    1140
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    18      8    2121
                                             12 BANK0     26    18      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _load_calibration_from_EEPROM                         6     6      0     976
                                              5 COMMON     1     1      0
                                             17 BANK0      5     5      0
                    _DATAEE_ReadByte
                         _crc_update
 ---------------------------------------------------------------------------------
 (2) _crc_update                                          17    14      3     565
                                              0 BANK0     17    14      3
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _integer_part                                        16    12      4    1935
                                             25 BANK0     16    12      4
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                   _EPWM1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    5691
                                             25 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       21    17      4    1456
                                              4 BANK0     21    17      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1060
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   2     2      0     112
                                              1 COMMON     2     2      0
                 i1_get_button_state
 ---------------------------------------------------------------------------------
 (10) i1_get_button_state                                  1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM1_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
       ___wmul (ARG)
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   ___wmul
   _button_init
     _get_button_state
   _convert_to_fp
     ___wmul (ARG)
   _integer_part
     _convert_to_fp
       ___wmul (ARG)
   _load_calibration_from_EEPROM
     _DATAEE_ReadByte
     _crc_update
   _multiply_fp
     ___lmul
   _perform_calibration
     _EPWM1_LoadDutyValue
     _LED_set_state
     _button_init
       _get_button_state
     _double_fast_blink
       _LED_set_state
     _get_button_state
   _write_calibration_to_EEPROM
     _DATAEE_WriteByte
     _crc_update

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           i1_get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AE       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      3B       6       73.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     19      19      10       31.3%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      AE      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Sep 21 19:33:56 2016

             __size_ofi1_get_button_state 000C                               __CFG_CP$OFF 0000  
                                      l28 0973                       ___wmul@multiplicand 0022  
                         _timer0ReloadVal 0079                    __end_of_my10msTimerISR 095C  
                                     l171 0B2F                                       l424 0307  
                                     l443 0371                                       l286 0B19  
                                     l543 0AE0                                       l391 0F61  
                                     l811 0A5D                                       l468 0796  
                                     l698 05D1                                       _PR2 001B  
                            __CFG_CPD$OFF 0000                           _TMR2_Initialize 0976  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              ?_EUSART_Read 0070  
                            __CFG_LVP$OFF 0000                                      l4111 0B7F  
                                    l4107 0B75                                      l4221 0E7A  
                                    l4205 0E46                                      l4311 0F94  
                                    l4231 0EA7                                      l4215 0E6C  
                                    l4207 0E2E                                      l4081 07B2  
                                    l4129 0DC0                                      l4321 0F6D  
                                    l4241 0EB8                                      l4209 0E4E  
                                    l4075 078E                                      l4147 0DF7  
                                    l4139 0DEE                                      l4323 0F72  
                                    l4331 0ECE                                      l4227 0E89  
                                    l4093 0A56                                      l4069 0764  
                                    l4421 042F                                      l4157 0E12  
                                    l4341 0FC1                                      l4333 0FB8  
                                    l4325 0FAF                                      l4317 0FA9  
                                    l4423 0430                                      l4407 0419  
                                    l4247 0ECD                                      l4089 0AAE  
                                    l4601 057B                                      l4505 04AD  
                                    l4433 0442                                      l4417 042D  
                                    l4329 0F66                                      l4281 0F37  
                                    l4273 0F13                                      l4177 0D26  
                                    l4169 0CEF                                      l4371 0BB7  
                                    l4507 04AE                                      l4347 0FD6  
                                    l4267 0EFE                                      l4365 0BA2  
                                    l4605 058C                                      l4517 04C0  
                                    l4293 0F4C                                      l4463 046E  
                                    l4455 0466                                      l4383 03E6  
                                    l4711 0D5F                                      l4279 0EDA  
                                    l4465 046F                                      l4385 03F5  
                                    l3835 0B24                                      l4635 05B8  
                                    l4627 05B0                                      l4571 0511  
                                    l4547 04EC                                      l4539 04E4  
                                    l4475 0481                                      l4811 02ED  
                                    l4645 05CA                                      l4637 05BA  
                                    l4581 0526                                      l4549 04ED  
                                    l4671 05F1                                      l4663 05E7  
                                    l4591 0538                                      l4727 0DAE  
                                    l4719 0D9F                                      l3863 0AD2  
                                    l4815 0305                                      l3849 0B43  
                                    l4585 0536                                      l4497 04A5  
                                    l3865 0AD8                                      l4761 0081  
                                    l4683 0610                                      l4667 05EF  
                                    l4595 0559                                      l4851 0362  
                                    l4819 0310                                      l4763 0087  
                                    l3957 0AE6                                      l4677 05F9  
                                    l4597 0576                                      l4845 034B  
                                    l4829 032F                                      l4695 0635  
                                    l4599 0518                                      l3879 09AD  
                                    l4871 0390                                      l4855 036C  
                                    l4775 00CE                                      l4759 0077  
                                    l4881 03B7                                      l4793 014F  
                                    l4769 0096                                      l4859 037B  
                                    l4787 00FB                                      l4885 03C3  
                                    l4877 03A7                                      STR_1 07E7  
                                    STR_2 081B                                      _LATA 010C  
                                    _LATB 010D                                      u4215 0BFD  
                                    u4225 0C0A                                      u4315 0A5E  
                                    u4235 074B                                      u4420 0E20  
                                    u4500 0E3C                                      u4325 0A63  
                                    u4264 0780                                      u4265 077E  
                                    u4425 0E1C                                      u5305 0642  
                                    u5403 0D99                                      u4355 0B80  
                                    u5315 065A                                      u4195 0A81  
                                    u4365 0B87                                      u5325 0675  
                                    u5335 068D                                      u5360 0D4D  
                                    u5345 06BD                                      u5370 0D4E  
                                    u4490 0E3B                                      u5275 0601  
                                    u5355 0711                                      u5395 0D69  
                                    u5475 011E                                      i1l77 0024  
                                    u5485 0143                                      u5807 0397  
                                    u5817 03B2                                      u5907 0FC7  
                                    u5827 03DB                                      u5917 0C3D  
                                    u5837 0E66                                      u5927 0C4D  
                                    u5847 0EA0                                      u5937 0C5C  
                                    u5857 0EBE                                      u5777 00D5  
                                    u5947 0C6B                                      u5867 0F04  
                                    u5787 0339                                      u5957 0C7A  
                                    u5877 0F2F                                      u5797 0352  
                                    u5967 0BA8                                      u5887 0F52  
                                    u5977 0BC5                                      u5897 0F9A  
                                    u5987 0BDA                                      _PLLR 04D6  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUB 020D  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                  __end_of_GPS_read_speed 0637                                      _main 0042  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                             integer_part@n 0039  
                                    start 0029                                      ttemp 007E  
                                    wtemp 007E                     ??_EPWM1_LoadDutyValue 0020  
                           __CFG_MCLRE$ON 0000                 __size_of_DATAEE_WriteByte 0021  
                 __end_of_TMR0_Initialize 09F1                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0070                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0008             __end_of_OSCILLATOR_Initialize 0976  
                                   ?_main 0070                              main@fp_motor 0122  
                           _convert_to_fp 0730                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     _LATA2 0862  
                         ?_my10msTimerISR 0070                                     i1l183 0AA6  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 0028         __size_of_TMR0_SetInterruptHandler 0006  
                            ?_button_init 0070                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0074                           __end_of_fp_x0_a 07DD  
                         __end_of_fp_x0_b 07E1                          __end_of_TMR0_ISR 0A07  
                                   _m_LED 0076                           _DATAEE_ReadByte 0997  
                                   _m_crc 00EE                                     _motor 0054  
                                   _speed 00B7                                     _putch 095C  
                                   main@a 0130                                     main@b 0134  
                                   main@i 0138                   __end_of_LED_update_loop 0B6C  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                           ?_GPS_read_speed 0070  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           _TMR2_StartTimer 0953  
                           multiply_fp@n1 002C                             multiply_fp@n2 0030  
                         __initialization 002B                    __size_of_LED_set_state 001D  
                            __end_of_main 03E2           write_calibration_to_EEPROM@addr 0031  
                          ??_EUSART_Write 0074                   __end_of_TMR2_Initialize 0980  
             ?_INTERRUPT_InterruptManager 0070      __end_of_load_calibration_from_EEPROM 0E22  
   __size_of_load_calibration_from_EEPROM 006F              _load_calibration_from_EEPROM 0DB3  
                          ?_convert_to_fp 0024                                    ??_main 004C  
                                  _EEADRH 0192                                    _EEADRL 0191  
                                  _CCPR1H 0292                                    _EEDATH 0194  
                                  _CCPR1L 0291                                    _EEDATL 0193  
                                  _EECON2 0196                                    _ANSELA 018C  
                                  ?_putch 0070                                    _ANSELB 018D  
                                  i1l2631 0B5B                                    i1l2651 0C96  
                                  i1l3623 001A                                    i1l3615 000F  
                                  i1l2593 0995                                    i1l2667 0CB4  
                                  i1l2659 0CA6                                    i1l2677 0CC7  
                                  i1l2687 0CDB                                    i1l2989 0A23  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                            __CFG_PWRTE$OFF 0000  
                      convert_to_fp@i_bit 0032                             main@new_motor 0120  
                            _CCPTMRS0bits 029E                                    ___lmul 0B6C  
                                  ___wmul 0A54                            __CFG_STVREN$ON 0000  
             __end_of_perform_calibration 1000                                    _m_conf 00BF  
                     _EUSART_Transmit_ISR 0A8C                          ?_TMR0_Initialize 0070  
              __end_of_button_update_loop 0CE0                   i1get_button_state@state 0070  
                                  _printf 0AA9                                    main@up 0127  
                 __end_of_DATAEE_ReadByte 09A3             ?_load_calibration_from_EEPROM 0070  
                           main@speed_int 0128                             ?_integer_part 0039  
                         integer_part@neg 0046                             _LED_set_state 0AC6  
                   __end_of_TMR0_CallBack 098B                   __end_of_TMR2_StartTimer 0956  
TMR0_SetInterruptHandler@InterruptHandler 0074                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0070                    convert_to_fp@res_fract 0030  
                        ?_LED_update_loop 0070                              ?_multiply_fp 002C  
                    __size_of_EUSART_Read 001F                         _SYSTEM_Initialize 09CA  
                 __end_of__initialization 003E                            multiply_fp@res 0042  
                      ?_SYSTEM_Initialize 0070                         ?_EPWM1_Initialize 0070  
    __size_of_write_calibration_to_EEPROM 0068                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0076                                 ?_TMR0_ISR 0070  
                      ??_EPWM1_Initialize 0074                          _DATAEE_WriteByte 0B02  
      perform_calibration@__delay_tmp_711 0029        perform_calibration@__delay_tmp_712 002A  
      perform_calibration@__delay_tmp_714 002B        perform_calibration@__delay_tmp_715 002C  
                         ??_convert_to_fp 0028                             __end_of_putch 0962  
                        ?_TMR2_Initialize 0070                            ??_integer_part 003D  
                          _OPTION_REGbits 0095                     TMR0_ISR@CountCallBack 00BB  
                          ?_LED_set_state 0070                      __size_of_button_init 000D  
               __end_of_SYSTEM_Initialize 09DC                     ??_EUSART_Transmit_ISR 0070  
                                 ??_putch 0076                                __pbssBANK0 0054  
                              __pbssBANK1 00A0                      __end_of_EUSART_Write 0B46  
               perform_calibration@replay 0027               __size_of_EUSART_Receive_ISR 001B  
              __end_ofi1_get_button_state 0997                                __pmaintext 0042  
        __end_of_TMR0_SetInterruptHandler 0968                                   ?___lmul 0020  
                                 ?___wmul 0020                                ??_TMR0_ISR 0073  
                        ??_my10msTimerISR 0073                                __pintentry 0004  
                                 _CCP1CON 0293                                   _ECCP1AS 0295  
                                 _BAUDCON 019F                         _double_fast_blink 0C30  
                          ___lmul@product 0028                                   _APFCON0 011D  
                                 _APFCON1 011E                                   ?_printf 0021  
                      ?_double_fast_blink 0070                          ?_DATAEE_ReadByte 0070  
                              _crc_update 0BE1                     get_button_state@state 0074  
                           _eusartRxCount 0078                                   _OSCSTAT 009A  
                                 _OSCTUNE 0098                                   _PWM1CON 0294  
                        ??_GPS_read_speed 0039            ??_load_calibration_from_EEPROM 0075  
                     ??_double_fast_blink 0020                          ?_TMR2_StartTimer 0070  
        load_calibration_from_EEPROM@addr 0033               __end_of_EPWM1_LoadDutyValue 0A8C  
                    DATAEE_WriteByte@bAdd 0020                 __end_of_double_fast_blink 0C82  
                         __size_of___lmul 0030                           __size_of___wmul 001C  
                 convert_to_fp@fract_part 0026                                   _fp_x0_a 07D9  
                                 _fp_x0_b 07DD                                   __ptext1 0CE0  
                                 __ptext2 0B02                                   __ptext3 0E22  
                                 __ptext4 0C30                                   __ptext5 0AC6  
                                 __ptext6 09AF                                   __ptext7 09A3  
                                 __ptext8 0A70                                   __ptext9 0637  
                         __size_of_printf 001D                           main@__delay_tmp 012E  
                         ??_LED_set_state 0074                 GPS_Initialize@__delay_tmp 002B  
                   _OSCILLATOR_Initialize 096E                                 _T2CONbits 001C  
            GPS_read_speed@read_speed_fra 003F                  ??_PIN_MANAGER_Initialize 0074  
            GPS_read_speed@read_speed_int 003D                __size_of_SYSTEM_Initialize 0012  
                                 clrloop0 0969                          _get_button_state 09A3  
                                 main@tmp 012A                      end_of_initialization 003E  
                       __end_of_ratio_mph 07E5                    LED_set_state@new_state 0075  
                    __size_of_multiply_fp 00F9                         _EUSART_Initialize 0A39  
                    __end_of_integer_part 0DB3                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@c 0027  
                                 printf@f 0021                              __pstringtext 07D9  
                    integer_part@int_part 0047                       ??_EUSART_Initialize 0074  
                _TMR0_SetInterruptHandler 0962                                 _PORTBbits 000D  
                             ?_crc_update 0020                      GPS_read_speed@i_buff 004A  
                    GPS_read_speed@m_char 004B                      GPS_read_speed@buffer 0043  
                        __CFG_FOSC$INTOSC 0000                     __size_of_EUSART_Write 0023  
                      _button_update_loop 0C82              ?_write_calibration_to_EEPROM 0070  
                __end_of_DATAEE_WriteByte 0B23                 __end_of_EUSART_Initialize 0A54  
                 __size_of_GPS_Initialize 0045                       ?_button_update_loop 0070  
              __size_of_double_fast_blink 0052                            __end_of___lmul 0B9C  
                          __end_of___wmul 0A70                              _EUSART_Write 0B23  
                       __size_of_TMR0_ISR 0016                          convert_to_fp@one 07E5  
                        convert_to_fp@res 0035                    ?_OSCILLATOR_Initialize 0070  
                    ??_button_update_loop 0071                            __end_of_printf 0AC6  
            __size_of_perform_calibration 01DE                       start_initialization 002B  
               __size_of_EPWM1_Initialize 000E                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0017                             ??_EUSART_Read 0074  
                             putch@txData 0020              EPWM1_LoadDutyValue@dutyValue 0074  
           ??_write_calibration_to_EEPROM 0075                       DATAEE_ReadByte@bAdd 0074  
                       crc_update@old_crc 0020                       __size_of_crc_update 004F  
                __size_of_LED_update_loop 0026                                  ??___lmul 0074  
                                ??___wmul 0074                    __size_of_TMR0_CallBack 000B  
                   convert_to_fp@int_part 0024                     __end_of_convert_to_fp 07D9  
                                ??_printf 0023                        i1_get_button_state 098B  
             __end_of_EUSART_Transmit_ISR 0AA9             load_calibration_from_EEPROM@i 0035  
           load_calibration_from_EEPROM@p 0034                             ??_button_init 0075  
                             __pbssCOMMON 0076                                 ___latbits 0001  
                           __pcstackBANK0 0020                             __pcstackBANK2 0120  
                   convert_to_fp@tmp_left 0033                  __size_of_TMR2_Initialize 000A  
                     ?i1_get_button_state 0070                     __size_of_integer_part 006B  
              __end_of_EUSART_Receive_ISR 0A39                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 0B02                     _TMR0_InterruptHandler 00BD  
                  _PIN_MANAGER_Initialize 0A07                      EUSART_Read@readValue 0075  
                    ??i1_get_button_state 0070                  __end_of_get_button_state 09AF  
                            _eusartRxHead 0056                              _eusartTxHead 0059  
                            _eusartRxTail 0057                              _eusartTxTail 005A  
            ??_INTERRUPT_InterruptManager 0073                   _eusartTxBufferRemaining 0058  
         load_calibration_from_EEPROM@crc 0031                              _integer_part 0D48  
                           _TMR0_CallBack 0980            perform_calibration@__delay_tmp 0028  
                __size_of_DATAEE_ReadByte 000C                            __size_of_putch 0006  
                     __end_of_button_init 09BC                            _eusartRxBuffer 00A0  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 0B9C  
                          _eusartTxBuffer 00A8                            ___wmul@product 0074  
                               clear_ram0 0968                                  _PIE1bits 0091  
                               _ratio_mph 07E1                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0025                ??_TMR0_SetInterruptHandler 0076  
                                _PIR1bits 0011              __size_of_EPWM1_LoadDutyValue 001C  
                                _TMR0_ISR 09F1                      perform_calibration@i 002D  
                                _PSTR1CON 0296                         ??_LED_update_loop 0070  
                       ___wmul@multiplier 0020                              ??_crc_update 0023  
                     main@__delay_tmp_731 012F                          _EPWM1_Initialize 09BC  
                   __end_of_LED_set_state 0AE3                   __size_of_my10msTimerISR 0006  
                   DATAEE_WriteByte@bData 0074                            ?_TMR0_CallBack 0070  
                             _EUSART_Read 0AE3                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 0BE1                             ??_multiply_fp 0034  
                       ?_DATAEE_WriteByte 0074                  __end_ofconvert_to_fp@one 07E7  
          GPS_read_speed@no_more_checksum 003C                         ??_TMR2_Initialize 0074  
                      ??_DATAEE_WriteByte 0075                                _EECON1bits 0195  
                     _perform_calibration 0E22                    integer_part@and_a_half 0042  
                 __size_of_GPS_read_speed 0255                        __end_of_crc_update 0C30  
                 ??_OSCILLATOR_Initialize 0074                      ?_perform_calibration 0070  
         button_update_loop@current_state 0072                               _button_init 09AF  
                GPS_read_speed@before_dot 003B                                  __ptext10 0B6C  
                                __ptext11 0DB3                                  __ptext20 0A07  
                                __ptext12 0BE1                                  __ptext21 096E  
                                __ptext13 0997                                  __ptext30 095C  
                                __ptext22 0A39                                  __ptext14 0D48  
                                __ptext31 0B23                                  __ptext23 09BC  
                                __ptext15 09CA                                  __ptext40 0A8C  
                                __ptext24 03E2                                  __ptext16 0976  
                                __ptext41 0A1E                                  __ptext33 09F1  
                                __ptext25 0730                                  __ptext17 0953  
                                __ptext34 0980                                  __ptext26 0A54  
                                __ptext18 09DC                                  __ptext35 0003  
                                __ptext27 0AE3                                  __ptext19 0962  
                                __ptext36 0956                                  __ptext28 0B9C  
                                __ptext37 0C82                                  __ptext29 0AA9  
                                __ptext38 098B                                  __ptext39 0B46  
                         ?_GPS_Initialize 0070               DATAEE_WriteByte@GIEBitValue 0021  
                                _m_button 00B0                             __size_of_main 03A0  
    __end_of_TMR0_DefaultInterruptHandler 0004     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 0003                         ??_DATAEE_ReadByte 0074  
                     __end_of_multiply_fp 0730                                  int$flags 007E  
                       ??_TMR2_StartTimer 0074        __end_of_INTERRUPT_InterruptManager 0029  
              _INTERRUPT_InterruptManager 0004                                  main@done 0126  
                   ??_perform_calibration 0023               __size_of_button_update_loop 005E  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0073  
                                intlevel1 0000                   ?_PIN_MANAGER_Initialize 0070  
                 GPS_read_speed@checksum2 0041                         __CFG_CLKOUTEN$OFF 0000  
                 perform_calibration@done 0026             ?_TMR0_DefaultInterruptHandler 0070  
                                printf@ap 0026                        _EUSART_Receive_ISR 0A1E  
                       ?_get_button_state 0070                            crc_update@data 0022  
                      ??_get_button_state 0074                                _OPTION_REG 0095  
                     ?_EUSART_Receive_ISR 0070                           _TMR0_Initialize 09DC  
                  GPS_read_speed@checksum 0042                            _my10msTimerISR 0956  
                     _EPWM1_LoadDutyValue 0A70       __end_of_write_calibration_to_EEPROM 0D48  
             _write_calibration_to_EEPROM 0CE0                             crc_update@crc 002D  
                      EUSART_Write@txData 0075              __size_of_EUSART_Transmit_ISR 001D  
          __end_of_PIN_MANAGER_Initialize 0A1E                     GPS_read_speed@i_buff2 0049  
                             _multiply_fp 0637                    __size_of_convert_to_fp 00A9  
                    ??_EUSART_Receive_ISR 0070                            _GPS_read_speed 03E2  
                             crc_update@x 002F                           _LED_update_loop 0B46  
            write_calibration_to_EEPROM@i 0033              write_calibration_to_EEPROM@p 0032  
                __end_of_EPWM1_Initialize 09CA                      ?_EPWM1_LoadDutyValue 0074  



Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Sep 18 11:14:42 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  0007                     	;# 
    53  0008                     	;# 
    54  0009                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000E                     	;# 
    59  0011                     	;# 
    60  0012                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  008C                     	;# 
    73  008E                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0095                     	;# 
    77  0096                     	;# 
    78  0097                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009B                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  010C                     	;# 
    88  010E                     	;# 
    89  0111                     	;# 
    90  0112                     	;# 
    91  0113                     	;# 
    92  0114                     	;# 
    93  0115                     	;# 
    94  0116                     	;# 
    95  0117                     	;# 
    96  0118                     	;# 
    97  0119                     	;# 
    98  011A                     	;# 
    99  011B                     	;# 
   100  011D                     	;# 
   101  011D                     	;# 
   102  018C                     	;# 
   103  018E                     	;# 
   104  0191                     	;# 
   105  0191                     	;# 
   106  0192                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0199                     	;# 
   114  019A                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019C                     	;# 
   120  019C                     	;# 
   121  019D                     	;# 
   122  019E                     	;# 
   123  019F                     	;# 
   124  020C                     	;# 
   125  020E                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0291                     	;# 
   142  0291                     	;# 
   143  0292                     	;# 
   144  0293                     	;# 
   145  0294                     	;# 
   146  0295                     	;# 
   147  0295                     	;# 
   148  0296                     	;# 
   149  0391                     	;# 
   150  0392                     	;# 
   151  0393                     	;# 
   152  039A                     	;# 
   153  039C                     	;# 
   154  039D                     	;# 
   155  039E                     	;# 
   156  039F                     	;# 
   157  0FE4                     	;# 
   158  0FE5                     	;# 
   159  0FE6                     	;# 
   160  0FE7                     	;# 
   161  0FE8                     	;# 
   162  0FE9                     	;# 
   163  0FEA                     	;# 
   164  0FEB                     	;# 
   165  0FED                     	;# 
   166  0FEE                     	;# 
   167  0FEF                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000E                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  008C                     	;# 
   196  008E                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010E                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  011A                     	;# 
   222  011B                     	;# 
   223  011D                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0193                     	;# 
   233  0194                     	;# 
   234  0195                     	;# 
   235  0196                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019E                     	;# 
   246  019F                     	;# 
   247  020C                     	;# 
   248  020E                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0216                     	;# 
   261  0216                     	;# 
   262  0217                     	;# 
   263  0217                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0294                     	;# 
   269  0295                     	;# 
   270  0295                     	;# 
   271  0296                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  039A                     	;# 
   276  039C                     	;# 
   277  039D                     	;# 
   278  039E                     	;# 
   279  039F                     	;# 
   280  0FE4                     	;# 
   281  0FE5                     	;# 
   282  0FE6                     	;# 
   283  0FE7                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEB                     	;# 
   288  0FED                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000E                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  008C                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0098                     	;# 
   326  0099                     	;# 
   327  009A                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  010C                     	;# 
   334  010E                     	;# 
   335  0111                     	;# 
   336  0112                     	;# 
   337  0113                     	;# 
   338  0114                     	;# 
   339  0115                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  0118                     	;# 
   343  0119                     	;# 
   344  011A                     	;# 
   345  011B                     	;# 
   346  011D                     	;# 
   347  011D                     	;# 
   348  018C                     	;# 
   349  018E                     	;# 
   350  0191                     	;# 
   351  0191                     	;# 
   352  0192                     	;# 
   353  0193                     	;# 
   354  0193                     	;# 
   355  0193                     	;# 
   356  0194                     	;# 
   357  0195                     	;# 
   358  0196                     	;# 
   359  0199                     	;# 
   360  019A                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019C                     	;# 
   366  019C                     	;# 
   367  019D                     	;# 
   368  019E                     	;# 
   369  019F                     	;# 
   370  020C                     	;# 
   371  020E                     	;# 
   372  0211                     	;# 
   373  0211                     	;# 
   374  0212                     	;# 
   375  0212                     	;# 
   376  0213                     	;# 
   377  0213                     	;# 
   378  0214                     	;# 
   379  0214                     	;# 
   380  0215                     	;# 
   381  0215                     	;# 
   382  0215                     	;# 
   383  0216                     	;# 
   384  0216                     	;# 
   385  0217                     	;# 
   386  0217                     	;# 
   387  0291                     	;# 
   388  0291                     	;# 
   389  0292                     	;# 
   390  0293                     	;# 
   391  0294                     	;# 
   392  0295                     	;# 
   393  0295                     	;# 
   394  0296                     	;# 
   395  0391                     	;# 
   396  0392                     	;# 
   397  0393                     	;# 
   398  039A                     	;# 
   399  039C                     	;# 
   400  039D                     	;# 
   401  039E                     	;# 
   402  039F                     	;# 
   403  0FE4                     	;# 
   404  0FE5                     	;# 
   405  0FE6                     	;# 
   406  0FE7                     	;# 
   407  0FE8                     	;# 
   408  0FE9                     	;# 
   409  0FEA                     	;# 
   410  0FEB                     	;# 
   411  0FED                     	;# 
   412  0FEE                     	;# 
   413  0FEF                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000E                     	;# 
   428  0011                     	;# 
   429  0012                     	;# 
   430  0015                     	;# 
   431  0016                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001C                     	;# 
   439  001E                     	;# 
   440  001F                     	;# 
   441  008C                     	;# 
   442  008E                     	;# 
   443  0091                     	;# 
   444  0092                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010E                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011D                     	;# 
   471  018C                     	;# 
   472  018E                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020E                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0291                     	;# 
   511  0291                     	;# 
   512  0292                     	;# 
   513  0293                     	;# 
   514  0294                     	;# 
   515  0295                     	;# 
   516  0295                     	;# 
   517  0296                     	;# 
   518  0391                     	;# 
   519  0392                     	;# 
   520  0393                     	;# 
   521  039A                     	;# 
   522  039C                     	;# 
   523  039D                     	;# 
   524  039E                     	;# 
   525  039F                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000E                     	;# 
   551  0011                     	;# 
   552  0012                     	;# 
   553  0015                     	;# 
   554  0016                     	;# 
   555  0016                     	;# 
   556  0017                     	;# 
   557  0018                     	;# 
   558  0019                     	;# 
   559  001A                     	;# 
   560  001B                     	;# 
   561  001C                     	;# 
   562  001E                     	;# 
   563  001F                     	;# 
   564  008C                     	;# 
   565  008E                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0095                     	;# 
   569  0096                     	;# 
   570  0097                     	;# 
   571  0098                     	;# 
   572  0099                     	;# 
   573  009A                     	;# 
   574  009B                     	;# 
   575  009B                     	;# 
   576  009C                     	;# 
   577  009D                     	;# 
   578  009E                     	;# 
   579  010C                     	;# 
   580  010E                     	;# 
   581  0111                     	;# 
   582  0112                     	;# 
   583  0113                     	;# 
   584  0114                     	;# 
   585  0115                     	;# 
   586  0116                     	;# 
   587  0117                     	;# 
   588  0118                     	;# 
   589  0119                     	;# 
   590  011A                     	;# 
   591  011B                     	;# 
   592  011D                     	;# 
   593  011D                     	;# 
   594  018C                     	;# 
   595  018E                     	;# 
   596  0191                     	;# 
   597  0191                     	;# 
   598  0192                     	;# 
   599  0193                     	;# 
   600  0193                     	;# 
   601  0193                     	;# 
   602  0194                     	;# 
   603  0195                     	;# 
   604  0196                     	;# 
   605  0199                     	;# 
   606  019A                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019C                     	;# 
   612  019C                     	;# 
   613  019D                     	;# 
   614  019E                     	;# 
   615  019F                     	;# 
   616  020C                     	;# 
   617  020E                     	;# 
   618  0211                     	;# 
   619  0211                     	;# 
   620  0212                     	;# 
   621  0212                     	;# 
   622  0213                     	;# 
   623  0213                     	;# 
   624  0214                     	;# 
   625  0214                     	;# 
   626  0215                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0216                     	;# 
   630  0216                     	;# 
   631  0217                     	;# 
   632  0217                     	;# 
   633  0291                     	;# 
   634  0291                     	;# 
   635  0292                     	;# 
   636  0293                     	;# 
   637  0294                     	;# 
   638  0295                     	;# 
   639  0295                     	;# 
   640  0296                     	;# 
   641  0391                     	;# 
   642  0392                     	;# 
   643  0393                     	;# 
   644  039A                     	;# 
   645  039C                     	;# 
   646  039D                     	;# 
   647  039E                     	;# 
   648  039F                     	;# 
   649  0FE4                     	;# 
   650  0FE5                     	;# 
   651  0FE6                     	;# 
   652  0FE7                     	;# 
   653  0FE8                     	;# 
   654  0FE9                     	;# 
   655  0FEA                     	;# 
   656  0FEB                     	;# 
   657  0FED                     	;# 
   658  0FEE                     	;# 
   659  0FEF                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0015                     	;# 
   677  0016                     	;# 
   678  0016                     	;# 
   679  0017                     	;# 
   680  0018                     	;# 
   681  0019                     	;# 
   682  001A                     	;# 
   683  001B                     	;# 
   684  001C                     	;# 
   685  001E                     	;# 
   686  001F                     	;# 
   687  008C                     	;# 
   688  008E                     	;# 
   689  0091                     	;# 
   690  0092                     	;# 
   691  0095                     	;# 
   692  0096                     	;# 
   693  0097                     	;# 
   694  0098                     	;# 
   695  0099                     	;# 
   696  009A                     	;# 
   697  009B                     	;# 
   698  009B                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009E                     	;# 
   702  010C                     	;# 
   703  010E                     	;# 
   704  0111                     	;# 
   705  0112                     	;# 
   706  0113                     	;# 
   707  0114                     	;# 
   708  0115                     	;# 
   709  0116                     	;# 
   710  0117                     	;# 
   711  0118                     	;# 
   712  0119                     	;# 
   713  011A                     	;# 
   714  011B                     	;# 
   715  011D                     	;# 
   716  011D                     	;# 
   717  018C                     	;# 
   718  018E                     	;# 
   719  0191                     	;# 
   720  0191                     	;# 
   721  0192                     	;# 
   722  0193                     	;# 
   723  0193                     	;# 
   724  0193                     	;# 
   725  0194                     	;# 
   726  0195                     	;# 
   727  0196                     	;# 
   728  0199                     	;# 
   729  019A                     	;# 
   730  019B                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019C                     	;# 
   735  019C                     	;# 
   736  019D                     	;# 
   737  019E                     	;# 
   738  019F                     	;# 
   739  020C                     	;# 
   740  020E                     	;# 
   741  0211                     	;# 
   742  0211                     	;# 
   743  0212                     	;# 
   744  0212                     	;# 
   745  0213                     	;# 
   746  0213                     	;# 
   747  0214                     	;# 
   748  0214                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0216                     	;# 
   754  0217                     	;# 
   755  0217                     	;# 
   756  0291                     	;# 
   757  0291                     	;# 
   758  0292                     	;# 
   759  0293                     	;# 
   760  0294                     	;# 
   761  0295                     	;# 
   762  0295                     	;# 
   763  0296                     	;# 
   764  0391                     	;# 
   765  0392                     	;# 
   766  0393                     	;# 
   767  039A                     	;# 
   768  039C                     	;# 
   769  039D                     	;# 
   770  039E                     	;# 
   771  039F                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0015                     	;# 
   800  0016                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  008C                     	;# 
   811  008E                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  010C                     	;# 
   826  010E                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  011A                     	;# 
   837  011B                     	;# 
   838  011D                     	;# 
   839  011D                     	;# 
   840  018C                     	;# 
   841  018E                     	;# 
   842  0191                     	;# 
   843  0191                     	;# 
   844  0192                     	;# 
   845  0193                     	;# 
   846  0193                     	;# 
   847  0193                     	;# 
   848  0194                     	;# 
   849  0195                     	;# 
   850  0196                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019F                     	;# 
   862  020C                     	;# 
   863  020E                     	;# 
   864  0211                     	;# 
   865  0211                     	;# 
   866  0212                     	;# 
   867  0212                     	;# 
   868  0213                     	;# 
   869  0213                     	;# 
   870  0214                     	;# 
   871  0214                     	;# 
   872  0215                     	;# 
   873  0215                     	;# 
   874  0215                     	;# 
   875  0216                     	;# 
   876  0216                     	;# 
   877  0217                     	;# 
   878  0217                     	;# 
   879  0291                     	;# 
   880  0291                     	;# 
   881  0292                     	;# 
   882  0293                     	;# 
   883  0294                     	;# 
   884  0295                     	;# 
   885  0295                     	;# 
   886  0296                     	;# 
   887  0391                     	;# 
   888  0392                     	;# 
   889  0393                     	;# 
   890  039A                     	;# 
   891  039C                     	;# 
   892  039D                     	;# 
   893  039E                     	;# 
   894  039F                     	;# 
   895  0FE4                     	;# 
   896  0FE5                     	;# 
   897  0FE6                     	;# 
   898  0FE7                     	;# 
   899  0FE8                     	;# 
   900  0FE9                     	;# 
   901  0FEA                     	;# 
   902  0FEB                     	;# 
   903  0FED                     	;# 
   904  0FEE                     	;# 
   905  0FEF                     	;# 
   906  0000                     	;# 
   907  0001                     	;# 
   908  0002                     	;# 
   909  0003                     	;# 
   910  0004                     	;# 
   911  0005                     	;# 
   912  0006                     	;# 
   913  0007                     	;# 
   914  0008                     	;# 
   915  0009                     	;# 
   916  000A                     	;# 
   917  000B                     	;# 
   918  000C                     	;# 
   919  000E                     	;# 
   920  0011                     	;# 
   921  0012                     	;# 
   922  0015                     	;# 
   923  0016                     	;# 
   924  0016                     	;# 
   925  0017                     	;# 
   926  0018                     	;# 
   927  0019                     	;# 
   928  001A                     	;# 
   929  001B                     	;# 
   930  001C                     	;# 
   931  001E                     	;# 
   932  001F                     	;# 
   933  008C                     	;# 
   934  008E                     	;# 
   935  0091                     	;# 
   936  0092                     	;# 
   937  0095                     	;# 
   938  0096                     	;# 
   939  0097                     	;# 
   940  0098                     	;# 
   941  0099                     	;# 
   942  009A                     	;# 
   943  009B                     	;# 
   944  009B                     	;# 
   945  009C                     	;# 
   946  009D                     	;# 
   947  009E                     	;# 
   948  010C                     	;# 
   949  010E                     	;# 
   950  0111                     	;# 
   951  0112                     	;# 
   952  0113                     	;# 
   953  0114                     	;# 
   954  0115                     	;# 
   955  0116                     	;# 
   956  0117                     	;# 
   957  0118                     	;# 
   958  0119                     	;# 
   959  011A                     	;# 
   960  011B                     	;# 
   961  011D                     	;# 
   962  011D                     	;# 
   963  018C                     	;# 
   964  018E                     	;# 
   965  0191                     	;# 
   966  0191                     	;# 
   967  0192                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0193                     	;# 
   971  0194                     	;# 
   972  0195                     	;# 
   973  0196                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020C                     	;# 
   986  020E                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0291                     	;# 
  1003  0291                     	;# 
  1004  0292                     	;# 
  1005  0293                     	;# 
  1006  0294                     	;# 
  1007  0295                     	;# 
  1008  0295                     	;# 
  1009  0296                     	;# 
  1010  0391                     	;# 
  1011  0392                     	;# 
  1012  0393                     	;# 
  1013  039A                     	;# 
  1014  039C                     	;# 
  1015  039D                     	;# 
  1016  039E                     	;# 
  1017  039F                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029  0000                     	;# 
  1030  0001                     	;# 
  1031  0002                     	;# 
  1032  0003                     	;# 
  1033  0004                     	;# 
  1034  0005                     	;# 
  1035  0006                     	;# 
  1036  0007                     	;# 
  1037  0008                     	;# 
  1038  0009                     	;# 
  1039  000A                     	;# 
  1040  000B                     	;# 
  1041  000C                     	;# 
  1042  000E                     	;# 
  1043  0011                     	;# 
  1044  0012                     	;# 
  1045  0015                     	;# 
  1046  0016                     	;# 
  1047  0016                     	;# 
  1048  0017                     	;# 
  1049  0018                     	;# 
  1050  0019                     	;# 
  1051  001A                     	;# 
  1052  001B                     	;# 
  1053  001C                     	;# 
  1054  001E                     	;# 
  1055  001F                     	;# 
  1056  008C                     	;# 
  1057  008E                     	;# 
  1058  0091                     	;# 
  1059  0092                     	;# 
  1060  0095                     	;# 
  1061  0096                     	;# 
  1062  0097                     	;# 
  1063  0098                     	;# 
  1064  0099                     	;# 
  1065  009A                     	;# 
  1066  009B                     	;# 
  1067  009B                     	;# 
  1068  009C                     	;# 
  1069  009D                     	;# 
  1070  009E                     	;# 
  1071  010C                     	;# 
  1072  010E                     	;# 
  1073  0111                     	;# 
  1074  0112                     	;# 
  1075  0113                     	;# 
  1076  0114                     	;# 
  1077  0115                     	;# 
  1078  0116                     	;# 
  1079  0117                     	;# 
  1080  0118                     	;# 
  1081  0119                     	;# 
  1082  011A                     	;# 
  1083  011B                     	;# 
  1084  011D                     	;# 
  1085  011D                     	;# 
  1086  018C                     	;# 
  1087  018E                     	;# 
  1088  0191                     	;# 
  1089  0191                     	;# 
  1090  0192                     	;# 
  1091  0193                     	;# 
  1092  0193                     	;# 
  1093  0193                     	;# 
  1094  0194                     	;# 
  1095  0195                     	;# 
  1096  0196                     	;# 
  1097  0199                     	;# 
  1098  019A                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019C                     	;# 
  1104  019C                     	;# 
  1105  019D                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  020C                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0216                     	;# 
  1122  0216                     	;# 
  1123  0217                     	;# 
  1124  0217                     	;# 
  1125  0291                     	;# 
  1126  0291                     	;# 
  1127  0292                     	;# 
  1128  0293                     	;# 
  1129  0294                     	;# 
  1130  0295                     	;# 
  1131  0295                     	;# 
  1132  0296                     	;# 
  1133  0391                     	;# 
  1134  0392                     	;# 
  1135  0393                     	;# 
  1136  039A                     	;# 
  1137  039C                     	;# 
  1138  039D                     	;# 
  1139  039E                     	;# 
  1140  039F                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000E                     	;# 
  1166  0011                     	;# 
  1167  0012                     	;# 
  1168  0015                     	;# 
  1169  0016                     	;# 
  1170  0016                     	;# 
  1171  0017                     	;# 
  1172  0018                     	;# 
  1173  0019                     	;# 
  1174  001A                     	;# 
  1175  001B                     	;# 
  1176  001C                     	;# 
  1177  001E                     	;# 
  1178  001F                     	;# 
  1179  008C                     	;# 
  1180  008E                     	;# 
  1181  0091                     	;# 
  1182  0092                     	;# 
  1183  0095                     	;# 
  1184  0096                     	;# 
  1185  0097                     	;# 
  1186  0098                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010E                     	;# 
  1196  0111                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0115                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  0118                     	;# 
  1204  0119                     	;# 
  1205  011A                     	;# 
  1206  011B                     	;# 
  1207  011D                     	;# 
  1208  011D                     	;# 
  1209  018C                     	;# 
  1210  018E                     	;# 
  1211  0191                     	;# 
  1212  0191                     	;# 
  1213  0192                     	;# 
  1214  0193                     	;# 
  1215  0193                     	;# 
  1216  0193                     	;# 
  1217  0194                     	;# 
  1218  0195                     	;# 
  1219  0196                     	;# 
  1220  0199                     	;# 
  1221  019A                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019C                     	;# 
  1227  019C                     	;# 
  1228  019D                     	;# 
  1229  019E                     	;# 
  1230  019F                     	;# 
  1231  020C                     	;# 
  1232  020E                     	;# 
  1233  0211                     	;# 
  1234  0211                     	;# 
  1235  0212                     	;# 
  1236  0212                     	;# 
  1237  0213                     	;# 
  1238  0213                     	;# 
  1239  0214                     	;# 
  1240  0214                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0216                     	;# 
  1245  0216                     	;# 
  1246  0217                     	;# 
  1247  0217                     	;# 
  1248  0291                     	;# 
  1249  0291                     	;# 
  1250  0292                     	;# 
  1251  0293                     	;# 
  1252  0294                     	;# 
  1253  0295                     	;# 
  1254  0295                     	;# 
  1255  0296                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000E                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  001E                     	;# 
  1301  001F                     	;# 
  1302  008C                     	;# 
  1303  008E                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0098                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010E                     	;# 
  1319  0111                     	;# 
  1320  0112                     	;# 
  1321  0113                     	;# 
  1322  0114                     	;# 
  1323  0115                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  0118                     	;# 
  1327  0119                     	;# 
  1328  011A                     	;# 
  1329  011B                     	;# 
  1330  011D                     	;# 
  1331  011D                     	;# 
  1332  018C                     	;# 
  1333  018E                     	;# 
  1334  0191                     	;# 
  1335  0191                     	;# 
  1336  0192                     	;# 
  1337  0193                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0194                     	;# 
  1341  0195                     	;# 
  1342  0196                     	;# 
  1343  0199                     	;# 
  1344  019A                     	;# 
  1345  019B                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019C                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019E                     	;# 
  1353  019F                     	;# 
  1354  020C                     	;# 
  1355  020E                     	;# 
  1356  0211                     	;# 
  1357  0211                     	;# 
  1358  0212                     	;# 
  1359  0212                     	;# 
  1360  0213                     	;# 
  1361  0213                     	;# 
  1362  0214                     	;# 
  1363  0214                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0216                     	;# 
  1368  0216                     	;# 
  1369  0217                     	;# 
  1370  0217                     	;# 
  1371  0291                     	;# 
  1372  0291                     	;# 
  1373  0292                     	;# 
  1374  0293                     	;# 
  1375  0294                     	;# 
  1376  0295                     	;# 
  1377  0295                     	;# 
  1378  0296                     	;# 
  1379  0391                     	;# 
  1380  0392                     	;# 
  1381  0393                     	;# 
  1382  039A                     	;# 
  1383  039C                     	;# 
  1384  039D                     	;# 
  1385  039E                     	;# 
  1386  039F                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398                           
  1399                           	psect	idataBANK0
  1400  068E                     __pidataBANK0:	
  1401                           
  1402                           ;initializer for _LED_state
  1403  068E  3401               	retlw	1
  1404                           
  1405                           	psect	stringtext
  1406  042A                     __pstringtext:	
  1407  042A                     _ratio_mph:	
  1408  042A  34BE               	retlw	190
  1409  042B  3427               	retlw	39
  1410  042C  3400               	retlw	0
  1411  042D                     __end_of_ratio_mph:	
  1412  042D                     convert_to_fp@one:	
  1413  042D  3401               	retlw	1
  1414  042E  3400               	retlw	0
  1415  042F                     __end_ofconvert_to_fp@one:	
  1416  000B                     _INTCONbits	set	11
  1417  0011                     _PIR1bits	set	17
  1418  000C                     _PORTAbits	set	12
  1419  001B                     _PR2	set	27
  1420  001C                     _T2CON	set	28
  1421  001C                     _T2CONbits	set	28
  1422  0015                     _TMR0	set	21
  1423  001A                     _TMR2	set	26
  1424  0095                     _OPTION_REG	set	149
  1425  0095                     _OPTION_REGbits	set	149
  1426  0099                     _OSCCON	set	153
  1427  009A                     _OSCSTAT	set	154
  1428  0098                     _OSCTUNE	set	152
  1429  0091                     _PIE1bits	set	145
  1430  008C                     _TRISA	set	140
  1431  008E                     _TRISC	set	142
  1432  04D6                     _PLLR	set	1238
  1433  011D                     _APFCON	set	285
  1434  010C                     _LATA	set	268
  1435  010E                     _LATC	set	270
  1436  0865                     _LATA5	set	2149
  1437  018C                     _ANSELA	set	396
  1438  018E                     _ANSELC	set	398
  1439  019F                     _BAUDCON	set	415
  1440  0192                     _EEADRH	set	402
  1441  0191                     _EEADRL	set	401
  1442  0195                     _EECON1bits	set	405
  1443  0196                     _EECON2	set	406
  1444  0194                     _EEDATH	set	404
  1445  0193                     _EEDATL	set	403
  1446  0199                     _RCREG	set	409
  1447  019D                     _RCSTA	set	413
  1448  019D                     _RCSTAbits	set	413
  1449  019C                     _SPBRGH	set	412
  1450  019B                     _SPBRGL	set	411
  1451  019A                     _TXREG	set	410
  1452  019E                     _TXSTA	set	414
  1453  020C                     _WPUA	set	524
  1454  020E                     _WPUC	set	526
  1455  0293                     _CCP1CON	set	659
  1456  0292                     _CCPR1H	set	658
  1457  0291                     _CCPR1L	set	657
  1458  0295                     _ECCP1AS	set	661
  1459  0296                     _PSTR1CON	set	662
  1460  0294                     _PWM1CON	set	660
  1461  042F                     STR_1:	
  1462  042F  3424               	retlw	36	;'$'
  1463  0430  3450               	retlw	80	;'P'
  1464  0431  344D               	retlw	77	;'M'
  1465  0432  3454               	retlw	84	;'T'
  1466  0433  344B               	retlw	75	;'K'
  1467  0434  3433               	retlw	51	;'3'
  1468  0435  3431               	retlw	49	;'1'
  1469  0436  3434               	retlw	52	;'4'
  1470  0437  342C               	retlw	44	;','
  1471  0438  3430               	retlw	48	;'0'
  1472  0439  342C               	retlw	44	;','
  1473  043A  3430               	retlw	48	;'0'
  1474  043B  342C               	retlw	44	;','
  1475  043C  3431               	retlw	49	;'1'
  1476  043D  342C               	retlw	44	;','
  1477  043E  3430               	retlw	48	;'0'
  1478  043F  342C               	retlw	44	;','
  1479  0440  3430               	retlw	48	;'0'
  1480  0441  342C               	retlw	44	;','
  1481  0442  3430               	retlw	48	;'0'
  1482  0443  342C               	retlw	44	;','
  1483  0444  3430               	retlw	48	;'0'
  1484  0445  342C               	retlw	44	;','
  1485  0446  3430               	retlw	48	;'0'
  1486  0447  342C               	retlw	44	;','
  1487  0448  3430               	retlw	48	;'0'
  1488  0449  342C               	retlw	44	;','
  1489  044A  3430               	retlw	48	;'0'
  1490  044B  342C               	retlw	44	;','
  1491  044C  3430               	retlw	48	;'0'
  1492  044D  342C               	retlw	44	;','
  1493  044E  3430               	retlw	48	;'0'
  1494  044F  342C               	retlw	44	;','
  1495  0450  3430               	retlw	48	;'0'
  1496  0451  342C               	retlw	44	;','
  1497  0452  3430               	retlw	48	;'0'
  1498  0453  342C               	retlw	44	;','
  1499  0454  3430               	retlw	48	;'0'
  1500  0455  342C               	retlw	44	;','
  1501  0456  3430               	retlw	48	;'0'
  1502  0457  342C               	retlw	44	;','
  1503  0458  3430               	retlw	48	;'0'
  1504  0459  342C               	retlw	44	;','
  1505  045A  3430               	retlw	48	;'0'
  1506  045B  342C               	retlw	44	;','
  1507  045C  3430               	retlw	48	;'0'
  1508  045D  342A               	retlw	42	;'*'
  1509  045E  3432               	retlw	50	;'2'
  1510  045F  3439               	retlw	57	;'9'
  1511  0460  340D               	retlw	13
  1512  0461  340A               	retlw	10
  1513  0462  3400               	retlw	0
  1514  0463                     STR_2:	
  1515  0463  3424               	retlw	36	;'$'
  1516  0464  3450               	retlw	80	;'P'
  1517  0465  344D               	retlw	77	;'M'
  1518  0466  3454               	retlw	84	;'T'
  1519  0467  344B               	retlw	75	;'K'
  1520  0468  3432               	retlw	50	;'2'
  1521  0469  3432               	retlw	50	;'2'
  1522  046A  3430               	retlw	48	;'0'
  1523  046B  342C               	retlw	44	;','
  1524  046C  3431               	retlw	49	;'1'
  1525  046D  3430               	retlw	48	;'0'
  1526  046E  3430               	retlw	48	;'0'
  1527  046F  342A               	retlw	42	;'*'
  1528  0470  3432               	retlw	50	;'2'
  1529  0471  3446               	retlw	70	;'F'
  1530  0472  340D               	retlw	13
  1531  0473  340A               	retlw	10
  1532  0474  3400               	retlw	0
  1533                           
  1534                           ; #config settings
  1535  0000                     
  1536                           	psect	cinit
  1537  0025                     start_initialization:	
  1538  0025                     __initialization:	
  1539                           
  1540                           ; Initialize objects allocated to BANK0
  1541  0025  268E               	fcall	__pidataBANK0	;fetch initializer
  1542  0026  00EC               	movwf	__pdataBANK0& (0+127)
  1543                           
  1544                           ; Clear objects allocated to COMMON
  1545  0027  01F0               	clrf	__pbssCOMMON& (0+127)
  1546  0028  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1547  0029  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1548  002A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1549  002B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1550                           
  1551                           ; Clear objects allocated to BANK0
  1552  002C  3049               	movlw	low __pbssBANK0
  1553  002D  0084               	movwf	4
  1554  002E  3000               	movlw	high __pbssBANK0
  1555  002F  0085               	movwf	5
  1556  0030  3023               	movlw	35
  1557  0031  2677               	fcall	clear_ram0
  1558  0032                     end_of_initialization:	
  1559                           ;End of C runtime variable initialization code
  1560                           
  1561  0032                     __end_of__initialization:	
  1562  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1563  0033  0020               	movlb	0
  1564  0034  29B6               	ljmp	_main	;jump to C main() function
  1565                           
  1566                           	psect	bssCOMMON
  1567  0070                     __pbssCOMMON:	
  1568  0070                     _b_last_state:	
  1569  0070                     	ds	2
  1570  0072                     _b_count_pressed:	
  1571  0072                     	ds	1
  1572  0073                     _eusartRxCount:	
  1573  0073                     	ds	1
  1574  0074                     _eusartTxBufferRemaining:	
  1575  0074                     	ds	1
  1576                           
  1577                           	psect	bssBANK0
  1578  0049                     __pbssBANK0:	
  1579  0049                     _eusartRxBuffer:	
  1580  0049                     	ds	8
  1581  0051                     _eusartTxBuffer:	
  1582  0051                     	ds	8
  1583  0059                     _speed:	
  1584  0059                     	ds	3
  1585  005C                     TMR0_ISR@CountCallBack:	
  1586  005C                     	ds	2
  1587  005E                     _TMR0_InterruptHandler:	
  1588  005E                     	ds	2
  1589  0060                     _LED_counter:	
  1590  0060                     	ds	1
  1591  0061                     _b_confirmed_state:	
  1592  0061                     	ds	1
  1593  0062                     _b_count_released:	
  1594  0062                     	ds	1
  1595  0063                     _b_has_once_been_released:	
  1596  0063                     	ds	1
  1597  0064                     _b_push_confirmed:	
  1598  0064                     	ds	1
  1599  0065                     _b_release_confirmed:	
  1600  0065                     	ds	1
  1601  0066                     _eusartRxHead:	
  1602  0066                     	ds	1
  1603  0067                     _eusartRxTail:	
  1604  0067                     	ds	1
  1605  0068                     _eusartTxHead:	
  1606  0068                     	ds	1
  1607  0069                     _eusartTxTail:	
  1608  0069                     	ds	1
  1609  006A                     _speed_units:	
  1610  006A                     	ds	1
  1611  006B                     _timer0ReloadVal:	
  1612  006B                     	ds	1
  1613                           
  1614                           	psect	dataBANK0
  1615  006C                     __pdataBANK0:	
  1616  006C                     _LED_state:	
  1617  006C                     	ds	1
  1618                           
  1619                           	psect	clrtext
  1620  0677                     clear_ram0:	
  1621                           ;	Called with FSR0 containing the base address, and
  1622                           ;	WREG with the size to clear
  1623                           
  1624  0677  0064               	clrwdt	;clear the watchdog before getting into this loop
  1625  0678                     clrloop0:	
  1626  0678  0180               	clrf	0	;clear RAM location pointed to by FSR
  1627  0679  3101               	addfsr 0,1
  1628  067A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1629  067B  2E78               	goto	clrloop0	;have we reached the end yet?
  1630  067C  3400               	retlw	0	;all done for this memory range, return
  1631                           
  1632                           	psect	cstackBANK1
  1633  00A0                     __pcstackBANK1:	
  1634  00A0                     main@up:	
  1635                           
  1636                           ; 1 bytes @ 0x0
  1637  00A0                     	ds	1
  1638  00A1                     main@tmp:	
  1639                           
  1640                           ; 1 bytes @ 0x1
  1641  00A1                     	ds	1
  1642  00A2                     main@tmp_590:	
  1643                           
  1644                           ; 1 bytes @ 0x2
  1645  00A2                     	ds	1
  1646  00A3                     main@tmp_592:	
  1647                           
  1648                           ; 1 bytes @ 0x3
  1649  00A3                     	ds	1
  1650  00A4                     main@tmp_593:	
  1651                           
  1652                           ; 1 bytes @ 0x4
  1653  00A4                     	ds	1
  1654  00A5                     main@motor_load:	
  1655                           
  1656                           ; 2 bytes @ 0x5
  1657  00A5                     	ds	2
  1658                           
  1659                           	psect	cstackCOMMON
  1660  0075                     __pcstackCOMMON:	
  1661  0075                     ?_TMR2_StartTimer:	
  1662  0075                     ?_TMR0_DefaultInterruptHandler:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0075                     ??_TMR0_DefaultInterruptHandler:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0075                     ?_TMR0_CallBack:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0075                     ?_OSCILLATOR_Initialize:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0075                     ?_my10msTimerISR:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0075                     ?_LED_set_state:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0075                     ?_LED_update_loop:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0075                     ??_LED_update_loop:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0075                     ?_button_update_loop:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0075                     ?_TMR2_Initialize:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692  0075                     ?_EUSART_Initialize:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0075                     ?_EUSART_Read:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0075                     ?_EUSART_Write:	
  1699                           ; 1 bytes @ 0x0
  1700                           
  1701  0075                     ?_putch:	
  1702                           ; 1 bytes @ 0x0
  1703                           
  1704  0075                     ?_EUSART_Transmit_ISR:	
  1705                           ; 1 bytes @ 0x0
  1706                           
  1707  0075                     ??_EUSART_Transmit_ISR:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0075                     ?_EUSART_Receive_ISR:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0075                     ??_EUSART_Receive_ISR:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0075                     ?_EPWM_Initialize:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0075                     ?_TMR0_Initialize:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0075                     ?_TMR0_ISR:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0075                     ?_PIN_MANAGER_Initialize:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0075                     ?_SYSTEM_Initialize:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0075                     ?_INTERRUPT_InterruptManager:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0075                     ?_GPS_Initialize:	
  1735                           ; 1 bytes @ 0x0
  1736                           
  1737  0075                     ?_GPS_read_speed:	
  1738                           ; 1 bytes @ 0x0
  1739                           
  1740  0075                     ?_main:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0075                     ?_get_button_state:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0075                     ??_get_button_state:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0075                     get_button_state@state:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752                           
  1753                           ; 1 bytes @ 0x0
  1754  0075                     	ds	1
  1755  0076                     ??_button_update_loop:	
  1756                           
  1757                           ; 1 bytes @ 0x1
  1758  0076                     	ds	2
  1759  0078                     button_update_loop@current_state:	
  1760                           
  1761                           ; 1 bytes @ 0x3
  1762  0078                     	ds	1
  1763  0079                     ??_TMR0_CallBack:	
  1764  0079                     ??_my10msTimerISR:	
  1765                           ; 1 bytes @ 0x4
  1766                           
  1767  0079                     ??_TMR0_ISR:	
  1768                           ; 1 bytes @ 0x4
  1769                           
  1770  0079                     ??_INTERRUPT_InterruptManager:	
  1771                           ; 1 bytes @ 0x4
  1772                           
  1773                           
  1774                           ; 1 bytes @ 0x4
  1775  0079                     	ds	1
  1776                           
  1777                           	psect	cstackBANK0
  1778  0020                     __pcstackBANK0:	
  1779  0020                     ??_TMR2_StartTimer:	
  1780  0020                     ?_TMR0_SetInterruptHandler:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  0020                     ??_OSCILLATOR_Initialize:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  0020                     ??_LED_set_state:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  0020                     ??_TMR2_Initialize:	
  1790                           ; 1 bytes @ 0x0
  1791                           
  1792  0020                     ??_EUSART_Initialize:	
  1793                           ; 1 bytes @ 0x0
  1794                           
  1795  0020                     ??_EUSART_Read:	
  1796                           ; 1 bytes @ 0x0
  1797                           
  1798  0020                     ??_EUSART_Write:	
  1799                           ; 1 bytes @ 0x0
  1800                           
  1801  0020                     ??_EPWM_Initialize:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0020                     ?_EPWM_LoadDutyValue:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0020                     ??_PIN_MANAGER_Initialize:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0020                     ?___lmul:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0020                     EPWM_LoadDutyValue@dutyValue:	
  1814                           ; 4 bytes @ 0x0
  1815                           
  1816  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1817                           ; 2 bytes @ 0x0
  1818                           
  1819  0020                     ___lmul@multiplier:	
  1820                           ; 2 bytes @ 0x0
  1821                           
  1822                           
  1823                           ; 4 bytes @ 0x0
  1824  0020                     	ds	1
  1825  0021                     EUSART_Read@readValue:	
  1826  0021                     EUSART_Write@txData:	
  1827                           ; 1 bytes @ 0x1
  1828                           
  1829  0021                     LED_set_state@new_state:	
  1830                           ; 1 bytes @ 0x1
  1831                           
  1832                           
  1833                           ; 1 bytes @ 0x1
  1834  0021                     	ds	1
  1835  0022                     ??_TMR0_SetInterruptHandler:	
  1836  0022                     ??_putch:	
  1837                           ; 1 bytes @ 0x2
  1838                           
  1839  0022                     ??_EPWM_LoadDutyValue:	
  1840                           ; 1 bytes @ 0x2
  1841                           
  1842  0022                     ??_TMR0_Initialize:	
  1843                           ; 1 bytes @ 0x2
  1844                           
  1845  0022                     ??_GPS_read_speed:	
  1846                           ; 1 bytes @ 0x2
  1847                           
  1848  0022                     putch@txData:	
  1849                           ; 1 bytes @ 0x2
  1850                           
  1851                           
  1852                           ; 1 bytes @ 0x2
  1853  0022                     	ds	1
  1854  0023                     ??_SYSTEM_Initialize:	
  1855  0023                     ?_printf:	
  1856                           ; 1 bytes @ 0x3
  1857                           
  1858  0023                     GPS_read_speed@no_more_checksum:	
  1859                           ; 2 bytes @ 0x3
  1860                           
  1861  0023                     printf@f:	
  1862                           ; 1 bytes @ 0x3
  1863                           
  1864                           
  1865                           ; 2 bytes @ 0x3
  1866  0023                     	ds	1
  1867  0024                     GPS_read_speed@checksum:	
  1868  0024                     ___lmul@multiplicand:	
  1869                           ; 1 bytes @ 0x4
  1870                           
  1871                           
  1872                           ; 4 bytes @ 0x4
  1873  0024                     	ds	1
  1874  0025                     ??_printf:	
  1875  0025                     GPS_read_speed@buffer:	
  1876                           ; 1 bytes @ 0x5
  1877                           
  1878                           
  1879                           ; 6 bytes @ 0x5
  1880  0025                     	ds	3
  1881  0028                     ??___lmul:	
  1882  0028                     printf@ap:	
  1883                           ; 1 bytes @ 0x8
  1884                           
  1885  0028                     ___lmul@product:	
  1886                           ; 1 bytes @ 0x8
  1887                           
  1888                           
  1889                           ; 4 bytes @ 0x8
  1890  0028                     	ds	1
  1891  0029                     printf@c:	
  1892                           
  1893                           ; 1 bytes @ 0x9
  1894  0029                     	ds	1
  1895  002A                     ??_GPS_Initialize:	
  1896                           
  1897                           ; 1 bytes @ 0xA
  1898  002A                     	ds	1
  1899  002B                     GPS_read_speed@i_buff:	
  1900                           
  1901                           ; 1 bytes @ 0xB
  1902  002B                     	ds	1
  1903  002C                     ?_multiply_fp:	
  1904  002C                     GPS_read_speed@m_char:	
  1905                           ; 3 bytes @ 0xC
  1906                           
  1907  002C                     multiply_fp@n1:	
  1908                           ; 1 bytes @ 0xC
  1909                           
  1910                           
  1911                           ; 3 bytes @ 0xC
  1912  002C                     	ds	1
  1913  002D                     GPS_Initialize@tmp:	
  1914                           
  1915                           ; 1 bytes @ 0xD
  1916  002D                     	ds	2
  1917  002F                     multiply_fp@n2:	
  1918                           
  1919                           ; 3 bytes @ 0xF
  1920  002F                     	ds	3
  1921  0032                     ??_multiply_fp:	
  1922                           
  1923                           ; 1 bytes @ 0x12
  1924  0032                     	ds	10
  1925  003C                     multiply_fp@res:	
  1926                           
  1927                           ; 4 bytes @ 0x1C
  1928  003C                     	ds	4
  1929  0040                     multiply_fp@n1_fra:	
  1930                           
  1931                           ; 3 bytes @ 0x20
  1932  0040                     	ds	3
  1933  0043                     multiply_fp@n2_fra:	
  1934                           
  1935                           ; 3 bytes @ 0x23
  1936  0043                     	ds	3
  1937  0046                     ??_main:	
  1938                           
  1939                           ; 1 bytes @ 0x26
  1940  0046                     	ds	3
  1941                           
  1942                           	psect	maintext
  1943  01B6                     __pmaintext:	
  1944 ;;
  1945 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1946 ;;
  1947 ;; *************** function _main *****************
  1948 ;; Defined at:
  1949 ;;		line 271 in file "main.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  tmp             1    4[BANK1 ] unsigned char 
  1954 ;;  tmp             1    3[BANK1 ] unsigned char 
  1955 ;;  tmp             1    2[BANK1 ] unsigned char 
  1956 ;;  tmp             1    1[BANK1 ] unsigned char 
  1957 ;;  motor_load      2    5[BANK1 ] unsigned int 
  1958 ;;  up              1    0[BANK1 ] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : B1F/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMMON   BANK0   BANK1
  1968 ;;      Params:         0       0       0
  1969 ;;      Locals:         0       0       7
  1970 ;;      Temps:          0       3       0
  1971 ;;      Totals:         0       3       7
  1972 ;;Total ram usage:       10 bytes
  1973 ;; Hardware stack levels required when called:   10
  1974 ;; This function calls:
  1975 ;;		_EPWM_LoadDutyValue
  1976 ;;		_GPS_Initialize
  1977 ;;		_GPS_read_speed
  1978 ;;		_LED_set_state
  1979 ;;		_SYSTEM_Initialize
  1980 ;;		_TMR0_SetInterruptHandler
  1981 ;;		_TMR2_StartTimer
  1982 ;;		_multiply_fp
  1983 ;; This function is called by:
  1984 ;;		Startup code after reset
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           
  1989                           ;psect for function _main
  1990  01B6                     _main:	
  1991                           
  1992                           ;main.c: 274: SYSTEM_Initialize();
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1996  01B6  2670               	fcall	_SYSTEM_Initialize
  1997                           
  1998                           ;main.c: 275: TMR0_SetInterruptHandler(my10msTimerISR);
  1999  01B7  308B               	movlw	low _my10msTimerISR
  2000  01B8  0020               	movlb	0	; select bank0
  2001  01B9  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2002  01BA  3006               	movlw	high _my10msTimerISR
  2003  01BB  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2004  01BC  267D               	fcall	_TMR0_SetInterruptHandler
  2005                           
  2006                           ;main.c: 277: (INTCONbits.GIE = 1);
  2007  01BD  178B               	bsf	11,7	;volatile
  2008                           
  2009                           ;main.c: 279: (INTCONbits.PEIE = 1);
  2010  01BE  170B               	bsf	11,6	;volatile
  2011                           
  2012                           ;main.c: 281: LED_set_state(manual_mode);
  2013  01BF  3004               	movlw	4
  2014  01C0  2532               	fcall	_LED_set_state
  2015                           
  2016                           ;main.c: 282: do { LATA5 = 0; } while(0);
  2017  01C1  0022               	movlb	2	; select bank2
  2018  01C2  128C               	bcf	12,5	;volatile
  2019                           
  2020                           ;main.c: 283: for(unsigned char tmp=0;tmp<(10*3);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2021  01C3  0021               	movlb	1	; select bank1
  2022  01C4  01A1               	clrf	main@tmp^(0+128)
  2023  01C5  301E               	movlw	30
  2024  01C6  0221               	subwf	main@tmp^(0+128),w
  2025  01C7  1803               	btfsc	3,0
  2026  01C8  29E0               	goto	l3177
  2027  01C9                     l3171:	
  2028  01C9  3005               	movlw	5
  2029  01CA  0020               	movlb	0	; select bank0
  2030  01CB  00C8               	movwf	??_main+2
  2031  01CC  300F               	movlw	15
  2032  01CD  00C7               	movwf	??_main+1
  2033  01CE  30F4               	movlw	244
  2034  01CF  00C6               	movwf	??_main
  2035  01D0                     u3297:	
  2036  01D0  0BC6               	decfsz	??_main,f
  2037  01D1  29D0               	goto	u3297
  2038  01D2  0BC7               	decfsz	??_main+1,f
  2039  01D3  29D0               	goto	u3297
  2040  01D4  0BC8               	decfsz	??_main+2,f
  2041  01D5  29D0               	goto	u3297
  2042  01D6  3001               	movlw	1
  2043  01D7  0020               	movlb	0	; select bank0
  2044  01D8  00C6               	movwf	??_main
  2045  01D9  0846               	movf	??_main,w
  2046  01DA  0021               	movlb	1	; select bank1
  2047  01DB  07A1               	addwf	main@tmp^(0+128),f
  2048  01DC  301E               	movlw	30
  2049  01DD  0221               	subwf	main@tmp^(0+128),w
  2050  01DE  1C03               	skipc
  2051  01DF  29C9               	goto	l3171
  2052  01E0                     l3177:	
  2053                           
  2054                           ;main.c: 285: GPS_Initialize();
  2055  01E0  2475               	fcall	_GPS_Initialize
  2056                           
  2057                           ;main.c: 287: speed = 0;
  2058  01E1  3000               	movlw	0
  2059  01E2  0020               	movlb	0	; select bank0
  2060  01E3  00D9               	movwf	_speed
  2061  01E4  3000               	movlw	0
  2062  01E5  00DA               	movwf	_speed+1
  2063  01E6  3000               	movlw	0
  2064  01E7  00DB               	movwf	_speed+2
  2065  01E8                     l3181:	
  2066                           ;main.c: 289: while (1)
  2067                           
  2068                           
  2069                           ;main.c: 290: {
  2070                           ;main.c: 292: if (GPS_read_speed())
  2071  01E8  2035               	fcall	_GPS_read_speed
  2072  01E9  3A00               	xorlw	0
  2073  01EA  1903               	skipnz
  2074  01EB  2A14               	goto	l3191
  2075                           
  2076                           ;main.c: 293: {
  2077                           ;main.c: 295: if (speed_units == MPH)
  2078  01EC  0020               	movlb	0	; select bank0
  2079  01ED  086A               	movf	_speed_units,w
  2080  01EE  1D03               	btfss	3,2
  2081  01EF  2A08               	goto	l3187
  2082                           
  2083                           ;main.c: 296: speed = multiply_fp(speed, ratio_mph);
  2084  01F0  0859               	movf	_speed,w
  2085  01F1  00AC               	movwf	multiply_fp@n1
  2086  01F2  085A               	movf	_speed+1,w
  2087  01F3  00AD               	movwf	multiply_fp@n1+1
  2088  01F4  085B               	movf	_speed+2,w
  2089  01F5  00AE               	movwf	multiply_fp@n1+2
  2090  01F6  302A               	movlw	low (_ratio_mph| (0+32768))
  2091  01F7  0084               	movwf	4
  2092  01F8  3084               	movlw	high (_ratio_mph| (0+32768))
  2093  01F9  0085               	movwf	5
  2094  01FA  3F00               	moviw [0]fsr0
  2095  01FB  00AF               	movwf	multiply_fp@n2
  2096  01FC  3F01               	moviw [1]fsr0
  2097  01FD  00B0               	movwf	multiply_fp@n2+1
  2098  01FE  3F02               	moviw [2]fsr0
  2099  01FF  00B1               	movwf	multiply_fp@n2+2
  2100  0200  22DD               	fcall	_multiply_fp
  2101  0201  0020               	movlb	0	; select bank0
  2102  0202  082C               	movf	?_multiply_fp,w
  2103  0203  00D9               	movwf	_speed
  2104  0204  082D               	movf	?_multiply_fp+1,w
  2105  0205  00DA               	movwf	_speed+1
  2106  0206  082E               	movf	?_multiply_fp+2,w
  2107  0207  00DB               	movwf	_speed+2
  2108  0208                     l3187:	
  2109                           ;main.c: 298: do { LATA5 = 1; } while(0);
  2110                           
  2111  0208  0022               	movlb	2	; select bank2
  2112  0209  168C               	bsf	12,5	;volatile
  2113                           
  2114                           ;main.c: 299: _delay((unsigned long)((20)*(32000000/4000.0)));
  2115  020A  30D0               	movlw	208
  2116  020B  0020               	movlb	0	; select bank0
  2117  020C  00C7               	movwf	??_main+1
  2118  020D  30C9               	movlw	201
  2119  020E  00C6               	movwf	??_main
  2120  020F                     u3307:	
  2121  020F  0BC6               	decfsz	??_main,f
  2122  0210  2A0F               	goto	u3307
  2123  0211  0BC7               	decfsz	??_main+1,f
  2124  0212  2A0F               	goto	u3307
  2125  0213  3200               	nop2
  2126  0214                     l3191:	
  2127                           ;main.c: 300: }
  2128                           ;main.c: 301: do { LATA5 = 0; } while(0);
  2129                           
  2130  0214  0022               	movlb	2	; select bank2
  2131  0215  128C               	bcf	12,5	;volatile
  2132  0216  29E8               	goto	l3181
  2133  0217                     l3203:	
  2134                           ;main.c: 314: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2135                           
  2136                           ;main.c: 313: TMR2_StartTimer();
  2137                           
  2138                           ;main.c: 312: EPWM_LoadDutyValue(1023-motor_load);
  2139                           
  2140                           ;main.c: 306: }
  2141                           ;main.c: 311: uint16_t motor_load = 0;
  2142                           
  2143  0217  3005               	movlw	5
  2144  0218  0020               	movlb	0	; select bank0
  2145  0219  00C8               	movwf	??_main+2
  2146  021A  300F               	movlw	15
  2147  021B  00C7               	movwf	??_main+1
  2148  021C  30F4               	movlw	244
  2149  021D  00C6               	movwf	??_main
  2150  021E                     u3317:	
  2151  021E  0BC6               	decfsz	??_main,f
  2152  021F  2A1E               	goto	u3317
  2153  0220  0BC7               	decfsz	??_main+1,f
  2154  0221  2A1E               	goto	u3317
  2155  0222  0BC8               	decfsz	??_main+2,f
  2156  0223  2A1E               	goto	u3317
  2157  0224  3001               	movlw	1
  2158  0225  0020               	movlb	0	; select bank0
  2159  0226  00C6               	movwf	??_main
  2160  0227  0846               	movf	??_main,w
  2161  0228  0021               	movlb	1	; select bank1
  2162  0229  07A2               	addwf	main@tmp_590^(0+128),f
  2163  022A  3032               	movlw	50
  2164  022B  0222               	subwf	main@tmp_590^(0+128),w
  2165  022C  1C03               	skipc
  2166  022D  2A17               	goto	l3203
  2167                           
  2168                           ;main.c: 316: bool up = 1;
  2169  022E  01A0               	clrf	main@up^(0+128)
  2170  022F  0AA0               	incf	main@up^(0+128),f
  2171                           
  2172                           ;main.c: 336: EPWM_LoadDutyValue(0);
  2173  0230  3000               	movlw	0
  2174  0231  0020               	movlb	0	; select bank0
  2175  0232  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2176  0233  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2177  0234  2591               	fcall	_EPWM_LoadDutyValue
  2178                           
  2179                           ;main.c: 337: _delay((unsigned long)((10)*(32000000/4000.0)));
  2180  0235  3068               	movlw	104
  2181  0236  0020               	movlb	0	; select bank0
  2182  0237  00C7               	movwf	??_main+1
  2183  0238  30E4               	movlw	228
  2184  0239  00C6               	movwf	??_main
  2185  023A                     u3327:	
  2186  023A  0BC6               	decfsz	??_main,f
  2187  023B  2A3A               	goto	u3327
  2188  023C  0BC7               	decfsz	??_main+1,f
  2189  023D  2A3A               	goto	u3327
  2190  023E  0000               	nop
  2191                           
  2192                           ;main.c: 338: EPWM_LoadDutyValue(1023-148);
  2193  023F  306B               	movlw	107
  2194  0240  0020               	movlb	0	; select bank0
  2195  0241  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2196  0242  3003               	movlw	3
  2197  0243  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2198  0244  2591               	fcall	_EPWM_LoadDutyValue
  2199                           
  2200                           ;main.c: 339: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2201  0245  0021               	movlb	1	; select bank1
  2202  0246  01A3               	clrf	main@tmp_592^(0+128)
  2203  0247  3032               	movlw	50
  2204  0248  0223               	subwf	main@tmp_592^(0+128),w
  2205  0249  1803               	btfsc	3,0
  2206  024A  2A62               	goto	l3227
  2207  024B                     l3221:	
  2208  024B  3005               	movlw	5
  2209  024C  0020               	movlb	0	; select bank0
  2210  024D  00C8               	movwf	??_main+2
  2211  024E  300F               	movlw	15
  2212  024F  00C7               	movwf	??_main+1
  2213  0250  30F4               	movlw	244
  2214  0251  00C6               	movwf	??_main
  2215  0252                     u3337:	
  2216  0252  0BC6               	decfsz	??_main,f
  2217  0253  2A52               	goto	u3337
  2218  0254  0BC7               	decfsz	??_main+1,f
  2219  0255  2A52               	goto	u3337
  2220  0256  0BC8               	decfsz	??_main+2,f
  2221  0257  2A52               	goto	u3337
  2222  0258  3001               	movlw	1
  2223  0259  0020               	movlb	0	; select bank0
  2224  025A  00C6               	movwf	??_main
  2225  025B  0846               	movf	??_main,w
  2226  025C  0021               	movlb	1	; select bank1
  2227  025D  07A3               	addwf	main@tmp_592^(0+128),f
  2228  025E  3032               	movlw	50
  2229  025F  0223               	subwf	main@tmp_592^(0+128),w
  2230  0260  1C03               	skipc
  2231  0261  2A4B               	goto	l3221
  2232  0262                     l3227:	
  2233                           ;main.c: 340: while (1)
  2234                           
  2235                           
  2236                           ;main.c: 341: {
  2237                           ;main.c: 342: if (up == 1)
  2238  0262  0021               	movlb	1	; select bank1
  2239  0263  0320               	decf	main@up^(0+128),w
  2240  0264  1D03               	btfss	3,2
  2241  0265  2A6B               	goto	l3231
  2242                           
  2243                           ;main.c: 343: motor_load += 1;
  2244  0266  3001               	movlw	1
  2245  0267  07A5               	addwf	main@motor_load^(0+128),f
  2246  0268  3000               	movlw	0
  2247  0269  3DA6               	addwfc	(main@motor_load+1)^(0+128),f
  2248  026A  2A6F               	goto	l462
  2249  026B                     l3231:	
  2250                           
  2251                           ;main.c: 344: else
  2252                           ;main.c: 345: motor_load -= 1;
  2253  026B  3001               	movlw	1
  2254  026C  02A5               	subwf	main@motor_load^(0+128),f
  2255  026D  3000               	movlw	0
  2256  026E  3BA6               	subwfb	(main@motor_load+1)^(0+128),f
  2257  026F                     l462:	
  2258                           
  2259                           ;main.c: 346: if (motor_load > 300)
  2260  026F  3001               	movlw	1
  2261  0270  0226               	subwf	(main@motor_load+1)^(0+128),w
  2262  0271  302D               	movlw	45
  2263  0272  1903               	skipnz
  2264  0273  0225               	subwf	main@motor_load^(0+128),w
  2265  0274  1C03               	skipc
  2266  0275  2A78               	goto	l3235
  2267                           
  2268                           ;main.c: 347: up = 0;
  2269  0276  01A0               	clrf	main@up^(0+128)
  2270  0277  2AB0               	goto	l3257
  2271  0278                     l3235:	
  2272                           
  2273                           ;main.c: 348: else if (motor_load == 0)
  2274  0278  0825               	movf	main@motor_load^(0+128),w
  2275  0279  0426               	iorwf	(main@motor_load+1)^(0+128),w
  2276  027A  1D03               	btfss	3,2
  2277  027B  2AB0               	goto	l3257
  2278                           
  2279                           ;main.c: 349: {
  2280                           ;main.c: 350: up = 1;
  2281  027C  01A0               	clrf	main@up^(0+128)
  2282  027D  0AA0               	incf	main@up^(0+128),f
  2283                           
  2284                           ;main.c: 351: EPWM_LoadDutyValue(1023);
  2285  027E  30FF               	movlw	255
  2286  027F  0020               	movlb	0	; select bank0
  2287  0280  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2288  0281  3003               	movlw	3
  2289  0282  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2290  0283  2591               	fcall	_EPWM_LoadDutyValue
  2291                           
  2292                           ;main.c: 352: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2293  0284  0021               	movlb	1	; select bank1
  2294  0285  01A4               	clrf	main@tmp_593^(0+128)
  2295  0286  3032               	movlw	50
  2296  0287  0224               	subwf	main@tmp_593^(0+128),w
  2297  0288  1803               	btfsc	3,0
  2298  0289  2AA1               	goto	l3253
  2299  028A                     l3247:	
  2300  028A  3005               	movlw	5
  2301  028B  0020               	movlb	0	; select bank0
  2302  028C  00C8               	movwf	??_main+2
  2303  028D  300F               	movlw	15
  2304  028E  00C7               	movwf	??_main+1
  2305  028F  30F4               	movlw	244
  2306  0290  00C6               	movwf	??_main
  2307  0291                     u3347:	
  2308  0291  0BC6               	decfsz	??_main,f
  2309  0292  2A91               	goto	u3347
  2310  0293  0BC7               	decfsz	??_main+1,f
  2311  0294  2A91               	goto	u3347
  2312  0295  0BC8               	decfsz	??_main+2,f
  2313  0296  2A91               	goto	u3347
  2314  0297  3001               	movlw	1
  2315  0298  0020               	movlb	0	; select bank0
  2316  0299  00C6               	movwf	??_main
  2317  029A  0846               	movf	??_main,w
  2318  029B  0021               	movlb	1	; select bank1
  2319  029C  07A4               	addwf	main@tmp_593^(0+128),f
  2320  029D  3032               	movlw	50
  2321  029E  0224               	subwf	main@tmp_593^(0+128),w
  2322  029F  1C03               	skipc
  2323  02A0  2A8A               	goto	l3247
  2324  02A1                     l3253:	
  2325                           
  2326                           ;main.c: 354: EPWM_LoadDutyValue(0);
  2327  02A1  3000               	movlw	0
  2328  02A2  0020               	movlb	0	; select bank0
  2329  02A3  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2330  02A4  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2331  02A5  2591               	fcall	_EPWM_LoadDutyValue
  2332                           
  2333                           ;main.c: 355: _delay((unsigned long)((10)*(32000000/4000.0)));
  2334  02A6  3068               	movlw	104
  2335  02A7  0020               	movlb	0	; select bank0
  2336  02A8  00C7               	movwf	??_main+1
  2337  02A9  30E4               	movlw	228
  2338  02AA  00C6               	movwf	??_main
  2339  02AB                     u3357:	
  2340  02AB  0BC6               	decfsz	??_main,f
  2341  02AC  2AAB               	goto	u3357
  2342  02AD  0BC7               	decfsz	??_main+1,f
  2343  02AE  2AAB               	goto	u3357
  2344  02AF  0000               	nop
  2345  02B0                     l3257:	
  2346                           
  2347                           ;main.c: 356: }
  2348                           ;main.c: 357: if (motor_load < 148)
  2349  02B0  3000               	movlw	0
  2350  02B1  0021               	movlb	1	; select bank1
  2351  02B2  0226               	subwf	(main@motor_load+1)^(0+128),w
  2352  02B3  3094               	movlw	148
  2353  02B4  1903               	skipnz
  2354  02B5  0225               	subwf	main@motor_load^(0+128),w
  2355  02B6  1803               	skipnc
  2356  02B7  2ABD               	goto	l3261
  2357                           
  2358                           ;main.c: 358: EPWM_LoadDutyValue(1023-135);
  2359  02B8  3078               	movlw	120
  2360  02B9  0020               	movlb	0	; select bank0
  2361  02BA  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2362  02BB  3003               	movlw	3
  2363  02BC  2ACD               	goto	L1
  2364  02BD                     l3261:	
  2365                           
  2366                           ;main.c: 359: else
  2367                           ;main.c: 360: EPWM_LoadDutyValue(1023-motor_load);
  2368  02BD  0021               	movlb	1	; select bank1
  2369  02BE  0925               	comf	main@motor_load^(0+128),w
  2370  02BF  0020               	movlb	0	; select bank0
  2371  02C0  00C6               	movwf	??_main
  2372  02C1  0021               	movlb	1	; select bank1
  2373  02C2  0926               	comf	(main@motor_load+1)^(0+128),w
  2374  02C3  0020               	movlb	0	; select bank0
  2375  02C4  00C7               	movwf	??_main+1
  2376  02C5  0AC6               	incf	??_main,f
  2377  02C6  1903               	skipnz
  2378  02C7  0AC7               	incf	??_main+1,f
  2379  02C8  0846               	movf	??_main,w
  2380  02C9  3EFF               	addlw	255
  2381  02CA  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2382  02CB  3003               	movlw	3
  2383  02CC  3D47               	addwfc	??_main+1,w
  2384  02CD                     L1:	
  2385  02CD  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2386  02CE  2591               	fcall	_EPWM_LoadDutyValue
  2387                           
  2388                           ;main.c: 361: _delay((unsigned long)((50)*(32000000/4000.0)));
  2389  02CF  3003               	movlw	3
  2390  02D0  0020               	movlb	0	; select bank0
  2391  02D1  00C8               	movwf	??_main+2
  2392  02D2  3008               	movlw	8
  2393  02D3  00C7               	movwf	??_main+1
  2394  02D4  3078               	movlw	120
  2395  02D5  00C6               	movwf	??_main
  2396  02D6                     u3367:	
  2397  02D6  0BC6               	decfsz	??_main,f
  2398  02D7  2AD6               	goto	u3367
  2399  02D8  0BC7               	decfsz	??_main+1,f
  2400  02D9  2AD6               	goto	u3367
  2401  02DA  0BC8               	decfsz	??_main+2,f
  2402  02DB  2AD6               	goto	u3367
  2403  02DC  2A62               	goto	l3227
  2404  02DD                     __end_of_main:	
  2405                           
  2406                           	psect	text1
  2407  02DD                     __ptext1:	
  2408 ;; *************** function _multiply_fp *****************
  2409 ;; Defined at:
  2410 ;;		line 38 in file "fixed_point.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  n1              3   12[BANK0 ] unsigned um
  2413 ;;  n2              3   15[BANK0 ] unsigned um
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  res             4   28[BANK0 ] unsigned long 
  2416 ;;  n2_fra          3   35[BANK0 ] unsigned um
  2417 ;;  n1_fra          3   32[BANK0 ] unsigned um
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  3   12[BANK0 ] unsigned um
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0, pclath, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMMON   BANK0   BANK1
  2427 ;;      Params:         0       6       0
  2428 ;;      Locals:         0      10       0
  2429 ;;      Temps:          0      10       0
  2430 ;;      Totals:         0      26       0
  2431 ;;Total ram usage:       26 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    7
  2434 ;; This function calls:
  2435 ;;		___lmul
  2436 ;; This function is called by:
  2437 ;;		_main
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           
  2442                           ;psect for function _multiply_fp
  2443  02DD                     _multiply_fp:	
  2444                           
  2445                           ;fixed_point.c: 40: t_fp n1_fra, n2_fra;
  2446                           ;fixed_point.c: 41: n1_fra = (n1 << (24-14)) >> (24-14);
  2447                           
  2448                           ;incstack = 0
  2449                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  2450  02DD  30FF               	movlw	255
  2451  02DE  0020               	movlb	0	; select bank0
  2452  02DF  00B2               	movwf	??_multiply_fp
  2453  02E0  303F               	movlw	63
  2454  02E1  00B3               	movwf	??_multiply_fp+1
  2455  02E2  3000               	movlw	0
  2456  02E3  00B4               	movwf	??_multiply_fp+2
  2457  02E4  082C               	movf	multiply_fp@n1,w
  2458  02E5  05B2               	andwf	??_multiply_fp,f
  2459  02E6  082D               	movf	multiply_fp@n1+1,w
  2460  02E7  05B3               	andwf	??_multiply_fp+1,f
  2461  02E8  082E               	movf	multiply_fp@n1+2,w
  2462  02E9  05B4               	andwf	??_multiply_fp+2,f
  2463  02EA  0832               	movf	??_multiply_fp,w
  2464  02EB  00C0               	movwf	multiply_fp@n1_fra
  2465  02EC  0833               	movf	??_multiply_fp+1,w
  2466  02ED  00C1               	movwf	multiply_fp@n1_fra+1
  2467  02EE  0834               	movf	??_multiply_fp+2,w
  2468  02EF  00C2               	movwf	multiply_fp@n1_fra+2
  2469                           
  2470                           ;fixed_point.c: 42: n2_fra = (n2 << (24-14)) >> (24-14);
  2471  02F0  30FF               	movlw	255
  2472  02F1  00B2               	movwf	??_multiply_fp
  2473  02F2  303F               	movlw	63
  2474  02F3  00B3               	movwf	??_multiply_fp+1
  2475  02F4  3000               	movlw	0
  2476  02F5  00B4               	movwf	??_multiply_fp+2
  2477  02F6  082F               	movf	multiply_fp@n2,w
  2478  02F7  05B2               	andwf	??_multiply_fp,f
  2479  02F8  0830               	movf	multiply_fp@n2+1,w
  2480  02F9  05B3               	andwf	??_multiply_fp+1,f
  2481  02FA  0831               	movf	multiply_fp@n2+2,w
  2482  02FB  05B4               	andwf	??_multiply_fp+2,f
  2483  02FC  0832               	movf	??_multiply_fp,w
  2484  02FD  00C3               	movwf	multiply_fp@n2_fra
  2485  02FE  0833               	movf	??_multiply_fp+1,w
  2486  02FF  00C4               	movwf	multiply_fp@n2_fra+1
  2487  0300  0834               	movf	??_multiply_fp+2,w
  2488  0301  00C5               	movwf	multiply_fp@n2_fra+2
  2489                           
  2490                           ;fixed_point.c: 43: unsigned long long res = ((unsigned long long) (n1 >> 14) * (unsigne
      +                          d long long) (n2 >> 14))<<14;
  2491  0302  082C               	movf	multiply_fp@n1,w
  2492  0303  00B2               	movwf	??_multiply_fp
  2493  0304  082D               	movf	multiply_fp@n1+1,w
  2494  0305  00B3               	movwf	??_multiply_fp+1
  2495  0306  082E               	movf	multiply_fp@n1+2,w
  2496  0307  00B4               	movwf	??_multiply_fp+2
  2497  0308  300E               	movlw	14
  2498  0309                     u3095:	
  2499  0309  36B4               	lsrf	??_multiply_fp+2,f
  2500  030A  0CB3               	rrf	??_multiply_fp+1,f
  2501  030B  0CB2               	rrf	??_multiply_fp,f
  2502  030C  0B89               	decfsz	9,f
  2503  030D  2B09               	goto	u3095
  2504  030E  0832               	movf	??_multiply_fp,w
  2505  030F  00A0               	movwf	___lmul@multiplier
  2506  0310  0833               	movf	??_multiply_fp+1,w
  2507  0311  00A1               	movwf	___lmul@multiplier+1
  2508  0312  0834               	movf	??_multiply_fp+2,w
  2509  0313  00A2               	movwf	___lmul@multiplier+2
  2510  0314  01A3               	clrf	___lmul@multiplier+3
  2511  0315  082F               	movf	multiply_fp@n2,w
  2512  0316  00B5               	movwf	??_multiply_fp+3
  2513  0317  0830               	movf	multiply_fp@n2+1,w
  2514  0318  00B6               	movwf	??_multiply_fp+4
  2515  0319  0831               	movf	multiply_fp@n2+2,w
  2516  031A  00B7               	movwf	??_multiply_fp+5
  2517  031B  300E               	movlw	14
  2518  031C                     u3105:	
  2519  031C  36B7               	lsrf	??_multiply_fp+5,f
  2520  031D  0CB6               	rrf	??_multiply_fp+4,f
  2521  031E  0CB5               	rrf	??_multiply_fp+3,f
  2522  031F  0B89               	decfsz	9,f
  2523  0320  2B1C               	goto	u3105
  2524  0321  0835               	movf	??_multiply_fp+3,w
  2525  0322  00A4               	movwf	___lmul@multiplicand
  2526  0323  0836               	movf	??_multiply_fp+4,w
  2527  0324  00A5               	movwf	___lmul@multiplicand+1
  2528  0325  0837               	movf	??_multiply_fp+5,w
  2529  0326  00A6               	movwf	___lmul@multiplicand+2
  2530  0327  01A7               	clrf	___lmul@multiplicand+3
  2531  0328  24B6               	fcall	___lmul
  2532  0329  0020               	movlb	0	; select bank0
  2533  032A  0820               	movf	?___lmul,w
  2534  032B  00B8               	movwf	??_multiply_fp+6
  2535  032C  0821               	movf	?___lmul+1,w
  2536  032D  00B9               	movwf	??_multiply_fp+7
  2537  032E  0822               	movf	?___lmul+2,w
  2538  032F  00BA               	movwf	??_multiply_fp+8
  2539  0330  0823               	movf	?___lmul+3,w
  2540  0331  00BB               	movwf	??_multiply_fp+9
  2541  0332  300E               	movlw	14
  2542  0333                     u3115:	
  2543  0333  35B8               	lslf	??_multiply_fp+6,f
  2544  0334  0DB9               	rlf	??_multiply_fp+7,f
  2545  0335  0DBA               	rlf	??_multiply_fp+8,f
  2546  0336  0DBB               	rlf	??_multiply_fp+9,f
  2547  0337  0B89               	decfsz	9,f
  2548  0338  2B33               	goto	u3115
  2549  0339  083B               	movf	??_multiply_fp+9,w
  2550  033A  00BF               	movwf	multiply_fp@res+3
  2551  033B  083A               	movf	??_multiply_fp+8,w
  2552  033C  00BE               	movwf	multiply_fp@res+2
  2553  033D  0839               	movf	??_multiply_fp+7,w
  2554  033E  00BD               	movwf	multiply_fp@res+1
  2555  033F  0838               	movf	??_multiply_fp+6,w
  2556  0340  00BC               	movwf	multiply_fp@res
  2557                           
  2558                           ;fixed_point.c: 44: res+ = ((unsigned long long) (n1 >> 14) * (unsigned long long) n2_fr
      +                          a);
  2559  0341  082C               	movf	multiply_fp@n1,w
  2560  0342  00B2               	movwf	??_multiply_fp
  2561  0343  082D               	movf	multiply_fp@n1+1,w
  2562  0344  00B3               	movwf	??_multiply_fp+1
  2563  0345  082E               	movf	multiply_fp@n1+2,w
  2564  0346  00B4               	movwf	??_multiply_fp+2
  2565  0347  300E               	movlw	14
  2566  0348                     u3125:	
  2567  0348  36B4               	lsrf	??_multiply_fp+2,f
  2568  0349  0CB3               	rrf	??_multiply_fp+1,f
  2569  034A  0CB2               	rrf	??_multiply_fp,f
  2570  034B  0B89               	decfsz	9,f
  2571  034C  2B48               	goto	u3125
  2572  034D  0832               	movf	??_multiply_fp,w
  2573  034E  00A0               	movwf	___lmul@multiplier
  2574  034F  0833               	movf	??_multiply_fp+1,w
  2575  0350  00A1               	movwf	___lmul@multiplier+1
  2576  0351  0834               	movf	??_multiply_fp+2,w
  2577  0352  00A2               	movwf	___lmul@multiplier+2
  2578  0353  01A3               	clrf	___lmul@multiplier+3
  2579  0354  0843               	movf	multiply_fp@n2_fra,w
  2580  0355  00A4               	movwf	___lmul@multiplicand
  2581  0356  0844               	movf	multiply_fp@n2_fra+1,w
  2582  0357  00A5               	movwf	___lmul@multiplicand+1
  2583  0358  0845               	movf	multiply_fp@n2_fra+2,w
  2584  0359  00A6               	movwf	___lmul@multiplicand+2
  2585  035A  01A7               	clrf	___lmul@multiplicand+3
  2586  035B  24B6               	fcall	___lmul
  2587  035C  0020               	movlb	0	; select bank0
  2588  035D  0820               	movf	?___lmul,w
  2589  035E  07BC               	addwf	multiply_fp@res,f
  2590  035F  0821               	movf	?___lmul+1,w
  2591  0360  3DBD               	addwfc	multiply_fp@res+1,f
  2592  0361  0822               	movf	?___lmul+2,w
  2593  0362  3DBE               	addwfc	multiply_fp@res+2,f
  2594  0363  0823               	movf	?___lmul+3,w
  2595  0364  3DBF               	addwfc	multiply_fp@res+3,f
  2596                           
  2597                           ;fixed_point.c: 45: res+ = ((unsigned long long) (n2 >> 14) * (unsigned long long) n1_fr
      +                          a);
  2598  0365  082F               	movf	multiply_fp@n2,w
  2599  0366  00B2               	movwf	??_multiply_fp
  2600  0367  0830               	movf	multiply_fp@n2+1,w
  2601  0368  00B3               	movwf	??_multiply_fp+1
  2602  0369  0831               	movf	multiply_fp@n2+2,w
  2603  036A  00B4               	movwf	??_multiply_fp+2
  2604  036B  300E               	movlw	14
  2605  036C                     u3135:	
  2606  036C  36B4               	lsrf	??_multiply_fp+2,f
  2607  036D  0CB3               	rrf	??_multiply_fp+1,f
  2608  036E  0CB2               	rrf	??_multiply_fp,f
  2609  036F  0B89               	decfsz	9,f
  2610  0370  2B6C               	goto	u3135
  2611  0371  0832               	movf	??_multiply_fp,w
  2612  0372  00A0               	movwf	___lmul@multiplier
  2613  0373  0833               	movf	??_multiply_fp+1,w
  2614  0374  00A1               	movwf	___lmul@multiplier+1
  2615  0375  0834               	movf	??_multiply_fp+2,w
  2616  0376  00A2               	movwf	___lmul@multiplier+2
  2617  0377  01A3               	clrf	___lmul@multiplier+3
  2618  0378  0840               	movf	multiply_fp@n1_fra,w
  2619  0379  00A4               	movwf	___lmul@multiplicand
  2620  037A  0841               	movf	multiply_fp@n1_fra+1,w
  2621  037B  00A5               	movwf	___lmul@multiplicand+1
  2622  037C  0842               	movf	multiply_fp@n1_fra+2,w
  2623  037D  00A6               	movwf	___lmul@multiplicand+2
  2624  037E  01A7               	clrf	___lmul@multiplicand+3
  2625  037F  24B6               	fcall	___lmul
  2626  0380  0020               	movlb	0	; select bank0
  2627  0381  0820               	movf	?___lmul,w
  2628  0382  07BC               	addwf	multiply_fp@res,f
  2629  0383  0821               	movf	?___lmul+1,w
  2630  0384  3DBD               	addwfc	multiply_fp@res+1,f
  2631  0385  0822               	movf	?___lmul+2,w
  2632  0386  3DBE               	addwfc	multiply_fp@res+2,f
  2633  0387  0823               	movf	?___lmul+3,w
  2634  0388  3DBF               	addwfc	multiply_fp@res+3,f
  2635                           
  2636                           ;fixed_point.c: 46: res+ = ((unsigned long long) n1_fra * (unsigned long long) n2_fra)>>
      +                          14;
  2637  0389  0840               	movf	multiply_fp@n1_fra,w
  2638  038A  00A0               	movwf	___lmul@multiplier
  2639  038B  0841               	movf	multiply_fp@n1_fra+1,w
  2640  038C  00A1               	movwf	___lmul@multiplier+1
  2641  038D  0842               	movf	multiply_fp@n1_fra+2,w
  2642  038E  00A2               	movwf	___lmul@multiplier+2
  2643  038F  01A3               	clrf	___lmul@multiplier+3
  2644  0390  0843               	movf	multiply_fp@n2_fra,w
  2645  0391  00A4               	movwf	___lmul@multiplicand
  2646  0392  0844               	movf	multiply_fp@n2_fra+1,w
  2647  0393  00A5               	movwf	___lmul@multiplicand+1
  2648  0394  0845               	movf	multiply_fp@n2_fra+2,w
  2649  0395  00A6               	movwf	___lmul@multiplicand+2
  2650  0396  01A7               	clrf	___lmul@multiplicand+3
  2651  0397  24B6               	fcall	___lmul
  2652  0398  0020               	movlb	0	; select bank0
  2653  0399  0820               	movf	?___lmul,w
  2654  039A  00B2               	movwf	??_multiply_fp
  2655  039B  0821               	movf	?___lmul+1,w
  2656  039C  00B3               	movwf	??_multiply_fp+1
  2657  039D  0822               	movf	?___lmul+2,w
  2658  039E  00B4               	movwf	??_multiply_fp+2
  2659  039F  0823               	movf	?___lmul+3,w
  2660  03A0  00B5               	movwf	??_multiply_fp+3
  2661  03A1  300E               	movlw	14
  2662  03A2                     u3145:	
  2663  03A2  36B5               	lsrf	??_multiply_fp+3,f
  2664  03A3  0CB4               	rrf	??_multiply_fp+2,f
  2665  03A4  0CB3               	rrf	??_multiply_fp+1,f
  2666  03A5  0CB2               	rrf	??_multiply_fp,f
  2667  03A6  0B89               	decfsz	9,f
  2668  03A7  2BA2               	goto	u3145
  2669  03A8  0832               	movf	??_multiply_fp,w
  2670  03A9  07BC               	addwf	multiply_fp@res,f
  2671  03AA  0833               	movf	??_multiply_fp+1,w
  2672  03AB  3DBD               	addwfc	multiply_fp@res+1,f
  2673  03AC  0834               	movf	??_multiply_fp+2,w
  2674  03AD  3DBE               	addwfc	multiply_fp@res+2,f
  2675  03AE  0835               	movf	??_multiply_fp+3,w
  2676  03AF  3DBF               	addwfc	multiply_fp@res+3,f
  2677                           
  2678                           ;fixed_point.c: 47: return res;
  2679  03B0  083C               	movf	multiply_fp@res,w
  2680  03B1  00AC               	movwf	?_multiply_fp
  2681  03B2  083D               	movf	multiply_fp@res+1,w
  2682  03B3  00AD               	movwf	?_multiply_fp+1
  2683  03B4  083E               	movf	multiply_fp@res+2,w
  2684  03B5  00AE               	movwf	?_multiply_fp+2
  2685  03B6  0008               	return
  2686  03B7                     __end_of_multiply_fp:	
  2687                           
  2688                           	psect	text2
  2689  04B6                     __ptext2:	
  2690 ;; *************** function ___lmul *****************
  2691 ;; Defined at:
  2692 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2695 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  product         4    8[BANK0 ] unsigned long 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  4    0[BANK0 ] unsigned long 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1
  2707 ;;      Params:         0       8       0
  2708 ;;      Locals:         0       4       0
  2709 ;;      Temps:          0       0       0
  2710 ;;      Totals:         0      12       0
  2711 ;;Total ram usage:       12 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    6
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_multiply_fp
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function ___lmul
  2723  04B6                     ___lmul:	
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2727  04B6  3000               	movlw	0
  2728  04B7  0020               	movlb	0	; select bank0
  2729  04B8  00AB               	movwf	___lmul@product+3
  2730  04B9  3000               	movlw	0
  2731  04BA  00AA               	movwf	___lmul@product+2
  2732  04BB  3000               	movlw	0
  2733  04BC  00A9               	movwf	___lmul@product+1
  2734  04BD  3000               	movlw	0
  2735  04BE  00A8               	movwf	___lmul@product
  2736  04BF                     l2829:	
  2737  04BF  1C20               	btfss	___lmul@multiplier,0
  2738  04C0  2CC9               	goto	l2833
  2739  04C1  0824               	movf	___lmul@multiplicand,w
  2740  04C2  07A8               	addwf	___lmul@product,f
  2741  04C3  0825               	movf	___lmul@multiplicand+1,w
  2742  04C4  3DA9               	addwfc	___lmul@product+1,f
  2743  04C5  0826               	movf	___lmul@multiplicand+2,w
  2744  04C6  3DAA               	addwfc	___lmul@product+2,f
  2745  04C7  0827               	movf	___lmul@multiplicand+3,w
  2746  04C8  3DAB               	addwfc	___lmul@product+3,f
  2747  04C9                     l2833:	
  2748  04C9  3001               	movlw	1
  2749  04CA                     u2535:	
  2750  04CA  35A4               	lslf	___lmul@multiplicand,f
  2751  04CB  0DA5               	rlf	___lmul@multiplicand+1,f
  2752  04CC  0DA6               	rlf	___lmul@multiplicand+2,f
  2753  04CD  0DA7               	rlf	___lmul@multiplicand+3,f
  2754  04CE  0B89               	decfsz	9,f
  2755  04CF  2CCA               	goto	u2535
  2756  04D0  3001               	movlw	1
  2757  04D1                     u2545:	
  2758  04D1  36A3               	lsrf	___lmul@multiplier+3,f
  2759  04D2  0CA2               	rrf	___lmul@multiplier+2,f
  2760  04D3  0CA1               	rrf	___lmul@multiplier+1,f
  2761  04D4  0CA0               	rrf	___lmul@multiplier,f
  2762  04D5  0B89               	decfsz	9,f
  2763  04D6  2CD1               	goto	u2545
  2764  04D7  0823               	movf	___lmul@multiplier+3,w
  2765  04D8  0422               	iorwf	___lmul@multiplier+2,w
  2766  04D9  0421               	iorwf	___lmul@multiplier+1,w
  2767  04DA  0420               	iorwf	___lmul@multiplier,w
  2768  04DB  1D03               	skipz
  2769  04DC  2CBF               	goto	l2829
  2770  04DD  082B               	movf	___lmul@product+3,w
  2771  04DE  00A3               	movwf	?___lmul+3
  2772  04DF  082A               	movf	___lmul@product+2,w
  2773  04E0  00A2               	movwf	?___lmul+2
  2774  04E1  0829               	movf	___lmul@product+1,w
  2775  04E2  00A1               	movwf	?___lmul+1
  2776  04E3  0828               	movf	___lmul@product,w
  2777  04E4  00A0               	movwf	?___lmul
  2778  04E5  0008               	return
  2779  04E6                     __end_of___lmul:	
  2780                           
  2781                           	psect	text3
  2782  0670                     __ptext3:	
  2783 ;; *************** function _SYSTEM_Initialize *****************
  2784 ;; Defined at:
  2785 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1
  2799 ;;      Params:         0       0       0
  2800 ;;      Locals:         0       0       0
  2801 ;;      Temps:          0       0       0
  2802 ;;      Totals:         0       0       0
  2803 ;;Total ram usage:        0 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    8
  2806 ;; This function calls:
  2807 ;;		_EPWM_Initialize
  2808 ;;		_EUSART_Initialize
  2809 ;;		_OSCILLATOR_Initialize
  2810 ;;		_PIN_MANAGER_Initialize
  2811 ;;		_TMR0_Initialize
  2812 ;;		_TMR2_Initialize
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           
  2819                           ;psect for function _SYSTEM_Initialize
  2820  0670                     _SYSTEM_Initialize:	
  2821                           
  2822                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2823                           
  2824                           ;incstack = 0
  2825                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2826  0670  25FE               	fcall	_PIN_MANAGER_Initialize
  2827                           
  2828                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2829  0671  2668               	fcall	_OSCILLATOR_Initialize
  2830                           
  2831                           ;mcc.c: 74: EPWM_Initialize();
  2832  0672  263C               	fcall	_EPWM_Initialize
  2833                           
  2834                           ;mcc.c: 75: TMR2_Initialize();
  2835  0673  265F               	fcall	_TMR2_Initialize
  2836                           
  2837                           ;mcc.c: 76: TMR0_Initialize();
  2838  0674  2614               	fcall	_TMR0_Initialize
  2839                           
  2840                           ;mcc.c: 77: EUSART_Initialize();
  2841  0675  25AD               	fcall	_EUSART_Initialize
  2842  0676  0008               	return
  2843  0677                     __end_of_SYSTEM_Initialize:	
  2844                           
  2845                           	psect	text4
  2846  065F                     __ptext4:	
  2847 ;; *************** function _TMR2_Initialize *****************
  2848 ;; Defined at:
  2849 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, status,0, pclath, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMMON   BANK0   BANK1
  2863 ;;      Params:         0       0       0
  2864 ;;      Locals:         0       0       0
  2865 ;;      Temps:          0       0       0
  2866 ;;      Totals:         0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    7
  2870 ;; This function calls:
  2871 ;;		_TMR2_StartTimer
  2872 ;; This function is called by:
  2873 ;;		_SYSTEM_Initialize
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           
  2878                           ;psect for function _TMR2_Initialize
  2879  065F                     _TMR2_Initialize:	
  2880                           
  2881                           ;tmr2.c: 62: T2CON = 0x02;
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2885  065F  3002               	movlw	2
  2886  0660  0020               	movlb	0	; select bank0
  2887  0661  009C               	movwf	28	;volatile
  2888                           
  2889                           ;tmr2.c: 65: PR2 = 0xFF;
  2890  0662  30FF               	movlw	255
  2891  0663  009B               	movwf	27	;volatile
  2892                           
  2893                           ;tmr2.c: 68: TMR2 = 0x00;
  2894  0664  019A               	clrf	26	;volatile
  2895                           
  2896                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  2897  0665  1091               	bcf	17,1	;volatile
  2898                           
  2899                           ;tmr2.c: 74: TMR2_StartTimer();
  2900  0666  2688               	fcall	_TMR2_StartTimer
  2901  0667  0008               	return
  2902  0668                     __end_of_TMR2_Initialize:	
  2903                           
  2904                           	psect	text5
  2905  0688                     __ptext5:	
  2906 ;; *************** function _TMR2_StartTimer *****************
  2907 ;; Defined at:
  2908 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		None
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1
  2922 ;;      Params:         0       0       0
  2923 ;;      Locals:         0       0       0
  2924 ;;      Temps:          0       0       0
  2925 ;;      Totals:         0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    6
  2929 ;; This function calls:
  2930 ;;		Nothing
  2931 ;; This function is called by:
  2932 ;;		_TMR2_Initialize
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           
  2938                           ;psect for function _TMR2_StartTimer
  2939  0688                     _TMR2_StartTimer:	
  2940                           
  2941                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _TMR2_StartTimer: []
  2945  0688  0020               	movlb	0	; select bank0
  2946  0689  151C               	bsf	28,2	;volatile
  2947  068A  0008               	return
  2948  068B                     __end_of_TMR2_StartTimer:	
  2949                           
  2950                           	psect	text6
  2951  0614                     __ptext6:	
  2952 ;; *************** function _TMR0_Initialize *****************
  2953 ;; Defined at:
  2954 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0, pclath, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMMON   BANK0   BANK1
  2968 ;;      Params:         0       0       0
  2969 ;;      Locals:         0       0       0
  2970 ;;      Temps:          0       1       0
  2971 ;;      Totals:         0       1       0
  2972 ;;Total ram usage:        1 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    7
  2975 ;; This function calls:
  2976 ;;		_TMR0_SetInterruptHandler
  2977 ;; This function is called by:
  2978 ;;		_SYSTEM_Initialize
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function _TMR0_Initialize
  2984  0614                     _TMR0_Initialize:	
  2985                           
  2986                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2990  0614  0021               	movlb	1	; select bank1
  2991  0615  0815               	movf	21,w	;volatile
  2992  0616  39C0               	andlw	192
  2993  0617  3817               	iorlw	23
  2994  0618  0095               	movwf	21	;volatile
  2995                           
  2996                           ;tmr0.c: 71: TMR0 = 0x64;
  2997  0619  3064               	movlw	100
  2998  061A  0020               	movlb	0	; select bank0
  2999  061B  0095               	movwf	21	;volatile
  3000                           
  3001                           ;tmr0.c: 74: timer0ReloadVal= 100;
  3002  061C  3064               	movlw	100
  3003  061D  00A2               	movwf	??_TMR0_Initialize
  3004  061E  0822               	movf	??_TMR0_Initialize,w
  3005  061F  00EB               	movwf	_timer0ReloadVal	;volatile
  3006                           
  3007                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  3008  0620  110B               	bcf	11,2	;volatile
  3009                           
  3010                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  3011  0621  168B               	bsf	11,5	;volatile
  3012                           
  3013                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3014  0622  308F               	movlw	low _TMR0_DefaultInterruptHandler
  3015  0623  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3016  0624  3006               	movlw	high _TMR0_DefaultInterruptHandler
  3017  0625  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3018  0626  267D               	fcall	_TMR0_SetInterruptHandler
  3019  0627  0008               	return
  3020  0628                     __end_of_TMR0_Initialize:	
  3021                           
  3022                           	psect	text7
  3023  067D                     __ptext7:	
  3024 ;; *************** function _TMR0_SetInterruptHandler *****************
  3025 ;; Defined at:
  3026 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  3029 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1
  3041 ;;      Params:         0       2       0
  3042 ;;      Locals:         0       0       0
  3043 ;;      Temps:          0       0       0
  3044 ;;      Totals:         0       2       0
  3045 ;;Total ram usage:        2 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    6
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_TMR0_Initialize
  3052 ;;		_main
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           
  3057                           ;psect for function _TMR0_SetInterruptHandler
  3058  067D                     _TMR0_SetInterruptHandler:	
  3059                           
  3060                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3064  067D  0020               	movlb	0	; select bank0
  3065  067E  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3066  067F  00DF               	movwf	_TMR0_InterruptHandler+1
  3067  0680  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3068  0681  00DE               	movwf	_TMR0_InterruptHandler
  3069  0682  0008               	return
  3070  0683                     __end_of_TMR0_SetInterruptHandler:	
  3071                           
  3072                           	psect	text8
  3073  05FE                     __ptext8:	
  3074 ;; *************** function _PIN_MANAGER_Initialize *****************
  3075 ;; Defined at:
  3076 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;		None
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg, status,2
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMMON   BANK0   BANK1
  3090 ;;      Params:         0       0       0
  3091 ;;      Locals:         0       0       0
  3092 ;;      Temps:          0       0       0
  3093 ;;      Totals:         0       0       0
  3094 ;;Total ram usage:        0 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    6
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_SYSTEM_Initialize
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           
  3105                           ;psect for function _PIN_MANAGER_Initialize
  3106  05FE                     _PIN_MANAGER_Initialize:	
  3107                           
  3108                           ;pin_manager.c: 51: LATA = 0x0;
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3112  05FE  0022               	movlb	2	; select bank2
  3113  05FF  018C               	clrf	12	;volatile
  3114                           
  3115                           ;pin_manager.c: 52: LATC = 0x0;
  3116  0600  018E               	clrf	14	;volatile
  3117                           
  3118                           ;pin_manager.c: 53: ANSELA = 0x7;
  3119  0601  3007               	movlw	7
  3120  0602  0023               	movlb	3	; select bank3
  3121  0603  008C               	movwf	12	;volatile
  3122                           
  3123                           ;pin_manager.c: 54: ANSELC = 0xF;
  3124  0604  300F               	movlw	15
  3125  0605  008E               	movwf	14	;volatile
  3126                           
  3127                           ;pin_manager.c: 55: WPUA = 0x3F;
  3128  0606  303F               	movlw	63
  3129  0607  0024               	movlb	4	; select bank4
  3130  0608  008C               	movwf	12	;volatile
  3131                           
  3132                           ;pin_manager.c: 56: WPUC = 0x3F;
  3133  0609  303F               	movlw	63
  3134  060A  008E               	movwf	14	;volatile
  3135                           
  3136                           ;pin_manager.c: 57: TRISC = 0x37;
  3137  060B  3037               	movlw	55
  3138  060C  0021               	movlb	1	; select bank1
  3139  060D  008E               	movwf	14	;volatile
  3140                           
  3141                           ;pin_manager.c: 58: TRISA = 0x1F;
  3142  060E  301F               	movlw	31
  3143  060F  008C               	movwf	12	;volatile
  3144                           
  3145                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  3146  0610  1395               	bcf	21,7	;volatile
  3147                           
  3148                           ;pin_manager.c: 61: APFCON = 0x00;
  3149  0611  0022               	movlb	2	; select bank2
  3150  0612  019D               	clrf	29	;volatile
  3151  0613  0008               	return
  3152  0614                     __end_of_PIN_MANAGER_Initialize:	
  3153                           
  3154                           	psect	text9
  3155  0668                     __ptext9:	
  3156 ;; *************** function _OSCILLATOR_Initialize *****************
  3157 ;; Defined at:
  3158 ;;		line 80 in file "mcc_generated_files/mcc.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;		None
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1
  3172 ;;      Params:         0       0       0
  3173 ;;      Locals:         0       0       0
  3174 ;;      Temps:          0       0       0
  3175 ;;      Totals:         0       0       0
  3176 ;;Total ram usage:        0 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    6
  3179 ;; This function calls:
  3180 ;;		Nothing
  3181 ;; This function is called by:
  3182 ;;		_SYSTEM_Initialize
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           
  3187                           ;psect for function _OSCILLATOR_Initialize
  3188  0668                     _OSCILLATOR_Initialize:	
  3189                           
  3190                           ;mcc.c: 83: OSCCON = 0x70;
  3191                           
  3192                           ;incstack = 0
  3193                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3194  0668  3070               	movlw	112
  3195  0669  0021               	movlb	1	; select bank1
  3196  066A  0099               	movwf	25	;volatile
  3197                           
  3198                           ;mcc.c: 85: OSCSTAT = 0x00;
  3199  066B  019A               	clrf	26	;volatile
  3200                           
  3201                           ;mcc.c: 87: OSCTUNE = 0x00;
  3202  066C  0198               	clrf	24	;volatile
  3203  066D                     l264:	
  3204                           ;mcc.c: 92: {
  3205                           
  3206                           ;mcc.c: 91: while(PLLR == 0)
  3207                           
  3208  066D  1B1A               	btfsc	26,6	;volatile
  3209  066E  0008               	return
  3210  066F  2E6D               	goto	l264
  3211  0670                     __end_of_OSCILLATOR_Initialize:	
  3212                           
  3213                           	psect	text10
  3214  05AD                     __ptext10:	
  3215 ;; *************** function _EUSART_Initialize *****************
  3216 ;; Defined at:
  3217 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1
  3231 ;;      Params:         0       0       0
  3232 ;;      Locals:         0       0       0
  3233 ;;      Temps:          0       1       0
  3234 ;;      Totals:         0       1       0
  3235 ;;Total ram usage:        1 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    6
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_SYSTEM_Initialize
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function _EUSART_Initialize
  3247  05AD                     _EUSART_Initialize:	
  3248                           
  3249                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  3250                           
  3251                           ;incstack = 0
  3252                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3253  05AD  0021               	movlb	1	; select bank1
  3254  05AE  1291               	bcf	17,5	;volatile
  3255                           
  3256                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  3257  05AF  1211               	bcf	17,4	;volatile
  3258                           
  3259                           ;eusart.c: 84: BAUDCON = 0x08;
  3260  05B0  3008               	movlw	8
  3261  05B1  0023               	movlb	3	; select bank3
  3262  05B2  009F               	movwf	31	;volatile
  3263                           
  3264                           ;eusart.c: 87: RCSTA = 0x90;
  3265  05B3  3090               	movlw	144
  3266  05B4  009D               	movwf	29	;volatile
  3267                           
  3268                           ;eusart.c: 90: TXSTA = 0x24;
  3269  05B5  3024               	movlw	36
  3270  05B6  009E               	movwf	30	;volatile
  3271                           
  3272                           ;eusart.c: 93: SPBRGL = 0x40;
  3273  05B7  3040               	movlw	64
  3274  05B8  009B               	movwf	27	;volatile
  3275                           
  3276                           ;eusart.c: 96: SPBRGH = 0x03;
  3277  05B9  3003               	movlw	3
  3278  05BA  009C               	movwf	28	;volatile
  3279                           
  3280                           ;eusart.c: 100: eusartTxHead = 0;
  3281  05BB  0020               	movlb	0	; select bank0
  3282  05BC  01E8               	clrf	_eusartTxHead
  3283                           
  3284                           ;eusart.c: 101: eusartTxTail = 0;
  3285  05BD  01E9               	clrf	_eusartTxTail
  3286                           
  3287                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3288  05BE  3008               	movlw	8
  3289  05BF  00A0               	movwf	??_EUSART_Initialize
  3290  05C0  0820               	movf	??_EUSART_Initialize,w
  3291  05C1  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  3292                           
  3293                           ;eusart.c: 104: eusartRxHead = 0;
  3294  05C2  01E6               	clrf	_eusartRxHead
  3295                           
  3296                           ;eusart.c: 105: eusartRxTail = 0;
  3297  05C3  01E7               	clrf	_eusartRxTail
  3298                           
  3299                           ;eusart.c: 106: eusartRxCount = 0;
  3300  05C4  01F3               	clrf	_eusartRxCount	;volatile
  3301                           
  3302                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3303  05C5  0021               	movlb	1	; select bank1
  3304  05C6  1691               	bsf	17,5	;volatile
  3305  05C7  0008               	return
  3306  05C8                     __end_of_EUSART_Initialize:	
  3307                           
  3308                           	psect	text11
  3309  063C                     __ptext11:	
  3310 ;; *************** function _EPWM_Initialize *****************
  3311 ;; Defined at:
  3312 ;;		line 63 in file "mcc_generated_files/epwm.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1
  3326 ;;      Params:         0       0       0
  3327 ;;      Locals:         0       0       0
  3328 ;;      Temps:          0       0       0
  3329 ;;      Totals:         0       0       0
  3330 ;;Total ram usage:        0 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    6
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_SYSTEM_Initialize
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _EPWM_Initialize
  3342  063C                     _EPWM_Initialize:	
  3343                           
  3344                           ;epwm.c: 68: CCP1CON = 0x3C;
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _EPWM_Initialize: [wreg+status,2]
  3348  063C  303C               	movlw	60
  3349  063D  0025               	movlb	5	; select bank5
  3350  063E  0093               	movwf	19	;volatile
  3351                           
  3352                           ;epwm.c: 71: ECCP1AS = 0x00;
  3353  063F  0195               	clrf	21	;volatile
  3354                           
  3355                           ;epwm.c: 74: PWM1CON = 0x80;
  3356  0640  3080               	movlw	128
  3357  0641  0094               	movwf	20	;volatile
  3358                           
  3359                           ;epwm.c: 77: PSTR1CON = 0x04;
  3360  0642  3004               	movlw	4
  3361  0643  0096               	movwf	22	;volatile
  3362                           
  3363                           ;epwm.c: 80: CCPR1L = 0x7F;
  3364  0644  307F               	movlw	127
  3365  0645  0091               	movwf	17	;volatile
  3366                           
  3367                           ;epwm.c: 83: CCPR1H = 0x00;
  3368  0646  0192               	clrf	18	;volatile
  3369  0647  0008               	return
  3370  0648                     __end_of_EPWM_Initialize:	
  3371                           
  3372                           	psect	text12
  3373  0532                     __ptext12:	
  3374 ;; *************** function _LED_set_state *****************
  3375 ;; Defined at:
  3376 ;;		line 16 in file "interact.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  new_state       1    wreg     enum E2607
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  new_state       1    1[BANK0 ] enum E2607
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMMON   BANK0   BANK1
  3390 ;;      Params:         0       0       0
  3391 ;;      Locals:         0       1       0
  3392 ;;      Temps:          0       1       0
  3393 ;;      Totals:         0       2       0
  3394 ;;Total ram usage:        2 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    6
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_main
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           
  3405                           ;psect for function _LED_set_state
  3406  0532                     _LED_set_state:	
  3407                           
  3408                           ;incstack = 0
  3409                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  3410                           ;LED_set_state@new_state stored from wreg
  3411  0532  0020               	movlb	0	; select bank0
  3412  0533  00A1               	movwf	LED_set_state@new_state
  3413                           
  3414                           ;interact.c: 18: LED_state = new_state;
  3415  0534  0821               	movf	LED_set_state@new_state,w
  3416  0535  00A0               	movwf	??_LED_set_state
  3417  0536  0820               	movf	??_LED_set_state,w
  3418  0537  00EC               	movwf	_LED_state
  3419                           
  3420                           ;interact.c: 19: if (new_state == always_off)
  3421  0538  0321               	decf	LED_set_state@new_state,w
  3422  0539  1D03               	btfss	3,2
  3423  053A  2D3E               	goto	l3133
  3424                           
  3425                           ;interact.c: 20: do { LATA5 = 0; } while(0);
  3426  053B  0022               	movlb	2	; select bank2
  3427  053C  128C               	bcf	12,5	;volatile
  3428  053D  0008               	return
  3429  053E                     l3133:	
  3430                           
  3431                           ;interact.c: 21: else if (new_state == always_on)
  3432  053E  0020               	movlb	0	; select bank0
  3433  053F  0821               	movf	LED_set_state@new_state,w
  3434  0540  1D03               	btfss	3,2
  3435  0541  2D45               	goto	l3135
  3436                           
  3437                           ;interact.c: 22: do { LATA5 = 1; } while(0);
  3438  0542  0022               	movlb	2	; select bank2
  3439  0543  168C               	bsf	12,5	;volatile
  3440  0544  0008               	return
  3441  0545                     l3135:	
  3442                           
  3443                           ;interact.c: 23: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  3444  0545  3002               	movlw	2
  3445  0546  0020               	movlb	0	; select bank0
  3446  0547  0621               	xorwf	LED_set_state@new_state,w
  3447  0548  1903               	btfsc	3,2
  3448  0549  2D4E               	goto	l513
  3449  054A  3003               	movlw	3
  3450  054B  0621               	xorwf	LED_set_state@new_state,w
  3451  054C  1D03               	btfss	3,2
  3452  054D  0008               	return
  3453  054E                     l513:	
  3454                           ;interact.c: 24: {
  3455                           ;interact.c: 25: do { LATA5 = 1; } while(0);
  3456                           
  3457  054E  0022               	movlb	2	; select bank2
  3458  054F  168C               	bsf	12,5	;volatile
  3459                           
  3460                           ;interact.c: 26: LED_counter = 0;
  3461  0550  0020               	movlb	0	; select bank0
  3462  0551  01E0               	clrf	_LED_counter	;volatile
  3463  0552  0008               	return
  3464  0553                     __end_of_LED_set_state:	
  3465                           
  3466                           	psect	text13
  3467  0035                     __ptext13:	
  3468 ;; *************** function _GPS_read_speed *****************
  3469 ;; Defined at:
  3470 ;;		line 82 in file "main.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;		None
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  3475 ;;  m_char          1   12[BANK0 ] unsigned char 
  3476 ;;  i_buff          1   11[BANK0 ] unsigned char 
  3477 ;;  checksum        1    4[BANK0 ] unsigned char 
  3478 ;;  no_more_chec    1    3[BANK0 ] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      unsigned char 
  3481 ;; Registers used:
  3482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1
  3488 ;;      Params:         0       0       0
  3489 ;;      Locals:         0      10       0
  3490 ;;      Temps:          0       1       0
  3491 ;;      Totals:         0      11       0
  3492 ;;Total ram usage:       11 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    7
  3495 ;; This function calls:
  3496 ;;		_EUSART_Read
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _GPS_read_speed
  3504  0035                     _GPS_read_speed:	
  3505                           
  3506                           ;main.c: 86: unsigned char buffer[6];
  3507                           ;main.c: 87: unsigned char i_buff = 0;
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _GPS_read_speed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3511  0035  0020               	movlb	0	; select bank0
  3512  0036  01AB               	clrf	GPS_read_speed@i_buff
  3513                           
  3514                           ;main.c: 88: unsigned char checksum = 0x00;
  3515  0037  01A4               	clrf	GPS_read_speed@checksum
  3516                           
  3517                           ;main.c: 90: unsigned char m_char = 0x00;
  3518  0038  01AC               	clrf	GPS_read_speed@m_char
  3519  0039                     l2869:	
  3520                           ;main.c: 91: while (m_char != '$')
  3521                           
  3522  0039  3024               	movlw	36
  3523  003A  062C               	xorwf	GPS_read_speed@m_char,w
  3524  003B  1903               	btfsc	3,2
  3525  003C  2846               	goto	l2871
  3526                           
  3527                           ;main.c: 92: if(eusartRxCount!=0)
  3528  003D  0873               	movf	_eusartRxCount,w	;volatile
  3529  003E  1903               	btfsc	3,2
  3530  003F  2839               	goto	l2869
  3531                           
  3532                           ;main.c: 93: m_char=EUSART_Read();
  3533  0040  2553               	fcall	_EUSART_Read
  3534  0041  0020               	movlb	0	; select bank0
  3535  0042  00A2               	movwf	??_GPS_read_speed
  3536  0043  0822               	movf	??_GPS_read_speed,w
  3537  0044  00AC               	movwf	GPS_read_speed@m_char
  3538  0045  2839               	goto	l2869
  3539  0046                     l2871:	
  3540                           ;main.c: 97: while (1)
  3541                           
  3542                           
  3543                           ;main.c: 98: if (eusartRxCount!=0)
  3544  0046  0873               	movf	_eusartRxCount,w	;volatile
  3545  0047  1903               	btfsc	3,2
  3546  0048  2846               	goto	l2871
  3547                           
  3548                           ;main.c: 99: {
  3549                           ;main.c: 100: m_char=EUSART_Read();
  3550  0049  2553               	fcall	_EUSART_Read
  3551  004A  0020               	movlb	0	; select bank0
  3552  004B  00A2               	movwf	??_GPS_read_speed
  3553  004C  0822               	movf	??_GPS_read_speed,w
  3554  004D  00AC               	movwf	GPS_read_speed@m_char
  3555                           
  3556                           ;main.c: 101: checksum ^= m_char;
  3557  004E  082C               	movf	GPS_read_speed@m_char,w
  3558  004F  00A2               	movwf	??_GPS_read_speed
  3559  0050  0822               	movf	??_GPS_read_speed,w
  3560  0051  06A4               	xorwf	GPS_read_speed@checksum,f
  3561                           
  3562                           ;main.c: 102: if (m_char == ',')
  3563  0052  302C               	movlw	44
  3564  0053  062C               	xorwf	GPS_read_speed@m_char,w
  3565  0054  1903               	btfsc	3,2
  3566  0055  2868               	goto	l2893
  3567                           
  3568                           ;main.c: 104: else
  3569                           ;main.c: 105: {
  3570                           ;main.c: 106: buffer[i_buff++] = m_char;
  3571                           
  3572                           ;main.c: 103: break;
  3573  0056  082C               	movf	GPS_read_speed@m_char,w
  3574  0057  00A2               	movwf	??_GPS_read_speed
  3575  0058  082B               	movf	GPS_read_speed@i_buff,w
  3576  0059  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3577  005A  0086               	movwf	6
  3578  005B  0187               	clrf	7
  3579  005C  0822               	movf	??_GPS_read_speed,w
  3580  005D  0081               	movwf	1
  3581  005E  3001               	movlw	1
  3582  005F  00A2               	movwf	??_GPS_read_speed
  3583  0060  0822               	movf	??_GPS_read_speed,w
  3584  0061  07AB               	addwf	GPS_read_speed@i_buff,f
  3585                           
  3586                           ;main.c: 107: if (i_buff >= 6)
  3587  0062  3006               	movlw	6
  3588  0063  022B               	subwf	GPS_read_speed@i_buff,w
  3589  0064  1C03               	skipc
  3590  0065  2846               	goto	l2871
  3591                           
  3592                           ;main.c: 108: return 0;
  3593  0066  3000               	movlw	0
  3594  0067  0008               	return
  3595  0068                     l2893:	
  3596                           
  3597                           ;main.c: 109: }
  3598                           ;main.c: 110: }
  3599                           ;main.c: 112: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3]
      +                           != 'T')||(buffer[4] != 'G'))
  3600  0068  3047               	movlw	71
  3601  0069  0625               	xorwf	GPS_read_speed@buffer,w
  3602  006A  1D03               	btfss	3,2
  3603  006B  287C               	goto	l2903
  3604  006C  3050               	movlw	80
  3605  006D  0626               	xorwf	GPS_read_speed@buffer+1,w
  3606  006E  1D03               	btfss	3,2
  3607  006F  287C               	goto	l2903
  3608  0070  3056               	movlw	86
  3609  0071  0627               	xorwf	GPS_read_speed@buffer+2,w
  3610  0072  1D03               	btfss	3,2
  3611  0073  287C               	goto	l2903
  3612  0074  3054               	movlw	84
  3613  0075  0628               	xorwf	GPS_read_speed@buffer+3,w
  3614  0076  1D03               	btfss	3,2
  3615  0077  287C               	goto	l2903
  3616  0078  3047               	movlw	71
  3617  0079  0629               	xorwf	GPS_read_speed@buffer+4,w
  3618  007A  1903               	btfsc	3,2
  3619  007B  287E               	goto	l2907
  3620  007C                     l2903:	
  3621                           
  3622                           ;main.c: 113: return 0;
  3623  007C  3000               	movlw	0
  3624  007D  0008               	return
  3625  007E                     l2907:	
  3626                           
  3627                           ;main.c: 114: i_buff = 0;
  3628  007E  01AB               	clrf	GPS_read_speed@i_buff
  3629  007F                     l2909:	
  3630                           ;main.c: 117: while (1)
  3631                           
  3632                           
  3633                           ;main.c: 118: if (eusartRxCount!=0)
  3634  007F  0873               	movf	_eusartRxCount,w	;volatile
  3635  0080  1903               	btfsc	3,2
  3636  0081  287F               	goto	l2909
  3637                           
  3638                           ;main.c: 119: {
  3639                           ;main.c: 120: m_char=EUSART_Read();
  3640  0082  2553               	fcall	_EUSART_Read
  3641  0083  0020               	movlb	0	; select bank0
  3642  0084  00A2               	movwf	??_GPS_read_speed
  3643  0085  0822               	movf	??_GPS_read_speed,w
  3644  0086  00AC               	movwf	GPS_read_speed@m_char
  3645                           
  3646                           ;main.c: 121: checksum ^= m_char;
  3647  0087  082C               	movf	GPS_read_speed@m_char,w
  3648  0088  00A2               	movwf	??_GPS_read_speed
  3649  0089  0822               	movf	??_GPS_read_speed,w
  3650  008A  06A4               	xorwf	GPS_read_speed@checksum,f
  3651                           
  3652                           ;main.c: 122: if (m_char == ',')
  3653  008B  302C               	movlw	44
  3654  008C  062C               	xorwf	GPS_read_speed@m_char,w
  3655  008D  1D03               	btfss	3,2
  3656  008E  287F               	goto	l2909
  3657  008F                     l2919:	
  3658                           ;main.c: 124: }
  3659                           ;main.c: 126: while (1)
  3660                           
  3661                           ;main.c: 123: break;
  3662                           
  3663                           
  3664                           ;main.c: 127: if (eusartRxCount!=0)
  3665  008F  0873               	movf	_eusartRxCount,w	;volatile
  3666  0090  1903               	btfsc	3,2
  3667  0091  288F               	goto	l2919
  3668                           
  3669                           ;main.c: 128: {
  3670                           ;main.c: 129: m_char=EUSART_Read();
  3671  0092  2553               	fcall	_EUSART_Read
  3672  0093  0020               	movlb	0	; select bank0
  3673  0094  00A2               	movwf	??_GPS_read_speed
  3674  0095  0822               	movf	??_GPS_read_speed,w
  3675  0096  00AC               	movwf	GPS_read_speed@m_char
  3676                           
  3677                           ;main.c: 130: checksum ^= m_char;
  3678  0097  082C               	movf	GPS_read_speed@m_char,w
  3679  0098  00A2               	movwf	??_GPS_read_speed
  3680  0099  0822               	movf	??_GPS_read_speed,w
  3681  009A  06A4               	xorwf	GPS_read_speed@checksum,f
  3682                           
  3683                           ;main.c: 131: if (m_char == ',')
  3684  009B  302C               	movlw	44
  3685  009C  062C               	xorwf	GPS_read_speed@m_char,w
  3686  009D  1903               	btfsc	3,2
  3687  009E  28B1               	goto	l2941
  3688                           
  3689                           ;main.c: 133: else
  3690                           ;main.c: 134: {
  3691                           ;main.c: 135: buffer[i_buff++] = m_char;
  3692                           
  3693                           ;main.c: 132: break;
  3694  009F  082C               	movf	GPS_read_speed@m_char,w
  3695  00A0  00A2               	movwf	??_GPS_read_speed
  3696  00A1  082B               	movf	GPS_read_speed@i_buff,w
  3697  00A2  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3698  00A3  0086               	movwf	6
  3699  00A4  0187               	clrf	7
  3700  00A5  0822               	movf	??_GPS_read_speed,w
  3701  00A6  0081               	movwf	1
  3702  00A7  3001               	movlw	1
  3703  00A8  00A2               	movwf	??_GPS_read_speed
  3704  00A9  0822               	movf	??_GPS_read_speed,w
  3705  00AA  07AB               	addwf	GPS_read_speed@i_buff,f
  3706                           
  3707                           ;main.c: 136: if (i_buff >= 6)
  3708  00AB  3006               	movlw	6
  3709  00AC  022B               	subwf	GPS_read_speed@i_buff,w
  3710  00AD  1C03               	skipc
  3711  00AE  288F               	goto	l2919
  3712                           
  3713                           ;main.c: 137: return 0;
  3714  00AF  3000               	movlw	0
  3715  00B0  0008               	return
  3716  00B1                     l2941:	
  3717                           
  3718                           ;main.c: 138: }
  3719                           ;main.c: 139: }
  3720                           ;main.c: 140: if ((buffer[0] != 'T')||(i_buff != 1))
  3721  00B1  3054               	movlw	84
  3722  00B2  0625               	xorwf	GPS_read_speed@buffer,w
  3723  00B3  1903               	btfsc	3,2
  3724  00B4  032B               	decf	GPS_read_speed@i_buff,w
  3725  00B5  1903               	btfsc	3,2
  3726  00B6  28B9               	goto	l2949
  3727                           
  3728                           ;main.c: 141: return 0;
  3729  00B7  3000               	movlw	0
  3730  00B8  0008               	return
  3731  00B9                     l2949:	
  3732                           
  3733                           ;main.c: 142: i_buff = 0;
  3734  00B9  01AB               	clrf	GPS_read_speed@i_buff
  3735  00BA                     l2951:	
  3736                           ;main.c: 145: while (1)
  3737                           
  3738                           
  3739                           ;main.c: 146: if (eusartRxCount!=0)
  3740  00BA  0873               	movf	_eusartRxCount,w	;volatile
  3741  00BB  1903               	btfsc	3,2
  3742  00BC  28BA               	goto	l2951
  3743                           
  3744                           ;main.c: 147: {
  3745                           ;main.c: 148: m_char=EUSART_Read();
  3746  00BD  2553               	fcall	_EUSART_Read
  3747  00BE  0020               	movlb	0	; select bank0
  3748  00BF  00A2               	movwf	??_GPS_read_speed
  3749  00C0  0822               	movf	??_GPS_read_speed,w
  3750  00C1  00AC               	movwf	GPS_read_speed@m_char
  3751                           
  3752                           ;main.c: 149: checksum ^= m_char;
  3753  00C2  082C               	movf	GPS_read_speed@m_char,w
  3754  00C3  00A2               	movwf	??_GPS_read_speed
  3755  00C4  0822               	movf	??_GPS_read_speed,w
  3756  00C5  06A4               	xorwf	GPS_read_speed@checksum,f
  3757                           
  3758                           ;main.c: 150: if (m_char == ',')
  3759  00C6  302C               	movlw	44
  3760  00C7  062C               	xorwf	GPS_read_speed@m_char,w
  3761  00C8  1D03               	btfss	3,2
  3762  00C9  28BA               	goto	l2951
  3763  00CA                     l2961:	
  3764                           ;main.c: 152: }
  3765                           ;main.c: 154: while (1)
  3766                           
  3767                           ;main.c: 151: break;
  3768                           
  3769                           
  3770                           ;main.c: 155: if (eusartRxCount!=0)
  3771  00CA  0873               	movf	_eusartRxCount,w	;volatile
  3772  00CB  1903               	btfsc	3,2
  3773  00CC  28CA               	goto	l2961
  3774                           
  3775                           ;main.c: 156: {
  3776                           ;main.c: 157: m_char=EUSART_Read();
  3777  00CD  2553               	fcall	_EUSART_Read
  3778  00CE  0020               	movlb	0	; select bank0
  3779  00CF  00A2               	movwf	??_GPS_read_speed
  3780  00D0  0822               	movf	??_GPS_read_speed,w
  3781  00D1  00AC               	movwf	GPS_read_speed@m_char
  3782                           
  3783                           ;main.c: 158: checksum ^= m_char;
  3784  00D2  082C               	movf	GPS_read_speed@m_char,w
  3785  00D3  00A2               	movwf	??_GPS_read_speed
  3786  00D4  0822               	movf	??_GPS_read_speed,w
  3787  00D5  06A4               	xorwf	GPS_read_speed@checksum,f
  3788                           
  3789                           ;main.c: 159: if (m_char == ',')
  3790  00D6  302C               	movlw	44
  3791  00D7  062C               	xorwf	GPS_read_speed@m_char,w
  3792  00D8  1903               	btfsc	3,2
  3793  00D9  28EC               	goto	l2983
  3794                           
  3795                           ;main.c: 161: else
  3796                           ;main.c: 162: {
  3797                           ;main.c: 163: buffer[i_buff++] = m_char;
  3798                           
  3799                           ;main.c: 160: break;
  3800  00DA  082C               	movf	GPS_read_speed@m_char,w
  3801  00DB  00A2               	movwf	??_GPS_read_speed
  3802  00DC  082B               	movf	GPS_read_speed@i_buff,w
  3803  00DD  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3804  00DE  0086               	movwf	6
  3805  00DF  0187               	clrf	7
  3806  00E0  0822               	movf	??_GPS_read_speed,w
  3807  00E1  0081               	movwf	1
  3808  00E2  3001               	movlw	1
  3809  00E3  00A2               	movwf	??_GPS_read_speed
  3810  00E4  0822               	movf	??_GPS_read_speed,w
  3811  00E5  07AB               	addwf	GPS_read_speed@i_buff,f
  3812                           
  3813                           ;main.c: 164: if (i_buff >= 6)
  3814  00E6  3006               	movlw	6
  3815  00E7  022B               	subwf	GPS_read_speed@i_buff,w
  3816  00E8  1C03               	skipc
  3817  00E9  28CA               	goto	l2961
  3818                           
  3819                           ;main.c: 165: return 0;
  3820  00EA  3000               	movlw	0
  3821  00EB  0008               	return
  3822  00EC                     l2983:	
  3823                           
  3824                           ;main.c: 166: }
  3825                           ;main.c: 167: }
  3826                           ;main.c: 168: if ((buffer[0] != 'M')||(i_buff != 1))
  3827  00EC  304D               	movlw	77
  3828  00ED  0625               	xorwf	GPS_read_speed@buffer,w
  3829  00EE  1903               	btfsc	3,2
  3830  00EF  032B               	decf	GPS_read_speed@i_buff,w
  3831  00F0  1903               	btfsc	3,2
  3832  00F1  28F4               	goto	l2991
  3833                           
  3834                           ;main.c: 169: return 0;
  3835  00F2  3000               	movlw	0
  3836  00F3  0008               	return
  3837  00F4                     l2991:	
  3838                           
  3839                           ;main.c: 170: i_buff = 0;
  3840  00F4  01AB               	clrf	GPS_read_speed@i_buff
  3841  00F5                     l2993:	
  3842                           ;main.c: 173: while (1)
  3843                           
  3844                           
  3845                           ;main.c: 174: if (eusartRxCount!=0)
  3846  00F5  0873               	movf	_eusartRxCount,w	;volatile
  3847  00F6  1903               	btfsc	3,2
  3848  00F7  28F5               	goto	l2993
  3849                           
  3850                           ;main.c: 175: {
  3851                           ;main.c: 176: m_char=EUSART_Read();
  3852  00F8  2553               	fcall	_EUSART_Read
  3853  00F9  0020               	movlb	0	; select bank0
  3854  00FA  00A2               	movwf	??_GPS_read_speed
  3855  00FB  0822               	movf	??_GPS_read_speed,w
  3856  00FC  00AC               	movwf	GPS_read_speed@m_char
  3857                           
  3858                           ;main.c: 177: checksum ^= m_char;
  3859  00FD  082C               	movf	GPS_read_speed@m_char,w
  3860  00FE  00A2               	movwf	??_GPS_read_speed
  3861  00FF  0822               	movf	??_GPS_read_speed,w
  3862  0100  06A4               	xorwf	GPS_read_speed@checksum,f
  3863                           
  3864                           ;main.c: 178: if (m_char == ',')
  3865  0101  302C               	movlw	44
  3866  0102  062C               	xorwf	GPS_read_speed@m_char,w
  3867  0103  1D03               	btfss	3,2
  3868  0104  28F5               	goto	l2993
  3869  0105                     l3003:	
  3870                           ;main.c: 180: }
  3871                           ;main.c: 182: while (1)
  3872                           
  3873                           ;main.c: 179: break;
  3874                           
  3875                           
  3876                           ;main.c: 183: if (eusartRxCount!=0)
  3877  0105  0873               	movf	_eusartRxCount,w	;volatile
  3878  0106  1903               	btfsc	3,2
  3879  0107  2905               	goto	l3003
  3880                           
  3881                           ;main.c: 184: {
  3882                           ;main.c: 185: m_char=EUSART_Read();
  3883  0108  2553               	fcall	_EUSART_Read
  3884  0109  0020               	movlb	0	; select bank0
  3885  010A  00A2               	movwf	??_GPS_read_speed
  3886  010B  0822               	movf	??_GPS_read_speed,w
  3887  010C  00AC               	movwf	GPS_read_speed@m_char
  3888                           
  3889                           ;main.c: 186: checksum ^= m_char;
  3890  010D  082C               	movf	GPS_read_speed@m_char,w
  3891  010E  00A2               	movwf	??_GPS_read_speed
  3892  010F  0822               	movf	??_GPS_read_speed,w
  3893  0110  06A4               	xorwf	GPS_read_speed@checksum,f
  3894                           
  3895                           ;main.c: 187: if (m_char == ',')
  3896  0111  302C               	movlw	44
  3897  0112  062C               	xorwf	GPS_read_speed@m_char,w
  3898  0113  1903               	btfsc	3,2
  3899  0114  2927               	goto	l3025
  3900                           
  3901                           ;main.c: 189: else
  3902                           ;main.c: 190: {
  3903                           ;main.c: 191: buffer[i_buff++] = m_char;
  3904                           
  3905                           ;main.c: 188: break;
  3906  0115  082C               	movf	GPS_read_speed@m_char,w
  3907  0116  00A2               	movwf	??_GPS_read_speed
  3908  0117  082B               	movf	GPS_read_speed@i_buff,w
  3909  0118  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3910  0119  0086               	movwf	6
  3911  011A  0187               	clrf	7
  3912  011B  0822               	movf	??_GPS_read_speed,w
  3913  011C  0081               	movwf	1
  3914  011D  3001               	movlw	1
  3915  011E  00A2               	movwf	??_GPS_read_speed
  3916  011F  0822               	movf	??_GPS_read_speed,w
  3917  0120  07AB               	addwf	GPS_read_speed@i_buff,f
  3918                           
  3919                           ;main.c: 192: if (i_buff >= 6)
  3920  0121  3006               	movlw	6
  3921  0122  022B               	subwf	GPS_read_speed@i_buff,w
  3922  0123  1C03               	skipc
  3923  0124  2905               	goto	l3003
  3924                           
  3925                           ;main.c: 193: return 0;
  3926  0125  3000               	movlw	0
  3927  0126  0008               	return
  3928  0127                     l3025:	
  3929                           
  3930                           ;main.c: 194: }
  3931                           ;main.c: 195: }
  3932                           ;main.c: 196: if ((buffer[0] != 'N')||(i_buff != 1))
  3933  0127  304E               	movlw	78
  3934  0128  0625               	xorwf	GPS_read_speed@buffer,w
  3935  0129  1903               	btfsc	3,2
  3936  012A  032B               	decf	GPS_read_speed@i_buff,w
  3937  012B  1903               	btfsc	3,2
  3938  012C  292F               	goto	l3033
  3939                           
  3940                           ;main.c: 197: return 0;
  3941  012D  3000               	movlw	0
  3942  012E  0008               	return
  3943  012F                     l3033:	
  3944                           
  3945                           ;main.c: 198: i_buff = 0;
  3946  012F  01AB               	clrf	GPS_read_speed@i_buff
  3947  0130                     l3035:	
  3948                           ;main.c: 201: while (1)
  3949                           
  3950                           
  3951                           ;main.c: 202: if (eusartRxCount!=0)
  3952  0130  0873               	movf	_eusartRxCount,w	;volatile
  3953  0131  1903               	btfsc	3,2
  3954  0132  2930               	goto	l3035
  3955                           
  3956                           ;main.c: 203: {
  3957                           ;main.c: 204: m_char=EUSART_Read();
  3958  0133  2553               	fcall	_EUSART_Read
  3959  0134  0020               	movlb	0	; select bank0
  3960  0135  00A2               	movwf	??_GPS_read_speed
  3961  0136  0822               	movf	??_GPS_read_speed,w
  3962  0137  00AC               	movwf	GPS_read_speed@m_char
  3963                           
  3964                           ;main.c: 205: checksum ^= m_char;
  3965  0138  082C               	movf	GPS_read_speed@m_char,w
  3966  0139  00A2               	movwf	??_GPS_read_speed
  3967  013A  0822               	movf	??_GPS_read_speed,w
  3968  013B  06A4               	xorwf	GPS_read_speed@checksum,f
  3969                           
  3970                           ;main.c: 206: if (m_char == ',')
  3971  013C  302C               	movlw	44
  3972  013D  062C               	xorwf	GPS_read_speed@m_char,w
  3973  013E  1903               	btfsc	3,2
  3974  013F  2952               	goto	l3057
  3975                           
  3976                           ;main.c: 208: else
  3977                           ;main.c: 209: {
  3978                           ;main.c: 210: buffer[i_buff++] = m_char;
  3979                           
  3980                           ;main.c: 207: break;
  3981  0140  082C               	movf	GPS_read_speed@m_char,w
  3982  0141  00A2               	movwf	??_GPS_read_speed
  3983  0142  082B               	movf	GPS_read_speed@i_buff,w
  3984  0143  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3985  0144  0086               	movwf	6
  3986  0145  0187               	clrf	7
  3987  0146  0822               	movf	??_GPS_read_speed,w
  3988  0147  0081               	movwf	1
  3989  0148  3001               	movlw	1
  3990  0149  00A2               	movwf	??_GPS_read_speed
  3991  014A  0822               	movf	??_GPS_read_speed,w
  3992  014B  07AB               	addwf	GPS_read_speed@i_buff,f
  3993                           
  3994                           ;main.c: 211: if (i_buff >= 6)
  3995  014C  3006               	movlw	6
  3996  014D  022B               	subwf	GPS_read_speed@i_buff,w
  3997  014E  1C03               	skipc
  3998  014F  2930               	goto	l3035
  3999                           
  4000                           ;main.c: 212: return 0;
  4001  0150  3000               	movlw	0
  4002  0151  0008               	return
  4003  0152                     l3057:	
  4004                           
  4005                           ;main.c: 213: }
  4006                           ;main.c: 214: }
  4007                           ;main.c: 220: i_buff = 0;
  4008  0152  01AB               	clrf	GPS_read_speed@i_buff
  4009  0153                     l3059:	
  4010                           ;main.c: 223: while (1)
  4011                           
  4012                           
  4013                           ;main.c: 224: if (eusartRxCount!=0)
  4014  0153  0873               	movf	_eusartRxCount,w	;volatile
  4015  0154  1903               	btfsc	3,2
  4016  0155  2953               	goto	l3059
  4017                           
  4018                           ;main.c: 225: {
  4019                           ;main.c: 226: m_char=EUSART_Read();
  4020  0156  2553               	fcall	_EUSART_Read
  4021  0157  0020               	movlb	0	; select bank0
  4022  0158  00A2               	movwf	??_GPS_read_speed
  4023  0159  0822               	movf	??_GPS_read_speed,w
  4024  015A  00AC               	movwf	GPS_read_speed@m_char
  4025                           
  4026                           ;main.c: 227: checksum ^= m_char;
  4027  015B  082C               	movf	GPS_read_speed@m_char,w
  4028  015C  00A2               	movwf	??_GPS_read_speed
  4029  015D  0822               	movf	??_GPS_read_speed,w
  4030  015E  06A4               	xorwf	GPS_read_speed@checksum,f
  4031                           
  4032                           ;main.c: 228: if (m_char == ',')
  4033  015F  302C               	movlw	44
  4034  0160  062C               	xorwf	GPS_read_speed@m_char,w
  4035  0161  1903               	btfsc	3,2
  4036  0162  2975               	goto	l3081
  4037                           
  4038                           ;main.c: 230: else
  4039                           ;main.c: 231: {
  4040                           ;main.c: 232: buffer[i_buff++] = m_char;
  4041                           
  4042                           ;main.c: 229: break;
  4043  0163  082C               	movf	GPS_read_speed@m_char,w
  4044  0164  00A2               	movwf	??_GPS_read_speed
  4045  0165  082B               	movf	GPS_read_speed@i_buff,w
  4046  0166  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4047  0167  0086               	movwf	6
  4048  0168  0187               	clrf	7
  4049  0169  0822               	movf	??_GPS_read_speed,w
  4050  016A  0081               	movwf	1
  4051  016B  3001               	movlw	1
  4052  016C  00A2               	movwf	??_GPS_read_speed
  4053  016D  0822               	movf	??_GPS_read_speed,w
  4054  016E  07AB               	addwf	GPS_read_speed@i_buff,f
  4055                           
  4056                           ;main.c: 233: if (i_buff >= 6)
  4057  016F  3006               	movlw	6
  4058  0170  022B               	subwf	GPS_read_speed@i_buff,w
  4059  0171  1C03               	skipc
  4060  0172  2953               	goto	l3059
  4061                           
  4062                           ;main.c: 234: return 0;
  4063  0173  3000               	movlw	0
  4064  0174  0008               	return
  4065  0175                     l3081:	
  4066                           
  4067                           ;main.c: 235: }
  4068                           ;main.c: 236: }
  4069                           ;main.c: 237: if ((buffer[0] != 'K')||(i_buff != 1))
  4070  0175  304B               	movlw	75
  4071  0176  0625               	xorwf	GPS_read_speed@buffer,w
  4072  0177  1903               	btfsc	3,2
  4073  0178  032B               	decf	GPS_read_speed@i_buff,w
  4074  0179  1903               	btfsc	3,2
  4075  017A  297D               	goto	l3089
  4076                           
  4077                           ;main.c: 238: return 0;
  4078  017B  3000               	movlw	0
  4079  017C  0008               	return
  4080  017D                     l3089:	
  4081                           
  4082                           ;main.c: 239: i_buff = 0;
  4083  017D  01AB               	clrf	GPS_read_speed@i_buff
  4084                           
  4085                           ;main.c: 242: bool no_more_checksum = 0;
  4086  017E  01A3               	clrf	GPS_read_speed@no_more_checksum
  4087  017F                     l3091:	
  4088                           ;main.c: 243: while (1)
  4089                           
  4090                           
  4091                           ;main.c: 244: if (eusartRxCount!=0)
  4092  017F  0873               	movf	_eusartRxCount,w	;volatile
  4093  0180  1903               	btfsc	3,2
  4094  0181  297F               	goto	l3091
  4095                           
  4096                           ;main.c: 245: {
  4097                           ;main.c: 246: m_char=EUSART_Read();
  4098  0182  2553               	fcall	_EUSART_Read
  4099  0183  0020               	movlb	0	; select bank0
  4100  0184  00A2               	movwf	??_GPS_read_speed
  4101  0185  0822               	movf	??_GPS_read_speed,w
  4102  0186  00AC               	movwf	GPS_read_speed@m_char
  4103                           
  4104                           ;main.c: 247: if (m_char == '*')
  4105  0187  302A               	movlw	42
  4106  0188  062C               	xorwf	GPS_read_speed@m_char,w
  4107  0189  1D03               	btfss	3,2
  4108  018A  298D               	goto	l3099
  4109                           
  4110                           ;main.c: 248: no_more_checksum = 1;
  4111  018B  01A3               	clrf	GPS_read_speed@no_more_checksum
  4112  018C  0AA3               	incf	GPS_read_speed@no_more_checksum,f
  4113  018D                     l3099:	
  4114                           
  4115                           ;main.c: 249: if (!no_more_checksum)
  4116  018D  0823               	movf	GPS_read_speed@no_more_checksum,w
  4117  018E  1D03               	btfss	3,2
  4118  018F  2994               	goto	l432
  4119                           
  4120                           ;main.c: 250: checksum ^= m_char;
  4121  0190  082C               	movf	GPS_read_speed@m_char,w
  4122  0191  00A2               	movwf	??_GPS_read_speed
  4123  0192  0822               	movf	??_GPS_read_speed,w
  4124  0193  06A4               	xorwf	GPS_read_speed@checksum,f
  4125  0194                     l432:	
  4126                           
  4127                           ;main.c: 251: if (m_char == 0x0D)
  4128  0194  300D               	movlw	13
  4129  0195  062C               	xorwf	GPS_read_speed@m_char,w
  4130  0196  1903               	btfsc	3,2
  4131  0197  29AA               	goto	l3117
  4132                           
  4133                           ;main.c: 253: else
  4134                           ;main.c: 254: {
  4135                           ;main.c: 255: buffer[i_buff++] = m_char;
  4136                           
  4137                           ;main.c: 252: break;
  4138  0198  082C               	movf	GPS_read_speed@m_char,w
  4139  0199  00A2               	movwf	??_GPS_read_speed
  4140  019A  082B               	movf	GPS_read_speed@i_buff,w
  4141  019B  3E25               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4142  019C  0086               	movwf	6
  4143  019D  0187               	clrf	7
  4144  019E  0822               	movf	??_GPS_read_speed,w
  4145  019F  0081               	movwf	1
  4146  01A0  3001               	movlw	1
  4147  01A1  00A2               	movwf	??_GPS_read_speed
  4148  01A2  0822               	movf	??_GPS_read_speed,w
  4149  01A3  07AB               	addwf	GPS_read_speed@i_buff,f
  4150                           
  4151                           ;main.c: 256: if (i_buff >= 6)
  4152  01A4  3006               	movlw	6
  4153  01A5  022B               	subwf	GPS_read_speed@i_buff,w
  4154  01A6  1C03               	skipc
  4155  01A7  297F               	goto	l3091
  4156                           
  4157                           ;main.c: 257: return 0;
  4158  01A8  3000               	movlw	0
  4159  01A9  0008               	return
  4160  01AA                     l3117:	
  4161                           
  4162                           ;main.c: 258: }
  4163                           ;main.c: 259: }
  4164                           ;main.c: 260: if ((buffer[1] != '*')||(i_buff != 4))
  4165  01AA  302A               	movlw	42
  4166  01AB  0626               	xorwf	GPS_read_speed@buffer+1,w
  4167  01AC  1D03               	btfss	3,2
  4168  01AD  29B2               	goto	l3121
  4169  01AE  3004               	movlw	4
  4170  01AF  062B               	xorwf	GPS_read_speed@i_buff,w
  4171  01B0  1903               	btfsc	3,2
  4172  01B1  29B4               	goto	l3125
  4173  01B2                     l3121:	
  4174                           
  4175                           ;main.c: 261: return 0;
  4176  01B2  3000               	movlw	0
  4177  01B3  0008               	return
  4178  01B4                     l3125:	
  4179                           
  4180                           ;main.c: 265: return 1;
  4181  01B4  3001               	movlw	1
  4182  01B5  0008               	return
  4183  01B6                     __end_of_GPS_read_speed:	
  4184                           
  4185                           	psect	text14
  4186  0553                     __ptext14:	
  4187 ;; *************** function _EUSART_Read *****************
  4188 ;; Defined at:
  4189 ;;		line 112 in file "mcc_generated_files/eusart.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  readValue       1    1[BANK0 ] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      unsigned char 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1
  4203 ;;      Params:         0       0       0
  4204 ;;      Locals:         0       1       0
  4205 ;;      Temps:          0       1       0
  4206 ;;      Totals:         0       2       0
  4207 ;;Total ram usage:        2 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    6
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_GPS_read_speed
  4214 ;;		_getch
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           
  4219                           ;psect for function _EUSART_Read
  4220  0553                     _EUSART_Read:	
  4221                           
  4222                           ;eusart.c: 114: uint8_t readValue = 0;
  4223                           
  4224                           ;incstack = 0
  4225                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4226  0553  0020               	movlb	0	; select bank0
  4227  0554  01A1               	clrf	EUSART_Read@readValue
  4228                           
  4229                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  4230  0555  0023               	movlb	3	; select bank3
  4231  0556  169D               	bsf	29,5	;volatile
  4232  0557                     l2759:	
  4233                           ;eusart.c: 120: {
  4234                           
  4235                           ;eusart.c: 119: while(0 == eusartRxCount)
  4236                           
  4237  0557  0873               	movf	_eusartRxCount,w	;volatile
  4238  0558  1903               	btfsc	3,2
  4239  0559  2D57               	goto	l2759
  4240                           
  4241                           ;eusart.c: 121: }
  4242                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  4243  055A  0021               	movlb	1	; select bank1
  4244  055B  1291               	bcf	17,5	;volatile
  4245                           
  4246                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  4247  055C  0020               	movlb	0	; select bank0
  4248  055D  0867               	movf	_eusartRxTail,w
  4249  055E  3E49               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4250  055F  0086               	movwf	6
  4251  0560  0187               	clrf	7
  4252  0561  0801               	movf	1,w
  4253  0562  00A0               	movwf	??_EUSART_Read
  4254  0563  0820               	movf	??_EUSART_Read,w
  4255  0564  00A1               	movwf	EUSART_Read@readValue
  4256  0565  3001               	movlw	1
  4257  0566  00A0               	movwf	??_EUSART_Read
  4258  0567  0820               	movf	??_EUSART_Read,w
  4259  0568  07E7               	addwf	_eusartRxTail,f
  4260                           
  4261                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4262  0569  3008               	movlw	8
  4263  056A  0267               	subwf	_eusartRxTail,w
  4264  056B  1803               	btfsc	3,0
  4265                           
  4266                           ;eusart.c: 127: {
  4267                           ;eusart.c: 128: eusartRxTail = 0;
  4268  056C  01E7               	clrf	_eusartRxTail
  4269                           
  4270                           ;eusart.c: 129: }
  4271                           ;eusart.c: 130: eusartRxCount--;
  4272  056D  3001               	movlw	1
  4273  056E  02F3               	subwf	_eusartRxCount,f	;volatile
  4274                           
  4275                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  4276  056F  0021               	movlb	1	; select bank1
  4277  0570  1691               	bsf	17,5	;volatile
  4278                           
  4279                           ;eusart.c: 133: return readValue;
  4280  0571  0020               	movlb	0	; select bank0
  4281  0572  0821               	movf	EUSART_Read@readValue,w
  4282  0573  0008               	return
  4283  0574                     __end_of_EUSART_Read:	
  4284                           
  4285                           	psect	text15
  4286  0475                     __ptext15:	
  4287 ;; *************** function _GPS_Initialize *****************
  4288 ;; Defined at:
  4289 ;;		line 72 in file "main.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  tmp             1   13[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1
  4303 ;;      Params:         0       0       0
  4304 ;;      Locals:         0       1       0
  4305 ;;      Temps:          0       3       0
  4306 ;;      Totals:         0       4       0
  4307 ;;Total ram usage:        4 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    9
  4310 ;; This function calls:
  4311 ;;		_printf
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _GPS_Initialize
  4319  0475                     _GPS_Initialize:	
  4320                           
  4321                           ;main.c: 74: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  4322                           
  4323                           ;incstack = 0
  4324                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4325  0475  0020               	movlb	0	; select bank0
  4326  0476  01AD               	clrf	GPS_Initialize@tmp
  4327  0477  300A               	movlw	10
  4328  0478  022D               	subwf	GPS_Initialize@tmp,w
  4329  0479  1803               	btfsc	3,0
  4330  047A  2C90               	goto	l2857
  4331  047B                     l2851:	
  4332  047B  3005               	movlw	5
  4333  047C  00AC               	movwf	??_GPS_Initialize+2
  4334  047D  300F               	movlw	15
  4335  047E  00AB               	movwf	??_GPS_Initialize+1
  4336  047F  30F4               	movlw	244
  4337  0480  00AA               	movwf	??_GPS_Initialize
  4338  0481                     u3377:	
  4339  0481  0BAA               	decfsz	??_GPS_Initialize,f
  4340  0482  2C81               	goto	u3377
  4341  0483  0BAB               	decfsz	??_GPS_Initialize+1,f
  4342  0484  2C81               	goto	u3377
  4343  0485  0BAC               	decfsz	??_GPS_Initialize+2,f
  4344  0486  2C81               	goto	u3377
  4345  0487  3001               	movlw	1
  4346  0488  0020               	movlb	0	; select bank0
  4347  0489  00AA               	movwf	??_GPS_Initialize
  4348  048A  082A               	movf	??_GPS_Initialize,w
  4349  048B  07AD               	addwf	GPS_Initialize@tmp,f
  4350  048C  300A               	movlw	10
  4351  048D  022D               	subwf	GPS_Initialize@tmp,w
  4352  048E  1C03               	skipc
  4353  048F  2C7B               	goto	l2851
  4354  0490                     l2857:	
  4355                           
  4356                           ;main.c: 76: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  4357  0490  302F               	movlw	low (STR_1| (0+32768))
  4358  0491  00A3               	movwf	printf@f
  4359  0492  3084               	movlw	high (STR_1| (0+32768))
  4360  0493  00A4               	movwf	printf@f+1
  4361  0494  25C8               	fcall	_printf
  4362                           
  4363                           ;main.c: 77: _delay((unsigned long)((100)*(32000000/4000.0)));
  4364  0495  3005               	movlw	5
  4365  0496  0020               	movlb	0	; select bank0
  4366  0497  00AC               	movwf	??_GPS_Initialize+2
  4367  0498  300F               	movlw	15
  4368  0499  00AB               	movwf	??_GPS_Initialize+1
  4369  049A  30F4               	movlw	244
  4370  049B  00AA               	movwf	??_GPS_Initialize
  4371  049C                     u3387:	
  4372  049C  0BAA               	decfsz	??_GPS_Initialize,f
  4373  049D  2C9C               	goto	u3387
  4374  049E  0BAB               	decfsz	??_GPS_Initialize+1,f
  4375  049F  2C9C               	goto	u3387
  4376  04A0  0BAC               	decfsz	??_GPS_Initialize+2,f
  4377  04A1  2C9C               	goto	u3387
  4378                           
  4379                           ;main.c: 78: printf("$PMTK220,100*2F\r\n");
  4380  04A2  3063               	movlw	low (STR_2| (0+32768))
  4381  04A3  0020               	movlb	0	; select bank0
  4382  04A4  00A3               	movwf	printf@f
  4383  04A5  3084               	movlw	high (STR_2| (0+32768))
  4384  04A6  00A4               	movwf	printf@f+1
  4385  04A7  25C8               	fcall	_printf
  4386                           
  4387                           ;main.c: 79: _delay((unsigned long)((100)*(32000000/4000.0)));
  4388  04A8  3005               	movlw	5
  4389  04A9  0020               	movlb	0	; select bank0
  4390  04AA  00AC               	movwf	??_GPS_Initialize+2
  4391  04AB  300F               	movlw	15
  4392  04AC  00AB               	movwf	??_GPS_Initialize+1
  4393  04AD  30F4               	movlw	244
  4394  04AE  00AA               	movwf	??_GPS_Initialize
  4395  04AF                     u3397:	
  4396  04AF  0BAA               	decfsz	??_GPS_Initialize,f
  4397  04B0  2CAF               	goto	u3397
  4398  04B1  0BAB               	decfsz	??_GPS_Initialize+1,f
  4399  04B2  2CAF               	goto	u3397
  4400  04B3  0BAC               	decfsz	??_GPS_Initialize+2,f
  4401  04B4  2CAF               	goto	u3397
  4402  04B5  0008               	return
  4403  04B6                     __end_of_GPS_Initialize:	
  4404                           
  4405                           	psect	text16
  4406  05C8                     __ptext16:	
  4407 ;; *************** function _printf *****************
  4408 ;; Defined at:
  4409 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  4412 ;;		 -> STR_2(18), STR_1(52), 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  tmpval          4    0        struct .
  4415 ;;  cp              2    0        PTR const unsigned char 
  4416 ;;  len             2    0        unsigned int 
  4417 ;;  val             2    0        unsigned int 
  4418 ;;  c               1    9[BANK0 ] char 
  4419 ;;  ap              1    8[BANK0 ] PTR void [1]
  4420 ;;		 -> ?_printf(2), 
  4421 ;;  flag            1    0        unsigned char 
  4422 ;;  prec            1    0        char 
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  2    3[BANK0 ] int 
  4425 ;; Registers used:
  4426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1
  4432 ;;      Params:         0       2       0
  4433 ;;      Locals:         0       2       0
  4434 ;;      Temps:          0       3       0
  4435 ;;      Totals:         0       7       0
  4436 ;;Total ram usage:        7 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    8
  4439 ;; This function calls:
  4440 ;;		_putch
  4441 ;; This function is called by:
  4442 ;;		_GPS_Initialize
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _printf
  4448  05C8                     _printf:	
  4449                           
  4450                           ;doprnt.c: 466: va_list ap;
  4451                           ;doprnt.c: 499: signed char c;
  4452                           ;doprnt.c: 506: signed char prec;
  4453                           ;doprnt.c: 508: unsigned char flag;
  4454                           ;doprnt.c: 523: union {
  4455                           ;doprnt.c: 524: unsigned long vd;
  4456                           ;doprnt.c: 525: double integ;
  4457                           ;doprnt.c: 526: } tmpval;
  4458                           ;doprnt.c: 528: unsigned int val;
  4459                           ;doprnt.c: 529: unsigned len;
  4460                           ;doprnt.c: 530: const char * cp;
  4461                           ;doprnt.c: 533: *ap = __va_start();
  4462                           
  4463                           ;incstack = 0
  4464                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4465  05C8  3025               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4466  05C9  0020               	movlb	0	; select bank0
  4467  05CA  00A5               	movwf	??_printf
  4468  05CB  0825               	movf	??_printf,w
  4469  05CC  00A8               	movwf	printf@ap
  4470  05CD                     l2825:	
  4471                           ;doprnt.c: 543: }
  4472                           ;doprnt.c: 1422: {
  4473                           
  4474                           ;doprnt.c: 542: continue;
  4475                           
  4476                           ;doprnt.c: 536: while(c = *f++) {
  4477                           
  4478  05CD  0020               	movlb	0	; select bank0
  4479  05CE  0824               	movf	printf@f+1,w
  4480  05CF  00A6               	movwf	??_printf+1
  4481  05D0  0823               	movf	printf@f,w
  4482  05D1  00A5               	movwf	??_printf
  4483  05D2  0AA3               	incf	printf@f,f
  4484  05D3  1903               	skipnz
  4485  05D4  0AA4               	incf	printf@f+1,f
  4486  05D5  0825               	movf	??_printf,w
  4487  05D6  0084               	movwf	4
  4488  05D7  0826               	movf	??_printf+1,w
  4489  05D8  0085               	movwf	5
  4490  05D9  0800               	movf	0,w	;code access
  4491  05DA  00A7               	movwf	??_printf+2
  4492  05DB  0827               	movf	??_printf+2,w
  4493  05DC  00A9               	movwf	printf@c
  4494  05DD  0829               	movf	printf@c,w
  4495  05DE  1903               	btfsc	3,2
  4496  05DF  0008               	return
  4497                           
  4498                           ;doprnt.c: 540: {
  4499                           ;doprnt.c: 541: (putch(c) );
  4500  05E0  0829               	movf	printf@c,w
  4501  05E1  2683               	fcall	_putch
  4502  05E2  2DCD               	goto	l2825
  4503  05E3                     __end_of_printf:	
  4504                           ;doprnt.c: 1469: }
  4505                           ;doprnt.c: 1533: }
  4506                           ;doprnt.c: 1540: return 0;
  4507                           ;	Return value of _printf is never used
  4508                           
  4509                           
  4510                           	psect	text17
  4511  0683                     __ptext17:	
  4512 ;; *************** function _putch *****************
  4513 ;; Defined at:
  4514 ;;		line 164 in file "mcc_generated_files/eusart.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  txData          1    wreg     unsigned char 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  txData          1    2[BANK0 ] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1
  4528 ;;      Params:         0       0       0
  4529 ;;      Locals:         0       1       0
  4530 ;;      Temps:          0       0       0
  4531 ;;      Totals:         0       1       0
  4532 ;;Total ram usage:        1 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    7
  4535 ;; This function calls:
  4536 ;;		_EUSART_Write
  4537 ;; This function is called by:
  4538 ;;		_printf
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function _putch
  4544  0683                     _putch:	
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4548                           ;putch@txData stored from wreg
  4549  0683  0020               	movlb	0	; select bank0
  4550  0684  00A2               	movwf	putch@txData
  4551                           
  4552                           ;eusart.c: 166: EUSART_Write(txData);
  4553  0685  0822               	movf	putch@txData,w
  4554  0686  250E               	fcall	_EUSART_Write
  4555  0687  0008               	return
  4556  0688                     __end_of_putch:	
  4557                           
  4558                           	psect	text18
  4559  050E                     __ptext18:	
  4560 ;; *************** function _EUSART_Write *****************
  4561 ;; Defined at:
  4562 ;;		line 136 in file "mcc_generated_files/eusart.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  txData          1    wreg     unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  txData          1    1[BANK0 ] unsigned char 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1
  4576 ;;      Params:         0       0       0
  4577 ;;      Locals:         0       1       0
  4578 ;;      Temps:          0       1       0
  4579 ;;      Totals:         0       2       0
  4580 ;;Total ram usage:        2 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    6
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		_putch
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _EUSART_Write
  4592  050E                     _EUSART_Write:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4596                           ;EUSART_Write@txData stored from wreg
  4597  050E  0020               	movlb	0	; select bank0
  4598  050F  00A1               	movwf	EUSART_Write@txData
  4599  0510                     l2709:	
  4600                           ;eusart.c: 139: {
  4601                           
  4602                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  4603                           
  4604  0510  0874               	movf	_eusartTxBufferRemaining,w	;volatile
  4605  0511  1903               	btfsc	3,2
  4606  0512  2D10               	goto	l2709
  4607                           
  4608                           ;eusart.c: 140: }
  4609                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  4610  0513  0021               	movlb	1	; select bank1
  4611  0514  1A11               	btfsc	17,4	;volatile
  4612  0515  2D1B               	goto	l131
  4613                           
  4614                           ;eusart.c: 143: {
  4615                           ;eusart.c: 144: TXREG = txData;
  4616  0516  0020               	movlb	0	; select bank0
  4617  0517  0821               	movf	EUSART_Write@txData,w
  4618  0518  0023               	movlb	3	; select bank3
  4619  0519  009A               	movwf	26	;volatile
  4620                           
  4621                           ;eusart.c: 145: }
  4622  051A  2D2F               	goto	l2723
  4623  051B                     l131:	
  4624                           
  4625                           ;eusart.c: 146: else
  4626                           ;eusart.c: 147: {
  4627                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  4628  051B  1211               	bcf	17,4	;volatile
  4629                           
  4630                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  4631  051C  0020               	movlb	0	; select bank0
  4632  051D  0821               	movf	EUSART_Write@txData,w
  4633  051E  00A0               	movwf	??_EUSART_Write
  4634  051F  0868               	movf	_eusartTxHead,w
  4635  0520  3E51               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4636  0521  0086               	movwf	6
  4637  0522  0187               	clrf	7
  4638  0523  0820               	movf	??_EUSART_Write,w
  4639  0524  0081               	movwf	1
  4640  0525  3001               	movlw	1
  4641  0526  00A0               	movwf	??_EUSART_Write
  4642  0527  0820               	movf	??_EUSART_Write,w
  4643  0528  07E8               	addwf	_eusartTxHead,f
  4644                           
  4645                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4646  0529  3008               	movlw	8
  4647  052A  0268               	subwf	_eusartTxHead,w
  4648  052B  1803               	btfsc	3,0
  4649                           
  4650                           ;eusart.c: 151: {
  4651                           ;eusart.c: 152: eusartTxHead = 0;
  4652  052C  01E8               	clrf	_eusartTxHead
  4653                           
  4654                           ;eusart.c: 153: }
  4655                           ;eusart.c: 154: eusartTxBufferRemaining--;
  4656  052D  3001               	movlw	1
  4657  052E  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
  4658  052F                     l2723:	
  4659                           
  4660                           ;eusart.c: 155: }
  4661                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  4662  052F  0021               	movlb	1	; select bank1
  4663  0530  1611               	bsf	17,4	;volatile
  4664  0531  0008               	return
  4665  0532                     __end_of_EUSART_Write:	
  4666                           
  4667                           	psect	text19
  4668  0591                     __ptext19:	
  4669 ;; *************** function _EPWM_LoadDutyValue *****************
  4670 ;; Defined at:
  4671 ;;		line 87 in file "mcc_generated_files/epwm.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1
  4685 ;;      Params:         0       2       0
  4686 ;;      Locals:         0       0       0
  4687 ;;      Temps:          0       2       0
  4688 ;;      Totals:         0       4       0
  4689 ;;Total ram usage:        4 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    6
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _EPWM_LoadDutyValue
  4701  0591                     _EPWM_LoadDutyValue:	
  4702                           
  4703                           ;epwm.c: 90: CCPR1L = ((dutyValue & 0x03FC)>>2);
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in _EPWM_LoadDutyValue: [wreg+status,2+status,0]
  4707  0591  0020               	movlb	0	; select bank0
  4708  0592  0821               	movf	EPWM_LoadDutyValue@dutyValue+1,w
  4709  0593  00A3               	movwf	??_EPWM_LoadDutyValue+1
  4710  0594  0820               	movf	EPWM_LoadDutyValue@dutyValue,w
  4711  0595  00A2               	movwf	??_EPWM_LoadDutyValue
  4712  0596  36A3               	lsrf	??_EPWM_LoadDutyValue+1,f
  4713  0597  0CA2               	rrf	??_EPWM_LoadDutyValue,f
  4714  0598  36A3               	lsrf	??_EPWM_LoadDutyValue+1,f
  4715  0599  0CA2               	rrf	??_EPWM_LoadDutyValue,f
  4716  059A  0822               	movf	??_EPWM_LoadDutyValue,w
  4717  059B  0025               	movlb	5	; select bank5
  4718  059C  0091               	movwf	17	;volatile
  4719                           
  4720                           ;epwm.c: 93: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  4721  059D  0020               	movlb	0	; select bank0
  4722  059E  0820               	movf	EPWM_LoadDutyValue@dutyValue,w
  4723  059F  3903               	andlw	3
  4724  05A0  00A2               	movwf	??_EPWM_LoadDutyValue
  4725  05A1  3004               	movlw	4
  4726  05A2                     u2565:	
  4727  05A2  35A2               	lslf	??_EPWM_LoadDutyValue,f
  4728  05A3  0B89               	decfsz	9,f
  4729  05A4  2DA2               	goto	u2565
  4730  05A5  0025               	movlb	5	; select bank5
  4731  05A6  0813               	movf	19,w	;volatile
  4732  05A7  39CF               	andlw	207
  4733  05A8  0020               	movlb	0	; select bank0
  4734  05A9  0422               	iorwf	??_EPWM_LoadDutyValue,w
  4735  05AA  0025               	movlb	5	; select bank5
  4736  05AB  0093               	movwf	19	;volatile
  4737  05AC  0008               	return
  4738  05AD                     __end_of_EPWM_LoadDutyValue:	
  4739                           
  4740                           	psect	intentry
  4741  0004                     __pintentry:	
  4742 ;; *************** function _INTERRUPT_InterruptManager *****************
  4743 ;; Defined at:
  4744 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;		None
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1
  4758 ;;      Params:         0       0       0
  4759 ;;      Locals:         0       0       0
  4760 ;;      Temps:          1       0       0
  4761 ;;      Totals:         1       0       0
  4762 ;;Total ram usage:        1 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    5
  4765 ;; This function calls:
  4766 ;;		_EUSART_Receive_ISR
  4767 ;;		_EUSART_Transmit_ISR
  4768 ;;		_TMR0_ISR
  4769 ;; This function is called by:
  4770 ;;		Interrupt level 1
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774  0004                     _INTERRUPT_InterruptManager:	
  4775                           
  4776                           ;incstack = 0
  4777  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4778                           
  4779                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4780  0005  3180               	pagesel	$
  4781  0006  0020               	movlb	0	; select bank0
  4782  0007  087F               	movf	127,w
  4783  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  4784                           
  4785                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4786  0009  1A8B               	btfsc	11,5	;volatile
  4787  000A  1D0B               	btfss	11,2	;volatile
  4788  000B  280D               	goto	i1l2569
  4789                           
  4790                           ;interrupt_manager.c: 55: {
  4791                           ;interrupt_manager.c: 56: TMR0_ISR();
  4792  000C  2628               	fcall	_TMR0_ISR
  4793  000D                     i1l2569:	
  4794                           
  4795                           ;interrupt_manager.c: 57: }
  4796                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4797  000D  1F0B               	btfss	11,6	;volatile
  4798  000E  2816               	goto	i1l2577
  4799  000F  0021               	movlb	1	; select bank1
  4800  0010  1E11               	btfss	17,4	;volatile
  4801  0011  2816               	goto	i1l2577
  4802  0012  0020               	movlb	0	; select bank0
  4803  0013  1E11               	btfss	17,4	;volatile
  4804  0014  2816               	goto	i1l2577
  4805                           
  4806                           ;interrupt_manager.c: 59: {
  4807                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  4808  0015  2574               	fcall	_EUSART_Transmit_ISR
  4809  0016                     i1l2577:	
  4810                           
  4811                           ;interrupt_manager.c: 61: }
  4812                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  4813  0016  1F0B               	btfss	11,6	;volatile
  4814  0017  281F               	goto	i1l288
  4815  0018  0021               	movlb	1	; select bank1
  4816  0019  1E91               	btfss	17,5	;volatile
  4817  001A  281F               	goto	i1l288
  4818  001B  0020               	movlb	0	; select bank0
  4819  001C  1E91               	btfss	17,5	;volatile
  4820  001D  281F               	goto	i1l288
  4821                           
  4822                           ;interrupt_manager.c: 63: {
  4823                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  4824  001E  25E3               	fcall	_EUSART_Receive_ISR
  4825  001F                     i1l288:	
  4826                           ;interrupt_manager.c: 66: else
  4827                           ;interrupt_manager.c: 67: {
  4828                           
  4829                           ;interrupt_manager.c: 65: }
  4830                           
  4831  001F  0879               	movf	??_INTERRUPT_InterruptManager,w
  4832  0020  0020               	movlb	0	; select bank0
  4833  0021  00FF               	movwf	127
  4834  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4835  0023  0009               	retfie
  4836  0024                     __end_of_INTERRUPT_InterruptManager:	
  4837                           
  4838                           	psect	text21
  4839  0628                     __ptext21:	
  4840 ;; *************** function _TMR0_ISR *****************
  4841 ;; Defined at:
  4842 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;		None
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;		None
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  1    wreg      void 
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0, pclath, cstack
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMMON   BANK0   BANK1
  4856 ;;      Params:         0       0       0
  4857 ;;      Locals:         0       0       0
  4858 ;;      Temps:          0       0       0
  4859 ;;      Totals:         0       0       0
  4860 ;;Total ram usage:        0 bytes
  4861 ;; Hardware stack levels used:    1
  4862 ;; Hardware stack levels required when called:    4
  4863 ;; This function calls:
  4864 ;;		_TMR0_CallBack
  4865 ;; This function is called by:
  4866 ;;		_INTERRUPT_InterruptManager
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           
  4871                           ;psect for function _TMR0_ISR
  4872  0628                     _TMR0_ISR:	
  4873                           
  4874                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  4875                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  4876                           
  4877                           ;incstack = 0
  4878                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4879  0628  110B               	bcf	11,2	;volatile
  4880                           
  4881                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  4882  0629  0020               	movlb	0	; select bank0
  4883  062A  086B               	movf	_timer0ReloadVal,w	;volatile
  4884  062B  0095               	movwf	21	;volatile
  4885                           
  4886                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  4887  062C  3001               	movlw	1
  4888  062D  07DC               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  4889  062E  3000               	movlw	0
  4890  062F  3DDD               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  4891  0630  3000               	movlw	0
  4892  0631  025D               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  4893  0632  3002               	movlw	2
  4894  0633  1903               	skipnz
  4895  0634  025C               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  4896  0635  1C03               	skipc
  4897  0636  0008               	return
  4898                           
  4899                           ;tmr0.c: 119: {
  4900                           ;tmr0.c: 121: TMR0_CallBack();
  4901  0637  2654               	fcall	_TMR0_CallBack
  4902                           
  4903                           ;tmr0.c: 124: CountCallBack = 0;
  4904  0638  0020               	movlb	0	; select bank0
  4905  0639  01DC               	clrf	TMR0_ISR@CountCallBack	;volatile
  4906  063A  01DD               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  4907  063B  0008               	return
  4908  063C                     __end_of_TMR0_ISR:	
  4909                           
  4910                           	psect	text22
  4911  0654                     __ptext22:	
  4912 ;; *************** function _TMR0_CallBack *****************
  4913 ;; Defined at:
  4914 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      void 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0, pclath, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1
  4928 ;;      Params:         0       0       0
  4929 ;;      Locals:         0       0       0
  4930 ;;      Temps:          0       0       0
  4931 ;;      Totals:         0       0       0
  4932 ;;Total ram usage:        0 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		Absolute function
  4937 ;;		_TMR0_DefaultInterruptHandler
  4938 ;;		_my10msTimerISR
  4939 ;; This function is called by:
  4940 ;;		_TMR0_ISR
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _TMR0_CallBack
  4946  0654                     _TMR0_CallBack:	
  4947                           
  4948                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4952  0654  0020               	movlb	0	; select bank0
  4953  0655  085E               	movf	_TMR0_InterruptHandler,w
  4954  0656  045F               	iorwf	_TMR0_InterruptHandler+1,w
  4955  0657  1903               	btfsc	3,2
  4956  0658  0008               	return
  4957                           
  4958                           ;tmr0.c: 135: {
  4959                           ;tmr0.c: 136: TMR0_InterruptHandler();
  4960  0659  085F               	movf	_TMR0_InterruptHandler+1,w
  4961  065A  008A               	movwf	10
  4962  065B  085E               	movf	_TMR0_InterruptHandler,w
  4963  065C  000A               	callw
  4964  065D  3186               	pagesel	$
  4965  065E  0008               	return
  4966  065F                     __end_of_TMR0_CallBack:	
  4967                           
  4968                           	psect	text23
  4969  068F                     __ptext23:	
  4970 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4971 ;; Defined at:
  4972 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		None
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1
  4986 ;;      Params:         0       0       0
  4987 ;;      Locals:         0       0       0
  4988 ;;      Temps:          0       0       0
  4989 ;;      Totals:         0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_TMR0_Initialize
  4996 ;;		_TMR0_CallBack
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           
  5001                           ;psect for function _TMR0_DefaultInterruptHandler
  5002  068F                     _TMR0_DefaultInterruptHandler:	
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5006  068F  0008               	return
  5007  0690                     __end_of_TMR0_DefaultInterruptHandler:	
  5008                           
  5009                           	psect	text24
  5010  068B                     __ptext24:	
  5011 ;; *************** function _my10msTimerISR *****************
  5012 ;; Defined at:
  5013 ;;		line 365 in file "main.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1
  5027 ;;      Params:         0       0       0
  5028 ;;      Locals:         0       0       0
  5029 ;;      Temps:          0       0       0
  5030 ;;      Totals:         0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    2
  5034 ;; This function calls:
  5035 ;;		_LED_update_loop
  5036 ;;		_button_update_loop
  5037 ;; This function is called by:
  5038 ;;		_main
  5039 ;;		_TMR0_CallBack
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _my10msTimerISR
  5045  068B                     _my10msTimerISR:	
  5046                           
  5047                           ;main.c: 367: LED_update_loop();
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  5051  068B  24E6               	fcall	_LED_update_loop
  5052                           
  5053                           ;main.c: 368: button_update_loop();
  5054  068C  23B7               	fcall	_button_update_loop
  5055  068D  0008               	return
  5056  068E                     __end_of_my10msTimerISR:	
  5057                           
  5058                           	psect	text25
  5059  03B7                     __ptext25:	
  5060 ;; *************** function _button_update_loop *****************
  5061 ;; Defined at:
  5062 ;;		line 78 in file "interact.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  current_stat    1    3[COMMON] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1
  5076 ;;      Params:         0       0       0
  5077 ;;      Locals:         1       0       0
  5078 ;;      Temps:          2       0       0
  5079 ;;      Totals:         3       0       0
  5080 ;;Total ram usage:        3 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    1
  5083 ;; This function calls:
  5084 ;;		_get_button_state
  5085 ;; This function is called by:
  5086 ;;		_my10msTimerISR
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _button_update_loop
  5092  03B7                     _button_update_loop:	
  5093                           
  5094                           ;interact.c: 80: unsigned char current_state = get_button_state();
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  5098  03B7  2648               	fcall	_get_button_state
  5099  03B8  00F6               	movwf	??_button_update_loop
  5100  03B9  0876               	movf	??_button_update_loop,w
  5101  03BA  00F8               	movwf	button_update_loop@current_state
  5102                           
  5103                           ;interact.c: 81: if (!b_push_confirmed)
  5104  03BB  0020               	movlb	0	; select bank0
  5105  03BC  0864               	movf	_b_push_confirmed,w	;volatile
  5106  03BD  1D03               	btfss	3,2
  5107  03BE  2BE4               	goto	i1l2059
  5108                           
  5109                           ;interact.c: 82: {
  5110                           ;interact.c: 84: if (current_state != b_last_state)
  5111  03BF  0878               	movf	button_update_loop@current_state,w
  5112  03C0  00F6               	movwf	??_button_update_loop
  5113  03C1  01F7               	clrf	??_button_update_loop+1
  5114  03C2  0871               	movf	_b_last_state+1,w	;volatile
  5115  03C3  0677               	xorwf	??_button_update_loop+1,w
  5116  03C4  1D03               	skipz
  5117  03C5  2BC8               	goto	u140_25
  5118  03C6  0870               	movf	_b_last_state,w	;volatile
  5119  03C7  0676               	xorwf	??_button_update_loop,w
  5120  03C8                     u140_25:	
  5121  03C8  1903               	skipnz
  5122  03C9  2BD3               	goto	i1l2051
  5123                           
  5124                           ;interact.c: 85: {
  5125                           ;interact.c: 86: b_count_pressed = 0;
  5126  03CA  01F2               	clrf	_b_count_pressed	;volatile
  5127                           
  5128                           ;interact.c: 87: b_last_state = current_state;
  5129  03CB  0878               	movf	button_update_loop@current_state,w
  5130  03CC  00F6               	movwf	??_button_update_loop
  5131  03CD  01F7               	clrf	??_button_update_loop+1
  5132  03CE  0876               	movf	??_button_update_loop,w
  5133  03CF  00F0               	movwf	_b_last_state	;volatile
  5134  03D0  0877               	movf	??_button_update_loop+1,w
  5135  03D1  00F1               	movwf	_b_last_state+1	;volatile
  5136                           
  5137                           ;interact.c: 88: }
  5138  03D2  0008               	return
  5139  03D3                     i1l2051:	
  5140                           
  5141                           ;interact.c: 89: else if (b_last_state == 1)
  5142  03D3  0370               	decf	_b_last_state,w	;volatile
  5143  03D4  0471               	iorwf	_b_last_state+1,w	;volatile
  5144  03D5  1D03               	btfss	3,2
  5145  03D6  0008               	return
  5146                           
  5147                           ;interact.c: 90: {
  5148                           ;interact.c: 91: b_count_pressed++;
  5149  03D7  3001               	movlw	1
  5150  03D8  00F6               	movwf	??_button_update_loop
  5151  03D9  0876               	movf	??_button_update_loop,w
  5152  03DA  07F2               	addwf	_b_count_pressed,f	;volatile
  5153                           
  5154                           ;interact.c: 92: if (b_count_pressed > 5)
  5155  03DB  3006               	movlw	6
  5156  03DC  0272               	subwf	_b_count_pressed,w	;volatile
  5157  03DD  1C03               	skipc
  5158  03DE  0008               	return
  5159                           
  5160                           ;interact.c: 93: b_push_confirmed = 1;
  5161  03DF  3001               	movlw	1
  5162  03E0  00F6               	movwf	??_button_update_loop
  5163  03E1  0876               	movf	??_button_update_loop,w
  5164  03E2  00E4               	movwf	_b_push_confirmed	;volatile
  5165                           
  5166                           ;interact.c: 94: }
  5167                           ;interact.c: 95: }
  5168  03E3  0008               	return
  5169  03E4                     i1l2059:	
  5170                           
  5171                           ;interact.c: 96: else
  5172                           ;interact.c: 97: {
  5173                           ;interact.c: 98: if (current_state != b_last_state)
  5174  03E4  0878               	movf	button_update_loop@current_state,w
  5175  03E5  00F6               	movwf	??_button_update_loop
  5176  03E6  01F7               	clrf	??_button_update_loop+1
  5177  03E7  0871               	movf	_b_last_state+1,w	;volatile
  5178  03E8  0677               	xorwf	??_button_update_loop+1,w
  5179  03E9  1D03               	skipz
  5180  03EA  2BED               	goto	u143_25
  5181  03EB  0870               	movf	_b_last_state,w	;volatile
  5182  03EC  0676               	xorwf	??_button_update_loop,w
  5183  03ED                     u143_25:	
  5184  03ED  1903               	skipnz
  5185  03EE  2BFC               	goto	i1l2067
  5186                           
  5187                           ;interact.c: 99: {
  5188                           ;interact.c: 100: b_count_released = 0;
  5189  03EF  01E2               	clrf	_b_count_released	;volatile
  5190                           
  5191                           ;interact.c: 101: b_last_state = current_state;
  5192  03F0  0878               	movf	button_update_loop@current_state,w
  5193  03F1  00F6               	movwf	??_button_update_loop
  5194  03F2  01F7               	clrf	??_button_update_loop+1
  5195  03F3  0876               	movf	??_button_update_loop,w
  5196  03F4  00F0               	movwf	_b_last_state	;volatile
  5197  03F5  0877               	movf	??_button_update_loop+1,w
  5198  03F6  00F1               	movwf	_b_last_state+1	;volatile
  5199                           
  5200                           ;interact.c: 102: b_has_once_been_released = 1;
  5201  03F7  3001               	movlw	1
  5202  03F8  00F6               	movwf	??_button_update_loop
  5203  03F9  0876               	movf	??_button_update_loop,w
  5204  03FA  00E3               	movwf	_b_has_once_been_released	;volatile
  5205                           
  5206                           ;interact.c: 103: }
  5207  03FB  0008               	return
  5208  03FC                     i1l2067:	
  5209                           
  5210                           ;interact.c: 104: else if ((b_last_state == 1)&&(!b_has_once_been_released))
  5211  03FC  0370               	decf	_b_last_state,w	;volatile
  5212  03FD  0471               	iorwf	_b_last_state+1,w	;volatile
  5213  03FE  1D03               	btfss	3,2
  5214  03FF  2C10               	goto	i1l2077
  5215  0400  0863               	movf	_b_has_once_been_released,w	;volatile
  5216  0401  1D03               	btfss	3,2
  5217  0402  2C10               	goto	i1l2077
  5218                           
  5219                           ;interact.c: 105: {
  5220                           ;interact.c: 106: b_count_pressed++;
  5221  0403  3001               	movlw	1
  5222  0404  00F6               	movwf	??_button_update_loop
  5223  0405  0876               	movf	??_button_update_loop,w
  5224  0406  07F2               	addwf	_b_count_pressed,f	;volatile
  5225                           
  5226                           ;interact.c: 107: if (b_count_pressed >= 100)
  5227  0407  3064               	movlw	100
  5228  0408  0272               	subwf	_b_count_pressed,w	;volatile
  5229  0409  1C03               	skipc
  5230  040A  0008               	return
  5231                           
  5232                           ;interact.c: 108: b_confirmed_state = long_push;
  5233  040B  3002               	movlw	2
  5234  040C  00F6               	movwf	??_button_update_loop
  5235  040D  0876               	movf	??_button_update_loop,w
  5236  040E  00E1               	movwf	_b_confirmed_state	;volatile
  5237                           
  5238                           ;interact.c: 109: }
  5239  040F  0008               	return
  5240  0410                     i1l2077:	
  5241                           
  5242                           ;interact.c: 110: else if (b_last_state == 0)
  5243  0410  0870               	movf	_b_last_state,w	;volatile
  5244  0411  0471               	iorwf	_b_last_state+1,w	;volatile
  5245  0412  1D03               	btfss	3,2
  5246  0413  0008               	return
  5247                           
  5248                           ;interact.c: 111: {
  5249                           ;interact.c: 112: b_count_released++;
  5250  0414  3001               	movlw	1
  5251  0415  00F6               	movwf	??_button_update_loop
  5252  0416  0876               	movf	??_button_update_loop,w
  5253  0417  07E2               	addwf	_b_count_released,f	;volatile
  5254                           
  5255                           ;interact.c: 113: if (b_count_released > 10)
  5256  0418  300B               	movlw	11
  5257  0419  0262               	subwf	_b_count_released,w	;volatile
  5258  041A  1C03               	skipc
  5259  041B  0008               	return
  5260                           
  5261                           ;interact.c: 114: if (b_count_pressed >= 75)
  5262  041C  304B               	movlw	75
  5263  041D  0272               	subwf	_b_count_pressed,w	;volatile
  5264  041E  1C03               	skipc
  5265  041F  2C25               	goto	i1l2087
  5266                           
  5267                           ;interact.c: 115: b_confirmed_state = long_push;
  5268  0420  3002               	movlw	2
  5269  0421  00F6               	movwf	??_button_update_loop
  5270  0422  0876               	movf	??_button_update_loop,w
  5271  0423  00E1               	movwf	_b_confirmed_state	;volatile
  5272  0424  0008               	return
  5273  0425                     i1l2087:	
  5274                           
  5275                           ;interact.c: 116: else
  5276                           ;interact.c: 117: b_confirmed_state = short_push;
  5277  0425  3001               	movlw	1
  5278  0426  00F6               	movwf	??_button_update_loop
  5279  0427  0876               	movf	??_button_update_loop,w
  5280  0428  00E1               	movwf	_b_confirmed_state	;volatile
  5281  0429  0008               	return
  5282  042A                     __end_of_button_update_loop:	
  5283                           
  5284                           	psect	text26
  5285  0648                     __ptext26:	
  5286 ;; *************** function _get_button_state *****************
  5287 ;; Defined at:
  5288 ;;		line 58 in file "interact.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  state           1    0[COMMON] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      unsigned char 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1
  5302 ;;      Params:         0       0       0
  5303 ;;      Locals:         1       0       0
  5304 ;;      Temps:          0       0       0
  5305 ;;      Totals:         1       0       0
  5306 ;;Total ram usage:        1 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; This function calls:
  5309 ;;		Nothing
  5310 ;; This function is called by:
  5311 ;;		_button_update_loop
  5312 ;;		_button_init
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _get_button_state
  5318  0648                     _get_button_state:	
  5319                           
  5320                           ;interact.c: 61: unsigned char state = PORTAbits.RA4;
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5324  0648  3000               	movlw	0
  5325  0649  0020               	movlb	0	; select bank0
  5326  064A  1A0C               	btfsc	12,4	;volatile
  5327  064B  3001               	movlw	1
  5328  064C  00F5               	movwf	get_button_state@state
  5329                           
  5330                           ;interact.c: 62: if (state == 1)
  5331  064D  0375               	decf	get_button_state@state,w
  5332  064E  1D03               	btfss	3,2
  5333  064F  2E52               	goto	i1l1993
  5334                           
  5335                           ;interact.c: 63: return 0;
  5336  0650  3000               	movlw	0
  5337  0651  0008               	return
  5338  0652                     i1l1993:	
  5339                           
  5340                           ;interact.c: 64: else return 1;
  5341  0652  3001               	movlw	1
  5342  0653  0008               	return
  5343  0654                     __end_of_get_button_state:	
  5344                           
  5345                           	psect	text27
  5346  04E6                     __ptext27:	
  5347 ;; *************** function _LED_update_loop *****************
  5348 ;; Defined at:
  5349 ;;		line 30 in file "interact.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      void 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1
  5363 ;;      Params:         0       0       0
  5364 ;;      Locals:         0       0       0
  5365 ;;      Temps:          1       0       0
  5366 ;;      Totals:         1       0       0
  5367 ;;Total ram usage:        1 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_my10msTimerISR
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _LED_update_loop
  5378  04E6                     _LED_update_loop:	
  5379                           
  5380                           ;interact.c: 32: if (LED_state == manual_mode)
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  5384  04E6  3004               	movlw	4
  5385  04E7  0020               	movlb	0	; select bank0
  5386  04E8  066C               	xorwf	_LED_state,w
  5387  04E9  1903               	btfsc	3,2
  5388  04EA  0008               	return
  5389                           
  5390                           ;interact.c: 34: else if (LED_state == slow_blinking)
  5391                           
  5392                           ;interact.c: 33: return;
  5393  04EB  3002               	movlw	2
  5394  04EC  066C               	xorwf	_LED_state,w
  5395  04ED  1D03               	btfss	3,2
  5396  04EE  2CFC               	goto	i1l2031
  5397                           
  5398                           ;interact.c: 35: {
  5399                           ;interact.c: 36: LED_counter++;
  5400  04EF  3001               	movlw	1
  5401  04F0  00F5               	movwf	??_LED_update_loop
  5402  04F1  0875               	movf	??_LED_update_loop,w
  5403  04F2  07E0               	addwf	_LED_counter,f	;volatile
  5404                           
  5405                           ;interact.c: 37: if (LED_counter >= 85)
  5406  04F3  3055               	movlw	85
  5407  04F4  0260               	subwf	_LED_counter,w	;volatile
  5408  04F5  1C03               	skipc
  5409  04F6  0008               	return
  5410                           
  5411                           ;interact.c: 38: {
  5412                           ;interact.c: 39: LED_counter = 0;
  5413  04F7  01E0               	clrf	_LED_counter	;volatile
  5414                           
  5415                           ;interact.c: 40: do { LATA5 = ~LATA5; } while(0);
  5416  04F8  3020               	movlw	32
  5417  04F9  0022               	movlb	2	; select bank2
  5418  04FA  068C               	xorwf	12,f
  5419                           
  5420                           ;interact.c: 41: }
  5421                           ;interact.c: 42: }
  5422  04FB  0008               	return
  5423  04FC                     i1l2031:	
  5424                           
  5425                           ;interact.c: 43: else if (LED_state == fast_blinking)
  5426  04FC  3003               	movlw	3
  5427  04FD  0020               	movlb	0	; select bank0
  5428  04FE  066C               	xorwf	_LED_state,w
  5429  04FF  1D03               	btfss	3,2
  5430  0500  0008               	return
  5431                           
  5432                           ;interact.c: 44: {
  5433                           ;interact.c: 45: LED_counter++;
  5434  0501  3001               	movlw	1
  5435  0502  00F5               	movwf	??_LED_update_loop
  5436  0503  0875               	movf	??_LED_update_loop,w
  5437  0504  07E0               	addwf	_LED_counter,f	;volatile
  5438                           
  5439                           ;interact.c: 46: if (LED_counter >= 20)
  5440  0505  3014               	movlw	20
  5441  0506  0260               	subwf	_LED_counter,w	;volatile
  5442  0507  1C03               	skipc
  5443  0508  0008               	return
  5444                           
  5445                           ;interact.c: 47: {
  5446                           ;interact.c: 48: LED_counter = 0;
  5447  0509  01E0               	clrf	_LED_counter	;volatile
  5448                           
  5449                           ;interact.c: 49: do { LATA5 = ~LATA5; } while(0);
  5450  050A  3020               	movlw	32
  5451  050B  0022               	movlb	2	; select bank2
  5452  050C  068C               	xorwf	12,f
  5453  050D  0008               	return
  5454  050E                     __end_of_LED_update_loop:	
  5455                           
  5456                           	psect	text28
  5457  0574                     __ptext28:	
  5458 ;; *************** function _EUSART_Transmit_ISR *****************
  5459 ;; Defined at:
  5460 ;;		line 169 in file "mcc_generated_files/eusart.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1
  5474 ;;      Params:         0       0       0
  5475 ;;      Locals:         0       0       0
  5476 ;;      Temps:          1       0       0
  5477 ;;      Totals:         1       0       0
  5478 ;;Total ram usage:        1 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_INTERRUPT_InterruptManager
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           
  5488                           ;psect for function _EUSART_Transmit_ISR
  5489  0574                     _EUSART_Transmit_ISR:	
  5490                           
  5491                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5495  0574  3008               	movlw	8
  5496  0575  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
  5497  0576  1803               	skipnc
  5498  0577  2D8E               	goto	i1l143
  5499                           
  5500                           ;eusart.c: 174: {
  5501                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  5502  0578  0020               	movlb	0	; select bank0
  5503  0579  0869               	movf	_eusartTxTail,w
  5504  057A  3E51               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5505  057B  0086               	movwf	6
  5506  057C  0187               	clrf	7
  5507  057D  0801               	movf	1,w
  5508  057E  0023               	movlb	3	; select bank3
  5509  057F  009A               	movwf	26	;volatile
  5510  0580  3001               	movlw	1
  5511  0581  00F5               	movwf	??_EUSART_Transmit_ISR
  5512  0582  0875               	movf	??_EUSART_Transmit_ISR,w
  5513  0583  0020               	movlb	0	; select bank0
  5514  0584  07E9               	addwf	_eusartTxTail,f
  5515                           
  5516                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5517  0585  3008               	movlw	8
  5518  0586  0269               	subwf	_eusartTxTail,w
  5519  0587  1803               	btfsc	3,0
  5520                           
  5521                           ;eusart.c: 177: {
  5522                           ;eusart.c: 178: eusartTxTail = 0;
  5523  0588  01E9               	clrf	_eusartTxTail
  5524                           
  5525                           ;eusart.c: 179: }
  5526                           ;eusart.c: 180: eusartTxBufferRemaining++;
  5527  0589  3001               	movlw	1
  5528  058A  00F5               	movwf	??_EUSART_Transmit_ISR
  5529  058B  0875               	movf	??_EUSART_Transmit_ISR,w
  5530  058C  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
  5531                           
  5532                           ;eusart.c: 181: }
  5533  058D  0008               	return
  5534  058E                     i1l143:	
  5535                           
  5536                           ;eusart.c: 182: else
  5537                           ;eusart.c: 183: {
  5538                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  5539  058E  0021               	movlb	1	; select bank1
  5540  058F  1211               	bcf	17,4	;volatile
  5541  0590  0008               	return
  5542  0591                     __end_of_EUSART_Transmit_ISR:	
  5543                           
  5544                           	psect	text29
  5545  05E3                     __ptext29:	
  5546 ;; *************** function _EUSART_Receive_ISR *****************
  5547 ;; Defined at:
  5548 ;;		line 188 in file "mcc_generated_files/eusart.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1
  5562 ;;      Params:         0       0       0
  5563 ;;      Locals:         0       0       0
  5564 ;;      Temps:          1       0       0
  5565 ;;      Totals:         1       0       0
  5566 ;;Total ram usage:        1 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_INTERRUPT_InterruptManager
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _EUSART_Receive_ISR
  5577  05E3                     _EUSART_Receive_ISR:	
  5578                           
  5579                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5583  05E3  0023               	movlb	3	; select bank3
  5584  05E4  1C9D               	btfss	29,1	;volatile
  5585  05E5  2DE8               	goto	i1l2227
  5586                           
  5587                           ;eusart.c: 192: {
  5588                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  5589  05E6  139D               	bcf	29,7	;volatile
  5590                           
  5591                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  5592  05E7  179D               	bsf	29,7	;volatile
  5593  05E8                     i1l2227:	
  5594                           
  5595                           ;eusart.c: 197: }
  5596                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  5597  05E8  0819               	movf	25,w	;volatile
  5598  05E9  00F5               	movwf	??_EUSART_Receive_ISR
  5599  05EA  0020               	movlb	0	; select bank0
  5600  05EB  0866               	movf	_eusartRxHead,w
  5601  05EC  3E49               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5602  05ED  0086               	movwf	6
  5603  05EE  0187               	clrf	7
  5604  05EF  0875               	movf	??_EUSART_Receive_ISR,w
  5605  05F0  0081               	movwf	1
  5606  05F1  3001               	movlw	1
  5607  05F2  00F5               	movwf	??_EUSART_Receive_ISR
  5608  05F3  0875               	movf	??_EUSART_Receive_ISR,w
  5609  05F4  07E6               	addwf	_eusartRxHead,f
  5610                           
  5611                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5612  05F5  3008               	movlw	8
  5613  05F6  0266               	subwf	_eusartRxHead,w
  5614  05F7  1803               	btfsc	3,0
  5615                           
  5616                           ;eusart.c: 202: {
  5617                           ;eusart.c: 203: eusartRxHead = 0;
  5618  05F8  01E6               	clrf	_eusartRxHead
  5619                           
  5620                           ;eusart.c: 204: }
  5621                           ;eusart.c: 205: eusartRxCount++;
  5622  05F9  3001               	movlw	1
  5623  05FA  00F5               	movwf	??_EUSART_Receive_ISR
  5624  05FB  0875               	movf	??_EUSART_Receive_ISR,w
  5625  05FC  07F3               	addwf	_eusartRxCount,f	;volatile
  5626  05FD  0008               	return
  5627  05FE                     __end_of_EUSART_Receive_ISR:	
  5628  007E                     btemp	set	126	;btemp
  5629  007E                     int$flags	set	126
  5630  007E                     wtemp	set	126
  5631  007E                     wtemp0	set	126
  5632  0080                     wtemp1	set	128
  5633  0082                     wtemp2	set	130
  5634  0084                     wtemp3	set	132
  5635  0086                     wtemp4	set	134
  5636  0088                     wtemp5	set	136
  5637  007F                     wtemp6	set	127
  5638  007E                     ttemp	set	126
  5639  007E                     ttemp0	set	126
  5640  0081                     ttemp1	set	129
  5641  0084                     ttemp2	set	132
  5642  0087                     ttemp3	set	135
  5643  007F                     ttemp4	set	127
  5644  007E                     ltemp	set	126
  5645  007E                     ltemp0	set	126
  5646  0082                     ltemp1	set	130
  5647  0086                     ltemp2	set	134
  5648  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    5
    Data        1
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     41      77
    BANK1            32      7       7

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_multiply_fp
    _multiply_fp->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_Initialize->_printf
    _printf->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    5507
                                             38 BANK0      3     3      0
                                              0 BANK1      7     7      0
                 _EPWM_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    20      6    1265
                                             12 BANK0     26    20      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                    _EPWM_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     155
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      11    11      0    2257
                                              2 BANK0     11    11      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                             10 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_LoadDutyValue                                   4     2      2     601
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              4 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   3     3      0     112
                                              1 COMMON     3     3      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   _multiply_fp
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      7       7       8       21.9%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Sep 18 11:14:42 2016

                             __CFG_CP$OFF 0000                           _timer0ReloadVal 006B  
                                     l131 051B                    __end_of_my10msTimerISR 068E  
                                     l432 0194                                       l264 066D  
                                     l513 054E                                       l462 026F  
                                     _PR2 001B                              __CFG_CPD$OFF 0000  
                         _TMR2_Initialize 065F                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0075                              __CFG_LVP$OFF 0000  
                                    l3003 0105                                      l3121 01B2  
                                    l3033 012F                                      l3025 0127  
                                    l3035 0130                                      l3203 0217  
                                    l3125 01B4                                      l3117 01AA  
                                    l3133 053E                                      l3221 024B  
                                    l3135 0545                                      l3231 026B  
                                    l3081 0175                                      l3057 0152  
                                    l3091 017F                                      l3059 0153  
                                    l3235 0278                                      l3227 0262  
                                    l3171 01C9                                      l3261 02BD  
                                    l3253 02A1                                      l3181 01E8  
                                    l3247 028A                                      l3191 0214  
                                    l3089 017D                                      l3257 02B0  
                                    l3177 01E0                                      l2723 052F  
                                    l3099 018D                                      l3187 0208  
                                    l2709 0510                                      l2903 007C  
                                    l2825 05CD                                      l2833 04C9  
                                    l2851 047B                                      l2907 007E  
                                    l2941 00B1                                      l2909 007F  
                                    l2829 04BF                                      l2759 0557  
                                    l2951 00BA                                      l2919 008F  
                                    l2871 0046                                      l2857 0490  
                                    l2961 00CA                                      l2949 00B9  
                                    l2893 0068                                      l2869 0039  
                                    l2991 00F4                                      l2983 00EC  
                                    l2993 00F5                                      STR_1 042F  
                                    STR_2 0463                                      _LATA 010C  
                                    _LATC 010E                                      u3105 031C  
                                    u3115 0333                                      u3125 0348  
                                    u3135 036C                                      u3145 03A2  
                                    u3307 020F                                      u3317 021E  
                                    u2535 04CA                                      u3095 0309  
                                    u3327 023A                                      u2545 04D1  
                                    u3337 0252                                      u3347 0291  
                                    u2565 05A2                                      u3357 02AB  
                                    u3367 02D6                                      u3377 0481  
                                    u3297 01D0                                      u3387 049C  
                                    u3397 04AF                                      _PLLR 04D6  
                                    _TMR0 0015                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                  __end_of_GPS_read_speed 01B6                               main@tmp_590 00A2  
                             main@tmp_592 00A3                               main@tmp_593 00A4  
                                    _main 01B6                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      ltemp 007E  
                                    start 0024                                      ttemp 007E  
                                    wtemp 007E                             __CFG_MCLRE$ON 0000  
                 __end_of_TMR0_Initialize 0628                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0075                             ?_EUSART_Write 0075  
          __size_of_OSCILLATOR_Initialize 0008             __end_of_OSCILLATOR_Initialize 0670  
                                   ?_main 0075                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     _LATA5 0865  
                         ?_my10msTimerISR 0075                                     i1l143 058E  
                                   i1l288 001F                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISC 008E                                     _TXREG 019A  
                                   _TXSTA 019E                          ??_GPS_Initialize 002A  
       __size_of_TMR0_SetInterruptHandler 0006                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0020                          __end_of_TMR0_ISR 063C  
                                   _speed 0059                                     _putch 0683  
                 __end_of_LED_update_loop 050E                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0075                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                         _TMR2_StartTimer 0688                             multiply_fp@n1 002C  
                           multiply_fp@n2 002F                           __initialization 0025  
                  __size_of_LED_set_state 0021                              __end_of_main 02DD  
                          ??_EUSART_Write 0020                   __end_of_TMR2_Initialize 0668  
             ?_INTERRUPT_InterruptManager 0075                                    ??_main 0046  
                            _b_last_state 0070                          _b_push_confirmed 0064  
                         _b_count_pressed 0072                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _CCPR1H 0292  
                                  _EEDATH 0194                                    _CCPR1L 0291  
                                  _EEDATL 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  ?_putch 0075                                    _ANSELC 018E  
                                  i1l2031 04FC                                    i1l2051 03D3  
                                  i1l2227 05E8                                    i1l2067 03FC  
                                  i1l2059 03E4                                    i1l2077 0410  
                                  i1l2087 0425                                    i1l2577 0016  
                                  i1l2569 000D                                    i1l1993 0652  
                                  u140_25 03C8                                    u143_25 03ED  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                            __CFG_PWRTE$OFF 0000  
                                  ___lmul 04B6                            __CFG_STVREN$ON 0000  
                     _EUSART_Transmit_ISR 0574                          ?_TMR0_Initialize 0075  
              __end_of_button_update_loop 042A                                    _printf 05C8  
                                  main@up 00A0                  __size_of_EPWM_Initialize 000C  
                           _LED_set_state 0532                     __end_of_TMR0_CallBack 065F  
                 __end_of_TMR2_StartTimer 068B  TMR0_SetInterruptHandler@InterruptHandler 0020  
               __size_of_get_button_state 000C                      ?_EUSART_Transmit_ISR 0075  
             __size_of_EPWM_LoadDutyValue 001C                          ?_LED_update_loop 0075  
                            ?_multiply_fp 002C                      __size_of_EUSART_Read 0021  
                       _SYSTEM_Initialize 0670                   __end_of__initialization 0032  
                          multiply_fp@res 003C                        ?_SYSTEM_Initialize 0075  
                          __pcstackCOMMON 0075                              __pidataBANK0 068E  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0075  
                           __end_of_putch 0688                          ?_TMR2_Initialize 0075  
                          _OPTION_REGbits 0095                     TMR0_ISR@CountCallBack 005C  
                          ?_LED_set_state 0075                  _b_has_once_been_released 0063  
               __end_of_SYSTEM_Initialize 0677                     ??_EUSART_Transmit_ISR 0075  
                                 ??_putch 0022                                __pbssBANK0 0049  
                    __end_of_EUSART_Write 0532                          _b_count_released 0062  
             __size_of_EUSART_Receive_ISR 001B                                __pmaintext 01B6  
        __end_of_TMR0_SetInterruptHandler 0683                                   ?___lmul 0020  
                              ??_TMR0_ISR 0079                          ??_my10msTimerISR 0079  
                              __pintentry 0004                                   _CCP1CON 0293  
                                 _ECCP1AS 0295                                   _BAUDCON 019F  
                          ___lmul@product 0028                                   ?_printf 0023  
                   get_button_state@state 0075                             _eusartRxCount 0073  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                                 _PWM1CON 0294                          ??_GPS_read_speed 0022  
                        ?_TMR2_StartTimer 0075                         ??_EPWM_Initialize 0020  
                         __size_of___lmul 0030                                   __ptext1 02DD  
                                 __ptext2 04B6                                   __ptext3 0670  
                                 __ptext4 065F                                   __ptext5 0688  
                                 __ptext6 0614                                   __ptext7 067D  
                                 __ptext8 05FE                                   __ptext9 0668  
                         __size_of_printf 001B                           ??_LED_set_state 0020  
                   _OSCILLATOR_Initialize 0668                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0020                __size_of_SYSTEM_Initialize 0007  
                                 clrloop0 0678                          _get_button_state 0648  
                                 main@tmp 00A1                            main@motor_load 00A5  
                    end_of_initialization 0032                         __end_of_ratio_mph 042D  
                  LED_set_state@new_state 0021                                 _LED_state 006C  
             EPWM_LoadDutyValue@dutyValue 0020                      __size_of_multiply_fp 00DA  
                       _EUSART_Initialize 05AD                        ?_EUSART_Initialize 0075  
                               _RCSTAbits 019D                                   printf@c 0029  
                                 printf@f 0023                              __pstringtext 042A  
                     ??_EUSART_Initialize 0020                  _TMR0_SetInterruptHandler 067D  
                               _PORTAbits 000C                      GPS_read_speed@i_buff 002B  
                    GPS_read_speed@m_char 002C                      GPS_read_speed@buffer 0025  
                        __CFG_FOSC$INTOSC 0000                     __size_of_EUSART_Write 0024  
                      _button_update_loop 03B7                 __end_of_EUSART_Initialize 05C8  
                 __size_of_GPS_Initialize 0041                       ?_button_update_loop 0075  
                          __end_of___lmul 04E6                              _EUSART_Write 050E  
                       __size_of_TMR0_ISR 0014                          convert_to_fp@one 042D  
                  ?_OSCILLATOR_Initialize 0075                      ??_button_update_loop 0076  
                          __end_of_printf 05E3                       start_initialization 0025  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0016  
              __end_of_EPWM_LoadDutyValue 05AD                             ??_EUSART_Read 0020  
                             putch@txData 0022                  __size_of_LED_update_loop 0028  
                                ??___lmul 0028                    __size_of_TMR0_CallBack 000B  
                             __pdataBANK0 006C                                  ??_printf 0025  
                         _EPWM_Initialize 063C               __end_of_EUSART_Transmit_ISR 0591  
                             __pbssCOMMON 0070                                 ___latbits 0000  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                __size_of_TMR2_Initialize 0009                __end_of_EUSART_Receive_ISR 05FE  
              __size_of_EUSART_Initialize 001B                       __end_of_EUSART_Read 0574  
                   _TMR0_InterruptHandler 005E                    _PIN_MANAGER_Initialize 05FE  
                    EUSART_Read@readValue 0021                  __end_of_get_button_state 0654  
                            _eusartRxHead 0066                              _eusartTxHead 0068  
                            _eusartRxTail 0067                              _eusartTxTail 0069  
            ??_INTERRUPT_InterruptManager 0079                   _eusartTxBufferRemaining 0074  
                           _TMR0_CallBack 0654                            __size_of_putch 0005  
                          _eusartRxBuffer 0049                         ??_TMR0_Initialize 0022  
                          _GPS_Initialize 0475                            _eusartTxBuffer 0051  
                               clear_ram0 0677                                  _PIE1bits 0091  
                               _ratio_mph 042A                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0020                ??_TMR0_SetInterruptHandler 0022  
                                _PIR1bits 0011                                  _TMR0_ISR 0628  
                                _PSTR1CON 0296                   __end_of_EPWM_Initialize 0648  
                       ??_LED_update_loop 0075                     __end_of_LED_set_state 0553  
                 __size_of_my10msTimerISR 0003                            ?_TMR0_CallBack 0075  
                             _EUSART_Read 0553                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 04B6                             ??_multiply_fp 0032  
                __end_ofconvert_to_fp@one 042F            GPS_read_speed@no_more_checksum 0023  
                       ??_TMR2_Initialize 0020                                _EECON1bits 0195  
                 __size_of_GPS_read_speed 0181                               _LED_counter 0060  
                       GPS_Initialize@tmp 002D                   ??_OSCILLATOR_Initialize 0020  
         button_update_loop@current_state 0078                                  __ptext10 05AD  
                                __ptext11 063C                                  __ptext12 0532  
                                __ptext21 0628                                  __ptext13 0035  
                                __ptext22 0654                                  __ptext14 0553  
                                __ptext23 068F                                  __ptext15 0475  
                                __ptext24 068B                                  __ptext16 05C8  
                                __ptext25 03B7                                  __ptext17 0683  
                                __ptext26 0648                                  __ptext18 050E  
                                __ptext27 04E6                                  __ptext19 0591  
                                __ptext28 0574                                  __ptext29 05E3  
                         ?_GPS_Initialize 0075                         _b_confirmed_state 0061  
                           __size_of_main 0127      __end_of_TMR0_DefaultInterruptHandler 0690  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 068F  
                      _EPWM_LoadDutyValue 0591                       __end_of_multiply_fp 03B7  
                                int$flags 007E                       _b_release_confirmed 0065  
                        ?_EPWM_Initialize 0075                         ??_TMR2_StartTimer 0020  
      __end_of_INTERRUPT_InterruptManager 0024                _INTERRUPT_InterruptManager 0004  
                     ?_EPWM_LoadDutyValue 0020               __size_of_button_update_loop 0073  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0079  
                    ??_EPWM_LoadDutyValue 0022                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0075                         __CFG_CLKOUTEN$OFF 0000  
           ?_TMR0_DefaultInterruptHandler 0075                                  printf@ap 0028  
                      _EUSART_Receive_ISR 05E3                         ?_get_button_state 0075  
                      ??_get_button_state 0075                                _OPTION_REG 0095  
                     ?_EUSART_Receive_ISR 0075                           _TMR0_Initialize 0614  
                  GPS_read_speed@checksum 0024                            _my10msTimerISR 068B  
                             _speed_units 006A                        EUSART_Write@txData 0021  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 0614  
                             _multiply_fp 02DD                      ??_EUSART_Receive_ISR 0075  
                       multiply_fp@n1_fra 0040                            _GPS_read_speed 0035  
                       multiply_fp@n2_fra 0043                           _LED_update_loop 04E6  



Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Sep 16 13:39:00 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  0007                     	;# 
    53  0008                     	;# 
    54  0009                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000E                     	;# 
    59  0011                     	;# 
    60  0012                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001E                     	;# 
    71  001F                     	;# 
    72  008C                     	;# 
    73  008E                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0095                     	;# 
    77  0096                     	;# 
    78  0097                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009A                     	;# 
    82  009B                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  010C                     	;# 
    88  010E                     	;# 
    89  0111                     	;# 
    90  0112                     	;# 
    91  0113                     	;# 
    92  0114                     	;# 
    93  0115                     	;# 
    94  0116                     	;# 
    95  0117                     	;# 
    96  0118                     	;# 
    97  0119                     	;# 
    98  011A                     	;# 
    99  011B                     	;# 
   100  011D                     	;# 
   101  011D                     	;# 
   102  018C                     	;# 
   103  018E                     	;# 
   104  0191                     	;# 
   105  0191                     	;# 
   106  0192                     	;# 
   107  0193                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0194                     	;# 
   111  0195                     	;# 
   112  0196                     	;# 
   113  0199                     	;# 
   114  019A                     	;# 
   115  019B                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019C                     	;# 
   120  019C                     	;# 
   121  019D                     	;# 
   122  019E                     	;# 
   123  019F                     	;# 
   124  020C                     	;# 
   125  020E                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0291                     	;# 
   142  0291                     	;# 
   143  0292                     	;# 
   144  0293                     	;# 
   145  0294                     	;# 
   146  0295                     	;# 
   147  0295                     	;# 
   148  0296                     	;# 
   149  0391                     	;# 
   150  0392                     	;# 
   151  0393                     	;# 
   152  039A                     	;# 
   153  039C                     	;# 
   154  039D                     	;# 
   155  039E                     	;# 
   156  039F                     	;# 
   157  0FE4                     	;# 
   158  0FE5                     	;# 
   159  0FE6                     	;# 
   160  0FE7                     	;# 
   161  0FE8                     	;# 
   162  0FE9                     	;# 
   163  0FEA                     	;# 
   164  0FEB                     	;# 
   165  0FED                     	;# 
   166  0FEE                     	;# 
   167  0FEF                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000E                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  008C                     	;# 
   196  008E                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010E                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0115                     	;# 
   217  0116                     	;# 
   218  0117                     	;# 
   219  0118                     	;# 
   220  0119                     	;# 
   221  011A                     	;# 
   222  011B                     	;# 
   223  011D                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0193                     	;# 
   233  0194                     	;# 
   234  0195                     	;# 
   235  0196                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019E                     	;# 
   246  019F                     	;# 
   247  020C                     	;# 
   248  020E                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0216                     	;# 
   261  0216                     	;# 
   262  0217                     	;# 
   263  0217                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0294                     	;# 
   269  0295                     	;# 
   270  0295                     	;# 
   271  0296                     	;# 
   272  0391                     	;# 
   273  0392                     	;# 
   274  0393                     	;# 
   275  039A                     	;# 
   276  039C                     	;# 
   277  039D                     	;# 
   278  039E                     	;# 
   279  039F                     	;# 
   280  0FE4                     	;# 
   281  0FE5                     	;# 
   282  0FE6                     	;# 
   283  0FE7                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEB                     	;# 
   288  0FED                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000E                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  008C                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0098                     	;# 
   326  0099                     	;# 
   327  009A                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  010C                     	;# 
   334  010E                     	;# 
   335  0111                     	;# 
   336  0112                     	;# 
   337  0113                     	;# 
   338  0114                     	;# 
   339  0115                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  0118                     	;# 
   343  0119                     	;# 
   344  011A                     	;# 
   345  011B                     	;# 
   346  011D                     	;# 
   347  011D                     	;# 
   348  018C                     	;# 
   349  018E                     	;# 
   350  0191                     	;# 
   351  0191                     	;# 
   352  0192                     	;# 
   353  0193                     	;# 
   354  0193                     	;# 
   355  0193                     	;# 
   356  0194                     	;# 
   357  0195                     	;# 
   358  0196                     	;# 
   359  0199                     	;# 
   360  019A                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019C                     	;# 
   366  019C                     	;# 
   367  019D                     	;# 
   368  019E                     	;# 
   369  019F                     	;# 
   370  020C                     	;# 
   371  020E                     	;# 
   372  0211                     	;# 
   373  0211                     	;# 
   374  0212                     	;# 
   375  0212                     	;# 
   376  0213                     	;# 
   377  0213                     	;# 
   378  0214                     	;# 
   379  0214                     	;# 
   380  0215                     	;# 
   381  0215                     	;# 
   382  0215                     	;# 
   383  0216                     	;# 
   384  0216                     	;# 
   385  0217                     	;# 
   386  0217                     	;# 
   387  0291                     	;# 
   388  0291                     	;# 
   389  0292                     	;# 
   390  0293                     	;# 
   391  0294                     	;# 
   392  0295                     	;# 
   393  0295                     	;# 
   394  0296                     	;# 
   395  0391                     	;# 
   396  0392                     	;# 
   397  0393                     	;# 
   398  039A                     	;# 
   399  039C                     	;# 
   400  039D                     	;# 
   401  039E                     	;# 
   402  039F                     	;# 
   403  0FE4                     	;# 
   404  0FE5                     	;# 
   405  0FE6                     	;# 
   406  0FE7                     	;# 
   407  0FE8                     	;# 
   408  0FE9                     	;# 
   409  0FEA                     	;# 
   410  0FEB                     	;# 
   411  0FED                     	;# 
   412  0FEE                     	;# 
   413  0FEF                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000E                     	;# 
   428  0011                     	;# 
   429  0012                     	;# 
   430  0015                     	;# 
   431  0016                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001C                     	;# 
   439  001E                     	;# 
   440  001F                     	;# 
   441  008C                     	;# 
   442  008E                     	;# 
   443  0091                     	;# 
   444  0092                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010E                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0113                     	;# 
   461  0114                     	;# 
   462  0115                     	;# 
   463  0116                     	;# 
   464  0117                     	;# 
   465  0118                     	;# 
   466  0119                     	;# 
   467  011A                     	;# 
   468  011B                     	;# 
   469  011D                     	;# 
   470  011D                     	;# 
   471  018C                     	;# 
   472  018E                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0193                     	;# 
   479  0194                     	;# 
   480  0195                     	;# 
   481  0196                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019C                     	;# 
   489  019C                     	;# 
   490  019D                     	;# 
   491  019E                     	;# 
   492  019F                     	;# 
   493  020C                     	;# 
   494  020E                     	;# 
   495  0211                     	;# 
   496  0211                     	;# 
   497  0212                     	;# 
   498  0212                     	;# 
   499  0213                     	;# 
   500  0213                     	;# 
   501  0214                     	;# 
   502  0214                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0215                     	;# 
   506  0216                     	;# 
   507  0216                     	;# 
   508  0217                     	;# 
   509  0217                     	;# 
   510  0291                     	;# 
   511  0291                     	;# 
   512  0292                     	;# 
   513  0293                     	;# 
   514  0294                     	;# 
   515  0295                     	;# 
   516  0295                     	;# 
   517  0296                     	;# 
   518  0391                     	;# 
   519  0392                     	;# 
   520  0393                     	;# 
   521  039A                     	;# 
   522  039C                     	;# 
   523  039D                     	;# 
   524  039E                     	;# 
   525  039F                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000E                     	;# 
   551  0011                     	;# 
   552  0012                     	;# 
   553  0015                     	;# 
   554  0016                     	;# 
   555  0016                     	;# 
   556  0017                     	;# 
   557  0018                     	;# 
   558  0019                     	;# 
   559  001A                     	;# 
   560  001B                     	;# 
   561  001C                     	;# 
   562  001E                     	;# 
   563  001F                     	;# 
   564  008C                     	;# 
   565  008E                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0095                     	;# 
   569  0096                     	;# 
   570  0097                     	;# 
   571  0098                     	;# 
   572  0099                     	;# 
   573  009A                     	;# 
   574  009B                     	;# 
   575  009B                     	;# 
   576  009C                     	;# 
   577  009D                     	;# 
   578  009E                     	;# 
   579  010C                     	;# 
   580  010E                     	;# 
   581  0111                     	;# 
   582  0112                     	;# 
   583  0113                     	;# 
   584  0114                     	;# 
   585  0115                     	;# 
   586  0116                     	;# 
   587  0117                     	;# 
   588  0118                     	;# 
   589  0119                     	;# 
   590  011A                     	;# 
   591  011B                     	;# 
   592  011D                     	;# 
   593  011D                     	;# 
   594  018C                     	;# 
   595  018E                     	;# 
   596  0191                     	;# 
   597  0191                     	;# 
   598  0192                     	;# 
   599  0193                     	;# 
   600  0193                     	;# 
   601  0193                     	;# 
   602  0194                     	;# 
   603  0195                     	;# 
   604  0196                     	;# 
   605  0199                     	;# 
   606  019A                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019C                     	;# 
   612  019C                     	;# 
   613  019D                     	;# 
   614  019E                     	;# 
   615  019F                     	;# 
   616  020C                     	;# 
   617  020E                     	;# 
   618  0211                     	;# 
   619  0211                     	;# 
   620  0212                     	;# 
   621  0212                     	;# 
   622  0213                     	;# 
   623  0213                     	;# 
   624  0214                     	;# 
   625  0214                     	;# 
   626  0215                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0216                     	;# 
   630  0216                     	;# 
   631  0217                     	;# 
   632  0217                     	;# 
   633  0291                     	;# 
   634  0291                     	;# 
   635  0292                     	;# 
   636  0293                     	;# 
   637  0294                     	;# 
   638  0295                     	;# 
   639  0295                     	;# 
   640  0296                     	;# 
   641  0391                     	;# 
   642  0392                     	;# 
   643  0393                     	;# 
   644  039A                     	;# 
   645  039C                     	;# 
   646  039D                     	;# 
   647  039E                     	;# 
   648  039F                     	;# 
   649  0FE4                     	;# 
   650  0FE5                     	;# 
   651  0FE6                     	;# 
   652  0FE7                     	;# 
   653  0FE8                     	;# 
   654  0FE9                     	;# 
   655  0FEA                     	;# 
   656  0FEB                     	;# 
   657  0FED                     	;# 
   658  0FEE                     	;# 
   659  0FEF                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000E                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0015                     	;# 
   677  0016                     	;# 
   678  0016                     	;# 
   679  0017                     	;# 
   680  0018                     	;# 
   681  0019                     	;# 
   682  001A                     	;# 
   683  001B                     	;# 
   684  001C                     	;# 
   685  001E                     	;# 
   686  001F                     	;# 
   687  008C                     	;# 
   688  008E                     	;# 
   689  0091                     	;# 
   690  0092                     	;# 
   691  0095                     	;# 
   692  0096                     	;# 
   693  0097                     	;# 
   694  0098                     	;# 
   695  0099                     	;# 
   696  009A                     	;# 
   697  009B                     	;# 
   698  009B                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009E                     	;# 
   702  010C                     	;# 
   703  010E                     	;# 
   704  0111                     	;# 
   705  0112                     	;# 
   706  0113                     	;# 
   707  0114                     	;# 
   708  0115                     	;# 
   709  0116                     	;# 
   710  0117                     	;# 
   711  0118                     	;# 
   712  0119                     	;# 
   713  011A                     	;# 
   714  011B                     	;# 
   715  011D                     	;# 
   716  011D                     	;# 
   717  018C                     	;# 
   718  018E                     	;# 
   719  0191                     	;# 
   720  0191                     	;# 
   721  0192                     	;# 
   722  0193                     	;# 
   723  0193                     	;# 
   724  0193                     	;# 
   725  0194                     	;# 
   726  0195                     	;# 
   727  0196                     	;# 
   728  0199                     	;# 
   729  019A                     	;# 
   730  019B                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019C                     	;# 
   735  019C                     	;# 
   736  019D                     	;# 
   737  019E                     	;# 
   738  019F                     	;# 
   739  020C                     	;# 
   740  020E                     	;# 
   741  0211                     	;# 
   742  0211                     	;# 
   743  0212                     	;# 
   744  0212                     	;# 
   745  0213                     	;# 
   746  0213                     	;# 
   747  0214                     	;# 
   748  0214                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0216                     	;# 
   754  0217                     	;# 
   755  0217                     	;# 
   756  0291                     	;# 
   757  0291                     	;# 
   758  0292                     	;# 
   759  0293                     	;# 
   760  0294                     	;# 
   761  0295                     	;# 
   762  0295                     	;# 
   763  0296                     	;# 
   764  0391                     	;# 
   765  0392                     	;# 
   766  0393                     	;# 
   767  039A                     	;# 
   768  039C                     	;# 
   769  039D                     	;# 
   770  039E                     	;# 
   771  039F                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000E                     	;# 
   797  0011                     	;# 
   798  0012                     	;# 
   799  0015                     	;# 
   800  0016                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  008C                     	;# 
   811  008E                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0095                     	;# 
   815  0096                     	;# 
   816  0097                     	;# 
   817  0098                     	;# 
   818  0099                     	;# 
   819  009A                     	;# 
   820  009B                     	;# 
   821  009B                     	;# 
   822  009C                     	;# 
   823  009D                     	;# 
   824  009E                     	;# 
   825  010C                     	;# 
   826  010E                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  011A                     	;# 
   837  011B                     	;# 
   838  011D                     	;# 
   839  011D                     	;# 
   840  018C                     	;# 
   841  018E                     	;# 
   842  0191                     	;# 
   843  0191                     	;# 
   844  0192                     	;# 
   845  0193                     	;# 
   846  0193                     	;# 
   847  0193                     	;# 
   848  0194                     	;# 
   849  0195                     	;# 
   850  0196                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019B                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019C                     	;# 
   858  019C                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019F                     	;# 
   862  020C                     	;# 
   863  020E                     	;# 
   864  0211                     	;# 
   865  0211                     	;# 
   866  0212                     	;# 
   867  0212                     	;# 
   868  0213                     	;# 
   869  0213                     	;# 
   870  0214                     	;# 
   871  0214                     	;# 
   872  0215                     	;# 
   873  0215                     	;# 
   874  0215                     	;# 
   875  0216                     	;# 
   876  0216                     	;# 
   877  0217                     	;# 
   878  0217                     	;# 
   879  0291                     	;# 
   880  0291                     	;# 
   881  0292                     	;# 
   882  0293                     	;# 
   883  0294                     	;# 
   884  0295                     	;# 
   885  0295                     	;# 
   886  0296                     	;# 
   887  0391                     	;# 
   888  0392                     	;# 
   889  0393                     	;# 
   890  039A                     	;# 
   891  039C                     	;# 
   892  039D                     	;# 
   893  039E                     	;# 
   894  039F                     	;# 
   895  0FE4                     	;# 
   896  0FE5                     	;# 
   897  0FE6                     	;# 
   898  0FE7                     	;# 
   899  0FE8                     	;# 
   900  0FE9                     	;# 
   901  0FEA                     	;# 
   902  0FEB                     	;# 
   903  0FED                     	;# 
   904  0FEE                     	;# 
   905  0FEF                     	;# 
   906  0000                     	;# 
   907  0001                     	;# 
   908  0002                     	;# 
   909  0003                     	;# 
   910  0004                     	;# 
   911  0005                     	;# 
   912  0006                     	;# 
   913  0007                     	;# 
   914  0008                     	;# 
   915  0009                     	;# 
   916  000A                     	;# 
   917  000B                     	;# 
   918  000C                     	;# 
   919  000E                     	;# 
   920  0011                     	;# 
   921  0012                     	;# 
   922  0015                     	;# 
   923  0016                     	;# 
   924  0016                     	;# 
   925  0017                     	;# 
   926  0018                     	;# 
   927  0019                     	;# 
   928  001A                     	;# 
   929  001B                     	;# 
   930  001C                     	;# 
   931  001E                     	;# 
   932  001F                     	;# 
   933  008C                     	;# 
   934  008E                     	;# 
   935  0091                     	;# 
   936  0092                     	;# 
   937  0095                     	;# 
   938  0096                     	;# 
   939  0097                     	;# 
   940  0098                     	;# 
   941  0099                     	;# 
   942  009A                     	;# 
   943  009B                     	;# 
   944  009B                     	;# 
   945  009C                     	;# 
   946  009D                     	;# 
   947  009E                     	;# 
   948  010C                     	;# 
   949  010E                     	;# 
   950  0111                     	;# 
   951  0112                     	;# 
   952  0113                     	;# 
   953  0114                     	;# 
   954  0115                     	;# 
   955  0116                     	;# 
   956  0117                     	;# 
   957  0118                     	;# 
   958  0119                     	;# 
   959  011A                     	;# 
   960  011B                     	;# 
   961  011D                     	;# 
   962  011D                     	;# 
   963  018C                     	;# 
   964  018E                     	;# 
   965  0191                     	;# 
   966  0191                     	;# 
   967  0192                     	;# 
   968  0193                     	;# 
   969  0193                     	;# 
   970  0193                     	;# 
   971  0194                     	;# 
   972  0195                     	;# 
   973  0196                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020C                     	;# 
   986  020E                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0291                     	;# 
  1003  0291                     	;# 
  1004  0292                     	;# 
  1005  0293                     	;# 
  1006  0294                     	;# 
  1007  0295                     	;# 
  1008  0295                     	;# 
  1009  0296                     	;# 
  1010  0391                     	;# 
  1011  0392                     	;# 
  1012  0393                     	;# 
  1013  039A                     	;# 
  1014  039C                     	;# 
  1015  039D                     	;# 
  1016  039E                     	;# 
  1017  039F                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029  0000                     	;# 
  1030  0001                     	;# 
  1031  0002                     	;# 
  1032  0003                     	;# 
  1033  0004                     	;# 
  1034  0005                     	;# 
  1035  0006                     	;# 
  1036  0007                     	;# 
  1037  0008                     	;# 
  1038  0009                     	;# 
  1039  000A                     	;# 
  1040  000B                     	;# 
  1041  000C                     	;# 
  1042  000E                     	;# 
  1043  0011                     	;# 
  1044  0012                     	;# 
  1045  0015                     	;# 
  1046  0016                     	;# 
  1047  0016                     	;# 
  1048  0017                     	;# 
  1049  0018                     	;# 
  1050  0019                     	;# 
  1051  001A                     	;# 
  1052  001B                     	;# 
  1053  001C                     	;# 
  1054  001E                     	;# 
  1055  001F                     	;# 
  1056  008C                     	;# 
  1057  008E                     	;# 
  1058  0091                     	;# 
  1059  0092                     	;# 
  1060  0095                     	;# 
  1061  0096                     	;# 
  1062  0097                     	;# 
  1063  0098                     	;# 
  1064  0099                     	;# 
  1065  009A                     	;# 
  1066  009B                     	;# 
  1067  009B                     	;# 
  1068  009C                     	;# 
  1069  009D                     	;# 
  1070  009E                     	;# 
  1071  010C                     	;# 
  1072  010E                     	;# 
  1073  0111                     	;# 
  1074  0112                     	;# 
  1075  0113                     	;# 
  1076  0114                     	;# 
  1077  0115                     	;# 
  1078  0116                     	;# 
  1079  0117                     	;# 
  1080  0118                     	;# 
  1081  0119                     	;# 
  1082  011A                     	;# 
  1083  011B                     	;# 
  1084  011D                     	;# 
  1085  011D                     	;# 
  1086  018C                     	;# 
  1087  018E                     	;# 
  1088  0191                     	;# 
  1089  0191                     	;# 
  1090  0192                     	;# 
  1091  0193                     	;# 
  1092  0193                     	;# 
  1093  0193                     	;# 
  1094  0194                     	;# 
  1095  0195                     	;# 
  1096  0196                     	;# 
  1097  0199                     	;# 
  1098  019A                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019C                     	;# 
  1104  019C                     	;# 
  1105  019D                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  020C                     	;# 
  1109  020E                     	;# 
  1110  0211                     	;# 
  1111  0211                     	;# 
  1112  0212                     	;# 
  1113  0212                     	;# 
  1114  0213                     	;# 
  1115  0213                     	;# 
  1116  0214                     	;# 
  1117  0214                     	;# 
  1118  0215                     	;# 
  1119  0215                     	;# 
  1120  0215                     	;# 
  1121  0216                     	;# 
  1122  0216                     	;# 
  1123  0217                     	;# 
  1124  0217                     	;# 
  1125  0291                     	;# 
  1126  0291                     	;# 
  1127  0292                     	;# 
  1128  0293                     	;# 
  1129  0294                     	;# 
  1130  0295                     	;# 
  1131  0295                     	;# 
  1132  0296                     	;# 
  1133  0391                     	;# 
  1134  0392                     	;# 
  1135  0393                     	;# 
  1136  039A                     	;# 
  1137  039C                     	;# 
  1138  039D                     	;# 
  1139  039E                     	;# 
  1140  039F                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000E                     	;# 
  1166  0011                     	;# 
  1167  0012                     	;# 
  1168  0015                     	;# 
  1169  0016                     	;# 
  1170  0016                     	;# 
  1171  0017                     	;# 
  1172  0018                     	;# 
  1173  0019                     	;# 
  1174  001A                     	;# 
  1175  001B                     	;# 
  1176  001C                     	;# 
  1177  001E                     	;# 
  1178  001F                     	;# 
  1179  008C                     	;# 
  1180  008E                     	;# 
  1181  0091                     	;# 
  1182  0092                     	;# 
  1183  0095                     	;# 
  1184  0096                     	;# 
  1185  0097                     	;# 
  1186  0098                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010E                     	;# 
  1196  0111                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0115                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  0118                     	;# 
  1204  0119                     	;# 
  1205  011A                     	;# 
  1206  011B                     	;# 
  1207  011D                     	;# 
  1208  011D                     	;# 
  1209  018C                     	;# 
  1210  018E                     	;# 
  1211  0191                     	;# 
  1212  0191                     	;# 
  1213  0192                     	;# 
  1214  0193                     	;# 
  1215  0193                     	;# 
  1216  0193                     	;# 
  1217  0194                     	;# 
  1218  0195                     	;# 
  1219  0196                     	;# 
  1220  0199                     	;# 
  1221  019A                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019C                     	;# 
  1227  019C                     	;# 
  1228  019D                     	;# 
  1229  019E                     	;# 
  1230  019F                     	;# 
  1231  020C                     	;# 
  1232  020E                     	;# 
  1233  0211                     	;# 
  1234  0211                     	;# 
  1235  0212                     	;# 
  1236  0212                     	;# 
  1237  0213                     	;# 
  1238  0213                     	;# 
  1239  0214                     	;# 
  1240  0214                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0216                     	;# 
  1245  0216                     	;# 
  1246  0217                     	;# 
  1247  0217                     	;# 
  1248  0291                     	;# 
  1249  0291                     	;# 
  1250  0292                     	;# 
  1251  0293                     	;# 
  1252  0294                     	;# 
  1253  0295                     	;# 
  1254  0295                     	;# 
  1255  0296                     	;# 
  1256  0391                     	;# 
  1257  0392                     	;# 
  1258  0393                     	;# 
  1259  039A                     	;# 
  1260  039C                     	;# 
  1261  039D                     	;# 
  1262  039E                     	;# 
  1263  039F                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275                           
  1276                           	psect	idataBANK0
  1277  05D0                     __pidataBANK0:	
  1278                           
  1279                           ;initializer for _LED_state
  1280  05D0  3401               	retlw	1
  1281  000B                     _INTCONbits	set	11
  1282  0011                     _PIR1bits	set	17
  1283  000C                     _PORTAbits	set	12
  1284  001B                     _PR2	set	27
  1285  001C                     _T2CON	set	28
  1286  001C                     _T2CONbits	set	28
  1287  0015                     _TMR0	set	21
  1288  001A                     _TMR2	set	26
  1289  0095                     _OPTION_REG	set	149
  1290  0095                     _OPTION_REGbits	set	149
  1291  0099                     _OSCCON	set	153
  1292  009A                     _OSCSTAT	set	154
  1293  0098                     _OSCTUNE	set	152
  1294  0091                     _PIE1bits	set	145
  1295  008C                     _TRISA	set	140
  1296  008E                     _TRISC	set	142
  1297  04D6                     _PLLR	set	1238
  1298  011D                     _APFCON	set	285
  1299  010C                     _LATA	set	268
  1300  010E                     _LATC	set	270
  1301  0865                     _LATA5	set	2149
  1302  018C                     _ANSELA	set	396
  1303  018E                     _ANSELC	set	398
  1304  019F                     _BAUDCON	set	415
  1305  0192                     _EEADRH	set	402
  1306  0191                     _EEADRL	set	401
  1307  0195                     _EECON1bits	set	405
  1308  0196                     _EECON2	set	406
  1309  0194                     _EEDATH	set	404
  1310  0193                     _EEDATL	set	403
  1311  0199                     _RCREG	set	409
  1312  019D                     _RCSTA	set	413
  1313  019D                     _RCSTAbits	set	413
  1314  019C                     _SPBRGH	set	412
  1315  019B                     _SPBRGL	set	411
  1316  019A                     _TXREG	set	410
  1317  019E                     _TXSTA	set	414
  1318  020C                     _WPUA	set	524
  1319  020E                     _WPUC	set	526
  1320  0293                     _CCP1CON	set	659
  1321  0292                     _CCPR1H	set	658
  1322  0291                     _CCPR1L	set	657
  1323  0295                     _ECCP1AS	set	661
  1324  0296                     _PSTR1CON	set	662
  1325  0294                     _PWM1CON	set	660
  1326                           
  1327                           	psect	stringtext
  1328  038D                     __pstringtext:	
  1329  038D                     STR_1:	
  1330  038D  3424               	retlw	36	;'$'
  1331  038E  3450               	retlw	80	;'P'
  1332  038F  344D               	retlw	77	;'M'
  1333  0390  3454               	retlw	84	;'T'
  1334  0391  344B               	retlw	75	;'K'
  1335  0392  3433               	retlw	51	;'3'
  1336  0393  3431               	retlw	49	;'1'
  1337  0394  3434               	retlw	52	;'4'
  1338  0395  342C               	retlw	44	;','
  1339  0396  3430               	retlw	48	;'0'
  1340  0397  342C               	retlw	44	;','
  1341  0398  3430               	retlw	48	;'0'
  1342  0399  342C               	retlw	44	;','
  1343  039A  3431               	retlw	49	;'1'
  1344  039B  342C               	retlw	44	;','
  1345  039C  3430               	retlw	48	;'0'
  1346  039D  342C               	retlw	44	;','
  1347  039E  3430               	retlw	48	;'0'
  1348  039F  342C               	retlw	44	;','
  1349  03A0  3430               	retlw	48	;'0'
  1350  03A1  342C               	retlw	44	;','
  1351  03A2  3430               	retlw	48	;'0'
  1352  03A3  342C               	retlw	44	;','
  1353  03A4  3430               	retlw	48	;'0'
  1354  03A5  342C               	retlw	44	;','
  1355  03A6  3430               	retlw	48	;'0'
  1356  03A7  342C               	retlw	44	;','
  1357  03A8  3430               	retlw	48	;'0'
  1358  03A9  342C               	retlw	44	;','
  1359  03AA  3430               	retlw	48	;'0'
  1360  03AB  342C               	retlw	44	;','
  1361  03AC  3430               	retlw	48	;'0'
  1362  03AD  342C               	retlw	44	;','
  1363  03AE  3430               	retlw	48	;'0'
  1364  03AF  342C               	retlw	44	;','
  1365  03B0  3430               	retlw	48	;'0'
  1366  03B1  342C               	retlw	44	;','
  1367  03B2  3430               	retlw	48	;'0'
  1368  03B3  342C               	retlw	44	;','
  1369  03B4  3430               	retlw	48	;'0'
  1370  03B5  342C               	retlw	44	;','
  1371  03B6  3430               	retlw	48	;'0'
  1372  03B7  342C               	retlw	44	;','
  1373  03B8  3430               	retlw	48	;'0'
  1374  03B9  342C               	retlw	44	;','
  1375  03BA  3430               	retlw	48	;'0'
  1376  03BB  342A               	retlw	42	;'*'
  1377  03BC  3432               	retlw	50	;'2'
  1378  03BD  3439               	retlw	57	;'9'
  1379  03BE  340D               	retlw	13
  1380  03BF  340A               	retlw	10
  1381  03C0  3400               	retlw	0
  1382  03C1                     STR_2:	
  1383  03C1  3424               	retlw	36	;'$'
  1384  03C2  3450               	retlw	80	;'P'
  1385  03C3  344D               	retlw	77	;'M'
  1386  03C4  3454               	retlw	84	;'T'
  1387  03C5  344B               	retlw	75	;'K'
  1388  03C6  3432               	retlw	50	;'2'
  1389  03C7  3432               	retlw	50	;'2'
  1390  03C8  3430               	retlw	48	;'0'
  1391  03C9  342C               	retlw	44	;','
  1392  03CA  3431               	retlw	49	;'1'
  1393  03CB  3430               	retlw	48	;'0'
  1394  03CC  3430               	retlw	48	;'0'
  1395  03CD  342A               	retlw	42	;'*'
  1396  03CE  3432               	retlw	50	;'2'
  1397  03CF  3446               	retlw	70	;'F'
  1398  03D0  340D               	retlw	13
  1399  03D1  340A               	retlw	10
  1400  03D2  3400               	retlw	0
  1401                           
  1402                           ; #config settings
  1403  0000                     
  1404                           	psect	cinit
  1405  0025                     start_initialization:	
  1406  0025                     __initialization:	
  1407                           
  1408                           ; Initialize objects allocated to BANK0
  1409  0025  25D0               	fcall	__pidataBANK0	;fetch initializer
  1410  0026  00EF               	movwf	__pdataBANK0& (0+127)
  1411                           
  1412                           ; Clear objects allocated to COMMON
  1413  0027  01F6               	clrf	__pbssCOMMON& (0+127)
  1414  0028  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1415  0029  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1416  002A  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1417                           
  1418                           ; Clear objects allocated to BANK0
  1419  002B  3064               	movlw	low __pbssBANK0
  1420  002C  0084               	movwf	4
  1421  002D  3000               	movlw	high __pbssBANK0
  1422  002E  0085               	movwf	5
  1423  002F  300B               	movlw	11
  1424  0030  25B9               	fcall	clear_ram0
  1425                           
  1426                           ; Clear objects allocated to BANK1
  1427  0031  30A0               	movlw	low __pbssBANK1
  1428  0032  0084               	movwf	4
  1429  0033  3000               	movlw	high __pbssBANK1
  1430  0034  0085               	movwf	5
  1431  0035  301A               	movlw	26
  1432  0036  25B9               	fcall	clear_ram0
  1433  0037                     end_of_initialization:	
  1434                           ;End of C runtime variable initialization code
  1435                           
  1436  0037                     __end_of__initialization:	
  1437  0037  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1438  0038  0020               	movlb	0
  1439  0039  29CF               	ljmp	_main	;jump to C main() function
  1440                           
  1441                           	psect	bssCOMMON
  1442  0076                     __pbssCOMMON:	
  1443  0076                     _b_last_state:	
  1444  0076                     	ds	2
  1445  0078                     _eusartRxCount:	
  1446  0078                     	ds	1
  1447  0079                     _eusartTxBufferRemaining:	
  1448  0079                     	ds	1
  1449                           
  1450                           	psect	bssBANK0
  1451  0064                     __pbssBANK0:	
  1452  0064                     _LED_counter:	
  1453  0064                     	ds	1
  1454  0065                     _b_confirmed_state:	
  1455  0065                     	ds	1
  1456  0066                     _b_count_pressed:	
  1457  0066                     	ds	1
  1458  0067                     _b_count_released:	
  1459  0067                     	ds	1
  1460  0068                     _b_has_once_been_released:	
  1461  0068                     	ds	1
  1462  0069                     _b_push_confirmed:	
  1463  0069                     	ds	1
  1464  006A                     _eusartRxHead:	
  1465  006A                     	ds	1
  1466  006B                     _eusartRxTail:	
  1467  006B                     	ds	1
  1468  006C                     _eusartTxHead:	
  1469  006C                     	ds	1
  1470  006D                     _eusartTxTail:	
  1471  006D                     	ds	1
  1472  006E                     _timer0ReloadVal:	
  1473  006E                     	ds	1
  1474                           
  1475                           	psect	dataBANK0
  1476  006F                     __pdataBANK0:	
  1477  006F                     _LED_state:	
  1478  006F                     	ds	1
  1479                           
  1480                           	psect	bssBANK1
  1481  00A0                     __pbssBANK1:	
  1482  00A0                     _eusartRxBuffer:	
  1483  00A0                     	ds	8
  1484  00A8                     _eusartTxBuffer:	
  1485  00A8                     	ds	8
  1486  00B0                     TMR0_ISR@CountCallBack:	
  1487  00B0                     	ds	2
  1488  00B2                     _TMR0_InterruptHandler:	
  1489  00B2                     	ds	2
  1490  00B4                     _speed_dec:	
  1491  00B4                     	ds	2
  1492  00B6                     _speed_int:	
  1493  00B6                     	ds	2
  1494  00B8                     _b_release_confirmed:	
  1495  00B8                     	ds	1
  1496  00B9                     _speed_units:	
  1497  00B9                     	ds	1
  1498                           
  1499                           	psect	clrtext
  1500  05B9                     clear_ram0:	
  1501                           ;	Called with FSR0 containing the base address, and
  1502                           ;	WREG with the size to clear
  1503                           
  1504  05B9  0064               	clrwdt	;clear the watchdog before getting into this loop
  1505  05BA                     clrloop0:	
  1506  05BA  0180               	clrf	0	;clear RAM location pointed to by FSR
  1507  05BB  3101               	addfsr 0,1
  1508  05BC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1509  05BD  2DBA               	goto	clrloop0	;have we reached the end yet?
  1510  05BE  3400               	retlw	0	;all done for this memory range, return
  1511                           
  1512                           	psect	cstackBANK1
  1513  00BA                     __pcstackBANK1:	
  1514  00BA                     main@tmp_602:	
  1515                           
  1516                           ; 1 bytes @ 0x0
  1517  00BA                     	ds	1
  1518  00BB                     main@tmp_603:	
  1519                           
  1520                           ; 1 bytes @ 0x1
  1521  00BB                     	ds	1
  1522  00BC                     main@motor_load:	
  1523                           
  1524                           ; 2 bytes @ 0x2
  1525  00BC                     	ds	2
  1526                           
  1527                           	psect	cstackCOMMON
  1528  0070                     __pcstackCOMMON:	
  1529  0070                     ?_TMR2_StartTimer:	
  1530  0070                     ?_OSCILLATOR_Initialize:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0070                     ?_TMR0_Initialize:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0070                     ?_TMR0_ISR:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0070                     ?_TMR0_DefaultInterruptHandler:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0070                     ??_TMR0_DefaultInterruptHandler:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0070                     ?_TMR0_CallBack:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0070                     ?_my10msTimerISR:	
  1549                           ; 1 bytes @ 0x0
  1550                           
  1551  0070                     ?_LED_set_state:	
  1552                           ; 1 bytes @ 0x0
  1553                           
  1554  0070                     ?_button_init:	
  1555                           ; 1 bytes @ 0x0
  1556                           
  1557  0070                     ?_LED_update_loop:	
  1558                           ; 1 bytes @ 0x0
  1559                           
  1560  0070                     ??_LED_update_loop:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563  0070                     ?_button_update_loop:	
  1564                           ; 1 bytes @ 0x0
  1565                           
  1566  0070                     ??_button_update_loop:	
  1567                           ; 1 bytes @ 0x0
  1568                           
  1569  0070                     ?_TMR2_Initialize:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0070                     ?_EUSART_Initialize:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0070                     ?_EUSART_Read:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0070                     ?_EUSART_Write:	
  1579                           ; 1 bytes @ 0x0
  1580                           
  1581  0070                     ?_putch:	
  1582                           ; 1 bytes @ 0x0
  1583                           
  1584  0070                     ?_EUSART_Transmit_ISR:	
  1585                           ; 1 bytes @ 0x0
  1586                           
  1587  0070                     ??_EUSART_Transmit_ISR:	
  1588                           ; 1 bytes @ 0x0
  1589                           
  1590  0070                     ?_EUSART_Receive_ISR:	
  1591                           ; 1 bytes @ 0x0
  1592                           
  1593  0070                     ??_EUSART_Receive_ISR:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_EPWM_Initialize:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ?_PIN_MANAGER_Initialize:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_SYSTEM_Initialize:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_INTERRUPT_InterruptManager:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_GPS_Initialize:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_GPS_read_speed:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_main:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617                           
  1618                           ; 1 bytes @ 0x0
  1619  0070                     	ds	2
  1620  0072                     button_update_loop@current_state:	
  1621                           
  1622                           ; 1 bytes @ 0x2
  1623  0072                     	ds	1
  1624  0073                     ??_TMR0_ISR:	
  1625  0073                     ??_TMR0_CallBack:	
  1626                           ; 1 bytes @ 0x3
  1627                           
  1628  0073                     ??_my10msTimerISR:	
  1629                           ; 1 bytes @ 0x3
  1630                           
  1631  0073                     ??_INTERRUPT_InterruptManager:	
  1632                           ; 1 bytes @ 0x3
  1633                           
  1634                           
  1635                           ; 1 bytes @ 0x3
  1636  0073                     	ds	1
  1637  0074                     ??_TMR2_StartTimer:	
  1638  0074                     ??_OSCILLATOR_Initialize:	
  1639                           ; 1 bytes @ 0x4
  1640                           
  1641  0074                     ?_TMR0_SetInterruptHandler:	
  1642                           ; 1 bytes @ 0x4
  1643                           
  1644  0074                     ??_LED_set_state:	
  1645                           ; 1 bytes @ 0x4
  1646                           
  1647  0074                     ??_button_init:	
  1648                           ; 1 bytes @ 0x4
  1649                           
  1650  0074                     ??_TMR2_Initialize:	
  1651                           ; 1 bytes @ 0x4
  1652                           
  1653  0074                     ??_EUSART_Initialize:	
  1654                           ; 1 bytes @ 0x4
  1655                           
  1656  0074                     ??_EUSART_Read:	
  1657                           ; 1 bytes @ 0x4
  1658                           
  1659  0074                     ??_EUSART_Write:	
  1660                           ; 1 bytes @ 0x4
  1661                           
  1662  0074                     ??_EPWM_Initialize:	
  1663                           ; 1 bytes @ 0x4
  1664                           
  1665  0074                     ?_EPWM_LoadDutyValue:	
  1666                           ; 1 bytes @ 0x4
  1667                           
  1668  0074                     ??_PIN_MANAGER_Initialize:	
  1669                           ; 1 bytes @ 0x4
  1670                           
  1671  0074                     ??___wmul:	
  1672                           ; 1 bytes @ 0x4
  1673                           
  1674  0074                     LED_set_state@new_state:	
  1675                           ; 1 bytes @ 0x4
  1676                           
  1677  0074                     EPWM_LoadDutyValue@dutyValue:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  1681                           ; 2 bytes @ 0x4
  1682                           
  1683  0074                     ___wmul@product:	
  1684                           ; 2 bytes @ 0x4
  1685                           
  1686                           
  1687                           ; 2 bytes @ 0x4
  1688  0074                     	ds	1
  1689  0075                     EUSART_Read@readValue:	
  1690  0075                     EUSART_Write@txData:	
  1691                           ; 1 bytes @ 0x5
  1692                           
  1693                           
  1694                           ; 1 bytes @ 0x5
  1695  0075                     	ds	1
  1696  0076                     ??_TMR0_SetInterruptHandler:	
  1697  0076                     ??_putch:	
  1698                           ; 1 bytes @ 0x6
  1699                           
  1700  0076                     ??_SYSTEM_Initialize:	
  1701                           ; 1 bytes @ 0x6
  1702                           
  1703                           
  1704                           	psect	cstackBANK0
  1705  0020                     __pcstackBANK0:	
  1706                           ; 1 bytes @ 0x6
  1707                           
  1708  0020                     ??_TMR0_Initialize:	
  1709  0020                     ??_EPWM_LoadDutyValue:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0020                     ?___wmul:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0020                     putch@txData:	
  1716                           ; 2 bytes @ 0x0
  1717                           
  1718  0020                     ___wmul@multiplier:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721                           
  1722                           ; 2 bytes @ 0x0
  1723  0020                     	ds	1
  1724  0021                     ?_printf:	
  1725  0021                     printf@f:	
  1726                           ; 2 bytes @ 0x1
  1727                           
  1728                           
  1729                           ; 2 bytes @ 0x1
  1730  0021                     	ds	1
  1731  0022                     ___wmul@multiplicand:	
  1732                           
  1733                           ; 2 bytes @ 0x2
  1734  0022                     	ds	1
  1735  0023                     ??_printf:	
  1736                           
  1737                           ; 1 bytes @ 0x3
  1738  0023                     	ds	1
  1739  0024                     ??_GPS_read_speed:	
  1740                           
  1741                           ; 1 bytes @ 0x4
  1742  0024                     	ds	2
  1743  0026                     printf@ap:	
  1744  0026                     GPS_read_speed@buffer:	
  1745                           ; 1 bytes @ 0x6
  1746                           
  1747                           
  1748                           ; 40 bytes @ 0x6
  1749  0026                     	ds	1
  1750  0027                     printf@c:	
  1751                           
  1752                           ; 1 bytes @ 0x7
  1753  0027                     	ds	1
  1754  0028                     ??_GPS_Initialize:	
  1755                           
  1756                           ; 1 bytes @ 0x8
  1757  0028                     	ds	3
  1758  002B                     GPS_Initialize@tmp:	
  1759                           
  1760                           ; 1 bytes @ 0xB
  1761  002B                     	ds	35
  1762  004E                     GPS_read_speed@checksum:	
  1763                           
  1764                           ; 1 bytes @ 0x2E
  1765  004E                     	ds	1
  1766  004F                     GPS_read_speed@read_speed_dec:	
  1767                           
  1768                           ; 2 bytes @ 0x2F
  1769  004F                     	ds	2
  1770  0051                     GPS_read_speed@done:	
  1771                           
  1772                           ; 1 bytes @ 0x31
  1773  0051                     	ds	1
  1774  0052                     GPS_read_speed@before_dot:	
  1775                           
  1776                           ; 1 bytes @ 0x32
  1777  0052                     	ds	1
  1778  0053                     GPS_read_speed@recording:	
  1779                           
  1780                           ; 1 bytes @ 0x33
  1781  0053                     	ds	1
  1782  0054                     GPS_read_speed@i:	
  1783                           
  1784                           ; 1 bytes @ 0x34
  1785  0054                     	ds	1
  1786  0055                     GPS_read_speed@m_char:	
  1787                           
  1788                           ; 1 bytes @ 0x35
  1789  0055                     	ds	1
  1790  0056                     GPS_read_speed@read_speed_int:	
  1791                           
  1792                           ; 2 bytes @ 0x36
  1793  0056                     	ds	2
  1794  0058                     GPS_read_speed@i_buff:	
  1795                           
  1796                           ; 1 bytes @ 0x38
  1797  0058                     	ds	1
  1798  0059                     GPS_read_speed@i_buff2:	
  1799                           
  1800                           ; 1 bytes @ 0x39
  1801  0059                     	ds	1
  1802  005A                     ??_main:	
  1803                           
  1804                           ; 1 bytes @ 0x3A
  1805  005A                     	ds	3
  1806  005D                     main@res:	
  1807                           
  1808                           ; 1 bytes @ 0x3D
  1809  005D                     	ds	1
  1810  005E                     main@up:	
  1811                           
  1812                           ; 1 bytes @ 0x3E
  1813  005E                     	ds	1
  1814  005F                     main@tmp:	
  1815                           
  1816                           ; 1 bytes @ 0x3F
  1817  005F                     	ds	1
  1818  0060                     main@tmp_595:	
  1819                           
  1820                           ; 1 bytes @ 0x40
  1821  0060                     	ds	1
  1822  0061                     main@tmp_596:	
  1823                           
  1824                           ; 1 bytes @ 0x41
  1825  0061                     	ds	1
  1826  0062                     main@tmp_597:	
  1827                           
  1828                           ; 1 bytes @ 0x42
  1829  0062                     	ds	1
  1830  0063                     main@tmp_600:	
  1831                           
  1832                           ; 1 bytes @ 0x43
  1833  0063                     	ds	1
  1834                           
  1835                           	psect	maintext
  1836  01CF                     __pmaintext:	
  1837 ;;
  1838 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1839 ;;
  1840 ;; *************** function _main *****************
  1841 ;; Defined at:
  1842 ;;		line 230 in file "main.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  tmp             1    1[BANK1 ] unsigned char 
  1847 ;;  tmp             1    0[BANK1 ] unsigned char 
  1848 ;;  tmp             1   67[BANK0 ] unsigned char 
  1849 ;;  tmp             1   66[BANK0 ] unsigned char 
  1850 ;;  tmp             1   65[BANK0 ] unsigned char 
  1851 ;;  tmp             1   64[BANK0 ] unsigned char 
  1852 ;;  tmp             1   63[BANK0 ] unsigned char 
  1853 ;;  res             1   61[BANK0 ] unsigned char 
  1854 ;;  motor_load      2    2[BANK1 ] unsigned int 
  1855 ;;  up              1   62[BANK0 ] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : B1F/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1
  1865 ;;      Params:         0       0       0
  1866 ;;      Locals:         0       7       4
  1867 ;;      Temps:          0       3       0
  1868 ;;      Totals:         0      10       4
  1869 ;;Total ram usage:       14 bytes
  1870 ;; Hardware stack levels required when called:    9
  1871 ;; This function calls:
  1872 ;;		_EPWM_LoadDutyValue
  1873 ;;		_GPS_Initialize
  1874 ;;		_GPS_read_speed
  1875 ;;		_LED_set_state
  1876 ;;		_SYSTEM_Initialize
  1877 ;;		_TMR0_SetInterruptHandler
  1878 ;;		_TMR2_StartTimer
  1879 ;;		_button_init
  1880 ;; This function is called by:
  1881 ;;		Startup code after reset
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           
  1886                           ;psect for function _main
  1887  01CF                     _main:	
  1888                           
  1889                           ;main.c: 233: SYSTEM_Initialize();
  1890                           
  1891                           ;incstack = 0
  1892                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1893  01CF  25B2               	fcall	_SYSTEM_Initialize
  1894                           
  1895                           ;main.c: 234: TMR0_SetInterruptHandler(my10msTimerISR);
  1896  01D0  30CD               	movlw	low _my10msTimerISR
  1897  01D1  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1898  01D2  3005               	movlw	high _my10msTimerISR
  1899  01D3  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1900  01D4  25BF               	fcall	_TMR0_SetInterruptHandler
  1901                           
  1902                           ;main.c: 240: (INTCONbits.GIE = 1);
  1903  01D5  178B               	bsf	11,7	;volatile
  1904                           
  1905                           ;main.c: 243: (INTCONbits.PEIE = 1);
  1906  01D6  170B               	bsf	11,6	;volatile
  1907                           
  1908                           ;main.c: 293: GPS_Initialize();
  1909  01D7  23D3               	fcall	_GPS_Initialize
  1910  01D8                     l2851:	
  1911                           ;main.c: 296: while (1)
  1912                           
  1913                           
  1914                           ;main.c: 297: {
  1915                           ;main.c: 298: bool res = GPS_read_speed();
  1916  01D8  203A               	fcall	_GPS_read_speed
  1917  01D9  0020               	movlb	0	; select bank0
  1918  01DA  00DA               	movwf	??_main
  1919  01DB  085A               	movf	??_main,w
  1920  01DC  00DD               	movwf	main@res
  1921  01DD  29D8               	goto	l2851
  1922  01DE                     l2861:	
  1923                           ;main.c: 305: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1924                           
  1925                           ;main.c: 301: }
  1926                           ;main.c: 304: LED_set_state(slow_blinking);
  1927                           
  1928  01DE  3005               	movlw	5
  1929  01DF  00DC               	movwf	??_main+2
  1930  01E0  300F               	movlw	15
  1931  01E1  00DB               	movwf	??_main+1
  1932  01E2  30F4               	movlw	244
  1933  01E3  00DA               	movwf	??_main
  1934  01E4                     u2907:	
  1935  01E4  0BDA               	decfsz	??_main,f
  1936  01E5  29E4               	goto	u2907
  1937  01E6  0BDB               	decfsz	??_main+1,f
  1938  01E7  29E4               	goto	u2907
  1939  01E8  0BDC               	decfsz	??_main+2,f
  1940  01E9  29E4               	goto	u2907
  1941  01EA  3001               	movlw	1
  1942  01EB  0020               	movlb	0	; select bank0
  1943  01EC  00DA               	movwf	??_main
  1944  01ED  085A               	movf	??_main,w
  1945  01EE  07DF               	addwf	main@tmp,f
  1946  01EF  3032               	movlw	50
  1947  01F0  025F               	subwf	main@tmp,w
  1948  01F1  1C03               	skipc
  1949  01F2  29DE               	goto	l2861
  1950                           
  1951                           ;main.c: 306: LED_set_state(fast_blinking);
  1952  01F3  3003               	movlw	3
  1953  01F4  251F               	fcall	_LED_set_state
  1954                           
  1955                           ;main.c: 307: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1956  01F5  0020               	movlb	0	; select bank0
  1957  01F6  01E0               	clrf	main@tmp_595
  1958  01F7  3032               	movlw	50
  1959  01F8  0260               	subwf	main@tmp_595,w
  1960  01F9  1803               	btfsc	3,0
  1961  01FA  2A10               	goto	l2881
  1962  01FB                     l2875:	
  1963  01FB  3005               	movlw	5
  1964  01FC  00DC               	movwf	??_main+2
  1965  01FD  300F               	movlw	15
  1966  01FE  00DB               	movwf	??_main+1
  1967  01FF  30F4               	movlw	244
  1968  0200  00DA               	movwf	??_main
  1969  0201                     u2917:	
  1970  0201  0BDA               	decfsz	??_main,f
  1971  0202  2A01               	goto	u2917
  1972  0203  0BDB               	decfsz	??_main+1,f
  1973  0204  2A01               	goto	u2917
  1974  0205  0BDC               	decfsz	??_main+2,f
  1975  0206  2A01               	goto	u2917
  1976  0207  3001               	movlw	1
  1977  0208  0020               	movlb	0	; select bank0
  1978  0209  00DA               	movwf	??_main
  1979  020A  085A               	movf	??_main,w
  1980  020B  07E0               	addwf	main@tmp_595,f
  1981  020C  3032               	movlw	50
  1982  020D  0260               	subwf	main@tmp_595,w
  1983  020E  1C03               	skipc
  1984  020F  29FB               	goto	l2875
  1985  0210                     l2881:	
  1986                           
  1987                           ;main.c: 308: LED_set_state(always_on);
  1988  0210  3000               	movlw	0
  1989  0211  251F               	fcall	_LED_set_state
  1990                           
  1991                           ;main.c: 309: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1992  0212  0020               	movlb	0	; select bank0
  1993  0213  01E1               	clrf	main@tmp_596
  1994  0214  3032               	movlw	50
  1995  0215  0261               	subwf	main@tmp_596,w
  1996  0216  1803               	btfsc	3,0
  1997  0217  2A2D               	goto	l2895
  1998  0218                     l2889:	
  1999  0218  3005               	movlw	5
  2000  0219  00DC               	movwf	??_main+2
  2001  021A  300F               	movlw	15
  2002  021B  00DB               	movwf	??_main+1
  2003  021C  30F4               	movlw	244
  2004  021D  00DA               	movwf	??_main
  2005  021E                     u2927:	
  2006  021E  0BDA               	decfsz	??_main,f
  2007  021F  2A1E               	goto	u2927
  2008  0220  0BDB               	decfsz	??_main+1,f
  2009  0221  2A1E               	goto	u2927
  2010  0222  0BDC               	decfsz	??_main+2,f
  2011  0223  2A1E               	goto	u2927
  2012  0224  3001               	movlw	1
  2013  0225  0020               	movlb	0	; select bank0
  2014  0226  00DA               	movwf	??_main
  2015  0227  085A               	movf	??_main,w
  2016  0228  07E1               	addwf	main@tmp_596,f
  2017  0229  3032               	movlw	50
  2018  022A  0261               	subwf	main@tmp_596,w
  2019  022B  1C03               	skipc
  2020  022C  2A18               	goto	l2889
  2021  022D                     l2895:	
  2022                           
  2023                           ;main.c: 310: LED_set_state(always_off);
  2024  022D  3001               	movlw	1
  2025  022E  251F               	fcall	_LED_set_state
  2026                           
  2027                           ;main.c: 311: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2028  022F  0020               	movlb	0	; select bank0
  2029  0230  01E2               	clrf	main@tmp_597
  2030  0231  3032               	movlw	50
  2031  0232  0262               	subwf	main@tmp_597,w
  2032  0233  1803               	btfsc	3,0
  2033  0234  2A4A               	goto	l2909
  2034  0235                     l2903:	
  2035  0235  3005               	movlw	5
  2036  0236  00DC               	movwf	??_main+2
  2037  0237  300F               	movlw	15
  2038  0238  00DB               	movwf	??_main+1
  2039  0239  30F4               	movlw	244
  2040  023A  00DA               	movwf	??_main
  2041  023B                     u2937:	
  2042  023B  0BDA               	decfsz	??_main,f
  2043  023C  2A3B               	goto	u2937
  2044  023D  0BDB               	decfsz	??_main+1,f
  2045  023E  2A3B               	goto	u2937
  2046  023F  0BDC               	decfsz	??_main+2,f
  2047  0240  2A3B               	goto	u2937
  2048  0241  3001               	movlw	1
  2049  0242  0020               	movlb	0	; select bank0
  2050  0243  00DA               	movwf	??_main
  2051  0244  085A               	movf	??_main,w
  2052  0245  07E2               	addwf	main@tmp_597,f
  2053  0246  3032               	movlw	50
  2054  0247  0262               	subwf	main@tmp_597,w
  2055  0248  1C03               	skipc
  2056  0249  2A35               	goto	l2903
  2057  024A                     l2909:	
  2058                           
  2059                           ;main.c: 314: LED_set_state(always_on);
  2060  024A  3000               	movlw	0
  2061  024B  251F               	fcall	_LED_set_state
  2062                           
  2063                           ;main.c: 315: button_init();
  2064  024C  2578               	fcall	_button_init
  2065  024D                     l2911:	
  2066                           ;main.c: 317: {}
  2067                           
  2068                           ;main.c: 316: while (b_confirmed_state == nothing)
  2069                           
  2070  024D  0020               	movlb	0	; select bank0
  2071  024E  0865               	movf	_b_confirmed_state,w	;volatile
  2072  024F  1903               	btfsc	3,2
  2073  0250  2A4D               	goto	l2911
  2074                           
  2075                           ;main.c: 319: if (b_confirmed_state == short_push)
  2076  0251  0365               	decf	_b_confirmed_state,w	;volatile
  2077  0252  1D03               	btfss	3,2
  2078  0253  2A56               	goto	l2917
  2079                           
  2080                           ;main.c: 320: LED_set_state(fast_blinking);
  2081  0254  3003               	movlw	3
  2082  0255  2A5C               	goto	L2
  2083  0256                     l2917:	
  2084                           
  2085                           ;main.c: 321: else if (b_confirmed_state == long_push)
  2086  0256  3002               	movlw	2
  2087  0257  0020               	movlb	0	; select bank0
  2088  0258  0665               	xorwf	_b_confirmed_state,w	;volatile
  2089  0259  1D03               	btfss	3,2
  2090  025A  2A5D               	goto	l430
  2091                           
  2092                           ;main.c: 322: LED_set_state(slow_blinking);
  2093  025B  3002               	movlw	2
  2094  025C                     L2:	
  2095  025C  251F               	fcall	_LED_set_state
  2096  025D                     l430:	
  2097                           ;main.c: 325: {}
  2098                           
  2099                           ;main.c: 324: while(1)
  2100                           
  2101  025D  2A5D               	goto	l430
  2102  025E                     l2931:	
  2103                           ;main.c: 333: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2104                           
  2105                           ;main.c: 332: TMR2_StartTimer();
  2106                           
  2107                           ;main.c: 331: EPWM_LoadDutyValue(1023-motor_load);
  2108                           
  2109                           ;main.c: 330: uint16_t motor_load = 0;
  2110                           
  2111  025E  3005               	movlw	5
  2112  025F  00DC               	movwf	??_main+2
  2113  0260  300F               	movlw	15
  2114  0261  00DB               	movwf	??_main+1
  2115  0262  30F4               	movlw	244
  2116  0263  00DA               	movwf	??_main
  2117  0264                     u2947:	
  2118  0264  0BDA               	decfsz	??_main,f
  2119  0265  2A64               	goto	u2947
  2120  0266  0BDB               	decfsz	??_main+1,f
  2121  0267  2A64               	goto	u2947
  2122  0268  0BDC               	decfsz	??_main+2,f
  2123  0269  2A64               	goto	u2947
  2124  026A  3001               	movlw	1
  2125  026B  0020               	movlb	0	; select bank0
  2126  026C  00DA               	movwf	??_main
  2127  026D  085A               	movf	??_main,w
  2128  026E  07E3               	addwf	main@tmp_600,f
  2129  026F  3032               	movlw	50
  2130  0270  0263               	subwf	main@tmp_600,w
  2131  0271  1C03               	skipc
  2132  0272  2A5E               	goto	l2931
  2133                           
  2134                           ;main.c: 335: bool up = 1;
  2135  0273  01DE               	clrf	main@up
  2136  0274  0ADE               	incf	main@up,f
  2137                           
  2138                           ;main.c: 355: EPWM_LoadDutyValue(0);
  2139  0275  3000               	movlw	0
  2140  0276  00F4               	movwf	EPWM_LoadDutyValue@dutyValue
  2141  0277  00F5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2142  0278  24B2               	fcall	_EPWM_LoadDutyValue
  2143                           
  2144                           ;main.c: 356: _delay((unsigned long)((10)*(32000000/4000.0)));
  2145  0279  3068               	movlw	104
  2146  027A  0020               	movlb	0	; select bank0
  2147  027B  00DB               	movwf	??_main+1
  2148  027C  30E4               	movlw	228
  2149  027D  00DA               	movwf	??_main
  2150  027E                     u2957:	
  2151  027E  0BDA               	decfsz	??_main,f
  2152  027F  2A7E               	goto	u2957
  2153  0280  0BDB               	decfsz	??_main+1,f
  2154  0281  2A7E               	goto	u2957
  2155  0282  0000               	nop
  2156                           
  2157                           ;main.c: 357: EPWM_LoadDutyValue(1023-148);
  2158  0283  306B               	movlw	107
  2159  0284  00F4               	movwf	EPWM_LoadDutyValue@dutyValue
  2160  0285  3003               	movlw	3
  2161  0286  00F5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2162  0287  24B2               	fcall	_EPWM_LoadDutyValue
  2163                           
  2164                           ;main.c: 358: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2165  0288  0021               	movlb	1	; select bank1
  2166  0289  01BA               	clrf	main@tmp_602^(0+128)
  2167  028A  3032               	movlw	50
  2168  028B  023A               	subwf	main@tmp_602^(0+128),w
  2169  028C  1803               	btfsc	3,0
  2170  028D  2AA5               	goto	l2955
  2171  028E                     l2949:	
  2172  028E  3005               	movlw	5
  2173  028F  0020               	movlb	0	; select bank0
  2174  0290  00DC               	movwf	??_main+2
  2175  0291  300F               	movlw	15
  2176  0292  00DB               	movwf	??_main+1
  2177  0293  30F4               	movlw	244
  2178  0294  00DA               	movwf	??_main
  2179  0295                     u2967:	
  2180  0295  0BDA               	decfsz	??_main,f
  2181  0296  2A95               	goto	u2967
  2182  0297  0BDB               	decfsz	??_main+1,f
  2183  0298  2A95               	goto	u2967
  2184  0299  0BDC               	decfsz	??_main+2,f
  2185  029A  2A95               	goto	u2967
  2186  029B  3001               	movlw	1
  2187  029C  0020               	movlb	0	; select bank0
  2188  029D  00DA               	movwf	??_main
  2189  029E  085A               	movf	??_main,w
  2190  029F  0021               	movlb	1	; select bank1
  2191  02A0  07BA               	addwf	main@tmp_602^(0+128),f
  2192  02A1  3032               	movlw	50
  2193  02A2  023A               	subwf	main@tmp_602^(0+128),w
  2194  02A3  1C03               	skipc
  2195  02A4  2A8E               	goto	l2949
  2196  02A5                     l2955:	
  2197                           ;main.c: 359: while (1)
  2198                           
  2199                           
  2200                           ;main.c: 360: {
  2201                           ;main.c: 361: if (up == 1)
  2202  02A5  0020               	movlb	0	; select bank0
  2203  02A6  035E               	decf	main@up,w
  2204  02A7  1D03               	btfss	3,2
  2205  02A8  2AAF               	goto	l2959
  2206                           
  2207                           ;main.c: 362: motor_load += 1;
  2208  02A9  3001               	movlw	1
  2209  02AA  0021               	movlb	1	; select bank1
  2210  02AB  07BC               	addwf	main@motor_load^(0+128),f
  2211  02AC  3000               	movlw	0
  2212  02AD  3DBD               	addwfc	(main@motor_load+1)^(0+128),f
  2213  02AE  2AB4               	goto	l438
  2214  02AF                     l2959:	
  2215                           
  2216                           ;main.c: 363: else
  2217                           ;main.c: 364: motor_load -= 1;
  2218  02AF  3001               	movlw	1
  2219  02B0  0021               	movlb	1	; select bank1
  2220  02B1  02BC               	subwf	main@motor_load^(0+128),f
  2221  02B2  3000               	movlw	0
  2222  02B3  3BBD               	subwfb	(main@motor_load+1)^(0+128),f
  2223  02B4                     l438:	
  2224                           
  2225                           ;main.c: 365: if (motor_load > 300)
  2226  02B4  3001               	movlw	1
  2227  02B5  023D               	subwf	(main@motor_load+1)^(0+128),w
  2228  02B6  302D               	movlw	45
  2229  02B7  1903               	skipnz
  2230  02B8  023C               	subwf	main@motor_load^(0+128),w
  2231  02B9  1C03               	skipc
  2232  02BA  2ABE               	goto	l2963
  2233                           
  2234                           ;main.c: 366: up = 0;
  2235  02BB  0020               	movlb	0	; select bank0
  2236  02BC  01DE               	clrf	main@up
  2237  02BD  2AF6               	goto	l2985
  2238  02BE                     l2963:	
  2239                           
  2240                           ;main.c: 367: else if (motor_load == 0)
  2241  02BE  0021               	movlb	1	; select bank1
  2242  02BF  083C               	movf	main@motor_load^(0+128),w
  2243  02C0  043D               	iorwf	(main@motor_load+1)^(0+128),w
  2244  02C1  1D03               	btfss	3,2
  2245  02C2  2AF6               	goto	l2985
  2246                           
  2247                           ;main.c: 368: {
  2248                           ;main.c: 369: up = 1;
  2249  02C3  0020               	movlb	0	; select bank0
  2250  02C4  01DE               	clrf	main@up
  2251  02C5  0ADE               	incf	main@up,f
  2252                           
  2253                           ;main.c: 370: EPWM_LoadDutyValue(1023);
  2254  02C6  30FF               	movlw	255
  2255  02C7  00F4               	movwf	EPWM_LoadDutyValue@dutyValue
  2256  02C8  3003               	movlw	3
  2257  02C9  00F5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2258  02CA  24B2               	fcall	_EPWM_LoadDutyValue
  2259                           
  2260                           ;main.c: 371: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2261  02CB  0021               	movlb	1	; select bank1
  2262  02CC  01BB               	clrf	main@tmp_603^(0+128)
  2263  02CD  3032               	movlw	50
  2264  02CE  023B               	subwf	main@tmp_603^(0+128),w
  2265  02CF  1803               	btfsc	3,0
  2266  02D0  2AE8               	goto	l2981
  2267  02D1                     l2975:	
  2268  02D1  3005               	movlw	5
  2269  02D2  0020               	movlb	0	; select bank0
  2270  02D3  00DC               	movwf	??_main+2
  2271  02D4  300F               	movlw	15
  2272  02D5  00DB               	movwf	??_main+1
  2273  02D6  30F4               	movlw	244
  2274  02D7  00DA               	movwf	??_main
  2275  02D8                     u2977:	
  2276  02D8  0BDA               	decfsz	??_main,f
  2277  02D9  2AD8               	goto	u2977
  2278  02DA  0BDB               	decfsz	??_main+1,f
  2279  02DB  2AD8               	goto	u2977
  2280  02DC  0BDC               	decfsz	??_main+2,f
  2281  02DD  2AD8               	goto	u2977
  2282  02DE  3001               	movlw	1
  2283  02DF  0020               	movlb	0	; select bank0
  2284  02E0  00DA               	movwf	??_main
  2285  02E1  085A               	movf	??_main,w
  2286  02E2  0021               	movlb	1	; select bank1
  2287  02E3  07BB               	addwf	main@tmp_603^(0+128),f
  2288  02E4  3032               	movlw	50
  2289  02E5  023B               	subwf	main@tmp_603^(0+128),w
  2290  02E6  1C03               	skipc
  2291  02E7  2AD1               	goto	l2975
  2292  02E8                     l2981:	
  2293                           
  2294                           ;main.c: 373: EPWM_LoadDutyValue(0);
  2295  02E8  3000               	movlw	0
  2296  02E9  00F4               	movwf	EPWM_LoadDutyValue@dutyValue
  2297  02EA  00F5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2298  02EB  24B2               	fcall	_EPWM_LoadDutyValue
  2299                           
  2300                           ;main.c: 374: _delay((unsigned long)((10)*(32000000/4000.0)));
  2301  02EC  3068               	movlw	104
  2302  02ED  0020               	movlb	0	; select bank0
  2303  02EE  00DB               	movwf	??_main+1
  2304  02EF  30E4               	movlw	228
  2305  02F0  00DA               	movwf	??_main
  2306  02F1                     u2987:	
  2307  02F1  0BDA               	decfsz	??_main,f
  2308  02F2  2AF1               	goto	u2987
  2309  02F3  0BDB               	decfsz	??_main+1,f
  2310  02F4  2AF1               	goto	u2987
  2311  02F5  0000               	nop
  2312  02F6                     l2985:	
  2313                           
  2314                           ;main.c: 375: }
  2315                           ;main.c: 376: if (motor_load < 148)
  2316  02F6  3000               	movlw	0
  2317  02F7  0021               	movlb	1	; select bank1
  2318  02F8  023D               	subwf	(main@motor_load+1)^(0+128),w
  2319  02F9  3094               	movlw	148
  2320  02FA  1903               	skipnz
  2321  02FB  023C               	subwf	main@motor_load^(0+128),w
  2322  02FC  1803               	skipnc
  2323  02FD  2B02               	goto	l2989
  2324                           
  2325                           ;main.c: 377: EPWM_LoadDutyValue(1023-135);
  2326  02FE  3078               	movlw	120
  2327  02FF  00F4               	movwf	EPWM_LoadDutyValue@dutyValue
  2328  0300  3003               	movlw	3
  2329  0301  2B12               	goto	L1
  2330  0302                     l2989:	
  2331                           
  2332                           ;main.c: 378: else
  2333                           ;main.c: 379: EPWM_LoadDutyValue(1023-motor_load);
  2334  0302  0021               	movlb	1	; select bank1
  2335  0303  093C               	comf	main@motor_load^(0+128),w
  2336  0304  0020               	movlb	0	; select bank0
  2337  0305  00DA               	movwf	??_main
  2338  0306  0021               	movlb	1	; select bank1
  2339  0307  093D               	comf	(main@motor_load+1)^(0+128),w
  2340  0308  0020               	movlb	0	; select bank0
  2341  0309  00DB               	movwf	??_main+1
  2342  030A  0ADA               	incf	??_main,f
  2343  030B  1903               	skipnz
  2344  030C  0ADB               	incf	??_main+1,f
  2345  030D  085A               	movf	??_main,w
  2346  030E  3EFF               	addlw	255
  2347  030F  00F4               	movwf	EPWM_LoadDutyValue@dutyValue
  2348  0310  3003               	movlw	3
  2349  0311  3D5B               	addwfc	??_main+1,w
  2350  0312                     L1:	
  2351  0312  00F5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2352  0313  24B2               	fcall	_EPWM_LoadDutyValue
  2353                           
  2354                           ;main.c: 380: _delay((unsigned long)((50)*(32000000/4000.0)));
  2355  0314  3003               	movlw	3
  2356  0315  0020               	movlb	0	; select bank0
  2357  0316  00DC               	movwf	??_main+2
  2358  0317  3008               	movlw	8
  2359  0318  00DB               	movwf	??_main+1
  2360  0319  3078               	movlw	120
  2361  031A  00DA               	movwf	??_main
  2362  031B                     u2997:	
  2363  031B  0BDA               	decfsz	??_main,f
  2364  031C  2B1B               	goto	u2997
  2365  031D  0BDB               	decfsz	??_main+1,f
  2366  031E  2B1B               	goto	u2997
  2367  031F  0BDC               	decfsz	??_main+2,f
  2368  0320  2B1B               	goto	u2997
  2369  0321  2AA5               	goto	l2955
  2370  0322                     __end_of_main:	
  2371                           
  2372                           	psect	text1
  2373  0578                     __ptext1:	
  2374 ;; *************** function _button_init *****************
  2375 ;; Defined at:
  2376 ;;		line 46 in file "interact.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1
  2390 ;;      Params:         0       0       0
  2391 ;;      Locals:         0       0       0
  2392 ;;      Temps:          2       0       0
  2393 ;;      Totals:         2       0       0
  2394 ;;Total ram usage:        2 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    5
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_main
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _button_init
  2406  0578                     _button_init:	
  2407                           
  2408                           ;interact.c: 48: b_last_state = PORTAbits.RA4;
  2409                           
  2410                           ;incstack = 0
  2411                           ; Regs used in _button_init: [wreg+status,2+status,0]
  2412  0578  0020               	movlb	0	; select bank0
  2413  0579  0E0C               	swapf	12,w	;volatile
  2414  057A  3901               	andlw	1
  2415  057B  00F4               	movwf	??_button_init
  2416  057C  01F5               	clrf	??_button_init+1
  2417  057D  0874               	movf	??_button_init,w
  2418  057E  00F6               	movwf	_b_last_state	;volatile
  2419  057F  0875               	movf	??_button_init+1,w
  2420  0580  00F7               	movwf	_b_last_state+1	;volatile
  2421                           
  2422                           ;interact.c: 49: b_count_pressed = 0;
  2423  0581  01E6               	clrf	_b_count_pressed	;volatile
  2424                           
  2425                           ;interact.c: 50: b_count_released = 0;
  2426  0582  01E7               	clrf	_b_count_released	;volatile
  2427                           
  2428                           ;interact.c: 51: b_confirmed_state = nothing;
  2429  0583  01E5               	clrf	_b_confirmed_state	;volatile
  2430                           
  2431                           ;interact.c: 52: b_push_confirmed = 0;
  2432  0584  01E9               	clrf	_b_push_confirmed	;volatile
  2433                           
  2434                           ;interact.c: 53: b_release_confirmed = 0;
  2435  0585  0021               	movlb	1	; select bank1
  2436  0586  01B8               	clrf	_b_release_confirmed^(0+128)	;volatile
  2437                           
  2438                           ;interact.c: 54: b_has_once_been_released = 0;
  2439  0587  0020               	movlb	0	; select bank0
  2440  0588  01E8               	clrf	_b_has_once_been_released	;volatile
  2441  0589  0008               	return
  2442  058A                     __end_of_button_init:	
  2443                           
  2444                           	psect	text2
  2445  05B2                     __ptext2:	
  2446 ;; *************** function _SYSTEM_Initialize *****************
  2447 ;; Defined at:
  2448 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1
  2462 ;;      Params:         0       0       0
  2463 ;;      Locals:         0       0       0
  2464 ;;      Temps:          0       0       0
  2465 ;;      Totals:         0       0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    7
  2469 ;; This function calls:
  2470 ;;		_EPWM_Initialize
  2471 ;;		_EUSART_Initialize
  2472 ;;		_OSCILLATOR_Initialize
  2473 ;;		_PIN_MANAGER_Initialize
  2474 ;;		_TMR0_Initialize
  2475 ;;		_TMR2_Initialize
  2476 ;; This function is called by:
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _SYSTEM_Initialize
  2483  05B2                     _SYSTEM_Initialize:	
  2484                           
  2485                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2489  05B2  2539               	fcall	_PIN_MANAGER_Initialize
  2490                           
  2491                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2492  05B3  25AA               	fcall	_OSCILLATOR_Initialize
  2493                           
  2494                           ;mcc.c: 74: EPWM_Initialize();
  2495  05B4  258A               	fcall	_EPWM_Initialize
  2496                           
  2497                           ;mcc.c: 75: TMR2_Initialize();
  2498  05B5  25A1               	fcall	_TMR2_Initialize
  2499                           
  2500                           ;mcc.c: 76: TMR0_Initialize();
  2501  05B6  2564               	fcall	_TMR0_Initialize
  2502                           
  2503                           ;mcc.c: 77: EUSART_Initialize();
  2504  05B7  24CE               	fcall	_EUSART_Initialize
  2505  05B8  0008               	return
  2506  05B9                     __end_of_SYSTEM_Initialize:	
  2507                           
  2508                           	psect	text3
  2509  05A1                     __ptext3:	
  2510 ;; *************** function _TMR2_Initialize *****************
  2511 ;; Defined at:
  2512 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;		None
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      void 
  2519 ;; Registers used:
  2520 ;;		wreg, status,2, status,0, pclath, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMMON   BANK0   BANK1
  2526 ;;      Params:         0       0       0
  2527 ;;      Locals:         0       0       0
  2528 ;;      Temps:          0       0       0
  2529 ;;      Totals:         0       0       0
  2530 ;;Total ram usage:        0 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    6
  2533 ;; This function calls:
  2534 ;;		_TMR2_StartTimer
  2535 ;; This function is called by:
  2536 ;;		_SYSTEM_Initialize
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           
  2541                           ;psect for function _TMR2_Initialize
  2542  05A1                     _TMR2_Initialize:	
  2543                           
  2544                           ;tmr2.c: 62: T2CON = 0x02;
  2545                           
  2546                           ;incstack = 0
  2547                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2548  05A1  3002               	movlw	2
  2549  05A2  0020               	movlb	0	; select bank0
  2550  05A3  009C               	movwf	28	;volatile
  2551                           
  2552                           ;tmr2.c: 65: PR2 = 0xFF;
  2553  05A4  30FF               	movlw	255
  2554  05A5  009B               	movwf	27	;volatile
  2555                           
  2556                           ;tmr2.c: 68: TMR2 = 0x00;
  2557  05A6  019A               	clrf	26	;volatile
  2558                           
  2559                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  2560  05A7  1091               	bcf	17,1	;volatile
  2561                           
  2562                           ;tmr2.c: 74: TMR2_StartTimer();
  2563  05A8  25CA               	fcall	_TMR2_StartTimer
  2564  05A9  0008               	return
  2565  05AA                     __end_of_TMR2_Initialize:	
  2566                           
  2567                           	psect	text4
  2568  05CA                     __ptext4:	
  2569 ;; *************** function _TMR2_StartTimer *****************
  2570 ;; Defined at:
  2571 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		None
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1
  2585 ;;      Params:         0       0       0
  2586 ;;      Locals:         0       0       0
  2587 ;;      Temps:          0       0       0
  2588 ;;      Totals:         0       0       0
  2589 ;;Total ram usage:        0 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    5
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_TMR2_Initialize
  2596 ;;		_main
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           
  2601                           ;psect for function _TMR2_StartTimer
  2602  05CA                     _TMR2_StartTimer:	
  2603                           
  2604                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  2605                           
  2606                           ;incstack = 0
  2607                           ; Regs used in _TMR2_StartTimer: []
  2608  05CA  0020               	movlb	0	; select bank0
  2609  05CB  151C               	bsf	28,2	;volatile
  2610  05CC  0008               	return
  2611  05CD                     __end_of_TMR2_StartTimer:	
  2612                           
  2613                           	psect	text5
  2614  0564                     __ptext5:	
  2615 ;; *************** function _TMR0_Initialize *****************
  2616 ;; Defined at:
  2617 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1
  2631 ;;      Params:         0       0       0
  2632 ;;      Locals:         0       0       0
  2633 ;;      Temps:          0       1       0
  2634 ;;      Totals:         0       1       0
  2635 ;;Total ram usage:        1 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    6
  2638 ;; This function calls:
  2639 ;;		_TMR0_SetInterruptHandler
  2640 ;; This function is called by:
  2641 ;;		_SYSTEM_Initialize
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function _TMR0_Initialize
  2647  0564                     _TMR0_Initialize:	
  2648                           
  2649                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  2650                           
  2651                           ;incstack = 0
  2652                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2653  0564  0021               	movlb	1	; select bank1
  2654  0565  0815               	movf	21,w	;volatile
  2655  0566  39C0               	andlw	192
  2656  0567  3817               	iorlw	23
  2657  0568  0095               	movwf	21	;volatile
  2658                           
  2659                           ;tmr0.c: 71: TMR0 = 0x64;
  2660  0569  3064               	movlw	100
  2661  056A  0020               	movlb	0	; select bank0
  2662  056B  0095               	movwf	21	;volatile
  2663                           
  2664                           ;tmr0.c: 74: timer0ReloadVal= 100;
  2665  056C  3064               	movlw	100
  2666  056D  00A0               	movwf	??_TMR0_Initialize
  2667  056E  0820               	movf	??_TMR0_Initialize,w
  2668  056F  00EE               	movwf	_timer0ReloadVal	;volatile
  2669                           
  2670                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  2671  0570  110B               	bcf	11,2	;volatile
  2672                           
  2673                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  2674  0571  168B               	bsf	11,5	;volatile
  2675                           
  2676                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2677  0572  30D1               	movlw	low _TMR0_DefaultInterruptHandler
  2678  0573  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2679  0574  3005               	movlw	high _TMR0_DefaultInterruptHandler
  2680  0575  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2681  0576  25BF               	fcall	_TMR0_SetInterruptHandler
  2682  0577  0008               	return
  2683  0578                     __end_of_TMR0_Initialize:	
  2684                           
  2685                           	psect	text6
  2686  05BF                     __ptext6:	
  2687 ;; *************** function _TMR0_SetInterruptHandler *****************
  2688 ;; Defined at:
  2689 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  InterruptHan    2    4[COMMON] PTR void 
  2692 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1
  2704 ;;      Params:         2       0       0
  2705 ;;      Locals:         0       0       0
  2706 ;;      Temps:          0       0       0
  2707 ;;      Totals:         2       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    5
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_TMR0_Initialize
  2715 ;;		_main
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _TMR0_SetInterruptHandler
  2721  05BF                     _TMR0_SetInterruptHandler:	
  2722                           
  2723                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2727  05BF  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2728  05C0  0021               	movlb	1	; select bank1
  2729  05C1  00B3               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  2730  05C2  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2731  05C3  00B2               	movwf	_TMR0_InterruptHandler^(0+128)
  2732  05C4  0008               	return
  2733  05C5                     __end_of_TMR0_SetInterruptHandler:	
  2734                           
  2735                           	psect	text7
  2736  0539                     __ptext7:	
  2737 ;; *************** function _PIN_MANAGER_Initialize *****************
  2738 ;; Defined at:
  2739 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;		None
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      void 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMMON   BANK0   BANK1
  2753 ;;      Params:         0       0       0
  2754 ;;      Locals:         0       0       0
  2755 ;;      Temps:          0       0       0
  2756 ;;      Totals:         0       0       0
  2757 ;;Total ram usage:        0 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    5
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_SYSTEM_Initialize
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _PIN_MANAGER_Initialize
  2769  0539                     _PIN_MANAGER_Initialize:	
  2770                           
  2771                           ;pin_manager.c: 51: LATA = 0x0;
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2775  0539  0022               	movlb	2	; select bank2
  2776  053A  018C               	clrf	12	;volatile
  2777                           
  2778                           ;pin_manager.c: 52: LATC = 0x0;
  2779  053B  018E               	clrf	14	;volatile
  2780                           
  2781                           ;pin_manager.c: 53: ANSELA = 0x7;
  2782  053C  3007               	movlw	7
  2783  053D  0023               	movlb	3	; select bank3
  2784  053E  008C               	movwf	12	;volatile
  2785                           
  2786                           ;pin_manager.c: 54: ANSELC = 0xF;
  2787  053F  300F               	movlw	15
  2788  0540  008E               	movwf	14	;volatile
  2789                           
  2790                           ;pin_manager.c: 55: WPUA = 0x3F;
  2791  0541  303F               	movlw	63
  2792  0542  0024               	movlb	4	; select bank4
  2793  0543  008C               	movwf	12	;volatile
  2794                           
  2795                           ;pin_manager.c: 56: WPUC = 0x3F;
  2796  0544  303F               	movlw	63
  2797  0545  008E               	movwf	14	;volatile
  2798                           
  2799                           ;pin_manager.c: 57: TRISC = 0x37;
  2800  0546  3037               	movlw	55
  2801  0547  0021               	movlb	1	; select bank1
  2802  0548  008E               	movwf	14	;volatile
  2803                           
  2804                           ;pin_manager.c: 58: TRISA = 0x1F;
  2805  0549  301F               	movlw	31
  2806  054A  008C               	movwf	12	;volatile
  2807                           
  2808                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  2809  054B  1395               	bcf	21,7	;volatile
  2810                           
  2811                           ;pin_manager.c: 61: APFCON = 0x00;
  2812  054C  0022               	movlb	2	; select bank2
  2813  054D  019D               	clrf	29	;volatile
  2814  054E  0008               	return
  2815  054F                     __end_of_PIN_MANAGER_Initialize:	
  2816                           
  2817                           	psect	text8
  2818  05AA                     __ptext8:	
  2819 ;; *************** function _OSCILLATOR_Initialize *****************
  2820 ;; Defined at:
  2821 ;;		line 80 in file "mcc_generated_files/mcc.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;		None
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;		None
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  1    wreg      void 
  2828 ;; Registers used:
  2829 ;;		wreg, status,2
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMMON   BANK0   BANK1
  2835 ;;      Params:         0       0       0
  2836 ;;      Locals:         0       0       0
  2837 ;;      Temps:          0       0       0
  2838 ;;      Totals:         0       0       0
  2839 ;;Total ram usage:        0 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    5
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_SYSTEM_Initialize
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _OSCILLATOR_Initialize
  2851  05AA                     _OSCILLATOR_Initialize:	
  2852                           
  2853                           ;mcc.c: 83: OSCCON = 0x70;
  2854                           
  2855                           ;incstack = 0
  2856                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2857  05AA  3070               	movlw	112
  2858  05AB  0021               	movlb	1	; select bank1
  2859  05AC  0099               	movwf	25	;volatile
  2860                           
  2861                           ;mcc.c: 85: OSCSTAT = 0x00;
  2862  05AD  019A               	clrf	26	;volatile
  2863                           
  2864                           ;mcc.c: 87: OSCTUNE = 0x00;
  2865  05AE  0198               	clrf	24	;volatile
  2866  05AF                     l220:	
  2867                           ;mcc.c: 92: {
  2868                           
  2869                           ;mcc.c: 91: while(PLLR == 0)
  2870                           
  2871  05AF  1B1A               	btfsc	26,6	;volatile
  2872  05B0  0008               	return
  2873  05B1  2DAF               	goto	l220
  2874  05B2                     __end_of_OSCILLATOR_Initialize:	
  2875                           
  2876                           	psect	text9
  2877  04CE                     __ptext9:	
  2878 ;; *************** function _EUSART_Initialize *****************
  2879 ;; Defined at:
  2880 ;;		line 75 in file "mcc_generated_files/eusart.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1
  2894 ;;      Params:         0       0       0
  2895 ;;      Locals:         0       0       0
  2896 ;;      Temps:          1       0       0
  2897 ;;      Totals:         1       0       0
  2898 ;;Total ram usage:        1 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    5
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_SYSTEM_Initialize
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _EUSART_Initialize
  2910  04CE                     _EUSART_Initialize:	
  2911                           
  2912                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2916  04CE  0021               	movlb	1	; select bank1
  2917  04CF  1291               	bcf	17,5	;volatile
  2918                           
  2919                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2920  04D0  1211               	bcf	17,4	;volatile
  2921                           
  2922                           ;eusart.c: 84: BAUDCON = 0x08;
  2923  04D1  3008               	movlw	8
  2924  04D2  0023               	movlb	3	; select bank3
  2925  04D3  009F               	movwf	31	;volatile
  2926                           
  2927                           ;eusart.c: 87: RCSTA = 0x90;
  2928  04D4  3090               	movlw	144
  2929  04D5  009D               	movwf	29	;volatile
  2930                           
  2931                           ;eusart.c: 90: TXSTA = 0x24;
  2932  04D6  3024               	movlw	36
  2933  04D7  009E               	movwf	30	;volatile
  2934                           
  2935                           ;eusart.c: 93: SPBRGL = 0x40;
  2936  04D8  3040               	movlw	64
  2937  04D9  009B               	movwf	27	;volatile
  2938                           
  2939                           ;eusart.c: 96: SPBRGH = 0x03;
  2940  04DA  3003               	movlw	3
  2941  04DB  009C               	movwf	28	;volatile
  2942                           
  2943                           ;eusart.c: 100: eusartTxHead = 0;
  2944  04DC  0020               	movlb	0	; select bank0
  2945  04DD  01EC               	clrf	_eusartTxHead
  2946                           
  2947                           ;eusart.c: 101: eusartTxTail = 0;
  2948  04DE  01ED               	clrf	_eusartTxTail
  2949                           
  2950                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  2951  04DF  3008               	movlw	8
  2952  04E0  00F4               	movwf	??_EUSART_Initialize
  2953  04E1  0874               	movf	??_EUSART_Initialize,w
  2954  04E2  00F9               	movwf	_eusartTxBufferRemaining	;volatile
  2955                           
  2956                           ;eusart.c: 104: eusartRxHead = 0;
  2957  04E3  01EA               	clrf	_eusartRxHead
  2958                           
  2959                           ;eusart.c: 105: eusartRxTail = 0;
  2960  04E4  01EB               	clrf	_eusartRxTail
  2961                           
  2962                           ;eusart.c: 106: eusartRxCount = 0;
  2963  04E5  01F8               	clrf	_eusartRxCount	;volatile
  2964                           
  2965                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  2966  04E6  0021               	movlb	1	; select bank1
  2967  04E7  1691               	bsf	17,5	;volatile
  2968  04E8  0008               	return
  2969  04E9                     __end_of_EUSART_Initialize:	
  2970                           
  2971                           	psect	text10
  2972  058A                     __ptext10:	
  2973 ;; *************** function _EPWM_Initialize *****************
  2974 ;; Defined at:
  2975 ;;		line 63 in file "mcc_generated_files/epwm.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;		None
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		wreg, status,2
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1
  2989 ;;      Params:         0       0       0
  2990 ;;      Locals:         0       0       0
  2991 ;;      Temps:          0       0       0
  2992 ;;      Totals:         0       0       0
  2993 ;;Total ram usage:        0 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    5
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_SYSTEM_Initialize
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _EPWM_Initialize
  3005  058A                     _EPWM_Initialize:	
  3006                           
  3007                           ;epwm.c: 68: CCP1CON = 0x3C;
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _EPWM_Initialize: [wreg+status,2]
  3011  058A  303C               	movlw	60
  3012  058B  0025               	movlb	5	; select bank5
  3013  058C  0093               	movwf	19	;volatile
  3014                           
  3015                           ;epwm.c: 71: ECCP1AS = 0x00;
  3016  058D  0195               	clrf	21	;volatile
  3017                           
  3018                           ;epwm.c: 74: PWM1CON = 0x80;
  3019  058E  3080               	movlw	128
  3020  058F  0094               	movwf	20	;volatile
  3021                           
  3022                           ;epwm.c: 77: PSTR1CON = 0x04;
  3023  0590  3004               	movlw	4
  3024  0591  0096               	movwf	22	;volatile
  3025                           
  3026                           ;epwm.c: 80: CCPR1L = 0x7F;
  3027  0592  307F               	movlw	127
  3028  0593  0091               	movwf	17	;volatile
  3029                           
  3030                           ;epwm.c: 83: CCPR1H = 0x00;
  3031  0594  0192               	clrf	18	;volatile
  3032  0595  0008               	return
  3033  0596                     __end_of_EPWM_Initialize:	
  3034                           
  3035                           	psect	text11
  3036  051F                     __ptext11:	
  3037 ;; *************** function _LED_set_state *****************
  3038 ;; Defined at:
  3039 ;;		line 7 in file "interact.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  new_state       1    wreg     enum E2607
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  new_state       1    4[COMMON] enum E2607
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1
  3053 ;;      Params:         0       0       0
  3054 ;;      Locals:         1       0       0
  3055 ;;      Temps:          0       0       0
  3056 ;;      Totals:         1       0       0
  3057 ;;Total ram usage:        1 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    5
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_main
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _LED_set_state
  3069  051F                     _LED_set_state:	
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  3073                           ;LED_set_state@new_state stored from wreg
  3074  051F  00F4               	movwf	LED_set_state@new_state
  3075                           
  3076                           ;interact.c: 9: if (new_state == always_off)
  3077  0520  0374               	decf	LED_set_state@new_state,w
  3078  0521  1D03               	btfss	3,2
  3079  0522  2D26               	goto	l2817
  3080                           
  3081                           ;interact.c: 10: do { LATA5 = 0; } while(0);
  3082  0523  0022               	movlb	2	; select bank2
  3083  0524  128C               	bcf	12,5	;volatile
  3084  0525  0008               	return
  3085  0526                     l2817:	
  3086                           
  3087                           ;interact.c: 11: else if (new_state == always_on)
  3088  0526  0874               	movf	LED_set_state@new_state,w
  3089  0527  1D03               	btfss	3,2
  3090  0528  2D2C               	goto	l2819
  3091                           
  3092                           ;interact.c: 12: do { LATA5 = 1; } while(0);
  3093  0529  0022               	movlb	2	; select bank2
  3094  052A  168C               	bsf	12,5	;volatile
  3095  052B  0008               	return
  3096  052C                     l2819:	
  3097                           
  3098                           ;interact.c: 13: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  3099  052C  3002               	movlw	2
  3100  052D  0674               	xorwf	LED_set_state@new_state,w
  3101  052E  1903               	btfsc	3,2
  3102  052F  2D34               	goto	l489
  3103  0530  3003               	movlw	3
  3104  0531  0674               	xorwf	LED_set_state@new_state,w
  3105  0532  1D03               	btfss	3,2
  3106  0533  0008               	return
  3107  0534                     l489:	
  3108                           ;interact.c: 14: {
  3109                           ;interact.c: 15: do { LATA5 = 1; } while(0);
  3110                           
  3111  0534  0022               	movlb	2	; select bank2
  3112  0535  168C               	bsf	12,5	;volatile
  3113                           
  3114                           ;interact.c: 16: LED_counter = 0;
  3115  0536  0020               	movlb	0	; select bank0
  3116  0537  01E4               	clrf	_LED_counter	;volatile
  3117  0538  0008               	return
  3118  0539                     __end_of_LED_set_state:	
  3119                           
  3120                           	psect	text12
  3121  003A                     __ptext12:	
  3122 ;; *************** function _GPS_read_speed *****************
  3123 ;; Defined at:
  3124 ;;		line 80 in file "main.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  i               1   52[BANK0 ] unsigned char 
  3129 ;;  before_dot      1   50[BANK0 ] unsigned char 
  3130 ;;  checksum        1   46[BANK0 ] unsigned char 
  3131 ;;  buffer         40    6[BANK0 ] unsigned char [40]
  3132 ;;  read_speed_i    2   54[BANK0 ] unsigned short 
  3133 ;;  read_speed_d    2   47[BANK0 ] unsigned short 
  3134 ;;  i_buff2         1   57[BANK0 ] unsigned char 
  3135 ;;  i_buff          1   56[BANK0 ] unsigned char 
  3136 ;;  m_char          1   53[BANK0 ] unsigned char 
  3137 ;;  recording       1   51[BANK0 ] unsigned char 
  3138 ;;  done            1   49[BANK0 ] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      unsigned char 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1
  3148 ;;      Params:         0       0       0
  3149 ;;      Locals:         0      52       0
  3150 ;;      Temps:          0       2       0
  3151 ;;      Totals:         0      54       0
  3152 ;;Total ram usage:       54 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    6
  3155 ;; This function calls:
  3156 ;;		_EUSART_Read
  3157 ;;		___wmul
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _GPS_read_speed
  3165  003A                     _GPS_read_speed:	
  3166                           
  3167                           ;main.c: 93: unsigned char buffer[40];
  3168                           ;main.c: 94: unsigned char i_buff = 0;
  3169                           
  3170                           ;incstack = 0
  3171                           ; Regs used in _GPS_read_speed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3172  003A  0020               	movlb	0	; select bank0
  3173  003B  01D8               	clrf	GPS_read_speed@i_buff
  3174                           
  3175                           ;main.c: 98: bool done = 0;
  3176  003C  01D1               	clrf	GPS_read_speed@done
  3177  003D                     l2655:	
  3178                           
  3179                           ;main.c: 124: {
  3180                           ;main.c: 127: recording = 0;
  3181  003D  01D3               	clrf	GPS_read_speed@recording
  3182  003E                     l2657:	
  3183  003E  0851               	movf	GPS_read_speed@done,w
  3184  003F  1D03               	btfss	3,2
  3185  0040  286F               	goto	l2659
  3186                           
  3187                           ;main.c: 102: {
  3188                           ;main.c: 103: if(eusartRxCount==0)
  3189                           
  3190                           ;main.c: 100: unsigned char m_char;
  3191                           ;main.c: 101: while (!done)
  3192                           
  3193                           ;main.c: 99: bool recording = 0;
  3194  0041  0878               	movf	_eusartRxCount,w	;volatile
  3195  0042  1903               	btfsc	3,2
  3196  0043  283E               	goto	l2657
  3197                           
  3198                           ;main.c: 107: else if(eusartRxCount!=0)
  3199                           
  3200                           ;main.c: 104: {
  3201                           ;main.c: 106: }
  3202  0044  0878               	movf	_eusartRxCount,w	;volatile
  3203  0045  1903               	btfsc	3,2
  3204  0046  283E               	goto	l2657
  3205                           
  3206                           ;main.c: 108: {
  3207                           ;main.c: 109: m_char=EUSART_Read();
  3208  0047  245A               	fcall	_EUSART_Read
  3209  0048  0020               	movlb	0	; select bank0
  3210  0049  00A4               	movwf	??_GPS_read_speed
  3211  004A  0824               	movf	??_GPS_read_speed,w
  3212  004B  00D5               	movwf	GPS_read_speed@m_char
  3213                           
  3214                           ;main.c: 112: if (m_char == '$')
  3215  004C  3024               	movlw	36
  3216  004D  0655               	xorwf	GPS_read_speed@m_char,w
  3217  004E  1D03               	btfss	3,2
  3218  004F  2854               	goto	l2643
  3219                           
  3220                           ;main.c: 113: {
  3221                           ;main.c: 114: recording = 1;
  3222  0050  01D3               	clrf	GPS_read_speed@recording
  3223  0051  0AD3               	incf	GPS_read_speed@recording,f
  3224                           
  3225                           ;main.c: 115: i_buff = 0;
  3226  0052  01D8               	clrf	GPS_read_speed@i_buff
  3227                           
  3228                           ;main.c: 116: }
  3229  0053  283E               	goto	l2657
  3230  0054                     l2643:	
  3231                           
  3232                           ;main.c: 117: else if (recording)
  3233  0054  0853               	movf	GPS_read_speed@recording,w
  3234  0055  1903               	btfsc	3,2
  3235  0056  283E               	goto	l2657
  3236                           
  3237                           ;main.c: 118: {
  3238                           ;main.c: 119: if (m_char == 0x0D)
  3239  0057  300D               	movlw	13
  3240  0058  0655               	xorwf	GPS_read_speed@m_char,w
  3241  0059  1D03               	btfss	3,2
  3242  005A  285E               	goto	l2649
  3243                           
  3244                           ;main.c: 120: done = 1;
  3245  005B  01D1               	clrf	GPS_read_speed@done
  3246  005C  0AD1               	incf	GPS_read_speed@done,f
  3247  005D  286A               	goto	l2653
  3248  005E                     l2649:	
  3249                           
  3250                           ;main.c: 121: else
  3251                           ;main.c: 122: buffer[i_buff++] = m_char;
  3252  005E  0855               	movf	GPS_read_speed@m_char,w
  3253  005F  00A4               	movwf	??_GPS_read_speed
  3254  0060  0858               	movf	GPS_read_speed@i_buff,w
  3255  0061  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3256  0062  0086               	movwf	6
  3257  0063  0187               	clrf	7
  3258  0064  0824               	movf	??_GPS_read_speed,w
  3259  0065  0081               	movwf	1
  3260  0066  3001               	movlw	1
  3261  0067  00A4               	movwf	??_GPS_read_speed
  3262  0068  0824               	movf	??_GPS_read_speed,w
  3263  0069  07D8               	addwf	GPS_read_speed@i_buff,f
  3264  006A                     l2653:	
  3265                           
  3266                           ;main.c: 123: if (i_buff > 40)
  3267  006A  3029               	movlw	41
  3268  006B  0258               	subwf	GPS_read_speed@i_buff,w
  3269  006C  1803               	btfsc	3,0
  3270  006D  283D               	goto	l2655
  3271  006E  283E               	goto	l2657
  3272  006F                     l2659:	
  3273                           
  3274                           ;main.c: 128: }
  3275                           ;main.c: 129: }
  3276                           ;main.c: 130: }
  3277                           ;main.c: 131: }
  3278                           ;main.c: 133: unsigned char i_buff2 = 0;
  3279  006F  01D9               	clrf	GPS_read_speed@i_buff2
  3280                           
  3281                           ;main.c: 134: unsigned short read_speed_int = 0;
  3282  0070  01D6               	clrf	GPS_read_speed@read_speed_int
  3283  0071  01D7               	clrf	GPS_read_speed@read_speed_int+1
  3284                           
  3285                           ;main.c: 135: unsigned short read_speed_dec = 0;
  3286  0072  01CF               	clrf	GPS_read_speed@read_speed_dec
  3287  0073  01D0               	clrf	GPS_read_speed@read_speed_dec+1
  3288                           
  3289                           ;main.c: 137: if ((buffer[i_buff2++] == 'G')&&(buffer[i_buff2++] == 'P')&&(buffer[i_buff
      +                          2++] == 'V')&&(buffer[i_buff2++] == 'T')&&(buffer[i_buff2++] == 'G'))
  3290  0074  0859               	movf	GPS_read_speed@i_buff2,w
  3291  0075  0AD9               	incf	GPS_read_speed@i_buff2,f
  3292  0076  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3293  0077  0086               	movwf	6
  3294  0078  0187               	clrf	7
  3295  0079  3047               	movlw	71
  3296  007A  0601               	xorwf	1,w
  3297  007B  1D03               	btfss	3,2
  3298  007C  29CD               	goto	l2811
  3299  007D  0859               	movf	GPS_read_speed@i_buff2,w
  3300  007E  0AD9               	incf	GPS_read_speed@i_buff2,f
  3301  007F  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3302  0080  0086               	movwf	6
  3303  0081  0187               	clrf	7
  3304  0082  3050               	movlw	80
  3305  0083  0601               	xorwf	1,w
  3306  0084  1D03               	btfss	3,2
  3307  0085  29CD               	goto	l2811
  3308  0086  0859               	movf	GPS_read_speed@i_buff2,w
  3309  0087  0AD9               	incf	GPS_read_speed@i_buff2,f
  3310  0088  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3311  0089  0086               	movwf	6
  3312  008A  0187               	clrf	7
  3313  008B  3056               	movlw	86
  3314  008C  0601               	xorwf	1,w
  3315  008D  1D03               	btfss	3,2
  3316  008E  29CD               	goto	l2811
  3317  008F  0859               	movf	GPS_read_speed@i_buff2,w
  3318  0090  0AD9               	incf	GPS_read_speed@i_buff2,f
  3319  0091  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3320  0092  0086               	movwf	6
  3321  0093  0187               	clrf	7
  3322  0094  3054               	movlw	84
  3323  0095  0601               	xorwf	1,w
  3324  0096  1D03               	btfss	3,2
  3325  0097  29CD               	goto	l2811
  3326  0098  0859               	movf	GPS_read_speed@i_buff2,w
  3327  0099  0AD9               	incf	GPS_read_speed@i_buff2,f
  3328  009A  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3329  009B  0086               	movwf	6
  3330  009C  0187               	clrf	7
  3331  009D  3047               	movlw	71
  3332  009E  0601               	xorwf	1,w
  3333  009F  1903               	btfsc	3,2
  3334  00A0  28A6               	goto	l2675
  3335  00A1  29CD               	goto	l2811
  3336  00A2                     l2673:	
  3337                           ;main.c: 138: {
  3338                           ;main.c: 140: while ((i_buff2 < i_buff)&&(buffer[i_buff2]!=','))
  3339                           
  3340                           
  3341                           ;main.c: 141: i_buff2++;
  3342  00A2  3001               	movlw	1
  3343  00A3  00A4               	movwf	??_GPS_read_speed
  3344  00A4  0824               	movf	??_GPS_read_speed,w
  3345  00A5  07D9               	addwf	GPS_read_speed@i_buff2,f
  3346  00A6                     l2675:	
  3347  00A6  0858               	movf	GPS_read_speed@i_buff,w
  3348  00A7  0259               	subwf	GPS_read_speed@i_buff2,w
  3349  00A8  1803               	skipnc
  3350  00A9  28B2               	goto	l2679
  3351  00AA  0859               	movf	GPS_read_speed@i_buff2,w
  3352  00AB  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3353  00AC  0086               	movwf	6
  3354  00AD  0187               	clrf	7
  3355  00AE  302C               	movlw	44
  3356  00AF  0601               	xorwf	1,w
  3357  00B0  1D03               	btfss	3,2
  3358  00B1  28A2               	goto	l2673
  3359  00B2                     l2679:	
  3360                           
  3361                           ;main.c: 142: if (i_buff2 >= i_buff)
  3362  00B2  0858               	movf	GPS_read_speed@i_buff,w
  3363  00B3  0259               	subwf	GPS_read_speed@i_buff2,w
  3364  00B4  1C03               	skipc
  3365  00B5  28B8               	goto	l2685
  3366                           
  3367                           ;main.c: 143: return 0;
  3368  00B6  3000               	movlw	0
  3369  00B7  0008               	return
  3370  00B8                     l2685:	
  3371                           
  3372                           ;main.c: 144: i_buff2++;
  3373  00B8  3001               	movlw	1
  3374  00B9  00A4               	movwf	??_GPS_read_speed
  3375  00BA  0824               	movf	??_GPS_read_speed,w
  3376  00BB  07D9               	addwf	GPS_read_speed@i_buff2,f
  3377                           
  3378                           ;main.c: 145: if (buffer[i_buff2++] != 'T')
  3379  00BC  0859               	movf	GPS_read_speed@i_buff2,w
  3380  00BD  0AD9               	incf	GPS_read_speed@i_buff2,f
  3381  00BE  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3382  00BF  0086               	movwf	6
  3383  00C0  0187               	clrf	7
  3384  00C1  3054               	movlw	84
  3385  00C2  0601               	xorwf	1,w
  3386  00C3  1903               	btfsc	3,2
  3387  00C4  28C7               	goto	l2695
  3388                           
  3389                           ;main.c: 146: return 0;
  3390  00C5  3000               	movlw	0
  3391  00C6  0008               	return
  3392  00C7                     l2695:	
  3393                           ;main.c: 150: while ((i_buff2 < i_buff)&&(buffer[i_buff2]!=','))
  3394                           
  3395                           ;main.c: 147: i_buff2++;
  3396                           
  3397                           
  3398                           ;main.c: 151: i_buff2++;
  3399  00C7  3001               	movlw	1
  3400  00C8  00A4               	movwf	??_GPS_read_speed
  3401  00C9  0824               	movf	??_GPS_read_speed,w
  3402  00CA  07D9               	addwf	GPS_read_speed@i_buff2,f
  3403  00CB  0858               	movf	GPS_read_speed@i_buff,w
  3404  00CC  0259               	subwf	GPS_read_speed@i_buff2,w
  3405  00CD  1803               	skipnc
  3406  00CE  28D7               	goto	l2701
  3407  00CF  0859               	movf	GPS_read_speed@i_buff2,w
  3408  00D0  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3409  00D1  0086               	movwf	6
  3410  00D2  0187               	clrf	7
  3411  00D3  302C               	movlw	44
  3412  00D4  0601               	xorwf	1,w
  3413  00D5  1D03               	btfss	3,2
  3414  00D6  28C7               	goto	l2695
  3415  00D7                     l2701:	
  3416                           
  3417                           ;main.c: 152: if (i_buff2 >= i_buff)
  3418  00D7  0858               	movf	GPS_read_speed@i_buff,w
  3419  00D8  0259               	subwf	GPS_read_speed@i_buff2,w
  3420  00D9  1C03               	skipc
  3421  00DA  28DD               	goto	l2707
  3422                           
  3423                           ;main.c: 153: return 0;
  3424  00DB  3000               	movlw	0
  3425  00DC  0008               	return
  3426  00DD                     l2707:	
  3427                           
  3428                           ;main.c: 154: i_buff2++;
  3429  00DD  3001               	movlw	1
  3430  00DE  00A4               	movwf	??_GPS_read_speed
  3431  00DF  0824               	movf	??_GPS_read_speed,w
  3432  00E0  07D9               	addwf	GPS_read_speed@i_buff2,f
  3433                           
  3434                           ;main.c: 155: if (buffer[i_buff2++] != 'M')
  3435  00E1  0859               	movf	GPS_read_speed@i_buff2,w
  3436  00E2  0AD9               	incf	GPS_read_speed@i_buff2,f
  3437  00E3  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3438  00E4  0086               	movwf	6
  3439  00E5  0187               	clrf	7
  3440  00E6  304D               	movlw	77
  3441  00E7  0601               	xorwf	1,w
  3442  00E8  1903               	btfsc	3,2
  3443  00E9  28EC               	goto	l2717
  3444                           
  3445                           ;main.c: 156: return 0;
  3446  00EA  3000               	movlw	0
  3447  00EB  0008               	return
  3448  00EC                     l2717:	
  3449                           ;main.c: 160: while ((i_buff2 < i_buff)&&(buffer[i_buff2]!=','))
  3450                           
  3451                           ;main.c: 157: i_buff2++;
  3452                           
  3453                           
  3454                           ;main.c: 161: i_buff2++;
  3455  00EC  3001               	movlw	1
  3456  00ED  00A4               	movwf	??_GPS_read_speed
  3457  00EE  0824               	movf	??_GPS_read_speed,w
  3458  00EF  07D9               	addwf	GPS_read_speed@i_buff2,f
  3459  00F0  0858               	movf	GPS_read_speed@i_buff,w
  3460  00F1  0259               	subwf	GPS_read_speed@i_buff2,w
  3461  00F2  1803               	skipnc
  3462  00F3  28FC               	goto	l2723
  3463  00F4  0859               	movf	GPS_read_speed@i_buff2,w
  3464  00F5  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3465  00F6  0086               	movwf	6
  3466  00F7  0187               	clrf	7
  3467  00F8  302C               	movlw	44
  3468  00F9  0601               	xorwf	1,w
  3469  00FA  1D03               	btfss	3,2
  3470  00FB  28EC               	goto	l2717
  3471  00FC                     l2723:	
  3472                           
  3473                           ;main.c: 162: if (i_buff2 >= i_buff)
  3474  00FC  0858               	movf	GPS_read_speed@i_buff,w
  3475  00FD  0259               	subwf	GPS_read_speed@i_buff2,w
  3476  00FE  1C03               	skipc
  3477  00FF  2902               	goto	l2729
  3478                           
  3479                           ;main.c: 163: return 0;
  3480  0100  3000               	movlw	0
  3481  0101  0008               	return
  3482  0102                     l2729:	
  3483                           
  3484                           ;main.c: 164: i_buff2++;
  3485  0102  3001               	movlw	1
  3486  0103  00A4               	movwf	??_GPS_read_speed
  3487  0104  0824               	movf	??_GPS_read_speed,w
  3488  0105  07D9               	addwf	GPS_read_speed@i_buff2,f
  3489                           
  3490                           ;main.c: 165: if (buffer[i_buff2++] != 'N')
  3491  0106  0859               	movf	GPS_read_speed@i_buff2,w
  3492  0107  0AD9               	incf	GPS_read_speed@i_buff2,f
  3493  0108  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3494  0109  0086               	movwf	6
  3495  010A  0187               	clrf	7
  3496  010B  304E               	movlw	78
  3497  010C  0601               	xorwf	1,w
  3498  010D  1903               	btfsc	3,2
  3499  010E  2911               	goto	l2737
  3500                           
  3501                           ;main.c: 166: return 0;
  3502  010F  3000               	movlw	0
  3503  0110  0008               	return
  3504  0111                     l2737:	
  3505                           
  3506                           ;main.c: 167: i_buff2++;
  3507  0111  3001               	movlw	1
  3508  0112  00A4               	movwf	??_GPS_read_speed
  3509  0113  0824               	movf	??_GPS_read_speed,w
  3510  0114  07D9               	addwf	GPS_read_speed@i_buff2,f
  3511                           
  3512                           ;main.c: 170: bool before_dot = 1;
  3513  0115  01D2               	clrf	GPS_read_speed@before_dot
  3514  0116  0AD2               	incf	GPS_read_speed@before_dot,f
  3515                           
  3516                           ;main.c: 171: while ((i_buff2 < i_buff)&&(buffer[i_buff2]!=','))
  3517  0117  2972               	goto	l2765
  3518  0118                     l2741:	
  3519                           
  3520                           ;main.c: 172: if (buffer[i_buff2]=='.')
  3521  0118  0859               	movf	GPS_read_speed@i_buff2,w
  3522  0119  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3523  011A  0086               	movwf	6
  3524  011B  0187               	clrf	7
  3525  011C  302E               	movlw	46
  3526  011D  0601               	xorwf	1,w
  3527  011E  1D03               	btfss	3,2
  3528  011F  2922               	goto	l2747
  3529                           
  3530                           ;main.c: 173: {
  3531                           ;main.c: 174: before_dot = 0;
  3532  0120  01D2               	clrf	GPS_read_speed@before_dot
  3533  0121  296E               	goto	l2763
  3534  0122                     l2747:	
  3535                           ;main.c: 176: }
  3536                           
  3537                           ;main.c: 175: i_buff2++;
  3538                           
  3539                           
  3540                           ;main.c: 177: else
  3541                           ;main.c: 178: {
  3542                           ;main.c: 179: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  3543  0122  0859               	movf	GPS_read_speed@i_buff2,w
  3544  0123  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3545  0124  0086               	movwf	6
  3546  0125  0187               	clrf	7
  3547  0126  3030               	movlw	48
  3548  0127  0201               	subwf	1,w
  3549  0128  1C03               	skipc
  3550  0129  2932               	goto	l2751
  3551  012A  0859               	movf	GPS_read_speed@i_buff2,w
  3552  012B  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3553  012C  0086               	movwf	6
  3554  012D  0187               	clrf	7
  3555  012E  303A               	movlw	58
  3556  012F  0201               	subwf	1,w
  3557  0130  1C03               	skipc
  3558  0131  2934               	goto	l2757
  3559  0132                     l2751:	
  3560                           
  3561                           ;main.c: 180: return 0;
  3562  0132  3000               	movlw	0
  3563  0133  0008               	return
  3564  0134                     l2757:	
  3565                           
  3566                           ;main.c: 181: else
  3567                           ;main.c: 182: {
  3568                           ;main.c: 189: if (before_dot)
  3569  0134  0852               	movf	GPS_read_speed@before_dot,w
  3570  0135  1903               	btfsc	3,2
  3571  0136  2953               	goto	l2761
  3572                           
  3573                           ;main.c: 191: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  3574  0137  0857               	movf	GPS_read_speed@read_speed_int+1,w
  3575  0138  00A1               	movwf	___wmul@multiplier+1
  3576  0139  0856               	movf	GPS_read_speed@read_speed_int,w
  3577  013A  00A0               	movwf	___wmul@multiplier
  3578  013B  300A               	movlw	10
  3579  013C  00A2               	movwf	___wmul@multiplicand
  3580  013D  3000               	movlw	0
  3581  013E  00A3               	movwf	___wmul@multiplicand+1
  3582  013F  2496               	fcall	___wmul
  3583  0140  0020               	movlb	0	; select bank0
  3584  0141  0859               	movf	GPS_read_speed@i_buff2,w
  3585  0142  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3586  0143  0086               	movwf	6
  3587  0144  0187               	clrf	7
  3588  0145  0801               	movf	1,w
  3589  0146  0720               	addwf	?___wmul,w
  3590  0147  00A4               	movwf	??_GPS_read_speed
  3591  0148  0821               	movf	?___wmul+1,w
  3592  0149  1803               	skipnc
  3593  014A  0A21               	incf	?___wmul+1,w
  3594  014B  00A5               	movwf	??_GPS_read_speed+1
  3595  014C  0824               	movf	??_GPS_read_speed,w
  3596  014D  3ED0               	addlw	208
  3597  014E  00D6               	movwf	GPS_read_speed@read_speed_int
  3598  014F  30FF               	movlw	255
  3599  0150  3D25               	addwfc	??_GPS_read_speed+1,w
  3600  0151  00D7               	movwf	GPS_read_speed@read_speed_int+1
  3601  0152  296E               	goto	l2763
  3602  0153                     l2761:	
  3603                           
  3604                           ;main.c: 192: else
  3605                           ;main.c: 193: {
  3606                           ;main.c: 195: read_speed_dec = read_speed_int*10 + (buffer[i_buff2]-0x30);
  3607  0153  0857               	movf	GPS_read_speed@read_speed_int+1,w
  3608  0154  00A1               	movwf	___wmul@multiplier+1
  3609  0155  0856               	movf	GPS_read_speed@read_speed_int,w
  3610  0156  00A0               	movwf	___wmul@multiplier
  3611  0157  300A               	movlw	10
  3612  0158  00A2               	movwf	___wmul@multiplicand
  3613  0159  3000               	movlw	0
  3614  015A  00A3               	movwf	___wmul@multiplicand+1
  3615  015B  2496               	fcall	___wmul
  3616  015C  0020               	movlb	0	; select bank0
  3617  015D  0859               	movf	GPS_read_speed@i_buff2,w
  3618  015E  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3619  015F  0086               	movwf	6
  3620  0160  0187               	clrf	7
  3621  0161  0801               	movf	1,w
  3622  0162  0720               	addwf	?___wmul,w
  3623  0163  00A4               	movwf	??_GPS_read_speed
  3624  0164  0821               	movf	?___wmul+1,w
  3625  0165  1803               	skipnc
  3626  0166  0A21               	incf	?___wmul+1,w
  3627  0167  00A5               	movwf	??_GPS_read_speed+1
  3628  0168  0824               	movf	??_GPS_read_speed,w
  3629  0169  3ED0               	addlw	208
  3630  016A  00CF               	movwf	GPS_read_speed@read_speed_dec
  3631  016B  30FF               	movlw	255
  3632  016C  3D25               	addwfc	??_GPS_read_speed+1,w
  3633  016D  00D0               	movwf	GPS_read_speed@read_speed_dec+1
  3634  016E                     l2763:	
  3635                           
  3636                           ;main.c: 196: }
  3637                           ;main.c: 197: i_buff2++;
  3638  016E  3001               	movlw	1
  3639  016F  00A4               	movwf	??_GPS_read_speed
  3640  0170  0824               	movf	??_GPS_read_speed,w
  3641  0171  07D9               	addwf	GPS_read_speed@i_buff2,f
  3642  0172                     l2765:	
  3643  0172  0858               	movf	GPS_read_speed@i_buff,w
  3644  0173  0259               	subwf	GPS_read_speed@i_buff2,w
  3645  0174  1803               	skipnc
  3646  0175  297E               	goto	l2769
  3647  0176  0859               	movf	GPS_read_speed@i_buff2,w
  3648  0177  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3649  0178  0086               	movwf	6
  3650  0179  0187               	clrf	7
  3651  017A  302C               	movlw	44
  3652  017B  0601               	xorwf	1,w
  3653  017C  1D03               	btfss	3,2
  3654  017D  2918               	goto	l2741
  3655  017E                     l2769:	
  3656                           
  3657                           ;main.c: 198: }
  3658                           ;main.c: 199: }
  3659                           ;main.c: 200: if (i_buff2 >= i_buff)
  3660  017E  0858               	movf	GPS_read_speed@i_buff,w
  3661  017F  0259               	subwf	GPS_read_speed@i_buff2,w
  3662  0180  1C03               	skipc
  3663  0181  2984               	goto	l2775
  3664                           
  3665                           ;main.c: 201: return 0;
  3666  0182  3000               	movlw	0
  3667  0183  0008               	return
  3668  0184                     l2775:	
  3669                           
  3670                           ;main.c: 202: i_buff2++;
  3671  0184  3001               	movlw	1
  3672  0185  00A4               	movwf	??_GPS_read_speed
  3673  0186  0824               	movf	??_GPS_read_speed,w
  3674  0187  07D9               	addwf	GPS_read_speed@i_buff2,f
  3675                           
  3676                           ;main.c: 203: if (buffer[i_buff2++] != 'M')
  3677  0188  0859               	movf	GPS_read_speed@i_buff2,w
  3678  0189  0AD9               	incf	GPS_read_speed@i_buff2,f
  3679  018A  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3680  018B  0086               	movwf	6
  3681  018C  0187               	clrf	7
  3682  018D  304D               	movlw	77
  3683  018E  0601               	xorwf	1,w
  3684  018F  1903               	btfsc	3,2
  3685  0190  2993               	goto	l2785
  3686                           
  3687                           ;main.c: 204: return 0;
  3688  0191  3000               	movlw	0
  3689  0192  0008               	return
  3690  0193                     l2785:	
  3691                           ;main.c: 208: while ((i_buff2 < i_buff)&&(buffer[i_buff2]!='*'))
  3692                           
  3693                           ;main.c: 205: i_buff2++;
  3694                           
  3695                           
  3696                           ;main.c: 209: i_buff2++;
  3697  0193  3001               	movlw	1
  3698  0194  00A4               	movwf	??_GPS_read_speed
  3699  0195  0824               	movf	??_GPS_read_speed,w
  3700  0196  07D9               	addwf	GPS_read_speed@i_buff2,f
  3701  0197  0858               	movf	GPS_read_speed@i_buff,w
  3702  0198  0259               	subwf	GPS_read_speed@i_buff2,w
  3703  0199  1803               	skipnc
  3704  019A  29A3               	goto	l2791
  3705  019B  0859               	movf	GPS_read_speed@i_buff2,w
  3706  019C  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3707  019D  0086               	movwf	6
  3708  019E  0187               	clrf	7
  3709  019F  302A               	movlw	42
  3710  01A0  0601               	xorwf	1,w
  3711  01A1  1D03               	btfss	3,2
  3712  01A2  2993               	goto	l2785
  3713  01A3                     l2791:	
  3714                           
  3715                           ;main.c: 210: if (i_buff2 >= i_buff)
  3716  01A3  0858               	movf	GPS_read_speed@i_buff,w
  3717  01A4  0259               	subwf	GPS_read_speed@i_buff2,w
  3718  01A5  1C03               	skipc
  3719  01A6  29A9               	goto	l2797
  3720                           
  3721                           ;main.c: 211: return 0;
  3722  01A7  3000               	movlw	0
  3723  01A8  0008               	return
  3724  01A9                     l2797:	
  3725                           
  3726                           ;main.c: 212: unsigned char checksum = 0;
  3727  01A9  01CE               	clrf	GPS_read_speed@checksum
  3728                           
  3729                           ;main.c: 213: for (unsigned char i=0;i<i_buff2;i++)
  3730  01AA  01D4               	clrf	GPS_read_speed@i
  3731  01AB                     l2803:	
  3732  01AB  0859               	movf	GPS_read_speed@i_buff2,w
  3733  01AC  0254               	subwf	GPS_read_speed@i,w
  3734  01AD  1803               	btfsc	3,0
  3735  01AE  29BC               	goto	l2805
  3736                           
  3737                           ;main.c: 214: checksum ^= buffer[i];
  3738  01AF  0854               	movf	GPS_read_speed@i,w
  3739  01B0  3E26               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3740  01B1  0086               	movwf	6
  3741  01B2  0187               	clrf	7
  3742  01B3  0801               	movf	1,w
  3743  01B4  00A4               	movwf	??_GPS_read_speed
  3744  01B5  0824               	movf	??_GPS_read_speed,w
  3745  01B6  06CE               	xorwf	GPS_read_speed@checksum,f
  3746  01B7  3001               	movlw	1
  3747  01B8  00A4               	movwf	??_GPS_read_speed
  3748  01B9  0824               	movf	??_GPS_read_speed,w
  3749  01BA  07D4               	addwf	GPS_read_speed@i,f
  3750  01BB  29AB               	goto	l2803
  3751  01BC                     l2805:	
  3752                           
  3753                           ;main.c: 220: speed_int = read_speed_int;
  3754  01BC  0857               	movf	GPS_read_speed@read_speed_int+1,w
  3755  01BD  0021               	movlb	1	; select bank1
  3756  01BE  00B7               	movwf	(_speed_int+1)^(0+128)
  3757  01BF  0020               	movlb	0	; select bank0
  3758  01C0  0856               	movf	GPS_read_speed@read_speed_int,w
  3759  01C1  0021               	movlb	1	; select bank1
  3760  01C2  00B6               	movwf	_speed_int^(0+128)
  3761                           
  3762                           ;main.c: 221: speed_dec = read_speed_dec;
  3763  01C3  0020               	movlb	0	; select bank0
  3764  01C4  0850               	movf	GPS_read_speed@read_speed_dec+1,w
  3765  01C5  0021               	movlb	1	; select bank1
  3766  01C6  00B5               	movwf	(_speed_dec+1)^(0+128)
  3767  01C7  0020               	movlb	0	; select bank0
  3768  01C8  084F               	movf	GPS_read_speed@read_speed_dec,w
  3769  01C9  0021               	movlb	1	; select bank1
  3770  01CA  00B4               	movwf	_speed_dec^(0+128)
  3771                           
  3772                           ;main.c: 222: return 1;
  3773  01CB  3001               	movlw	1
  3774                           
  3775                           ;main.c: 223: }
  3776  01CC  0008               	return
  3777  01CD                     l2811:	
  3778                           
  3779                           ;main.c: 224: else return 0;
  3780  01CD  3000               	movlw	0
  3781  01CE  0008               	return
  3782  01CF                     __end_of_GPS_read_speed:	
  3783                           
  3784                           	psect	text13
  3785  0496                     __ptext13:	
  3786 ;; *************** function ___wmul *****************
  3787 ;; Defined at:
  3788 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3791 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  product         2    4[COMMON] unsigned int 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  2    0[BANK0 ] unsigned int 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMMON   BANK0   BANK1
  3803 ;;      Params:         0       4       0
  3804 ;;      Locals:         2       0       0
  3805 ;;      Temps:          0       0       0
  3806 ;;      Totals:         2       4       0
  3807 ;;Total ram usage:        6 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    5
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_GPS_read_speed
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           
  3818                           ;psect for function ___wmul
  3819  0496                     ___wmul:	
  3820                           
  3821                           ;incstack = 0
  3822                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3823  0496  01F4               	clrf	___wmul@product
  3824  0497  01F5               	clrf	___wmul@product+1
  3825  0498                     l2593:	
  3826  0498  0020               	movlb	0	; select bank0
  3827  0499  1C20               	btfss	___wmul@multiplier,0
  3828  049A  2C9F               	goto	l617
  3829  049B  0822               	movf	___wmul@multiplicand,w
  3830  049C  07F4               	addwf	___wmul@product,f
  3831  049D  0823               	movf	___wmul@multiplicand+1,w
  3832  049E  3DF5               	addwfc	___wmul@product+1,f
  3833  049F                     l617:	
  3834  049F  3001               	movlw	1
  3835  04A0                     u2235:	
  3836  04A0  35A2               	lslf	___wmul@multiplicand,f
  3837  04A1  0DA3               	rlf	___wmul@multiplicand+1,f
  3838  04A2  0B89               	decfsz	9,f
  3839  04A3  2CA0               	goto	u2235
  3840  04A4  3001               	movlw	1
  3841  04A5                     u2245:	
  3842  04A5  36A1               	lsrf	___wmul@multiplier+1,f
  3843  04A6  0CA0               	rrf	___wmul@multiplier,f
  3844  04A7  0B89               	decfsz	9,f
  3845  04A8  2CA5               	goto	u2245
  3846  04A9  0820               	movf	___wmul@multiplier,w
  3847  04AA  0421               	iorwf	___wmul@multiplier+1,w
  3848  04AB  1D03               	btfss	3,2
  3849  04AC  2C98               	goto	l2593
  3850  04AD  0875               	movf	___wmul@product+1,w
  3851  04AE  00A1               	movwf	?___wmul+1
  3852  04AF  0874               	movf	___wmul@product,w
  3853  04B0  00A0               	movwf	?___wmul
  3854  04B1  0008               	return
  3855  04B2                     __end_of___wmul:	
  3856                           
  3857                           	psect	text14
  3858  045A                     __ptext14:	
  3859 ;; *************** function _EUSART_Read *****************
  3860 ;; Defined at:
  3861 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;		None
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  readValue       1    5[COMMON] unsigned char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      unsigned char 
  3868 ;; Registers used:
  3869 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMMON   BANK0   BANK1
  3875 ;;      Params:         0       0       0
  3876 ;;      Locals:         1       0       0
  3877 ;;      Temps:          1       0       0
  3878 ;;      Totals:         2       0       0
  3879 ;;Total ram usage:        2 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    5
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_GPS_read_speed
  3886 ;;		_getch
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _EUSART_Read
  3892  045A                     _EUSART_Read:	
  3893                           
  3894                           ;eusart.c: 114: uint8_t readValue = 0;
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3898  045A  01F5               	clrf	EUSART_Read@readValue
  3899                           
  3900                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  3901  045B  0023               	movlb	3	; select bank3
  3902  045C  169D               	bsf	29,5	;volatile
  3903  045D                     l2523:	
  3904                           ;eusart.c: 120: {
  3905                           
  3906                           ;eusart.c: 119: while(0 == eusartRxCount)
  3907                           
  3908  045D  0878               	movf	_eusartRxCount,w	;volatile
  3909  045E  1903               	btfsc	3,2
  3910  045F  2C5D               	goto	l2523
  3911                           
  3912                           ;eusart.c: 121: }
  3913                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  3914  0460  0021               	movlb	1	; select bank1
  3915  0461  1291               	bcf	17,5	;volatile
  3916                           
  3917                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  3918  0462  0020               	movlb	0	; select bank0
  3919  0463  086B               	movf	_eusartRxTail,w
  3920  0464  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3921  0465  0086               	movwf	6
  3922  0466  0187               	clrf	7
  3923  0467  0801               	movf	1,w
  3924  0468  00F4               	movwf	??_EUSART_Read
  3925  0469  0874               	movf	??_EUSART_Read,w
  3926  046A  00F5               	movwf	EUSART_Read@readValue
  3927  046B  3001               	movlw	1
  3928  046C  00F4               	movwf	??_EUSART_Read
  3929  046D  0874               	movf	??_EUSART_Read,w
  3930  046E  07EB               	addwf	_eusartRxTail,f
  3931                           
  3932                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3933  046F  3008               	movlw	8
  3934  0470  026B               	subwf	_eusartRxTail,w
  3935  0471  1803               	btfsc	3,0
  3936                           
  3937                           ;eusart.c: 127: {
  3938                           ;eusart.c: 128: eusartRxTail = 0;
  3939  0472  01EB               	clrf	_eusartRxTail
  3940                           
  3941                           ;eusart.c: 129: }
  3942                           ;eusart.c: 130: eusartRxCount--;
  3943  0473  3001               	movlw	1
  3944  0474  02F8               	subwf	_eusartRxCount,f	;volatile
  3945                           
  3946                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  3947  0475  0021               	movlb	1	; select bank1
  3948  0476  1691               	bsf	17,5	;volatile
  3949                           
  3950                           ;eusart.c: 133: return readValue;
  3951  0477  0875               	movf	EUSART_Read@readValue,w
  3952  0478  0008               	return
  3953  0479                     __end_of_EUSART_Read:	
  3954                           
  3955                           	psect	text15
  3956  03D3                     __ptext15:	
  3957 ;; *************** function _GPS_Initialize *****************
  3958 ;; Defined at:
  3959 ;;		line 70 in file "main.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  tmp             1   11[BANK0 ] unsigned char 
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1
  3973 ;;      Params:         0       0       0
  3974 ;;      Locals:         0       1       0
  3975 ;;      Temps:          0       3       0
  3976 ;;      Totals:         0       4       0
  3977 ;;Total ram usage:        4 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    8
  3980 ;; This function calls:
  3981 ;;		_printf
  3982 ;; This function is called by:
  3983 ;;		_main
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           
  3988                           ;psect for function _GPS_Initialize
  3989  03D3                     _GPS_Initialize:	
  3990                           
  3991                           ;main.c: 72: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  3992                           
  3993                           ;incstack = 0
  3994                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3995  03D3  0020               	movlb	0	; select bank0
  3996  03D4  01AB               	clrf	GPS_Initialize@tmp
  3997  03D5  300A               	movlw	10
  3998  03D6  022B               	subwf	GPS_Initialize@tmp,w
  3999  03D7  1803               	btfsc	3,0
  4000  03D8  2BEE               	goto	l2621
  4001  03D9                     l2615:	
  4002  03D9  3005               	movlw	5
  4003  03DA  00AA               	movwf	??_GPS_Initialize+2
  4004  03DB  300F               	movlw	15
  4005  03DC  00A9               	movwf	??_GPS_Initialize+1
  4006  03DD  30F4               	movlw	244
  4007  03DE  00A8               	movwf	??_GPS_Initialize
  4008  03DF                     u3007:	
  4009  03DF  0BA8               	decfsz	??_GPS_Initialize,f
  4010  03E0  2BDF               	goto	u3007
  4011  03E1  0BA9               	decfsz	??_GPS_Initialize+1,f
  4012  03E2  2BDF               	goto	u3007
  4013  03E3  0BAA               	decfsz	??_GPS_Initialize+2,f
  4014  03E4  2BDF               	goto	u3007
  4015  03E5  3001               	movlw	1
  4016  03E6  0020               	movlb	0	; select bank0
  4017  03E7  00A8               	movwf	??_GPS_Initialize
  4018  03E8  0828               	movf	??_GPS_Initialize,w
  4019  03E9  07AB               	addwf	GPS_Initialize@tmp,f
  4020  03EA  300A               	movlw	10
  4021  03EB  022B               	subwf	GPS_Initialize@tmp,w
  4022  03EC  1C03               	skipc
  4023  03ED  2BD9               	goto	l2615
  4024  03EE                     l2621:	
  4025                           
  4026                           ;main.c: 74: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  4027  03EE  308D               	movlw	low (STR_1| (0+32768))
  4028  03EF  00A1               	movwf	printf@f
  4029  03F0  3083               	movlw	high (STR_1| (0+32768))
  4030  03F1  00A2               	movwf	printf@f+1
  4031  03F2  24E9               	fcall	_printf
  4032                           
  4033                           ;main.c: 75: _delay((unsigned long)((100)*(32000000/4000.0)));
  4034  03F3  3005               	movlw	5
  4035  03F4  0020               	movlb	0	; select bank0
  4036  03F5  00AA               	movwf	??_GPS_Initialize+2
  4037  03F6  300F               	movlw	15
  4038  03F7  00A9               	movwf	??_GPS_Initialize+1
  4039  03F8  30F4               	movlw	244
  4040  03F9  00A8               	movwf	??_GPS_Initialize
  4041  03FA                     u3017:	
  4042  03FA  0BA8               	decfsz	??_GPS_Initialize,f
  4043  03FB  2BFA               	goto	u3017
  4044  03FC  0BA9               	decfsz	??_GPS_Initialize+1,f
  4045  03FD  2BFA               	goto	u3017
  4046  03FE  0BAA               	decfsz	??_GPS_Initialize+2,f
  4047  03FF  2BFA               	goto	u3017
  4048                           
  4049                           ;main.c: 76: printf("$PMTK220,100*2F\r\n");
  4050  0400  30C1               	movlw	low (STR_2| (0+32768))
  4051  0401  0020               	movlb	0	; select bank0
  4052  0402  00A1               	movwf	printf@f
  4053  0403  3083               	movlw	high (STR_2| (0+32768))
  4054  0404  00A2               	movwf	printf@f+1
  4055  0405  24E9               	fcall	_printf
  4056                           
  4057                           ;main.c: 77: _delay((unsigned long)((100)*(32000000/4000.0)));
  4058  0406  3005               	movlw	5
  4059  0407  0020               	movlb	0	; select bank0
  4060  0408  00AA               	movwf	??_GPS_Initialize+2
  4061  0409  300F               	movlw	15
  4062  040A  00A9               	movwf	??_GPS_Initialize+1
  4063  040B  30F4               	movlw	244
  4064  040C  00A8               	movwf	??_GPS_Initialize
  4065  040D                     u3027:	
  4066  040D  0BA8               	decfsz	??_GPS_Initialize,f
  4067  040E  2C0D               	goto	u3027
  4068  040F  0BA9               	decfsz	??_GPS_Initialize+1,f
  4069  0410  2C0D               	goto	u3027
  4070  0411  0BAA               	decfsz	??_GPS_Initialize+2,f
  4071  0412  2C0D               	goto	u3027
  4072  0413  0008               	return
  4073  0414                     __end_of_GPS_Initialize:	
  4074                           
  4075                           	psect	text16
  4076  04E9                     __ptext16:	
  4077 ;; *************** function _printf *****************
  4078 ;; Defined at:
  4079 ;;		line 464 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  f               2    1[BANK0 ] PTR const unsigned char 
  4082 ;;		 -> STR_2(18), STR_1(52), 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  tmpval          4    0        struct .
  4085 ;;  cp              2    0        PTR const unsigned char 
  4086 ;;  len             2    0        unsigned int 
  4087 ;;  val             2    0        unsigned int 
  4088 ;;  c               1    7[BANK0 ] char 
  4089 ;;  ap              1    6[BANK0 ] PTR void [1]
  4090 ;;		 -> ?_printf(2), 
  4091 ;;  flag            1    0        unsigned char 
  4092 ;;  prec            1    0        char 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  2    1[BANK0 ] int 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1
  4102 ;;      Params:         0       2       0
  4103 ;;      Locals:         0       2       0
  4104 ;;      Temps:          0       3       0
  4105 ;;      Totals:         0       7       0
  4106 ;;Total ram usage:        7 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    7
  4109 ;; This function calls:
  4110 ;;		_putch
  4111 ;; This function is called by:
  4112 ;;		_GPS_Initialize
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _printf
  4118  04E9                     _printf:	
  4119                           
  4120                           ;doprnt.c: 466: va_list ap;
  4121                           ;doprnt.c: 499: signed char c;
  4122                           ;doprnt.c: 506: signed char prec;
  4123                           ;doprnt.c: 508: unsigned char flag;
  4124                           ;doprnt.c: 523: union {
  4125                           ;doprnt.c: 524: unsigned long vd;
  4126                           ;doprnt.c: 525: double integ;
  4127                           ;doprnt.c: 526: } tmpval;
  4128                           ;doprnt.c: 528: unsigned int val;
  4129                           ;doprnt.c: 529: unsigned len;
  4130                           ;doprnt.c: 530: const char * cp;
  4131                           ;doprnt.c: 533: *ap = __va_start();
  4132                           
  4133                           ;incstack = 0
  4134                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4135  04E9  3023               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4136  04EA  0020               	movlb	0	; select bank0
  4137  04EB  00A3               	movwf	??_printf
  4138  04EC  0823               	movf	??_printf,w
  4139  04ED  00A6               	movwf	printf@ap
  4140  04EE                     l2589:	
  4141                           ;doprnt.c: 543: }
  4142                           ;doprnt.c: 1422: {
  4143                           
  4144                           ;doprnt.c: 542: continue;
  4145                           
  4146                           ;doprnt.c: 536: while(c = *f++) {
  4147                           
  4148  04EE  0020               	movlb	0	; select bank0
  4149  04EF  0822               	movf	printf@f+1,w
  4150  04F0  00A4               	movwf	??_printf+1
  4151  04F1  0821               	movf	printf@f,w
  4152  04F2  00A3               	movwf	??_printf
  4153  04F3  0AA1               	incf	printf@f,f
  4154  04F4  1903               	skipnz
  4155  04F5  0AA2               	incf	printf@f+1,f
  4156  04F6  0823               	movf	??_printf,w
  4157  04F7  0084               	movwf	4
  4158  04F8  0824               	movf	??_printf+1,w
  4159  04F9  0085               	movwf	5
  4160  04FA  0800               	movf	0,w	;code access
  4161  04FB  00A5               	movwf	??_printf+2
  4162  04FC  0825               	movf	??_printf+2,w
  4163  04FD  00A7               	movwf	printf@c
  4164  04FE  0827               	movf	printf@c,w
  4165  04FF  1903               	btfsc	3,2
  4166  0500  0008               	return
  4167                           
  4168                           ;doprnt.c: 540: {
  4169                           ;doprnt.c: 541: (putch(c) );
  4170  0501  0827               	movf	printf@c,w
  4171  0502  25C5               	fcall	_putch
  4172  0503  2CEE               	goto	l2589
  4173  0504                     __end_of_printf:	
  4174                           ;doprnt.c: 1469: }
  4175                           ;doprnt.c: 1533: }
  4176                           ;doprnt.c: 1540: return 0;
  4177                           ;	Return value of _printf is never used
  4178                           
  4179                           
  4180                           	psect	text17
  4181  05C5                     __ptext17:	
  4182 ;; *************** function _putch *****************
  4183 ;; Defined at:
  4184 ;;		line 164 in file "mcc_generated_files/eusart.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  txData          1    wreg     unsigned char 
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  txData          1    0[BANK0 ] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      void 
  4191 ;; Registers used:
  4192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1
  4198 ;;      Params:         0       0       0
  4199 ;;      Locals:         0       1       0
  4200 ;;      Temps:          0       0       0
  4201 ;;      Totals:         0       1       0
  4202 ;;Total ram usage:        1 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    6
  4205 ;; This function calls:
  4206 ;;		_EUSART_Write
  4207 ;; This function is called by:
  4208 ;;		_printf
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _putch
  4214  05C5                     _putch:	
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4218                           ;putch@txData stored from wreg
  4219  05C5  0020               	movlb	0	; select bank0
  4220  05C6  00A0               	movwf	putch@txData
  4221                           
  4222                           ;eusart.c: 166: EUSART_Write(txData);
  4223  05C7  0820               	movf	putch@txData,w
  4224  05C8  2438               	fcall	_EUSART_Write
  4225  05C9  0008               	return
  4226  05CA                     __end_of_putch:	
  4227                           
  4228                           	psect	text18
  4229  0438                     __ptext18:	
  4230 ;; *************** function _EUSART_Write *****************
  4231 ;; Defined at:
  4232 ;;		line 136 in file "mcc_generated_files/eusart.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  txData          1    wreg     unsigned char 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  txData          1    5[COMMON] unsigned char 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMMON   BANK0   BANK1
  4246 ;;      Params:         0       0       0
  4247 ;;      Locals:         1       0       0
  4248 ;;      Temps:          1       0       0
  4249 ;;      Totals:         2       0       0
  4250 ;;Total ram usage:        2 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    5
  4253 ;; This function calls:
  4254 ;;		Nothing
  4255 ;; This function is called by:
  4256 ;;		_putch
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           
  4261                           ;psect for function _EUSART_Write
  4262  0438                     _EUSART_Write:	
  4263                           
  4264                           ;incstack = 0
  4265                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4266                           ;EUSART_Write@txData stored from wreg
  4267  0438  00F5               	movwf	EUSART_Write@txData
  4268  0439                     l2473:	
  4269                           ;eusart.c: 139: {
  4270                           
  4271                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  4272                           
  4273  0439  0879               	movf	_eusartTxBufferRemaining,w	;volatile
  4274  043A  1903               	btfsc	3,2
  4275  043B  2C39               	goto	l2473
  4276                           
  4277                           ;eusart.c: 140: }
  4278                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  4279  043C  0021               	movlb	1	; select bank1
  4280  043D  1A11               	btfsc	17,4	;volatile
  4281  043E  2C43               	goto	l131
  4282                           
  4283                           ;eusart.c: 143: {
  4284                           ;eusart.c: 144: TXREG = txData;
  4285  043F  0875               	movf	EUSART_Write@txData,w
  4286  0440  0023               	movlb	3	; select bank3
  4287  0441  009A               	movwf	26	;volatile
  4288                           
  4289                           ;eusart.c: 145: }
  4290  0442  2C57               	goto	l2487
  4291  0443                     l131:	
  4292                           
  4293                           ;eusart.c: 146: else
  4294                           ;eusart.c: 147: {
  4295                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  4296  0443  1211               	bcf	17,4	;volatile
  4297                           
  4298                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  4299  0444  0875               	movf	EUSART_Write@txData,w
  4300  0445  00F4               	movwf	??_EUSART_Write
  4301  0446  0020               	movlb	0	; select bank0
  4302  0447  086C               	movf	_eusartTxHead,w
  4303  0448  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4304  0449  0086               	movwf	6
  4305  044A  0187               	clrf	7
  4306  044B  0874               	movf	??_EUSART_Write,w
  4307  044C  0081               	movwf	1
  4308  044D  3001               	movlw	1
  4309  044E  00F4               	movwf	??_EUSART_Write
  4310  044F  0874               	movf	??_EUSART_Write,w
  4311  0450  07EC               	addwf	_eusartTxHead,f
  4312                           
  4313                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4314  0451  3008               	movlw	8
  4315  0452  026C               	subwf	_eusartTxHead,w
  4316  0453  1803               	btfsc	3,0
  4317                           
  4318                           ;eusart.c: 151: {
  4319                           ;eusart.c: 152: eusartTxHead = 0;
  4320  0454  01EC               	clrf	_eusartTxHead
  4321                           
  4322                           ;eusart.c: 153: }
  4323                           ;eusart.c: 154: eusartTxBufferRemaining--;
  4324  0455  3001               	movlw	1
  4325  0456  02F9               	subwf	_eusartTxBufferRemaining,f	;volatile
  4326  0457                     l2487:	
  4327                           
  4328                           ;eusart.c: 155: }
  4329                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  4330  0457  0021               	movlb	1	; select bank1
  4331  0458  1611               	bsf	17,4	;volatile
  4332  0459  0008               	return
  4333  045A                     __end_of_EUSART_Write:	
  4334                           
  4335                           	psect	text19
  4336  04B2                     __ptext19:	
  4337 ;; *************** function _EPWM_LoadDutyValue *****************
  4338 ;; Defined at:
  4339 ;;		line 87 in file "mcc_generated_files/epwm.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  dutyValue       2    4[COMMON] unsigned int 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1
  4353 ;;      Params:         2       0       0
  4354 ;;      Locals:         0       0       0
  4355 ;;      Temps:          0       2       0
  4356 ;;      Totals:         2       2       0
  4357 ;;Total ram usage:        4 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    5
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _EPWM_LoadDutyValue
  4369  04B2                     _EPWM_LoadDutyValue:	
  4370                           
  4371                           ;epwm.c: 90: CCPR1L = ((dutyValue & 0x03FC)>>2);
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _EPWM_LoadDutyValue: [wreg+status,2+status,0]
  4375  04B2  0875               	movf	EPWM_LoadDutyValue@dutyValue+1,w
  4376  04B3  0020               	movlb	0	; select bank0
  4377  04B4  00A1               	movwf	??_EPWM_LoadDutyValue+1
  4378  04B5  0874               	movf	EPWM_LoadDutyValue@dutyValue,w
  4379  04B6  00A0               	movwf	??_EPWM_LoadDutyValue
  4380  04B7  36A1               	lsrf	??_EPWM_LoadDutyValue+1,f
  4381  04B8  0CA0               	rrf	??_EPWM_LoadDutyValue,f
  4382  04B9  36A1               	lsrf	??_EPWM_LoadDutyValue+1,f
  4383  04BA  0CA0               	rrf	??_EPWM_LoadDutyValue,f
  4384  04BB  0820               	movf	??_EPWM_LoadDutyValue,w
  4385  04BC  0025               	movlb	5	; select bank5
  4386  04BD  0091               	movwf	17	;volatile
  4387                           
  4388                           ;epwm.c: 93: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  4389  04BE  0874               	movf	EPWM_LoadDutyValue@dutyValue,w
  4390  04BF  3903               	andlw	3
  4391  04C0  0020               	movlb	0	; select bank0
  4392  04C1  00A0               	movwf	??_EPWM_LoadDutyValue
  4393  04C2  3004               	movlw	4
  4394  04C3                     u2265:	
  4395  04C3  35A0               	lslf	??_EPWM_LoadDutyValue,f
  4396  04C4  0B89               	decfsz	9,f
  4397  04C5  2CC3               	goto	u2265
  4398  04C6  0025               	movlb	5	; select bank5
  4399  04C7  0813               	movf	19,w	;volatile
  4400  04C8  39CF               	andlw	207
  4401  04C9  0020               	movlb	0	; select bank0
  4402  04CA  0420               	iorwf	??_EPWM_LoadDutyValue,w
  4403  04CB  0025               	movlb	5	; select bank5
  4404  04CC  0093               	movwf	19	;volatile
  4405  04CD  0008               	return
  4406  04CE                     __end_of_EPWM_LoadDutyValue:	
  4407                           
  4408                           	psect	intentry
  4409  0004                     __pintentry:	
  4410 ;; *************** function _INTERRUPT_InterruptManager *****************
  4411 ;; Defined at:
  4412 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMMON   BANK0   BANK1
  4426 ;;      Params:         0       0       0
  4427 ;;      Locals:         0       0       0
  4428 ;;      Temps:          1       0       0
  4429 ;;      Totals:         1       0       0
  4430 ;;Total ram usage:        1 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    4
  4433 ;; This function calls:
  4434 ;;		_EUSART_Receive_ISR
  4435 ;;		_EUSART_Transmit_ISR
  4436 ;;		_TMR0_ISR
  4437 ;; This function is called by:
  4438 ;;		Interrupt level 1
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442  0004                     _INTERRUPT_InterruptManager:	
  4443                           
  4444                           ;incstack = 0
  4445  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4446                           
  4447                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4448  0005  3180               	pagesel	$
  4449  0006  0020               	movlb	0	; select bank0
  4450  0007  087F               	movf	127,w
  4451  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  4452                           
  4453                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4454  0009  1A8B               	btfsc	11,5	;volatile
  4455  000A  1D0B               	btfss	11,2	;volatile
  4456  000B  280D               	goto	i1l2303
  4457                           
  4458                           ;interrupt_manager.c: 55: {
  4459                           ;interrupt_manager.c: 56: TMR0_ISR();
  4460  000C  254F               	fcall	_TMR0_ISR
  4461  000D                     i1l2303:	
  4462                           
  4463                           ;interrupt_manager.c: 57: }
  4464                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4465  000D  1F0B               	btfss	11,6	;volatile
  4466  000E  2816               	goto	i1l2311
  4467  000F  0021               	movlb	1	; select bank1
  4468  0010  1E11               	btfss	17,4	;volatile
  4469  0011  2816               	goto	i1l2311
  4470  0012  0020               	movlb	0	; select bank0
  4471  0013  1E11               	btfss	17,4	;volatile
  4472  0014  2816               	goto	i1l2311
  4473                           
  4474                           ;interrupt_manager.c: 59: {
  4475                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  4476  0015  2479               	fcall	_EUSART_Transmit_ISR
  4477  0016                     i1l2311:	
  4478                           
  4479                           ;interrupt_manager.c: 61: }
  4480                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  4481  0016  1F0B               	btfss	11,6	;volatile
  4482  0017  281F               	goto	i1l244
  4483  0018  0021               	movlb	1	; select bank1
  4484  0019  1E91               	btfss	17,5	;volatile
  4485  001A  281F               	goto	i1l244
  4486  001B  0020               	movlb	0	; select bank0
  4487  001C  1E91               	btfss	17,5	;volatile
  4488  001D  281F               	goto	i1l244
  4489                           
  4490                           ;interrupt_manager.c: 63: {
  4491                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  4492  001E  2504               	fcall	_EUSART_Receive_ISR
  4493  001F                     i1l244:	
  4494                           ;interrupt_manager.c: 66: else
  4495                           ;interrupt_manager.c: 67: {
  4496                           
  4497                           ;interrupt_manager.c: 65: }
  4498                           
  4499  001F  0873               	movf	??_INTERRUPT_InterruptManager,w
  4500  0020  0020               	movlb	0	; select bank0
  4501  0021  00FF               	movwf	127
  4502  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4503  0023  0009               	retfie
  4504  0024                     __end_of_INTERRUPT_InterruptManager:	
  4505                           
  4506                           	psect	text21
  4507  054F                     __ptext21:	
  4508 ;; *************** function _TMR0_ISR *****************
  4509 ;; Defined at:
  4510 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0, pclath, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1
  4524 ;;      Params:         0       0       0
  4525 ;;      Locals:         0       0       0
  4526 ;;      Temps:          0       0       0
  4527 ;;      Totals:         0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    3
  4531 ;; This function calls:
  4532 ;;		_TMR0_CallBack
  4533 ;; This function is called by:
  4534 ;;		_INTERRUPT_InterruptManager
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _TMR0_ISR
  4540  054F                     _TMR0_ISR:	
  4541                           
  4542                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  4543                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4547  054F  110B               	bcf	11,2	;volatile
  4548                           
  4549                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  4550  0550  0020               	movlb	0	; select bank0
  4551  0551  086E               	movf	_timer0ReloadVal,w	;volatile
  4552  0552  0095               	movwf	21	;volatile
  4553                           
  4554                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  4555  0553  3001               	movlw	1
  4556  0554  0021               	movlb	1	; select bank1
  4557  0555  07B0               	addwf	TMR0_ISR@CountCallBack^(0+128),f	;volatile
  4558  0556  3000               	movlw	0
  4559  0557  3DB1               	addwfc	(TMR0_ISR@CountCallBack+1)^(0+128),f	;volatile
  4560  0558  3000               	movlw	0
  4561  0559  0231               	subwf	(TMR0_ISR@CountCallBack+1)^(0+128),w	;volatile
  4562  055A  3002               	movlw	2
  4563  055B  1903               	skipnz
  4564  055C  0230               	subwf	TMR0_ISR@CountCallBack^(0+128),w	;volatile
  4565  055D  1C03               	skipc
  4566  055E  0008               	return
  4567                           
  4568                           ;tmr0.c: 119: {
  4569                           ;tmr0.c: 121: TMR0_CallBack();
  4570  055F  2596               	fcall	_TMR0_CallBack
  4571                           
  4572                           ;tmr0.c: 124: CountCallBack = 0;
  4573  0560  0021               	movlb	1	; select bank1
  4574  0561  01B0               	clrf	TMR0_ISR@CountCallBack^(0+128)	;volatile
  4575  0562  01B1               	clrf	(TMR0_ISR@CountCallBack+1)^(0+128)	;volatile
  4576  0563  0008               	return
  4577  0564                     __end_of_TMR0_ISR:	
  4578                           
  4579                           	psect	text22
  4580  0596                     __ptext22:	
  4581 ;; *************** function _TMR0_CallBack *****************
  4582 ;; Defined at:
  4583 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0, pclath, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMMON   BANK0   BANK1
  4597 ;;      Params:         0       0       0
  4598 ;;      Locals:         0       0       0
  4599 ;;      Temps:          0       0       0
  4600 ;;      Totals:         0       0       0
  4601 ;;Total ram usage:        0 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    2
  4604 ;; This function calls:
  4605 ;;		Absolute function
  4606 ;;		_TMR0_DefaultInterruptHandler
  4607 ;;		_my10msTimerISR
  4608 ;; This function is called by:
  4609 ;;		_TMR0_ISR
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _TMR0_CallBack
  4615  0596                     _TMR0_CallBack:	
  4616                           
  4617                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4621  0596  0021               	movlb	1	; select bank1
  4622  0597  0832               	movf	_TMR0_InterruptHandler^(0+128),w
  4623  0598  0433               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
  4624  0599  1903               	btfsc	3,2
  4625  059A  0008               	return
  4626                           
  4627                           ;tmr0.c: 135: {
  4628                           ;tmr0.c: 136: TMR0_InterruptHandler();
  4629  059B  0833               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
  4630  059C  008A               	movwf	10
  4631  059D  0832               	movf	_TMR0_InterruptHandler^(0+128),w
  4632  059E  000A               	callw
  4633  059F  3185               	pagesel	$
  4634  05A0  0008               	return
  4635  05A1                     __end_of_TMR0_CallBack:	
  4636                           
  4637                           	psect	text23
  4638  05D1                     __ptext23:	
  4639 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4640 ;; Defined at:
  4641 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;		None
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;		None
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		None
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1
  4655 ;;      Params:         0       0       0
  4656 ;;      Locals:         0       0       0
  4657 ;;      Temps:          0       0       0
  4658 ;;      Totals:         0       0       0
  4659 ;;Total ram usage:        0 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_TMR0_Initialize
  4665 ;;		_TMR0_CallBack
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _TMR0_DefaultInterruptHandler
  4671  05D1                     _TMR0_DefaultInterruptHandler:	
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4675  05D1  0008               	return
  4676  05D2                     __end_of_TMR0_DefaultInterruptHandler:	
  4677                           
  4678                           	psect	text24
  4679  05CD                     __ptext24:	
  4680 ;; *************** function _my10msTimerISR *****************
  4681 ;; Defined at:
  4682 ;;		line 391 in file "main.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, pclath, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1
  4696 ;;      Params:         0       0       0
  4697 ;;      Locals:         0       0       0
  4698 ;;      Temps:          0       0       0
  4699 ;;      Totals:         0       0       0
  4700 ;;Total ram usage:        0 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    1
  4703 ;; This function calls:
  4704 ;;		_LED_update_loop
  4705 ;;		_button_update_loop
  4706 ;; This function is called by:
  4707 ;;		_main
  4708 ;;		_TMR0_CallBack
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _my10msTimerISR
  4714  05CD                     _my10msTimerISR:	
  4715                           
  4716                           ;main.c: 393: LED_update_loop();
  4717                           
  4718                           ;incstack = 0
  4719                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  4720  05CD  2414               	fcall	_LED_update_loop
  4721                           
  4722                           ;main.c: 394: button_update_loop();
  4723  05CE  2322               	fcall	_button_update_loop
  4724  05CF  0008               	return
  4725  05D0                     __end_of_my10msTimerISR:	
  4726                           
  4727                           	psect	text25
  4728  0322                     __ptext25:	
  4729 ;; *************** function _button_update_loop *****************
  4730 ;; Defined at:
  4731 ;;		line 57 in file "interact.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  current_stat    1    2[COMMON] unsigned char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1
  4745 ;;      Params:         0       0       0
  4746 ;;      Locals:         1       0       0
  4747 ;;      Temps:          2       0       0
  4748 ;;      Totals:         3       0       0
  4749 ;;Total ram usage:        3 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_my10msTimerISR
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _button_update_loop
  4760  0322                     _button_update_loop:	
  4761                           
  4762                           ;interact.c: 59: unsigned char current_state = PORTAbits.RA4;
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _button_update_loop: [wreg+status,2+status,0]
  4766  0322  3000               	movlw	0
  4767  0323  0020               	movlb	0	; select bank0
  4768  0324  1A0C               	btfsc	12,4	;volatile
  4769  0325  3001               	movlw	1
  4770  0326  00F2               	movwf	button_update_loop@current_state
  4771                           
  4772                           ;interact.c: 60: if (!b_push_confirmed)
  4773  0327  0869               	movf	_b_push_confirmed,w	;volatile
  4774  0328  1D03               	btfss	3,2
  4775  0329  2B4F               	goto	i1l1877
  4776                           
  4777                           ;interact.c: 61: {
  4778                           ;interact.c: 63: if (current_state != b_last_state)
  4779  032A  0872               	movf	button_update_loop@current_state,w
  4780  032B  00F0               	movwf	??_button_update_loop
  4781  032C  01F1               	clrf	??_button_update_loop+1
  4782  032D  0877               	movf	_b_last_state+1,w	;volatile
  4783  032E  0671               	xorwf	??_button_update_loop+1,w
  4784  032F  1D03               	skipz
  4785  0330  2B33               	goto	u120_25
  4786  0331  0876               	movf	_b_last_state,w	;volatile
  4787  0332  0670               	xorwf	??_button_update_loop,w
  4788  0333                     u120_25:	
  4789  0333  1903               	skipnz
  4790  0334  2B3E               	goto	i1l1869
  4791                           
  4792                           ;interact.c: 64: {
  4793                           ;interact.c: 65: b_count_pressed = 0;
  4794  0335  01E6               	clrf	_b_count_pressed	;volatile
  4795                           
  4796                           ;interact.c: 66: b_last_state = current_state;
  4797  0336  0872               	movf	button_update_loop@current_state,w
  4798  0337  00F0               	movwf	??_button_update_loop
  4799  0338  01F1               	clrf	??_button_update_loop+1
  4800  0339  0870               	movf	??_button_update_loop,w
  4801  033A  00F6               	movwf	_b_last_state	;volatile
  4802  033B  0871               	movf	??_button_update_loop+1,w
  4803  033C  00F7               	movwf	_b_last_state+1	;volatile
  4804                           
  4805                           ;interact.c: 67: }
  4806  033D  0008               	return
  4807  033E                     i1l1869:	
  4808                           
  4809                           ;interact.c: 68: else if (b_last_state == 1)
  4810  033E  0376               	decf	_b_last_state,w	;volatile
  4811  033F  0477               	iorwf	_b_last_state+1,w	;volatile
  4812  0340  1D03               	btfss	3,2
  4813  0341  0008               	return
  4814                           
  4815                           ;interact.c: 69: {
  4816                           ;interact.c: 70: b_count_pressed++;
  4817  0342  3001               	movlw	1
  4818  0343  00F0               	movwf	??_button_update_loop
  4819  0344  0870               	movf	??_button_update_loop,w
  4820  0345  07E6               	addwf	_b_count_pressed,f	;volatile
  4821                           
  4822                           ;interact.c: 71: if (b_count_pressed > 10)
  4823  0346  300B               	movlw	11
  4824  0347  0266               	subwf	_b_count_pressed,w	;volatile
  4825  0348  1C03               	skipc
  4826  0349  0008               	return
  4827                           
  4828                           ;interact.c: 72: b_push_confirmed = 1;
  4829  034A  3001               	movlw	1
  4830  034B  00F0               	movwf	??_button_update_loop
  4831  034C  0870               	movf	??_button_update_loop,w
  4832  034D  00E9               	movwf	_b_push_confirmed	;volatile
  4833                           
  4834                           ;interact.c: 73: }
  4835                           ;interact.c: 74: }
  4836  034E  0008               	return
  4837  034F                     i1l1877:	
  4838                           
  4839                           ;interact.c: 75: else
  4840                           ;interact.c: 76: {
  4841                           ;interact.c: 77: if (current_state != b_last_state)
  4842  034F  0872               	movf	button_update_loop@current_state,w
  4843  0350  00F0               	movwf	??_button_update_loop
  4844  0351  01F1               	clrf	??_button_update_loop+1
  4845  0352  0877               	movf	_b_last_state+1,w	;volatile
  4846  0353  0671               	xorwf	??_button_update_loop+1,w
  4847  0354  1D03               	skipz
  4848  0355  2B58               	goto	u123_25
  4849  0356  0876               	movf	_b_last_state,w	;volatile
  4850  0357  0670               	xorwf	??_button_update_loop,w
  4851  0358                     u123_25:	
  4852  0358  1903               	skipnz
  4853  0359  2B67               	goto	i1l1885
  4854                           
  4855                           ;interact.c: 78: {
  4856                           ;interact.c: 79: b_count_released = 0;
  4857  035A  01E7               	clrf	_b_count_released	;volatile
  4858                           
  4859                           ;interact.c: 80: b_last_state = current_state;
  4860  035B  0872               	movf	button_update_loop@current_state,w
  4861  035C  00F0               	movwf	??_button_update_loop
  4862  035D  01F1               	clrf	??_button_update_loop+1
  4863  035E  0870               	movf	??_button_update_loop,w
  4864  035F  00F6               	movwf	_b_last_state	;volatile
  4865  0360  0871               	movf	??_button_update_loop+1,w
  4866  0361  00F7               	movwf	_b_last_state+1	;volatile
  4867                           
  4868                           ;interact.c: 81: b_has_once_been_released = 1;
  4869  0362  3001               	movlw	1
  4870  0363  00F0               	movwf	??_button_update_loop
  4871  0364  0870               	movf	??_button_update_loop,w
  4872  0365  00E8               	movwf	_b_has_once_been_released	;volatile
  4873                           
  4874                           ;interact.c: 82: }
  4875  0366  0008               	return
  4876  0367                     i1l1885:	
  4877                           
  4878                           ;interact.c: 83: else if ((b_last_state == 1)&&(!b_has_once_been_released))
  4879  0367  0376               	decf	_b_last_state,w	;volatile
  4880  0368  0477               	iorwf	_b_last_state+1,w	;volatile
  4881  0369  1D03               	btfss	3,2
  4882  036A  2B73               	goto	i1l1891
  4883  036B  0868               	movf	_b_has_once_been_released,w	;volatile
  4884  036C  1D03               	btfss	3,2
  4885  036D  2B73               	goto	i1l1891
  4886                           
  4887                           ;interact.c: 84: b_count_pressed++;
  4888  036E  3001               	movlw	1
  4889  036F  00F0               	movwf	??_button_update_loop
  4890  0370  0870               	movf	??_button_update_loop,w
  4891  0371  07E6               	addwf	_b_count_pressed,f	;volatile
  4892  0372  0008               	return
  4893  0373                     i1l1891:	
  4894                           
  4895                           ;interact.c: 85: else if (b_last_state == 0)
  4896  0373  0876               	movf	_b_last_state,w	;volatile
  4897  0374  0477               	iorwf	_b_last_state+1,w	;volatile
  4898  0375  1D03               	btfss	3,2
  4899  0376  0008               	return
  4900                           
  4901                           ;interact.c: 86: {
  4902                           ;interact.c: 87: b_count_released++;
  4903  0377  3001               	movlw	1
  4904  0378  00F0               	movwf	??_button_update_loop
  4905  0379  0870               	movf	??_button_update_loop,w
  4906  037A  07E7               	addwf	_b_count_released,f	;volatile
  4907                           
  4908                           ;interact.c: 88: if (b_count_released > 10)
  4909  037B  300B               	movlw	11
  4910  037C  0267               	subwf	_b_count_released,w	;volatile
  4911  037D  1C03               	skipc
  4912  037E  0008               	return
  4913                           
  4914                           ;interact.c: 89: if (b_count_pressed >= 100)
  4915  037F  3064               	movlw	100
  4916  0380  0266               	subwf	_b_count_pressed,w	;volatile
  4917  0381  1C03               	skipc
  4918  0382  2B88               	goto	i1l1901
  4919                           
  4920                           ;interact.c: 90: b_confirmed_state = long_push;
  4921  0383  3002               	movlw	2
  4922  0384  00F0               	movwf	??_button_update_loop
  4923  0385  0870               	movf	??_button_update_loop,w
  4924  0386  00E5               	movwf	_b_confirmed_state	;volatile
  4925  0387  0008               	return
  4926  0388                     i1l1901:	
  4927                           
  4928                           ;interact.c: 91: else
  4929                           ;interact.c: 92: b_confirmed_state = short_push;
  4930  0388  3001               	movlw	1
  4931  0389  00F0               	movwf	??_button_update_loop
  4932  038A  0870               	movf	??_button_update_loop,w
  4933  038B  00E5               	movwf	_b_confirmed_state	;volatile
  4934  038C  0008               	return
  4935  038D                     __end_of_button_update_loop:	
  4936                           
  4937                           	psect	text26
  4938  0414                     __ptext26:	
  4939 ;; *************** function _LED_update_loop *****************
  4940 ;; Defined at:
  4941 ;;		line 20 in file "interact.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2, status,0
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMMON   BANK0   BANK1
  4955 ;;      Params:         0       0       0
  4956 ;;      Locals:         0       0       0
  4957 ;;      Temps:          1       0       0
  4958 ;;      Totals:         1       0       0
  4959 ;;Total ram usage:        1 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_my10msTimerISR
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function _LED_update_loop
  4970  0414                     _LED_update_loop:	
  4971                           
  4972                           ;interact.c: 22: if (LED_state == slow_blinking)
  4973                           
  4974                           ;incstack = 0
  4975                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  4976  0414  3002               	movlw	2
  4977  0415  0020               	movlb	0	; select bank0
  4978  0416  066F               	xorwf	_LED_state,w
  4979  0417  1D03               	btfss	3,2
  4980  0418  2C26               	goto	i1l1849
  4981                           
  4982                           ;interact.c: 23: {
  4983                           ;interact.c: 24: LED_counter++;
  4984  0419  3001               	movlw	1
  4985  041A  00F0               	movwf	??_LED_update_loop
  4986  041B  0870               	movf	??_LED_update_loop,w
  4987  041C  07E4               	addwf	_LED_counter,f	;volatile
  4988                           
  4989                           ;interact.c: 25: if (LED_counter >= 100)
  4990  041D  3064               	movlw	100
  4991  041E  0264               	subwf	_LED_counter,w	;volatile
  4992  041F  1C03               	skipc
  4993  0420  0008               	return
  4994                           
  4995                           ;interact.c: 26: {
  4996                           ;interact.c: 27: LED_counter = 0;
  4997  0421  01E4               	clrf	_LED_counter	;volatile
  4998                           
  4999                           ;interact.c: 28: do { LATA5 = ~LATA5; } while(0);
  5000  0422  3020               	movlw	32
  5001  0423  0022               	movlb	2	; select bank2
  5002  0424  068C               	xorwf	12,f
  5003                           
  5004                           ;interact.c: 29: }
  5005                           ;interact.c: 30: }
  5006  0425  0008               	return
  5007  0426                     i1l1849:	
  5008                           
  5009                           ;interact.c: 31: else if (LED_state == fast_blinking)
  5010  0426  3003               	movlw	3
  5011  0427  0020               	movlb	0	; select bank0
  5012  0428  066F               	xorwf	_LED_state,w
  5013  0429  1D03               	btfss	3,2
  5014  042A  0008               	return
  5015                           
  5016                           ;interact.c: 32: {
  5017                           ;interact.c: 33: LED_counter++;
  5018  042B  3001               	movlw	1
  5019  042C  00F0               	movwf	??_LED_update_loop
  5020  042D  0870               	movf	??_LED_update_loop,w
  5021  042E  07E4               	addwf	_LED_counter,f	;volatile
  5022                           
  5023                           ;interact.c: 34: if (LED_counter >= 50)
  5024  042F  3032               	movlw	50
  5025  0430  0264               	subwf	_LED_counter,w	;volatile
  5026  0431  1C03               	skipc
  5027  0432  0008               	return
  5028                           
  5029                           ;interact.c: 35: {
  5030                           ;interact.c: 36: LED_counter = 0;
  5031  0433  01E4               	clrf	_LED_counter	;volatile
  5032                           
  5033                           ;interact.c: 37: do { LATA5 = ~LATA5; } while(0);
  5034  0434  3020               	movlw	32
  5035  0435  0022               	movlb	2	; select bank2
  5036  0436  068C               	xorwf	12,f
  5037  0437  0008               	return
  5038  0438                     __end_of_LED_update_loop:	
  5039                           
  5040                           	psect	text27
  5041  0479                     __ptext27:	
  5042 ;; *************** function _EUSART_Transmit_ISR *****************
  5043 ;; Defined at:
  5044 ;;		line 169 in file "mcc_generated_files/eusart.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMMON   BANK0   BANK1
  5058 ;;      Params:         0       0       0
  5059 ;;      Locals:         0       0       0
  5060 ;;      Temps:          1       0       0
  5061 ;;      Totals:         1       0       0
  5062 ;;Total ram usage:        1 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; This function calls:
  5065 ;;		Nothing
  5066 ;; This function is called by:
  5067 ;;		_INTERRUPT_InterruptManager
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           
  5072                           ;psect for function _EUSART_Transmit_ISR
  5073  0479                     _EUSART_Transmit_ISR:	
  5074                           
  5075                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5076                           
  5077                           ;incstack = 0
  5078                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5079  0479  3008               	movlw	8
  5080  047A  0279               	subwf	_eusartTxBufferRemaining,w	;volatile
  5081  047B  1803               	skipnc
  5082  047C  2C93               	goto	i1l143
  5083                           
  5084                           ;eusart.c: 174: {
  5085                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  5086  047D  0020               	movlb	0	; select bank0
  5087  047E  086D               	movf	_eusartTxTail,w
  5088  047F  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5089  0480  0086               	movwf	6
  5090  0481  0187               	clrf	7
  5091  0482  0801               	movf	1,w
  5092  0483  0023               	movlb	3	; select bank3
  5093  0484  009A               	movwf	26	;volatile
  5094  0485  3001               	movlw	1
  5095  0486  00F0               	movwf	??_EUSART_Transmit_ISR
  5096  0487  0870               	movf	??_EUSART_Transmit_ISR,w
  5097  0488  0020               	movlb	0	; select bank0
  5098  0489  07ED               	addwf	_eusartTxTail,f
  5099                           
  5100                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5101  048A  3008               	movlw	8
  5102  048B  026D               	subwf	_eusartTxTail,w
  5103  048C  1803               	btfsc	3,0
  5104                           
  5105                           ;eusart.c: 177: {
  5106                           ;eusart.c: 178: eusartTxTail = 0;
  5107  048D  01ED               	clrf	_eusartTxTail
  5108                           
  5109                           ;eusart.c: 179: }
  5110                           ;eusart.c: 180: eusartTxBufferRemaining++;
  5111  048E  3001               	movlw	1
  5112  048F  00F0               	movwf	??_EUSART_Transmit_ISR
  5113  0490  0870               	movf	??_EUSART_Transmit_ISR,w
  5114  0491  07F9               	addwf	_eusartTxBufferRemaining,f	;volatile
  5115                           
  5116                           ;eusart.c: 181: }
  5117  0492  0008               	return
  5118  0493                     i1l143:	
  5119                           
  5120                           ;eusart.c: 182: else
  5121                           ;eusart.c: 183: {
  5122                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  5123  0493  0021               	movlb	1	; select bank1
  5124  0494  1211               	bcf	17,4	;volatile
  5125  0495  0008               	return
  5126  0496                     __end_of_EUSART_Transmit_ISR:	
  5127                           
  5128                           	psect	text28
  5129  0504                     __ptext28:	
  5130 ;; *************** function _EUSART_Receive_ISR *****************
  5131 ;; Defined at:
  5132 ;;		line 188 in file "mcc_generated_files/eusart.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1
  5146 ;;      Params:         0       0       0
  5147 ;;      Locals:         0       0       0
  5148 ;;      Temps:          1       0       0
  5149 ;;      Totals:         1       0       0
  5150 ;;Total ram usage:        1 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_INTERRUPT_InterruptManager
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _EUSART_Receive_ISR
  5161  0504                     _EUSART_Receive_ISR:	
  5162                           
  5163                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5167  0504  0023               	movlb	3	; select bank3
  5168  0505  1C9D               	btfss	29,1	;volatile
  5169  0506  2D09               	goto	i1l2041
  5170                           
  5171                           ;eusart.c: 192: {
  5172                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  5173  0507  139D               	bcf	29,7	;volatile
  5174                           
  5175                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  5176  0508  179D               	bsf	29,7	;volatile
  5177  0509                     i1l2041:	
  5178                           
  5179                           ;eusart.c: 197: }
  5180                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  5181  0509  0819               	movf	25,w	;volatile
  5182  050A  00F0               	movwf	??_EUSART_Receive_ISR
  5183  050B  0020               	movlb	0	; select bank0
  5184  050C  086A               	movf	_eusartRxHead,w
  5185  050D  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5186  050E  0086               	movwf	6
  5187  050F  0187               	clrf	7
  5188  0510  0870               	movf	??_EUSART_Receive_ISR,w
  5189  0511  0081               	movwf	1
  5190  0512  3001               	movlw	1
  5191  0513  00F0               	movwf	??_EUSART_Receive_ISR
  5192  0514  0870               	movf	??_EUSART_Receive_ISR,w
  5193  0515  07EA               	addwf	_eusartRxHead,f
  5194                           
  5195                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5196  0516  3008               	movlw	8
  5197  0517  026A               	subwf	_eusartRxHead,w
  5198  0518  1803               	btfsc	3,0
  5199                           
  5200                           ;eusart.c: 202: {
  5201                           ;eusart.c: 203: eusartRxHead = 0;
  5202  0519  01EA               	clrf	_eusartRxHead
  5203                           
  5204                           ;eusart.c: 204: }
  5205                           ;eusart.c: 205: eusartRxCount++;
  5206  051A  3001               	movlw	1
  5207  051B  00F0               	movwf	??_EUSART_Receive_ISR
  5208  051C  0870               	movf	??_EUSART_Receive_ISR,w
  5209  051D  07F8               	addwf	_eusartRxCount,f	;volatile
  5210  051E  0008               	return
  5211  051F                     __end_of_EUSART_Receive_ISR:	
  5212  007E                     btemp	set	126	;btemp
  5213  007E                     int$flags	set	126
  5214  007E                     wtemp	set	126
  5215  007E                     wtemp0	set	126
  5216  0080                     wtemp1	set	128
  5217  0082                     wtemp2	set	130
  5218  0084                     wtemp3	set	132
  5219  0086                     wtemp4	set	134
  5220  0088                     wtemp5	set	136
  5221  007F                     wtemp6	set	127
  5222  007E                     ttemp	set	126
  5223  007E                     ttemp0	set	126
  5224  0081                     ttemp1	set	129
  5225  0084                     ttemp2	set	132
  5226  0087                     ttemp3	set	135
  5227  007F                     ttemp4	set	127
  5228  007E                     ltemp	set	126
  5229  007E                     ltemp0	set	126
  5230  0082                     ltemp1	set	130
  5231  0086                     ltemp2	set	134
  5232  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    0
    Data        1
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     68      80
    BANK1            32      4      30

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_EPWM_LoadDutyValue
    _main->_TMR0_SetInterruptHandler
    _main->_button_init
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_read_speed->___wmul
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _SYSTEM_Initialize->_TMR0_Initialize
    _GPS_read_speed->___wmul
    _GPS_Initialize->_printf
    _printf->_putch

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    5135
                                             58 BANK0     10    10      0
                                              0 BANK1      4     4      0
                 _EPWM_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                        _button_init
 ---------------------------------------------------------------------------------
 (1) _button_init                                          2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                    _EPWM_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              0 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        1     1      0     124
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      54    54      0    2974
                                              4 BANK0     54    54      0
                        _EUSART_Read
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     444
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                              8 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              1 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              0 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_LoadDutyValue                                   4     2      2     601
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0      89
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0      89
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0      89
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0      89
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   3     3      0      89
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   _button_init

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      78       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     44      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      4      1E       8       93.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      78       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Sep 16 13:39:00 2016

                             __CFG_CP$OFF 0000                       ___wmul@multiplicand 0022  
                         _timer0ReloadVal 006E                                       l131 0443  
                                     l220 05AF                    __end_of_my10msTimerISR 05D0  
                                     l430 025D                                       l438 02B4  
                                     l617 049F                                       l489 0534  
                                     _PR2 001B                              __CFG_CPD$OFF 0000  
                         _TMR2_Initialize 05A1                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0070                              __CFG_LVP$OFF 0000  
                                    l2523 045D                                      l2621 03EE  
                                    l2701 00D7                                      l2615 03D9  
                                    l2473 0439                                      l2803 01AB  
                                    l2723 00FC                                      l2707 00DD  
                                    l2811 01CD                                      l2643 0054  
                                    l2805 01BC                                      l2741 0118  
                                    l2717 00EC                                      l2653 006A  
                                    l2487 0457                                      l2751 0132  
                                    l2655 003D                                      l2911 024D  
                                    l2903 0235                                      l2593 0498  
                                    l2761 0153                                      l2737 0111  
                                    l2729 0102                                      l2673 00A2  
                                    l2649 005E                                      l2657 003E  
                                    l2817 0526                                      l2763 016E  
                                    l2747 0122                                      l2675 00A6  
                                    l2659 006F                                      l2819 052C  
                                    l2931 025E                                      l2851 01D8  
                                    l2589 04EE                                      l2757 0134  
                                    l2765 0172                                      l2685 00B8  
                                    l2917 0256                                      l2909 024A  
                                    l2861 01DE                                      l2791 01A3  
                                    l2775 0184                                      l2695 00C7  
                                    l2679 00B2                                      l2785 0193  
                                    l2769 017E                                      l2881 0210  
                                    l2963 02BE                                      l2955 02A5  
                                    l2875 01FB                                      l2797 01A9  
                                    l2981 02E8                                      l2949 028E  
                                    l2975 02D1                                      l2959 02AF  
                                    l2895 022D                                      l2985 02F6  
                                    l2889 0218                                      l2989 0302  
                                    STR_1 038D                                      STR_2 03C1  
                                    _LATA 010C                                      u3007 03DF  
                                    _LATC 010E                                      u3017 03FA  
                                    u3027 040D                                      u2235 04A0  
                                    u2245 04A5                                      u2265 04C3  
                                    u2907 01E4                                      u2917 0201  
                                    u2927 021E                                      u2937 023B  
                                    u2947 0264                                      u2957 027E  
                                    u2967 0295                                      u2977 02D8  
                                    u2987 02F1                                      u2997 031B  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _TMR2 001A                           GPS_read_speed@i 0054  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                  __end_of_GPS_read_speed 01CF                               main@tmp_600 0063  
                             main@tmp_602 00BA                               main@tmp_603 00BB  
                             main@tmp_595 0060                               main@tmp_596 0061  
                             main@tmp_597 0062                                      _main 01CF  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0024  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_MCLRE$ON 0000                   __end_of_TMR0_Initialize 0578  
                           __CFG_PLLEN$ON 0000            ??_TMR0_DefaultInterruptHandler 0070  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0008  
           __end_of_OSCILLATOR_Initialize 05B2                                     ?_main 0070  
                           __CFG_WDTE$OFF 0000                                     _T2CON 001C  
                                   _LATA5 0865                           ?_my10msTimerISR 0070  
                                   i1l143 0493                                     i1l244 001F  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 0028         __size_of_TMR0_SetInterruptHandler 0006  
                            ?_button_init 0070                 ?_TMR0_SetInterruptHandler 0074  
                        __end_of_TMR0_ISR 0564                                     _putch 05C5  
                 __end_of_LED_update_loop 0438                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0070                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                         _TMR2_StartTimer 05CA                           __initialization 0025  
                  __size_of_LED_set_state 001A                              __end_of_main 0322  
                          ??_EUSART_Write 0074                   __end_of_TMR2_Initialize 05AA  
             ?_INTERRUPT_InterruptManager 0070                                    ??_main 005A  
                            _b_last_state 0076                          _b_push_confirmed 0069  
                         _b_count_pressed 0066                                    _EEADRH 0192  
                                  _EEADRL 0191                                    _CCPR1H 0292  
                                  _EEDATH 0194                                    _CCPR1L 0291  
                                  _EEDATL 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  ?_putch 0070                                    _ANSELC 018E  
                                  i1l2041 0509                                    i1l2311 0016  
                                  i1l2303 000D                                    u120_25 0333  
                                  i1l1901 0388                                    i1l1849 0426  
                                  i1l1891 0373                                    i1l1885 0367  
                                  u123_25 0358                                    i1l1869 033E  
                                  i1l1877 034F                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                          __CFG_PWRTE$OFF 0000                                    ___wmul 0496  
                          __CFG_STVREN$ON 0000                       _EUSART_Transmit_ISR 0479  
                        ?_TMR0_Initialize 0070                __end_of_button_update_loop 038D  
                                  _printf 04E9                                    main@up 005E  
                __size_of_EPWM_Initialize 000C                             _LED_set_state 051F  
                   __end_of_TMR0_CallBack 05A1                   __end_of_TMR2_StartTimer 05CD  
TMR0_SetInterruptHandler@InterruptHandler 0074                      ?_EUSART_Transmit_ISR 0070  
             __size_of_EPWM_LoadDutyValue 001C                          ?_LED_update_loop 0070  
                    __size_of_EUSART_Read 001F                         _SYSTEM_Initialize 05B2  
                 __end_of__initialization 0037                        ?_SYSTEM_Initialize 0070  
                          __pcstackCOMMON 0070                              __pidataBANK0 05D0  
                     ??_SYSTEM_Initialize 0076                                 ?_TMR0_ISR 0070  
                           __end_of_putch 05CA                          ?_TMR2_Initialize 0070  
                          _OPTION_REGbits 0095                     TMR0_ISR@CountCallBack 00B0  
                          ?_LED_set_state 0070                  _b_has_once_been_released 0068  
                    __size_of_button_init 0012                 __end_of_SYSTEM_Initialize 05B9  
                   ??_EUSART_Transmit_ISR 0070                                   ??_putch 0076  
                              __pbssBANK0 0064                                __pbssBANK1 00A0  
                    __end_of_EUSART_Write 045A                          _b_count_released 0067  
             __size_of_EUSART_Receive_ISR 001B                                __pmaintext 01CF  
        __end_of_TMR0_SetInterruptHandler 05C5                                   ?___wmul 0020  
                              ??_TMR0_ISR 0073                          ??_my10msTimerISR 0073  
                              __pintentry 0004                                   _CCP1CON 0293  
                                 _ECCP1AS 0295                                   _BAUDCON 019F  
                                 ?_printf 0021                             _eusartRxCount 0078  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                                 _PWM1CON 0294                          ??_GPS_read_speed 0024  
                      GPS_read_speed@done 0051                          ?_TMR2_StartTimer 0070  
                       ??_EPWM_Initialize 0074                           __size_of___wmul 001C  
                                 __ptext1 0578                                   __ptext2 05B2  
                                 __ptext3 05A1                                   __ptext4 05CA  
                                 __ptext5 0564                                   __ptext6 05BF  
                                 __ptext7 0539                                   __ptext8 05AA  
                                 __ptext9 04CE                           __size_of_printf 001B  
                         ??_LED_set_state 0074                     _OSCILLATOR_Initialize 05AA  
                               _T2CONbits 001C              GPS_read_speed@read_speed_dec 004F  
                ??_PIN_MANAGER_Initialize 0074              GPS_read_speed@read_speed_int 0056  
              __size_of_SYSTEM_Initialize 0007                                   clrloop0 05BA  
                                 main@res 005D                                   main@tmp 005F  
                          main@motor_load 00BC                      end_of_initialization 0037  
                  LED_set_state@new_state 0074                                 _LED_state 006F  
             EPWM_LoadDutyValue@dutyValue 0074                         _EUSART_Initialize 04CE  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0027                                   printf@f 0021  
                            __pstringtext 038D                       ??_EUSART_Initialize 0074  
                _TMR0_SetInterruptHandler 05BF                                 _PORTAbits 000C  
                    GPS_read_speed@i_buff 0058                      GPS_read_speed@m_char 0055  
                    GPS_read_speed@buffer 0026                          __CFG_FOSC$INTOSC 0000  
                   __size_of_EUSART_Write 0022                        _button_update_loop 0322  
               __end_of_EUSART_Initialize 04E9                   __size_of_GPS_Initialize 0041  
                     ?_button_update_loop 0070                            __end_of___wmul 04B2  
                            _EUSART_Write 0438                         __size_of_TMR0_ISR 0015  
                  ?_OSCILLATOR_Initialize 0070                      ??_button_update_loop 0070  
                          __end_of_printf 0504                       start_initialization 0025  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0016  
              __end_of_EPWM_LoadDutyValue 04CE                             ??_EUSART_Read 0074  
                             putch@txData 0020                  __size_of_LED_update_loop 0024  
                                ??___wmul 0074                    __size_of_TMR0_CallBack 000B  
                             __pdataBANK0 006F                                  ??_printf 0023  
                         _EPWM_Initialize 058A               __end_of_EUSART_Transmit_ISR 0496  
                           ??_button_init 0074                               __pbssCOMMON 0076  
                               ___latbits 0000                             __pcstackBANK0 0020  
                           __pcstackBANK1 00BA                  __size_of_TMR2_Initialize 0009  
              __end_of_EUSART_Receive_ISR 051F                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 0479                     _TMR0_InterruptHandler 00B2  
                  _PIN_MANAGER_Initialize 0539                      EUSART_Read@readValue 0075  
                            _eusartRxHead 006A                              _eusartTxHead 006C  
                            _eusartRxTail 006B                              _eusartTxTail 006D  
            ??_INTERRUPT_InterruptManager 0073                   _eusartTxBufferRemaining 0079  
                           _TMR0_CallBack 0596                            __size_of_putch 0005  
                     __end_of_button_init 058A                            _eusartRxBuffer 00A0  
                       ??_TMR0_Initialize 0020                            _GPS_Initialize 03D3  
                          _eusartTxBuffer 00A8                            ___wmul@product 0074  
                               clear_ram0 05B9                                  _PIE1bits 0091  
                __size_of_TMR2_StartTimer 0003       __size_of_INTERRUPT_InterruptManager 0020  
              ??_TMR0_SetInterruptHandler 0076                                  _PIR1bits 0011  
                               _speed_dec 00B4                                  _TMR0_ISR 054F  
                               _speed_int 00B6                                  _PSTR1CON 0296  
                 __end_of_EPWM_Initialize 0596                         ??_LED_update_loop 0070  
                       ___wmul@multiplier 0020                     __end_of_LED_set_state 0539  
                 __size_of_my10msTimerISR 0003                            ?_TMR0_CallBack 0070  
                             _EUSART_Read 045A                    __end_of_GPS_Initialize 0414  
                       ??_TMR2_Initialize 0074                                _EECON1bits 0195  
                 __size_of_GPS_read_speed 0195                               _LED_counter 0064  
                       GPS_Initialize@tmp 002B                   ??_OSCILLATOR_Initialize 0074  
         button_update_loop@current_state 0072                               _button_init 0578  
                GPS_read_speed@before_dot 0052                                  __ptext10 058A  
                                __ptext11 051F                                  __ptext12 003A  
                                __ptext21 054F                                  __ptext13 0496  
                                __ptext22 0596                                  __ptext14 045A  
                                __ptext23 05D1                                  __ptext15 03D3  
                                __ptext24 05CD                                  __ptext16 04E9  
                                __ptext25 0322                                  __ptext17 05C5  
                                __ptext26 0414                                  __ptext18 0438  
                                __ptext27 0479                                  __ptext19 04B2  
                                __ptext28 0504                           ?_GPS_Initialize 0070  
                       _b_confirmed_state 0065                             __size_of_main 0153  
    __end_of_TMR0_DefaultInterruptHandler 05D2     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 05D1                        _EPWM_LoadDutyValue 04B2  
                                int$flags 007E                       _b_release_confirmed 00B8  
                        ?_EPWM_Initialize 0070                         ??_TMR2_StartTimer 0074  
      __end_of_INTERRUPT_InterruptManager 0024                _INTERRUPT_InterruptManager 0004  
                     ?_EPWM_LoadDutyValue 0074               __size_of_button_update_loop 006B  
                              _INTCONbits 000B                           ??_TMR0_CallBack 0073  
                    ??_EPWM_LoadDutyValue 0020                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
           ?_TMR0_DefaultInterruptHandler 0070                                  printf@ap 0026  
                      _EUSART_Receive_ISR 0504                                _OPTION_REG 0095  
                     ?_EUSART_Receive_ISR 0070                           _TMR0_Initialize 0564  
                  GPS_read_speed@checksum 004E                            _my10msTimerISR 05CD  
                             _speed_units 00B9                        EUSART_Write@txData 0075  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 054F  
                   GPS_read_speed@i_buff2 0059                   GPS_read_speed@recording 0053  
                    ??_EUSART_Receive_ISR 0070                            _GPS_read_speed 003A  
                         _LED_update_loop 0414  

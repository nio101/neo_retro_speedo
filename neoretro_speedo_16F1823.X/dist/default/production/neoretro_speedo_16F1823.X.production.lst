

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Sep 17 17:47:50 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000E                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  008C                     	;# 
    70  008E                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  010C                     	;# 
    85  010E                     	;# 
    86  0111                     	;# 
    87  0112                     	;# 
    88  0113                     	;# 
    89  0114                     	;# 
    90  0115                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  0118                     	;# 
    94  0119                     	;# 
    95  011A                     	;# 
    96  011B                     	;# 
    97  011D                     	;# 
    98  011D                     	;# 
    99  018C                     	;# 
   100  018E                     	;# 
   101  0191                     	;# 
   102  0191                     	;# 
   103  0192                     	;# 
   104  0193                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0194                     	;# 
   108  0195                     	;# 
   109  0196                     	;# 
   110  0199                     	;# 
   111  019A                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019B                     	;# 
   115  019B                     	;# 
   116  019C                     	;# 
   117  019C                     	;# 
   118  019D                     	;# 
   119  019E                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020E                     	;# 
   123  0211                     	;# 
   124  0211                     	;# 
   125  0212                     	;# 
   126  0212                     	;# 
   127  0213                     	;# 
   128  0213                     	;# 
   129  0214                     	;# 
   130  0214                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  0291                     	;# 
   139  0291                     	;# 
   140  0292                     	;# 
   141  0293                     	;# 
   142  0294                     	;# 
   143  0295                     	;# 
   144  0295                     	;# 
   145  0296                     	;# 
   146  0391                     	;# 
   147  0392                     	;# 
   148  0393                     	;# 
   149  039A                     	;# 
   150  039C                     	;# 
   151  039D                     	;# 
   152  039E                     	;# 
   153  039F                     	;# 
   154  0FE4                     	;# 
   155  0FE5                     	;# 
   156  0FE6                     	;# 
   157  0FE7                     	;# 
   158  0FE8                     	;# 
   159  0FE9                     	;# 
   160  0FEA                     	;# 
   161  0FEB                     	;# 
   162  0FED                     	;# 
   163  0FEE                     	;# 
   164  0FEF                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000E                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001E                     	;# 
   191  001F                     	;# 
   192  008C                     	;# 
   193  008E                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010E                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0113                     	;# 
   212  0114                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011D                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  018E                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0199                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019F                     	;# 
   244  020C                     	;# 
   245  020E                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  0291                     	;# 
   262  0291                     	;# 
   263  0292                     	;# 
   264  0293                     	;# 
   265  0294                     	;# 
   266  0295                     	;# 
   267  0295                     	;# 
   268  0296                     	;# 
   269  0391                     	;# 
   270  0392                     	;# 
   271  0393                     	;# 
   272  039A                     	;# 
   273  039C                     	;# 
   274  039D                     	;# 
   275  039E                     	;# 
   276  039F                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  008C                     	;# 
   316  008E                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  011D                     	;# 
   345  018C                     	;# 
   346  018E                     	;# 
   347  0191                     	;# 
   348  0191                     	;# 
   349  0192                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0194                     	;# 
   354  0195                     	;# 
   355  0196                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019C                     	;# 
   363  019C                     	;# 
   364  019D                     	;# 
   365  019E                     	;# 
   366  019F                     	;# 
   367  020C                     	;# 
   368  020E                     	;# 
   369  0211                     	;# 
   370  0211                     	;# 
   371  0212                     	;# 
   372  0212                     	;# 
   373  0213                     	;# 
   374  0213                     	;# 
   375  0214                     	;# 
   376  0214                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0216                     	;# 
   381  0216                     	;# 
   382  0217                     	;# 
   383  0217                     	;# 
   384  0291                     	;# 
   385  0291                     	;# 
   386  0292                     	;# 
   387  0293                     	;# 
   388  0294                     	;# 
   389  0295                     	;# 
   390  0295                     	;# 
   391  0296                     	;# 
   392  0391                     	;# 
   393  0392                     	;# 
   394  0393                     	;# 
   395  039A                     	;# 
   396  039C                     	;# 
   397  039D                     	;# 
   398  039E                     	;# 
   399  039F                     	;# 
   400  0FE4                     	;# 
   401  0FE5                     	;# 
   402  0FE6                     	;# 
   403  0FE7                     	;# 
   404  0FE8                     	;# 
   405  0FE9                     	;# 
   406  0FEA                     	;# 
   407  0FEB                     	;# 
   408  0FED                     	;# 
   409  0FEE                     	;# 
   410  0FEF                     	;# 
   411  0000                     	;# 
   412  0001                     	;# 
   413  0002                     	;# 
   414  0003                     	;# 
   415  0004                     	;# 
   416  0005                     	;# 
   417  0006                     	;# 
   418  0007                     	;# 
   419  0008                     	;# 
   420  0009                     	;# 
   421  000A                     	;# 
   422  000B                     	;# 
   423  000C                     	;# 
   424  000E                     	;# 
   425  0011                     	;# 
   426  0012                     	;# 
   427  0015                     	;# 
   428  0016                     	;# 
   429  0016                     	;# 
   430  0017                     	;# 
   431  0018                     	;# 
   432  0019                     	;# 
   433  001A                     	;# 
   434  001B                     	;# 
   435  001C                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  008C                     	;# 
   439  008E                     	;# 
   440  0091                     	;# 
   441  0092                     	;# 
   442  0095                     	;# 
   443  0096                     	;# 
   444  0097                     	;# 
   445  0098                     	;# 
   446  0099                     	;# 
   447  009A                     	;# 
   448  009B                     	;# 
   449  009B                     	;# 
   450  009C                     	;# 
   451  009D                     	;# 
   452  009E                     	;# 
   453  010C                     	;# 
   454  010E                     	;# 
   455  0111                     	;# 
   456  0112                     	;# 
   457  0113                     	;# 
   458  0114                     	;# 
   459  0115                     	;# 
   460  0116                     	;# 
   461  0117                     	;# 
   462  0118                     	;# 
   463  0119                     	;# 
   464  011A                     	;# 
   465  011B                     	;# 
   466  011D                     	;# 
   467  011D                     	;# 
   468  018C                     	;# 
   469  018E                     	;# 
   470  0191                     	;# 
   471  0191                     	;# 
   472  0192                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0194                     	;# 
   477  0195                     	;# 
   478  0196                     	;# 
   479  0199                     	;# 
   480  019A                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019C                     	;# 
   486  019C                     	;# 
   487  019D                     	;# 
   488  019E                     	;# 
   489  019F                     	;# 
   490  020C                     	;# 
   491  020E                     	;# 
   492  0211                     	;# 
   493  0211                     	;# 
   494  0212                     	;# 
   495  0212                     	;# 
   496  0213                     	;# 
   497  0213                     	;# 
   498  0214                     	;# 
   499  0214                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0216                     	;# 
   504  0216                     	;# 
   505  0217                     	;# 
   506  0217                     	;# 
   507  0291                     	;# 
   508  0291                     	;# 
   509  0292                     	;# 
   510  0293                     	;# 
   511  0294                     	;# 
   512  0295                     	;# 
   513  0295                     	;# 
   514  0296                     	;# 
   515  0391                     	;# 
   516  0392                     	;# 
   517  0393                     	;# 
   518  039A                     	;# 
   519  039C                     	;# 
   520  039D                     	;# 
   521  039E                     	;# 
   522  039F                     	;# 
   523  0FE4                     	;# 
   524  0FE5                     	;# 
   525  0FE6                     	;# 
   526  0FE7                     	;# 
   527  0FE8                     	;# 
   528  0FE9                     	;# 
   529  0FEA                     	;# 
   530  0FEB                     	;# 
   531  0FED                     	;# 
   532  0FEE                     	;# 
   533  0FEF                     	;# 
   534  0000                     	;# 
   535  0001                     	;# 
   536  0002                     	;# 
   537  0003                     	;# 
   538  0004                     	;# 
   539  0005                     	;# 
   540  0006                     	;# 
   541  0007                     	;# 
   542  0008                     	;# 
   543  0009                     	;# 
   544  000A                     	;# 
   545  000B                     	;# 
   546  000C                     	;# 
   547  000E                     	;# 
   548  0011                     	;# 
   549  0012                     	;# 
   550  0015                     	;# 
   551  0016                     	;# 
   552  0016                     	;# 
   553  0017                     	;# 
   554  0018                     	;# 
   555  0019                     	;# 
   556  001A                     	;# 
   557  001B                     	;# 
   558  001C                     	;# 
   559  001E                     	;# 
   560  001F                     	;# 
   561  008C                     	;# 
   562  008E                     	;# 
   563  0091                     	;# 
   564  0092                     	;# 
   565  0095                     	;# 
   566  0096                     	;# 
   567  0097                     	;# 
   568  0098                     	;# 
   569  0099                     	;# 
   570  009A                     	;# 
   571  009B                     	;# 
   572  009B                     	;# 
   573  009C                     	;# 
   574  009D                     	;# 
   575  009E                     	;# 
   576  010C                     	;# 
   577  010E                     	;# 
   578  0111                     	;# 
   579  0112                     	;# 
   580  0113                     	;# 
   581  0114                     	;# 
   582  0115                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  0118                     	;# 
   586  0119                     	;# 
   587  011A                     	;# 
   588  011B                     	;# 
   589  011D                     	;# 
   590  011D                     	;# 
   591  018C                     	;# 
   592  018E                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0193                     	;# 
   599  0194                     	;# 
   600  0195                     	;# 
   601  0196                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019C                     	;# 
   609  019C                     	;# 
   610  019D                     	;# 
   611  019E                     	;# 
   612  019F                     	;# 
   613  020C                     	;# 
   614  020E                     	;# 
   615  0211                     	;# 
   616  0211                     	;# 
   617  0212                     	;# 
   618  0212                     	;# 
   619  0213                     	;# 
   620  0213                     	;# 
   621  0214                     	;# 
   622  0214                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0216                     	;# 
   627  0216                     	;# 
   628  0217                     	;# 
   629  0217                     	;# 
   630  0291                     	;# 
   631  0291                     	;# 
   632  0292                     	;# 
   633  0293                     	;# 
   634  0294                     	;# 
   635  0295                     	;# 
   636  0295                     	;# 
   637  0296                     	;# 
   638  0391                     	;# 
   639  0392                     	;# 
   640  0393                     	;# 
   641  039A                     	;# 
   642  039C                     	;# 
   643  039D                     	;# 
   644  039E                     	;# 
   645  039F                     	;# 
   646  0FE4                     	;# 
   647  0FE5                     	;# 
   648  0FE6                     	;# 
   649  0FE7                     	;# 
   650  0FE8                     	;# 
   651  0FE9                     	;# 
   652  0FEA                     	;# 
   653  0FEB                     	;# 
   654  0FED                     	;# 
   655  0FEE                     	;# 
   656  0FEF                     	;# 
   657  0000                     	;# 
   658  0001                     	;# 
   659  0002                     	;# 
   660  0003                     	;# 
   661  0004                     	;# 
   662  0005                     	;# 
   663  0006                     	;# 
   664  0007                     	;# 
   665  0008                     	;# 
   666  0009                     	;# 
   667  000A                     	;# 
   668  000B                     	;# 
   669  000C                     	;# 
   670  000E                     	;# 
   671  0011                     	;# 
   672  0012                     	;# 
   673  0015                     	;# 
   674  0016                     	;# 
   675  0016                     	;# 
   676  0017                     	;# 
   677  0018                     	;# 
   678  0019                     	;# 
   679  001A                     	;# 
   680  001B                     	;# 
   681  001C                     	;# 
   682  001E                     	;# 
   683  001F                     	;# 
   684  008C                     	;# 
   685  008E                     	;# 
   686  0091                     	;# 
   687  0092                     	;# 
   688  0095                     	;# 
   689  0096                     	;# 
   690  0097                     	;# 
   691  0098                     	;# 
   692  0099                     	;# 
   693  009A                     	;# 
   694  009B                     	;# 
   695  009B                     	;# 
   696  009C                     	;# 
   697  009D                     	;# 
   698  009E                     	;# 
   699  010C                     	;# 
   700  010E                     	;# 
   701  0111                     	;# 
   702  0112                     	;# 
   703  0113                     	;# 
   704  0114                     	;# 
   705  0115                     	;# 
   706  0116                     	;# 
   707  0117                     	;# 
   708  0118                     	;# 
   709  0119                     	;# 
   710  011A                     	;# 
   711  011B                     	;# 
   712  011D                     	;# 
   713  011D                     	;# 
   714  018C                     	;# 
   715  018E                     	;# 
   716  0191                     	;# 
   717  0191                     	;# 
   718  0192                     	;# 
   719  0193                     	;# 
   720  0193                     	;# 
   721  0193                     	;# 
   722  0194                     	;# 
   723  0195                     	;# 
   724  0196                     	;# 
   725  0199                     	;# 
   726  019A                     	;# 
   727  019B                     	;# 
   728  019B                     	;# 
   729  019B                     	;# 
   730  019B                     	;# 
   731  019C                     	;# 
   732  019C                     	;# 
   733  019D                     	;# 
   734  019E                     	;# 
   735  019F                     	;# 
   736  020C                     	;# 
   737  020E                     	;# 
   738  0211                     	;# 
   739  0211                     	;# 
   740  0212                     	;# 
   741  0212                     	;# 
   742  0213                     	;# 
   743  0213                     	;# 
   744  0214                     	;# 
   745  0214                     	;# 
   746  0215                     	;# 
   747  0215                     	;# 
   748  0215                     	;# 
   749  0216                     	;# 
   750  0216                     	;# 
   751  0217                     	;# 
   752  0217                     	;# 
   753  0291                     	;# 
   754  0291                     	;# 
   755  0292                     	;# 
   756  0293                     	;# 
   757  0294                     	;# 
   758  0295                     	;# 
   759  0295                     	;# 
   760  0296                     	;# 
   761  0391                     	;# 
   762  0392                     	;# 
   763  0393                     	;# 
   764  039A                     	;# 
   765  039C                     	;# 
   766  039D                     	;# 
   767  039E                     	;# 
   768  039F                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000E                     	;# 
   794  0011                     	;# 
   795  0012                     	;# 
   796  0015                     	;# 
   797  0016                     	;# 
   798  0016                     	;# 
   799  0017                     	;# 
   800  0018                     	;# 
   801  0019                     	;# 
   802  001A                     	;# 
   803  001B                     	;# 
   804  001C                     	;# 
   805  001E                     	;# 
   806  001F                     	;# 
   807  008C                     	;# 
   808  008E                     	;# 
   809  0091                     	;# 
   810  0092                     	;# 
   811  0095                     	;# 
   812  0096                     	;# 
   813  0097                     	;# 
   814  0098                     	;# 
   815  0099                     	;# 
   816  009A                     	;# 
   817  009B                     	;# 
   818  009B                     	;# 
   819  009C                     	;# 
   820  009D                     	;# 
   821  009E                     	;# 
   822  010C                     	;# 
   823  010E                     	;# 
   824  0111                     	;# 
   825  0112                     	;# 
   826  0113                     	;# 
   827  0114                     	;# 
   828  0115                     	;# 
   829  0116                     	;# 
   830  0117                     	;# 
   831  0118                     	;# 
   832  0119                     	;# 
   833  011A                     	;# 
   834  011B                     	;# 
   835  011D                     	;# 
   836  011D                     	;# 
   837  018C                     	;# 
   838  018E                     	;# 
   839  0191                     	;# 
   840  0191                     	;# 
   841  0192                     	;# 
   842  0193                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0194                     	;# 
   846  0195                     	;# 
   847  0196                     	;# 
   848  0199                     	;# 
   849  019A                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019D                     	;# 
   857  019E                     	;# 
   858  019F                     	;# 
   859  020C                     	;# 
   860  020E                     	;# 
   861  0211                     	;# 
   862  0211                     	;# 
   863  0212                     	;# 
   864  0212                     	;# 
   865  0213                     	;# 
   866  0213                     	;# 
   867  0214                     	;# 
   868  0214                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0215                     	;# 
   872  0216                     	;# 
   873  0216                     	;# 
   874  0217                     	;# 
   875  0217                     	;# 
   876  0291                     	;# 
   877  0291                     	;# 
   878  0292                     	;# 
   879  0293                     	;# 
   880  0294                     	;# 
   881  0295                     	;# 
   882  0295                     	;# 
   883  0296                     	;# 
   884  0391                     	;# 
   885  0392                     	;# 
   886  0393                     	;# 
   887  039A                     	;# 
   888  039C                     	;# 
   889  039D                     	;# 
   890  039E                     	;# 
   891  039F                     	;# 
   892  0FE4                     	;# 
   893  0FE5                     	;# 
   894  0FE6                     	;# 
   895  0FE7                     	;# 
   896  0FE8                     	;# 
   897  0FE9                     	;# 
   898  0FEA                     	;# 
   899  0FEB                     	;# 
   900  0FED                     	;# 
   901  0FEE                     	;# 
   902  0FEF                     	;# 
   903  0000                     	;# 
   904  0001                     	;# 
   905  0002                     	;# 
   906  0003                     	;# 
   907  0004                     	;# 
   908  0005                     	;# 
   909  0006                     	;# 
   910  0007                     	;# 
   911  0008                     	;# 
   912  0009                     	;# 
   913  000A                     	;# 
   914  000B                     	;# 
   915  000C                     	;# 
   916  000E                     	;# 
   917  0011                     	;# 
   918  0012                     	;# 
   919  0015                     	;# 
   920  0016                     	;# 
   921  0016                     	;# 
   922  0017                     	;# 
   923  0018                     	;# 
   924  0019                     	;# 
   925  001A                     	;# 
   926  001B                     	;# 
   927  001C                     	;# 
   928  001E                     	;# 
   929  001F                     	;# 
   930  008C                     	;# 
   931  008E                     	;# 
   932  0091                     	;# 
   933  0092                     	;# 
   934  0095                     	;# 
   935  0096                     	;# 
   936  0097                     	;# 
   937  0098                     	;# 
   938  0099                     	;# 
   939  009A                     	;# 
   940  009B                     	;# 
   941  009B                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  010C                     	;# 
   946  010E                     	;# 
   947  0111                     	;# 
   948  0112                     	;# 
   949  0113                     	;# 
   950  0114                     	;# 
   951  0115                     	;# 
   952  0116                     	;# 
   953  0117                     	;# 
   954  0118                     	;# 
   955  0119                     	;# 
   956  011A                     	;# 
   957  011B                     	;# 
   958  011D                     	;# 
   959  011D                     	;# 
   960  018C                     	;# 
   961  018E                     	;# 
   962  0191                     	;# 
   963  0191                     	;# 
   964  0192                     	;# 
   965  0193                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0194                     	;# 
   969  0195                     	;# 
   970  0196                     	;# 
   971  0199                     	;# 
   972  019A                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  019C                     	;# 
   979  019D                     	;# 
   980  019E                     	;# 
   981  019F                     	;# 
   982  020C                     	;# 
   983  020E                     	;# 
   984  0211                     	;# 
   985  0211                     	;# 
   986  0212                     	;# 
   987  0212                     	;# 
   988  0213                     	;# 
   989  0213                     	;# 
   990  0214                     	;# 
   991  0214                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0215                     	;# 
   995  0216                     	;# 
   996  0216                     	;# 
   997  0217                     	;# 
   998  0217                     	;# 
   999  0291                     	;# 
  1000  0291                     	;# 
  1001  0292                     	;# 
  1002  0293                     	;# 
  1003  0294                     	;# 
  1004  0295                     	;# 
  1005  0295                     	;# 
  1006  0296                     	;# 
  1007  0391                     	;# 
  1008  0392                     	;# 
  1009  0393                     	;# 
  1010  039A                     	;# 
  1011  039C                     	;# 
  1012  039D                     	;# 
  1013  039E                     	;# 
  1014  039F                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000E                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0015                     	;# 
  1043  0016                     	;# 
  1044  0016                     	;# 
  1045  0017                     	;# 
  1046  0018                     	;# 
  1047  0019                     	;# 
  1048  001A                     	;# 
  1049  001B                     	;# 
  1050  001C                     	;# 
  1051  001E                     	;# 
  1052  001F                     	;# 
  1053  008C                     	;# 
  1054  008E                     	;# 
  1055  0091                     	;# 
  1056  0092                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0098                     	;# 
  1061  0099                     	;# 
  1062  009A                     	;# 
  1063  009B                     	;# 
  1064  009B                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  010C                     	;# 
  1069  010E                     	;# 
  1070  0111                     	;# 
  1071  0112                     	;# 
  1072  0113                     	;# 
  1073  0114                     	;# 
  1074  0115                     	;# 
  1075  0116                     	;# 
  1076  0117                     	;# 
  1077  0118                     	;# 
  1078  0119                     	;# 
  1079  011A                     	;# 
  1080  011B                     	;# 
  1081  011D                     	;# 
  1082  011D                     	;# 
  1083  018C                     	;# 
  1084  018E                     	;# 
  1085  0191                     	;# 
  1086  0191                     	;# 
  1087  0192                     	;# 
  1088  0193                     	;# 
  1089  0193                     	;# 
  1090  0193                     	;# 
  1091  0194                     	;# 
  1092  0195                     	;# 
  1093  0196                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019C                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019E                     	;# 
  1104  019F                     	;# 
  1105  020C                     	;# 
  1106  020E                     	;# 
  1107  0211                     	;# 
  1108  0211                     	;# 
  1109  0212                     	;# 
  1110  0212                     	;# 
  1111  0213                     	;# 
  1112  0213                     	;# 
  1113  0214                     	;# 
  1114  0214                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0216                     	;# 
  1119  0216                     	;# 
  1120  0217                     	;# 
  1121  0217                     	;# 
  1122  0291                     	;# 
  1123  0291                     	;# 
  1124  0292                     	;# 
  1125  0293                     	;# 
  1126  0294                     	;# 
  1127  0295                     	;# 
  1128  0295                     	;# 
  1129  0296                     	;# 
  1130  0391                     	;# 
  1131  0392                     	;# 
  1132  0393                     	;# 
  1133  039A                     	;# 
  1134  039C                     	;# 
  1135  039D                     	;# 
  1136  039E                     	;# 
  1137  039F                     	;# 
  1138  0FE4                     	;# 
  1139  0FE5                     	;# 
  1140  0FE6                     	;# 
  1141  0FE7                     	;# 
  1142  0FE8                     	;# 
  1143  0FE9                     	;# 
  1144  0FEA                     	;# 
  1145  0FEB                     	;# 
  1146  0FED                     	;# 
  1147  0FEE                     	;# 
  1148  0FEF                     	;# 
  1149  0000                     	;# 
  1150  0001                     	;# 
  1151  0002                     	;# 
  1152  0003                     	;# 
  1153  0004                     	;# 
  1154  0005                     	;# 
  1155  0006                     	;# 
  1156  0007                     	;# 
  1157  0008                     	;# 
  1158  0009                     	;# 
  1159  000A                     	;# 
  1160  000B                     	;# 
  1161  000C                     	;# 
  1162  000E                     	;# 
  1163  0011                     	;# 
  1164  0012                     	;# 
  1165  0015                     	;# 
  1166  0016                     	;# 
  1167  0016                     	;# 
  1168  0017                     	;# 
  1169  0018                     	;# 
  1170  0019                     	;# 
  1171  001A                     	;# 
  1172  001B                     	;# 
  1173  001C                     	;# 
  1174  001E                     	;# 
  1175  001F                     	;# 
  1176  008C                     	;# 
  1177  008E                     	;# 
  1178  0091                     	;# 
  1179  0092                     	;# 
  1180  0095                     	;# 
  1181  0096                     	;# 
  1182  0097                     	;# 
  1183  0098                     	;# 
  1184  0099                     	;# 
  1185  009A                     	;# 
  1186  009B                     	;# 
  1187  009B                     	;# 
  1188  009C                     	;# 
  1189  009D                     	;# 
  1190  009E                     	;# 
  1191  010C                     	;# 
  1192  010E                     	;# 
  1193  0111                     	;# 
  1194  0112                     	;# 
  1195  0113                     	;# 
  1196  0114                     	;# 
  1197  0115                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  0118                     	;# 
  1201  0119                     	;# 
  1202  011A                     	;# 
  1203  011B                     	;# 
  1204  011D                     	;# 
  1205  011D                     	;# 
  1206  018C                     	;# 
  1207  018E                     	;# 
  1208  0191                     	;# 
  1209  0191                     	;# 
  1210  0192                     	;# 
  1211  0193                     	;# 
  1212  0193                     	;# 
  1213  0193                     	;# 
  1214  0194                     	;# 
  1215  0195                     	;# 
  1216  0196                     	;# 
  1217  0199                     	;# 
  1218  019A                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019C                     	;# 
  1224  019C                     	;# 
  1225  019D                     	;# 
  1226  019E                     	;# 
  1227  019F                     	;# 
  1228  020C                     	;# 
  1229  020E                     	;# 
  1230  0211                     	;# 
  1231  0211                     	;# 
  1232  0212                     	;# 
  1233  0212                     	;# 
  1234  0213                     	;# 
  1235  0213                     	;# 
  1236  0214                     	;# 
  1237  0214                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0294                     	;# 
  1250  0295                     	;# 
  1251  0295                     	;# 
  1252  0296                     	;# 
  1253  0391                     	;# 
  1254  0392                     	;# 
  1255  0393                     	;# 
  1256  039A                     	;# 
  1257  039C                     	;# 
  1258  039D                     	;# 
  1259  039E                     	;# 
  1260  039F                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272                           
  1273                           	psect	idataBANK0
  1274  051C                     __pidataBANK0:	
  1275                           
  1276                           ;initializer for _LED_state
  1277  051C  3401               	retlw	1
  1278  000B                     _INTCONbits	set	11
  1279  0011                     _PIR1bits	set	17
  1280  000C                     _PORTAbits	set	12
  1281  001B                     _PR2	set	27
  1282  001C                     _T2CON	set	28
  1283  001C                     _T2CONbits	set	28
  1284  0015                     _TMR0	set	21
  1285  001A                     _TMR2	set	26
  1286  0095                     _OPTION_REG	set	149
  1287  0095                     _OPTION_REGbits	set	149
  1288  0099                     _OSCCON	set	153
  1289  009A                     _OSCSTAT	set	154
  1290  0098                     _OSCTUNE	set	152
  1291  0091                     _PIE1bits	set	145
  1292  008C                     _TRISA	set	140
  1293  008E                     _TRISC	set	142
  1294  04D6                     _PLLR	set	1238
  1295  011D                     _APFCON	set	285
  1296  010C                     _LATA	set	268
  1297  010E                     _LATC	set	270
  1298  0865                     _LATA5	set	2149
  1299  018C                     _ANSELA	set	396
  1300  018E                     _ANSELC	set	398
  1301  019F                     _BAUDCON	set	415
  1302  0192                     _EEADRH	set	402
  1303  0191                     _EEADRL	set	401
  1304  0195                     _EECON1bits	set	405
  1305  0196                     _EECON2	set	406
  1306  0194                     _EEDATH	set	404
  1307  0193                     _EEDATL	set	403
  1308  0199                     _RCREG	set	409
  1309  019D                     _RCSTA	set	413
  1310  019D                     _RCSTAbits	set	413
  1311  019C                     _SPBRGH	set	412
  1312  019B                     _SPBRGL	set	411
  1313  019A                     _TXREG	set	410
  1314  019E                     _TXSTA	set	414
  1315  020C                     _WPUA	set	524
  1316  020E                     _WPUC	set	526
  1317  0293                     _CCP1CON	set	659
  1318  0292                     _CCPR1H	set	658
  1319  0291                     _CCPR1L	set	657
  1320  0295                     _ECCP1AS	set	661
  1321  0296                     _PSTR1CON	set	662
  1322  0294                     _PWM1CON	set	660
  1323                           
  1324                           	psect	stringtext
  1325  02ED                     __pstringtext:	
  1326  02ED                     STR_1:	
  1327  02ED  3424               	retlw	36	;'$'
  1328  02EE  3450               	retlw	80	;'P'
  1329  02EF  344D               	retlw	77	;'M'
  1330  02F0  3454               	retlw	84	;'T'
  1331  02F1  344B               	retlw	75	;'K'
  1332  02F2  3433               	retlw	51	;'3'
  1333  02F3  3431               	retlw	49	;'1'
  1334  02F4  3434               	retlw	52	;'4'
  1335  02F5  342C               	retlw	44	;','
  1336  02F6  3430               	retlw	48	;'0'
  1337  02F7  342C               	retlw	44	;','
  1338  02F8  3430               	retlw	48	;'0'
  1339  02F9  342C               	retlw	44	;','
  1340  02FA  3431               	retlw	49	;'1'
  1341  02FB  342C               	retlw	44	;','
  1342  02FC  3430               	retlw	48	;'0'
  1343  02FD  342C               	retlw	44	;','
  1344  02FE  3430               	retlw	48	;'0'
  1345  02FF  342C               	retlw	44	;','
  1346  0300  3430               	retlw	48	;'0'
  1347  0301  342C               	retlw	44	;','
  1348  0302  3430               	retlw	48	;'0'
  1349  0303  342C               	retlw	44	;','
  1350  0304  3430               	retlw	48	;'0'
  1351  0305  342C               	retlw	44	;','
  1352  0306  3430               	retlw	48	;'0'
  1353  0307  342C               	retlw	44	;','
  1354  0308  3430               	retlw	48	;'0'
  1355  0309  342C               	retlw	44	;','
  1356  030A  3430               	retlw	48	;'0'
  1357  030B  342C               	retlw	44	;','
  1358  030C  3430               	retlw	48	;'0'
  1359  030D  342C               	retlw	44	;','
  1360  030E  3430               	retlw	48	;'0'
  1361  030F  342C               	retlw	44	;','
  1362  0310  3430               	retlw	48	;'0'
  1363  0311  342C               	retlw	44	;','
  1364  0312  3430               	retlw	48	;'0'
  1365  0313  342C               	retlw	44	;','
  1366  0314  3430               	retlw	48	;'0'
  1367  0315  342C               	retlw	44	;','
  1368  0316  3430               	retlw	48	;'0'
  1369  0317  342C               	retlw	44	;','
  1370  0318  3430               	retlw	48	;'0'
  1371  0319  342C               	retlw	44	;','
  1372  031A  3430               	retlw	48	;'0'
  1373  031B  342A               	retlw	42	;'*'
  1374  031C  3432               	retlw	50	;'2'
  1375  031D  3439               	retlw	57	;'9'
  1376  031E  340D               	retlw	13
  1377  031F  340A               	retlw	10
  1378  0320  3400               	retlw	0
  1379  0321                     STR_2:	
  1380  0321  3424               	retlw	36	;'$'
  1381  0322  3450               	retlw	80	;'P'
  1382  0323  344D               	retlw	77	;'M'
  1383  0324  3454               	retlw	84	;'T'
  1384  0325  344B               	retlw	75	;'K'
  1385  0326  3432               	retlw	50	;'2'
  1386  0327  3432               	retlw	50	;'2'
  1387  0328  3430               	retlw	48	;'0'
  1388  0329  342C               	retlw	44	;','
  1389  032A  3431               	retlw	49	;'1'
  1390  032B  3430               	retlw	48	;'0'
  1391  032C  3430               	retlw	48	;'0'
  1392  032D  342A               	retlw	42	;'*'
  1393  032E  3432               	retlw	50	;'2'
  1394  032F  3446               	retlw	70	;'F'
  1395  0330  340D               	retlw	13
  1396  0331  340A               	retlw	10
  1397  0332  3400               	retlw	0
  1398                           
  1399                           ; #config settings
  1400  0000                     
  1401                           	psect	cinit
  1402  0025                     start_initialization:	
  1403  0025                     __initialization:	
  1404                           
  1405                           ; Initialize objects allocated to BANK0
  1406  0025  251C               	fcall	__pidataBANK0	;fetch initializer
  1407  0026  00DD               	movwf	__pdataBANK0& (0+127)
  1408                           
  1409                           ; Clear objects allocated to COMMON
  1410  0027  01F0               	clrf	__pbssCOMMON& (0+127)
  1411  0028  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1412  0029  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1413  002A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1414  002B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1415                           
  1416                           ; Clear objects allocated to BANK0
  1417  002C  3020               	movlw	low __pbssBANK0
  1418  002D  0084               	movwf	4
  1419  002E  3000               	movlw	high __pbssBANK0
  1420  002F  0085               	movwf	5
  1421  0030  3024               	movlw	36
  1422  0031  2505               	fcall	clear_ram0
  1423  0032                     end_of_initialization:	
  1424                           ;End of C runtime variable initialization code
  1425                           
  1426  0032                     __end_of__initialization:	
  1427  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1428  0033  0020               	movlb	0
  1429  0034  2981               	ljmp	_main	;jump to C main() function
  1430                           
  1431                           	psect	bssCOMMON
  1432  0070                     __pbssCOMMON:	
  1433  0070                     _b_last_state:	
  1434  0070                     	ds	2
  1435  0072                     _LED_counter:	
  1436  0072                     	ds	1
  1437  0073                     _b_count_pressed:	
  1438  0073                     	ds	1
  1439  0074                     _eusartTxBufferRemaining:	
  1440  0074                     	ds	1
  1441                           
  1442                           	psect	bssBANK0
  1443  0020                     __pbssBANK0:	
  1444  0020                     _eusartRxBuffer:	
  1445  0020                     	ds	8
  1446  0028                     _eusartTxBuffer:	
  1447  0028                     	ds	8
  1448  0030                     TMR0_ISR@CountCallBack:	
  1449  0030                     	ds	2
  1450  0032                     _TMR0_InterruptHandler:	
  1451  0032                     	ds	2
  1452  0034                     _speed_dec:	
  1453  0034                     	ds	2
  1454  0036                     _speed_int:	
  1455  0036                     	ds	2
  1456  0038                     _b_confirmed_state:	
  1457  0038                     	ds	1
  1458  0039                     _b_count_released:	
  1459  0039                     	ds	1
  1460  003A                     _b_has_once_been_released:	
  1461  003A                     	ds	1
  1462  003B                     _b_push_confirmed:	
  1463  003B                     	ds	1
  1464  003C                     _b_release_confirmed:	
  1465  003C                     	ds	1
  1466  003D                     _eusartRxCount:	
  1467  003D                     	ds	1
  1468  003E                     _eusartRxHead:	
  1469  003E                     	ds	1
  1470  003F                     _eusartRxTail:	
  1471  003F                     	ds	1
  1472  0040                     _eusartTxHead:	
  1473  0040                     	ds	1
  1474  0041                     _eusartTxTail:	
  1475  0041                     	ds	1
  1476  0042                     _speed_units:	
  1477  0042                     	ds	1
  1478  0043                     _timer0ReloadVal:	
  1479  0043                     	ds	1
  1480                           
  1481                           	psect	dataBANK0
  1482  005D                     __pdataBANK0:	
  1483  005D                     _LED_state:	
  1484  005D                     	ds	1
  1485                           
  1486                           	psect	clrtext
  1487  0505                     clear_ram0:	
  1488                           ;	Called with FSR0 containing the base address, and
  1489                           ;	WREG with the size to clear
  1490                           
  1491  0505  0064               	clrwdt	;clear the watchdog before getting into this loop
  1492  0506                     clrloop0:	
  1493  0506  0180               	clrf	0	;clear RAM location pointed to by FSR
  1494  0507  3101               	addfsr 0,1
  1495  0508  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1496  0509  2D06               	goto	clrloop0	;have we reached the end yet?
  1497  050A  3400               	retlw	0	;all done for this memory range, return
  1498                           
  1499                           	psect	cstackCOMMON
  1500  0075                     __pcstackCOMMON:	
  1501  0075                     ?_EUSART_Read:	
  1502  0075                     ?_SYSTEM_Initialize:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0075                     ?_my10msTimerISR:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0075                     ?_LED_set_state:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0075                     ?_TMR2_StartTimer:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0075                     ?_LED_update_loop:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0075                     ??_LED_update_loop:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0075                     ?_button_update_loop:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0075                     ?_TMR0_DefaultInterruptHandler:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0075                     ??_TMR0_DefaultInterruptHandler:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0075                     ?_TMR0_CallBack:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0075                     ?_OSCILLATOR_Initialize:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0075                     ?_GPS_Initialize:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0075                     ?_GPS_read_speed:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0075                     ?_main:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0075                     ?_get_button_state:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0075                     ??_get_button_state:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0075                     ?_TMR2_Initialize:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0075                     ?_EUSART_Initialize:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0075                     ?_EUSART_Write:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0075                     ?_putch:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0075                     ?_EUSART_Transmit_ISR:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0075                     ??_EUSART_Transmit_ISR:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0075                     ?_EUSART_Receive_ISR:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0075                     ??_EUSART_Receive_ISR:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0075                     ?_EPWM_Initialize:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0075                     ?_TMR0_Initialize:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0075                     ?_TMR0_ISR:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0075                     ?_PIN_MANAGER_Initialize:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0075                     ?_INTERRUPT_InterruptManager:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0075                     get_button_state@state:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592                           
  1593                           ; 1 bytes @ 0x0
  1594  0075                     	ds	1
  1595  0076                     ??_button_update_loop:	
  1596                           
  1597                           ; 1 bytes @ 0x1
  1598  0076                     	ds	2
  1599  0078                     button_update_loop@current_state:	
  1600                           
  1601                           ; 1 bytes @ 0x3
  1602  0078                     	ds	1
  1603  0079                     ??_my10msTimerISR:	
  1604  0079                     ??_TMR0_CallBack:	
  1605                           ; 1 bytes @ 0x4
  1606                           
  1607  0079                     ??_TMR0_ISR:	
  1608                           ; 1 bytes @ 0x4
  1609                           
  1610  0079                     ??_INTERRUPT_InterruptManager:	
  1611                           ; 1 bytes @ 0x4
  1612                           
  1613                           
  1614                           ; 1 bytes @ 0x4
  1615  0079                     	ds	1
  1616                           
  1617                           	psect	cstackBANK0
  1618  0044                     __pcstackBANK0:	
  1619  0044                     ??_EUSART_Read:	
  1620  0044                     ?_TMR0_SetInterruptHandler:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0044                     ??_LED_set_state:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0044                     ?_EPWM_LoadDutyValue:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0044                     ??_TMR2_StartTimer:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0044                     ??_OSCILLATOR_Initialize:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0044                     ??_TMR2_Initialize:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0044                     ??_EUSART_Initialize:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0044                     ??_EUSART_Write:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0044                     ??_EPWM_Initialize:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0044                     ??_PIN_MANAGER_Initialize:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0044                     EPWM_LoadDutyValue@dutyValue:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0044                     TMR0_SetInterruptHandler@InterruptHandler:	
  1654                           ; 2 bytes @ 0x0
  1655                           
  1656                           
  1657                           ; 2 bytes @ 0x0
  1658  0044                     	ds	1
  1659  0045                     LED_set_state@new_state:	
  1660  0045                     EUSART_Read@readValue:	
  1661                           ; 1 bytes @ 0x1
  1662                           
  1663  0045                     EUSART_Write@txData:	
  1664                           ; 1 bytes @ 0x1
  1665                           
  1666                           
  1667                           ; 1 bytes @ 0x1
  1668  0045                     	ds	1
  1669  0046                     ??_TMR0_SetInterruptHandler:	
  1670  0046                     ??_EPWM_LoadDutyValue:	
  1671                           ; 1 bytes @ 0x2
  1672                           
  1673  0046                     ??_GPS_read_speed:	
  1674                           ; 1 bytes @ 0x2
  1675                           
  1676  0046                     ??_putch:	
  1677                           ; 1 bytes @ 0x2
  1678                           
  1679  0046                     ??_TMR0_Initialize:	
  1680                           ; 1 bytes @ 0x2
  1681                           
  1682  0046                     putch@txData:	
  1683                           ; 1 bytes @ 0x2
  1684                           
  1685                           
  1686                           ; 1 bytes @ 0x2
  1687  0046                     	ds	1
  1688  0047                     ??_SYSTEM_Initialize:	
  1689  0047                     ?_printf:	
  1690                           ; 1 bytes @ 0x3
  1691                           
  1692  0047                     GPS_read_speed@tmp:	
  1693                           ; 2 bytes @ 0x3
  1694                           
  1695  0047                     printf@f:	
  1696                           ; 1 bytes @ 0x3
  1697                           
  1698                           
  1699                           ; 2 bytes @ 0x3
  1700  0047                     	ds	1
  1701  0048                     GPS_read_speed@buffer:	
  1702                           
  1703                           ; 6 bytes @ 0x4
  1704  0048                     	ds	1
  1705  0049                     ??_printf:	
  1706                           
  1707                           ; 1 bytes @ 0x5
  1708  0049                     	ds	3
  1709  004C                     printf@ap:	
  1710                           
  1711                           ; 1 bytes @ 0x8
  1712  004C                     	ds	1
  1713  004D                     printf@c:	
  1714                           
  1715                           ; 1 bytes @ 0x9
  1716  004D                     	ds	1
  1717  004E                     ??_GPS_Initialize:	
  1718  004E                     GPS_read_speed@checksum:	
  1719                           ; 1 bytes @ 0xA
  1720                           
  1721                           
  1722                           ; 1 bytes @ 0xA
  1723  004E                     	ds	1
  1724  004F                     GPS_read_speed@i_buff:	
  1725                           
  1726                           ; 1 bytes @ 0xB
  1727  004F                     	ds	1
  1728  0050                     GPS_read_speed@m_char:	
  1729                           
  1730                           ; 1 bytes @ 0xC
  1731  0050                     	ds	1
  1732  0051                     GPS_Initialize@tmp:	
  1733                           
  1734                           ; 1 bytes @ 0xD
  1735  0051                     	ds	1
  1736  0052                     ??_main:	
  1737                           
  1738                           ; 1 bytes @ 0xE
  1739  0052                     	ds	3
  1740  0055                     main@res:	
  1741                           
  1742                           ; 1 bytes @ 0x11
  1743  0055                     	ds	1
  1744  0056                     main@up:	
  1745                           
  1746                           ; 1 bytes @ 0x12
  1747  0056                     	ds	1
  1748  0057                     main@tmp:	
  1749                           
  1750                           ; 1 bytes @ 0x13
  1751  0057                     	ds	1
  1752  0058                     main@tmp_154:	
  1753                           
  1754                           ; 1 bytes @ 0x14
  1755  0058                     	ds	1
  1756  0059                     main@tmp_156:	
  1757                           
  1758                           ; 1 bytes @ 0x15
  1759  0059                     	ds	1
  1760  005A                     main@tmp_157:	
  1761                           
  1762                           ; 1 bytes @ 0x16
  1763  005A                     	ds	1
  1764  005B                     main@motor_load:	
  1765                           
  1766                           ; 2 bytes @ 0x17
  1767  005B                     	ds	2
  1768                           
  1769                           	psect	maintext
  1770  0181                     __pmaintext:	
  1771 ;;
  1772 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1773 ;;
  1774 ;; *************** function _main *****************
  1775 ;; Defined at:
  1776 ;;		line 243 in file "main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  tmp             1   22[BANK0 ] unsigned char 
  1781 ;;  tmp             1   21[BANK0 ] unsigned char 
  1782 ;;  tmp             1   20[BANK0 ] unsigned char 
  1783 ;;  tmp             1   19[BANK0 ] unsigned char 
  1784 ;;  motor_load      2   23[BANK0 ] unsigned int 
  1785 ;;  up              1   18[BANK0 ] unsigned char 
  1786 ;;  res             1   17[BANK0 ] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : B1F/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1
  1796 ;;      Params:         0       0       0
  1797 ;;      Locals:         0       8       0
  1798 ;;      Temps:          0       3       0
  1799 ;;      Totals:         0      11       0
  1800 ;;Total ram usage:       11 bytes
  1801 ;; Hardware stack levels required when called:   10
  1802 ;; This function calls:
  1803 ;;		_EPWM_LoadDutyValue
  1804 ;;		_GPS_Initialize
  1805 ;;		_GPS_read_speed
  1806 ;;		_LED_set_state
  1807 ;;		_SYSTEM_Initialize
  1808 ;;		_TMR0_SetInterruptHandler
  1809 ;;		_TMR2_StartTimer
  1810 ;; This function is called by:
  1811 ;;		Startup code after reset
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _main
  1817  0181                     _main:	
  1818                           
  1819                           ;main.c: 246: SYSTEM_Initialize();
  1820                           
  1821                           ;incstack = 0
  1822                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1823  0181  24FE               	fcall	_SYSTEM_Initialize
  1824                           
  1825                           ;main.c: 247: TMR0_SetInterruptHandler(my10msTimerISR);
  1826  0182  3019               	movlw	low _my10msTimerISR
  1827  0183  0020               	movlb	0	; select bank0
  1828  0184  00C4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1829  0185  3005               	movlw	high _my10msTimerISR
  1830  0186  00C5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1831  0187  250B               	fcall	_TMR0_SetInterruptHandler
  1832                           
  1833                           ;main.c: 253: (INTCONbits.GIE = 1);
  1834  0188  178B               	bsf	11,7	;volatile
  1835                           
  1836                           ;main.c: 256: (INTCONbits.PEIE = 1);
  1837  0189  170B               	bsf	11,6	;volatile
  1838                           
  1839                           ;main.c: 318: LED_set_state(manual_mode);
  1840  018A  3004               	movlw	4
  1841  018B  23E2               	fcall	_LED_set_state
  1842                           
  1843                           ;main.c: 319: do { LATA5 = 0; } while(0);
  1844  018C  0022               	movlb	2	; select bank2
  1845  018D  128C               	bcf	12,5	;volatile
  1846                           
  1847                           ;main.c: 320: for(unsigned char tmp=0;tmp<(10*3);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1848  018E  0020               	movlb	0	; select bank0
  1849  018F  01D7               	clrf	main@tmp
  1850  0190  301E               	movlw	30
  1851  0191  0257               	subwf	main@tmp,w
  1852  0192  1803               	btfsc	3,0
  1853  0193  29A9               	goto	l2910
  1854  0194                     l2904:	
  1855  0194  3005               	movlw	5
  1856  0195  00D4               	movwf	??_main+2
  1857  0196  300F               	movlw	15
  1858  0197  00D3               	movwf	??_main+1
  1859  0198  30F4               	movlw	244
  1860  0199  00D2               	movwf	??_main
  1861  019A                     u2697:	
  1862  019A  0BD2               	decfsz	??_main,f
  1863  019B  299A               	goto	u2697
  1864  019C  0BD3               	decfsz	??_main+1,f
  1865  019D  299A               	goto	u2697
  1866  019E  0BD4               	decfsz	??_main+2,f
  1867  019F  299A               	goto	u2697
  1868  01A0  3001               	movlw	1
  1869  01A1  0020               	movlb	0	; select bank0
  1870  01A2  00D2               	movwf	??_main
  1871  01A3  0852               	movf	??_main,w
  1872  01A4  07D7               	addwf	main@tmp,f
  1873  01A5  301E               	movlw	30
  1874  01A6  0257               	subwf	main@tmp,w
  1875  01A7  1C03               	skipc
  1876  01A8  2994               	goto	l2904
  1877  01A9                     l2910:	
  1878                           
  1879                           ;main.c: 337: GPS_Initialize();
  1880  01A9  2333               	fcall	_GPS_Initialize
  1881  01AA                     l2912:	
  1882                           ;main.c: 340: bool res;
  1883                           ;main.c: 341: while (1)
  1884                           
  1885                           
  1886                           ;main.c: 342: {
  1887                           ;main.c: 343: res = GPS_read_speed();
  1888  01AA  2035               	fcall	_GPS_read_speed
  1889  01AB  0020               	movlb	0	; select bank0
  1890  01AC  00D2               	movwf	??_main
  1891  01AD  0852               	movf	??_main,w
  1892  01AE  00D5               	movwf	main@res
  1893                           
  1894                           ;main.c: 344: if (res)
  1895  01AF  0855               	movf	main@res,w
  1896  01B0  1903               	btfsc	3,2
  1897  01B1  29BE               	goto	l2918
  1898                           
  1899                           ;main.c: 345: {
  1900                           ;main.c: 346: do { LATA5 = 1; } while(0);
  1901  01B2  0022               	movlb	2	; select bank2
  1902  01B3  168C               	bsf	12,5	;volatile
  1903                           
  1904                           ;main.c: 347: _delay((unsigned long)((20)*(32000000/4000.0)));
  1905  01B4  30D0               	movlw	208
  1906  01B5  0020               	movlb	0	; select bank0
  1907  01B6  00D3               	movwf	??_main+1
  1908  01B7  30C9               	movlw	201
  1909  01B8  00D2               	movwf	??_main
  1910  01B9                     u2707:	
  1911  01B9  0BD2               	decfsz	??_main,f
  1912  01BA  29B9               	goto	u2707
  1913  01BB  0BD3               	decfsz	??_main+1,f
  1914  01BC  29B9               	goto	u2707
  1915  01BD  3200               	nop2
  1916  01BE                     l2918:	
  1917                           ;main.c: 348: }
  1918                           ;main.c: 349: do { LATA5 = 0; } while(0);
  1919                           
  1920  01BE  0022               	movlb	2	; select bank2
  1921  01BF  128C               	bcf	12,5	;volatile
  1922  01C0  29AA               	goto	l2912
  1923  01C1                     l2930:	
  1924                           ;main.c: 361: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1925                           
  1926                           ;main.c: 360: TMR2_StartTimer();
  1927                           
  1928                           ;main.c: 359: EPWM_LoadDutyValue(1023-motor_load);
  1929                           
  1930                           ;main.c: 353: }
  1931                           ;main.c: 358: uint16_t motor_load = 0;
  1932                           
  1933  01C1  3005               	movlw	5
  1934  01C2  00D4               	movwf	??_main+2
  1935  01C3  300F               	movlw	15
  1936  01C4  00D3               	movwf	??_main+1
  1937  01C5  30F4               	movlw	244
  1938  01C6  00D2               	movwf	??_main
  1939  01C7                     u2717:	
  1940  01C7  0BD2               	decfsz	??_main,f
  1941  01C8  29C7               	goto	u2717
  1942  01C9  0BD3               	decfsz	??_main+1,f
  1943  01CA  29C7               	goto	u2717
  1944  01CB  0BD4               	decfsz	??_main+2,f
  1945  01CC  29C7               	goto	u2717
  1946  01CD  3001               	movlw	1
  1947  01CE  0020               	movlb	0	; select bank0
  1948  01CF  00D2               	movwf	??_main
  1949  01D0  0852               	movf	??_main,w
  1950  01D1  07D8               	addwf	main@tmp_154,f
  1951  01D2  3032               	movlw	50
  1952  01D3  0258               	subwf	main@tmp_154,w
  1953  01D4  1C03               	skipc
  1954  01D5  29C1               	goto	l2930
  1955                           
  1956                           ;main.c: 363: bool up = 1;
  1957  01D6  01D6               	clrf	main@up
  1958  01D7  0AD6               	incf	main@up,f
  1959                           
  1960                           ;main.c: 383: EPWM_LoadDutyValue(0);
  1961  01D8  3000               	movlw	0
  1962  01D9  00C4               	movwf	EPWM_LoadDutyValue@dutyValue
  1963  01DA  00C5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  1964  01DB  241F               	fcall	_EPWM_LoadDutyValue
  1965                           
  1966                           ;main.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
  1967  01DC  3068               	movlw	104
  1968  01DD  0020               	movlb	0	; select bank0
  1969  01DE  00D3               	movwf	??_main+1
  1970  01DF  30E4               	movlw	228
  1971  01E0  00D2               	movwf	??_main
  1972  01E1                     u2727:	
  1973  01E1  0BD2               	decfsz	??_main,f
  1974  01E2  29E1               	goto	u2727
  1975  01E3  0BD3               	decfsz	??_main+1,f
  1976  01E4  29E1               	goto	u2727
  1977  01E5  0000               	nop
  1978                           
  1979                           ;main.c: 385: EPWM_LoadDutyValue(1023-148);
  1980  01E6  306B               	movlw	107
  1981  01E7  0020               	movlb	0	; select bank0
  1982  01E8  00C4               	movwf	EPWM_LoadDutyValue@dutyValue
  1983  01E9  3003               	movlw	3
  1984  01EA  00C5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  1985  01EB  241F               	fcall	_EPWM_LoadDutyValue
  1986                           
  1987                           ;main.c: 386: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1988  01EC  0020               	movlb	0	; select bank0
  1989  01ED  01D9               	clrf	main@tmp_156
  1990  01EE  3032               	movlw	50
  1991  01EF  0259               	subwf	main@tmp_156,w
  1992  01F0  1803               	btfsc	3,0
  1993  01F1  2A07               	goto	l2954
  1994  01F2                     l2948:	
  1995  01F2  3005               	movlw	5
  1996  01F3  00D4               	movwf	??_main+2
  1997  01F4  300F               	movlw	15
  1998  01F5  00D3               	movwf	??_main+1
  1999  01F6  30F4               	movlw	244
  2000  01F7  00D2               	movwf	??_main
  2001  01F8                     u2737:	
  2002  01F8  0BD2               	decfsz	??_main,f
  2003  01F9  29F8               	goto	u2737
  2004  01FA  0BD3               	decfsz	??_main+1,f
  2005  01FB  29F8               	goto	u2737
  2006  01FC  0BD4               	decfsz	??_main+2,f
  2007  01FD  29F8               	goto	u2737
  2008  01FE  3001               	movlw	1
  2009  01FF  0020               	movlb	0	; select bank0
  2010  0200  00D2               	movwf	??_main
  2011  0201  0852               	movf	??_main,w
  2012  0202  07D9               	addwf	main@tmp_156,f
  2013  0203  3032               	movlw	50
  2014  0204  0259               	subwf	main@tmp_156,w
  2015  0205  1C03               	skipc
  2016  0206  29F2               	goto	l2948
  2017  0207                     l2954:	
  2018                           ;main.c: 387: while (1)
  2019                           
  2020                           
  2021                           ;main.c: 388: {
  2022                           ;main.c: 389: if (up == 1)
  2023  0207  0020               	movlb	0	; select bank0
  2024  0208  0356               	decf	main@up,w
  2025  0209  1D03               	btfss	3,2
  2026  020A  2A10               	goto	l2958
  2027                           
  2028                           ;main.c: 390: motor_load += 1;
  2029  020B  3001               	movlw	1
  2030  020C  07DB               	addwf	main@motor_load,f
  2031  020D  3000               	movlw	0
  2032  020E  3DDC               	addwfc	main@motor_load+1,f
  2033  020F  2A14               	goto	l159
  2034  0210                     l2958:	
  2035                           
  2036                           ;main.c: 391: else
  2037                           ;main.c: 392: motor_load -= 1;
  2038  0210  3001               	movlw	1
  2039  0211  02DB               	subwf	main@motor_load,f
  2040  0212  3000               	movlw	0
  2041  0213  3BDC               	subwfb	main@motor_load+1,f
  2042  0214                     l159:	
  2043                           
  2044                           ;main.c: 393: if (motor_load > 300)
  2045  0214  3001               	movlw	1
  2046  0215  025C               	subwf	main@motor_load+1,w
  2047  0216  302D               	movlw	45
  2048  0217  1903               	skipnz
  2049  0218  025B               	subwf	main@motor_load,w
  2050  0219  1C03               	skipc
  2051  021A  2A1D               	goto	l2962
  2052                           
  2053                           ;main.c: 394: up = 0;
  2054  021B  01D6               	clrf	main@up
  2055  021C  2A51               	goto	l2984
  2056  021D                     l2962:	
  2057                           
  2058                           ;main.c: 395: else if (motor_load == 0)
  2059  021D  085B               	movf	main@motor_load,w
  2060  021E  045C               	iorwf	main@motor_load+1,w
  2061  021F  1D03               	btfss	3,2
  2062  0220  2A51               	goto	l2984
  2063                           
  2064                           ;main.c: 396: {
  2065                           ;main.c: 397: up = 1;
  2066  0221  01D6               	clrf	main@up
  2067  0222  0AD6               	incf	main@up,f
  2068                           
  2069                           ;main.c: 398: EPWM_LoadDutyValue(1023);
  2070  0223  30FF               	movlw	255
  2071  0224  00C4               	movwf	EPWM_LoadDutyValue@dutyValue
  2072  0225  3003               	movlw	3
  2073  0226  00C5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2074  0227  241F               	fcall	_EPWM_LoadDutyValue
  2075                           
  2076                           ;main.c: 399: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2077  0228  0020               	movlb	0	; select bank0
  2078  0229  01DA               	clrf	main@tmp_157
  2079  022A  3032               	movlw	50
  2080  022B  025A               	subwf	main@tmp_157,w
  2081  022C  1803               	btfsc	3,0
  2082  022D  2A43               	goto	l2980
  2083  022E                     l2974:	
  2084  022E  3005               	movlw	5
  2085  022F  00D4               	movwf	??_main+2
  2086  0230  300F               	movlw	15
  2087  0231  00D3               	movwf	??_main+1
  2088  0232  30F4               	movlw	244
  2089  0233  00D2               	movwf	??_main
  2090  0234                     u2747:	
  2091  0234  0BD2               	decfsz	??_main,f
  2092  0235  2A34               	goto	u2747
  2093  0236  0BD3               	decfsz	??_main+1,f
  2094  0237  2A34               	goto	u2747
  2095  0238  0BD4               	decfsz	??_main+2,f
  2096  0239  2A34               	goto	u2747
  2097  023A  3001               	movlw	1
  2098  023B  0020               	movlb	0	; select bank0
  2099  023C  00D2               	movwf	??_main
  2100  023D  0852               	movf	??_main,w
  2101  023E  07DA               	addwf	main@tmp_157,f
  2102  023F  3032               	movlw	50
  2103  0240  025A               	subwf	main@tmp_157,w
  2104  0241  1C03               	skipc
  2105  0242  2A2E               	goto	l2974
  2106  0243                     l2980:	
  2107                           
  2108                           ;main.c: 401: EPWM_LoadDutyValue(0);
  2109  0243  3000               	movlw	0
  2110  0244  00C4               	movwf	EPWM_LoadDutyValue@dutyValue
  2111  0245  00C5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2112  0246  241F               	fcall	_EPWM_LoadDutyValue
  2113                           
  2114                           ;main.c: 402: _delay((unsigned long)((10)*(32000000/4000.0)));
  2115  0247  3068               	movlw	104
  2116  0248  0020               	movlb	0	; select bank0
  2117  0249  00D3               	movwf	??_main+1
  2118  024A  30E4               	movlw	228
  2119  024B  00D2               	movwf	??_main
  2120  024C                     u2757:	
  2121  024C  0BD2               	decfsz	??_main,f
  2122  024D  2A4C               	goto	u2757
  2123  024E  0BD3               	decfsz	??_main+1,f
  2124  024F  2A4C               	goto	u2757
  2125  0250  0000               	nop
  2126  0251                     l2984:	
  2127                           
  2128                           ;main.c: 403: }
  2129                           ;main.c: 404: if (motor_load < 148)
  2130  0251  3000               	movlw	0
  2131  0252  0020               	movlb	0	; select bank0
  2132  0253  025C               	subwf	main@motor_load+1,w
  2133  0254  3094               	movlw	148
  2134  0255  1903               	skipnz
  2135  0256  025B               	subwf	main@motor_load,w
  2136  0257  1803               	skipnc
  2137  0258  2A5D               	goto	l2988
  2138                           
  2139                           ;main.c: 405: EPWM_LoadDutyValue(1023-135);
  2140  0259  3078               	movlw	120
  2141  025A  00C4               	movwf	EPWM_LoadDutyValue@dutyValue
  2142  025B  3003               	movlw	3
  2143  025C  2A6A               	goto	L1
  2144  025D                     l2988:	
  2145                           
  2146                           ;main.c: 406: else
  2147                           ;main.c: 407: EPWM_LoadDutyValue(1023-motor_load);
  2148  025D  0020               	movlb	0	; select bank0
  2149  025E  095B               	comf	main@motor_load,w
  2150  025F  00D2               	movwf	??_main
  2151  0260  095C               	comf	main@motor_load+1,w
  2152  0261  00D3               	movwf	??_main+1
  2153  0262  0AD2               	incf	??_main,f
  2154  0263  1903               	skipnz
  2155  0264  0AD3               	incf	??_main+1,f
  2156  0265  0852               	movf	??_main,w
  2157  0266  3EFF               	addlw	255
  2158  0267  00C4               	movwf	EPWM_LoadDutyValue@dutyValue
  2159  0268  3003               	movlw	3
  2160  0269  3D53               	addwfc	??_main+1,w
  2161  026A                     L1:	
  2162  026A  00C5               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2163  026B  241F               	fcall	_EPWM_LoadDutyValue
  2164                           
  2165                           ;main.c: 408: _delay((unsigned long)((50)*(32000000/4000.0)));
  2166  026C  3003               	movlw	3
  2167  026D  0020               	movlb	0	; select bank0
  2168  026E  00D4               	movwf	??_main+2
  2169  026F  3008               	movlw	8
  2170  0270  00D3               	movwf	??_main+1
  2171  0271  3078               	movlw	120
  2172  0272  00D2               	movwf	??_main
  2173  0273                     u2767:	
  2174  0273  0BD2               	decfsz	??_main,f
  2175  0274  2A73               	goto	u2767
  2176  0275  0BD3               	decfsz	??_main+1,f
  2177  0276  2A73               	goto	u2767
  2178  0277  0BD4               	decfsz	??_main+2,f
  2179  0278  2A73               	goto	u2767
  2180  0279  2A07               	goto	l2954
  2181  027A                     __end_of_main:	
  2182                           
  2183                           	psect	text1
  2184  04FE                     __ptext1:	
  2185 ;; *************** function _SYSTEM_Initialize *****************
  2186 ;; Defined at:
  2187 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0, pclath, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1
  2201 ;;      Params:         0       0       0
  2202 ;;      Locals:         0       0       0
  2203 ;;      Temps:          0       0       0
  2204 ;;      Totals:         0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    8
  2208 ;; This function calls:
  2209 ;;		_EPWM_Initialize
  2210 ;;		_EUSART_Initialize
  2211 ;;		_OSCILLATOR_Initialize
  2212 ;;		_PIN_MANAGER_Initialize
  2213 ;;		_TMR0_Initialize
  2214 ;;		_TMR2_Initialize
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _SYSTEM_Initialize
  2222  04FE                     _SYSTEM_Initialize:	
  2223                           
  2224                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2225                           
  2226                           ;incstack = 0
  2227                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2228  04FE  248C               	fcall	_PIN_MANAGER_Initialize
  2229                           
  2230                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2231  04FF  24F6               	fcall	_OSCILLATOR_Initialize
  2232                           
  2233                           ;mcc.c: 74: EPWM_Initialize();
  2234  0500  24CA               	fcall	_EPWM_Initialize
  2235                           
  2236                           ;mcc.c: 75: TMR2_Initialize();
  2237  0501  24ED               	fcall	_TMR2_Initialize
  2238                           
  2239                           ;mcc.c: 76: TMR0_Initialize();
  2240  0502  24A2               	fcall	_TMR0_Initialize
  2241                           
  2242                           ;mcc.c: 77: EUSART_Initialize();
  2243  0503  243B               	fcall	_EUSART_Initialize
  2244  0504  0008               	return
  2245  0505                     __end_of_SYSTEM_Initialize:	
  2246                           
  2247                           	psect	text2
  2248  04ED                     __ptext2:	
  2249 ;; *************** function _TMR2_Initialize *****************
  2250 ;; Defined at:
  2251 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, pclath, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0   BANK1
  2265 ;;      Params:         0       0       0
  2266 ;;      Locals:         0       0       0
  2267 ;;      Temps:          0       0       0
  2268 ;;      Totals:         0       0       0
  2269 ;;Total ram usage:        0 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    7
  2272 ;; This function calls:
  2273 ;;		_TMR2_StartTimer
  2274 ;; This function is called by:
  2275 ;;		_SYSTEM_Initialize
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           
  2280                           ;psect for function _TMR2_Initialize
  2281  04ED                     _TMR2_Initialize:	
  2282                           
  2283                           ;tmr2.c: 62: T2CON = 0x02;
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2287  04ED  3002               	movlw	2
  2288  04EE  0020               	movlb	0	; select bank0
  2289  04EF  009C               	movwf	28	;volatile
  2290                           
  2291                           ;tmr2.c: 65: PR2 = 0xFF;
  2292  04F0  30FF               	movlw	255
  2293  04F1  009B               	movwf	27	;volatile
  2294                           
  2295                           ;tmr2.c: 68: TMR2 = 0x00;
  2296  04F2  019A               	clrf	26	;volatile
  2297                           
  2298                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  2299  04F3  1091               	bcf	17,1	;volatile
  2300                           
  2301                           ;tmr2.c: 74: TMR2_StartTimer();
  2302  04F4  2516               	fcall	_TMR2_StartTimer
  2303  04F5  0008               	return
  2304  04F6                     __end_of_TMR2_Initialize:	
  2305                           
  2306                           	psect	text3
  2307  0516                     __ptext3:	
  2308 ;; *************** function _TMR2_StartTimer *****************
  2309 ;; Defined at:
  2310 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;		None
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;		None
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		None
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMMON   BANK0   BANK1
  2324 ;;      Params:         0       0       0
  2325 ;;      Locals:         0       0       0
  2326 ;;      Temps:          0       0       0
  2327 ;;      Totals:         0       0       0
  2328 ;;Total ram usage:        0 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    6
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_main
  2335 ;;		_TMR2_Initialize
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           
  2340                           ;psect for function _TMR2_StartTimer
  2341  0516                     _TMR2_StartTimer:	
  2342                           
  2343                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  2344                           
  2345                           ;incstack = 0
  2346                           ; Regs used in _TMR2_StartTimer: []
  2347  0516  0020               	movlb	0	; select bank0
  2348  0517  151C               	bsf	28,2	;volatile
  2349  0518  0008               	return
  2350  0519                     __end_of_TMR2_StartTimer:	
  2351                           
  2352                           	psect	text4
  2353  04A2                     __ptext4:	
  2354 ;; *************** function _TMR0_Initialize *****************
  2355 ;; Defined at:
  2356 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;		None
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;		None
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2, status,0, pclath, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMMON   BANK0   BANK1
  2370 ;;      Params:         0       0       0
  2371 ;;      Locals:         0       0       0
  2372 ;;      Temps:          0       1       0
  2373 ;;      Totals:         0       1       0
  2374 ;;Total ram usage:        1 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    7
  2377 ;; This function calls:
  2378 ;;		_TMR0_SetInterruptHandler
  2379 ;; This function is called by:
  2380 ;;		_SYSTEM_Initialize
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           
  2385                           ;psect for function _TMR0_Initialize
  2386  04A2                     _TMR0_Initialize:	
  2387                           
  2388                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  2389                           
  2390                           ;incstack = 0
  2391                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2392  04A2  0021               	movlb	1	; select bank1
  2393  04A3  0815               	movf	21,w	;volatile
  2394  04A4  39C0               	andlw	192
  2395  04A5  3817               	iorlw	23
  2396  04A6  0095               	movwf	21	;volatile
  2397                           
  2398                           ;tmr0.c: 71: TMR0 = 0x64;
  2399  04A7  3064               	movlw	100
  2400  04A8  0020               	movlb	0	; select bank0
  2401  04A9  0095               	movwf	21	;volatile
  2402                           
  2403                           ;tmr0.c: 74: timer0ReloadVal= 100;
  2404  04AA  3064               	movlw	100
  2405  04AB  00C6               	movwf	??_TMR0_Initialize
  2406  04AC  0846               	movf	??_TMR0_Initialize,w
  2407  04AD  00C3               	movwf	_timer0ReloadVal	;volatile
  2408                           
  2409                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  2410  04AE  110B               	bcf	11,2	;volatile
  2411                           
  2412                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  2413  04AF  168B               	bsf	11,5	;volatile
  2414                           
  2415                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2416  04B0  301D               	movlw	low _TMR0_DefaultInterruptHandler
  2417  04B1  00C4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2418  04B2  3005               	movlw	high _TMR0_DefaultInterruptHandler
  2419  04B3  00C5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2420  04B4  250B               	fcall	_TMR0_SetInterruptHandler
  2421  04B5  0008               	return
  2422  04B6                     __end_of_TMR0_Initialize:	
  2423                           
  2424                           	psect	text5
  2425  050B                     __ptext5:	
  2426 ;; *************** function _TMR0_SetInterruptHandler *****************
  2427 ;; Defined at:
  2428 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  2431 ;;		 -> TMR0_DefaultInterruptHandler(1), my10msTimerISR(1), 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1
  2443 ;;      Params:         0       2       0
  2444 ;;      Locals:         0       0       0
  2445 ;;      Temps:          0       0       0
  2446 ;;      Totals:         0       2       0
  2447 ;;Total ram usage:        2 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    6
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_main
  2454 ;;		_TMR0_Initialize
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           
  2459                           ;psect for function _TMR0_SetInterruptHandler
  2460  050B                     _TMR0_SetInterruptHandler:	
  2461                           
  2462                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  2463                           
  2464                           ;incstack = 0
  2465                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2466  050B  0020               	movlb	0	; select bank0
  2467  050C  0845               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2468  050D  00B3               	movwf	_TMR0_InterruptHandler+1
  2469  050E  0844               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2470  050F  00B2               	movwf	_TMR0_InterruptHandler
  2471  0510  0008               	return
  2472  0511                     __end_of_TMR0_SetInterruptHandler:	
  2473                           
  2474                           	psect	text6
  2475  048C                     __ptext6:	
  2476 ;; *************** function _PIN_MANAGER_Initialize *****************
  2477 ;; Defined at:
  2478 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;		None
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;		None
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMMON   BANK0   BANK1
  2492 ;;      Params:         0       0       0
  2493 ;;      Locals:         0       0       0
  2494 ;;      Temps:          0       0       0
  2495 ;;      Totals:         0       0       0
  2496 ;;Total ram usage:        0 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    6
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_SYSTEM_Initialize
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           
  2507                           ;psect for function _PIN_MANAGER_Initialize
  2508  048C                     _PIN_MANAGER_Initialize:	
  2509                           
  2510                           ;pin_manager.c: 51: LATA = 0x0;
  2511                           
  2512                           ;incstack = 0
  2513                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2514  048C  0022               	movlb	2	; select bank2
  2515  048D  018C               	clrf	12	;volatile
  2516                           
  2517                           ;pin_manager.c: 52: LATC = 0x0;
  2518  048E  018E               	clrf	14	;volatile
  2519                           
  2520                           ;pin_manager.c: 53: ANSELA = 0x7;
  2521  048F  3007               	movlw	7
  2522  0490  0023               	movlb	3	; select bank3
  2523  0491  008C               	movwf	12	;volatile
  2524                           
  2525                           ;pin_manager.c: 54: ANSELC = 0xF;
  2526  0492  300F               	movlw	15
  2527  0493  008E               	movwf	14	;volatile
  2528                           
  2529                           ;pin_manager.c: 55: WPUA = 0x3F;
  2530  0494  303F               	movlw	63
  2531  0495  0024               	movlb	4	; select bank4
  2532  0496  008C               	movwf	12	;volatile
  2533                           
  2534                           ;pin_manager.c: 56: WPUC = 0x3F;
  2535  0497  303F               	movlw	63
  2536  0498  008E               	movwf	14	;volatile
  2537                           
  2538                           ;pin_manager.c: 57: TRISC = 0x37;
  2539  0499  3037               	movlw	55
  2540  049A  0021               	movlb	1	; select bank1
  2541  049B  008E               	movwf	14	;volatile
  2542                           
  2543                           ;pin_manager.c: 58: TRISA = 0x1F;
  2544  049C  301F               	movlw	31
  2545  049D  008C               	movwf	12	;volatile
  2546                           
  2547                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  2548  049E  1395               	bcf	21,7	;volatile
  2549                           
  2550                           ;pin_manager.c: 61: APFCON = 0x00;
  2551  049F  0022               	movlb	2	; select bank2
  2552  04A0  019D               	clrf	29	;volatile
  2553  04A1  0008               	return
  2554  04A2                     __end_of_PIN_MANAGER_Initialize:	
  2555                           
  2556                           	psect	text7
  2557  04F6                     __ptext7:	
  2558 ;; *************** function _OSCILLATOR_Initialize *****************
  2559 ;; Defined at:
  2560 ;;		line 80 in file "mcc_generated_files/mcc.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;		None
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg, status,2
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMMON   BANK0   BANK1
  2574 ;;      Params:         0       0       0
  2575 ;;      Locals:         0       0       0
  2576 ;;      Temps:          0       0       0
  2577 ;;      Totals:         0       0       0
  2578 ;;Total ram usage:        0 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    6
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		_SYSTEM_Initialize
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           
  2589                           ;psect for function _OSCILLATOR_Initialize
  2590  04F6                     _OSCILLATOR_Initialize:	
  2591                           
  2592                           ;mcc.c: 83: OSCCON = 0x70;
  2593                           
  2594                           ;incstack = 0
  2595                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2596  04F6  3070               	movlw	112
  2597  04F7  0021               	movlb	1	; select bank1
  2598  04F8  0099               	movwf	25	;volatile
  2599                           
  2600                           ;mcc.c: 85: OSCSTAT = 0x00;
  2601  04F9  019A               	clrf	26	;volatile
  2602                           
  2603                           ;mcc.c: 87: OSCTUNE = 0x00;
  2604  04FA  0198               	clrf	24	;volatile
  2605  04FB                     l516:	
  2606                           ;mcc.c: 92: {
  2607                           
  2608                           ;mcc.c: 91: while(PLLR == 0)
  2609                           
  2610  04FB  1B1A               	btfsc	26,6	;volatile
  2611  04FC  0008               	return
  2612  04FD  2CFB               	goto	l516
  2613  04FE                     __end_of_OSCILLATOR_Initialize:	
  2614                           
  2615                           	psect	text8
  2616  043B                     __ptext8:	
  2617 ;; *************** function _EUSART_Initialize *****************
  2618 ;; Defined at:
  2619 ;;		line 75 in file "mcc_generated_files/eusart.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1
  2633 ;;      Params:         0       0       0
  2634 ;;      Locals:         0       0       0
  2635 ;;      Temps:          0       1       0
  2636 ;;      Totals:         0       1       0
  2637 ;;Total ram usage:        1 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    6
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_SYSTEM_Initialize
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           
  2648                           ;psect for function _EUSART_Initialize
  2649  043B                     _EUSART_Initialize:	
  2650                           
  2651                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  2652                           
  2653                           ;incstack = 0
  2654                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2655  043B  0021               	movlb	1	; select bank1
  2656  043C  1291               	bcf	17,5	;volatile
  2657                           
  2658                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  2659  043D  1211               	bcf	17,4	;volatile
  2660                           
  2661                           ;eusart.c: 84: BAUDCON = 0x08;
  2662  043E  3008               	movlw	8
  2663  043F  0023               	movlb	3	; select bank3
  2664  0440  009F               	movwf	31	;volatile
  2665                           
  2666                           ;eusart.c: 87: RCSTA = 0x90;
  2667  0441  3090               	movlw	144
  2668  0442  009D               	movwf	29	;volatile
  2669                           
  2670                           ;eusart.c: 90: TXSTA = 0x24;
  2671  0443  3024               	movlw	36
  2672  0444  009E               	movwf	30	;volatile
  2673                           
  2674                           ;eusart.c: 93: SPBRGL = 0x40;
  2675  0445  3040               	movlw	64
  2676  0446  009B               	movwf	27	;volatile
  2677                           
  2678                           ;eusart.c: 96: SPBRGH = 0x03;
  2679  0447  3003               	movlw	3
  2680  0448  009C               	movwf	28	;volatile
  2681                           
  2682                           ;eusart.c: 100: eusartTxHead = 0;
  2683  0449  0020               	movlb	0	; select bank0
  2684  044A  01C0               	clrf	_eusartTxHead
  2685                           
  2686                           ;eusart.c: 101: eusartTxTail = 0;
  2687  044B  01C1               	clrf	_eusartTxTail
  2688                           
  2689                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  2690  044C  3008               	movlw	8
  2691  044D  00C4               	movwf	??_EUSART_Initialize
  2692  044E  0844               	movf	??_EUSART_Initialize,w
  2693  044F  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  2694                           
  2695                           ;eusart.c: 104: eusartRxHead = 0;
  2696  0450  01BE               	clrf	_eusartRxHead
  2697                           
  2698                           ;eusart.c: 105: eusartRxTail = 0;
  2699  0451  01BF               	clrf	_eusartRxTail
  2700                           
  2701                           ;eusart.c: 106: eusartRxCount = 0;
  2702  0452  01BD               	clrf	_eusartRxCount	;volatile
  2703                           
  2704                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  2705  0453  0021               	movlb	1	; select bank1
  2706  0454  1691               	bsf	17,5	;volatile
  2707  0455  0008               	return
  2708  0456                     __end_of_EUSART_Initialize:	
  2709                           
  2710                           	psect	text9
  2711  04CA                     __ptext9:	
  2712 ;; *************** function _EPWM_Initialize *****************
  2713 ;; Defined at:
  2714 ;;		line 63 in file "mcc_generated_files/epwm.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1
  2728 ;;      Params:         0       0       0
  2729 ;;      Locals:         0       0       0
  2730 ;;      Temps:          0       0       0
  2731 ;;      Totals:         0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    6
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_SYSTEM_Initialize
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           
  2743                           ;psect for function _EPWM_Initialize
  2744  04CA                     _EPWM_Initialize:	
  2745                           
  2746                           ;epwm.c: 68: CCP1CON = 0x3C;
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in _EPWM_Initialize: [wreg+status,2]
  2750  04CA  303C               	movlw	60
  2751  04CB  0025               	movlb	5	; select bank5
  2752  04CC  0093               	movwf	19	;volatile
  2753                           
  2754                           ;epwm.c: 71: ECCP1AS = 0x00;
  2755  04CD  0195               	clrf	21	;volatile
  2756                           
  2757                           ;epwm.c: 74: PWM1CON = 0x80;
  2758  04CE  3080               	movlw	128
  2759  04CF  0094               	movwf	20	;volatile
  2760                           
  2761                           ;epwm.c: 77: PSTR1CON = 0x04;
  2762  04D0  3004               	movlw	4
  2763  04D1  0096               	movwf	22	;volatile
  2764                           
  2765                           ;epwm.c: 80: CCPR1L = 0x7F;
  2766  04D2  307F               	movlw	127
  2767  04D3  0091               	movwf	17	;volatile
  2768                           
  2769                           ;epwm.c: 83: CCPR1H = 0x00;
  2770  04D4  0192               	clrf	18	;volatile
  2771  04D5  0008               	return
  2772  04D6                     __end_of_EPWM_Initialize:	
  2773                           
  2774                           	psect	text10
  2775  03E2                     __ptext10:	
  2776 ;; *************** function _LED_set_state *****************
  2777 ;; Defined at:
  2778 ;;		line 7 in file "interact.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  new_state       1    wreg     enum E2607
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  new_state       1    1[BANK0 ] enum E2607
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1
  2792 ;;      Params:         0       0       0
  2793 ;;      Locals:         0       1       0
  2794 ;;      Temps:          0       1       0
  2795 ;;      Totals:         0       2       0
  2796 ;;Total ram usage:        2 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    6
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _LED_set_state
  2808  03E2                     _LED_set_state:	
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  2812                           ;LED_set_state@new_state stored from wreg
  2813  03E2  0020               	movlb	0	; select bank0
  2814  03E3  00C5               	movwf	LED_set_state@new_state
  2815                           
  2816                           ;interact.c: 9: LED_state = new_state;
  2817  03E4  0845               	movf	LED_set_state@new_state,w
  2818  03E5  00C4               	movwf	??_LED_set_state
  2819  03E6  0844               	movf	??_LED_set_state,w
  2820  03E7  00DD               	movwf	_LED_state
  2821                           
  2822                           ;interact.c: 10: if (new_state == always_off)
  2823  03E8  0345               	decf	LED_set_state@new_state,w
  2824  03E9  1D03               	btfss	3,2
  2825  03EA  2BEE               	goto	l2880
  2826                           
  2827                           ;interact.c: 11: do { LATA5 = 0; } while(0);
  2828  03EB  0022               	movlb	2	; select bank2
  2829  03EC  128C               	bcf	12,5	;volatile
  2830  03ED  0008               	return
  2831  03EE                     l2880:	
  2832                           
  2833                           ;interact.c: 12: else if (new_state == always_on)
  2834  03EE  0020               	movlb	0	; select bank0
  2835  03EF  0845               	movf	LED_set_state@new_state,w
  2836  03F0  1D03               	btfss	3,2
  2837  03F1  2BF5               	goto	l2882
  2838                           
  2839                           ;interact.c: 13: do { LATA5 = 1; } while(0);
  2840  03F2  0022               	movlb	2	; select bank2
  2841  03F3  168C               	bsf	12,5	;volatile
  2842  03F4  0008               	return
  2843  03F5                     l2882:	
  2844                           
  2845                           ;interact.c: 14: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  2846  03F5  3002               	movlw	2
  2847  03F6  0020               	movlb	0	; select bank0
  2848  03F7  0645               	xorwf	LED_set_state@new_state,w
  2849  03F8  1903               	btfsc	3,2
  2850  03F9  2BFE               	goto	l210
  2851  03FA  3003               	movlw	3
  2852  03FB  0645               	xorwf	LED_set_state@new_state,w
  2853  03FC  1D03               	btfss	3,2
  2854  03FD  0008               	return
  2855  03FE                     l210:	
  2856                           ;interact.c: 15: {
  2857                           ;interact.c: 16: do { LATA5 = 1; } while(0);
  2858                           
  2859  03FE  0022               	movlb	2	; select bank2
  2860  03FF  168C               	bsf	12,5	;volatile
  2861                           
  2862                           ;interact.c: 17: LED_counter = 0;
  2863  0400  01F2               	clrf	_LED_counter	;volatile
  2864  0401  0008               	return
  2865  0402                     __end_of_LED_set_state:	
  2866                           
  2867                           	psect	text11
  2868  0035                     __ptext11:	
  2869 ;; *************** function _GPS_read_speed *****************
  2870 ;; Defined at:
  2871 ;;		line 81 in file "main.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  buffer          6    4[BANK0 ] unsigned char [6]
  2876 ;;  m_char          1   12[BANK0 ] unsigned char 
  2877 ;;  i_buff          1   11[BANK0 ] unsigned char 
  2878 ;;  checksum        1   10[BANK0 ] unsigned char 
  2879 ;;  tmp             1    3[BANK0 ] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      unsigned char 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1
  2889 ;;      Params:         0       0       0
  2890 ;;      Locals:         0      10       0
  2891 ;;      Temps:          0       1       0
  2892 ;;      Totals:         0      11       0
  2893 ;;Total ram usage:       11 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    7
  2896 ;; This function calls:
  2897 ;;		_EUSART_Read
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _GPS_read_speed
  2905  0035                     _GPS_read_speed:	
  2906                           
  2907                           ;main.c: 85: unsigned char buffer[6];
  2908                           ;main.c: 86: unsigned char i_buff = 0;
  2909                           
  2910                           ;incstack = 0
  2911                           ; Regs used in _GPS_read_speed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2912  0035  0020               	movlb	0	; select bank0
  2913  0036  01CF               	clrf	GPS_read_speed@i_buff
  2914                           
  2915                           ;main.c: 87: unsigned char checksum = 0x00;
  2916  0037  01CE               	clrf	GPS_read_speed@checksum
  2917                           
  2918                           ;main.c: 89: unsigned char m_char = 0x00;
  2919  0038  01D0               	clrf	GPS_read_speed@m_char
  2920  0039                     l2648:	
  2921                           ;main.c: 90: while (m_char != '$')
  2922                           
  2923  0039  3024               	movlw	36
  2924  003A  0650               	xorwf	GPS_read_speed@m_char,w
  2925  003B  1903               	btfsc	3,2
  2926  003C  2846               	goto	l2650
  2927                           
  2928                           ;main.c: 91: if(eusartRxCount!=0)
  2929  003D  083D               	movf	_eusartRxCount,w	;volatile
  2930  003E  1903               	btfsc	3,2
  2931  003F  2839               	goto	l2648
  2932                           
  2933                           ;main.c: 92: m_char=EUSART_Read();
  2934  0040  23C0               	fcall	_EUSART_Read
  2935  0041  0020               	movlb	0	; select bank0
  2936  0042  00C6               	movwf	??_GPS_read_speed
  2937  0043  0846               	movf	??_GPS_read_speed,w
  2938  0044  00D0               	movwf	GPS_read_speed@m_char
  2939  0045  2839               	goto	l2648
  2940  0046                     l2650:	
  2941                           ;main.c: 96: while (1)
  2942                           
  2943                           
  2944                           ;main.c: 97: if (eusartRxCount!=0)
  2945  0046  083D               	movf	_eusartRxCount,w	;volatile
  2946  0047  1903               	btfsc	3,2
  2947  0048  2846               	goto	l2650
  2948                           
  2949                           ;main.c: 98: {
  2950                           ;main.c: 99: m_char=EUSART_Read();
  2951  0049  23C0               	fcall	_EUSART_Read
  2952  004A  0020               	movlb	0	; select bank0
  2953  004B  00C6               	movwf	??_GPS_read_speed
  2954  004C  0846               	movf	??_GPS_read_speed,w
  2955  004D  00D0               	movwf	GPS_read_speed@m_char
  2956                           
  2957                           ;main.c: 100: checksum ^= m_char;
  2958  004E  0850               	movf	GPS_read_speed@m_char,w
  2959  004F  00C6               	movwf	??_GPS_read_speed
  2960  0050  0846               	movf	??_GPS_read_speed,w
  2961  0051  06CE               	xorwf	GPS_read_speed@checksum,f
  2962                           
  2963                           ;main.c: 101: if (m_char == ',')
  2964  0052  302C               	movlw	44
  2965  0053  0650               	xorwf	GPS_read_speed@m_char,w
  2966  0054  1903               	btfsc	3,2
  2967  0055  2868               	goto	l2672
  2968                           
  2969                           ;main.c: 103: else
  2970                           ;main.c: 104: {
  2971                           ;main.c: 105: buffer[i_buff++] = m_char;
  2972                           
  2973                           ;main.c: 102: break;
  2974  0056  0850               	movf	GPS_read_speed@m_char,w
  2975  0057  00C6               	movwf	??_GPS_read_speed
  2976  0058  084F               	movf	GPS_read_speed@i_buff,w
  2977  0059  3E48               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  2978  005A  0086               	movwf	6
  2979  005B  0187               	clrf	7
  2980  005C  0846               	movf	??_GPS_read_speed,w
  2981  005D  0081               	movwf	1
  2982  005E  3001               	movlw	1
  2983  005F  00C6               	movwf	??_GPS_read_speed
  2984  0060  0846               	movf	??_GPS_read_speed,w
  2985  0061  07CF               	addwf	GPS_read_speed@i_buff,f
  2986                           
  2987                           ;main.c: 106: if (i_buff >= 6)
  2988  0062  3006               	movlw	6
  2989  0063  024F               	subwf	GPS_read_speed@i_buff,w
  2990  0064  1C03               	skipc
  2991  0065  2846               	goto	l2650
  2992                           
  2993                           ;main.c: 107: return 0;
  2994  0066  3000               	movlw	0
  2995  0067  0008               	return
  2996  0068                     l2672:	
  2997                           
  2998                           ;main.c: 108: }
  2999                           ;main.c: 109: }
  3000                           ;main.c: 111: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3]
      +                           != 'T')||(buffer[4] != 'G'))
  3001  0068  3047               	movlw	71
  3002  0069  0648               	xorwf	GPS_read_speed@buffer,w
  3003  006A  1D03               	btfss	3,2
  3004  006B  287C               	goto	l2682
  3005  006C  3050               	movlw	80
  3006  006D  0649               	xorwf	GPS_read_speed@buffer+1,w
  3007  006E  1D03               	btfss	3,2
  3008  006F  287C               	goto	l2682
  3009  0070  3056               	movlw	86
  3010  0071  064A               	xorwf	GPS_read_speed@buffer+2,w
  3011  0072  1D03               	btfss	3,2
  3012  0073  287C               	goto	l2682
  3013  0074  3054               	movlw	84
  3014  0075  064B               	xorwf	GPS_read_speed@buffer+3,w
  3015  0076  1D03               	btfss	3,2
  3016  0077  287C               	goto	l2682
  3017  0078  3047               	movlw	71
  3018  0079  064C               	xorwf	GPS_read_speed@buffer+4,w
  3019  007A  1903               	btfsc	3,2
  3020  007B  287E               	goto	l2686
  3021  007C                     l2682:	
  3022                           
  3023                           ;main.c: 112: return 0;
  3024  007C  3000               	movlw	0
  3025  007D  0008               	return
  3026  007E                     l2686:	
  3027                           
  3028                           ;main.c: 113: i_buff = 0;
  3029  007E  01CF               	clrf	GPS_read_speed@i_buff
  3030  007F                     l2688:	
  3031                           ;main.c: 116: while (1)
  3032                           
  3033                           
  3034                           ;main.c: 117: if (eusartRxCount!=0)
  3035  007F  083D               	movf	_eusartRxCount,w	;volatile
  3036  0080  1903               	btfsc	3,2
  3037  0081  287F               	goto	l2688
  3038                           
  3039                           ;main.c: 118: {
  3040                           ;main.c: 119: m_char=EUSART_Read();
  3041  0082  23C0               	fcall	_EUSART_Read
  3042  0083  0020               	movlb	0	; select bank0
  3043  0084  00C6               	movwf	??_GPS_read_speed
  3044  0085  0846               	movf	??_GPS_read_speed,w
  3045  0086  00D0               	movwf	GPS_read_speed@m_char
  3046                           
  3047                           ;main.c: 120: checksum ^= m_char;
  3048  0087  0850               	movf	GPS_read_speed@m_char,w
  3049  0088  00C6               	movwf	??_GPS_read_speed
  3050  0089  0846               	movf	??_GPS_read_speed,w
  3051  008A  06CE               	xorwf	GPS_read_speed@checksum,f
  3052                           
  3053                           ;main.c: 121: if (m_char == ',')
  3054  008B  302C               	movlw	44
  3055  008C  0650               	xorwf	GPS_read_speed@m_char,w
  3056  008D  1D03               	btfss	3,2
  3057  008E  287F               	goto	l2688
  3058  008F                     l2698:	
  3059                           ;main.c: 123: }
  3060                           ;main.c: 125: while (1)
  3061                           
  3062                           ;main.c: 122: break;
  3063                           
  3064                           
  3065                           ;main.c: 126: if (eusartRxCount!=0)
  3066  008F  083D               	movf	_eusartRxCount,w	;volatile
  3067  0090  1903               	btfsc	3,2
  3068  0091  288F               	goto	l2698
  3069                           
  3070                           ;main.c: 127: {
  3071                           ;main.c: 128: m_char=EUSART_Read();
  3072  0092  23C0               	fcall	_EUSART_Read
  3073  0093  0020               	movlb	0	; select bank0
  3074  0094  00C6               	movwf	??_GPS_read_speed
  3075  0095  0846               	movf	??_GPS_read_speed,w
  3076  0096  00D0               	movwf	GPS_read_speed@m_char
  3077                           
  3078                           ;main.c: 129: checksum ^= m_char;
  3079  0097  0850               	movf	GPS_read_speed@m_char,w
  3080  0098  00C6               	movwf	??_GPS_read_speed
  3081  0099  0846               	movf	??_GPS_read_speed,w
  3082  009A  06CE               	xorwf	GPS_read_speed@checksum,f
  3083                           
  3084                           ;main.c: 130: if (m_char == ',')
  3085  009B  302C               	movlw	44
  3086  009C  0650               	xorwf	GPS_read_speed@m_char,w
  3087  009D  1903               	btfsc	3,2
  3088  009E  28B1               	goto	l2720
  3089                           
  3090                           ;main.c: 132: else
  3091                           ;main.c: 133: {
  3092                           ;main.c: 134: buffer[i_buff++] = m_char;
  3093                           
  3094                           ;main.c: 131: break;
  3095  009F  0850               	movf	GPS_read_speed@m_char,w
  3096  00A0  00C6               	movwf	??_GPS_read_speed
  3097  00A1  084F               	movf	GPS_read_speed@i_buff,w
  3098  00A2  3E48               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3099  00A3  0086               	movwf	6
  3100  00A4  0187               	clrf	7
  3101  00A5  0846               	movf	??_GPS_read_speed,w
  3102  00A6  0081               	movwf	1
  3103  00A7  3001               	movlw	1
  3104  00A8  00C6               	movwf	??_GPS_read_speed
  3105  00A9  0846               	movf	??_GPS_read_speed,w
  3106  00AA  07CF               	addwf	GPS_read_speed@i_buff,f
  3107                           
  3108                           ;main.c: 135: if (i_buff >= 6)
  3109  00AB  3006               	movlw	6
  3110  00AC  024F               	subwf	GPS_read_speed@i_buff,w
  3111  00AD  1C03               	skipc
  3112  00AE  288F               	goto	l2698
  3113                           
  3114                           ;main.c: 136: return 0;
  3115  00AF  3000               	movlw	0
  3116  00B0  0008               	return
  3117  00B1                     l2720:	
  3118                           
  3119                           ;main.c: 137: }
  3120                           ;main.c: 138: }
  3121                           ;main.c: 139: if ((buffer[0] != 'T')||(i_buff != 1))
  3122  00B1  3054               	movlw	84
  3123  00B2  0648               	xorwf	GPS_read_speed@buffer,w
  3124  00B3  1903               	btfsc	3,2
  3125  00B4  034F               	decf	GPS_read_speed@i_buff,w
  3126  00B5  1903               	btfsc	3,2
  3127  00B6  28B9               	goto	l2728
  3128                           
  3129                           ;main.c: 140: return 0;
  3130  00B7  3000               	movlw	0
  3131  00B8  0008               	return
  3132  00B9                     l2728:	
  3133                           
  3134                           ;main.c: 141: i_buff = 0;
  3135  00B9  01CF               	clrf	GPS_read_speed@i_buff
  3136  00BA                     l2730:	
  3137                           ;main.c: 144: while (1)
  3138                           
  3139                           
  3140                           ;main.c: 145: if (eusartRxCount!=0)
  3141  00BA  083D               	movf	_eusartRxCount,w	;volatile
  3142  00BB  1903               	btfsc	3,2
  3143  00BC  28BA               	goto	l2730
  3144                           
  3145                           ;main.c: 146: {
  3146                           ;main.c: 147: m_char=EUSART_Read();
  3147  00BD  23C0               	fcall	_EUSART_Read
  3148  00BE  0020               	movlb	0	; select bank0
  3149  00BF  00C6               	movwf	??_GPS_read_speed
  3150  00C0  0846               	movf	??_GPS_read_speed,w
  3151  00C1  00D0               	movwf	GPS_read_speed@m_char
  3152                           
  3153                           ;main.c: 148: checksum ^= m_char;
  3154  00C2  0850               	movf	GPS_read_speed@m_char,w
  3155  00C3  00C6               	movwf	??_GPS_read_speed
  3156  00C4  0846               	movf	??_GPS_read_speed,w
  3157  00C5  06CE               	xorwf	GPS_read_speed@checksum,f
  3158                           
  3159                           ;main.c: 149: if (m_char == ',')
  3160  00C6  302C               	movlw	44
  3161  00C7  0650               	xorwf	GPS_read_speed@m_char,w
  3162  00C8  1D03               	btfss	3,2
  3163  00C9  28BA               	goto	l2730
  3164  00CA                     l2740:	
  3165                           ;main.c: 151: }
  3166                           ;main.c: 153: while (1)
  3167                           
  3168                           ;main.c: 150: break;
  3169                           
  3170                           
  3171                           ;main.c: 154: if (eusartRxCount!=0)
  3172  00CA  083D               	movf	_eusartRxCount,w	;volatile
  3173  00CB  1903               	btfsc	3,2
  3174  00CC  28CA               	goto	l2740
  3175                           
  3176                           ;main.c: 155: {
  3177                           ;main.c: 156: m_char=EUSART_Read();
  3178  00CD  23C0               	fcall	_EUSART_Read
  3179  00CE  0020               	movlb	0	; select bank0
  3180  00CF  00C6               	movwf	??_GPS_read_speed
  3181  00D0  0846               	movf	??_GPS_read_speed,w
  3182  00D1  00D0               	movwf	GPS_read_speed@m_char
  3183                           
  3184                           ;main.c: 157: checksum ^= m_char;
  3185  00D2  0850               	movf	GPS_read_speed@m_char,w
  3186  00D3  00C6               	movwf	??_GPS_read_speed
  3187  00D4  0846               	movf	??_GPS_read_speed,w
  3188  00D5  06CE               	xorwf	GPS_read_speed@checksum,f
  3189                           
  3190                           ;main.c: 158: if (m_char == ',')
  3191  00D6  302C               	movlw	44
  3192  00D7  0650               	xorwf	GPS_read_speed@m_char,w
  3193  00D8  1903               	btfsc	3,2
  3194  00D9  28EC               	goto	l2762
  3195                           
  3196                           ;main.c: 160: else
  3197                           ;main.c: 161: {
  3198                           ;main.c: 162: buffer[i_buff++] = m_char;
  3199                           
  3200                           ;main.c: 159: break;
  3201  00DA  0850               	movf	GPS_read_speed@m_char,w
  3202  00DB  00C6               	movwf	??_GPS_read_speed
  3203  00DC  084F               	movf	GPS_read_speed@i_buff,w
  3204  00DD  3E48               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3205  00DE  0086               	movwf	6
  3206  00DF  0187               	clrf	7
  3207  00E0  0846               	movf	??_GPS_read_speed,w
  3208  00E1  0081               	movwf	1
  3209  00E2  3001               	movlw	1
  3210  00E3  00C6               	movwf	??_GPS_read_speed
  3211  00E4  0846               	movf	??_GPS_read_speed,w
  3212  00E5  07CF               	addwf	GPS_read_speed@i_buff,f
  3213                           
  3214                           ;main.c: 163: if (i_buff >= 6)
  3215  00E6  3006               	movlw	6
  3216  00E7  024F               	subwf	GPS_read_speed@i_buff,w
  3217  00E8  1C03               	skipc
  3218  00E9  28CA               	goto	l2740
  3219                           
  3220                           ;main.c: 164: return 0;
  3221  00EA  3000               	movlw	0
  3222  00EB  0008               	return
  3223  00EC                     l2762:	
  3224                           
  3225                           ;main.c: 165: }
  3226                           ;main.c: 166: }
  3227                           ;main.c: 167: if ((buffer[0] != 'M')||(i_buff != 1))
  3228  00EC  304D               	movlw	77
  3229  00ED  0648               	xorwf	GPS_read_speed@buffer,w
  3230  00EE  1903               	btfsc	3,2
  3231  00EF  034F               	decf	GPS_read_speed@i_buff,w
  3232  00F0  1903               	btfsc	3,2
  3233  00F1  28F4               	goto	l2770
  3234                           
  3235                           ;main.c: 168: return 0;
  3236  00F2  3000               	movlw	0
  3237  00F3  0008               	return
  3238  00F4                     l2770:	
  3239                           
  3240                           ;main.c: 169: i_buff = 0;
  3241  00F4  01CF               	clrf	GPS_read_speed@i_buff
  3242  00F5                     l2772:	
  3243                           ;main.c: 172: while (1)
  3244                           
  3245                           
  3246                           ;main.c: 173: if (eusartRxCount!=0)
  3247  00F5  083D               	movf	_eusartRxCount,w	;volatile
  3248  00F6  1903               	btfsc	3,2
  3249  00F7  28F5               	goto	l2772
  3250                           
  3251                           ;main.c: 174: {
  3252                           ;main.c: 175: m_char=EUSART_Read();
  3253  00F8  23C0               	fcall	_EUSART_Read
  3254  00F9  0020               	movlb	0	; select bank0
  3255  00FA  00C6               	movwf	??_GPS_read_speed
  3256  00FB  0846               	movf	??_GPS_read_speed,w
  3257  00FC  00D0               	movwf	GPS_read_speed@m_char
  3258                           
  3259                           ;main.c: 176: checksum ^= m_char;
  3260  00FD  0850               	movf	GPS_read_speed@m_char,w
  3261  00FE  00C6               	movwf	??_GPS_read_speed
  3262  00FF  0846               	movf	??_GPS_read_speed,w
  3263  0100  06CE               	xorwf	GPS_read_speed@checksum,f
  3264                           
  3265                           ;main.c: 177: if (m_char == ',')
  3266  0101  302C               	movlw	44
  3267  0102  0650               	xorwf	GPS_read_speed@m_char,w
  3268  0103  1D03               	btfss	3,2
  3269  0104  28F5               	goto	l2772
  3270  0105                     l2782:	
  3271                           ;main.c: 179: }
  3272                           ;main.c: 181: while (1)
  3273                           
  3274                           ;main.c: 178: break;
  3275                           
  3276                           
  3277                           ;main.c: 182: if (eusartRxCount!=0)
  3278  0105  083D               	movf	_eusartRxCount,w	;volatile
  3279  0106  1903               	btfsc	3,2
  3280  0107  2905               	goto	l2782
  3281                           
  3282                           ;main.c: 183: {
  3283                           ;main.c: 184: m_char=EUSART_Read();
  3284  0108  23C0               	fcall	_EUSART_Read
  3285  0109  0020               	movlb	0	; select bank0
  3286  010A  00C6               	movwf	??_GPS_read_speed
  3287  010B  0846               	movf	??_GPS_read_speed,w
  3288  010C  00D0               	movwf	GPS_read_speed@m_char
  3289                           
  3290                           ;main.c: 185: checksum ^= m_char;
  3291  010D  0850               	movf	GPS_read_speed@m_char,w
  3292  010E  00C6               	movwf	??_GPS_read_speed
  3293  010F  0846               	movf	??_GPS_read_speed,w
  3294  0110  06CE               	xorwf	GPS_read_speed@checksum,f
  3295                           
  3296                           ;main.c: 186: if (m_char == ',')
  3297  0111  302C               	movlw	44
  3298  0112  0650               	xorwf	GPS_read_speed@m_char,w
  3299  0113  1903               	btfsc	3,2
  3300  0114  2927               	goto	l2804
  3301                           
  3302                           ;main.c: 188: else
  3303                           ;main.c: 189: {
  3304                           ;main.c: 190: buffer[i_buff++] = m_char;
  3305                           
  3306                           ;main.c: 187: break;
  3307  0115  0850               	movf	GPS_read_speed@m_char,w
  3308  0116  00C6               	movwf	??_GPS_read_speed
  3309  0117  084F               	movf	GPS_read_speed@i_buff,w
  3310  0118  3E48               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3311  0119  0086               	movwf	6
  3312  011A  0187               	clrf	7
  3313  011B  0846               	movf	??_GPS_read_speed,w
  3314  011C  0081               	movwf	1
  3315  011D  3001               	movlw	1
  3316  011E  00C6               	movwf	??_GPS_read_speed
  3317  011F  0846               	movf	??_GPS_read_speed,w
  3318  0120  07CF               	addwf	GPS_read_speed@i_buff,f
  3319                           
  3320                           ;main.c: 191: if (i_buff >= 6)
  3321  0121  3006               	movlw	6
  3322  0122  024F               	subwf	GPS_read_speed@i_buff,w
  3323  0123  1C03               	skipc
  3324  0124  2905               	goto	l2782
  3325                           
  3326                           ;main.c: 192: return 0;
  3327  0125  3000               	movlw	0
  3328  0126  0008               	return
  3329  0127                     l2804:	
  3330                           
  3331                           ;main.c: 193: }
  3332                           ;main.c: 194: }
  3333                           ;main.c: 195: if ((buffer[0] != 'N')||(i_buff != 1))
  3334  0127  304E               	movlw	78
  3335  0128  0648               	xorwf	GPS_read_speed@buffer,w
  3336  0129  1903               	btfsc	3,2
  3337  012A  034F               	decf	GPS_read_speed@i_buff,w
  3338  012B  1903               	btfsc	3,2
  3339  012C  292F               	goto	l2812
  3340                           
  3341                           ;main.c: 196: return 0;
  3342  012D  3000               	movlw	0
  3343  012E  0008               	return
  3344  012F                     l2812:	
  3345                           
  3346                           ;main.c: 197: i_buff = 0;
  3347  012F  01CF               	clrf	GPS_read_speed@i_buff
  3348  0130                     l2814:	
  3349                           ;main.c: 200: while (1)
  3350                           
  3351                           
  3352                           ;main.c: 201: if (eusartRxCount!=0)
  3353  0130  083D               	movf	_eusartRxCount,w	;volatile
  3354  0131  1903               	btfsc	3,2
  3355  0132  2930               	goto	l2814
  3356                           
  3357                           ;main.c: 202: {
  3358                           ;main.c: 203: m_char=EUSART_Read();
  3359  0133  23C0               	fcall	_EUSART_Read
  3360  0134  0020               	movlb	0	; select bank0
  3361  0135  00C6               	movwf	??_GPS_read_speed
  3362  0136  0846               	movf	??_GPS_read_speed,w
  3363  0137  00D0               	movwf	GPS_read_speed@m_char
  3364                           
  3365                           ;main.c: 204: checksum ^= m_char;
  3366  0138  0850               	movf	GPS_read_speed@m_char,w
  3367  0139  00C6               	movwf	??_GPS_read_speed
  3368  013A  0846               	movf	??_GPS_read_speed,w
  3369  013B  06CE               	xorwf	GPS_read_speed@checksum,f
  3370                           
  3371                           ;main.c: 205: if (m_char == ',')
  3372  013C  302C               	movlw	44
  3373  013D  0650               	xorwf	GPS_read_speed@m_char,w
  3374  013E  1903               	btfsc	3,2
  3375  013F  2952               	goto	l2836
  3376                           
  3377                           ;main.c: 207: else
  3378                           ;main.c: 208: {
  3379                           ;main.c: 209: buffer[i_buff++] = m_char;
  3380                           
  3381                           ;main.c: 206: break;
  3382  0140  0850               	movf	GPS_read_speed@m_char,w
  3383  0141  00C6               	movwf	??_GPS_read_speed
  3384  0142  084F               	movf	GPS_read_speed@i_buff,w
  3385  0143  3E48               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3386  0144  0086               	movwf	6
  3387  0145  0187               	clrf	7
  3388  0146  0846               	movf	??_GPS_read_speed,w
  3389  0147  0081               	movwf	1
  3390  0148  3001               	movlw	1
  3391  0149  00C6               	movwf	??_GPS_read_speed
  3392  014A  0846               	movf	??_GPS_read_speed,w
  3393  014B  07CF               	addwf	GPS_read_speed@i_buff,f
  3394                           
  3395                           ;main.c: 210: if (i_buff >= 6)
  3396  014C  3006               	movlw	6
  3397  014D  024F               	subwf	GPS_read_speed@i_buff,w
  3398  014E  1C03               	skipc
  3399  014F  2930               	goto	l2814
  3400                           
  3401                           ;main.c: 211: return 0;
  3402  0150  3000               	movlw	0
  3403  0151  0008               	return
  3404  0152                     l2836:	
  3405                           
  3406                           ;main.c: 212: }
  3407                           ;main.c: 213: }
  3408                           ;main.c: 216: unsigned char tmp = 0;
  3409  0152  01C7               	clrf	GPS_read_speed@tmp
  3410                           
  3411                           ;main.c: 217: i_buff = 0;
  3412  0153  01CF               	clrf	GPS_read_speed@i_buff
  3413  0154                     l2838:	
  3414                           ;main.c: 220: while (1)
  3415                           
  3416                           
  3417                           ;main.c: 221: if (eusartRxCount!=0)
  3418  0154  083D               	movf	_eusartRxCount,w	;volatile
  3419  0155  1903               	btfsc	3,2
  3420  0156  2954               	goto	l2838
  3421                           
  3422                           ;main.c: 222: {
  3423                           ;main.c: 223: m_char=EUSART_Read();
  3424  0157  23C0               	fcall	_EUSART_Read
  3425  0158  0020               	movlb	0	; select bank0
  3426  0159  00C6               	movwf	??_GPS_read_speed
  3427  015A  0846               	movf	??_GPS_read_speed,w
  3428  015B  00D0               	movwf	GPS_read_speed@m_char
  3429                           
  3430                           ;main.c: 224: checksum ^= m_char;
  3431  015C  0850               	movf	GPS_read_speed@m_char,w
  3432  015D  00C6               	movwf	??_GPS_read_speed
  3433  015E  0846               	movf	??_GPS_read_speed,w
  3434  015F  06CE               	xorwf	GPS_read_speed@checksum,f
  3435                           
  3436                           ;main.c: 225: if (m_char == ',')
  3437  0160  302C               	movlw	44
  3438  0161  0650               	xorwf	GPS_read_speed@m_char,w
  3439  0162  1903               	btfsc	3,2
  3440  0163  2976               	goto	l2860
  3441                           
  3442                           ;main.c: 227: else
  3443                           ;main.c: 228: {
  3444                           ;main.c: 229: buffer[i_buff++] = m_char;
  3445                           
  3446                           ;main.c: 226: break;
  3447  0164  0850               	movf	GPS_read_speed@m_char,w
  3448  0165  00C6               	movwf	??_GPS_read_speed
  3449  0166  084F               	movf	GPS_read_speed@i_buff,w
  3450  0167  3E48               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3451  0168  0086               	movwf	6
  3452  0169  0187               	clrf	7
  3453  016A  0846               	movf	??_GPS_read_speed,w
  3454  016B  0081               	movwf	1
  3455  016C  3001               	movlw	1
  3456  016D  00C6               	movwf	??_GPS_read_speed
  3457  016E  0846               	movf	??_GPS_read_speed,w
  3458  016F  07CF               	addwf	GPS_read_speed@i_buff,f
  3459                           
  3460                           ;main.c: 230: if (i_buff >= 6)
  3461  0170  3006               	movlw	6
  3462  0171  024F               	subwf	GPS_read_speed@i_buff,w
  3463  0172  1C03               	skipc
  3464  0173  2954               	goto	l2838
  3465                           
  3466                           ;main.c: 231: return 0;
  3467  0174  3000               	movlw	0
  3468  0175  0008               	return
  3469  0176                     l2860:	
  3470                           
  3471                           ;main.c: 232: }
  3472                           ;main.c: 233: }
  3473                           ;main.c: 234: if ((buffer[0] != 'K')||(i_buff != 1))
  3474  0176  304B               	movlw	75
  3475  0177  0648               	xorwf	GPS_read_speed@buffer,w
  3476  0178  1903               	btfsc	3,2
  3477  0179  034F               	decf	GPS_read_speed@i_buff,w
  3478  017A  1903               	btfsc	3,2
  3479  017B  297E               	goto	l2868
  3480                           
  3481                           ;main.c: 235: return 0;
  3482  017C  3000               	movlw	0
  3483  017D  0008               	return
  3484  017E                     l2868:	
  3485                           
  3486                           ;main.c: 236: i_buff = 0;
  3487  017E  01CF               	clrf	GPS_read_speed@i_buff
  3488                           
  3489                           ;main.c: 237: return 1;
  3490  017F  3001               	movlw	1
  3491  0180  0008               	return
  3492  0181                     __end_of_GPS_read_speed:	
  3493                           
  3494                           	psect	text12
  3495  03C0                     __ptext12:	
  3496 ;; *************** function _EUSART_Read *****************
  3497 ;; Defined at:
  3498 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  readValue       1    1[BANK0 ] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      unsigned char 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1
  3512 ;;      Params:         0       0       0
  3513 ;;      Locals:         0       1       0
  3514 ;;      Temps:          0       1       0
  3515 ;;      Totals:         0       2       0
  3516 ;;Total ram usage:        2 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    6
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_GPS_read_speed
  3523 ;;		_getch
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           
  3528                           ;psect for function _EUSART_Read
  3529  03C0                     _EUSART_Read:	
  3530                           
  3531                           ;eusart.c: 114: uint8_t readValue = 0;
  3532                           
  3533                           ;incstack = 0
  3534                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3535  03C0  0020               	movlb	0	; select bank0
  3536  03C1  01C5               	clrf	EUSART_Read@readValue
  3537                           
  3538                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  3539  03C2  0023               	movlb	3	; select bank3
  3540  03C3  169D               	bsf	29,5	;volatile
  3541  03C4                     l2538:	
  3542                           ;eusart.c: 120: {
  3543                           
  3544                           ;eusart.c: 119: while(0 == eusartRxCount)
  3545                           
  3546  03C4  0020               	movlb	0	; select bank0
  3547  03C5  083D               	movf	_eusartRxCount,w	;volatile
  3548  03C6  1903               	btfsc	3,2
  3549  03C7  2BC4               	goto	l2538
  3550                           
  3551                           ;eusart.c: 121: }
  3552                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  3553  03C8  0021               	movlb	1	; select bank1
  3554  03C9  1291               	bcf	17,5	;volatile
  3555                           
  3556                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  3557  03CA  0020               	movlb	0	; select bank0
  3558  03CB  083F               	movf	_eusartRxTail,w
  3559  03CC  3E20               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3560  03CD  0086               	movwf	6
  3561  03CE  0187               	clrf	7
  3562  03CF  0801               	movf	1,w
  3563  03D0  00C4               	movwf	??_EUSART_Read
  3564  03D1  0844               	movf	??_EUSART_Read,w
  3565  03D2  00C5               	movwf	EUSART_Read@readValue
  3566  03D3  3001               	movlw	1
  3567  03D4  00C4               	movwf	??_EUSART_Read
  3568  03D5  0844               	movf	??_EUSART_Read,w
  3569  03D6  07BF               	addwf	_eusartRxTail,f
  3570                           
  3571                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3572  03D7  3008               	movlw	8
  3573  03D8  023F               	subwf	_eusartRxTail,w
  3574  03D9  1803               	btfsc	3,0
  3575                           
  3576                           ;eusart.c: 127: {
  3577                           ;eusart.c: 128: eusartRxTail = 0;
  3578  03DA  01BF               	clrf	_eusartRxTail
  3579                           
  3580                           ;eusart.c: 129: }
  3581                           ;eusart.c: 130: eusartRxCount--;
  3582  03DB  3001               	movlw	1
  3583  03DC  02BD               	subwf	_eusartRxCount,f	;volatile
  3584                           
  3585                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  3586  03DD  0021               	movlb	1	; select bank1
  3587  03DE  1691               	bsf	17,5	;volatile
  3588                           
  3589                           ;eusart.c: 133: return readValue;
  3590  03DF  0020               	movlb	0	; select bank0
  3591  03E0  0845               	movf	EUSART_Read@readValue,w
  3592  03E1  0008               	return
  3593  03E2                     __end_of_EUSART_Read:	
  3594                           
  3595                           	psect	text13
  3596  0333                     __ptext13:	
  3597 ;; *************** function _GPS_Initialize *****************
  3598 ;; Defined at:
  3599 ;;		line 71 in file "main.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;		None
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  tmp             1   13[BANK0 ] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMMON   BANK0   BANK1
  3613 ;;      Params:         0       0       0
  3614 ;;      Locals:         0       1       0
  3615 ;;      Temps:          0       3       0
  3616 ;;      Totals:         0       4       0
  3617 ;;Total ram usage:        4 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    9
  3620 ;; This function calls:
  3621 ;;		_printf
  3622 ;; This function is called by:
  3623 ;;		_main
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           
  3628                           ;psect for function _GPS_Initialize
  3629  0333                     _GPS_Initialize:	
  3630                           
  3631                           ;main.c: 73: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  3632                           
  3633                           ;incstack = 0
  3634                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3635  0333  0020               	movlb	0	; select bank0
  3636  0334  01D1               	clrf	GPS_Initialize@tmp
  3637  0335  300A               	movlw	10
  3638  0336  0251               	subwf	GPS_Initialize@tmp,w
  3639  0337  1803               	btfsc	3,0
  3640  0338  2B4E               	goto	l2636
  3641  0339                     l2630:	
  3642  0339  3005               	movlw	5
  3643  033A  00D0               	movwf	??_GPS_Initialize+2
  3644  033B  300F               	movlw	15
  3645  033C  00CF               	movwf	??_GPS_Initialize+1
  3646  033D  30F4               	movlw	244
  3647  033E  00CE               	movwf	??_GPS_Initialize
  3648  033F                     u2777:	
  3649  033F  0BCE               	decfsz	??_GPS_Initialize,f
  3650  0340  2B3F               	goto	u2777
  3651  0341  0BCF               	decfsz	??_GPS_Initialize+1,f
  3652  0342  2B3F               	goto	u2777
  3653  0343  0BD0               	decfsz	??_GPS_Initialize+2,f
  3654  0344  2B3F               	goto	u2777
  3655  0345  3001               	movlw	1
  3656  0346  0020               	movlb	0	; select bank0
  3657  0347  00CE               	movwf	??_GPS_Initialize
  3658  0348  084E               	movf	??_GPS_Initialize,w
  3659  0349  07D1               	addwf	GPS_Initialize@tmp,f
  3660  034A  300A               	movlw	10
  3661  034B  0251               	subwf	GPS_Initialize@tmp,w
  3662  034C  1C03               	skipc
  3663  034D  2B39               	goto	l2630
  3664  034E                     l2636:	
  3665                           
  3666                           ;main.c: 75: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  3667  034E  30ED               	movlw	low (STR_1| (0+32768))
  3668  034F  00C7               	movwf	printf@f
  3669  0350  3082               	movlw	high (STR_1| (0+32768))
  3670  0351  00C8               	movwf	printf@f+1
  3671  0352  2456               	fcall	_printf
  3672                           
  3673                           ;main.c: 76: _delay((unsigned long)((100)*(32000000/4000.0)));
  3674  0353  3005               	movlw	5
  3675  0354  0020               	movlb	0	; select bank0
  3676  0355  00D0               	movwf	??_GPS_Initialize+2
  3677  0356  300F               	movlw	15
  3678  0357  00CF               	movwf	??_GPS_Initialize+1
  3679  0358  30F4               	movlw	244
  3680  0359  00CE               	movwf	??_GPS_Initialize
  3681  035A                     u2787:	
  3682  035A  0BCE               	decfsz	??_GPS_Initialize,f
  3683  035B  2B5A               	goto	u2787
  3684  035C  0BCF               	decfsz	??_GPS_Initialize+1,f
  3685  035D  2B5A               	goto	u2787
  3686  035E  0BD0               	decfsz	??_GPS_Initialize+2,f
  3687  035F  2B5A               	goto	u2787
  3688                           
  3689                           ;main.c: 77: printf("$PMTK220,100*2F\r\n");
  3690  0360  3021               	movlw	low (STR_2| (0+32768))
  3691  0361  0020               	movlb	0	; select bank0
  3692  0362  00C7               	movwf	printf@f
  3693  0363  3083               	movlw	high (STR_2| (0+32768))
  3694  0364  00C8               	movwf	printf@f+1
  3695  0365  2456               	fcall	_printf
  3696                           
  3697                           ;main.c: 78: _delay((unsigned long)((100)*(32000000/4000.0)));
  3698  0366  3005               	movlw	5
  3699  0367  0020               	movlb	0	; select bank0
  3700  0368  00D0               	movwf	??_GPS_Initialize+2
  3701  0369  300F               	movlw	15
  3702  036A  00CF               	movwf	??_GPS_Initialize+1
  3703  036B  30F4               	movlw	244
  3704  036C  00CE               	movwf	??_GPS_Initialize
  3705  036D                     u2797:	
  3706  036D  0BCE               	decfsz	??_GPS_Initialize,f
  3707  036E  2B6D               	goto	u2797
  3708  036F  0BCF               	decfsz	??_GPS_Initialize+1,f
  3709  0370  2B6D               	goto	u2797
  3710  0371  0BD0               	decfsz	??_GPS_Initialize+2,f
  3711  0372  2B6D               	goto	u2797
  3712  0373  0008               	return
  3713  0374                     __end_of_GPS_Initialize:	
  3714                           
  3715                           	psect	text14
  3716  0456                     __ptext14:	
  3717 ;; *************** function _printf *****************
  3718 ;; Defined at:
  3719 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  3722 ;;		 -> STR_2(18), STR_1(52), 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  tmpval          4    0        struct .
  3725 ;;  cp              2    0        PTR const unsigned char 
  3726 ;;  len             2    0        unsigned int 
  3727 ;;  val             2    0        unsigned int 
  3728 ;;  c               1    9[BANK0 ] char 
  3729 ;;  ap              1    8[BANK0 ] PTR void [1]
  3730 ;;		 -> ?_printf(2), 
  3731 ;;  flag            1    0        unsigned char 
  3732 ;;  prec            1    0        char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  2    3[BANK0 ] int 
  3735 ;; Registers used:
  3736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1
  3742 ;;      Params:         0       2       0
  3743 ;;      Locals:         0       2       0
  3744 ;;      Temps:          0       3       0
  3745 ;;      Totals:         0       7       0
  3746 ;;Total ram usage:        7 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    8
  3749 ;; This function calls:
  3750 ;;		_putch
  3751 ;; This function is called by:
  3752 ;;		_GPS_Initialize
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _printf
  3758  0456                     _printf:	
  3759                           
  3760                           ;doprnt.c: 466: va_list ap;
  3761                           ;doprnt.c: 499: signed char c;
  3762                           ;doprnt.c: 506: signed char prec;
  3763                           ;doprnt.c: 508: unsigned char flag;
  3764                           ;doprnt.c: 523: union {
  3765                           ;doprnt.c: 524: unsigned long vd;
  3766                           ;doprnt.c: 525: double integ;
  3767                           ;doprnt.c: 526: } tmpval;
  3768                           ;doprnt.c: 528: unsigned int val;
  3769                           ;doprnt.c: 529: unsigned len;
  3770                           ;doprnt.c: 530: const char * cp;
  3771                           ;doprnt.c: 533: *ap = __va_start();
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3775  0456  3049               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3776  0457  0020               	movlb	0	; select bank0
  3777  0458  00C9               	movwf	??_printf
  3778  0459  0849               	movf	??_printf,w
  3779  045A  00CC               	movwf	printf@ap
  3780  045B                     l2532:	
  3781                           ;doprnt.c: 543: }
  3782                           ;doprnt.c: 1422: {
  3783                           
  3784                           ;doprnt.c: 542: continue;
  3785                           
  3786                           ;doprnt.c: 536: while(c = *f++) {
  3787                           
  3788  045B  0020               	movlb	0	; select bank0
  3789  045C  0848               	movf	printf@f+1,w
  3790  045D  00CA               	movwf	??_printf+1
  3791  045E  0847               	movf	printf@f,w
  3792  045F  00C9               	movwf	??_printf
  3793  0460  0AC7               	incf	printf@f,f
  3794  0461  1903               	skipnz
  3795  0462  0AC8               	incf	printf@f+1,f
  3796  0463  0849               	movf	??_printf,w
  3797  0464  0084               	movwf	4
  3798  0465  084A               	movf	??_printf+1,w
  3799  0466  0085               	movwf	5
  3800  0467  0800               	movf	0,w	;code access
  3801  0468  00CB               	movwf	??_printf+2
  3802  0469  084B               	movf	??_printf+2,w
  3803  046A  00CD               	movwf	printf@c
  3804  046B  084D               	movf	printf@c,w
  3805  046C  1903               	btfsc	3,2
  3806  046D  0008               	return
  3807                           
  3808                           ;doprnt.c: 540: {
  3809                           ;doprnt.c: 541: (putch(c) );
  3810  046E  084D               	movf	printf@c,w
  3811  046F  2511               	fcall	_putch
  3812  0470  2C5B               	goto	l2532
  3813  0471                     __end_of_printf:	
  3814                           ;doprnt.c: 1469: }
  3815                           ;doprnt.c: 1533: }
  3816                           ;doprnt.c: 1540: return 0;
  3817                           ;	Return value of _printf is never used
  3818                           
  3819                           
  3820                           	psect	text15
  3821  0511                     __ptext15:	
  3822 ;; *************** function _putch *****************
  3823 ;; Defined at:
  3824 ;;		line 164 in file "mcc_generated_files/eusart.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  txData          1    wreg     unsigned char 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  txData          1    2[BANK0 ] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1
  3838 ;;      Params:         0       0       0
  3839 ;;      Locals:         0       1       0
  3840 ;;      Temps:          0       0       0
  3841 ;;      Totals:         0       1       0
  3842 ;;Total ram usage:        1 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    7
  3845 ;; This function calls:
  3846 ;;		_EUSART_Write
  3847 ;; This function is called by:
  3848 ;;		_printf
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           
  3853                           ;psect for function _putch
  3854  0511                     _putch:	
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3858                           ;putch@txData stored from wreg
  3859  0511  0020               	movlb	0	; select bank0
  3860  0512  00C6               	movwf	putch@txData
  3861                           
  3862                           ;eusart.c: 166: EUSART_Write(txData);
  3863  0513  0846               	movf	putch@txData,w
  3864  0514  239C               	fcall	_EUSART_Write
  3865  0515  0008               	return
  3866  0516                     __end_of_putch:	
  3867                           
  3868                           	psect	text16
  3869  039C                     __ptext16:	
  3870 ;; *************** function _EUSART_Write *****************
  3871 ;; Defined at:
  3872 ;;		line 136 in file "mcc_generated_files/eusart.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  txData          1    wreg     unsigned char 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  txData          1    1[BANK0 ] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      void 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1
  3886 ;;      Params:         0       0       0
  3887 ;;      Locals:         0       1       0
  3888 ;;      Temps:          0       1       0
  3889 ;;      Totals:         0       2       0
  3890 ;;Total ram usage:        2 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    6
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_putch
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           
  3901                           ;psect for function _EUSART_Write
  3902  039C                     _EUSART_Write:	
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3906                           ;EUSART_Write@txData stored from wreg
  3907  039C  0020               	movlb	0	; select bank0
  3908  039D  00C5               	movwf	EUSART_Write@txData
  3909  039E                     l2506:	
  3910                           ;eusart.c: 139: {
  3911                           
  3912                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  3913                           
  3914  039E  0874               	movf	_eusartTxBufferRemaining,w	;volatile
  3915  039F  1903               	btfsc	3,2
  3916  03A0  2B9E               	goto	l2506
  3917                           
  3918                           ;eusart.c: 140: }
  3919                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  3920  03A1  0021               	movlb	1	; select bank1
  3921  03A2  1A11               	btfsc	17,4	;volatile
  3922  03A3  2BA9               	goto	l383
  3923                           
  3924                           ;eusart.c: 143: {
  3925                           ;eusart.c: 144: TXREG = txData;
  3926  03A4  0020               	movlb	0	; select bank0
  3927  03A5  0845               	movf	EUSART_Write@txData,w
  3928  03A6  0023               	movlb	3	; select bank3
  3929  03A7  009A               	movwf	26	;volatile
  3930                           
  3931                           ;eusart.c: 145: }
  3932  03A8  2BBD               	goto	l2520
  3933  03A9                     l383:	
  3934                           
  3935                           ;eusart.c: 146: else
  3936                           ;eusart.c: 147: {
  3937                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  3938  03A9  1211               	bcf	17,4	;volatile
  3939                           
  3940                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  3941  03AA  0020               	movlb	0	; select bank0
  3942  03AB  0845               	movf	EUSART_Write@txData,w
  3943  03AC  00C4               	movwf	??_EUSART_Write
  3944  03AD  0840               	movf	_eusartTxHead,w
  3945  03AE  3E28               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3946  03AF  0086               	movwf	6
  3947  03B0  0187               	clrf	7
  3948  03B1  0844               	movf	??_EUSART_Write,w
  3949  03B2  0081               	movwf	1
  3950  03B3  3001               	movlw	1
  3951  03B4  00C4               	movwf	??_EUSART_Write
  3952  03B5  0844               	movf	??_EUSART_Write,w
  3953  03B6  07C0               	addwf	_eusartTxHead,f
  3954                           
  3955                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3956  03B7  3008               	movlw	8
  3957  03B8  0240               	subwf	_eusartTxHead,w
  3958  03B9  1803               	btfsc	3,0
  3959                           
  3960                           ;eusart.c: 151: {
  3961                           ;eusart.c: 152: eusartTxHead = 0;
  3962  03BA  01C0               	clrf	_eusartTxHead
  3963                           
  3964                           ;eusart.c: 153: }
  3965                           ;eusart.c: 154: eusartTxBufferRemaining--;
  3966  03BB  3001               	movlw	1
  3967  03BC  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
  3968  03BD                     l2520:	
  3969                           
  3970                           ;eusart.c: 155: }
  3971                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  3972  03BD  0021               	movlb	1	; select bank1
  3973  03BE  1611               	bsf	17,4	;volatile
  3974  03BF  0008               	return
  3975  03C0                     __end_of_EUSART_Write:	
  3976                           
  3977                           	psect	text17
  3978  041F                     __ptext17:	
  3979 ;; *************** function _EPWM_LoadDutyValue *****************
  3980 ;; Defined at:
  3981 ;;		line 87 in file "mcc_generated_files/epwm.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;		None
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1
  3995 ;;      Params:         0       2       0
  3996 ;;      Locals:         0       0       0
  3997 ;;      Temps:          0       2       0
  3998 ;;      Totals:         0       4       0
  3999 ;;Total ram usage:        4 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    6
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _EPWM_LoadDutyValue
  4011  041F                     _EPWM_LoadDutyValue:	
  4012                           
  4013                           ;epwm.c: 90: CCPR1L = ((dutyValue & 0x03FC)>>2);
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _EPWM_LoadDutyValue: [wreg+status,2+status,0]
  4017  041F  0020               	movlb	0	; select bank0
  4018  0420  0845               	movf	EPWM_LoadDutyValue@dutyValue+1,w
  4019  0421  00C7               	movwf	??_EPWM_LoadDutyValue+1
  4020  0422  0844               	movf	EPWM_LoadDutyValue@dutyValue,w
  4021  0423  00C6               	movwf	??_EPWM_LoadDutyValue
  4022  0424  36C7               	lsrf	??_EPWM_LoadDutyValue+1,f
  4023  0425  0CC6               	rrf	??_EPWM_LoadDutyValue,f
  4024  0426  36C7               	lsrf	??_EPWM_LoadDutyValue+1,f
  4025  0427  0CC6               	rrf	??_EPWM_LoadDutyValue,f
  4026  0428  0846               	movf	??_EPWM_LoadDutyValue,w
  4027  0429  0025               	movlb	5	; select bank5
  4028  042A  0091               	movwf	17	;volatile
  4029                           
  4030                           ;epwm.c: 93: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  4031  042B  0020               	movlb	0	; select bank0
  4032  042C  0844               	movf	EPWM_LoadDutyValue@dutyValue,w
  4033  042D  3903               	andlw	3
  4034  042E  00C6               	movwf	??_EPWM_LoadDutyValue
  4035  042F  3004               	movlw	4
  4036  0430                     u2555:	
  4037  0430  35C6               	lslf	??_EPWM_LoadDutyValue,f
  4038  0431  0B89               	decfsz	9,f
  4039  0432  2C30               	goto	u2555
  4040  0433  0025               	movlb	5	; select bank5
  4041  0434  0813               	movf	19,w	;volatile
  4042  0435  39CF               	andlw	207
  4043  0436  0020               	movlb	0	; select bank0
  4044  0437  0446               	iorwf	??_EPWM_LoadDutyValue,w
  4045  0438  0025               	movlb	5	; select bank5
  4046  0439  0093               	movwf	19	;volatile
  4047  043A  0008               	return
  4048  043B                     __end_of_EPWM_LoadDutyValue:	
  4049                           
  4050                           	psect	intentry
  4051  0004                     __pintentry:	
  4052 ;; *************** function _INTERRUPT_InterruptManager *****************
  4053 ;; Defined at:
  4054 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1
  4068 ;;      Params:         0       0       0
  4069 ;;      Locals:         0       0       0
  4070 ;;      Temps:          1       0       0
  4071 ;;      Totals:         1       0       0
  4072 ;;Total ram usage:        1 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    5
  4075 ;; This function calls:
  4076 ;;		_EUSART_Receive_ISR
  4077 ;;		_EUSART_Transmit_ISR
  4078 ;;		_TMR0_ISR
  4079 ;; This function is called by:
  4080 ;;		Interrupt level 1
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084  0004                     _INTERRUPT_InterruptManager:	
  4085                           
  4086                           ;incstack = 0
  4087  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4088                           
  4089                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4090  0005  3180               	pagesel	$
  4091  0006  0020               	movlb	0	; select bank0
  4092  0007  087F               	movf	127,w
  4093  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  4094                           
  4095                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4096  0009  1A8B               	btfsc	11,5	;volatile
  4097  000A  1D0B               	btfss	11,2	;volatile
  4098  000B  280D               	goto	i1l2488
  4099                           
  4100                           ;interrupt_manager.c: 55: {
  4101                           ;interrupt_manager.c: 56: TMR0_ISR();
  4102  000C  24B6               	fcall	_TMR0_ISR
  4103  000D                     i1l2488:	
  4104                           
  4105                           ;interrupt_manager.c: 57: }
  4106                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  4107  000D  1F0B               	btfss	11,6	;volatile
  4108  000E  2816               	goto	i1l2496
  4109  000F  0021               	movlb	1	; select bank1
  4110  0010  1E11               	btfss	17,4	;volatile
  4111  0011  2816               	goto	i1l2496
  4112  0012  0020               	movlb	0	; select bank0
  4113  0013  1E11               	btfss	17,4	;volatile
  4114  0014  2816               	goto	i1l2496
  4115                           
  4116                           ;interrupt_manager.c: 59: {
  4117                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  4118  0015  2402               	fcall	_EUSART_Transmit_ISR
  4119  0016                     i1l2496:	
  4120                           
  4121                           ;interrupt_manager.c: 61: }
  4122                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  4123  0016  1F0B               	btfss	11,6	;volatile
  4124  0017  281F               	goto	i1l540
  4125  0018  0021               	movlb	1	; select bank1
  4126  0019  1E91               	btfss	17,5	;volatile
  4127  001A  281F               	goto	i1l540
  4128  001B  0020               	movlb	0	; select bank0
  4129  001C  1E91               	btfss	17,5	;volatile
  4130  001D  281F               	goto	i1l540
  4131                           
  4132                           ;interrupt_manager.c: 63: {
  4133                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  4134  001E  2471               	fcall	_EUSART_Receive_ISR
  4135  001F                     i1l540:	
  4136                           ;interrupt_manager.c: 66: else
  4137                           ;interrupt_manager.c: 67: {
  4138                           
  4139                           ;interrupt_manager.c: 65: }
  4140                           
  4141  001F  0879               	movf	??_INTERRUPT_InterruptManager,w
  4142  0020  0020               	movlb	0	; select bank0
  4143  0021  00FF               	movwf	127
  4144  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4145  0023  0009               	retfie
  4146  0024                     __end_of_INTERRUPT_InterruptManager:	
  4147                           
  4148                           	psect	text19
  4149  04B6                     __ptext19:	
  4150 ;; *************** function _TMR0_ISR *****************
  4151 ;; Defined at:
  4152 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;		None
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;		None
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0, pclath, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1
  4166 ;;      Params:         0       0       0
  4167 ;;      Locals:         0       0       0
  4168 ;;      Temps:          0       0       0
  4169 ;;      Totals:         0       0       0
  4170 ;;Total ram usage:        0 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    4
  4173 ;; This function calls:
  4174 ;;		_TMR0_CallBack
  4175 ;; This function is called by:
  4176 ;;		_INTERRUPT_InterruptManager
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function _TMR0_ISR
  4182  04B6                     _TMR0_ISR:	
  4183                           
  4184                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  4185                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  4189  04B6  110B               	bcf	11,2	;volatile
  4190                           
  4191                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  4192  04B7  0020               	movlb	0	; select bank0
  4193  04B8  0843               	movf	_timer0ReloadVal,w	;volatile
  4194  04B9  0095               	movwf	21	;volatile
  4195                           
  4196                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  4197  04BA  3001               	movlw	1
  4198  04BB  07B0               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  4199  04BC  3000               	movlw	0
  4200  04BD  3DB1               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  4201  04BE  3000               	movlw	0
  4202  04BF  0231               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  4203  04C0  3002               	movlw	2
  4204  04C1  1903               	skipnz
  4205  04C2  0230               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  4206  04C3  1C03               	skipc
  4207  04C4  0008               	return
  4208                           
  4209                           ;tmr0.c: 119: {
  4210                           ;tmr0.c: 121: TMR0_CallBack();
  4211  04C5  24E2               	fcall	_TMR0_CallBack
  4212                           
  4213                           ;tmr0.c: 124: CountCallBack = 0;
  4214  04C6  0020               	movlb	0	; select bank0
  4215  04C7  01B0               	clrf	TMR0_ISR@CountCallBack	;volatile
  4216  04C8  01B1               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  4217  04C9  0008               	return
  4218  04CA                     __end_of_TMR0_ISR:	
  4219                           
  4220                           	psect	text20
  4221  04E2                     __ptext20:	
  4222 ;; *************** function _TMR0_CallBack *****************
  4223 ;; Defined at:
  4224 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0, pclath, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1
  4238 ;;      Params:         0       0       0
  4239 ;;      Locals:         0       0       0
  4240 ;;      Temps:          0       0       0
  4241 ;;      Totals:         0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    3
  4245 ;; This function calls:
  4246 ;;		Absolute function
  4247 ;;		_TMR0_DefaultInterruptHandler
  4248 ;;		_my10msTimerISR
  4249 ;; This function is called by:
  4250 ;;		_TMR0_ISR
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _TMR0_CallBack
  4256  04E2                     _TMR0_CallBack:	
  4257                           
  4258                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4262  04E2  0020               	movlb	0	; select bank0
  4263  04E3  0832               	movf	_TMR0_InterruptHandler,w
  4264  04E4  0433               	iorwf	_TMR0_InterruptHandler+1,w
  4265  04E5  1903               	btfsc	3,2
  4266  04E6  0008               	return
  4267                           
  4268                           ;tmr0.c: 135: {
  4269                           ;tmr0.c: 136: TMR0_InterruptHandler();
  4270  04E7  0833               	movf	_TMR0_InterruptHandler+1,w
  4271  04E8  008A               	movwf	10
  4272  04E9  0832               	movf	_TMR0_InterruptHandler,w
  4273  04EA  000A               	callw
  4274  04EB  3184               	pagesel	$
  4275  04EC  0008               	return
  4276  04ED                     __end_of_TMR0_CallBack:	
  4277                           
  4278                           	psect	text21
  4279  051D                     __ptext21:	
  4280 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  4281 ;; Defined at:
  4282 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		None
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1
  4296 ;;      Params:         0       0       0
  4297 ;;      Locals:         0       0       0
  4298 ;;      Temps:          0       0       0
  4299 ;;      Totals:         0       0       0
  4300 ;;Total ram usage:        0 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		_TMR0_Initialize
  4306 ;;		_TMR0_CallBack
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           
  4311                           ;psect for function _TMR0_DefaultInterruptHandler
  4312  051D                     _TMR0_DefaultInterruptHandler:	
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4316  051D  0008               	return
  4317  051E                     __end_of_TMR0_DefaultInterruptHandler:	
  4318                           
  4319                           	psect	text22
  4320  0519                     __ptext22:	
  4321 ;; *************** function _my10msTimerISR *****************
  4322 ;; Defined at:
  4323 ;;		line 419 in file "main.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1
  4337 ;;      Params:         0       0       0
  4338 ;;      Locals:         0       0       0
  4339 ;;      Temps:          0       0       0
  4340 ;;      Totals:         0       0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    2
  4344 ;; This function calls:
  4345 ;;		_LED_update_loop
  4346 ;;		_button_update_loop
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;;		_TMR0_CallBack
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           
  4354                           ;psect for function _my10msTimerISR
  4355  0519                     _my10msTimerISR:	
  4356                           
  4357                           ;main.c: 421: LED_update_loop();
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  4361  0519  2374               	fcall	_LED_update_loop
  4362                           
  4363                           ;main.c: 422: button_update_loop();
  4364  051A  227A               	fcall	_button_update_loop
  4365  051B  0008               	return
  4366  051C                     __end_of_my10msTimerISR:	
  4367                           
  4368                           	psect	text23
  4369  027A                     __ptext23:	
  4370 ;; *************** function _button_update_loop *****************
  4371 ;; Defined at:
  4372 ;;		line 69 in file "interact.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  current_stat    1    3[COMMON] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      void 
  4379 ;; Registers used:
  4380 ;;		wreg, status,2, status,0, pclath, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1
  4386 ;;      Params:         0       0       0
  4387 ;;      Locals:         1       0       0
  4388 ;;      Temps:          2       0       0
  4389 ;;      Totals:         3       0       0
  4390 ;;Total ram usage:        3 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    1
  4393 ;; This function calls:
  4394 ;;		_get_button_state
  4395 ;; This function is called by:
  4396 ;;		_my10msTimerISR
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _button_update_loop
  4402  027A                     _button_update_loop:	
  4403                           
  4404                           ;interact.c: 71: unsigned char current_state = get_button_state();
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  4408  027A  24D6               	fcall	_get_button_state
  4409  027B  00F6               	movwf	??_button_update_loop
  4410  027C  0876               	movf	??_button_update_loop,w
  4411  027D  00F8               	movwf	button_update_loop@current_state
  4412                           
  4413                           ;interact.c: 72: if (!b_push_confirmed)
  4414  027E  0020               	movlb	0	; select bank0
  4415  027F  083B               	movf	_b_push_confirmed,w	;volatile
  4416  0280  1D03               	btfss	3,2
  4417  0281  2AA7               	goto	i1l1904
  4418                           
  4419                           ;interact.c: 73: {
  4420                           ;interact.c: 75: if (current_state != b_last_state)
  4421  0282  0878               	movf	button_update_loop@current_state,w
  4422  0283  00F6               	movwf	??_button_update_loop
  4423  0284  01F7               	clrf	??_button_update_loop+1
  4424  0285  0871               	movf	_b_last_state+1,w	;volatile
  4425  0286  0677               	xorwf	??_button_update_loop+1,w
  4426  0287  1D03               	skipz
  4427  0288  2A8B               	goto	u113_25
  4428  0289  0870               	movf	_b_last_state,w	;volatile
  4429  028A  0676               	xorwf	??_button_update_loop,w
  4430  028B                     u113_25:	
  4431  028B  1903               	skipnz
  4432  028C  2A96               	goto	i1l1896
  4433                           
  4434                           ;interact.c: 76: {
  4435                           ;interact.c: 77: b_count_pressed = 0;
  4436  028D  01F3               	clrf	_b_count_pressed	;volatile
  4437                           
  4438                           ;interact.c: 78: b_last_state = current_state;
  4439  028E  0878               	movf	button_update_loop@current_state,w
  4440  028F  00F6               	movwf	??_button_update_loop
  4441  0290  01F7               	clrf	??_button_update_loop+1
  4442  0291  0876               	movf	??_button_update_loop,w
  4443  0292  00F0               	movwf	_b_last_state	;volatile
  4444  0293  0877               	movf	??_button_update_loop+1,w
  4445  0294  00F1               	movwf	_b_last_state+1	;volatile
  4446                           
  4447                           ;interact.c: 79: }
  4448  0295  0008               	return
  4449  0296                     i1l1896:	
  4450                           
  4451                           ;interact.c: 80: else if (b_last_state == 1)
  4452  0296  0370               	decf	_b_last_state,w	;volatile
  4453  0297  0471               	iorwf	_b_last_state+1,w	;volatile
  4454  0298  1D03               	btfss	3,2
  4455  0299  0008               	return
  4456                           
  4457                           ;interact.c: 81: {
  4458                           ;interact.c: 82: b_count_pressed++;
  4459  029A  3001               	movlw	1
  4460  029B  00F6               	movwf	??_button_update_loop
  4461  029C  0876               	movf	??_button_update_loop,w
  4462  029D  07F3               	addwf	_b_count_pressed,f	;volatile
  4463                           
  4464                           ;interact.c: 83: if (b_count_pressed > 5)
  4465  029E  3006               	movlw	6
  4466  029F  0273               	subwf	_b_count_pressed,w	;volatile
  4467  02A0  1C03               	skipc
  4468  02A1  0008               	return
  4469                           
  4470                           ;interact.c: 84: b_push_confirmed = 1;
  4471  02A2  3001               	movlw	1
  4472  02A3  00F6               	movwf	??_button_update_loop
  4473  02A4  0876               	movf	??_button_update_loop,w
  4474  02A5  00BB               	movwf	_b_push_confirmed	;volatile
  4475                           
  4476                           ;interact.c: 85: }
  4477                           ;interact.c: 86: }
  4478  02A6  0008               	return
  4479  02A7                     i1l1904:	
  4480                           
  4481                           ;interact.c: 87: else
  4482                           ;interact.c: 88: {
  4483                           ;interact.c: 89: if (current_state != b_last_state)
  4484  02A7  0878               	movf	button_update_loop@current_state,w
  4485  02A8  00F6               	movwf	??_button_update_loop
  4486  02A9  01F7               	clrf	??_button_update_loop+1
  4487  02AA  0871               	movf	_b_last_state+1,w	;volatile
  4488  02AB  0677               	xorwf	??_button_update_loop+1,w
  4489  02AC  1D03               	skipz
  4490  02AD  2AB0               	goto	u116_25
  4491  02AE  0870               	movf	_b_last_state,w	;volatile
  4492  02AF  0676               	xorwf	??_button_update_loop,w
  4493  02B0                     u116_25:	
  4494  02B0  1903               	skipnz
  4495  02B1  2ABF               	goto	i1l1912
  4496                           
  4497                           ;interact.c: 90: {
  4498                           ;interact.c: 91: b_count_released = 0;
  4499  02B2  01B9               	clrf	_b_count_released	;volatile
  4500                           
  4501                           ;interact.c: 92: b_last_state = current_state;
  4502  02B3  0878               	movf	button_update_loop@current_state,w
  4503  02B4  00F6               	movwf	??_button_update_loop
  4504  02B5  01F7               	clrf	??_button_update_loop+1
  4505  02B6  0876               	movf	??_button_update_loop,w
  4506  02B7  00F0               	movwf	_b_last_state	;volatile
  4507  02B8  0877               	movf	??_button_update_loop+1,w
  4508  02B9  00F1               	movwf	_b_last_state+1	;volatile
  4509                           
  4510                           ;interact.c: 93: b_has_once_been_released = 1;
  4511  02BA  3001               	movlw	1
  4512  02BB  00F6               	movwf	??_button_update_loop
  4513  02BC  0876               	movf	??_button_update_loop,w
  4514  02BD  00BA               	movwf	_b_has_once_been_released	;volatile
  4515                           
  4516                           ;interact.c: 94: }
  4517  02BE  0008               	return
  4518  02BF                     i1l1912:	
  4519                           
  4520                           ;interact.c: 95: else if ((b_last_state == 1)&&(!b_has_once_been_released))
  4521  02BF  0370               	decf	_b_last_state,w	;volatile
  4522  02C0  0471               	iorwf	_b_last_state+1,w	;volatile
  4523  02C1  1D03               	btfss	3,2
  4524  02C2  2AD3               	goto	i1l1922
  4525  02C3  083A               	movf	_b_has_once_been_released,w	;volatile
  4526  02C4  1D03               	btfss	3,2
  4527  02C5  2AD3               	goto	i1l1922
  4528                           
  4529                           ;interact.c: 96: {
  4530                           ;interact.c: 97: b_count_pressed++;
  4531  02C6  3001               	movlw	1
  4532  02C7  00F6               	movwf	??_button_update_loop
  4533  02C8  0876               	movf	??_button_update_loop,w
  4534  02C9  07F3               	addwf	_b_count_pressed,f	;volatile
  4535                           
  4536                           ;interact.c: 98: if (b_count_pressed >= 100)
  4537  02CA  3064               	movlw	100
  4538  02CB  0273               	subwf	_b_count_pressed,w	;volatile
  4539  02CC  1C03               	skipc
  4540  02CD  0008               	return
  4541                           
  4542                           ;interact.c: 99: b_confirmed_state = long_push;
  4543  02CE  3002               	movlw	2
  4544  02CF  00F6               	movwf	??_button_update_loop
  4545  02D0  0876               	movf	??_button_update_loop,w
  4546  02D1  00B8               	movwf	_b_confirmed_state	;volatile
  4547                           
  4548                           ;interact.c: 100: }
  4549  02D2  0008               	return
  4550  02D3                     i1l1922:	
  4551                           
  4552                           ;interact.c: 101: else if (b_last_state == 0)
  4553  02D3  0870               	movf	_b_last_state,w	;volatile
  4554  02D4  0471               	iorwf	_b_last_state+1,w	;volatile
  4555  02D5  1D03               	btfss	3,2
  4556  02D6  0008               	return
  4557                           
  4558                           ;interact.c: 102: {
  4559                           ;interact.c: 103: b_count_released++;
  4560  02D7  3001               	movlw	1
  4561  02D8  00F6               	movwf	??_button_update_loop
  4562  02D9  0876               	movf	??_button_update_loop,w
  4563  02DA  07B9               	addwf	_b_count_released,f	;volatile
  4564                           
  4565                           ;interact.c: 104: if (b_count_released > 10)
  4566  02DB  300B               	movlw	11
  4567  02DC  0239               	subwf	_b_count_released,w	;volatile
  4568  02DD  1C03               	skipc
  4569  02DE  0008               	return
  4570                           
  4571                           ;interact.c: 105: if (b_count_pressed >= 75)
  4572  02DF  304B               	movlw	75
  4573  02E0  0273               	subwf	_b_count_pressed,w	;volatile
  4574  02E1  1C03               	skipc
  4575  02E2  2AE8               	goto	i1l1932
  4576                           
  4577                           ;interact.c: 106: b_confirmed_state = long_push;
  4578  02E3  3002               	movlw	2
  4579  02E4  00F6               	movwf	??_button_update_loop
  4580  02E5  0876               	movf	??_button_update_loop,w
  4581  02E6  00B8               	movwf	_b_confirmed_state	;volatile
  4582  02E7  0008               	return
  4583  02E8                     i1l1932:	
  4584                           
  4585                           ;interact.c: 107: else
  4586                           ;interact.c: 108: b_confirmed_state = short_push;
  4587  02E8  3001               	movlw	1
  4588  02E9  00F6               	movwf	??_button_update_loop
  4589  02EA  0876               	movf	??_button_update_loop,w
  4590  02EB  00B8               	movwf	_b_confirmed_state	;volatile
  4591  02EC  0008               	return
  4592  02ED                     __end_of_button_update_loop:	
  4593                           
  4594                           	psect	text24
  4595  04D6                     __ptext24:	
  4596 ;; *************** function _get_button_state *****************
  4597 ;; Defined at:
  4598 ;;		line 49 in file "interact.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  state           1    0[COMMON] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      unsigned char 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1
  4612 ;;      Params:         0       0       0
  4613 ;;      Locals:         1       0       0
  4614 ;;      Temps:          0       0       0
  4615 ;;      Totals:         1       0       0
  4616 ;;Total ram usage:        1 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; This function calls:
  4619 ;;		Nothing
  4620 ;; This function is called by:
  4621 ;;		_button_update_loop
  4622 ;;		_button_init
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _get_button_state
  4628  04D6                     _get_button_state:	
  4629                           
  4630                           ;interact.c: 52: unsigned char state = PORTAbits.RA4;
  4631                           
  4632                           ;incstack = 0
  4633                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  4634  04D6  3000               	movlw	0
  4635  04D7  0020               	movlb	0	; select bank0
  4636  04D8  1A0C               	btfsc	12,4	;volatile
  4637  04D9  3001               	movlw	1
  4638  04DA  00F5               	movwf	get_button_state@state
  4639                           
  4640                           ;interact.c: 53: if (state == 1)
  4641  04DB  0375               	decf	get_button_state@state,w
  4642  04DC  1D03               	btfss	3,2
  4643  04DD  2CE0               	goto	i1l1856
  4644                           
  4645                           ;interact.c: 54: return 0;
  4646  04DE  3000               	movlw	0
  4647  04DF  0008               	return
  4648  04E0                     i1l1856:	
  4649                           
  4650                           ;interact.c: 55: else return 1;
  4651  04E0  3001               	movlw	1
  4652  04E1  0008               	return
  4653  04E2                     __end_of_get_button_state:	
  4654                           
  4655                           	psect	text25
  4656  0374                     __ptext25:	
  4657 ;; *************** function _LED_update_loop *****************
  4658 ;; Defined at:
  4659 ;;		line 21 in file "interact.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1
  4673 ;;      Params:         0       0       0
  4674 ;;      Locals:         0       0       0
  4675 ;;      Temps:          1       0       0
  4676 ;;      Totals:         1       0       0
  4677 ;;Total ram usage:        1 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_my10msTimerISR
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _LED_update_loop
  4688  0374                     _LED_update_loop:	
  4689                           
  4690                           ;interact.c: 23: if (LED_state == manual_mode)
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  4694  0374  3004               	movlw	4
  4695  0375  0020               	movlb	0	; select bank0
  4696  0376  065D               	xorwf	_LED_state,w
  4697  0377  1903               	btfsc	3,2
  4698  0378  0008               	return
  4699                           
  4700                           ;interact.c: 25: else if (LED_state == slow_blinking)
  4701                           
  4702                           ;interact.c: 24: return;
  4703  0379  3002               	movlw	2
  4704  037A  065D               	xorwf	_LED_state,w
  4705  037B  1D03               	btfss	3,2
  4706  037C  2B8A               	goto	i1l1876
  4707                           
  4708                           ;interact.c: 26: {
  4709                           ;interact.c: 27: LED_counter++;
  4710  037D  3001               	movlw	1
  4711  037E  00F5               	movwf	??_LED_update_loop
  4712  037F  0875               	movf	??_LED_update_loop,w
  4713  0380  07F2               	addwf	_LED_counter,f	;volatile
  4714                           
  4715                           ;interact.c: 28: if (LED_counter >= 85)
  4716  0381  3055               	movlw	85
  4717  0382  0272               	subwf	_LED_counter,w	;volatile
  4718  0383  1C03               	skipc
  4719  0384  0008               	return
  4720                           
  4721                           ;interact.c: 29: {
  4722                           ;interact.c: 30: LED_counter = 0;
  4723  0385  01F2               	clrf	_LED_counter	;volatile
  4724                           
  4725                           ;interact.c: 31: do { LATA5 = ~LATA5; } while(0);
  4726  0386  3020               	movlw	32
  4727  0387  0022               	movlb	2	; select bank2
  4728  0388  068C               	xorwf	12,f
  4729                           
  4730                           ;interact.c: 32: }
  4731                           ;interact.c: 33: }
  4732  0389  0008               	return
  4733  038A                     i1l1876:	
  4734                           
  4735                           ;interact.c: 34: else if (LED_state == fast_blinking)
  4736  038A  3003               	movlw	3
  4737  038B  0020               	movlb	0	; select bank0
  4738  038C  065D               	xorwf	_LED_state,w
  4739  038D  1D03               	btfss	3,2
  4740  038E  0008               	return
  4741                           
  4742                           ;interact.c: 35: {
  4743                           ;interact.c: 36: LED_counter++;
  4744  038F  3001               	movlw	1
  4745  0390  00F5               	movwf	??_LED_update_loop
  4746  0391  0875               	movf	??_LED_update_loop,w
  4747  0392  07F2               	addwf	_LED_counter,f	;volatile
  4748                           
  4749                           ;interact.c: 37: if (LED_counter >= 20)
  4750  0393  3014               	movlw	20
  4751  0394  0272               	subwf	_LED_counter,w	;volatile
  4752  0395  1C03               	skipc
  4753  0396  0008               	return
  4754                           
  4755                           ;interact.c: 38: {
  4756                           ;interact.c: 39: LED_counter = 0;
  4757  0397  01F2               	clrf	_LED_counter	;volatile
  4758                           
  4759                           ;interact.c: 40: do { LATA5 = ~LATA5; } while(0);
  4760  0398  3020               	movlw	32
  4761  0399  0022               	movlb	2	; select bank2
  4762  039A  068C               	xorwf	12,f
  4763  039B  0008               	return
  4764  039C                     __end_of_LED_update_loop:	
  4765                           
  4766                           	psect	text26
  4767  0402                     __ptext26:	
  4768 ;; *************** function _EUSART_Transmit_ISR *****************
  4769 ;; Defined at:
  4770 ;;		line 169 in file "mcc_generated_files/eusart.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1
  4784 ;;      Params:         0       0       0
  4785 ;;      Locals:         0       0       0
  4786 ;;      Temps:          1       0       0
  4787 ;;      Totals:         1       0       0
  4788 ;;Total ram usage:        1 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_INTERRUPT_InterruptManager
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function _EUSART_Transmit_ISR
  4799  0402                     _EUSART_Transmit_ISR:	
  4800                           
  4801                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4805  0402  3008               	movlw	8
  4806  0403  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
  4807  0404  1803               	skipnc
  4808  0405  2C1C               	goto	i1l395
  4809                           
  4810                           ;eusart.c: 174: {
  4811                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  4812  0406  0020               	movlb	0	; select bank0
  4813  0407  0841               	movf	_eusartTxTail,w
  4814  0408  3E28               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4815  0409  0086               	movwf	6
  4816  040A  0187               	clrf	7
  4817  040B  0801               	movf	1,w
  4818  040C  0023               	movlb	3	; select bank3
  4819  040D  009A               	movwf	26	;volatile
  4820  040E  3001               	movlw	1
  4821  040F  00F5               	movwf	??_EUSART_Transmit_ISR
  4822  0410  0875               	movf	??_EUSART_Transmit_ISR,w
  4823  0411  0020               	movlb	0	; select bank0
  4824  0412  07C1               	addwf	_eusartTxTail,f
  4825                           
  4826                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4827  0413  3008               	movlw	8
  4828  0414  0241               	subwf	_eusartTxTail,w
  4829  0415  1803               	btfsc	3,0
  4830                           
  4831                           ;eusart.c: 177: {
  4832                           ;eusart.c: 178: eusartTxTail = 0;
  4833  0416  01C1               	clrf	_eusartTxTail
  4834                           
  4835                           ;eusart.c: 179: }
  4836                           ;eusart.c: 180: eusartTxBufferRemaining++;
  4837  0417  3001               	movlw	1
  4838  0418  00F5               	movwf	??_EUSART_Transmit_ISR
  4839  0419  0875               	movf	??_EUSART_Transmit_ISR,w
  4840  041A  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
  4841                           
  4842                           ;eusart.c: 181: }
  4843  041B  0008               	return
  4844  041C                     i1l395:	
  4845                           
  4846                           ;eusart.c: 182: else
  4847                           ;eusart.c: 183: {
  4848                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  4849  041C  0021               	movlb	1	; select bank1
  4850  041D  1211               	bcf	17,4	;volatile
  4851  041E  0008               	return
  4852  041F                     __end_of_EUSART_Transmit_ISR:	
  4853                           
  4854                           	psect	text27
  4855  0471                     __ptext27:	
  4856 ;; *************** function _EUSART_Receive_ISR *****************
  4857 ;; Defined at:
  4858 ;;		line 188 in file "mcc_generated_files/eusart.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1
  4872 ;;      Params:         0       0       0
  4873 ;;      Locals:         0       0       0
  4874 ;;      Temps:          1       0       0
  4875 ;;      Totals:         1       0       0
  4876 ;;Total ram usage:        1 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_INTERRUPT_InterruptManager
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           
  4886                           ;psect for function _EUSART_Receive_ISR
  4887  0471                     _EUSART_Receive_ISR:	
  4888                           
  4889                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  4890                           
  4891                           ;incstack = 0
  4892                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4893  0471  0023               	movlb	3	; select bank3
  4894  0472  1C9D               	btfss	29,1	;volatile
  4895  0473  2C76               	goto	i1l2342
  4896                           
  4897                           ;eusart.c: 192: {
  4898                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  4899  0474  139D               	bcf	29,7	;volatile
  4900                           
  4901                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  4902  0475  179D               	bsf	29,7	;volatile
  4903  0476                     i1l2342:	
  4904                           
  4905                           ;eusart.c: 197: }
  4906                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  4907  0476  0819               	movf	25,w	;volatile
  4908  0477  00F5               	movwf	??_EUSART_Receive_ISR
  4909  0478  0020               	movlb	0	; select bank0
  4910  0479  083E               	movf	_eusartRxHead,w
  4911  047A  3E20               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4912  047B  0086               	movwf	6
  4913  047C  0187               	clrf	7
  4914  047D  0875               	movf	??_EUSART_Receive_ISR,w
  4915  047E  0081               	movwf	1
  4916  047F  3001               	movlw	1
  4917  0480  00F5               	movwf	??_EUSART_Receive_ISR
  4918  0481  0875               	movf	??_EUSART_Receive_ISR,w
  4919  0482  07BE               	addwf	_eusartRxHead,f
  4920                           
  4921                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4922  0483  3008               	movlw	8
  4923  0484  023E               	subwf	_eusartRxHead,w
  4924  0485  1803               	btfsc	3,0
  4925                           
  4926                           ;eusart.c: 202: {
  4927                           ;eusart.c: 203: eusartRxHead = 0;
  4928  0486  01BE               	clrf	_eusartRxHead
  4929                           
  4930                           ;eusart.c: 204: }
  4931                           ;eusart.c: 205: eusartRxCount++;
  4932  0487  3001               	movlw	1
  4933  0488  00F5               	movwf	??_EUSART_Receive_ISR
  4934  0489  0875               	movf	??_EUSART_Receive_ISR,w
  4935  048A  07BD               	addwf	_eusartRxCount,f	;volatile
  4936  048B  0008               	return
  4937  048C                     __end_of_EUSART_Receive_ISR:	
  4938  007E                     btemp	set	126	;btemp
  4939  007E                     int$flags	set	126
  4940  007E                     wtemp	set	126
  4941  007E                     wtemp0	set	126
  4942  0080                     wtemp1	set	128
  4943  0082                     wtemp2	set	130
  4944  0084                     wtemp3	set	132
  4945  0086                     wtemp4	set	134
  4946  0088                     wtemp5	set	136
  4947  007F                     wtemp6	set	127
  4948  007E                     ttemp	set	126
  4949  007E                     ttemp0	set	126
  4950  0081                     ttemp1	set	129
  4951  0084                     ttemp2	set	132
  4952  0087                     ttemp3	set	135
  4953  007F                     ttemp4	set	127
  4954  007E                     ltemp	set	126
  4955  007E                     ltemp0	set	126
  4956  0082                     ltemp1	set	130
  4957  0086                     ltemp2	set	134
  4958  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    0
    Data        1
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     25      62
    BANK1            32      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), my10msTimerISR(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), my10msTimerISR(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_GPS_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_EUSART_Read
    _GPS_Initialize->_printf
    _printf->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3945
                                             14 BANK0     11    11      0
                 _EPWM_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                    _EPWM_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     155
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      11    11      0    1926
                                              2 BANK0     11    11      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                             10 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_LoadDutyValue                                   4     2      2     601
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              4 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   3     3      0     112
                                              1 COMMON     3     3      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      48       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     19      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      48       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Sep 17 17:47:50 2016

                             __CFG_CP$OFF 0000                           _timer0ReloadVal 0043  
                                     l210 03FE                    __end_of_my10msTimerISR 051C  
                                     l159 0214                                       l516 04FB  
                                     l383 03A9                                       _PR2 001B  
                            __CFG_CPD$OFF 0000                           _TMR2_Initialize 04ED  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              ?_EUSART_Read 0075  
                            __CFG_LVP$OFF 0000                                      l2520 03BD  
                                    l2506 039E                                      l2532 045B  
                                    l2630 0339                                      l2720 00B1  
                                    l2538 03C4                                      l2730 00BA  
                                    l2650 0046                                      l2636 034E  
                                    l2812 012F                                      l2804 0127  
                                    l2740 00CA                                      l2814 0130  
                                    l2910 01A9                                      l2728 00B9  
                                    l2672 0068                                      l2648 0039  
                                    l2912 01AA                                      l2904 0194  
                                    l2770 00F4                                      l2762 00EC  
                                    l2682 007C                                      l2930 01C1  
                                    l2860 0176                                      l2836 0152  
                                    l2772 00F5                                      l2838 0154  
                                    l2782 0105                                      l2686 007E  
                                    l2918 01BE                                      l2688 007F  
                                    l2880 03EE                                      l2698 008F  
                                    l2882 03F5                                      l2962 021D  
                                    l2954 0207                                      l2868 017E  
                                    l2980 0243                                      l2948 01F2  
                                    l2974 022E                                      l2958 0210  
                                    l2984 0251                                      l2988 025D  
                                    STR_1 02ED                                      STR_2 0321  
                                    _LATA 010C                                      _LATC 010E  
                                    u2555 0430                                      u2707 01B9  
                                    u2717 01C7                                      u2727 01E1  
                                    u2737 01F8                                      u2747 0234  
                                    u2757 024C                                      u2767 0273  
                                    u2777 033F                                      u2697 019A  
                                    u2787 035A                                      u2797 036D  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                    __end_of_GPS_read_speed 0181  
                             main@tmp_154 0058                               main@tmp_156 0059  
                             main@tmp_157 005A                                      _main 0181  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0024  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_MCLRE$ON 0000                   __end_of_TMR0_Initialize 04B6  
                           __CFG_PLLEN$ON 0000            ??_TMR0_DefaultInterruptHandler 0075  
                           ?_EUSART_Write 0075            __size_of_OSCILLATOR_Initialize 0008  
           __end_of_OSCILLATOR_Initialize 04FE                                     ?_main 0075  
                           __CFG_WDTE$OFF 0000                                     _T2CON 001C  
                                   _LATA5 0865                           ?_my10msTimerISR 0075  
                                   i1l540 001F                                     i1l395 041C  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                        ??_GPS_Initialize 004E         __size_of_TMR0_SetInterruptHandler 0006  
               ?_TMR0_SetInterruptHandler 0044                          __end_of_TMR0_ISR 04CA  
                                   _putch 0511                   __end_of_LED_update_loop 039C  
                                   pclath 000A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                           ?_GPS_read_speed 0075  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           _TMR2_StartTimer 0516  
                         __initialization 0025                    __size_of_LED_set_state 0020  
                            __end_of_main 027A                            ??_EUSART_Write 0044  
                 __end_of_TMR2_Initialize 04F6               ?_INTERRUPT_InterruptManager 0075  
                                  ??_main 0052                              _b_last_state 0070  
                        _b_push_confirmed 003B                           _b_count_pressed 0073  
                                  _EEADRH 0192                                    _EEADRL 0191  
                                  _CCPR1H 0292                                    _EEDATH 0194  
                                  _CCPR1L 0291                                    _EEDATL 0193  
                                  _EECON2 0196                                    _APFCON 011D  
                                  _ANSELA 018C                                    ?_putch 0075  
                                  _ANSELC 018E                                    i1l2342 0476  
                                  u113_25 028B                                    i1l1912 02BF  
                                  i1l1904 02A7                                    i1l1922 02D3  
                                  i1l1932 02E8                                    i1l1856 04E0  
                                  i1l2496 0016                                    i1l2488 000D  
                                  i1l1876 038A                                    i1l1896 0296  
                                  u116_25 02B0                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                       GPS_read_speed@tmp 0047                            __CFG_PWRTE$OFF 0000  
                          __CFG_STVREN$ON 0000                       _EUSART_Transmit_ISR 0402  
                        ?_TMR0_Initialize 0075                __end_of_button_update_loop 02ED  
                                  _printf 0456                                    main@up 0056  
                __size_of_EPWM_Initialize 000C                             _LED_set_state 03E2  
                   __end_of_TMR0_CallBack 04ED                   __end_of_TMR2_StartTimer 0519  
TMR0_SetInterruptHandler@InterruptHandler 0044                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0075               __size_of_EPWM_LoadDutyValue 001C  
                        ?_LED_update_loop 0075                      __size_of_EUSART_Read 0022  
                       _SYSTEM_Initialize 04FE                   __end_of__initialization 0032  
                      ?_SYSTEM_Initialize 0075                            __pcstackCOMMON 0075  
                            __pidataBANK0 051C                       ??_SYSTEM_Initialize 0047  
                               ?_TMR0_ISR 0075                             __end_of_putch 0516  
                        ?_TMR2_Initialize 0075                            _OPTION_REGbits 0095  
                   TMR0_ISR@CountCallBack 0030                            ?_LED_set_state 0075  
                _b_has_once_been_released 003A                 __end_of_SYSTEM_Initialize 0505  
                   ??_EUSART_Transmit_ISR 0075                                   ??_putch 0046  
                              __pbssBANK0 0020                      __end_of_EUSART_Write 03C0  
                        _b_count_released 0039               __size_of_EUSART_Receive_ISR 001B  
                              __pmaintext 0181          __end_of_TMR0_SetInterruptHandler 0511  
                              ??_TMR0_ISR 0079                          ??_my10msTimerISR 0079  
                              __pintentry 0004                                   _CCP1CON 0293  
                                 _ECCP1AS 0295                                   _BAUDCON 019F  
                                 ?_printf 0047                     get_button_state@state 0075  
                           _eusartRxCount 003D                                   _OSCSTAT 009A  
                                 _OSCTUNE 0098                                   _PWM1CON 0294  
                        ??_GPS_read_speed 0046                          ?_TMR2_StartTimer 0075  
                       ??_EPWM_Initialize 0044                                   __ptext1 04FE  
                                 __ptext2 04ED                                   __ptext3 0516  
                                 __ptext4 04A2                                   __ptext5 050B  
                                 __ptext6 048C                                   __ptext7 04F6  
                                 __ptext8 043B                                   __ptext9 04CA  
                         __size_of_printf 001B                           ??_LED_set_state 0044  
                   _OSCILLATOR_Initialize 04F6                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0044                __size_of_SYSTEM_Initialize 0007  
                                 clrloop0 0506                                   main@res 0055  
                        _get_button_state 04D6                                   main@tmp 0057  
                          main@motor_load 005B                      end_of_initialization 0032  
                  LED_set_state@new_state 0045                                 _LED_state 005D  
             EPWM_LoadDutyValue@dutyValue 0044                         _EUSART_Initialize 043B  
                      ?_EUSART_Initialize 0075                                 _RCSTAbits 019D  
                                 printf@c 004D                                   printf@f 0047  
                            __pstringtext 02ED                       ??_EUSART_Initialize 0044  
                _TMR0_SetInterruptHandler 050B                                 _PORTAbits 000C  
                    GPS_read_speed@i_buff 004F                      GPS_read_speed@m_char 0050  
                    GPS_read_speed@buffer 0048                          __CFG_FOSC$INTOSC 0000  
                   __size_of_EUSART_Write 0024                        _button_update_loop 027A  
               __end_of_EUSART_Initialize 0456                   __size_of_GPS_Initialize 0041  
                     ?_button_update_loop 0075                              _EUSART_Write 039C  
                       __size_of_TMR0_ISR 0014                    ?_OSCILLATOR_Initialize 0075  
                    ??_button_update_loop 0076                            __end_of_printf 0471  
                     start_initialization 0025                  __size_of_TMR0_Initialize 0014  
         __size_of_PIN_MANAGER_Initialize 0016                __end_of_EPWM_LoadDutyValue 043B  
                           ??_EUSART_Read 0044                               putch@txData 0046  
                __size_of_LED_update_loop 0028                    __size_of_TMR0_CallBack 000B  
                             __pdataBANK0 005D                                  ??_printf 0049  
                         _EPWM_Initialize 04CA               __end_of_EUSART_Transmit_ISR 041F  
                             __pbssCOMMON 0070                                 ___latbits 0000  
                           __pcstackBANK0 0044                  __size_of_TMR2_Initialize 0009  
              __end_of_EUSART_Receive_ISR 048C                __size_of_EUSART_Initialize 001B  
                     __end_of_EUSART_Read 03E2                     _TMR0_InterruptHandler 0032  
                  _PIN_MANAGER_Initialize 048C                      EUSART_Read@readValue 0045  
                __end_of_get_button_state 04E2                              _eusartRxHead 003E  
                            _eusartTxHead 0040                              _eusartRxTail 003F  
                            _eusartTxTail 0041              ??_INTERRUPT_InterruptManager 0079  
                 _eusartTxBufferRemaining 0074                             _TMR0_CallBack 04E2  
                          __size_of_putch 0005                            _eusartRxBuffer 0020  
                       ??_TMR0_Initialize 0046                            _GPS_Initialize 0333  
                          _eusartTxBuffer 0028                                 clear_ram0 0505  
                                _PIE1bits 0091                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 0020                ??_TMR0_SetInterruptHandler 0046  
                                _PIR1bits 0011                                 _speed_dec 0034  
                                _TMR0_ISR 04B6                                 _speed_int 0036  
                                _PSTR1CON 0296                   __end_of_EPWM_Initialize 04D6  
                       ??_LED_update_loop 0075                     __end_of_LED_set_state 0402  
                 __size_of_my10msTimerISR 0003                            ?_TMR0_CallBack 0075  
                             _EUSART_Read 03C0                    __end_of_GPS_Initialize 0374  
                       ??_TMR2_Initialize 0044                                _EECON1bits 0195  
                 __size_of_GPS_read_speed 014C                               _LED_counter 0072  
                       GPS_Initialize@tmp 0051                   ??_OSCILLATOR_Initialize 0044  
         button_update_loop@current_state 0078                                  __ptext10 03E2  
                                __ptext11 0035                                  __ptext20 04E2  
                                __ptext12 03C0                                  __ptext21 051D  
                                __ptext13 0333                                  __ptext22 0519  
                                __ptext14 0456                                  __ptext23 027A  
                                __ptext15 0511                                  __ptext24 04D6  
                                __ptext16 039C                                  __ptext25 0374  
                                __ptext17 041F                                  __ptext26 0402  
                                __ptext27 0471                                  __ptext19 04B6  
                         ?_GPS_Initialize 0075                         _b_confirmed_state 0038  
                           __size_of_main 00F9      __end_of_TMR0_DefaultInterruptHandler 051E  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 051D  
                      _EPWM_LoadDutyValue 041F                                  int$flags 007E  
                     _b_release_confirmed 003C                          ?_EPWM_Initialize 0075  
                       ??_TMR2_StartTimer 0044        __end_of_INTERRUPT_InterruptManager 0024  
              _INTERRUPT_InterruptManager 0004                       ?_EPWM_LoadDutyValue 0044  
             __size_of_button_update_loop 0073                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0079                      ??_EPWM_LoadDutyValue 0046  
                                intlevel1 0000                   ?_PIN_MANAGER_Initialize 0075  
                       __CFG_CLKOUTEN$OFF 0000             ?_TMR0_DefaultInterruptHandler 0075  
                                printf@ap 004C                        _EUSART_Receive_ISR 0471  
                       ?_get_button_state 0075                        ??_get_button_state 0075  
                              _OPTION_REG 0095                       ?_EUSART_Receive_ISR 0075  
                         _TMR0_Initialize 04A2                    GPS_read_speed@checksum 004E  
                          _my10msTimerISR 0519                               _speed_units 0042  
                      EUSART_Write@txData 0045              __size_of_EUSART_Transmit_ISR 001D  
          __end_of_PIN_MANAGER_Initialize 04A2                      ??_EUSART_Receive_ISR 0075  
                          _GPS_read_speed 0035                           _LED_update_loop 0374  



Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 19 00:10:40 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000E                     	;# 
    61  0011                     	;# 
    62  0012                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  008C                     	;# 
    75  008E                     	;# 
    76  0091                     	;# 
    77  0092                     	;# 
    78  0095                     	;# 
    79  0096                     	;# 
    80  0097                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  010C                     	;# 
    90  010E                     	;# 
    91  0111                     	;# 
    92  0112                     	;# 
    93  0113                     	;# 
    94  0114                     	;# 
    95  0115                     	;# 
    96  0116                     	;# 
    97  0117                     	;# 
    98  0118                     	;# 
    99  0119                     	;# 
   100  011A                     	;# 
   101  011B                     	;# 
   102  011D                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  018E                     	;# 
   106  0191                     	;# 
   107  0191                     	;# 
   108  0192                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0194                     	;# 
   113  0195                     	;# 
   114  0196                     	;# 
   115  0199                     	;# 
   116  019A                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019C                     	;# 
   122  019C                     	;# 
   123  019D                     	;# 
   124  019E                     	;# 
   125  019F                     	;# 
   126  020C                     	;# 
   127  020E                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0291                     	;# 
   144  0291                     	;# 
   145  0292                     	;# 
   146  0293                     	;# 
   147  0294                     	;# 
   148  0295                     	;# 
   149  0295                     	;# 
   150  0296                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  039A                     	;# 
   155  039C                     	;# 
   156  039D                     	;# 
   157  039E                     	;# 
   158  039F                     	;# 
   159  0FE4                     	;# 
   160  0FE5                     	;# 
   161  0FE6                     	;# 
   162  0FE7                     	;# 
   163  0FE8                     	;# 
   164  0FE9                     	;# 
   165  0FEA                     	;# 
   166  0FEB                     	;# 
   167  0FED                     	;# 
   168  0FEE                     	;# 
   169  0FEF                     	;# 
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000E                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  008C                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  010C                     	;# 
   213  010E                     	;# 
   214  0111                     	;# 
   215  0112                     	;# 
   216  0113                     	;# 
   217  0114                     	;# 
   218  0115                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  0118                     	;# 
   222  0119                     	;# 
   223  011A                     	;# 
   224  011B                     	;# 
   225  011D                     	;# 
   226  011D                     	;# 
   227  018C                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0193                     	;# 
   235  0194                     	;# 
   236  0195                     	;# 
   237  0196                     	;# 
   238  0199                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  020C                     	;# 
   250  020E                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0294                     	;# 
   271  0295                     	;# 
   272  0295                     	;# 
   273  0296                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  039A                     	;# 
   278  039C                     	;# 
   279  039D                     	;# 
   280  039E                     	;# 
   281  039F                     	;# 
   282  0FE4                     	;# 
   283  0FE5                     	;# 
   284  0FE6                     	;# 
   285  0FE7                     	;# 
   286  0FE8                     	;# 
   287  0FE9                     	;# 
   288  0FEA                     	;# 
   289  0FEB                     	;# 
   290  0FED                     	;# 
   291  0FEE                     	;# 
   292  0FEF                     	;# 
   293  0000                     	;# 
   294  0001                     	;# 
   295  0002                     	;# 
   296  0003                     	;# 
   297  0004                     	;# 
   298  0005                     	;# 
   299  0006                     	;# 
   300  0007                     	;# 
   301  0008                     	;# 
   302  0009                     	;# 
   303  000A                     	;# 
   304  000B                     	;# 
   305  000C                     	;# 
   306  000E                     	;# 
   307  0011                     	;# 
   308  0012                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  008C                     	;# 
   321  008E                     	;# 
   322  0091                     	;# 
   323  0092                     	;# 
   324  0095                     	;# 
   325  0096                     	;# 
   326  0097                     	;# 
   327  0098                     	;# 
   328  0099                     	;# 
   329  009A                     	;# 
   330  009B                     	;# 
   331  009B                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  010C                     	;# 
   336  010E                     	;# 
   337  0111                     	;# 
   338  0112                     	;# 
   339  0113                     	;# 
   340  0114                     	;# 
   341  0115                     	;# 
   342  0116                     	;# 
   343  0117                     	;# 
   344  0118                     	;# 
   345  0119                     	;# 
   346  011A                     	;# 
   347  011B                     	;# 
   348  011D                     	;# 
   349  011D                     	;# 
   350  018C                     	;# 
   351  018E                     	;# 
   352  0191                     	;# 
   353  0191                     	;# 
   354  0192                     	;# 
   355  0193                     	;# 
   356  0193                     	;# 
   357  0193                     	;# 
   358  0194                     	;# 
   359  0195                     	;# 
   360  0196                     	;# 
   361  0199                     	;# 
   362  019A                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019C                     	;# 
   368  019C                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  019F                     	;# 
   372  020C                     	;# 
   373  020E                     	;# 
   374  0211                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0212                     	;# 
   378  0213                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0214                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0216                     	;# 
   386  0216                     	;# 
   387  0217                     	;# 
   388  0217                     	;# 
   389  0291                     	;# 
   390  0291                     	;# 
   391  0292                     	;# 
   392  0293                     	;# 
   393  0294                     	;# 
   394  0295                     	;# 
   395  0295                     	;# 
   396  0296                     	;# 
   397  0391                     	;# 
   398  0392                     	;# 
   399  0393                     	;# 
   400  039A                     	;# 
   401  039C                     	;# 
   402  039D                     	;# 
   403  039E                     	;# 
   404  039F                     	;# 
   405  0FE4                     	;# 
   406  0FE5                     	;# 
   407  0FE6                     	;# 
   408  0FE7                     	;# 
   409  0FE8                     	;# 
   410  0FE9                     	;# 
   411  0FEA                     	;# 
   412  0FEB                     	;# 
   413  0FED                     	;# 
   414  0FEE                     	;# 
   415  0FEF                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0008                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  000E                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0015                     	;# 
   433  0016                     	;# 
   434  0016                     	;# 
   435  0017                     	;# 
   436  0018                     	;# 
   437  0019                     	;# 
   438  001A                     	;# 
   439  001B                     	;# 
   440  001C                     	;# 
   441  001E                     	;# 
   442  001F                     	;# 
   443  008C                     	;# 
   444  008E                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0095                     	;# 
   448  0096                     	;# 
   449  0097                     	;# 
   450  0098                     	;# 
   451  0099                     	;# 
   452  009A                     	;# 
   453  009B                     	;# 
   454  009B                     	;# 
   455  009C                     	;# 
   456  009D                     	;# 
   457  009E                     	;# 
   458  010C                     	;# 
   459  010E                     	;# 
   460  0111                     	;# 
   461  0112                     	;# 
   462  0113                     	;# 
   463  0114                     	;# 
   464  0115                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  0118                     	;# 
   468  0119                     	;# 
   469  011A                     	;# 
   470  011B                     	;# 
   471  011D                     	;# 
   472  011D                     	;# 
   473  018C                     	;# 
   474  018E                     	;# 
   475  0191                     	;# 
   476  0191                     	;# 
   477  0192                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0193                     	;# 
   481  0194                     	;# 
   482  0195                     	;# 
   483  0196                     	;# 
   484  0199                     	;# 
   485  019A                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019C                     	;# 
   491  019C                     	;# 
   492  019D                     	;# 
   493  019E                     	;# 
   494  019F                     	;# 
   495  020C                     	;# 
   496  020E                     	;# 
   497  0211                     	;# 
   498  0211                     	;# 
   499  0212                     	;# 
   500  0212                     	;# 
   501  0213                     	;# 
   502  0213                     	;# 
   503  0214                     	;# 
   504  0214                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0216                     	;# 
   509  0216                     	;# 
   510  0217                     	;# 
   511  0217                     	;# 
   512  0291                     	;# 
   513  0291                     	;# 
   514  0292                     	;# 
   515  0293                     	;# 
   516  0294                     	;# 
   517  0295                     	;# 
   518  0295                     	;# 
   519  0296                     	;# 
   520  0391                     	;# 
   521  0392                     	;# 
   522  0393                     	;# 
   523  039A                     	;# 
   524  039C                     	;# 
   525  039D                     	;# 
   526  039E                     	;# 
   527  039F                     	;# 
   528  0FE4                     	;# 
   529  0FE5                     	;# 
   530  0FE6                     	;# 
   531  0FE7                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEF                     	;# 
   539  0000                     	;# 
   540  0001                     	;# 
   541  0002                     	;# 
   542  0003                     	;# 
   543  0004                     	;# 
   544  0005                     	;# 
   545  0006                     	;# 
   546  0007                     	;# 
   547  0008                     	;# 
   548  0009                     	;# 
   549  000A                     	;# 
   550  000B                     	;# 
   551  000C                     	;# 
   552  000E                     	;# 
   553  0011                     	;# 
   554  0012                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0016                     	;# 
   558  0017                     	;# 
   559  0018                     	;# 
   560  0019                     	;# 
   561  001A                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  001E                     	;# 
   565  001F                     	;# 
   566  008C                     	;# 
   567  008E                     	;# 
   568  0091                     	;# 
   569  0092                     	;# 
   570  0095                     	;# 
   571  0096                     	;# 
   572  0097                     	;# 
   573  0098                     	;# 
   574  0099                     	;# 
   575  009A                     	;# 
   576  009B                     	;# 
   577  009B                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  010C                     	;# 
   582  010E                     	;# 
   583  0111                     	;# 
   584  0112                     	;# 
   585  0113                     	;# 
   586  0114                     	;# 
   587  0115                     	;# 
   588  0116                     	;# 
   589  0117                     	;# 
   590  0118                     	;# 
   591  0119                     	;# 
   592  011A                     	;# 
   593  011B                     	;# 
   594  011D                     	;# 
   595  011D                     	;# 
   596  018C                     	;# 
   597  018E                     	;# 
   598  0191                     	;# 
   599  0191                     	;# 
   600  0192                     	;# 
   601  0193                     	;# 
   602  0193                     	;# 
   603  0193                     	;# 
   604  0194                     	;# 
   605  0195                     	;# 
   606  0196                     	;# 
   607  0199                     	;# 
   608  019A                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019B                     	;# 
   612  019B                     	;# 
   613  019C                     	;# 
   614  019C                     	;# 
   615  019D                     	;# 
   616  019E                     	;# 
   617  019F                     	;# 
   618  020C                     	;# 
   619  020E                     	;# 
   620  0211                     	;# 
   621  0211                     	;# 
   622  0212                     	;# 
   623  0212                     	;# 
   624  0213                     	;# 
   625  0213                     	;# 
   626  0214                     	;# 
   627  0214                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0215                     	;# 
   631  0216                     	;# 
   632  0216                     	;# 
   633  0217                     	;# 
   634  0217                     	;# 
   635  0291                     	;# 
   636  0291                     	;# 
   637  0292                     	;# 
   638  0293                     	;# 
   639  0294                     	;# 
   640  0295                     	;# 
   641  0295                     	;# 
   642  0296                     	;# 
   643  0391                     	;# 
   644  0392                     	;# 
   645  0393                     	;# 
   646  039A                     	;# 
   647  039C                     	;# 
   648  039D                     	;# 
   649  039E                     	;# 
   650  039F                     	;# 
   651  0FE4                     	;# 
   652  0FE5                     	;# 
   653  0FE6                     	;# 
   654  0FE7                     	;# 
   655  0FE8                     	;# 
   656  0FE9                     	;# 
   657  0FEA                     	;# 
   658  0FEB                     	;# 
   659  0FED                     	;# 
   660  0FEE                     	;# 
   661  0FEF                     	;# 
   662  0000                     	;# 
   663  0001                     	;# 
   664  0002                     	;# 
   665  0003                     	;# 
   666  0004                     	;# 
   667  0005                     	;# 
   668  0006                     	;# 
   669  0007                     	;# 
   670  0008                     	;# 
   671  0009                     	;# 
   672  000A                     	;# 
   673  000B                     	;# 
   674  000C                     	;# 
   675  000E                     	;# 
   676  0011                     	;# 
   677  0012                     	;# 
   678  0015                     	;# 
   679  0016                     	;# 
   680  0016                     	;# 
   681  0017                     	;# 
   682  0018                     	;# 
   683  0019                     	;# 
   684  001A                     	;# 
   685  001B                     	;# 
   686  001C                     	;# 
   687  001E                     	;# 
   688  001F                     	;# 
   689  008C                     	;# 
   690  008E                     	;# 
   691  0091                     	;# 
   692  0092                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0097                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009A                     	;# 
   699  009B                     	;# 
   700  009B                     	;# 
   701  009C                     	;# 
   702  009D                     	;# 
   703  009E                     	;# 
   704  010C                     	;# 
   705  010E                     	;# 
   706  0111                     	;# 
   707  0112                     	;# 
   708  0113                     	;# 
   709  0114                     	;# 
   710  0115                     	;# 
   711  0116                     	;# 
   712  0117                     	;# 
   713  0118                     	;# 
   714  0119                     	;# 
   715  011A                     	;# 
   716  011B                     	;# 
   717  011D                     	;# 
   718  011D                     	;# 
   719  018C                     	;# 
   720  018E                     	;# 
   721  0191                     	;# 
   722  0191                     	;# 
   723  0192                     	;# 
   724  0193                     	;# 
   725  0193                     	;# 
   726  0193                     	;# 
   727  0194                     	;# 
   728  0195                     	;# 
   729  0196                     	;# 
   730  0199                     	;# 
   731  019A                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019B                     	;# 
   736  019C                     	;# 
   737  019C                     	;# 
   738  019D                     	;# 
   739  019E                     	;# 
   740  019F                     	;# 
   741  020C                     	;# 
   742  020E                     	;# 
   743  0211                     	;# 
   744  0211                     	;# 
   745  0212                     	;# 
   746  0212                     	;# 
   747  0213                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0214                     	;# 
   751  0215                     	;# 
   752  0215                     	;# 
   753  0215                     	;# 
   754  0216                     	;# 
   755  0216                     	;# 
   756  0217                     	;# 
   757  0217                     	;# 
   758  0291                     	;# 
   759  0291                     	;# 
   760  0292                     	;# 
   761  0293                     	;# 
   762  0294                     	;# 
   763  0295                     	;# 
   764  0295                     	;# 
   765  0296                     	;# 
   766  0391                     	;# 
   767  0392                     	;# 
   768  0393                     	;# 
   769  039A                     	;# 
   770  039C                     	;# 
   771  039D                     	;# 
   772  039E                     	;# 
   773  039F                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000E                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0015                     	;# 
   802  0016                     	;# 
   803  0016                     	;# 
   804  0017                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  001B                     	;# 
   809  001C                     	;# 
   810  001E                     	;# 
   811  001F                     	;# 
   812  008C                     	;# 
   813  008E                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0095                     	;# 
   817  0096                     	;# 
   818  0097                     	;# 
   819  0098                     	;# 
   820  0099                     	;# 
   821  009A                     	;# 
   822  009B                     	;# 
   823  009B                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009E                     	;# 
   827  010C                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  011A                     	;# 
   839  011B                     	;# 
   840  011D                     	;# 
   841  011D                     	;# 
   842  018C                     	;# 
   843  018E                     	;# 
   844  0191                     	;# 
   845  0191                     	;# 
   846  0192                     	;# 
   847  0193                     	;# 
   848  0193                     	;# 
   849  0193                     	;# 
   850  0194                     	;# 
   851  0195                     	;# 
   852  0196                     	;# 
   853  0199                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019C                     	;# 
   861  019D                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  020C                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0216                     	;# 
   878  0216                     	;# 
   879  0217                     	;# 
   880  0217                     	;# 
   881  0291                     	;# 
   882  0291                     	;# 
   883  0292                     	;# 
   884  0293                     	;# 
   885  0294                     	;# 
   886  0295                     	;# 
   887  0295                     	;# 
   888  0296                     	;# 
   889  0391                     	;# 
   890  0392                     	;# 
   891  0393                     	;# 
   892  039A                     	;# 
   893  039C                     	;# 
   894  039D                     	;# 
   895  039E                     	;# 
   896  039F                     	;# 
   897  0FE4                     	;# 
   898  0FE5                     	;# 
   899  0FE6                     	;# 
   900  0FE7                     	;# 
   901  0FE8                     	;# 
   902  0FE9                     	;# 
   903  0FEA                     	;# 
   904  0FEB                     	;# 
   905  0FED                     	;# 
   906  0FEE                     	;# 
   907  0FEF                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0008                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000E                     	;# 
   922  0011                     	;# 
   923  0012                     	;# 
   924  0015                     	;# 
   925  0016                     	;# 
   926  0016                     	;# 
   927  0017                     	;# 
   928  0018                     	;# 
   929  0019                     	;# 
   930  001A                     	;# 
   931  001B                     	;# 
   932  001C                     	;# 
   933  001E                     	;# 
   934  001F                     	;# 
   935  008C                     	;# 
   936  008E                     	;# 
   937  0091                     	;# 
   938  0092                     	;# 
   939  0095                     	;# 
   940  0096                     	;# 
   941  0097                     	;# 
   942  0098                     	;# 
   943  0099                     	;# 
   944  009A                     	;# 
   945  009B                     	;# 
   946  009B                     	;# 
   947  009C                     	;# 
   948  009D                     	;# 
   949  009E                     	;# 
   950  010C                     	;# 
   951  010E                     	;# 
   952  0111                     	;# 
   953  0112                     	;# 
   954  0113                     	;# 
   955  0114                     	;# 
   956  0115                     	;# 
   957  0116                     	;# 
   958  0117                     	;# 
   959  0118                     	;# 
   960  0119                     	;# 
   961  011A                     	;# 
   962  011B                     	;# 
   963  011D                     	;# 
   964  011D                     	;# 
   965  018C                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0193                     	;# 
   973  0194                     	;# 
   974  0195                     	;# 
   975  0196                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020C                     	;# 
   988  020E                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0294                     	;# 
  1009  0295                     	;# 
  1010  0295                     	;# 
  1011  0296                     	;# 
  1012  0391                     	;# 
  1013  0392                     	;# 
  1014  0393                     	;# 
  1015  039A                     	;# 
  1016  039C                     	;# 
  1017  039D                     	;# 
  1018  039E                     	;# 
  1019  039F                     	;# 
  1020  0FE4                     	;# 
  1021  0FE5                     	;# 
  1022  0FE6                     	;# 
  1023  0FE7                     	;# 
  1024  0FE8                     	;# 
  1025  0FE9                     	;# 
  1026  0FEA                     	;# 
  1027  0FEB                     	;# 
  1028  0FED                     	;# 
  1029  0FEE                     	;# 
  1030  0FEF                     	;# 
  1031  0000                     	;# 
  1032  0001                     	;# 
  1033  0002                     	;# 
  1034  0003                     	;# 
  1035  0004                     	;# 
  1036  0005                     	;# 
  1037  0006                     	;# 
  1038  0007                     	;# 
  1039  0008                     	;# 
  1040  0009                     	;# 
  1041  000A                     	;# 
  1042  000B                     	;# 
  1043  000C                     	;# 
  1044  000E                     	;# 
  1045  0011                     	;# 
  1046  0012                     	;# 
  1047  0015                     	;# 
  1048  0016                     	;# 
  1049  0016                     	;# 
  1050  0017                     	;# 
  1051  0018                     	;# 
  1052  0019                     	;# 
  1053  001A                     	;# 
  1054  001B                     	;# 
  1055  001C                     	;# 
  1056  001E                     	;# 
  1057  001F                     	;# 
  1058  008C                     	;# 
  1059  008E                     	;# 
  1060  0091                     	;# 
  1061  0092                     	;# 
  1062  0095                     	;# 
  1063  0096                     	;# 
  1064  0097                     	;# 
  1065  0098                     	;# 
  1066  0099                     	;# 
  1067  009A                     	;# 
  1068  009B                     	;# 
  1069  009B                     	;# 
  1070  009C                     	;# 
  1071  009D                     	;# 
  1072  009E                     	;# 
  1073  010C                     	;# 
  1074  010E                     	;# 
  1075  0111                     	;# 
  1076  0112                     	;# 
  1077  0113                     	;# 
  1078  0114                     	;# 
  1079  0115                     	;# 
  1080  0116                     	;# 
  1081  0117                     	;# 
  1082  0118                     	;# 
  1083  0119                     	;# 
  1084  011A                     	;# 
  1085  011B                     	;# 
  1086  011D                     	;# 
  1087  011D                     	;# 
  1088  018C                     	;# 
  1089  018E                     	;# 
  1090  0191                     	;# 
  1091  0191                     	;# 
  1092  0192                     	;# 
  1093  0193                     	;# 
  1094  0193                     	;# 
  1095  0193                     	;# 
  1096  0194                     	;# 
  1097  0195                     	;# 
  1098  0196                     	;# 
  1099  0199                     	;# 
  1100  019A                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019C                     	;# 
  1106  019C                     	;# 
  1107  019D                     	;# 
  1108  019E                     	;# 
  1109  019F                     	;# 
  1110  020C                     	;# 
  1111  020E                     	;# 
  1112  0211                     	;# 
  1113  0211                     	;# 
  1114  0212                     	;# 
  1115  0212                     	;# 
  1116  0213                     	;# 
  1117  0213                     	;# 
  1118  0214                     	;# 
  1119  0214                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0216                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0217                     	;# 
  1127  0291                     	;# 
  1128  0291                     	;# 
  1129  0292                     	;# 
  1130  0293                     	;# 
  1131  0294                     	;# 
  1132  0295                     	;# 
  1133  0295                     	;# 
  1134  0296                     	;# 
  1135  0391                     	;# 
  1136  0392                     	;# 
  1137  0393                     	;# 
  1138  039A                     	;# 
  1139  039C                     	;# 
  1140  039D                     	;# 
  1141  039E                     	;# 
  1142  039F                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000E                     	;# 
  1168  0011                     	;# 
  1169  0012                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  001E                     	;# 
  1180  001F                     	;# 
  1181  008C                     	;# 
  1182  008E                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0095                     	;# 
  1186  0096                     	;# 
  1187  0097                     	;# 
  1188  0098                     	;# 
  1189  0099                     	;# 
  1190  009A                     	;# 
  1191  009B                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010E                     	;# 
  1198  0111                     	;# 
  1199  0112                     	;# 
  1200  0113                     	;# 
  1201  0114                     	;# 
  1202  0115                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  0118                     	;# 
  1206  0119                     	;# 
  1207  011A                     	;# 
  1208  011B                     	;# 
  1209  011D                     	;# 
  1210  011D                     	;# 
  1211  018C                     	;# 
  1212  018E                     	;# 
  1213  0191                     	;# 
  1214  0191                     	;# 
  1215  0192                     	;# 
  1216  0193                     	;# 
  1217  0193                     	;# 
  1218  0193                     	;# 
  1219  0194                     	;# 
  1220  0195                     	;# 
  1221  0196                     	;# 
  1222  0199                     	;# 
  1223  019A                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019C                     	;# 
  1229  019C                     	;# 
  1230  019D                     	;# 
  1231  019E                     	;# 
  1232  019F                     	;# 
  1233  020C                     	;# 
  1234  020E                     	;# 
  1235  0211                     	;# 
  1236  0211                     	;# 
  1237  0212                     	;# 
  1238  0212                     	;# 
  1239  0213                     	;# 
  1240  0213                     	;# 
  1241  0214                     	;# 
  1242  0214                     	;# 
  1243  0215                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0216                     	;# 
  1247  0216                     	;# 
  1248  0217                     	;# 
  1249  0217                     	;# 
  1250  0291                     	;# 
  1251  0291                     	;# 
  1252  0292                     	;# 
  1253  0293                     	;# 
  1254  0294                     	;# 
  1255  0295                     	;# 
  1256  0295                     	;# 
  1257  0296                     	;# 
  1258  0391                     	;# 
  1259  0392                     	;# 
  1260  0393                     	;# 
  1261  039A                     	;# 
  1262  039C                     	;# 
  1263  039D                     	;# 
  1264  039E                     	;# 
  1265  039F                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000E                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  001E                     	;# 
  1303  001F                     	;# 
  1304  008C                     	;# 
  1305  008E                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0098                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010E                     	;# 
  1321  0111                     	;# 
  1322  0112                     	;# 
  1323  0113                     	;# 
  1324  0114                     	;# 
  1325  0115                     	;# 
  1326  0116                     	;# 
  1327  0117                     	;# 
  1328  0118                     	;# 
  1329  0119                     	;# 
  1330  011A                     	;# 
  1331  011B                     	;# 
  1332  011D                     	;# 
  1333  011D                     	;# 
  1334  018C                     	;# 
  1335  018E                     	;# 
  1336  0191                     	;# 
  1337  0191                     	;# 
  1338  0192                     	;# 
  1339  0193                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0194                     	;# 
  1343  0195                     	;# 
  1344  0196                     	;# 
  1345  0199                     	;# 
  1346  019A                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019C                     	;# 
  1352  019C                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019F                     	;# 
  1356  020C                     	;# 
  1357  020E                     	;# 
  1358  0211                     	;# 
  1359  0211                     	;# 
  1360  0212                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0213                     	;# 
  1364  0214                     	;# 
  1365  0214                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0291                     	;# 
  1374  0291                     	;# 
  1375  0292                     	;# 
  1376  0293                     	;# 
  1377  0294                     	;# 
  1378  0295                     	;# 
  1379  0295                     	;# 
  1380  0296                     	;# 
  1381  0391                     	;# 
  1382  0392                     	;# 
  1383  0393                     	;# 
  1384  039A                     	;# 
  1385  039C                     	;# 
  1386  039D                     	;# 
  1387  039E                     	;# 
  1388  039F                     	;# 
  1389  0FE4                     	;# 
  1390  0FE5                     	;# 
  1391  0FE6                     	;# 
  1392  0FE7                     	;# 
  1393  0FE8                     	;# 
  1394  0FE9                     	;# 
  1395  0FEA                     	;# 
  1396  0FEB                     	;# 
  1397  0FED                     	;# 
  1398  0FEE                     	;# 
  1399  0FEF                     	;# 
  1400                           
  1401                           	psect	idataBANK0
  1402  07DF                     __pidataBANK0:	
  1403                           
  1404                           ;initializer for _LED_state
  1405  07DF  3401               	retlw	1
  1406                           
  1407                           	psect	stringtext
  1408  055F                     __pstringtext:	
  1409  055F                     _ratio_mph:	
  1410  055F  34BE               	retlw	190
  1411  0560  3427               	retlw	39
  1412  0561  3400               	retlw	0
  1413  0562                     __end_of_ratio_mph:	
  1414  0562                     convert_to_fp@one:	
  1415  0562  3401               	retlw	1
  1416  0563  3400               	retlw	0
  1417  0564                     __end_ofconvert_to_fp@one:	
  1418  000B                     _INTCONbits	set	11
  1419  0011                     _PIR1bits	set	17
  1420  000C                     _PORTAbits	set	12
  1421  001B                     _PR2	set	27
  1422  001C                     _T2CON	set	28
  1423  001C                     _T2CONbits	set	28
  1424  0015                     _TMR0	set	21
  1425  001A                     _TMR2	set	26
  1426  0095                     _OPTION_REG	set	149
  1427  0095                     _OPTION_REGbits	set	149
  1428  0099                     _OSCCON	set	153
  1429  009A                     _OSCSTAT	set	154
  1430  0098                     _OSCTUNE	set	152
  1431  0091                     _PIE1bits	set	145
  1432  008C                     _TRISA	set	140
  1433  008E                     _TRISC	set	142
  1434  04D6                     _PLLR	set	1238
  1435  011D                     _APFCON	set	285
  1436  010C                     _LATA	set	268
  1437  010E                     _LATC	set	270
  1438  0865                     _LATA5	set	2149
  1439  018C                     _ANSELA	set	396
  1440  018E                     _ANSELC	set	398
  1441  019F                     _BAUDCON	set	415
  1442  0192                     _EEADRH	set	402
  1443  0191                     _EEADRL	set	401
  1444  0195                     _EECON1bits	set	405
  1445  0196                     _EECON2	set	406
  1446  0194                     _EEDATH	set	404
  1447  0193                     _EEDATL	set	403
  1448  0199                     _RCREG	set	409
  1449  019D                     _RCSTA	set	413
  1450  019D                     _RCSTAbits	set	413
  1451  019C                     _SPBRGH	set	412
  1452  019B                     _SPBRGL	set	411
  1453  019A                     _TXREG	set	410
  1454  019E                     _TXSTA	set	414
  1455  020C                     _WPUA	set	524
  1456  020E                     _WPUC	set	526
  1457  0293                     _CCP1CON	set	659
  1458  0292                     _CCPR1H	set	658
  1459  0291                     _CCPR1L	set	657
  1460  0295                     _ECCP1AS	set	661
  1461  0296                     _PSTR1CON	set	662
  1462  0294                     _PWM1CON	set	660
  1463  0564                     STR_1:	
  1464  0564  3424               	retlw	36	;'$'
  1465  0565  3450               	retlw	80	;'P'
  1466  0566  344D               	retlw	77	;'M'
  1467  0567  3454               	retlw	84	;'T'
  1468  0568  344B               	retlw	75	;'K'
  1469  0569  3433               	retlw	51	;'3'
  1470  056A  3431               	retlw	49	;'1'
  1471  056B  3434               	retlw	52	;'4'
  1472  056C  342C               	retlw	44	;','
  1473  056D  3430               	retlw	48	;'0'
  1474  056E  342C               	retlw	44	;','
  1475  056F  3430               	retlw	48	;'0'
  1476  0570  342C               	retlw	44	;','
  1477  0571  3431               	retlw	49	;'1'
  1478  0572  342C               	retlw	44	;','
  1479  0573  3430               	retlw	48	;'0'
  1480  0574  342C               	retlw	44	;','
  1481  0575  3430               	retlw	48	;'0'
  1482  0576  342C               	retlw	44	;','
  1483  0577  3430               	retlw	48	;'0'
  1484  0578  342C               	retlw	44	;','
  1485  0579  3430               	retlw	48	;'0'
  1486  057A  342C               	retlw	44	;','
  1487  057B  3430               	retlw	48	;'0'
  1488  057C  342C               	retlw	44	;','
  1489  057D  3430               	retlw	48	;'0'
  1490  057E  342C               	retlw	44	;','
  1491  057F  3430               	retlw	48	;'0'
  1492  0580  342C               	retlw	44	;','
  1493  0581  3430               	retlw	48	;'0'
  1494  0582  342C               	retlw	44	;','
  1495  0583  3430               	retlw	48	;'0'
  1496  0584  342C               	retlw	44	;','
  1497  0585  3430               	retlw	48	;'0'
  1498  0586  342C               	retlw	44	;','
  1499  0587  3430               	retlw	48	;'0'
  1500  0588  342C               	retlw	44	;','
  1501  0589  3430               	retlw	48	;'0'
  1502  058A  342C               	retlw	44	;','
  1503  058B  3430               	retlw	48	;'0'
  1504  058C  342C               	retlw	44	;','
  1505  058D  3430               	retlw	48	;'0'
  1506  058E  342C               	retlw	44	;','
  1507  058F  3430               	retlw	48	;'0'
  1508  0590  342C               	retlw	44	;','
  1509  0591  3430               	retlw	48	;'0'
  1510  0592  342A               	retlw	42	;'*'
  1511  0593  3432               	retlw	50	;'2'
  1512  0594  3439               	retlw	57	;'9'
  1513  0595  340D               	retlw	13
  1514  0596  340A               	retlw	10
  1515  0597  3400               	retlw	0
  1516  0598                     STR_2:	
  1517  0598  3424               	retlw	36	;'$'
  1518  0599  3450               	retlw	80	;'P'
  1519  059A  344D               	retlw	77	;'M'
  1520  059B  3454               	retlw	84	;'T'
  1521  059C  344B               	retlw	75	;'K'
  1522  059D  3432               	retlw	50	;'2'
  1523  059E  3432               	retlw	50	;'2'
  1524  059F  3430               	retlw	48	;'0'
  1525  05A0  342C               	retlw	44	;','
  1526  05A1  3431               	retlw	49	;'1'
  1527  05A2  3430               	retlw	48	;'0'
  1528  05A3  3430               	retlw	48	;'0'
  1529  05A4  342A               	retlw	42	;'*'
  1530  05A5  3432               	retlw	50	;'2'
  1531  05A6  3446               	retlw	70	;'F'
  1532  05A7  340D               	retlw	13
  1533  05A8  340A               	retlw	10
  1534  05A9  3400               	retlw	0
  1535                           
  1536                           ; #config settings
  1537  0000                     
  1538                           	psect	cinit
  1539  0025                     start_initialization:	
  1540  0025                     __initialization:	
  1541                           
  1542                           ; Initialize objects allocated to BANK0
  1543  0025  27DF               	fcall	__pidataBANK0	;fetch initializer
  1544  0026  00EC               	movwf	__pdataBANK0& (0+127)
  1545                           
  1546                           ; Clear objects allocated to COMMON
  1547  0027  01F0               	clrf	__pbssCOMMON& (0+127)
  1548  0028  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1549  0029  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1550  002A  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1551  002B  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1552                           
  1553                           ; Clear objects allocated to BANK0
  1554  002C  3049               	movlw	low __pbssBANK0
  1555  002D  0084               	movwf	4
  1556  002E  3000               	movlw	high __pbssBANK0
  1557  002F  0085               	movwf	5
  1558  0030  3023               	movlw	35
  1559  0031  27C8               	fcall	clear_ram0
  1560  0032                     end_of_initialization:	
  1561                           ;End of C runtime variable initialization code
  1562                           
  1563  0032                     __end_of__initialization:	
  1564  0032  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1565  0033  0020               	movlb	0
  1566  0034  2A64               	ljmp	_main	;jump to C main() function
  1567                           
  1568                           	psect	bssCOMMON
  1569  0070                     __pbssCOMMON:	
  1570  0070                     _b_last_state:	
  1571  0070                     	ds	2
  1572  0072                     _b_count_pressed:	
  1573  0072                     	ds	1
  1574  0073                     _eusartRxCount:	
  1575  0073                     	ds	1
  1576  0074                     _eusartTxBufferRemaining:	
  1577  0074                     	ds	1
  1578                           
  1579                           	psect	bssBANK0
  1580  0049                     __pbssBANK0:	
  1581  0049                     _eusartRxBuffer:	
  1582  0049                     	ds	8
  1583  0051                     _eusartTxBuffer:	
  1584  0051                     	ds	8
  1585  0059                     _speed:	
  1586  0059                     	ds	3
  1587  005C                     TMR0_ISR@CountCallBack:	
  1588  005C                     	ds	2
  1589  005E                     _TMR0_InterruptHandler:	
  1590  005E                     	ds	2
  1591  0060                     _LED_counter:	
  1592  0060                     	ds	1
  1593  0061                     _b_confirmed_state:	
  1594  0061                     	ds	1
  1595  0062                     _b_count_released:	
  1596  0062                     	ds	1
  1597  0063                     _b_has_once_been_released:	
  1598  0063                     	ds	1
  1599  0064                     _b_push_confirmed:	
  1600  0064                     	ds	1
  1601  0065                     _b_release_confirmed:	
  1602  0065                     	ds	1
  1603  0066                     _eusartRxHead:	
  1604  0066                     	ds	1
  1605  0067                     _eusartRxTail:	
  1606  0067                     	ds	1
  1607  0068                     _eusartTxHead:	
  1608  0068                     	ds	1
  1609  0069                     _eusartTxTail:	
  1610  0069                     	ds	1
  1611  006A                     _speed_units:	
  1612  006A                     	ds	1
  1613  006B                     _timer0ReloadVal:	
  1614  006B                     	ds	1
  1615                           
  1616                           	psect	dataBANK0
  1617  006C                     __pdataBANK0:	
  1618  006C                     _LED_state:	
  1619  006C                     	ds	1
  1620                           
  1621                           	psect	clrtext
  1622  07C8                     clear_ram0:	
  1623                           ;	Called with FSR0 containing the base address, and
  1624                           ;	WREG with the size to clear
  1625                           
  1626  07C8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1627  07C9                     clrloop0:	
  1628  07C9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1629  07CA  3101               	addfsr 0,1
  1630  07CB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1631  07CC  2FC9               	goto	clrloop0	;have we reached the end yet?
  1632  07CD  3400               	retlw	0	;all done for this memory range, return
  1633                           
  1634                           	psect	cstackBANK1
  1635  00A0                     __pcstackBANK1:	
  1636  00A0                     main@up:	
  1637                           
  1638                           ; 1 bytes @ 0x0
  1639  00A0                     	ds	1
  1640  00A1                     main@tmp:	
  1641                           
  1642                           ; 1 bytes @ 0x1
  1643  00A1                     	ds	1
  1644  00A2                     main@tmp_601:	
  1645                           
  1646                           ; 1 bytes @ 0x2
  1647  00A2                     	ds	1
  1648  00A3                     main@tmp_603:	
  1649                           
  1650                           ; 1 bytes @ 0x3
  1651  00A3                     	ds	1
  1652  00A4                     main@tmp_604:	
  1653                           
  1654                           ; 1 bytes @ 0x4
  1655  00A4                     	ds	1
  1656  00A5                     main@motor_load:	
  1657                           
  1658                           ; 2 bytes @ 0x5
  1659  00A5                     	ds	2
  1660                           
  1661                           	psect	cstackCOMMON
  1662  0075                     __pcstackCOMMON:	
  1663  0075                     ?_TMR2_StartTimer:	
  1664  0075                     ?_TMR0_DefaultInterruptHandler:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0075                     ??_TMR0_DefaultInterruptHandler:	
  1668                           ; 1 bytes @ 0x0
  1669                           
  1670  0075                     ?_TMR0_CallBack:	
  1671                           ; 1 bytes @ 0x0
  1672                           
  1673  0075                     ?_OSCILLATOR_Initialize:	
  1674                           ; 1 bytes @ 0x0
  1675                           
  1676  0075                     ?_my10msTimerISR:	
  1677                           ; 1 bytes @ 0x0
  1678                           
  1679  0075                     ?_LED_set_state:	
  1680                           ; 1 bytes @ 0x0
  1681                           
  1682  0075                     ?_LED_update_loop:	
  1683                           ; 1 bytes @ 0x0
  1684                           
  1685  0075                     ??_LED_update_loop:	
  1686                           ; 1 bytes @ 0x0
  1687                           
  1688  0075                     ?_button_update_loop:	
  1689                           ; 1 bytes @ 0x0
  1690                           
  1691  0075                     ?_TMR2_Initialize:	
  1692                           ; 1 bytes @ 0x0
  1693                           
  1694  0075                     ?_EUSART_Initialize:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0075                     ?_EUSART_Read:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0075                     ?_EUSART_Write:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0075                     ?_putch:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0075                     ?_EUSART_Transmit_ISR:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709  0075                     ??_EUSART_Transmit_ISR:	
  1710                           ; 1 bytes @ 0x0
  1711                           
  1712  0075                     ?_EUSART_Receive_ISR:	
  1713                           ; 1 bytes @ 0x0
  1714                           
  1715  0075                     ??_EUSART_Receive_ISR:	
  1716                           ; 1 bytes @ 0x0
  1717                           
  1718  0075                     ?_EPWM_Initialize:	
  1719                           ; 1 bytes @ 0x0
  1720                           
  1721  0075                     ?_TMR0_Initialize:	
  1722                           ; 1 bytes @ 0x0
  1723                           
  1724  0075                     ?_TMR0_ISR:	
  1725                           ; 1 bytes @ 0x0
  1726                           
  1727  0075                     ?_PIN_MANAGER_Initialize:	
  1728                           ; 1 bytes @ 0x0
  1729                           
  1730  0075                     ?_SYSTEM_Initialize:	
  1731                           ; 1 bytes @ 0x0
  1732                           
  1733  0075                     ?_INTERRUPT_InterruptManager:	
  1734                           ; 1 bytes @ 0x0
  1735                           
  1736  0075                     ?_GPS_Initialize:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0075                     ?_GPS_read_speed:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0075                     ?_main:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0075                     ?_get_button_state:	
  1746                           ; 1 bytes @ 0x0
  1747                           
  1748  0075                     ??_get_button_state:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0075                     get_button_state@state:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754                           
  1755                           ; 1 bytes @ 0x0
  1756  0075                     	ds	1
  1757  0076                     ??_button_update_loop:	
  1758                           
  1759                           ; 1 bytes @ 0x1
  1760  0076                     	ds	2
  1761  0078                     button_update_loop@current_state:	
  1762                           
  1763                           ; 1 bytes @ 0x3
  1764  0078                     	ds	1
  1765  0079                     ??_TMR0_CallBack:	
  1766  0079                     ??_my10msTimerISR:	
  1767                           ; 1 bytes @ 0x4
  1768                           
  1769  0079                     ??_TMR0_ISR:	
  1770                           ; 1 bytes @ 0x4
  1771                           
  1772  0079                     ??_INTERRUPT_InterruptManager:	
  1773                           ; 1 bytes @ 0x4
  1774                           
  1775                           
  1776                           ; 1 bytes @ 0x4
  1777  0079                     	ds	1
  1778                           
  1779                           	psect	cstackBANK0
  1780  0020                     __pcstackBANK0:	
  1781  0020                     ??_TMR2_StartTimer:	
  1782  0020                     ?_TMR0_SetInterruptHandler:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0020                     ??_OSCILLATOR_Initialize:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0020                     ??_LED_set_state:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0020                     ??_TMR2_Initialize:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0020                     ??_EUSART_Initialize:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0020                     ??_EUSART_Read:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  0020                     ??_EUSART_Write:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0020                     ??_EPWM_Initialize:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0020                     ?_EPWM_LoadDutyValue:	
  1807                           ; 1 bytes @ 0x0
  1808                           
  1809  0020                     ??_PIN_MANAGER_Initialize:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0020                     ?___wmul:	
  1813                           ; 1 bytes @ 0x0
  1814                           
  1815  0020                     ?_convert_to_fp:	
  1816                           ; 2 bytes @ 0x0
  1817                           
  1818  0020                     ?___lmul:	
  1819                           ; 3 bytes @ 0x0
  1820                           
  1821  0020                     EPWM_LoadDutyValue@dutyValue:	
  1822                           ; 4 bytes @ 0x0
  1823                           
  1824  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  1825                           ; 2 bytes @ 0x0
  1826                           
  1827  0020                     convert_to_fp@int_part:	
  1828                           ; 2 bytes @ 0x0
  1829                           
  1830  0020                     ___wmul@multiplier:	
  1831                           ; 2 bytes @ 0x0
  1832                           
  1833  0020                     ___lmul@multiplier:	
  1834                           ; 2 bytes @ 0x0
  1835                           
  1836                           
  1837                           ; 4 bytes @ 0x0
  1838  0020                     	ds	1
  1839  0021                     EUSART_Read@readValue:	
  1840  0021                     EUSART_Write@txData:	
  1841                           ; 1 bytes @ 0x1
  1842                           
  1843  0021                     LED_set_state@new_state:	
  1844                           ; 1 bytes @ 0x1
  1845                           
  1846                           
  1847                           ; 1 bytes @ 0x1
  1848  0021                     	ds	1
  1849  0022                     ??_TMR0_SetInterruptHandler:	
  1850  0022                     ??_putch:	
  1851                           ; 1 bytes @ 0x2
  1852                           
  1853  0022                     ??_EPWM_LoadDutyValue:	
  1854                           ; 1 bytes @ 0x2
  1855                           
  1856  0022                     ??_TMR0_Initialize:	
  1857                           ; 1 bytes @ 0x2
  1858                           
  1859  0022                     putch@txData:	
  1860                           ; 1 bytes @ 0x2
  1861                           
  1862  0022                     convert_to_fp@fract_part:	
  1863                           ; 1 bytes @ 0x2
  1864                           
  1865  0022                     ___wmul@multiplicand:	
  1866                           ; 2 bytes @ 0x2
  1867                           
  1868                           
  1869                           ; 2 bytes @ 0x2
  1870  0022                     	ds	1
  1871  0023                     ??_SYSTEM_Initialize:	
  1872  0023                     ?_printf:	
  1873                           ; 1 bytes @ 0x3
  1874                           
  1875  0023                     printf@f:	
  1876                           ; 2 bytes @ 0x3
  1877                           
  1878                           
  1879                           ; 2 bytes @ 0x3
  1880  0023                     	ds	1
  1881  0024                     ??_convert_to_fp:	
  1882  0024                     ??___wmul:	
  1883                           ; 1 bytes @ 0x4
  1884                           
  1885  0024                     ___wmul@product:	
  1886                           ; 1 bytes @ 0x4
  1887                           
  1888  0024                     ___lmul@multiplicand:	
  1889                           ; 2 bytes @ 0x4
  1890                           
  1891                           
  1892                           ; 4 bytes @ 0x4
  1893  0024                     	ds	1
  1894  0025                     ??_printf:	
  1895                           
  1896                           ; 1 bytes @ 0x5
  1897  0025                     	ds	3
  1898  0028                     ??___lmul:	
  1899  0028                     printf@ap:	
  1900                           ; 1 bytes @ 0x8
  1901                           
  1902  0028                     ___lmul@product:	
  1903                           ; 1 bytes @ 0x8
  1904                           
  1905                           
  1906                           ; 4 bytes @ 0x8
  1907  0028                     	ds	1
  1908  0029                     printf@c:	
  1909                           
  1910                           ; 1 bytes @ 0x9
  1911  0029                     	ds	1
  1912  002A                     ??_GPS_Initialize:	
  1913  002A                     convert_to_fp@res_fract:	
  1914                           ; 1 bytes @ 0xA
  1915                           
  1916                           
  1917                           ; 2 bytes @ 0xA
  1918  002A                     	ds	2
  1919  002C                     ?_multiply_fp:	
  1920  002C                     convert_to_fp@i_bit:	
  1921                           ; 3 bytes @ 0xC
  1922                           
  1923  002C                     multiply_fp@n1:	
  1924                           ; 1 bytes @ 0xC
  1925                           
  1926                           
  1927                           ; 3 bytes @ 0xC
  1928  002C                     	ds	1
  1929  002D                     GPS_Initialize@tmp:	
  1930  002D                     convert_to_fp@tmp_left:	
  1931                           ; 1 bytes @ 0xD
  1932                           
  1933                           
  1934                           ; 2 bytes @ 0xD
  1935  002D                     	ds	2
  1936  002F                     convert_to_fp@res:	
  1937  002F                     multiply_fp@n2:	
  1938                           ; 3 bytes @ 0xF
  1939                           
  1940                           
  1941                           ; 3 bytes @ 0xF
  1942  002F                     	ds	3
  1943  0032                     ??_multiply_fp:	
  1944  0032                     ??_GPS_read_speed:	
  1945                           ; 1 bytes @ 0x12
  1946                           
  1947                           
  1948                           ; 1 bytes @ 0x12
  1949  0032                     	ds	2
  1950  0034                     GPS_read_speed@before_dot:	
  1951                           
  1952                           ; 1 bytes @ 0x14
  1953  0034                     	ds	1
  1954  0035                     GPS_read_speed@no_more_checksum:	
  1955                           
  1956                           ; 1 bytes @ 0x15
  1957  0035                     	ds	1
  1958  0036                     GPS_read_speed@read_speed_int:	
  1959                           
  1960                           ; 2 bytes @ 0x16
  1961  0036                     	ds	2
  1962  0038                     GPS_read_speed@read_speed_fra:	
  1963                           
  1964                           ; 2 bytes @ 0x18
  1965  0038                     	ds	2
  1966  003A                     GPS_read_speed@checksum2:	
  1967                           
  1968                           ; 1 bytes @ 0x1A
  1969  003A                     	ds	1
  1970  003B                     GPS_read_speed@checksum:	
  1971                           
  1972                           ; 1 bytes @ 0x1B
  1973  003B                     	ds	1
  1974  003C                     multiply_fp@res:	
  1975  003C                     GPS_read_speed@buffer:	
  1976                           ; 4 bytes @ 0x1C
  1977                           
  1978                           
  1979                           ; 6 bytes @ 0x1C
  1980  003C                     	ds	4
  1981  0040                     multiply_fp@n1_fra:	
  1982                           
  1983                           ; 3 bytes @ 0x20
  1984  0040                     	ds	2
  1985  0042                     GPS_read_speed@i_buff2:	
  1986                           
  1987                           ; 1 bytes @ 0x22
  1988  0042                     	ds	1
  1989  0043                     GPS_read_speed@i_buff:	
  1990  0043                     multiply_fp@n2_fra:	
  1991                           ; 1 bytes @ 0x23
  1992                           
  1993                           
  1994                           ; 3 bytes @ 0x23
  1995  0043                     	ds	1
  1996  0044                     GPS_read_speed@m_char:	
  1997                           
  1998                           ; 1 bytes @ 0x24
  1999  0044                     	ds	2
  2000  0046                     ??_main:	
  2001                           
  2002                           ; 1 bytes @ 0x26
  2003  0046                     	ds	3
  2004                           
  2005                           	psect	maintext
  2006  0264                     __pmaintext:	
  2007 ;;
  2008 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2009 ;;
  2010 ;; *************** function _main *****************
  2011 ;; Defined at:
  2012 ;;		line 312 in file "main.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  tmp             1    4[BANK1 ] unsigned char 
  2017 ;;  tmp             1    3[BANK1 ] unsigned char 
  2018 ;;  tmp             1    2[BANK1 ] unsigned char 
  2019 ;;  tmp             1    1[BANK1 ] unsigned char 
  2020 ;;  motor_load      2    5[BANK1 ] unsigned int 
  2021 ;;  up              1    0[BANK1 ] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : B1F/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMMON   BANK0   BANK1
  2031 ;;      Params:         0       0       0
  2032 ;;      Locals:         0       0       7
  2033 ;;      Temps:          0       3       0
  2034 ;;      Totals:         0       3       7
  2035 ;;Total ram usage:       10 bytes
  2036 ;; Hardware stack levels required when called:   10
  2037 ;; This function calls:
  2038 ;;		_EPWM_LoadDutyValue
  2039 ;;		_GPS_Initialize
  2040 ;;		_GPS_read_speed
  2041 ;;		_LED_set_state
  2042 ;;		_SYSTEM_Initialize
  2043 ;;		_TMR0_SetInterruptHandler
  2044 ;;		_TMR2_StartTimer
  2045 ;;		_multiply_fp
  2046 ;; This function is called by:
  2047 ;;		Startup code after reset
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _main
  2053  0264                     _main:	
  2054                           
  2055                           ;main.c: 315: SYSTEM_Initialize();
  2056                           
  2057                           ;incstack = 0
  2058                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2059  0264  27C1               	fcall	_SYSTEM_Initialize
  2060                           
  2061                           ;main.c: 316: TMR0_SetInterruptHandler(my10msTimerISR);
  2062  0265  30DC               	movlw	low _my10msTimerISR
  2063  0266  0020               	movlb	0	; select bank0
  2064  0267  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2065  0268  3007               	movlw	high _my10msTimerISR
  2066  0269  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2067  026A  27CE               	fcall	_TMR0_SetInterruptHandler
  2068                           
  2069                           ;main.c: 318: (INTCONbits.GIE = 1);
  2070  026B  178B               	bsf	11,7	;volatile
  2071                           
  2072                           ;main.c: 320: (INTCONbits.PEIE = 1);
  2073  026C  170B               	bsf	11,6	;volatile
  2074                           
  2075                           ;main.c: 322: LED_set_state(manual_mode);
  2076  026D  3004               	movlw	4
  2077  026E  2667               	fcall	_LED_set_state
  2078                           
  2079                           ;main.c: 323: do { LATA5 = 0; } while(0);
  2080  026F  0022               	movlb	2	; select bank2
  2081  0270  128C               	bcf	12,5	;volatile
  2082                           
  2083                           ;main.c: 324: for(unsigned char tmp=0;tmp<(10*3);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2084  0271  0021               	movlb	1	; select bank1
  2085  0272  01A1               	clrf	main@tmp^(0+128)
  2086  0273  301E               	movlw	30
  2087  0274  0221               	subwf	main@tmp^(0+128),w
  2088  0275  1803               	btfsc	3,0
  2089  0276  2A8E               	goto	l3476
  2090  0277                     l3470:	
  2091  0277  3005               	movlw	5
  2092  0278  0020               	movlb	0	; select bank0
  2093  0279  00C8               	movwf	??_main+2
  2094  027A  300F               	movlw	15
  2095  027B  00C7               	movwf	??_main+1
  2096  027C  30F4               	movlw	244
  2097  027D  00C6               	movwf	??_main
  2098  027E                     u3807:	
  2099  027E  0BC6               	decfsz	??_main,f
  2100  027F  2A7E               	goto	u3807
  2101  0280  0BC7               	decfsz	??_main+1,f
  2102  0281  2A7E               	goto	u3807
  2103  0282  0BC8               	decfsz	??_main+2,f
  2104  0283  2A7E               	goto	u3807
  2105  0284  3001               	movlw	1
  2106  0285  0020               	movlb	0	; select bank0
  2107  0286  00C6               	movwf	??_main
  2108  0287  0846               	movf	??_main,w
  2109  0288  0021               	movlb	1	; select bank1
  2110  0289  07A1               	addwf	main@tmp^(0+128),f
  2111  028A  301E               	movlw	30
  2112  028B  0221               	subwf	main@tmp^(0+128),w
  2113  028C  1C03               	skipc
  2114  028D  2A77               	goto	l3470
  2115  028E                     l3476:	
  2116                           
  2117                           ;main.c: 326: GPS_Initialize();
  2118  028E  25AA               	fcall	_GPS_Initialize
  2119                           
  2120                           ;main.c: 328: speed = 0;
  2121  028F  3000               	movlw	0
  2122  0290  0020               	movlb	0	; select bank0
  2123  0291  00D9               	movwf	_speed
  2124  0292  3000               	movlw	0
  2125  0293  00DA               	movwf	_speed+1
  2126  0294  3000               	movlw	0
  2127  0295  00DB               	movwf	_speed+2
  2128  0296                     l3480:	
  2129                           ;main.c: 330: while (1)
  2130                           
  2131                           
  2132                           ;main.c: 331: {
  2133                           ;main.c: 333: if (GPS_read_speed())
  2134  0296  2035               	fcall	_GPS_read_speed
  2135  0297  3A00               	xorlw	0
  2136  0298  1903               	skipnz
  2137  0299  2AC2               	goto	l3490
  2138                           
  2139                           ;main.c: 334: {
  2140                           ;main.c: 336: if (speed_units == MPH)
  2141  029A  0020               	movlb	0	; select bank0
  2142  029B  086A               	movf	_speed_units,w
  2143  029C  1D03               	btfss	3,2
  2144  029D  2AB6               	goto	l3486
  2145                           
  2146                           ;main.c: 337: speed = multiply_fp(speed, ratio_mph);
  2147  029E  0859               	movf	_speed,w
  2148  029F  00AC               	movwf	multiply_fp@n1
  2149  02A0  085A               	movf	_speed+1,w
  2150  02A1  00AD               	movwf	multiply_fp@n1+1
  2151  02A2  085B               	movf	_speed+2,w
  2152  02A3  00AE               	movwf	multiply_fp@n1+2
  2153  02A4  305F               	movlw	low (_ratio_mph| (0+32768))
  2154  02A5  0084               	movwf	4
  2155  02A6  3085               	movlw	high (_ratio_mph| (0+32768))
  2156  02A7  0085               	movwf	5
  2157  02A8  3F00               	moviw [0]fsr0
  2158  02A9  00AF               	movwf	multiply_fp@n2
  2159  02AA  3F01               	moviw [1]fsr0
  2160  02AB  00B0               	movwf	multiply_fp@n2+1
  2161  02AC  3F02               	moviw [2]fsr0
  2162  02AD  00B1               	movwf	multiply_fp@n2+2
  2163  02AE  238B               	fcall	_multiply_fp
  2164  02AF  0020               	movlb	0	; select bank0
  2165  02B0  082C               	movf	?_multiply_fp,w
  2166  02B1  00D9               	movwf	_speed
  2167  02B2  082D               	movf	?_multiply_fp+1,w
  2168  02B3  00DA               	movwf	_speed+1
  2169  02B4  082E               	movf	?_multiply_fp+2,w
  2170  02B5  00DB               	movwf	_speed+2
  2171  02B6                     l3486:	
  2172                           ;main.c: 339: do { LATA5 = 1; } while(0);
  2173                           
  2174  02B6  0022               	movlb	2	; select bank2
  2175  02B7  168C               	bsf	12,5	;volatile
  2176                           
  2177                           ;main.c: 340: _delay((unsigned long)((20)*(32000000/4000.0)));
  2178  02B8  30D0               	movlw	208
  2179  02B9  0020               	movlb	0	; select bank0
  2180  02BA  00C7               	movwf	??_main+1
  2181  02BB  30C9               	movlw	201
  2182  02BC  00C6               	movwf	??_main
  2183  02BD                     u3817:	
  2184  02BD  0BC6               	decfsz	??_main,f
  2185  02BE  2ABD               	goto	u3817
  2186  02BF  0BC7               	decfsz	??_main+1,f
  2187  02C0  2ABD               	goto	u3817
  2188  02C1  3200               	nop2
  2189  02C2                     l3490:	
  2190                           ;main.c: 341: }
  2191                           ;main.c: 342: do { LATA5 = 0; } while(0);
  2192                           
  2193  02C2  0022               	movlb	2	; select bank2
  2194  02C3  128C               	bcf	12,5	;volatile
  2195  02C4  2A96               	goto	l3480
  2196  02C5                     l3502:	
  2197                           ;main.c: 355: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2198                           
  2199                           ;main.c: 354: TMR2_StartTimer();
  2200                           
  2201                           ;main.c: 353: EPWM_LoadDutyValue(1023-motor_load);
  2202                           
  2203                           ;main.c: 347: }
  2204                           ;main.c: 352: uint16_t motor_load = 0;
  2205                           
  2206  02C5  3005               	movlw	5
  2207  02C6  0020               	movlb	0	; select bank0
  2208  02C7  00C8               	movwf	??_main+2
  2209  02C8  300F               	movlw	15
  2210  02C9  00C7               	movwf	??_main+1
  2211  02CA  30F4               	movlw	244
  2212  02CB  00C6               	movwf	??_main
  2213  02CC                     u3827:	
  2214  02CC  0BC6               	decfsz	??_main,f
  2215  02CD  2ACC               	goto	u3827
  2216  02CE  0BC7               	decfsz	??_main+1,f
  2217  02CF  2ACC               	goto	u3827
  2218  02D0  0BC8               	decfsz	??_main+2,f
  2219  02D1  2ACC               	goto	u3827
  2220  02D2  3001               	movlw	1
  2221  02D3  0020               	movlb	0	; select bank0
  2222  02D4  00C6               	movwf	??_main
  2223  02D5  0846               	movf	??_main,w
  2224  02D6  0021               	movlb	1	; select bank1
  2225  02D7  07A2               	addwf	main@tmp_601^(0+128),f
  2226  02D8  3032               	movlw	50
  2227  02D9  0222               	subwf	main@tmp_601^(0+128),w
  2228  02DA  1C03               	skipc
  2229  02DB  2AC5               	goto	l3502
  2230                           
  2231                           ;main.c: 357: bool up = 1;
  2232  02DC  01A0               	clrf	main@up^(0+128)
  2233  02DD  0AA0               	incf	main@up^(0+128),f
  2234                           
  2235                           ;main.c: 377: EPWM_LoadDutyValue(0);
  2236  02DE  3000               	movlw	0
  2237  02DF  0020               	movlb	0	; select bank0
  2238  02E0  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2239  02E1  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2240  02E2  26E2               	fcall	_EPWM_LoadDutyValue
  2241                           
  2242                           ;main.c: 378: _delay((unsigned long)((10)*(32000000/4000.0)));
  2243  02E3  3068               	movlw	104
  2244  02E4  0020               	movlb	0	; select bank0
  2245  02E5  00C7               	movwf	??_main+1
  2246  02E6  30E4               	movlw	228
  2247  02E7  00C6               	movwf	??_main
  2248  02E8                     u3837:	
  2249  02E8  0BC6               	decfsz	??_main,f
  2250  02E9  2AE8               	goto	u3837
  2251  02EA  0BC7               	decfsz	??_main+1,f
  2252  02EB  2AE8               	goto	u3837
  2253  02EC  0000               	nop
  2254                           
  2255                           ;main.c: 379: EPWM_LoadDutyValue(1023-148);
  2256  02ED  306B               	movlw	107
  2257  02EE  0020               	movlb	0	; select bank0
  2258  02EF  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2259  02F0  3003               	movlw	3
  2260  02F1  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2261  02F2  26E2               	fcall	_EPWM_LoadDutyValue
  2262                           
  2263                           ;main.c: 380: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2264  02F3  0021               	movlb	1	; select bank1
  2265  02F4  01A3               	clrf	main@tmp_603^(0+128)
  2266  02F5  3032               	movlw	50
  2267  02F6  0223               	subwf	main@tmp_603^(0+128),w
  2268  02F7  1803               	btfsc	3,0
  2269  02F8  2B10               	goto	l3526
  2270  02F9                     l3520:	
  2271  02F9  3005               	movlw	5
  2272  02FA  0020               	movlb	0	; select bank0
  2273  02FB  00C8               	movwf	??_main+2
  2274  02FC  300F               	movlw	15
  2275  02FD  00C7               	movwf	??_main+1
  2276  02FE  30F4               	movlw	244
  2277  02FF  00C6               	movwf	??_main
  2278  0300                     u3847:	
  2279  0300  0BC6               	decfsz	??_main,f
  2280  0301  2B00               	goto	u3847
  2281  0302  0BC7               	decfsz	??_main+1,f
  2282  0303  2B00               	goto	u3847
  2283  0304  0BC8               	decfsz	??_main+2,f
  2284  0305  2B00               	goto	u3847
  2285  0306  3001               	movlw	1
  2286  0307  0020               	movlb	0	; select bank0
  2287  0308  00C6               	movwf	??_main
  2288  0309  0846               	movf	??_main,w
  2289  030A  0021               	movlb	1	; select bank1
  2290  030B  07A3               	addwf	main@tmp_603^(0+128),f
  2291  030C  3032               	movlw	50
  2292  030D  0223               	subwf	main@tmp_603^(0+128),w
  2293  030E  1C03               	skipc
  2294  030F  2AF9               	goto	l3520
  2295  0310                     l3526:	
  2296                           ;main.c: 381: while (1)
  2297                           
  2298                           
  2299                           ;main.c: 382: {
  2300                           ;main.c: 383: if (up == 1)
  2301  0310  0021               	movlb	1	; select bank1
  2302  0311  0320               	decf	main@up^(0+128),w
  2303  0312  1D03               	btfss	3,2
  2304  0313  2B19               	goto	l3530
  2305                           
  2306                           ;main.c: 384: motor_load += 1;
  2307  0314  3001               	movlw	1
  2308  0315  07A5               	addwf	main@motor_load^(0+128),f
  2309  0316  3000               	movlw	0
  2310  0317  3DA6               	addwfc	(main@motor_load+1)^(0+128),f
  2311  0318  2B1D               	goto	l481
  2312  0319                     l3530:	
  2313                           
  2314                           ;main.c: 385: else
  2315                           ;main.c: 386: motor_load -= 1;
  2316  0319  3001               	movlw	1
  2317  031A  02A5               	subwf	main@motor_load^(0+128),f
  2318  031B  3000               	movlw	0
  2319  031C  3BA6               	subwfb	(main@motor_load+1)^(0+128),f
  2320  031D                     l481:	
  2321                           
  2322                           ;main.c: 387: if (motor_load > 300)
  2323  031D  3001               	movlw	1
  2324  031E  0226               	subwf	(main@motor_load+1)^(0+128),w
  2325  031F  302D               	movlw	45
  2326  0320  1903               	skipnz
  2327  0321  0225               	subwf	main@motor_load^(0+128),w
  2328  0322  1C03               	skipc
  2329  0323  2B26               	goto	l3534
  2330                           
  2331                           ;main.c: 388: up = 0;
  2332  0324  01A0               	clrf	main@up^(0+128)
  2333  0325  2B5E               	goto	l3556
  2334  0326                     l3534:	
  2335                           
  2336                           ;main.c: 389: else if (motor_load == 0)
  2337  0326  0825               	movf	main@motor_load^(0+128),w
  2338  0327  0426               	iorwf	(main@motor_load+1)^(0+128),w
  2339  0328  1D03               	btfss	3,2
  2340  0329  2B5E               	goto	l3556
  2341                           
  2342                           ;main.c: 390: {
  2343                           ;main.c: 391: up = 1;
  2344  032A  01A0               	clrf	main@up^(0+128)
  2345  032B  0AA0               	incf	main@up^(0+128),f
  2346                           
  2347                           ;main.c: 392: EPWM_LoadDutyValue(1023);
  2348  032C  30FF               	movlw	255
  2349  032D  0020               	movlb	0	; select bank0
  2350  032E  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2351  032F  3003               	movlw	3
  2352  0330  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2353  0331  26E2               	fcall	_EPWM_LoadDutyValue
  2354                           
  2355                           ;main.c: 393: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2356  0332  0021               	movlb	1	; select bank1
  2357  0333  01A4               	clrf	main@tmp_604^(0+128)
  2358  0334  3032               	movlw	50
  2359  0335  0224               	subwf	main@tmp_604^(0+128),w
  2360  0336  1803               	btfsc	3,0
  2361  0337  2B4F               	goto	l3552
  2362  0338                     l3546:	
  2363  0338  3005               	movlw	5
  2364  0339  0020               	movlb	0	; select bank0
  2365  033A  00C8               	movwf	??_main+2
  2366  033B  300F               	movlw	15
  2367  033C  00C7               	movwf	??_main+1
  2368  033D  30F4               	movlw	244
  2369  033E  00C6               	movwf	??_main
  2370  033F                     u3857:	
  2371  033F  0BC6               	decfsz	??_main,f
  2372  0340  2B3F               	goto	u3857
  2373  0341  0BC7               	decfsz	??_main+1,f
  2374  0342  2B3F               	goto	u3857
  2375  0343  0BC8               	decfsz	??_main+2,f
  2376  0344  2B3F               	goto	u3857
  2377  0345  3001               	movlw	1
  2378  0346  0020               	movlb	0	; select bank0
  2379  0347  00C6               	movwf	??_main
  2380  0348  0846               	movf	??_main,w
  2381  0349  0021               	movlb	1	; select bank1
  2382  034A  07A4               	addwf	main@tmp_604^(0+128),f
  2383  034B  3032               	movlw	50
  2384  034C  0224               	subwf	main@tmp_604^(0+128),w
  2385  034D  1C03               	skipc
  2386  034E  2B38               	goto	l3546
  2387  034F                     l3552:	
  2388                           
  2389                           ;main.c: 395: EPWM_LoadDutyValue(0);
  2390  034F  3000               	movlw	0
  2391  0350  0020               	movlb	0	; select bank0
  2392  0351  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2393  0352  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2394  0353  26E2               	fcall	_EPWM_LoadDutyValue
  2395                           
  2396                           ;main.c: 396: _delay((unsigned long)((10)*(32000000/4000.0)));
  2397  0354  3068               	movlw	104
  2398  0355  0020               	movlb	0	; select bank0
  2399  0356  00C7               	movwf	??_main+1
  2400  0357  30E4               	movlw	228
  2401  0358  00C6               	movwf	??_main
  2402  0359                     u3867:	
  2403  0359  0BC6               	decfsz	??_main,f
  2404  035A  2B59               	goto	u3867
  2405  035B  0BC7               	decfsz	??_main+1,f
  2406  035C  2B59               	goto	u3867
  2407  035D  0000               	nop
  2408  035E                     l3556:	
  2409                           
  2410                           ;main.c: 397: }
  2411                           ;main.c: 398: if (motor_load < 148)
  2412  035E  3000               	movlw	0
  2413  035F  0021               	movlb	1	; select bank1
  2414  0360  0226               	subwf	(main@motor_load+1)^(0+128),w
  2415  0361  3094               	movlw	148
  2416  0362  1903               	skipnz
  2417  0363  0225               	subwf	main@motor_load^(0+128),w
  2418  0364  1803               	skipnc
  2419  0365  2B6B               	goto	l3560
  2420                           
  2421                           ;main.c: 399: EPWM_LoadDutyValue(1023-135);
  2422  0366  3078               	movlw	120
  2423  0367  0020               	movlb	0	; select bank0
  2424  0368  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2425  0369  3003               	movlw	3
  2426  036A  2B7B               	goto	L1
  2427  036B                     l3560:	
  2428                           
  2429                           ;main.c: 400: else
  2430                           ;main.c: 401: EPWM_LoadDutyValue(1023-motor_load);
  2431  036B  0021               	movlb	1	; select bank1
  2432  036C  0925               	comf	main@motor_load^(0+128),w
  2433  036D  0020               	movlb	0	; select bank0
  2434  036E  00C6               	movwf	??_main
  2435  036F  0021               	movlb	1	; select bank1
  2436  0370  0926               	comf	(main@motor_load+1)^(0+128),w
  2437  0371  0020               	movlb	0	; select bank0
  2438  0372  00C7               	movwf	??_main+1
  2439  0373  0AC6               	incf	??_main,f
  2440  0374  1903               	skipnz
  2441  0375  0AC7               	incf	??_main+1,f
  2442  0376  0846               	movf	??_main,w
  2443  0377  3EFF               	addlw	255
  2444  0378  00A0               	movwf	EPWM_LoadDutyValue@dutyValue
  2445  0379  3003               	movlw	3
  2446  037A  3D47               	addwfc	??_main+1,w
  2447  037B                     L1:	
  2448  037B  00A1               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2449  037C  26E2               	fcall	_EPWM_LoadDutyValue
  2450                           
  2451                           ;main.c: 402: _delay((unsigned long)((50)*(32000000/4000.0)));
  2452  037D  3003               	movlw	3
  2453  037E  0020               	movlb	0	; select bank0
  2454  037F  00C8               	movwf	??_main+2
  2455  0380  3008               	movlw	8
  2456  0381  00C7               	movwf	??_main+1
  2457  0382  3078               	movlw	120
  2458  0383  00C6               	movwf	??_main
  2459  0384                     u3877:	
  2460  0384  0BC6               	decfsz	??_main,f
  2461  0385  2B84               	goto	u3877
  2462  0386  0BC7               	decfsz	??_main+1,f
  2463  0387  2B84               	goto	u3877
  2464  0388  0BC8               	decfsz	??_main+2,f
  2465  0389  2B84               	goto	u3877
  2466  038A  2B10               	goto	l3526
  2467  038B                     __end_of_main:	
  2468                           
  2469                           	psect	text1
  2470  038B                     __ptext1:	
  2471 ;; *************** function _multiply_fp *****************
  2472 ;; Defined at:
  2473 ;;		line 38 in file "fixed_point.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;  n1              3   12[BANK0 ] unsigned um
  2476 ;;  n2              3   15[BANK0 ] unsigned um
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  res             4   28[BANK0 ] unsigned long 
  2479 ;;  n2_fra          3   35[BANK0 ] unsigned um
  2480 ;;  n1_fra          3   32[BANK0 ] unsigned um
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  3   12[BANK0 ] unsigned um
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, status,0, pclath, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1
  2490 ;;      Params:         0       6       0
  2491 ;;      Locals:         0      10       0
  2492 ;;      Temps:          0      10       0
  2493 ;;      Totals:         0      26       0
  2494 ;;Total ram usage:       26 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    7
  2497 ;; This function calls:
  2498 ;;		___lmul
  2499 ;; This function is called by:
  2500 ;;		_main
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           
  2505                           ;psect for function _multiply_fp
  2506  038B                     _multiply_fp:	
  2507                           
  2508                           ;fixed_point.c: 40: t_fp n1_fra, n2_fra;
  2509                           ;fixed_point.c: 41: n1_fra = (n1 << (24-14)) >> (24-14);
  2510                           
  2511                           ;incstack = 0
  2512                           ; Regs used in _multiply_fp: [wreg+status,2+status,0+pclath+cstack]
  2513  038B  30FF               	movlw	255
  2514  038C  0020               	movlb	0	; select bank0
  2515  038D  00B2               	movwf	??_multiply_fp
  2516  038E  303F               	movlw	63
  2517  038F  00B3               	movwf	??_multiply_fp+1
  2518  0390  3000               	movlw	0
  2519  0391  00B4               	movwf	??_multiply_fp+2
  2520  0392  082C               	movf	multiply_fp@n1,w
  2521  0393  05B2               	andwf	??_multiply_fp,f
  2522  0394  082D               	movf	multiply_fp@n1+1,w
  2523  0395  05B3               	andwf	??_multiply_fp+1,f
  2524  0396  082E               	movf	multiply_fp@n1+2,w
  2525  0397  05B4               	andwf	??_multiply_fp+2,f
  2526  0398  0832               	movf	??_multiply_fp,w
  2527  0399  00C0               	movwf	multiply_fp@n1_fra
  2528  039A  0833               	movf	??_multiply_fp+1,w
  2529  039B  00C1               	movwf	multiply_fp@n1_fra+1
  2530  039C  0834               	movf	??_multiply_fp+2,w
  2531  039D  00C2               	movwf	multiply_fp@n1_fra+2
  2532                           
  2533                           ;fixed_point.c: 42: n2_fra = (n2 << (24-14)) >> (24-14);
  2534  039E  30FF               	movlw	255
  2535  039F  00B2               	movwf	??_multiply_fp
  2536  03A0  303F               	movlw	63
  2537  03A1  00B3               	movwf	??_multiply_fp+1
  2538  03A2  3000               	movlw	0
  2539  03A3  00B4               	movwf	??_multiply_fp+2
  2540  03A4  082F               	movf	multiply_fp@n2,w
  2541  03A5  05B2               	andwf	??_multiply_fp,f
  2542  03A6  0830               	movf	multiply_fp@n2+1,w
  2543  03A7  05B3               	andwf	??_multiply_fp+1,f
  2544  03A8  0831               	movf	multiply_fp@n2+2,w
  2545  03A9  05B4               	andwf	??_multiply_fp+2,f
  2546  03AA  0832               	movf	??_multiply_fp,w
  2547  03AB  00C3               	movwf	multiply_fp@n2_fra
  2548  03AC  0833               	movf	??_multiply_fp+1,w
  2549  03AD  00C4               	movwf	multiply_fp@n2_fra+1
  2550  03AE  0834               	movf	??_multiply_fp+2,w
  2551  03AF  00C5               	movwf	multiply_fp@n2_fra+2
  2552                           
  2553                           ;fixed_point.c: 43: unsigned long long res = ((unsigned long long) (n1 >> 14) * (unsigne
      +                          d long long) (n2 >> 14))<<14;
  2554  03B0  082C               	movf	multiply_fp@n1,w
  2555  03B1  00B2               	movwf	??_multiply_fp
  2556  03B2  082D               	movf	multiply_fp@n1+1,w
  2557  03B3  00B3               	movwf	??_multiply_fp+1
  2558  03B4  082E               	movf	multiply_fp@n1+2,w
  2559  03B5  00B4               	movwf	??_multiply_fp+2
  2560  03B6  300E               	movlw	14
  2561  03B7                     u3605:	
  2562  03B7  36B4               	lsrf	??_multiply_fp+2,f
  2563  03B8  0CB3               	rrf	??_multiply_fp+1,f
  2564  03B9  0CB2               	rrf	??_multiply_fp,f
  2565  03BA  0B89               	decfsz	9,f
  2566  03BB  2BB7               	goto	u3605
  2567  03BC  0832               	movf	??_multiply_fp,w
  2568  03BD  00A0               	movwf	___lmul@multiplier
  2569  03BE  0833               	movf	??_multiply_fp+1,w
  2570  03BF  00A1               	movwf	___lmul@multiplier+1
  2571  03C0  0834               	movf	??_multiply_fp+2,w
  2572  03C1  00A2               	movwf	___lmul@multiplier+2
  2573  03C2  01A3               	clrf	___lmul@multiplier+3
  2574  03C3  082F               	movf	multiply_fp@n2,w
  2575  03C4  00B5               	movwf	??_multiply_fp+3
  2576  03C5  0830               	movf	multiply_fp@n2+1,w
  2577  03C6  00B6               	movwf	??_multiply_fp+4
  2578  03C7  0831               	movf	multiply_fp@n2+2,w
  2579  03C8  00B7               	movwf	??_multiply_fp+5
  2580  03C9  300E               	movlw	14
  2581  03CA                     u3615:	
  2582  03CA  36B7               	lsrf	??_multiply_fp+5,f
  2583  03CB  0CB6               	rrf	??_multiply_fp+4,f
  2584  03CC  0CB5               	rrf	??_multiply_fp+3,f
  2585  03CD  0B89               	decfsz	9,f
  2586  03CE  2BCA               	goto	u3615
  2587  03CF  0835               	movf	??_multiply_fp+3,w
  2588  03D0  00A4               	movwf	___lmul@multiplicand
  2589  03D1  0836               	movf	??_multiply_fp+4,w
  2590  03D2  00A5               	movwf	___lmul@multiplicand+1
  2591  03D3  0837               	movf	??_multiply_fp+5,w
  2592  03D4  00A6               	movwf	___lmul@multiplicand+2
  2593  03D5  01A7               	clrf	___lmul@multiplicand+3
  2594  03D6  25EB               	fcall	___lmul
  2595  03D7  0020               	movlb	0	; select bank0
  2596  03D8  0820               	movf	?___lmul,w
  2597  03D9  00B8               	movwf	??_multiply_fp+6
  2598  03DA  0821               	movf	?___lmul+1,w
  2599  03DB  00B9               	movwf	??_multiply_fp+7
  2600  03DC  0822               	movf	?___lmul+2,w
  2601  03DD  00BA               	movwf	??_multiply_fp+8
  2602  03DE  0823               	movf	?___lmul+3,w
  2603  03DF  00BB               	movwf	??_multiply_fp+9
  2604  03E0  300E               	movlw	14
  2605  03E1                     u3625:	
  2606  03E1  35B8               	lslf	??_multiply_fp+6,f
  2607  03E2  0DB9               	rlf	??_multiply_fp+7,f
  2608  03E3  0DBA               	rlf	??_multiply_fp+8,f
  2609  03E4  0DBB               	rlf	??_multiply_fp+9,f
  2610  03E5  0B89               	decfsz	9,f
  2611  03E6  2BE1               	goto	u3625
  2612  03E7  083B               	movf	??_multiply_fp+9,w
  2613  03E8  00BF               	movwf	multiply_fp@res+3
  2614  03E9  083A               	movf	??_multiply_fp+8,w
  2615  03EA  00BE               	movwf	multiply_fp@res+2
  2616  03EB  0839               	movf	??_multiply_fp+7,w
  2617  03EC  00BD               	movwf	multiply_fp@res+1
  2618  03ED  0838               	movf	??_multiply_fp+6,w
  2619  03EE  00BC               	movwf	multiply_fp@res
  2620                           
  2621                           ;fixed_point.c: 44: res+ = ((unsigned long long) (n1 >> 14) * (unsigned long long) n2_fr
      +                          a);
  2622  03EF  082C               	movf	multiply_fp@n1,w
  2623  03F0  00B2               	movwf	??_multiply_fp
  2624  03F1  082D               	movf	multiply_fp@n1+1,w
  2625  03F2  00B3               	movwf	??_multiply_fp+1
  2626  03F3  082E               	movf	multiply_fp@n1+2,w
  2627  03F4  00B4               	movwf	??_multiply_fp+2
  2628  03F5  300E               	movlw	14
  2629  03F6                     u3635:	
  2630  03F6  36B4               	lsrf	??_multiply_fp+2,f
  2631  03F7  0CB3               	rrf	??_multiply_fp+1,f
  2632  03F8  0CB2               	rrf	??_multiply_fp,f
  2633  03F9  0B89               	decfsz	9,f
  2634  03FA  2BF6               	goto	u3635
  2635  03FB  0832               	movf	??_multiply_fp,w
  2636  03FC  00A0               	movwf	___lmul@multiplier
  2637  03FD  0833               	movf	??_multiply_fp+1,w
  2638  03FE  00A1               	movwf	___lmul@multiplier+1
  2639  03FF  0834               	movf	??_multiply_fp+2,w
  2640  0400  00A2               	movwf	___lmul@multiplier+2
  2641  0401  01A3               	clrf	___lmul@multiplier+3
  2642  0402  0843               	movf	multiply_fp@n2_fra,w
  2643  0403  00A4               	movwf	___lmul@multiplicand
  2644  0404  0844               	movf	multiply_fp@n2_fra+1,w
  2645  0405  00A5               	movwf	___lmul@multiplicand+1
  2646  0406  0845               	movf	multiply_fp@n2_fra+2,w
  2647  0407  00A6               	movwf	___lmul@multiplicand+2
  2648  0408  01A7               	clrf	___lmul@multiplicand+3
  2649  0409  25EB               	fcall	___lmul
  2650  040A  0020               	movlb	0	; select bank0
  2651  040B  0820               	movf	?___lmul,w
  2652  040C  07BC               	addwf	multiply_fp@res,f
  2653  040D  0821               	movf	?___lmul+1,w
  2654  040E  3DBD               	addwfc	multiply_fp@res+1,f
  2655  040F  0822               	movf	?___lmul+2,w
  2656  0410  3DBE               	addwfc	multiply_fp@res+2,f
  2657  0411  0823               	movf	?___lmul+3,w
  2658  0412  3DBF               	addwfc	multiply_fp@res+3,f
  2659                           
  2660                           ;fixed_point.c: 45: res+ = ((unsigned long long) (n2 >> 14) * (unsigned long long) n1_fr
      +                          a);
  2661  0413  082F               	movf	multiply_fp@n2,w
  2662  0414  00B2               	movwf	??_multiply_fp
  2663  0415  0830               	movf	multiply_fp@n2+1,w
  2664  0416  00B3               	movwf	??_multiply_fp+1
  2665  0417  0831               	movf	multiply_fp@n2+2,w
  2666  0418  00B4               	movwf	??_multiply_fp+2
  2667  0419  300E               	movlw	14
  2668  041A                     u3645:	
  2669  041A  36B4               	lsrf	??_multiply_fp+2,f
  2670  041B  0CB3               	rrf	??_multiply_fp+1,f
  2671  041C  0CB2               	rrf	??_multiply_fp,f
  2672  041D  0B89               	decfsz	9,f
  2673  041E  2C1A               	goto	u3645
  2674  041F  0832               	movf	??_multiply_fp,w
  2675  0420  00A0               	movwf	___lmul@multiplier
  2676  0421  0833               	movf	??_multiply_fp+1,w
  2677  0422  00A1               	movwf	___lmul@multiplier+1
  2678  0423  0834               	movf	??_multiply_fp+2,w
  2679  0424  00A2               	movwf	___lmul@multiplier+2
  2680  0425  01A3               	clrf	___lmul@multiplier+3
  2681  0426  0840               	movf	multiply_fp@n1_fra,w
  2682  0427  00A4               	movwf	___lmul@multiplicand
  2683  0428  0841               	movf	multiply_fp@n1_fra+1,w
  2684  0429  00A5               	movwf	___lmul@multiplicand+1
  2685  042A  0842               	movf	multiply_fp@n1_fra+2,w
  2686  042B  00A6               	movwf	___lmul@multiplicand+2
  2687  042C  01A7               	clrf	___lmul@multiplicand+3
  2688  042D  25EB               	fcall	___lmul
  2689  042E  0020               	movlb	0	; select bank0
  2690  042F  0820               	movf	?___lmul,w
  2691  0430  07BC               	addwf	multiply_fp@res,f
  2692  0431  0821               	movf	?___lmul+1,w
  2693  0432  3DBD               	addwfc	multiply_fp@res+1,f
  2694  0433  0822               	movf	?___lmul+2,w
  2695  0434  3DBE               	addwfc	multiply_fp@res+2,f
  2696  0435  0823               	movf	?___lmul+3,w
  2697  0436  3DBF               	addwfc	multiply_fp@res+3,f
  2698                           
  2699                           ;fixed_point.c: 46: res+ = ((unsigned long long) n1_fra * (unsigned long long) n2_fra)>>
      +                          14;
  2700  0437  0840               	movf	multiply_fp@n1_fra,w
  2701  0438  00A0               	movwf	___lmul@multiplier
  2702  0439  0841               	movf	multiply_fp@n1_fra+1,w
  2703  043A  00A1               	movwf	___lmul@multiplier+1
  2704  043B  0842               	movf	multiply_fp@n1_fra+2,w
  2705  043C  00A2               	movwf	___lmul@multiplier+2
  2706  043D  01A3               	clrf	___lmul@multiplier+3
  2707  043E  0843               	movf	multiply_fp@n2_fra,w
  2708  043F  00A4               	movwf	___lmul@multiplicand
  2709  0440  0844               	movf	multiply_fp@n2_fra+1,w
  2710  0441  00A5               	movwf	___lmul@multiplicand+1
  2711  0442  0845               	movf	multiply_fp@n2_fra+2,w
  2712  0443  00A6               	movwf	___lmul@multiplicand+2
  2713  0444  01A7               	clrf	___lmul@multiplicand+3
  2714  0445  25EB               	fcall	___lmul
  2715  0446  0020               	movlb	0	; select bank0
  2716  0447  0820               	movf	?___lmul,w
  2717  0448  00B2               	movwf	??_multiply_fp
  2718  0449  0821               	movf	?___lmul+1,w
  2719  044A  00B3               	movwf	??_multiply_fp+1
  2720  044B  0822               	movf	?___lmul+2,w
  2721  044C  00B4               	movwf	??_multiply_fp+2
  2722  044D  0823               	movf	?___lmul+3,w
  2723  044E  00B5               	movwf	??_multiply_fp+3
  2724  044F  300E               	movlw	14
  2725  0450                     u3655:	
  2726  0450  36B5               	lsrf	??_multiply_fp+3,f
  2727  0451  0CB4               	rrf	??_multiply_fp+2,f
  2728  0452  0CB3               	rrf	??_multiply_fp+1,f
  2729  0453  0CB2               	rrf	??_multiply_fp,f
  2730  0454  0B89               	decfsz	9,f
  2731  0455  2C50               	goto	u3655
  2732  0456  0832               	movf	??_multiply_fp,w
  2733  0457  07BC               	addwf	multiply_fp@res,f
  2734  0458  0833               	movf	??_multiply_fp+1,w
  2735  0459  3DBD               	addwfc	multiply_fp@res+1,f
  2736  045A  0834               	movf	??_multiply_fp+2,w
  2737  045B  3DBE               	addwfc	multiply_fp@res+2,f
  2738  045C  0835               	movf	??_multiply_fp+3,w
  2739  045D  3DBF               	addwfc	multiply_fp@res+3,f
  2740                           
  2741                           ;fixed_point.c: 47: return res;
  2742  045E  083C               	movf	multiply_fp@res,w
  2743  045F  00AC               	movwf	?_multiply_fp
  2744  0460  083D               	movf	multiply_fp@res+1,w
  2745  0461  00AD               	movwf	?_multiply_fp+1
  2746  0462  083E               	movf	multiply_fp@res+2,w
  2747  0463  00AE               	movwf	?_multiply_fp+2
  2748  0464  0008               	return
  2749  0465                     __end_of_multiply_fp:	
  2750                           
  2751                           	psect	text2
  2752  05EB                     __ptext2:	
  2753 ;; *************** function ___lmul *****************
  2754 ;; Defined at:
  2755 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul32.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2758 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  product         4    8[BANK0 ] unsigned long 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  4    0[BANK0 ] unsigned long 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1
  2770 ;;      Params:         0       8       0
  2771 ;;      Locals:         0       4       0
  2772 ;;      Temps:          0       0       0
  2773 ;;      Totals:         0      12       0
  2774 ;;Total ram usage:       12 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    6
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_multiply_fp
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           
  2785                           ;psect for function ___lmul
  2786  05EB                     ___lmul:	
  2787                           
  2788                           ;incstack = 0
  2789                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2790  05EB  3000               	movlw	0
  2791  05EC  0020               	movlb	0	; select bank0
  2792  05ED  00AB               	movwf	___lmul@product+3
  2793  05EE  3000               	movlw	0
  2794  05EF  00AA               	movwf	___lmul@product+2
  2795  05F0  3000               	movlw	0
  2796  05F1  00A9               	movwf	___lmul@product+1
  2797  05F2  3000               	movlw	0
  2798  05F3  00A8               	movwf	___lmul@product
  2799  05F4                     l3072:	
  2800  05F4  1C20               	btfss	___lmul@multiplier,0
  2801  05F5  2DFE               	goto	l3076
  2802  05F6  0824               	movf	___lmul@multiplicand,w
  2803  05F7  07A8               	addwf	___lmul@product,f
  2804  05F8  0825               	movf	___lmul@multiplicand+1,w
  2805  05F9  3DA9               	addwfc	___lmul@product+1,f
  2806  05FA  0826               	movf	___lmul@multiplicand+2,w
  2807  05FB  3DAA               	addwfc	___lmul@product+2,f
  2808  05FC  0827               	movf	___lmul@multiplicand+3,w
  2809  05FD  3DAB               	addwfc	___lmul@product+3,f
  2810  05FE                     l3076:	
  2811  05FE  3001               	movlw	1
  2812  05FF                     u2955:	
  2813  05FF  35A4               	lslf	___lmul@multiplicand,f
  2814  0600  0DA5               	rlf	___lmul@multiplicand+1,f
  2815  0601  0DA6               	rlf	___lmul@multiplicand+2,f
  2816  0602  0DA7               	rlf	___lmul@multiplicand+3,f
  2817  0603  0B89               	decfsz	9,f
  2818  0604  2DFF               	goto	u2955
  2819  0605  3001               	movlw	1
  2820  0606                     u2965:	
  2821  0606  36A3               	lsrf	___lmul@multiplier+3,f
  2822  0607  0CA2               	rrf	___lmul@multiplier+2,f
  2823  0608  0CA1               	rrf	___lmul@multiplier+1,f
  2824  0609  0CA0               	rrf	___lmul@multiplier,f
  2825  060A  0B89               	decfsz	9,f
  2826  060B  2E06               	goto	u2965
  2827  060C  0823               	movf	___lmul@multiplier+3,w
  2828  060D  0422               	iorwf	___lmul@multiplier+2,w
  2829  060E  0421               	iorwf	___lmul@multiplier+1,w
  2830  060F  0420               	iorwf	___lmul@multiplier,w
  2831  0610  1D03               	skipz
  2832  0611  2DF4               	goto	l3072
  2833  0612  082B               	movf	___lmul@product+3,w
  2834  0613  00A3               	movwf	?___lmul+3
  2835  0614  082A               	movf	___lmul@product+2,w
  2836  0615  00A2               	movwf	?___lmul+2
  2837  0616  0829               	movf	___lmul@product+1,w
  2838  0617  00A1               	movwf	?___lmul+1
  2839  0618  0828               	movf	___lmul@product,w
  2840  0619  00A0               	movwf	?___lmul
  2841  061A  0008               	return
  2842  061B                     __end_of___lmul:	
  2843                           
  2844                           	psect	text3
  2845  07C1                     __ptext3:	
  2846 ;; *************** function _SYSTEM_Initialize *****************
  2847 ;; Defined at:
  2848 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, pclath, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1
  2862 ;;      Params:         0       0       0
  2863 ;;      Locals:         0       0       0
  2864 ;;      Temps:          0       0       0
  2865 ;;      Totals:         0       0       0
  2866 ;;Total ram usage:        0 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    8
  2869 ;; This function calls:
  2870 ;;		_EPWM_Initialize
  2871 ;;		_EUSART_Initialize
  2872 ;;		_OSCILLATOR_Initialize
  2873 ;;		_PIN_MANAGER_Initialize
  2874 ;;		_TMR0_Initialize
  2875 ;;		_TMR2_Initialize
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           
  2882                           ;psect for function _SYSTEM_Initialize
  2883  07C1                     _SYSTEM_Initialize:	
  2884                           
  2885                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2886                           
  2887                           ;incstack = 0
  2888                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2889  07C1  274F               	fcall	_PIN_MANAGER_Initialize
  2890                           
  2891                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2892  07C2  27B9               	fcall	_OSCILLATOR_Initialize
  2893                           
  2894                           ;mcc.c: 74: EPWM_Initialize();
  2895  07C3  278D               	fcall	_EPWM_Initialize
  2896                           
  2897                           ;mcc.c: 75: TMR2_Initialize();
  2898  07C4  27B0               	fcall	_TMR2_Initialize
  2899                           
  2900                           ;mcc.c: 76: TMR0_Initialize();
  2901  07C5  2765               	fcall	_TMR0_Initialize
  2902                           
  2903                           ;mcc.c: 77: EUSART_Initialize();
  2904  07C6  26FE               	fcall	_EUSART_Initialize
  2905  07C7  0008               	return
  2906  07C8                     __end_of_SYSTEM_Initialize:	
  2907                           
  2908                           	psect	text4
  2909  07B0                     __ptext4:	
  2910 ;; *************** function _TMR2_Initialize *****************
  2911 ;; Defined at:
  2912 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, pclath, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1
  2926 ;;      Params:         0       0       0
  2927 ;;      Locals:         0       0       0
  2928 ;;      Temps:          0       0       0
  2929 ;;      Totals:         0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    7
  2933 ;; This function calls:
  2934 ;;		_TMR2_StartTimer
  2935 ;; This function is called by:
  2936 ;;		_SYSTEM_Initialize
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           
  2941                           ;psect for function _TMR2_Initialize
  2942  07B0                     _TMR2_Initialize:	
  2943                           
  2944                           ;tmr2.c: 62: T2CON = 0x02;
  2945                           
  2946                           ;incstack = 0
  2947                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2948  07B0  3002               	movlw	2
  2949  07B1  0020               	movlb	0	; select bank0
  2950  07B2  009C               	movwf	28	;volatile
  2951                           
  2952                           ;tmr2.c: 65: PR2 = 0xFF;
  2953  07B3  30FF               	movlw	255
  2954  07B4  009B               	movwf	27	;volatile
  2955                           
  2956                           ;tmr2.c: 68: TMR2 = 0x00;
  2957  07B5  019A               	clrf	26	;volatile
  2958                           
  2959                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  2960  07B6  1091               	bcf	17,1	;volatile
  2961                           
  2962                           ;tmr2.c: 74: TMR2_StartTimer();
  2963  07B7  27D9               	fcall	_TMR2_StartTimer
  2964  07B8  0008               	return
  2965  07B9                     __end_of_TMR2_Initialize:	
  2966                           
  2967                           	psect	text5
  2968  07D9                     __ptext5:	
  2969 ;; *************** function _TMR2_StartTimer *****************
  2970 ;; Defined at:
  2971 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		None
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1
  2985 ;;      Params:         0       0       0
  2986 ;;      Locals:         0       0       0
  2987 ;;      Temps:          0       0       0
  2988 ;;      Totals:         0       0       0
  2989 ;;Total ram usage:        0 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    6
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_TMR2_Initialize
  2996 ;;		_main
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _TMR2_StartTimer
  3002  07D9                     _TMR2_StartTimer:	
  3003                           
  3004                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _TMR2_StartTimer: []
  3008  07D9  0020               	movlb	0	; select bank0
  3009  07DA  151C               	bsf	28,2	;volatile
  3010  07DB  0008               	return
  3011  07DC                     __end_of_TMR2_StartTimer:	
  3012                           
  3013                           	psect	text6
  3014  0765                     __ptext6:	
  3015 ;; *************** function _TMR0_Initialize *****************
  3016 ;; Defined at:
  3017 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, pclath, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMMON   BANK0   BANK1
  3031 ;;      Params:         0       0       0
  3032 ;;      Locals:         0       0       0
  3033 ;;      Temps:          0       1       0
  3034 ;;      Totals:         0       1       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    7
  3038 ;; This function calls:
  3039 ;;		_TMR0_SetInterruptHandler
  3040 ;; This function is called by:
  3041 ;;		_SYSTEM_Initialize
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _TMR0_Initialize
  3047  0765                     _TMR0_Initialize:	
  3048                           
  3049                           ;tmr0.c: 68: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3053  0765  0021               	movlb	1	; select bank1
  3054  0766  0815               	movf	21,w	;volatile
  3055  0767  39C0               	andlw	192
  3056  0768  3817               	iorlw	23
  3057  0769  0095               	movwf	21	;volatile
  3058                           
  3059                           ;tmr0.c: 71: TMR0 = 0x64;
  3060  076A  3064               	movlw	100
  3061  076B  0020               	movlb	0	; select bank0
  3062  076C  0095               	movwf	21	;volatile
  3063                           
  3064                           ;tmr0.c: 74: timer0ReloadVal= 100;
  3065  076D  3064               	movlw	100
  3066  076E  00A2               	movwf	??_TMR0_Initialize
  3067  076F  0822               	movf	??_TMR0_Initialize,w
  3068  0770  00EB               	movwf	_timer0ReloadVal	;volatile
  3069                           
  3070                           ;tmr0.c: 77: INTCONbits.TMR0IF = 0;
  3071  0771  110B               	bcf	11,2	;volatile
  3072                           
  3073                           ;tmr0.c: 80: INTCONbits.TMR0IE = 1;
  3074  0772  168B               	bsf	11,5	;volatile
  3075                           
  3076                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3077  0773  30E0               	movlw	low _TMR0_DefaultInterruptHandler
  3078  0774  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  3079  0775  3007               	movlw	high _TMR0_DefaultInterruptHandler
  3080  0776  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  3081  0777  27CE               	fcall	_TMR0_SetInterruptHandler
  3082  0778  0008               	return
  3083  0779                     __end_of_TMR0_Initialize:	
  3084                           
  3085                           	psect	text7
  3086  07CE                     __ptext7:	
  3087 ;; *************** function _TMR0_SetInterruptHandler *****************
  3088 ;; Defined at:
  3089 ;;		line 140 in file "mcc_generated_files/tmr0.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  3092 ;;		 -> my10msTimerISR(1), TMR0_DefaultInterruptHandler(1), 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1
  3104 ;;      Params:         0       2       0
  3105 ;;      Locals:         0       0       0
  3106 ;;      Temps:          0       0       0
  3107 ;;      Totals:         0       2       0
  3108 ;;Total ram usage:        2 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    6
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_TMR0_Initialize
  3115 ;;		_main
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           
  3120                           ;psect for function _TMR0_SetInterruptHandler
  3121  07CE                     _TMR0_SetInterruptHandler:	
  3122                           
  3123                           ;tmr0.c: 141: TMR0_InterruptHandler = InterruptHandler;
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  3127  07CE  0020               	movlb	0	; select bank0
  3128  07CF  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  3129  07D0  00DF               	movwf	_TMR0_InterruptHandler+1
  3130  07D1  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  3131  07D2  00DE               	movwf	_TMR0_InterruptHandler
  3132  07D3  0008               	return
  3133  07D4                     __end_of_TMR0_SetInterruptHandler:	
  3134                           
  3135                           	psect	text8
  3136  074F                     __ptext8:	
  3137 ;; *************** function _PIN_MANAGER_Initialize *****************
  3138 ;; Defined at:
  3139 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1
  3153 ;;      Params:         0       0       0
  3154 ;;      Locals:         0       0       0
  3155 ;;      Temps:          0       0       0
  3156 ;;      Totals:         0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    6
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_SYSTEM_Initialize
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _PIN_MANAGER_Initialize
  3169  074F                     _PIN_MANAGER_Initialize:	
  3170                           
  3171                           ;pin_manager.c: 51: LATA = 0x0;
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3175  074F  0022               	movlb	2	; select bank2
  3176  0750  018C               	clrf	12	;volatile
  3177                           
  3178                           ;pin_manager.c: 52: LATC = 0x0;
  3179  0751  018E               	clrf	14	;volatile
  3180                           
  3181                           ;pin_manager.c: 53: ANSELA = 0x7;
  3182  0752  3007               	movlw	7
  3183  0753  0023               	movlb	3	; select bank3
  3184  0754  008C               	movwf	12	;volatile
  3185                           
  3186                           ;pin_manager.c: 54: ANSELC = 0xF;
  3187  0755  300F               	movlw	15
  3188  0756  008E               	movwf	14	;volatile
  3189                           
  3190                           ;pin_manager.c: 55: WPUA = 0x3F;
  3191  0757  303F               	movlw	63
  3192  0758  0024               	movlb	4	; select bank4
  3193  0759  008C               	movwf	12	;volatile
  3194                           
  3195                           ;pin_manager.c: 56: WPUC = 0x3F;
  3196  075A  303F               	movlw	63
  3197  075B  008E               	movwf	14	;volatile
  3198                           
  3199                           ;pin_manager.c: 57: TRISC = 0x37;
  3200  075C  3037               	movlw	55
  3201  075D  0021               	movlb	1	; select bank1
  3202  075E  008E               	movwf	14	;volatile
  3203                           
  3204                           ;pin_manager.c: 58: TRISA = 0x1F;
  3205  075F  301F               	movlw	31
  3206  0760  008C               	movwf	12	;volatile
  3207                           
  3208                           ;pin_manager.c: 60: OPTION_REGbits.nWPUEN = 0x0;
  3209  0761  1395               	bcf	21,7	;volatile
  3210                           
  3211                           ;pin_manager.c: 61: APFCON = 0x00;
  3212  0762  0022               	movlb	2	; select bank2
  3213  0763  019D               	clrf	29	;volatile
  3214  0764  0008               	return
  3215  0765                     __end_of_PIN_MANAGER_Initialize:	
  3216                           
  3217                           	psect	text9
  3218  07B9                     __ptext9:	
  3219 ;; *************** function _OSCILLATOR_Initialize *****************
  3220 ;; Defined at:
  3221 ;;		line 80 in file "mcc_generated_files/mcc.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1
  3235 ;;      Params:         0       0       0
  3236 ;;      Locals:         0       0       0
  3237 ;;      Temps:          0       0       0
  3238 ;;      Totals:         0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    6
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_SYSTEM_Initialize
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _OSCILLATOR_Initialize
  3251  07B9                     _OSCILLATOR_Initialize:	
  3252                           
  3253                           ;mcc.c: 83: OSCCON = 0x70;
  3254                           
  3255                           ;incstack = 0
  3256                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3257  07B9  3070               	movlw	112
  3258  07BA  0021               	movlb	1	; select bank1
  3259  07BB  0099               	movwf	25	;volatile
  3260                           
  3261                           ;mcc.c: 85: OSCSTAT = 0x00;
  3262  07BC  019A               	clrf	26	;volatile
  3263                           
  3264                           ;mcc.c: 87: OSCTUNE = 0x00;
  3265  07BD  0198               	clrf	24	;volatile
  3266  07BE                     l264:	
  3267                           ;mcc.c: 92: {
  3268                           
  3269                           ;mcc.c: 91: while(PLLR == 0)
  3270                           
  3271  07BE  1B1A               	btfsc	26,6	;volatile
  3272  07BF  0008               	return
  3273  07C0  2FBE               	goto	l264
  3274  07C1                     __end_of_OSCILLATOR_Initialize:	
  3275                           
  3276                           	psect	text10
  3277  06FE                     __ptext10:	
  3278 ;; *************** function _EUSART_Initialize *****************
  3279 ;; Defined at:
  3280 ;;		line 75 in file "mcc_generated_files/eusart.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1
  3294 ;;      Params:         0       0       0
  3295 ;;      Locals:         0       0       0
  3296 ;;      Temps:          0       1       0
  3297 ;;      Totals:         0       1       0
  3298 ;;Total ram usage:        1 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    6
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_SYSTEM_Initialize
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           
  3309                           ;psect for function _EUSART_Initialize
  3310  06FE                     _EUSART_Initialize:	
  3311                           
  3312                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  3313                           
  3314                           ;incstack = 0
  3315                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3316  06FE  0021               	movlb	1	; select bank1
  3317  06FF  1291               	bcf	17,5	;volatile
  3318                           
  3319                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  3320  0700  1211               	bcf	17,4	;volatile
  3321                           
  3322                           ;eusart.c: 84: BAUDCON = 0x08;
  3323  0701  3008               	movlw	8
  3324  0702  0023               	movlb	3	; select bank3
  3325  0703  009F               	movwf	31	;volatile
  3326                           
  3327                           ;eusart.c: 87: RCSTA = 0x90;
  3328  0704  3090               	movlw	144
  3329  0705  009D               	movwf	29	;volatile
  3330                           
  3331                           ;eusart.c: 90: TXSTA = 0x24;
  3332  0706  3024               	movlw	36
  3333  0707  009E               	movwf	30	;volatile
  3334                           
  3335                           ;eusart.c: 93: SPBRGL = 0x40;
  3336  0708  3040               	movlw	64
  3337  0709  009B               	movwf	27	;volatile
  3338                           
  3339                           ;eusart.c: 96: SPBRGH = 0x03;
  3340  070A  3003               	movlw	3
  3341  070B  009C               	movwf	28	;volatile
  3342                           
  3343                           ;eusart.c: 100: eusartTxHead = 0;
  3344  070C  0020               	movlb	0	; select bank0
  3345  070D  01E8               	clrf	_eusartTxHead
  3346                           
  3347                           ;eusart.c: 101: eusartTxTail = 0;
  3348  070E  01E9               	clrf	_eusartTxTail
  3349                           
  3350                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3351  070F  3008               	movlw	8
  3352  0710  00A0               	movwf	??_EUSART_Initialize
  3353  0711  0820               	movf	??_EUSART_Initialize,w
  3354  0712  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  3355                           
  3356                           ;eusart.c: 104: eusartRxHead = 0;
  3357  0713  01E6               	clrf	_eusartRxHead
  3358                           
  3359                           ;eusart.c: 105: eusartRxTail = 0;
  3360  0714  01E7               	clrf	_eusartRxTail
  3361                           
  3362                           ;eusart.c: 106: eusartRxCount = 0;
  3363  0715  01F3               	clrf	_eusartRxCount	;volatile
  3364                           
  3365                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  3366  0716  0021               	movlb	1	; select bank1
  3367  0717  1691               	bsf	17,5	;volatile
  3368  0718  0008               	return
  3369  0719                     __end_of_EUSART_Initialize:	
  3370                           
  3371                           	psect	text11
  3372  078D                     __ptext11:	
  3373 ;; *************** function _EPWM_Initialize *****************
  3374 ;; Defined at:
  3375 ;;		line 63 in file "mcc_generated_files/epwm.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, status,2
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1
  3389 ;;      Params:         0       0       0
  3390 ;;      Locals:         0       0       0
  3391 ;;      Temps:          0       0       0
  3392 ;;      Totals:         0       0       0
  3393 ;;Total ram usage:        0 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    6
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_SYSTEM_Initialize
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _EPWM_Initialize
  3405  078D                     _EPWM_Initialize:	
  3406                           
  3407                           ;epwm.c: 68: CCP1CON = 0x3C;
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _EPWM_Initialize: [wreg+status,2]
  3411  078D  303C               	movlw	60
  3412  078E  0025               	movlb	5	; select bank5
  3413  078F  0093               	movwf	19	;volatile
  3414                           
  3415                           ;epwm.c: 71: ECCP1AS = 0x00;
  3416  0790  0195               	clrf	21	;volatile
  3417                           
  3418                           ;epwm.c: 74: PWM1CON = 0x80;
  3419  0791  3080               	movlw	128
  3420  0792  0094               	movwf	20	;volatile
  3421                           
  3422                           ;epwm.c: 77: PSTR1CON = 0x04;
  3423  0793  3004               	movlw	4
  3424  0794  0096               	movwf	22	;volatile
  3425                           
  3426                           ;epwm.c: 80: CCPR1L = 0x7F;
  3427  0795  307F               	movlw	127
  3428  0796  0091               	movwf	17	;volatile
  3429                           
  3430                           ;epwm.c: 83: CCPR1H = 0x00;
  3431  0797  0192               	clrf	18	;volatile
  3432  0798  0008               	return
  3433  0799                     __end_of_EPWM_Initialize:	
  3434                           
  3435                           	psect	text12
  3436  0667                     __ptext12:	
  3437 ;; *************** function _LED_set_state *****************
  3438 ;; Defined at:
  3439 ;;		line 16 in file "interact.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  new_state       1    wreg     enum E2607
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  new_state       1    1[BANK0 ] enum E2607
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1
  3453 ;;      Params:         0       0       0
  3454 ;;      Locals:         0       1       0
  3455 ;;      Temps:          0       1       0
  3456 ;;      Totals:         0       2       0
  3457 ;;Total ram usage:        2 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    6
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_main
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _LED_set_state
  3469  0667                     _LED_set_state:	
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  3473                           ;LED_set_state@new_state stored from wreg
  3474  0667  0020               	movlb	0	; select bank0
  3475  0668  00A1               	movwf	LED_set_state@new_state
  3476                           
  3477                           ;interact.c: 18: LED_state = new_state;
  3478  0669  0821               	movf	LED_set_state@new_state,w
  3479  066A  00A0               	movwf	??_LED_set_state
  3480  066B  0820               	movf	??_LED_set_state,w
  3481  066C  00EC               	movwf	_LED_state
  3482                           
  3483                           ;interact.c: 19: if (new_state == always_off)
  3484  066D  0321               	decf	LED_set_state@new_state,w
  3485  066E  1D03               	btfss	3,2
  3486  066F  2E73               	goto	l3432
  3487                           
  3488                           ;interact.c: 20: do { LATA5 = 0; } while(0);
  3489  0670  0022               	movlb	2	; select bank2
  3490  0671  128C               	bcf	12,5	;volatile
  3491  0672  0008               	return
  3492  0673                     l3432:	
  3493                           
  3494                           ;interact.c: 21: else if (new_state == always_on)
  3495  0673  0020               	movlb	0	; select bank0
  3496  0674  0821               	movf	LED_set_state@new_state,w
  3497  0675  1D03               	btfss	3,2
  3498  0676  2E7A               	goto	l3434
  3499                           
  3500                           ;interact.c: 22: do { LATA5 = 1; } while(0);
  3501  0677  0022               	movlb	2	; select bank2
  3502  0678  168C               	bsf	12,5	;volatile
  3503  0679  0008               	return
  3504  067A                     l3434:	
  3505                           
  3506                           ;interact.c: 23: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  3507  067A  3002               	movlw	2
  3508  067B  0020               	movlb	0	; select bank0
  3509  067C  0621               	xorwf	LED_set_state@new_state,w
  3510  067D  1903               	btfsc	3,2
  3511  067E  2E83               	goto	l532
  3512  067F  3003               	movlw	3
  3513  0680  0621               	xorwf	LED_set_state@new_state,w
  3514  0681  1D03               	btfss	3,2
  3515  0682  0008               	return
  3516  0683                     l532:	
  3517                           ;interact.c: 24: {
  3518                           ;interact.c: 25: do { LATA5 = 1; } while(0);
  3519                           
  3520  0683  0022               	movlb	2	; select bank2
  3521  0684  168C               	bsf	12,5	;volatile
  3522                           
  3523                           ;interact.c: 26: LED_counter = 0;
  3524  0685  0020               	movlb	0	; select bank0
  3525  0686  01E0               	clrf	_LED_counter	;volatile
  3526  0687  0008               	return
  3527  0688                     __end_of_LED_set_state:	
  3528                           
  3529                           	psect	text13
  3530  0035                     __ptext13:	
  3531 ;; *************** function _GPS_read_speed *****************
  3532 ;; Defined at:
  3533 ;;		line 82 in file "main.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;		None
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  buffer          6   28[BANK0 ] unsigned char [6]
  3538 ;;  read_speed_f    2   24[BANK0 ] unsigned short 
  3539 ;;  read_speed_i    2   22[BANK0 ] unsigned short 
  3540 ;;  m_char          1   36[BANK0 ] unsigned char 
  3541 ;;  i_buff          1   35[BANK0 ] unsigned char 
  3542 ;;  i_buff2         1   34[BANK0 ] unsigned char 
  3543 ;;  checksum        1   27[BANK0 ] unsigned char 
  3544 ;;  checksum2       1   26[BANK0 ] unsigned char 
  3545 ;;  no_more_chec    1   21[BANK0 ] unsigned char 
  3546 ;;  before_dot      1   20[BANK0 ] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      unsigned char 
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1
  3556 ;;      Params:         0       0       0
  3557 ;;      Locals:         0      17       0
  3558 ;;      Temps:          0       2       0
  3559 ;;      Totals:         0      19       0
  3560 ;;Total ram usage:       19 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    7
  3563 ;; This function calls:
  3564 ;;		_EUSART_Read
  3565 ;;		___wmul
  3566 ;;		_convert_to_fp
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           
  3573                           ;psect for function _GPS_read_speed
  3574  0035                     _GPS_read_speed:	
  3575                           
  3576                           ;main.c: 86: unsigned char buffer[6];
  3577                           ;main.c: 87: unsigned char i_buff = 0;
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in _GPS_read_speed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3581  0035  0020               	movlb	0	; select bank0
  3582  0036  01C3               	clrf	GPS_read_speed@i_buff
  3583                           
  3584                           ;main.c: 88: unsigned char checksum = 0x00;
  3585  0037  01BB               	clrf	GPS_read_speed@checksum
  3586                           
  3587                           ;main.c: 90: unsigned char m_char = 0x00;
  3588  0038  01C4               	clrf	GPS_read_speed@m_char
  3589  0039                     l3112:	
  3590                           ;main.c: 91: while (m_char != '$')
  3591                           
  3592  0039  3024               	movlw	36
  3593  003A  0644               	xorwf	GPS_read_speed@m_char,w
  3594  003B  1903               	btfsc	3,2
  3595  003C  2846               	goto	l3114
  3596                           
  3597                           ;main.c: 92: if(eusartRxCount!=0)
  3598  003D  0873               	movf	_eusartRxCount,w	;volatile
  3599  003E  1903               	btfsc	3,2
  3600  003F  2839               	goto	l3112
  3601                           
  3602                           ;main.c: 93: m_char=EUSART_Read();
  3603  0040  2688               	fcall	_EUSART_Read
  3604  0041  0020               	movlb	0	; select bank0
  3605  0042  00B2               	movwf	??_GPS_read_speed
  3606  0043  0832               	movf	??_GPS_read_speed,w
  3607  0044  00C4               	movwf	GPS_read_speed@m_char
  3608  0045  2839               	goto	l3112
  3609  0046                     l3114:	
  3610                           ;main.c: 97: while (1)
  3611                           
  3612                           
  3613                           ;main.c: 98: if (eusartRxCount!=0)
  3614  0046  0873               	movf	_eusartRxCount,w	;volatile
  3615  0047  1903               	btfsc	3,2
  3616  0048  2846               	goto	l3114
  3617                           
  3618                           ;main.c: 99: {
  3619                           ;main.c: 100: m_char=EUSART_Read();
  3620  0049  2688               	fcall	_EUSART_Read
  3621  004A  0020               	movlb	0	; select bank0
  3622  004B  00B2               	movwf	??_GPS_read_speed
  3623  004C  0832               	movf	??_GPS_read_speed,w
  3624  004D  00C4               	movwf	GPS_read_speed@m_char
  3625                           
  3626                           ;main.c: 101: checksum ^= m_char;
  3627  004E  0844               	movf	GPS_read_speed@m_char,w
  3628  004F  00B2               	movwf	??_GPS_read_speed
  3629  0050  0832               	movf	??_GPS_read_speed,w
  3630  0051  06BB               	xorwf	GPS_read_speed@checksum,f
  3631                           
  3632                           ;main.c: 102: if (m_char == ',')
  3633  0052  302C               	movlw	44
  3634  0053  0644               	xorwf	GPS_read_speed@m_char,w
  3635  0054  1903               	btfsc	3,2
  3636  0055  2868               	goto	l3136
  3637                           
  3638                           ;main.c: 104: else
  3639                           ;main.c: 105: {
  3640                           ;main.c: 106: buffer[i_buff++] = m_char;
  3641                           
  3642                           ;main.c: 103: break;
  3643  0056  0844               	movf	GPS_read_speed@m_char,w
  3644  0057  00B2               	movwf	??_GPS_read_speed
  3645  0058  0843               	movf	GPS_read_speed@i_buff,w
  3646  0059  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3647  005A  0086               	movwf	6
  3648  005B  0187               	clrf	7
  3649  005C  0832               	movf	??_GPS_read_speed,w
  3650  005D  0081               	movwf	1
  3651  005E  3001               	movlw	1
  3652  005F  00B2               	movwf	??_GPS_read_speed
  3653  0060  0832               	movf	??_GPS_read_speed,w
  3654  0061  07C3               	addwf	GPS_read_speed@i_buff,f
  3655                           
  3656                           ;main.c: 107: if (i_buff >= 6)
  3657  0062  3006               	movlw	6
  3658  0063  0243               	subwf	GPS_read_speed@i_buff,w
  3659  0064  1C03               	skipc
  3660  0065  2846               	goto	l3114
  3661                           
  3662                           ;main.c: 108: return 0;
  3663  0066  3000               	movlw	0
  3664  0067  0008               	return
  3665  0068                     l3136:	
  3666                           
  3667                           ;main.c: 109: }
  3668                           ;main.c: 110: }
  3669                           ;main.c: 112: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3]
      +                           != 'T')||(buffer[4] != 'G'))
  3670  0068  3047               	movlw	71
  3671  0069  063C               	xorwf	GPS_read_speed@buffer,w
  3672  006A  1D03               	btfss	3,2
  3673  006B  287C               	goto	l3146
  3674  006C  3050               	movlw	80
  3675  006D  063D               	xorwf	GPS_read_speed@buffer+1,w
  3676  006E  1D03               	btfss	3,2
  3677  006F  287C               	goto	l3146
  3678  0070  3056               	movlw	86
  3679  0071  063E               	xorwf	GPS_read_speed@buffer+2,w
  3680  0072  1D03               	btfss	3,2
  3681  0073  287C               	goto	l3146
  3682  0074  3054               	movlw	84
  3683  0075  063F               	xorwf	GPS_read_speed@buffer+3,w
  3684  0076  1D03               	btfss	3,2
  3685  0077  287C               	goto	l3146
  3686  0078  3047               	movlw	71
  3687  0079  0640               	xorwf	GPS_read_speed@buffer+4,w
  3688  007A  1903               	btfsc	3,2
  3689  007B  287E               	goto	l3150
  3690  007C                     l3146:	
  3691                           
  3692                           ;main.c: 113: return 0;
  3693  007C  3000               	movlw	0
  3694  007D  0008               	return
  3695  007E                     l3150:	
  3696                           
  3697                           ;main.c: 114: i_buff = 0;
  3698  007E  01C3               	clrf	GPS_read_speed@i_buff
  3699  007F                     l3152:	
  3700                           ;main.c: 117: while (1)
  3701                           
  3702                           
  3703                           ;main.c: 118: if (eusartRxCount!=0)
  3704  007F  0873               	movf	_eusartRxCount,w	;volatile
  3705  0080  1903               	btfsc	3,2
  3706  0081  287F               	goto	l3152
  3707                           
  3708                           ;main.c: 119: {
  3709                           ;main.c: 120: m_char=EUSART_Read();
  3710  0082  2688               	fcall	_EUSART_Read
  3711  0083  0020               	movlb	0	; select bank0
  3712  0084  00B2               	movwf	??_GPS_read_speed
  3713  0085  0832               	movf	??_GPS_read_speed,w
  3714  0086  00C4               	movwf	GPS_read_speed@m_char
  3715                           
  3716                           ;main.c: 121: checksum ^= m_char;
  3717  0087  0844               	movf	GPS_read_speed@m_char,w
  3718  0088  00B2               	movwf	??_GPS_read_speed
  3719  0089  0832               	movf	??_GPS_read_speed,w
  3720  008A  06BB               	xorwf	GPS_read_speed@checksum,f
  3721                           
  3722                           ;main.c: 122: if (m_char == ',')
  3723  008B  302C               	movlw	44
  3724  008C  0644               	xorwf	GPS_read_speed@m_char,w
  3725  008D  1D03               	btfss	3,2
  3726  008E  287F               	goto	l3152
  3727  008F                     l3162:	
  3728                           ;main.c: 124: }
  3729                           ;main.c: 126: while (1)
  3730                           
  3731                           ;main.c: 123: break;
  3732                           
  3733                           
  3734                           ;main.c: 127: if (eusartRxCount!=0)
  3735  008F  0873               	movf	_eusartRxCount,w	;volatile
  3736  0090  1903               	btfsc	3,2
  3737  0091  288F               	goto	l3162
  3738                           
  3739                           ;main.c: 128: {
  3740                           ;main.c: 129: m_char=EUSART_Read();
  3741  0092  2688               	fcall	_EUSART_Read
  3742  0093  0020               	movlb	0	; select bank0
  3743  0094  00B2               	movwf	??_GPS_read_speed
  3744  0095  0832               	movf	??_GPS_read_speed,w
  3745  0096  00C4               	movwf	GPS_read_speed@m_char
  3746                           
  3747                           ;main.c: 130: checksum ^= m_char;
  3748  0097  0844               	movf	GPS_read_speed@m_char,w
  3749  0098  00B2               	movwf	??_GPS_read_speed
  3750  0099  0832               	movf	??_GPS_read_speed,w
  3751  009A  06BB               	xorwf	GPS_read_speed@checksum,f
  3752                           
  3753                           ;main.c: 131: if (m_char == ',')
  3754  009B  302C               	movlw	44
  3755  009C  0644               	xorwf	GPS_read_speed@m_char,w
  3756  009D  1903               	btfsc	3,2
  3757  009E  28B1               	goto	l3184
  3758                           
  3759                           ;main.c: 133: else
  3760                           ;main.c: 134: {
  3761                           ;main.c: 135: buffer[i_buff++] = m_char;
  3762                           
  3763                           ;main.c: 132: break;
  3764  009F  0844               	movf	GPS_read_speed@m_char,w
  3765  00A0  00B2               	movwf	??_GPS_read_speed
  3766  00A1  0843               	movf	GPS_read_speed@i_buff,w
  3767  00A2  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3768  00A3  0086               	movwf	6
  3769  00A4  0187               	clrf	7
  3770  00A5  0832               	movf	??_GPS_read_speed,w
  3771  00A6  0081               	movwf	1
  3772  00A7  3001               	movlw	1
  3773  00A8  00B2               	movwf	??_GPS_read_speed
  3774  00A9  0832               	movf	??_GPS_read_speed,w
  3775  00AA  07C3               	addwf	GPS_read_speed@i_buff,f
  3776                           
  3777                           ;main.c: 136: if (i_buff >= 6)
  3778  00AB  3006               	movlw	6
  3779  00AC  0243               	subwf	GPS_read_speed@i_buff,w
  3780  00AD  1C03               	skipc
  3781  00AE  288F               	goto	l3162
  3782                           
  3783                           ;main.c: 137: return 0;
  3784  00AF  3000               	movlw	0
  3785  00B0  0008               	return
  3786  00B1                     l3184:	
  3787                           
  3788                           ;main.c: 138: }
  3789                           ;main.c: 139: }
  3790                           ;main.c: 140: if ((buffer[0] != 'T')||(i_buff != 1))
  3791  00B1  3054               	movlw	84
  3792  00B2  063C               	xorwf	GPS_read_speed@buffer,w
  3793  00B3  1903               	btfsc	3,2
  3794  00B4  0343               	decf	GPS_read_speed@i_buff,w
  3795  00B5  1903               	btfsc	3,2
  3796  00B6  28B9               	goto	l3192
  3797                           
  3798                           ;main.c: 141: return 0;
  3799  00B7  3000               	movlw	0
  3800  00B8  0008               	return
  3801  00B9                     l3192:	
  3802                           
  3803                           ;main.c: 142: i_buff = 0;
  3804  00B9  01C3               	clrf	GPS_read_speed@i_buff
  3805  00BA                     l3194:	
  3806                           ;main.c: 145: while (1)
  3807                           
  3808                           
  3809                           ;main.c: 146: if (eusartRxCount!=0)
  3810  00BA  0873               	movf	_eusartRxCount,w	;volatile
  3811  00BB  1903               	btfsc	3,2
  3812  00BC  28BA               	goto	l3194
  3813                           
  3814                           ;main.c: 147: {
  3815                           ;main.c: 148: m_char=EUSART_Read();
  3816  00BD  2688               	fcall	_EUSART_Read
  3817  00BE  0020               	movlb	0	; select bank0
  3818  00BF  00B2               	movwf	??_GPS_read_speed
  3819  00C0  0832               	movf	??_GPS_read_speed,w
  3820  00C1  00C4               	movwf	GPS_read_speed@m_char
  3821                           
  3822                           ;main.c: 149: checksum ^= m_char;
  3823  00C2  0844               	movf	GPS_read_speed@m_char,w
  3824  00C3  00B2               	movwf	??_GPS_read_speed
  3825  00C4  0832               	movf	??_GPS_read_speed,w
  3826  00C5  06BB               	xorwf	GPS_read_speed@checksum,f
  3827                           
  3828                           ;main.c: 150: if (m_char == ',')
  3829  00C6  302C               	movlw	44
  3830  00C7  0644               	xorwf	GPS_read_speed@m_char,w
  3831  00C8  1D03               	btfss	3,2
  3832  00C9  28BA               	goto	l3194
  3833  00CA                     l3204:	
  3834                           ;main.c: 152: }
  3835                           ;main.c: 154: while (1)
  3836                           
  3837                           ;main.c: 151: break;
  3838                           
  3839                           
  3840                           ;main.c: 155: if (eusartRxCount!=0)
  3841  00CA  0873               	movf	_eusartRxCount,w	;volatile
  3842  00CB  1903               	btfsc	3,2
  3843  00CC  28CA               	goto	l3204
  3844                           
  3845                           ;main.c: 156: {
  3846                           ;main.c: 157: m_char=EUSART_Read();
  3847  00CD  2688               	fcall	_EUSART_Read
  3848  00CE  0020               	movlb	0	; select bank0
  3849  00CF  00B2               	movwf	??_GPS_read_speed
  3850  00D0  0832               	movf	??_GPS_read_speed,w
  3851  00D1  00C4               	movwf	GPS_read_speed@m_char
  3852                           
  3853                           ;main.c: 158: checksum ^= m_char;
  3854  00D2  0844               	movf	GPS_read_speed@m_char,w
  3855  00D3  00B2               	movwf	??_GPS_read_speed
  3856  00D4  0832               	movf	??_GPS_read_speed,w
  3857  00D5  06BB               	xorwf	GPS_read_speed@checksum,f
  3858                           
  3859                           ;main.c: 159: if (m_char == ',')
  3860  00D6  302C               	movlw	44
  3861  00D7  0644               	xorwf	GPS_read_speed@m_char,w
  3862  00D8  1903               	btfsc	3,2
  3863  00D9  28EC               	goto	l3226
  3864                           
  3865                           ;main.c: 161: else
  3866                           ;main.c: 162: {
  3867                           ;main.c: 163: buffer[i_buff++] = m_char;
  3868                           
  3869                           ;main.c: 160: break;
  3870  00DA  0844               	movf	GPS_read_speed@m_char,w
  3871  00DB  00B2               	movwf	??_GPS_read_speed
  3872  00DC  0843               	movf	GPS_read_speed@i_buff,w
  3873  00DD  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3874  00DE  0086               	movwf	6
  3875  00DF  0187               	clrf	7
  3876  00E0  0832               	movf	??_GPS_read_speed,w
  3877  00E1  0081               	movwf	1
  3878  00E2  3001               	movlw	1
  3879  00E3  00B2               	movwf	??_GPS_read_speed
  3880  00E4  0832               	movf	??_GPS_read_speed,w
  3881  00E5  07C3               	addwf	GPS_read_speed@i_buff,f
  3882                           
  3883                           ;main.c: 164: if (i_buff >= 6)
  3884  00E6  3006               	movlw	6
  3885  00E7  0243               	subwf	GPS_read_speed@i_buff,w
  3886  00E8  1C03               	skipc
  3887  00E9  28CA               	goto	l3204
  3888                           
  3889                           ;main.c: 165: return 0;
  3890  00EA  3000               	movlw	0
  3891  00EB  0008               	return
  3892  00EC                     l3226:	
  3893                           
  3894                           ;main.c: 166: }
  3895                           ;main.c: 167: }
  3896                           ;main.c: 168: if ((buffer[0] != 'M')||(i_buff != 1))
  3897  00EC  304D               	movlw	77
  3898  00ED  063C               	xorwf	GPS_read_speed@buffer,w
  3899  00EE  1903               	btfsc	3,2
  3900  00EF  0343               	decf	GPS_read_speed@i_buff,w
  3901  00F0  1903               	btfsc	3,2
  3902  00F1  28F4               	goto	l3234
  3903                           
  3904                           ;main.c: 169: return 0;
  3905  00F2  3000               	movlw	0
  3906  00F3  0008               	return
  3907  00F4                     l3234:	
  3908                           
  3909                           ;main.c: 170: i_buff = 0;
  3910  00F4  01C3               	clrf	GPS_read_speed@i_buff
  3911  00F5                     l3236:	
  3912                           ;main.c: 173: while (1)
  3913                           
  3914                           
  3915                           ;main.c: 174: if (eusartRxCount!=0)
  3916  00F5  0873               	movf	_eusartRxCount,w	;volatile
  3917  00F6  1903               	btfsc	3,2
  3918  00F7  28F5               	goto	l3236
  3919                           
  3920                           ;main.c: 175: {
  3921                           ;main.c: 176: m_char=EUSART_Read();
  3922  00F8  2688               	fcall	_EUSART_Read
  3923  00F9  0020               	movlb	0	; select bank0
  3924  00FA  00B2               	movwf	??_GPS_read_speed
  3925  00FB  0832               	movf	??_GPS_read_speed,w
  3926  00FC  00C4               	movwf	GPS_read_speed@m_char
  3927                           
  3928                           ;main.c: 177: checksum ^= m_char;
  3929  00FD  0844               	movf	GPS_read_speed@m_char,w
  3930  00FE  00B2               	movwf	??_GPS_read_speed
  3931  00FF  0832               	movf	??_GPS_read_speed,w
  3932  0100  06BB               	xorwf	GPS_read_speed@checksum,f
  3933                           
  3934                           ;main.c: 178: if (m_char == ',')
  3935  0101  302C               	movlw	44
  3936  0102  0644               	xorwf	GPS_read_speed@m_char,w
  3937  0103  1D03               	btfss	3,2
  3938  0104  28F5               	goto	l3236
  3939  0105                     l3246:	
  3940                           ;main.c: 180: }
  3941                           ;main.c: 182: while (1)
  3942                           
  3943                           ;main.c: 179: break;
  3944                           
  3945                           
  3946                           ;main.c: 183: if (eusartRxCount!=0)
  3947  0105  0873               	movf	_eusartRxCount,w	;volatile
  3948  0106  1903               	btfsc	3,2
  3949  0107  2905               	goto	l3246
  3950                           
  3951                           ;main.c: 184: {
  3952                           ;main.c: 185: m_char=EUSART_Read();
  3953  0108  2688               	fcall	_EUSART_Read
  3954  0109  0020               	movlb	0	; select bank0
  3955  010A  00B2               	movwf	??_GPS_read_speed
  3956  010B  0832               	movf	??_GPS_read_speed,w
  3957  010C  00C4               	movwf	GPS_read_speed@m_char
  3958                           
  3959                           ;main.c: 186: checksum ^= m_char;
  3960  010D  0844               	movf	GPS_read_speed@m_char,w
  3961  010E  00B2               	movwf	??_GPS_read_speed
  3962  010F  0832               	movf	??_GPS_read_speed,w
  3963  0110  06BB               	xorwf	GPS_read_speed@checksum,f
  3964                           
  3965                           ;main.c: 187: if (m_char == ',')
  3966  0111  302C               	movlw	44
  3967  0112  0644               	xorwf	GPS_read_speed@m_char,w
  3968  0113  1903               	btfsc	3,2
  3969  0114  2927               	goto	l3268
  3970                           
  3971                           ;main.c: 189: else
  3972                           ;main.c: 190: {
  3973                           ;main.c: 191: buffer[i_buff++] = m_char;
  3974                           
  3975                           ;main.c: 188: break;
  3976  0115  0844               	movf	GPS_read_speed@m_char,w
  3977  0116  00B2               	movwf	??_GPS_read_speed
  3978  0117  0843               	movf	GPS_read_speed@i_buff,w
  3979  0118  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3980  0119  0086               	movwf	6
  3981  011A  0187               	clrf	7
  3982  011B  0832               	movf	??_GPS_read_speed,w
  3983  011C  0081               	movwf	1
  3984  011D  3001               	movlw	1
  3985  011E  00B2               	movwf	??_GPS_read_speed
  3986  011F  0832               	movf	??_GPS_read_speed,w
  3987  0120  07C3               	addwf	GPS_read_speed@i_buff,f
  3988                           
  3989                           ;main.c: 192: if (i_buff >= 6)
  3990  0121  3006               	movlw	6
  3991  0122  0243               	subwf	GPS_read_speed@i_buff,w
  3992  0123  1C03               	skipc
  3993  0124  2905               	goto	l3246
  3994                           
  3995                           ;main.c: 193: return 0;
  3996  0125  3000               	movlw	0
  3997  0126  0008               	return
  3998  0127                     l3268:	
  3999                           
  4000                           ;main.c: 194: }
  4001                           ;main.c: 195: }
  4002                           ;main.c: 196: if ((buffer[0] != 'N')||(i_buff != 1))
  4003  0127  304E               	movlw	78
  4004  0128  063C               	xorwf	GPS_read_speed@buffer,w
  4005  0129  1903               	btfsc	3,2
  4006  012A  0343               	decf	GPS_read_speed@i_buff,w
  4007  012B  1903               	btfsc	3,2
  4008  012C  292F               	goto	l3276
  4009                           
  4010                           ;main.c: 197: return 0;
  4011  012D  3000               	movlw	0
  4012  012E  0008               	return
  4013  012F                     l3276:	
  4014                           
  4015                           ;main.c: 198: i_buff = 0;
  4016  012F  01C3               	clrf	GPS_read_speed@i_buff
  4017  0130                     l3278:	
  4018                           ;main.c: 201: while (1)
  4019                           
  4020                           
  4021                           ;main.c: 202: if (eusartRxCount!=0)
  4022  0130  0873               	movf	_eusartRxCount,w	;volatile
  4023  0131  1903               	btfsc	3,2
  4024  0132  2930               	goto	l3278
  4025                           
  4026                           ;main.c: 203: {
  4027                           ;main.c: 204: m_char=EUSART_Read();
  4028  0133  2688               	fcall	_EUSART_Read
  4029  0134  0020               	movlb	0	; select bank0
  4030  0135  00B2               	movwf	??_GPS_read_speed
  4031  0136  0832               	movf	??_GPS_read_speed,w
  4032  0137  00C4               	movwf	GPS_read_speed@m_char
  4033                           
  4034                           ;main.c: 205: checksum ^= m_char;
  4035  0138  0844               	movf	GPS_read_speed@m_char,w
  4036  0139  00B2               	movwf	??_GPS_read_speed
  4037  013A  0832               	movf	??_GPS_read_speed,w
  4038  013B  06BB               	xorwf	GPS_read_speed@checksum,f
  4039                           
  4040                           ;main.c: 206: if (m_char == ',')
  4041  013C  302C               	movlw	44
  4042  013D  0644               	xorwf	GPS_read_speed@m_char,w
  4043  013E  1903               	btfsc	3,2
  4044  013F  2952               	goto	l3300
  4045                           
  4046                           ;main.c: 208: else
  4047                           ;main.c: 209: {
  4048                           ;main.c: 210: buffer[i_buff++] = m_char;
  4049                           
  4050                           ;main.c: 207: break;
  4051  0140  0844               	movf	GPS_read_speed@m_char,w
  4052  0141  00B2               	movwf	??_GPS_read_speed
  4053  0142  0843               	movf	GPS_read_speed@i_buff,w
  4054  0143  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4055  0144  0086               	movwf	6
  4056  0145  0187               	clrf	7
  4057  0146  0832               	movf	??_GPS_read_speed,w
  4058  0147  0081               	movwf	1
  4059  0148  3001               	movlw	1
  4060  0149  00B2               	movwf	??_GPS_read_speed
  4061  014A  0832               	movf	??_GPS_read_speed,w
  4062  014B  07C3               	addwf	GPS_read_speed@i_buff,f
  4063                           
  4064                           ;main.c: 211: if (i_buff >= 6)
  4065  014C  3006               	movlw	6
  4066  014D  0243               	subwf	GPS_read_speed@i_buff,w
  4067  014E  1C03               	skipc
  4068  014F  2930               	goto	l3278
  4069                           
  4070                           ;main.c: 212: return 0;
  4071  0150  3000               	movlw	0
  4072  0151  0008               	return
  4073  0152                     l3300:	
  4074                           
  4075                           ;main.c: 213: }
  4076                           ;main.c: 214: }
  4077                           ;main.c: 217: unsigned char i_buff2 = 0;
  4078  0152  01C2               	clrf	GPS_read_speed@i_buff2
  4079                           
  4080                           ;main.c: 218: unsigned short read_speed_int=0;
  4081  0153  01B6               	clrf	GPS_read_speed@read_speed_int
  4082  0154  01B7               	clrf	GPS_read_speed@read_speed_int+1
  4083                           
  4084                           ;main.c: 219: unsigned short read_speed_fra=0;
  4085  0155  01B8               	clrf	GPS_read_speed@read_speed_fra
  4086  0156  01B9               	clrf	GPS_read_speed@read_speed_fra+1
  4087                           
  4088                           ;main.c: 220: bool before_dot = 1;
  4089  0157  01B4               	clrf	GPS_read_speed@before_dot
  4090  0158  0AB4               	incf	GPS_read_speed@before_dot,f
  4091  0159                     l3328:	
  4092                           ;main.c: 221: while (i_buff2 < i_buff)
  4093                           
  4094  0159  0843               	movf	GPS_read_speed@i_buff,w
  4095  015A  0242               	subwf	GPS_read_speed@i_buff2,w
  4096  015B  1803               	btfsc	3,0
  4097  015C  29B8               	goto	l3330
  4098                           
  4099                           ;main.c: 222: if (buffer[i_buff2]=='.')
  4100  015D  0842               	movf	GPS_read_speed@i_buff2,w
  4101  015E  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4102  015F  0086               	movwf	6
  4103  0160  0187               	clrf	7
  4104  0161  302E               	movlw	46
  4105  0162  0601               	xorwf	1,w
  4106  0163  1D03               	btfss	3,2
  4107  0164  2967               	goto	l3310
  4108                           
  4109                           ;main.c: 223: {
  4110                           ;main.c: 224: before_dot = 0;
  4111  0165  01B4               	clrf	GPS_read_speed@before_dot
  4112  0166  29B3               	goto	l3326
  4113  0167                     l3310:	
  4114                           ;main.c: 226: }
  4115                           
  4116                           ;main.c: 225: i_buff2++;
  4117                           
  4118                           
  4119                           ;main.c: 227: else
  4120                           ;main.c: 228: {
  4121                           ;main.c: 229: if ((buffer[i_buff2]<0x30)||(buffer[i_buff2]>0x39))
  4122  0167  0842               	movf	GPS_read_speed@i_buff2,w
  4123  0168  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4124  0169  0086               	movwf	6
  4125  016A  0187               	clrf	7
  4126  016B  3030               	movlw	48
  4127  016C  0201               	subwf	1,w
  4128  016D  1C03               	skipc
  4129  016E  2977               	goto	l3314
  4130  016F  0842               	movf	GPS_read_speed@i_buff2,w
  4131  0170  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4132  0171  0086               	movwf	6
  4133  0172  0187               	clrf	7
  4134  0173  303A               	movlw	58
  4135  0174  0201               	subwf	1,w
  4136  0175  1C03               	skipc
  4137  0176  2979               	goto	l3320
  4138  0177                     l3314:	
  4139                           
  4140                           ;main.c: 230: return 0;
  4141  0177  3000               	movlw	0
  4142  0178  0008               	return
  4143  0179                     l3320:	
  4144                           
  4145                           ;main.c: 231: else
  4146                           ;main.c: 232: {
  4147                           ;main.c: 233: if (before_dot)
  4148  0179  0834               	movf	GPS_read_speed@before_dot,w
  4149  017A  1903               	btfsc	3,2
  4150  017B  2998               	goto	l3324
  4151                           
  4152                           ;main.c: 234: read_speed_int = read_speed_int*10 + (buffer[i_buff2]-0x30);
  4153  017C  0837               	movf	GPS_read_speed@read_speed_int+1,w
  4154  017D  00A1               	movwf	___wmul@multiplier+1
  4155  017E  0836               	movf	GPS_read_speed@read_speed_int,w
  4156  017F  00A0               	movwf	___wmul@multiplier
  4157  0180  300A               	movlw	10
  4158  0181  00A2               	movwf	___wmul@multiplicand
  4159  0182  3000               	movlw	0
  4160  0183  00A3               	movwf	___wmul@multiplicand+1
  4161  0184  26C6               	fcall	___wmul
  4162  0185  0020               	movlb	0	; select bank0
  4163  0186  0842               	movf	GPS_read_speed@i_buff2,w
  4164  0187  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4165  0188  0086               	movwf	6
  4166  0189  0187               	clrf	7
  4167  018A  0801               	movf	1,w
  4168  018B  0720               	addwf	?___wmul,w
  4169  018C  00B2               	movwf	??_GPS_read_speed
  4170  018D  0821               	movf	?___wmul+1,w
  4171  018E  1803               	skipnc
  4172  018F  0A21               	incf	?___wmul+1,w
  4173  0190  00B3               	movwf	??_GPS_read_speed+1
  4174  0191  0832               	movf	??_GPS_read_speed,w
  4175  0192  3ED0               	addlw	208
  4176  0193  00B6               	movwf	GPS_read_speed@read_speed_int
  4177  0194  30FF               	movlw	255
  4178  0195  3D33               	addwfc	??_GPS_read_speed+1,w
  4179  0196  00B7               	movwf	GPS_read_speed@read_speed_int+1
  4180  0197  29B3               	goto	l3326
  4181  0198                     l3324:	
  4182                           
  4183                           ;main.c: 235: else
  4184                           ;main.c: 236: read_speed_fra = read_speed_fra*10 + (buffer[i_buff2]-0x30);
  4185  0198  0839               	movf	GPS_read_speed@read_speed_fra+1,w
  4186  0199  00A1               	movwf	___wmul@multiplier+1
  4187  019A  0838               	movf	GPS_read_speed@read_speed_fra,w
  4188  019B  00A0               	movwf	___wmul@multiplier
  4189  019C  300A               	movlw	10
  4190  019D  00A2               	movwf	___wmul@multiplicand
  4191  019E  3000               	movlw	0
  4192  019F  00A3               	movwf	___wmul@multiplicand+1
  4193  01A0  26C6               	fcall	___wmul
  4194  01A1  0020               	movlb	0	; select bank0
  4195  01A2  0842               	movf	GPS_read_speed@i_buff2,w
  4196  01A3  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4197  01A4  0086               	movwf	6
  4198  01A5  0187               	clrf	7
  4199  01A6  0801               	movf	1,w
  4200  01A7  0720               	addwf	?___wmul,w
  4201  01A8  00B2               	movwf	??_GPS_read_speed
  4202  01A9  0821               	movf	?___wmul+1,w
  4203  01AA  1803               	skipnc
  4204  01AB  0A21               	incf	?___wmul+1,w
  4205  01AC  00B3               	movwf	??_GPS_read_speed+1
  4206  01AD  0832               	movf	??_GPS_read_speed,w
  4207  01AE  3ED0               	addlw	208
  4208  01AF  00B8               	movwf	GPS_read_speed@read_speed_fra
  4209  01B0  30FF               	movlw	255
  4210  01B1  3D33               	addwfc	??_GPS_read_speed+1,w
  4211  01B2  00B9               	movwf	GPS_read_speed@read_speed_fra+1
  4212  01B3                     l3326:	
  4213                           
  4214                           ;main.c: 237: i_buff2++;
  4215  01B3  3001               	movlw	1
  4216  01B4  00B2               	movwf	??_GPS_read_speed
  4217  01B5  0832               	movf	??_GPS_read_speed,w
  4218  01B6  07C2               	addwf	GPS_read_speed@i_buff2,f
  4219  01B7  2959               	goto	l3328
  4220  01B8                     l3330:	
  4221                           
  4222                           ;main.c: 238: }
  4223                           ;main.c: 239: }
  4224                           ;main.c: 243: read_speed_fra *= 100;
  4225  01B8  3064               	movlw	100
  4226  01B9  00A0               	movwf	___wmul@multiplier
  4227  01BA  3000               	movlw	0
  4228  01BB  00A1               	movwf	___wmul@multiplier+1
  4229  01BC  0839               	movf	GPS_read_speed@read_speed_fra+1,w
  4230  01BD  00A3               	movwf	___wmul@multiplicand+1
  4231  01BE  0838               	movf	GPS_read_speed@read_speed_fra,w
  4232  01BF  00A2               	movwf	___wmul@multiplicand
  4233  01C0  26C6               	fcall	___wmul
  4234  01C1  0020               	movlb	0	; select bank0
  4235  01C2  0821               	movf	?___wmul+1,w
  4236  01C3  00B9               	movwf	GPS_read_speed@read_speed_fra+1
  4237  01C4  0820               	movf	?___wmul,w
  4238  01C5  00B8               	movwf	GPS_read_speed@read_speed_fra
  4239                           
  4240                           ;main.c: 246: i_buff = 0;
  4241  01C6  01C3               	clrf	GPS_read_speed@i_buff
  4242  01C7                     l3334:	
  4243                           ;main.c: 249: while (1)
  4244                           
  4245                           
  4246                           ;main.c: 250: if (eusartRxCount!=0)
  4247  01C7  0873               	movf	_eusartRxCount,w	;volatile
  4248  01C8  1903               	btfsc	3,2
  4249  01C9  29C7               	goto	l3334
  4250                           
  4251                           ;main.c: 251: {
  4252                           ;main.c: 252: m_char=EUSART_Read();
  4253  01CA  2688               	fcall	_EUSART_Read
  4254  01CB  0020               	movlb	0	; select bank0
  4255  01CC  00B2               	movwf	??_GPS_read_speed
  4256  01CD  0832               	movf	??_GPS_read_speed,w
  4257  01CE  00C4               	movwf	GPS_read_speed@m_char
  4258                           
  4259                           ;main.c: 253: checksum ^= m_char;
  4260  01CF  0844               	movf	GPS_read_speed@m_char,w
  4261  01D0  00B2               	movwf	??_GPS_read_speed
  4262  01D1  0832               	movf	??_GPS_read_speed,w
  4263  01D2  06BB               	xorwf	GPS_read_speed@checksum,f
  4264                           
  4265                           ;main.c: 254: if (m_char == ',')
  4266  01D3  302C               	movlw	44
  4267  01D4  0644               	xorwf	GPS_read_speed@m_char,w
  4268  01D5  1903               	btfsc	3,2
  4269  01D6  29E9               	goto	l3356
  4270                           
  4271                           ;main.c: 256: else
  4272                           ;main.c: 257: {
  4273                           ;main.c: 258: buffer[i_buff++] = m_char;
  4274                           
  4275                           ;main.c: 255: break;
  4276  01D7  0844               	movf	GPS_read_speed@m_char,w
  4277  01D8  00B2               	movwf	??_GPS_read_speed
  4278  01D9  0843               	movf	GPS_read_speed@i_buff,w
  4279  01DA  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4280  01DB  0086               	movwf	6
  4281  01DC  0187               	clrf	7
  4282  01DD  0832               	movf	??_GPS_read_speed,w
  4283  01DE  0081               	movwf	1
  4284  01DF  3001               	movlw	1
  4285  01E0  00B2               	movwf	??_GPS_read_speed
  4286  01E1  0832               	movf	??_GPS_read_speed,w
  4287  01E2  07C3               	addwf	GPS_read_speed@i_buff,f
  4288                           
  4289                           ;main.c: 259: if (i_buff >= 6)
  4290  01E3  3006               	movlw	6
  4291  01E4  0243               	subwf	GPS_read_speed@i_buff,w
  4292  01E5  1C03               	skipc
  4293  01E6  29C7               	goto	l3334
  4294                           
  4295                           ;main.c: 260: return 0;
  4296  01E7  3000               	movlw	0
  4297  01E8  0008               	return
  4298  01E9                     l3356:	
  4299                           
  4300                           ;main.c: 261: }
  4301                           ;main.c: 262: }
  4302                           ;main.c: 263: if ((buffer[0] != 'K')||(i_buff != 1))
  4303  01E9  304B               	movlw	75
  4304  01EA  063C               	xorwf	GPS_read_speed@buffer,w
  4305  01EB  1903               	btfsc	3,2
  4306  01EC  0343               	decf	GPS_read_speed@i_buff,w
  4307  01ED  1903               	btfsc	3,2
  4308  01EE  29F1               	goto	l3364
  4309                           
  4310                           ;main.c: 264: return 0;
  4311  01EF  3000               	movlw	0
  4312  01F0  0008               	return
  4313  01F1                     l3364:	
  4314                           
  4315                           ;main.c: 265: i_buff = 0;
  4316  01F1  01C3               	clrf	GPS_read_speed@i_buff
  4317                           
  4318                           ;main.c: 268: bool no_more_checksum = 0;
  4319  01F2  01B5               	clrf	GPS_read_speed@no_more_checksum
  4320  01F3                     l3366:	
  4321                           ;main.c: 269: while (1)
  4322                           
  4323                           
  4324                           ;main.c: 270: if (eusartRxCount!=0)
  4325  01F3  0873               	movf	_eusartRxCount,w	;volatile
  4326  01F4  1903               	btfsc	3,2
  4327  01F5  29F3               	goto	l3366
  4328                           
  4329                           ;main.c: 271: {
  4330                           ;main.c: 272: m_char=EUSART_Read();
  4331  01F6  2688               	fcall	_EUSART_Read
  4332  01F7  0020               	movlb	0	; select bank0
  4333  01F8  00B2               	movwf	??_GPS_read_speed
  4334  01F9  0832               	movf	??_GPS_read_speed,w
  4335  01FA  00C4               	movwf	GPS_read_speed@m_char
  4336                           
  4337                           ;main.c: 273: if (m_char == '*')
  4338  01FB  302A               	movlw	42
  4339  01FC  0644               	xorwf	GPS_read_speed@m_char,w
  4340  01FD  1D03               	btfss	3,2
  4341  01FE  2A01               	goto	l3374
  4342                           
  4343                           ;main.c: 274: no_more_checksum = 1;
  4344  01FF  01B5               	clrf	GPS_read_speed@no_more_checksum
  4345  0200  0AB5               	incf	GPS_read_speed@no_more_checksum,f
  4346  0201                     l3374:	
  4347                           
  4348                           ;main.c: 275: if (!no_more_checksum)
  4349  0201  0835               	movf	GPS_read_speed@no_more_checksum,w
  4350  0202  1D03               	btfss	3,2
  4351  0203  2A08               	goto	l445
  4352                           
  4353                           ;main.c: 276: checksum ^= m_char;
  4354  0204  0844               	movf	GPS_read_speed@m_char,w
  4355  0205  00B2               	movwf	??_GPS_read_speed
  4356  0206  0832               	movf	??_GPS_read_speed,w
  4357  0207  06BB               	xorwf	GPS_read_speed@checksum,f
  4358  0208                     l445:	
  4359                           
  4360                           ;main.c: 277: if (m_char == 0x0D)
  4361  0208  300D               	movlw	13
  4362  0209  0644               	xorwf	GPS_read_speed@m_char,w
  4363  020A  1903               	btfsc	3,2
  4364  020B  2A1E               	goto	l3392
  4365                           
  4366                           ;main.c: 279: else
  4367                           ;main.c: 280: {
  4368                           ;main.c: 281: buffer[i_buff++] = m_char;
  4369                           
  4370                           ;main.c: 278: break;
  4371  020C  0844               	movf	GPS_read_speed@m_char,w
  4372  020D  00B2               	movwf	??_GPS_read_speed
  4373  020E  0843               	movf	GPS_read_speed@i_buff,w
  4374  020F  3E3C               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  4375  0210  0086               	movwf	6
  4376  0211  0187               	clrf	7
  4377  0212  0832               	movf	??_GPS_read_speed,w
  4378  0213  0081               	movwf	1
  4379  0214  3001               	movlw	1
  4380  0215  00B2               	movwf	??_GPS_read_speed
  4381  0216  0832               	movf	??_GPS_read_speed,w
  4382  0217  07C3               	addwf	GPS_read_speed@i_buff,f
  4383                           
  4384                           ;main.c: 282: if (i_buff >= 6)
  4385  0218  3006               	movlw	6
  4386  0219  0243               	subwf	GPS_read_speed@i_buff,w
  4387  021A  1C03               	skipc
  4388  021B  29F3               	goto	l3366
  4389                           
  4390                           ;main.c: 283: return 0;
  4391  021C  3000               	movlw	0
  4392  021D  0008               	return
  4393  021E                     l3392:	
  4394                           
  4395                           ;main.c: 284: }
  4396                           ;main.c: 285: }
  4397                           ;main.c: 286: if ((buffer[1] != '*')||(i_buff != 4))
  4398  021E  302A               	movlw	42
  4399  021F  063D               	xorwf	GPS_read_speed@buffer+1,w
  4400  0220  1D03               	btfss	3,2
  4401  0221  2A26               	goto	l3396
  4402  0222  3004               	movlw	4
  4403  0223  0643               	xorwf	GPS_read_speed@i_buff,w
  4404  0224  1903               	btfsc	3,2
  4405  0225  2A28               	goto	l3400
  4406  0226                     l3396:	
  4407                           
  4408                           ;main.c: 287: return 0;
  4409  0226  3000               	movlw	0
  4410  0227  0008               	return
  4411  0228                     l3400:	
  4412                           
  4413                           ;main.c: 290: unsigned char checksum2 = 0;
  4414  0228  01BA               	clrf	GPS_read_speed@checksum2
  4415                           
  4416                           ;main.c: 291: if (buffer[2] > 0x39)
  4417  0229  303A               	movlw	58
  4418  022A  023E               	subwf	GPS_read_speed@buffer+2,w
  4419  022B  1C03               	skipc
  4420  022C  2A30               	goto	l3406
  4421                           
  4422                           ;main.c: 292: checksum2 = buffer[2] - 0x37;
  4423  022D  083E               	movf	GPS_read_speed@buffer+2,w
  4424  022E  3EC9               	addlw	201
  4425  022F  2A32               	goto	L2
  4426  0230                     l3406:	
  4427                           
  4428                           ;main.c: 293: else
  4429                           ;main.c: 294: checksum2 = buffer[2] - 0x30;
  4430  0230  083E               	movf	GPS_read_speed@buffer+2,w
  4431  0231  3ED0               	addlw	208
  4432  0232                     L2:	
  4433  0232  00B2               	movwf	??_GPS_read_speed
  4434  0233  0832               	movf	??_GPS_read_speed,w
  4435  0234  00BA               	movwf	GPS_read_speed@checksum2
  4436                           
  4437                           ;main.c: 295: checksum2 = checksum2 << 4;
  4438  0235  083A               	movf	GPS_read_speed@checksum2,w
  4439  0236  00B2               	movwf	??_GPS_read_speed
  4440  0237  3003               	movlw	3
  4441  0238                     u3535:	
  4442  0238  35B2               	lslf	??_GPS_read_speed,f
  4443  0239  3EFF               	addlw	-1
  4444  023A  1D03               	skipz
  4445  023B  2A38               	goto	u3535
  4446  023C  3532               	lslf	??_GPS_read_speed,w
  4447  023D  00B3               	movwf	??_GPS_read_speed+1
  4448  023E  0833               	movf	??_GPS_read_speed+1,w
  4449  023F  00BA               	movwf	GPS_read_speed@checksum2
  4450                           
  4451                           ;main.c: 296: if (buffer[3] > 0x39)
  4452  0240  303A               	movlw	58
  4453  0241  023F               	subwf	GPS_read_speed@buffer+3,w
  4454  0242  1C03               	skipc
  4455  0243  2A47               	goto	l3412
  4456                           
  4457                           ;main.c: 297: checksum2 += buffer[3] - 0x37;
  4458  0244  083F               	movf	GPS_read_speed@buffer+3,w
  4459  0245  3EC9               	addlw	201
  4460  0246  2A49               	goto	L3
  4461  0247                     l3412:	
  4462                           
  4463                           ;main.c: 298: else
  4464                           ;main.c: 299: checksum2 += buffer[3] - 0x30;
  4465  0247  083F               	movf	GPS_read_speed@buffer+3,w
  4466  0248  3ED0               	addlw	208
  4467  0249                     L3:	
  4468  0249  00B2               	movwf	??_GPS_read_speed
  4469  024A  0832               	movf	??_GPS_read_speed,w
  4470  024B  07BA               	addwf	GPS_read_speed@checksum2,f
  4471                           
  4472                           ;main.c: 300: if (checksum == checksum2)
  4473  024C  083B               	movf	GPS_read_speed@checksum,w
  4474  024D  063A               	xorwf	GPS_read_speed@checksum2,w
  4475  024E  1D03               	skipz
  4476  024F  2A62               	goto	l3424
  4477                           
  4478                           ;main.c: 301: {
  4479                           ;main.c: 302: speed = convert_to_fp(read_speed_int, read_speed_fra);
  4480  0250  0837               	movf	GPS_read_speed@read_speed_int+1,w
  4481  0251  00A1               	movwf	convert_to_fp@int_part+1
  4482  0252  0836               	movf	GPS_read_speed@read_speed_int,w
  4483  0253  00A0               	movwf	convert_to_fp@int_part
  4484  0254  0839               	movf	GPS_read_speed@read_speed_fra+1,w
  4485  0255  00A3               	movwf	convert_to_fp@fract_part+1
  4486  0256  0838               	movf	GPS_read_speed@read_speed_fra,w
  4487  0257  00A2               	movwf	convert_to_fp@fract_part
  4488  0258  2465               	fcall	_convert_to_fp
  4489  0259  0020               	movlb	0	; select bank0
  4490  025A  0820               	movf	?_convert_to_fp,w
  4491  025B  00D9               	movwf	_speed
  4492  025C  0821               	movf	?_convert_to_fp+1,w
  4493  025D  00DA               	movwf	_speed+1
  4494  025E  0822               	movf	?_convert_to_fp+2,w
  4495  025F  00DB               	movwf	_speed+2
  4496                           
  4497                           ;main.c: 303: return 1;
  4498  0260  3001               	movlw	1
  4499                           
  4500                           ;main.c: 304: }
  4501  0261  0008               	return
  4502  0262                     l3424:	
  4503                           
  4504                           ;main.c: 305: else
  4505                           ;main.c: 306: return 0;
  4506  0262  3000               	movlw	0
  4507  0263  0008               	return
  4508  0264                     __end_of_GPS_read_speed:	
  4509                           
  4510                           	psect	text14
  4511  0465                     __ptext14:	
  4512 ;; *************** function _convert_to_fp *****************
  4513 ;; Defined at:
  4514 ;;		line 11 in file "fixed_point.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  int_part        2    0[BANK0 ] unsigned short 
  4517 ;;  fract_part      2    2[BANK0 ] unsigned short 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  i_bit           1   12[BANK0 ] unsigned char 
  4520 ;;  res             3   15[BANK0 ] unsigned um
  4521 ;;  tmp_left        2   13[BANK0 ] unsigned short 
  4522 ;;  res_fract       2   10[BANK0 ] unsigned short 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  3    0[BANK0 ] unsigned um
  4525 ;; Registers used:
  4526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1
  4532 ;;      Params:         0       4       0
  4533 ;;      Locals:         0       8       0
  4534 ;;      Temps:          0       6       0
  4535 ;;      Totals:         0      18       0
  4536 ;;Total ram usage:       18 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    6
  4539 ;; This function calls:
  4540 ;;		Nothing
  4541 ;; This function is called by:
  4542 ;;		_GPS_read_speed
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _convert_to_fp
  4548  0465                     _convert_to_fp:	
  4549                           
  4550                           ;fixed_point.c: 13: t_fp res = 0;
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  4554  0465  3000               	movlw	0
  4555  0466  0020               	movlb	0	; select bank0
  4556  0467  00AF               	movwf	convert_to_fp@res
  4557  0468  3000               	movlw	0
  4558  0469  00B0               	movwf	convert_to_fp@res+1
  4559  046A  3000               	movlw	0
  4560  046B  00B1               	movwf	convert_to_fp@res+2
  4561                           
  4562                           ;fixed_point.c: 15: if (int_part > 16383)
  4563  046C  3040               	movlw	64
  4564  046D  0221               	subwf	convert_to_fp@int_part+1,w
  4565  046E  3000               	movlw	0
  4566  046F  1903               	skipnz
  4567  0470  0220               	subwf	convert_to_fp@int_part,w
  4568  0471  1C03               	skipc
  4569  0472  2C7A               	goto	l3028
  4570                           
  4571                           ;fixed_point.c: 16: return res;
  4572  0473  082F               	movf	convert_to_fp@res,w
  4573  0474  00A0               	movwf	?_convert_to_fp
  4574  0475  0830               	movf	convert_to_fp@res+1,w
  4575  0476  00A1               	movwf	?_convert_to_fp+1
  4576  0477  0831               	movf	convert_to_fp@res+2,w
  4577  0478  00A2               	movwf	?_convert_to_fp+2
  4578  0479  0008               	return
  4579  047A                     l3028:	
  4580                           
  4581                           ;fixed_point.c: 18: res = int_part;
  4582  047A  0820               	movf	convert_to_fp@int_part,w
  4583  047B  00AF               	movwf	convert_to_fp@res
  4584  047C  0821               	movf	convert_to_fp@int_part+1,w
  4585  047D  00B0               	movwf	convert_to_fp@res+1
  4586  047E  01B1               	clrf	convert_to_fp@res+2
  4587                           
  4588                           ;fixed_point.c: 19: res = res << 14;
  4589  047F  082F               	movf	convert_to_fp@res,w
  4590  0480  00A4               	movwf	??_convert_to_fp
  4591  0481  0830               	movf	convert_to_fp@res+1,w
  4592  0482  00A5               	movwf	??_convert_to_fp+1
  4593  0483  0831               	movf	convert_to_fp@res+2,w
  4594  0484  00A6               	movwf	??_convert_to_fp+2
  4595  0485  300E               	movlw	14
  4596  0486                     u2855:	
  4597  0486  35A4               	lslf	??_convert_to_fp,f
  4598  0487  0DA5               	rlf	??_convert_to_fp+1,f
  4599  0488  0DA6               	rlf	??_convert_to_fp+2,f
  4600  0489  0B89               	decfsz	9,f
  4601  048A  2C86               	goto	u2855
  4602  048B  0824               	movf	??_convert_to_fp,w
  4603  048C  00AF               	movwf	convert_to_fp@res
  4604  048D  0825               	movf	??_convert_to_fp+1,w
  4605  048E  00B0               	movwf	convert_to_fp@res+1
  4606  048F  0826               	movf	??_convert_to_fp+2,w
  4607  0490  00B1               	movwf	convert_to_fp@res+2
  4608                           
  4609                           ;fixed_point.c: 21: unsigned short tmp_left = fract_part;
  4610  0491  0823               	movf	convert_to_fp@fract_part+1,w
  4611  0492  00AE               	movwf	convert_to_fp@tmp_left+1
  4612  0493  0822               	movf	convert_to_fp@fract_part,w
  4613  0494  00AD               	movwf	convert_to_fp@tmp_left
  4614                           
  4615                           ;fixed_point.c: 22: unsigned short res_fract = 0;
  4616  0495  01AA               	clrf	convert_to_fp@res_fract
  4617  0496  01AB               	clrf	convert_to_fp@res_fract+1
  4618                           
  4619                           ;fixed_point.c: 23: const unsigned short one = 1;
  4620                           ;fixed_point.c: 24: for (unsigned char i_bit = 0; i_bit < 14; i_bit++)
  4621  0497  01AC               	clrf	convert_to_fp@i_bit
  4622  0498  300E               	movlw	14
  4623  0499  022C               	subwf	convert_to_fp@i_bit,w
  4624  049A  1803               	btfsc	3,0
  4625  049B  2CCE               	goto	l3052
  4626  049C                     l3042:	
  4627                           
  4628                           ;fixed_point.c: 25: {
  4629                           ;fixed_point.c: 26: tmp_left = tmp_left << 1;
  4630  049C  352D               	lslf	convert_to_fp@tmp_left,w
  4631  049D  00AD               	movwf	convert_to_fp@tmp_left
  4632  049E  0D2E               	rlf	convert_to_fp@tmp_left+1,w
  4633  049F  00AE               	movwf	convert_to_fp@tmp_left+1
  4634                           
  4635                           ;fixed_point.c: 27: if (tmp_left >= 10000)
  4636  04A0  3027               	movlw	39
  4637  04A1  022E               	subwf	convert_to_fp@tmp_left+1,w
  4638  04A2  3010               	movlw	16
  4639  04A3  1903               	skipnz
  4640  04A4  022D               	subwf	convert_to_fp@tmp_left,w
  4641  04A5  1C03               	skipc
  4642  04A6  2CC6               	goto	l3048
  4643                           
  4644                           ;fixed_point.c: 28: {
  4645                           ;fixed_point.c: 29: res_fract = res_fract | one<<(14-i_bit-1);
  4646  04A7  3062               	movlw	low (convert_to_fp@one| (0+32768))
  4647  04A8  0084               	movwf	4
  4648  04A9  3085               	movlw	high (convert_to_fp@one| (0+32768))
  4649  04AA  0085               	movwf	5
  4650  04AB  3F00               	moviw [0]fsr0
  4651  04AC  00A4               	movwf	??_convert_to_fp
  4652  04AD  3F01               	moviw [1]fsr0
  4653  04AE  00A5               	movwf	??_convert_to_fp+1
  4654  04AF  082C               	movf	convert_to_fp@i_bit,w
  4655  04B0  3E01               	addlw	1
  4656  04B1  3AFF               	xorlw	255
  4657  04B2  3E01               	addlw	1
  4658  04B3  3E0E               	addlw	14
  4659  04B4  0A89               	incf	9,f
  4660  04B5  2CB8               	goto	u2884
  4661  04B6                     u2885:	
  4662  04B6  35A4               	lslf	??_convert_to_fp,f
  4663  04B7  0DA5               	rlf	??_convert_to_fp+1,f
  4664  04B8                     u2884:	
  4665  04B8  0B89               	decfsz	9,f
  4666  04B9  2CB6               	goto	u2885
  4667  04BA  082A               	movf	convert_to_fp@res_fract,w
  4668  04BB  0424               	iorwf	??_convert_to_fp,w
  4669  04BC  00AA               	movwf	convert_to_fp@res_fract
  4670  04BD  082B               	movf	convert_to_fp@res_fract+1,w
  4671  04BE  0425               	iorwf	??_convert_to_fp+1,w
  4672  04BF  00AB               	movwf	convert_to_fp@res_fract+1
  4673                           
  4674                           ;fixed_point.c: 30: tmp_left = tmp_left - 10000;
  4675  04C0  082D               	movf	convert_to_fp@tmp_left,w
  4676  04C1  3EF0               	addlw	240
  4677  04C2  00AD               	movwf	convert_to_fp@tmp_left
  4678  04C3  30D8               	movlw	216
  4679  04C4  3D2E               	addwfc	convert_to_fp@tmp_left+1,w
  4680  04C5  00AE               	movwf	convert_to_fp@tmp_left+1
  4681  04C6                     l3048:	
  4682  04C6  3001               	movlw	1
  4683  04C7  00A4               	movwf	??_convert_to_fp
  4684  04C8  0824               	movf	??_convert_to_fp,w
  4685  04C9  07AC               	addwf	convert_to_fp@i_bit,f
  4686  04CA  300E               	movlw	14
  4687  04CB  022C               	subwf	convert_to_fp@i_bit,w
  4688  04CC  1C03               	skipc
  4689  04CD  2C9C               	goto	l3042
  4690  04CE                     l3052:	
  4691                           
  4692                           ;fixed_point.c: 31: }
  4693                           ;fixed_point.c: 32: }
  4694                           ;fixed_point.c: 34: res = res + res_fract;
  4695  04CE  082F               	movf	convert_to_fp@res,w
  4696  04CF  00A4               	movwf	??_convert_to_fp
  4697  04D0  0830               	movf	convert_to_fp@res+1,w
  4698  04D1  00A5               	movwf	??_convert_to_fp+1
  4699  04D2  0831               	movf	convert_to_fp@res+2,w
  4700  04D3  00A6               	movwf	??_convert_to_fp+2
  4701  04D4  082A               	movf	convert_to_fp@res_fract,w
  4702  04D5  00A7               	movwf	??_convert_to_fp+3
  4703  04D6  082B               	movf	convert_to_fp@res_fract+1,w
  4704  04D7  00A8               	movwf	??_convert_to_fp+4
  4705  04D8  01A9               	clrf	??_convert_to_fp+5
  4706  04D9  0827               	movf	??_convert_to_fp+3,w
  4707  04DA  07A4               	addwf	??_convert_to_fp,f
  4708  04DB  0828               	movf	??_convert_to_fp+4,w
  4709  04DC  3DA5               	addwfc	??_convert_to_fp+1,f
  4710  04DD  0829               	movf	??_convert_to_fp+5,w
  4711  04DE  3DA6               	addwfc	??_convert_to_fp+2,f
  4712  04DF  0824               	movf	??_convert_to_fp,w
  4713  04E0  00AF               	movwf	convert_to_fp@res
  4714  04E1  0825               	movf	??_convert_to_fp+1,w
  4715  04E2  00B0               	movwf	convert_to_fp@res+1
  4716  04E3  0826               	movf	??_convert_to_fp+2,w
  4717  04E4  00B1               	movwf	convert_to_fp@res+2
  4718                           
  4719                           ;fixed_point.c: 35: return res;
  4720  04E5  082F               	movf	convert_to_fp@res,w
  4721  04E6  00A0               	movwf	?_convert_to_fp
  4722  04E7  0830               	movf	convert_to_fp@res+1,w
  4723  04E8  00A1               	movwf	?_convert_to_fp+1
  4724  04E9  0831               	movf	convert_to_fp@res+2,w
  4725  04EA  00A2               	movwf	?_convert_to_fp+2
  4726  04EB  0008               	return
  4727  04EC                     __end_of_convert_to_fp:	
  4728                           
  4729                           	psect	text15
  4730  06C6                     __ptext15:	
  4731 ;; *************** function ___wmul *****************
  4732 ;; Defined at:
  4733 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4736 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  product         2    4[BANK0 ] unsigned int 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  2    0[BANK0 ] unsigned int 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMMON   BANK0   BANK1
  4748 ;;      Params:         0       4       0
  4749 ;;      Locals:         0       2       0
  4750 ;;      Temps:          0       0       0
  4751 ;;      Totals:         0       6       0
  4752 ;;Total ram usage:        6 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    6
  4755 ;; This function calls:
  4756 ;;		Nothing
  4757 ;; This function is called by:
  4758 ;;		_GPS_read_speed
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           
  4763                           ;psect for function ___wmul
  4764  06C6                     ___wmul:	
  4765                           
  4766                           ;incstack = 0
  4767                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4768  06C6  0020               	movlb	0	; select bank0
  4769  06C7  01A4               	clrf	___wmul@product
  4770  06C8  01A5               	clrf	___wmul@product+1
  4771  06C9                     l3058:	
  4772  06C9  1C20               	btfss	___wmul@multiplier,0
  4773  06CA  2ECF               	goto	l688
  4774  06CB  0822               	movf	___wmul@multiplicand,w
  4775  06CC  07A4               	addwf	___wmul@product,f
  4776  06CD  0823               	movf	___wmul@multiplicand+1,w
  4777  06CE  3DA5               	addwfc	___wmul@product+1,f
  4778  06CF                     l688:	
  4779  06CF  3001               	movlw	1
  4780  06D0                     u2915:	
  4781  06D0  35A2               	lslf	___wmul@multiplicand,f
  4782  06D1  0DA3               	rlf	___wmul@multiplicand+1,f
  4783  06D2  0B89               	decfsz	9,f
  4784  06D3  2ED0               	goto	u2915
  4785  06D4  3001               	movlw	1
  4786  06D5                     u2925:	
  4787  06D5  36A1               	lsrf	___wmul@multiplier+1,f
  4788  06D6  0CA0               	rrf	___wmul@multiplier,f
  4789  06D7  0B89               	decfsz	9,f
  4790  06D8  2ED5               	goto	u2925
  4791  06D9  0820               	movf	___wmul@multiplier,w
  4792  06DA  0421               	iorwf	___wmul@multiplier+1,w
  4793  06DB  1D03               	btfss	3,2
  4794  06DC  2EC9               	goto	l3058
  4795  06DD  0825               	movf	___wmul@product+1,w
  4796  06DE  00A1               	movwf	?___wmul+1
  4797  06DF  0824               	movf	___wmul@product,w
  4798  06E0  00A0               	movwf	?___wmul
  4799  06E1  0008               	return
  4800  06E2                     __end_of___wmul:	
  4801                           
  4802                           	psect	text16
  4803  0688                     __ptext16:	
  4804 ;; *************** function _EUSART_Read *****************
  4805 ;; Defined at:
  4806 ;;		line 112 in file "mcc_generated_files/eusart.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  readValue       1    1[BANK0 ] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      unsigned char 
  4813 ;; Registers used:
  4814 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1
  4820 ;;      Params:         0       0       0
  4821 ;;      Locals:         0       1       0
  4822 ;;      Temps:          0       1       0
  4823 ;;      Totals:         0       2       0
  4824 ;;Total ram usage:        2 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    6
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_GPS_read_speed
  4831 ;;		_getch
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _EUSART_Read
  4837  0688                     _EUSART_Read:	
  4838                           
  4839                           ;eusart.c: 114: uint8_t readValue = 0;
  4840                           
  4841                           ;incstack = 0
  4842                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4843  0688  0020               	movlb	0	; select bank0
  4844  0689  01A1               	clrf	EUSART_Read@readValue
  4845                           
  4846                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  4847  068A  0023               	movlb	3	; select bank3
  4848  068B  169D               	bsf	29,5	;volatile
  4849  068C                     l2954:	
  4850                           ;eusart.c: 120: {
  4851                           
  4852                           ;eusart.c: 119: while(0 == eusartRxCount)
  4853                           
  4854  068C  0873               	movf	_eusartRxCount,w	;volatile
  4855  068D  1903               	btfsc	3,2
  4856  068E  2E8C               	goto	l2954
  4857                           
  4858                           ;eusart.c: 121: }
  4859                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  4860  068F  0021               	movlb	1	; select bank1
  4861  0690  1291               	bcf	17,5	;volatile
  4862                           
  4863                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  4864  0691  0020               	movlb	0	; select bank0
  4865  0692  0867               	movf	_eusartRxTail,w
  4866  0693  3E49               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4867  0694  0086               	movwf	6
  4868  0695  0187               	clrf	7
  4869  0696  0801               	movf	1,w
  4870  0697  00A0               	movwf	??_EUSART_Read
  4871  0698  0820               	movf	??_EUSART_Read,w
  4872  0699  00A1               	movwf	EUSART_Read@readValue
  4873  069A  3001               	movlw	1
  4874  069B  00A0               	movwf	??_EUSART_Read
  4875  069C  0820               	movf	??_EUSART_Read,w
  4876  069D  07E7               	addwf	_eusartRxTail,f
  4877                           
  4878                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4879  069E  3008               	movlw	8
  4880  069F  0267               	subwf	_eusartRxTail,w
  4881  06A0  1803               	btfsc	3,0
  4882                           
  4883                           ;eusart.c: 127: {
  4884                           ;eusart.c: 128: eusartRxTail = 0;
  4885  06A1  01E7               	clrf	_eusartRxTail
  4886                           
  4887                           ;eusart.c: 129: }
  4888                           ;eusart.c: 130: eusartRxCount--;
  4889  06A2  3001               	movlw	1
  4890  06A3  02F3               	subwf	_eusartRxCount,f	;volatile
  4891                           
  4892                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  4893  06A4  0021               	movlb	1	; select bank1
  4894  06A5  1691               	bsf	17,5	;volatile
  4895                           
  4896                           ;eusart.c: 133: return readValue;
  4897  06A6  0020               	movlb	0	; select bank0
  4898  06A7  0821               	movf	EUSART_Read@readValue,w
  4899  06A8  0008               	return
  4900  06A9                     __end_of_EUSART_Read:	
  4901                           
  4902                           	psect	text17
  4903  05AA                     __ptext17:	
  4904 ;; *************** function _GPS_Initialize *****************
  4905 ;; Defined at:
  4906 ;;		line 72 in file "main.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  tmp             1   13[BANK0 ] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1
  4920 ;;      Params:         0       0       0
  4921 ;;      Locals:         0       1       0
  4922 ;;      Temps:          0       3       0
  4923 ;;      Totals:         0       4       0
  4924 ;;Total ram usage:        4 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    9
  4927 ;; This function calls:
  4928 ;;		_printf
  4929 ;; This function is called by:
  4930 ;;		_main
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function _GPS_Initialize
  4936  05AA                     _GPS_Initialize:	
  4937                           
  4938                           ;main.c: 74: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  4939                           
  4940                           ;incstack = 0
  4941                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4942  05AA  0020               	movlb	0	; select bank0
  4943  05AB  01AD               	clrf	GPS_Initialize@tmp
  4944  05AC  300A               	movlw	10
  4945  05AD  022D               	subwf	GPS_Initialize@tmp,w
  4946  05AE  1803               	btfsc	3,0
  4947  05AF  2DC5               	goto	l3100
  4948  05B0                     l3094:	
  4949  05B0  3005               	movlw	5
  4950  05B1  00AC               	movwf	??_GPS_Initialize+2
  4951  05B2  300F               	movlw	15
  4952  05B3  00AB               	movwf	??_GPS_Initialize+1
  4953  05B4  30F4               	movlw	244
  4954  05B5  00AA               	movwf	??_GPS_Initialize
  4955  05B6                     u3887:	
  4956  05B6  0BAA               	decfsz	??_GPS_Initialize,f
  4957  05B7  2DB6               	goto	u3887
  4958  05B8  0BAB               	decfsz	??_GPS_Initialize+1,f
  4959  05B9  2DB6               	goto	u3887
  4960  05BA  0BAC               	decfsz	??_GPS_Initialize+2,f
  4961  05BB  2DB6               	goto	u3887
  4962  05BC  3001               	movlw	1
  4963  05BD  0020               	movlb	0	; select bank0
  4964  05BE  00AA               	movwf	??_GPS_Initialize
  4965  05BF  082A               	movf	??_GPS_Initialize,w
  4966  05C0  07AD               	addwf	GPS_Initialize@tmp,f
  4967  05C1  300A               	movlw	10
  4968  05C2  022D               	subwf	GPS_Initialize@tmp,w
  4969  05C3  1C03               	skipc
  4970  05C4  2DB0               	goto	l3094
  4971  05C5                     l3100:	
  4972                           
  4973                           ;main.c: 76: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  4974  05C5  3064               	movlw	low (STR_1| (0+32768))
  4975  05C6  00A3               	movwf	printf@f
  4976  05C7  3085               	movlw	high (STR_1| (0+32768))
  4977  05C8  00A4               	movwf	printf@f+1
  4978  05C9  2719               	fcall	_printf
  4979                           
  4980                           ;main.c: 77: _delay((unsigned long)((100)*(32000000/4000.0)));
  4981  05CA  3005               	movlw	5
  4982  05CB  0020               	movlb	0	; select bank0
  4983  05CC  00AC               	movwf	??_GPS_Initialize+2
  4984  05CD  300F               	movlw	15
  4985  05CE  00AB               	movwf	??_GPS_Initialize+1
  4986  05CF  30F4               	movlw	244
  4987  05D0  00AA               	movwf	??_GPS_Initialize
  4988  05D1                     u3897:	
  4989  05D1  0BAA               	decfsz	??_GPS_Initialize,f
  4990  05D2  2DD1               	goto	u3897
  4991  05D3  0BAB               	decfsz	??_GPS_Initialize+1,f
  4992  05D4  2DD1               	goto	u3897
  4993  05D5  0BAC               	decfsz	??_GPS_Initialize+2,f
  4994  05D6  2DD1               	goto	u3897
  4995                           
  4996                           ;main.c: 78: printf("$PMTK220,100*2F\r\n");
  4997  05D7  3098               	movlw	low (STR_2| (0+32768))
  4998  05D8  0020               	movlb	0	; select bank0
  4999  05D9  00A3               	movwf	printf@f
  5000  05DA  3085               	movlw	high (STR_2| (0+32768))
  5001  05DB  00A4               	movwf	printf@f+1
  5002  05DC  2719               	fcall	_printf
  5003                           
  5004                           ;main.c: 79: _delay((unsigned long)((100)*(32000000/4000.0)));
  5005  05DD  3005               	movlw	5
  5006  05DE  0020               	movlb	0	; select bank0
  5007  05DF  00AC               	movwf	??_GPS_Initialize+2
  5008  05E0  300F               	movlw	15
  5009  05E1  00AB               	movwf	??_GPS_Initialize+1
  5010  05E2  30F4               	movlw	244
  5011  05E3  00AA               	movwf	??_GPS_Initialize
  5012  05E4                     u3907:	
  5013  05E4  0BAA               	decfsz	??_GPS_Initialize,f
  5014  05E5  2DE4               	goto	u3907
  5015  05E6  0BAB               	decfsz	??_GPS_Initialize+1,f
  5016  05E7  2DE4               	goto	u3907
  5017  05E8  0BAC               	decfsz	??_GPS_Initialize+2,f
  5018  05E9  2DE4               	goto	u3907
  5019  05EA  0008               	return
  5020  05EB                     __end_of_GPS_Initialize:	
  5021                           
  5022                           	psect	text18
  5023  0719                     __ptext18:	
  5024 ;; *************** function _printf *****************
  5025 ;; Defined at:
  5026 ;;		line 464 in file "D:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  5029 ;;		 -> STR_2(18), STR_1(52), 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  tmpval          4    0        struct .
  5032 ;;  cp              2    0        PTR const unsigned char 
  5033 ;;  len             2    0        unsigned int 
  5034 ;;  val             2    0        unsigned int 
  5035 ;;  c               1    9[BANK0 ] char 
  5036 ;;  ap              1    8[BANK0 ] PTR void [1]
  5037 ;;		 -> ?_printf(2), 
  5038 ;;  flag            1    0        unsigned char 
  5039 ;;  prec            1    0        char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  2    3[BANK0 ] int 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1
  5049 ;;      Params:         0       2       0
  5050 ;;      Locals:         0       2       0
  5051 ;;      Temps:          0       3       0
  5052 ;;      Totals:         0       7       0
  5053 ;;Total ram usage:        7 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    8
  5056 ;; This function calls:
  5057 ;;		_putch
  5058 ;; This function is called by:
  5059 ;;		_GPS_Initialize
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           
  5064                           ;psect for function _printf
  5065  0719                     _printf:	
  5066                           
  5067                           ;doprnt.c: 466: va_list ap;
  5068                           ;doprnt.c: 499: signed char c;
  5069                           ;doprnt.c: 506: signed char prec;
  5070                           ;doprnt.c: 508: unsigned char flag;
  5071                           ;doprnt.c: 523: union {
  5072                           ;doprnt.c: 524: unsigned long vd;
  5073                           ;doprnt.c: 525: double integ;
  5074                           ;doprnt.c: 526: } tmpval;
  5075                           ;doprnt.c: 528: unsigned int val;
  5076                           ;doprnt.c: 529: unsigned len;
  5077                           ;doprnt.c: 530: const char * cp;
  5078                           ;doprnt.c: 533: *ap = __va_start();
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5082  0719  3025               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5083  071A  0020               	movlb	0	; select bank0
  5084  071B  00A5               	movwf	??_printf
  5085  071C  0825               	movf	??_printf,w
  5086  071D  00A8               	movwf	printf@ap
  5087  071E                     l3020:	
  5088                           ;doprnt.c: 543: }
  5089                           ;doprnt.c: 1422: {
  5090                           
  5091                           ;doprnt.c: 542: continue;
  5092                           
  5093                           ;doprnt.c: 536: while(c = *f++) {
  5094                           
  5095  071E  0020               	movlb	0	; select bank0
  5096  071F  0824               	movf	printf@f+1,w
  5097  0720  00A6               	movwf	??_printf+1
  5098  0721  0823               	movf	printf@f,w
  5099  0722  00A5               	movwf	??_printf
  5100  0723  0AA3               	incf	printf@f,f
  5101  0724  1903               	skipnz
  5102  0725  0AA4               	incf	printf@f+1,f
  5103  0726  0825               	movf	??_printf,w
  5104  0727  0084               	movwf	4
  5105  0728  0826               	movf	??_printf+1,w
  5106  0729  0085               	movwf	5
  5107  072A  0800               	movf	0,w	;code access
  5108  072B  00A7               	movwf	??_printf+2
  5109  072C  0827               	movf	??_printf+2,w
  5110  072D  00A9               	movwf	printf@c
  5111  072E  0829               	movf	printf@c,w
  5112  072F  1903               	btfsc	3,2
  5113  0730  0008               	return
  5114                           
  5115                           ;doprnt.c: 540: {
  5116                           ;doprnt.c: 541: (putch(c) );
  5117  0731  0829               	movf	printf@c,w
  5118  0732  27D4               	fcall	_putch
  5119  0733  2F1E               	goto	l3020
  5120  0734                     __end_of_printf:	
  5121                           ;doprnt.c: 1469: }
  5122                           ;doprnt.c: 1533: }
  5123                           ;doprnt.c: 1540: return 0;
  5124                           ;	Return value of _printf is never used
  5125                           
  5126                           
  5127                           	psect	text19
  5128  07D4                     __ptext19:	
  5129 ;; *************** function _putch *****************
  5130 ;; Defined at:
  5131 ;;		line 164 in file "mcc_generated_files/eusart.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  txData          1    wreg     unsigned char 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  txData          1    2[BANK0 ] unsigned char 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMMON   BANK0   BANK1
  5145 ;;      Params:         0       0       0
  5146 ;;      Locals:         0       1       0
  5147 ;;      Temps:          0       0       0
  5148 ;;      Totals:         0       1       0
  5149 ;;Total ram usage:        1 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    7
  5152 ;; This function calls:
  5153 ;;		_EUSART_Write
  5154 ;; This function is called by:
  5155 ;;		_printf
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _putch
  5161  07D4                     _putch:	
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5165                           ;putch@txData stored from wreg
  5166  07D4  0020               	movlb	0	; select bank0
  5167  07D5  00A2               	movwf	putch@txData
  5168                           
  5169                           ;eusart.c: 166: EUSART_Write(txData);
  5170  07D6  0822               	movf	putch@txData,w
  5171  07D7  2643               	fcall	_EUSART_Write
  5172  07D8  0008               	return
  5173  07D9                     __end_of_putch:	
  5174                           
  5175                           	psect	text20
  5176  0643                     __ptext20:	
  5177 ;; *************** function _EUSART_Write *****************
  5178 ;; Defined at:
  5179 ;;		line 136 in file "mcc_generated_files/eusart.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  txData          1    wreg     unsigned char 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  txData          1    1[BANK0 ] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1
  5193 ;;      Params:         0       0       0
  5194 ;;      Locals:         0       1       0
  5195 ;;      Temps:          0       1       0
  5196 ;;      Totals:         0       2       0
  5197 ;;Total ram usage:        2 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    6
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_putch
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           
  5208                           ;psect for function _EUSART_Write
  5209  0643                     _EUSART_Write:	
  5210                           
  5211                           ;incstack = 0
  5212                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5213                           ;EUSART_Write@txData stored from wreg
  5214  0643  0020               	movlb	0	; select bank0
  5215  0644  00A1               	movwf	EUSART_Write@txData
  5216  0645                     l2904:	
  5217                           ;eusart.c: 139: {
  5218                           
  5219                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  5220                           
  5221  0645  0874               	movf	_eusartTxBufferRemaining,w	;volatile
  5222  0646  1903               	btfsc	3,2
  5223  0647  2E45               	goto	l2904
  5224                           
  5225                           ;eusart.c: 140: }
  5226                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  5227  0648  0021               	movlb	1	; select bank1
  5228  0649  1A11               	btfsc	17,4	;volatile
  5229  064A  2E50               	goto	l131
  5230                           
  5231                           ;eusart.c: 143: {
  5232                           ;eusart.c: 144: TXREG = txData;
  5233  064B  0020               	movlb	0	; select bank0
  5234  064C  0821               	movf	EUSART_Write@txData,w
  5235  064D  0023               	movlb	3	; select bank3
  5236  064E  009A               	movwf	26	;volatile
  5237                           
  5238                           ;eusart.c: 145: }
  5239  064F  2E64               	goto	l2918
  5240  0650                     l131:	
  5241                           
  5242                           ;eusart.c: 146: else
  5243                           ;eusart.c: 147: {
  5244                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  5245  0650  1211               	bcf	17,4	;volatile
  5246                           
  5247                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  5248  0651  0020               	movlb	0	; select bank0
  5249  0652  0821               	movf	EUSART_Write@txData,w
  5250  0653  00A0               	movwf	??_EUSART_Write
  5251  0654  0868               	movf	_eusartTxHead,w
  5252  0655  3E51               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5253  0656  0086               	movwf	6
  5254  0657  0187               	clrf	7
  5255  0658  0820               	movf	??_EUSART_Write,w
  5256  0659  0081               	movwf	1
  5257  065A  3001               	movlw	1
  5258  065B  00A0               	movwf	??_EUSART_Write
  5259  065C  0820               	movf	??_EUSART_Write,w
  5260  065D  07E8               	addwf	_eusartTxHead,f
  5261                           
  5262                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5263  065E  3008               	movlw	8
  5264  065F  0268               	subwf	_eusartTxHead,w
  5265  0660  1803               	btfsc	3,0
  5266                           
  5267                           ;eusart.c: 151: {
  5268                           ;eusart.c: 152: eusartTxHead = 0;
  5269  0661  01E8               	clrf	_eusartTxHead
  5270                           
  5271                           ;eusart.c: 153: }
  5272                           ;eusart.c: 154: eusartTxBufferRemaining--;
  5273  0662  3001               	movlw	1
  5274  0663  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
  5275  0664                     l2918:	
  5276                           
  5277                           ;eusart.c: 155: }
  5278                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  5279  0664  0021               	movlb	1	; select bank1
  5280  0665  1611               	bsf	17,4	;volatile
  5281  0666  0008               	return
  5282  0667                     __end_of_EUSART_Write:	
  5283                           
  5284                           	psect	text21
  5285  06E2                     __ptext21:	
  5286 ;; *************** function _EPWM_LoadDutyValue *****************
  5287 ;; Defined at:
  5288 ;;		line 87 in file "mcc_generated_files/epwm.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1
  5302 ;;      Params:         0       2       0
  5303 ;;      Locals:         0       0       0
  5304 ;;      Temps:          0       2       0
  5305 ;;      Totals:         0       4       0
  5306 ;;Total ram usage:        4 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    6
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _EPWM_LoadDutyValue
  5318  06E2                     _EPWM_LoadDutyValue:	
  5319                           
  5320                           ;epwm.c: 90: CCPR1L = ((dutyValue & 0x03FC)>>2);
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _EPWM_LoadDutyValue: [wreg+status,2+status,0]
  5324  06E2  0020               	movlb	0	; select bank0
  5325  06E3  0821               	movf	EPWM_LoadDutyValue@dutyValue+1,w
  5326  06E4  00A3               	movwf	??_EPWM_LoadDutyValue+1
  5327  06E5  0820               	movf	EPWM_LoadDutyValue@dutyValue,w
  5328  06E6  00A2               	movwf	??_EPWM_LoadDutyValue
  5329  06E7  36A3               	lsrf	??_EPWM_LoadDutyValue+1,f
  5330  06E8  0CA2               	rrf	??_EPWM_LoadDutyValue,f
  5331  06E9  36A3               	lsrf	??_EPWM_LoadDutyValue+1,f
  5332  06EA  0CA2               	rrf	??_EPWM_LoadDutyValue,f
  5333  06EB  0822               	movf	??_EPWM_LoadDutyValue,w
  5334  06EC  0025               	movlb	5	; select bank5
  5335  06ED  0091               	movwf	17	;volatile
  5336                           
  5337                           ;epwm.c: 93: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5338  06EE  0020               	movlb	0	; select bank0
  5339  06EF  0820               	movf	EPWM_LoadDutyValue@dutyValue,w
  5340  06F0  3903               	andlw	3
  5341  06F1  00A2               	movwf	??_EPWM_LoadDutyValue
  5342  06F2  3004               	movlw	4
  5343  06F3                     u2985:	
  5344  06F3  35A2               	lslf	??_EPWM_LoadDutyValue,f
  5345  06F4  0B89               	decfsz	9,f
  5346  06F5  2EF3               	goto	u2985
  5347  06F6  0025               	movlb	5	; select bank5
  5348  06F7  0813               	movf	19,w	;volatile
  5349  06F8  39CF               	andlw	207
  5350  06F9  0020               	movlb	0	; select bank0
  5351  06FA  0422               	iorwf	??_EPWM_LoadDutyValue,w
  5352  06FB  0025               	movlb	5	; select bank5
  5353  06FC  0093               	movwf	19	;volatile
  5354  06FD  0008               	return
  5355  06FE                     __end_of_EPWM_LoadDutyValue:	
  5356                           
  5357                           	psect	intentry
  5358  0004                     __pintentry:	
  5359 ;; *************** function _INTERRUPT_InterruptManager *****************
  5360 ;; Defined at:
  5361 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;		None
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;		None
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      void 
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1
  5375 ;;      Params:         0       0       0
  5376 ;;      Locals:         0       0       0
  5377 ;;      Temps:          1       0       0
  5378 ;;      Totals:         1       0       0
  5379 ;;Total ram usage:        1 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    5
  5382 ;; This function calls:
  5383 ;;		_EUSART_Receive_ISR
  5384 ;;		_EUSART_Transmit_ISR
  5385 ;;		_TMR0_ISR
  5386 ;; This function is called by:
  5387 ;;		Interrupt level 1
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391  0004                     _INTERRUPT_InterruptManager:	
  5392                           
  5393                           ;incstack = 0
  5394  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5395                           
  5396                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5397  0005  3180               	pagesel	$
  5398  0006  0020               	movlb	0	; select bank0
  5399  0007  087F               	movf	127,w
  5400  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  5401                           
  5402                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5403  0009  1A8B               	btfsc	11,5	;volatile
  5404  000A  1D0B               	btfss	11,2	;volatile
  5405  000B  280D               	goto	i1l2764
  5406                           
  5407                           ;interrupt_manager.c: 55: {
  5408                           ;interrupt_manager.c: 56: TMR0_ISR();
  5409  000C  2779               	fcall	_TMR0_ISR
  5410  000D                     i1l2764:	
  5411                           
  5412                           ;interrupt_manager.c: 57: }
  5413                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  5414  000D  1F0B               	btfss	11,6	;volatile
  5415  000E  2816               	goto	i1l2772
  5416  000F  0021               	movlb	1	; select bank1
  5417  0010  1E11               	btfss	17,4	;volatile
  5418  0011  2816               	goto	i1l2772
  5419  0012  0020               	movlb	0	; select bank0
  5420  0013  1E11               	btfss	17,4	;volatile
  5421  0014  2816               	goto	i1l2772
  5422                           
  5423                           ;interrupt_manager.c: 59: {
  5424                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  5425  0015  26A9               	fcall	_EUSART_Transmit_ISR
  5426  0016                     i1l2772:	
  5427                           
  5428                           ;interrupt_manager.c: 61: }
  5429                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  5430  0016  1F0B               	btfss	11,6	;volatile
  5431  0017  281F               	goto	i1l288
  5432  0018  0021               	movlb	1	; select bank1
  5433  0019  1E91               	btfss	17,5	;volatile
  5434  001A  281F               	goto	i1l288
  5435  001B  0020               	movlb	0	; select bank0
  5436  001C  1E91               	btfss	17,5	;volatile
  5437  001D  281F               	goto	i1l288
  5438                           
  5439                           ;interrupt_manager.c: 63: {
  5440                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  5441  001E  2734               	fcall	_EUSART_Receive_ISR
  5442  001F                     i1l288:	
  5443                           ;interrupt_manager.c: 66: else
  5444                           ;interrupt_manager.c: 67: {
  5445                           
  5446                           ;interrupt_manager.c: 65: }
  5447                           
  5448  001F  0879               	movf	??_INTERRUPT_InterruptManager,w
  5449  0020  0020               	movlb	0	; select bank0
  5450  0021  00FF               	movwf	127
  5451  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5452  0023  0009               	retfie
  5453  0024                     __end_of_INTERRUPT_InterruptManager:	
  5454                           
  5455                           	psect	text23
  5456  0779                     __ptext23:	
  5457 ;; *************** function _TMR0_ISR *****************
  5458 ;; Defined at:
  5459 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  1    wreg      void 
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0, pclath, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1
  5473 ;;      Params:         0       0       0
  5474 ;;      Locals:         0       0       0
  5475 ;;      Temps:          0       0       0
  5476 ;;      Totals:         0       0       0
  5477 ;;Total ram usage:        0 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    4
  5480 ;; This function calls:
  5481 ;;		_TMR0_CallBack
  5482 ;; This function is called by:
  5483 ;;		_INTERRUPT_InterruptManager
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           
  5488                           ;psect for function _TMR0_ISR
  5489  0779                     _TMR0_ISR:	
  5490                           
  5491                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  5492                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5496  0779  110B               	bcf	11,2	;volatile
  5497                           
  5498                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  5499  077A  0020               	movlb	0	; select bank0
  5500  077B  086B               	movf	_timer0ReloadVal,w	;volatile
  5501  077C  0095               	movwf	21	;volatile
  5502                           
  5503                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  5504  077D  3001               	movlw	1
  5505  077E  07DC               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  5506  077F  3000               	movlw	0
  5507  0780  3DDD               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  5508  0781  3000               	movlw	0
  5509  0782  025D               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  5510  0783  3002               	movlw	2
  5511  0784  1903               	skipnz
  5512  0785  025C               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  5513  0786  1C03               	skipc
  5514  0787  0008               	return
  5515                           
  5516                           ;tmr0.c: 119: {
  5517                           ;tmr0.c: 121: TMR0_CallBack();
  5518  0788  27A5               	fcall	_TMR0_CallBack
  5519                           
  5520                           ;tmr0.c: 124: CountCallBack = 0;
  5521  0789  0020               	movlb	0	; select bank0
  5522  078A  01DC               	clrf	TMR0_ISR@CountCallBack	;volatile
  5523  078B  01DD               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  5524  078C  0008               	return
  5525  078D                     __end_of_TMR0_ISR:	
  5526                           
  5527                           	psect	text24
  5528  07A5                     __ptext24:	
  5529 ;; *************** function _TMR0_CallBack *****************
  5530 ;; Defined at:
  5531 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1
  5545 ;;      Params:         0       0       0
  5546 ;;      Locals:         0       0       0
  5547 ;;      Temps:          0       0       0
  5548 ;;      Totals:         0       0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    3
  5552 ;; This function calls:
  5553 ;;		Absolute function
  5554 ;;		_TMR0_DefaultInterruptHandler
  5555 ;;		_my10msTimerISR
  5556 ;; This function is called by:
  5557 ;;		_TMR0_ISR
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _TMR0_CallBack
  5563  07A5                     _TMR0_CallBack:	
  5564                           
  5565                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  5569  07A5  0020               	movlb	0	; select bank0
  5570  07A6  085E               	movf	_TMR0_InterruptHandler,w
  5571  07A7  045F               	iorwf	_TMR0_InterruptHandler+1,w
  5572  07A8  1903               	btfsc	3,2
  5573  07A9  0008               	return
  5574                           
  5575                           ;tmr0.c: 135: {
  5576                           ;tmr0.c: 136: TMR0_InterruptHandler();
  5577  07AA  085F               	movf	_TMR0_InterruptHandler+1,w
  5578  07AB  008A               	movwf	10
  5579  07AC  085E               	movf	_TMR0_InterruptHandler,w
  5580  07AD  000A               	callw
  5581  07AE  3187               	pagesel	$
  5582  07AF  0008               	return
  5583  07B0                     __end_of_TMR0_CallBack:	
  5584                           
  5585                           	psect	text25
  5586  07E0                     __ptext25:	
  5587 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5588 ;; Defined at:
  5589 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		None
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1
  5603 ;;      Params:         0       0       0
  5604 ;;      Locals:         0       0       0
  5605 ;;      Temps:          0       0       0
  5606 ;;      Totals:         0       0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_TMR0_Initialize
  5613 ;;		_TMR0_CallBack
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _TMR0_DefaultInterruptHandler
  5619  07E0                     _TMR0_DefaultInterruptHandler:	
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5623  07E0  0008               	return
  5624  07E1                     __end_of_TMR0_DefaultInterruptHandler:	
  5625                           
  5626                           	psect	text26
  5627  07DC                     __ptext26:	
  5628 ;; *************** function _my10msTimerISR *****************
  5629 ;; Defined at:
  5630 ;;		line 406 in file "main.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;		None
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0, pclath, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1
  5644 ;;      Params:         0       0       0
  5645 ;;      Locals:         0       0       0
  5646 ;;      Temps:          0       0       0
  5647 ;;      Totals:         0       0       0
  5648 ;;Total ram usage:        0 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    2
  5651 ;; This function calls:
  5652 ;;		_LED_update_loop
  5653 ;;		_button_update_loop
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;;		_TMR0_CallBack
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           
  5661                           ;psect for function _my10msTimerISR
  5662  07DC                     _my10msTimerISR:	
  5663                           
  5664                           ;main.c: 408: LED_update_loop();
  5665                           
  5666                           ;incstack = 0
  5667                           ; Regs used in _my10msTimerISR: [wreg+status,2+status,0+pclath+cstack]
  5668  07DC  261B               	fcall	_LED_update_loop
  5669                           
  5670                           ;main.c: 409: button_update_loop();
  5671  07DD  24EC               	fcall	_button_update_loop
  5672  07DE  0008               	return
  5673  07DF                     __end_of_my10msTimerISR:	
  5674                           
  5675                           	psect	text27
  5676  04EC                     __ptext27:	
  5677 ;; *************** function _button_update_loop *****************
  5678 ;; Defined at:
  5679 ;;		line 78 in file "interact.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  current_stat    1    3[COMMON] unsigned char 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1
  5693 ;;      Params:         0       0       0
  5694 ;;      Locals:         1       0       0
  5695 ;;      Temps:          2       0       0
  5696 ;;      Totals:         3       0       0
  5697 ;;Total ram usage:        3 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    1
  5700 ;; This function calls:
  5701 ;;		_get_button_state
  5702 ;; This function is called by:
  5703 ;;		_my10msTimerISR
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           
  5708                           ;psect for function _button_update_loop
  5709  04EC                     _button_update_loop:	
  5710                           
  5711                           ;interact.c: 80: unsigned char current_state = get_button_state();
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _button_update_loop: [wreg+status,2+status,0+pclath+cstack]
  5715  04EC  2799               	fcall	_get_button_state
  5716  04ED  00F6               	movwf	??_button_update_loop
  5717  04EE  0876               	movf	??_button_update_loop,w
  5718  04EF  00F8               	movwf	button_update_loop@current_state
  5719                           
  5720                           ;interact.c: 81: if (!b_push_confirmed)
  5721  04F0  0020               	movlb	0	; select bank0
  5722  04F1  0864               	movf	_b_push_confirmed,w	;volatile
  5723  04F2  1D03               	btfss	3,2
  5724  04F3  2D19               	goto	i1l2150
  5725                           
  5726                           ;interact.c: 82: {
  5727                           ;interact.c: 84: if (current_state != b_last_state)
  5728  04F4  0878               	movf	button_update_loop@current_state,w
  5729  04F5  00F6               	movwf	??_button_update_loop
  5730  04F6  01F7               	clrf	??_button_update_loop+1
  5731  04F7  0871               	movf	_b_last_state+1,w	;volatile
  5732  04F8  0677               	xorwf	??_button_update_loop+1,w
  5733  04F9  1D03               	skipz
  5734  04FA  2CFD               	goto	u153_25
  5735  04FB  0870               	movf	_b_last_state,w	;volatile
  5736  04FC  0676               	xorwf	??_button_update_loop,w
  5737  04FD                     u153_25:	
  5738  04FD  1903               	skipnz
  5739  04FE  2D08               	goto	i1l2142
  5740                           
  5741                           ;interact.c: 85: {
  5742                           ;interact.c: 86: b_count_pressed = 0;
  5743  04FF  01F2               	clrf	_b_count_pressed	;volatile
  5744                           
  5745                           ;interact.c: 87: b_last_state = current_state;
  5746  0500  0878               	movf	button_update_loop@current_state,w
  5747  0501  00F6               	movwf	??_button_update_loop
  5748  0502  01F7               	clrf	??_button_update_loop+1
  5749  0503  0876               	movf	??_button_update_loop,w
  5750  0504  00F0               	movwf	_b_last_state	;volatile
  5751  0505  0877               	movf	??_button_update_loop+1,w
  5752  0506  00F1               	movwf	_b_last_state+1	;volatile
  5753                           
  5754                           ;interact.c: 88: }
  5755  0507  0008               	return
  5756  0508                     i1l2142:	
  5757                           
  5758                           ;interact.c: 89: else if (b_last_state == 1)
  5759  0508  0370               	decf	_b_last_state,w	;volatile
  5760  0509  0471               	iorwf	_b_last_state+1,w	;volatile
  5761  050A  1D03               	btfss	3,2
  5762  050B  0008               	return
  5763                           
  5764                           ;interact.c: 90: {
  5765                           ;interact.c: 91: b_count_pressed++;
  5766  050C  3001               	movlw	1
  5767  050D  00F6               	movwf	??_button_update_loop
  5768  050E  0876               	movf	??_button_update_loop,w
  5769  050F  07F2               	addwf	_b_count_pressed,f	;volatile
  5770                           
  5771                           ;interact.c: 92: if (b_count_pressed > 5)
  5772  0510  3006               	movlw	6
  5773  0511  0272               	subwf	_b_count_pressed,w	;volatile
  5774  0512  1C03               	skipc
  5775  0513  0008               	return
  5776                           
  5777                           ;interact.c: 93: b_push_confirmed = 1;
  5778  0514  3001               	movlw	1
  5779  0515  00F6               	movwf	??_button_update_loop
  5780  0516  0876               	movf	??_button_update_loop,w
  5781  0517  00E4               	movwf	_b_push_confirmed	;volatile
  5782                           
  5783                           ;interact.c: 94: }
  5784                           ;interact.c: 95: }
  5785  0518  0008               	return
  5786  0519                     i1l2150:	
  5787                           
  5788                           ;interact.c: 96: else
  5789                           ;interact.c: 97: {
  5790                           ;interact.c: 98: if (current_state != b_last_state)
  5791  0519  0878               	movf	button_update_loop@current_state,w
  5792  051A  00F6               	movwf	??_button_update_loop
  5793  051B  01F7               	clrf	??_button_update_loop+1
  5794  051C  0871               	movf	_b_last_state+1,w	;volatile
  5795  051D  0677               	xorwf	??_button_update_loop+1,w
  5796  051E  1D03               	skipz
  5797  051F  2D22               	goto	u156_25
  5798  0520  0870               	movf	_b_last_state,w	;volatile
  5799  0521  0676               	xorwf	??_button_update_loop,w
  5800  0522                     u156_25:	
  5801  0522  1903               	skipnz
  5802  0523  2D31               	goto	i1l2158
  5803                           
  5804                           ;interact.c: 99: {
  5805                           ;interact.c: 100: b_count_released = 0;
  5806  0524  01E2               	clrf	_b_count_released	;volatile
  5807                           
  5808                           ;interact.c: 101: b_last_state = current_state;
  5809  0525  0878               	movf	button_update_loop@current_state,w
  5810  0526  00F6               	movwf	??_button_update_loop
  5811  0527  01F7               	clrf	??_button_update_loop+1
  5812  0528  0876               	movf	??_button_update_loop,w
  5813  0529  00F0               	movwf	_b_last_state	;volatile
  5814  052A  0877               	movf	??_button_update_loop+1,w
  5815  052B  00F1               	movwf	_b_last_state+1	;volatile
  5816                           
  5817                           ;interact.c: 102: b_has_once_been_released = 1;
  5818  052C  3001               	movlw	1
  5819  052D  00F6               	movwf	??_button_update_loop
  5820  052E  0876               	movf	??_button_update_loop,w
  5821  052F  00E3               	movwf	_b_has_once_been_released	;volatile
  5822                           
  5823                           ;interact.c: 103: }
  5824  0530  0008               	return
  5825  0531                     i1l2158:	
  5826                           
  5827                           ;interact.c: 104: else if ((b_last_state == 1)&&(!b_has_once_been_released))
  5828  0531  0370               	decf	_b_last_state,w	;volatile
  5829  0532  0471               	iorwf	_b_last_state+1,w	;volatile
  5830  0533  1D03               	btfss	3,2
  5831  0534  2D45               	goto	i1l2168
  5832  0535  0863               	movf	_b_has_once_been_released,w	;volatile
  5833  0536  1D03               	btfss	3,2
  5834  0537  2D45               	goto	i1l2168
  5835                           
  5836                           ;interact.c: 105: {
  5837                           ;interact.c: 106: b_count_pressed++;
  5838  0538  3001               	movlw	1
  5839  0539  00F6               	movwf	??_button_update_loop
  5840  053A  0876               	movf	??_button_update_loop,w
  5841  053B  07F2               	addwf	_b_count_pressed,f	;volatile
  5842                           
  5843                           ;interact.c: 107: if (b_count_pressed >= 100)
  5844  053C  3064               	movlw	100
  5845  053D  0272               	subwf	_b_count_pressed,w	;volatile
  5846  053E  1C03               	skipc
  5847  053F  0008               	return
  5848                           
  5849                           ;interact.c: 108: b_confirmed_state = long_push;
  5850  0540  3002               	movlw	2
  5851  0541  00F6               	movwf	??_button_update_loop
  5852  0542  0876               	movf	??_button_update_loop,w
  5853  0543  00E1               	movwf	_b_confirmed_state	;volatile
  5854                           
  5855                           ;interact.c: 109: }
  5856  0544  0008               	return
  5857  0545                     i1l2168:	
  5858                           
  5859                           ;interact.c: 110: else if (b_last_state == 0)
  5860  0545  0870               	movf	_b_last_state,w	;volatile
  5861  0546  0471               	iorwf	_b_last_state+1,w	;volatile
  5862  0547  1D03               	btfss	3,2
  5863  0548  0008               	return
  5864                           
  5865                           ;interact.c: 111: {
  5866                           ;interact.c: 112: b_count_released++;
  5867  0549  3001               	movlw	1
  5868  054A  00F6               	movwf	??_button_update_loop
  5869  054B  0876               	movf	??_button_update_loop,w
  5870  054C  07E2               	addwf	_b_count_released,f	;volatile
  5871                           
  5872                           ;interact.c: 113: if (b_count_released > 10)
  5873  054D  300B               	movlw	11
  5874  054E  0262               	subwf	_b_count_released,w	;volatile
  5875  054F  1C03               	skipc
  5876  0550  0008               	return
  5877                           
  5878                           ;interact.c: 114: if (b_count_pressed >= 75)
  5879  0551  304B               	movlw	75
  5880  0552  0272               	subwf	_b_count_pressed,w	;volatile
  5881  0553  1C03               	skipc
  5882  0554  2D5A               	goto	i1l2178
  5883                           
  5884                           ;interact.c: 115: b_confirmed_state = long_push;
  5885  0555  3002               	movlw	2
  5886  0556  00F6               	movwf	??_button_update_loop
  5887  0557  0876               	movf	??_button_update_loop,w
  5888  0558  00E1               	movwf	_b_confirmed_state	;volatile
  5889  0559  0008               	return
  5890  055A                     i1l2178:	
  5891                           
  5892                           ;interact.c: 116: else
  5893                           ;interact.c: 117: b_confirmed_state = short_push;
  5894  055A  3001               	movlw	1
  5895  055B  00F6               	movwf	??_button_update_loop
  5896  055C  0876               	movf	??_button_update_loop,w
  5897  055D  00E1               	movwf	_b_confirmed_state	;volatile
  5898  055E  0008               	return
  5899  055F                     __end_of_button_update_loop:	
  5900                           
  5901                           	psect	text28
  5902  0799                     __ptext28:	
  5903 ;; *************** function _get_button_state *****************
  5904 ;; Defined at:
  5905 ;;		line 58 in file "interact.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;  state           1    0[COMMON] unsigned char 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      unsigned char 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMMON   BANK0   BANK1
  5919 ;;      Params:         0       0       0
  5920 ;;      Locals:         1       0       0
  5921 ;;      Temps:          0       0       0
  5922 ;;      Totals:         1       0       0
  5923 ;;Total ram usage:        1 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_button_update_loop
  5929 ;;		_button_init
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function _get_button_state
  5935  0799                     _get_button_state:	
  5936                           
  5937                           ;interact.c: 61: unsigned char state = PORTAbits.RA4;
  5938                           
  5939                           ;incstack = 0
  5940                           ; Regs used in _get_button_state: [wreg+status,2+status,0]
  5941  0799  3000               	movlw	0
  5942  079A  0020               	movlb	0	; select bank0
  5943  079B  1A0C               	btfsc	12,4	;volatile
  5944  079C  3001               	movlw	1
  5945  079D  00F5               	movwf	get_button_state@state
  5946                           
  5947                           ;interact.c: 62: if (state == 1)
  5948  079E  0375               	decf	get_button_state@state,w
  5949  079F  1D03               	btfss	3,2
  5950  07A0  2FA3               	goto	i1l2084
  5951                           
  5952                           ;interact.c: 63: return 0;
  5953  07A1  3000               	movlw	0
  5954  07A2  0008               	return
  5955  07A3                     i1l2084:	
  5956                           
  5957                           ;interact.c: 64: else return 1;
  5958  07A3  3001               	movlw	1
  5959  07A4  0008               	return
  5960  07A5                     __end_of_get_button_state:	
  5961                           
  5962                           	psect	text29
  5963  061B                     __ptext29:	
  5964 ;; *************** function _LED_update_loop *****************
  5965 ;; Defined at:
  5966 ;;		line 30 in file "interact.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      void 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1
  5980 ;;      Params:         0       0       0
  5981 ;;      Locals:         0       0       0
  5982 ;;      Temps:          1       0       0
  5983 ;;      Totals:         1       0       0
  5984 ;;Total ram usage:        1 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_my10msTimerISR
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           
  5994                           ;psect for function _LED_update_loop
  5995  061B                     _LED_update_loop:	
  5996                           
  5997                           ;interact.c: 32: if (LED_state == manual_mode)
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _LED_update_loop: [wreg+status,2+status,0]
  6001  061B  3004               	movlw	4
  6002  061C  0020               	movlb	0	; select bank0
  6003  061D  066C               	xorwf	_LED_state,w
  6004  061E  1903               	btfsc	3,2
  6005  061F  0008               	return
  6006                           
  6007                           ;interact.c: 34: else if (LED_state == slow_blinking)
  6008                           
  6009                           ;interact.c: 33: return;
  6010  0620  3002               	movlw	2
  6011  0621  066C               	xorwf	_LED_state,w
  6012  0622  1D03               	btfss	3,2
  6013  0623  2E31               	goto	i1l2122
  6014                           
  6015                           ;interact.c: 35: {
  6016                           ;interact.c: 36: LED_counter++;
  6017  0624  3001               	movlw	1
  6018  0625  00F5               	movwf	??_LED_update_loop
  6019  0626  0875               	movf	??_LED_update_loop,w
  6020  0627  07E0               	addwf	_LED_counter,f	;volatile
  6021                           
  6022                           ;interact.c: 37: if (LED_counter >= 85)
  6023  0628  3055               	movlw	85
  6024  0629  0260               	subwf	_LED_counter,w	;volatile
  6025  062A  1C03               	skipc
  6026  062B  0008               	return
  6027                           
  6028                           ;interact.c: 38: {
  6029                           ;interact.c: 39: LED_counter = 0;
  6030  062C  01E0               	clrf	_LED_counter	;volatile
  6031                           
  6032                           ;interact.c: 40: do { LATA5 = ~LATA5; } while(0);
  6033  062D  3020               	movlw	32
  6034  062E  0022               	movlb	2	; select bank2
  6035  062F  068C               	xorwf	12,f
  6036                           
  6037                           ;interact.c: 41: }
  6038                           ;interact.c: 42: }
  6039  0630  0008               	return
  6040  0631                     i1l2122:	
  6041                           
  6042                           ;interact.c: 43: else if (LED_state == fast_blinking)
  6043  0631  3003               	movlw	3
  6044  0632  0020               	movlb	0	; select bank0
  6045  0633  066C               	xorwf	_LED_state,w
  6046  0634  1D03               	btfss	3,2
  6047  0635  0008               	return
  6048                           
  6049                           ;interact.c: 44: {
  6050                           ;interact.c: 45: LED_counter++;
  6051  0636  3001               	movlw	1
  6052  0637  00F5               	movwf	??_LED_update_loop
  6053  0638  0875               	movf	??_LED_update_loop,w
  6054  0639  07E0               	addwf	_LED_counter,f	;volatile
  6055                           
  6056                           ;interact.c: 46: if (LED_counter >= 20)
  6057  063A  3014               	movlw	20
  6058  063B  0260               	subwf	_LED_counter,w	;volatile
  6059  063C  1C03               	skipc
  6060  063D  0008               	return
  6061                           
  6062                           ;interact.c: 47: {
  6063                           ;interact.c: 48: LED_counter = 0;
  6064  063E  01E0               	clrf	_LED_counter	;volatile
  6065                           
  6066                           ;interact.c: 49: do { LATA5 = ~LATA5; } while(0);
  6067  063F  3020               	movlw	32
  6068  0640  0022               	movlb	2	; select bank2
  6069  0641  068C               	xorwf	12,f
  6070  0642  0008               	return
  6071  0643                     __end_of_LED_update_loop:	
  6072                           
  6073                           	psect	text30
  6074  06A9                     __ptext30:	
  6075 ;; *************** function _EUSART_Transmit_ISR *****************
  6076 ;; Defined at:
  6077 ;;		line 169 in file "mcc_generated_files/eusart.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1
  6091 ;;      Params:         0       0       0
  6092 ;;      Locals:         0       0       0
  6093 ;;      Temps:          1       0       0
  6094 ;;      Totals:         1       0       0
  6095 ;;Total ram usage:        1 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_INTERRUPT_InterruptManager
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           
  6105                           ;psect for function _EUSART_Transmit_ISR
  6106  06A9                     _EUSART_Transmit_ISR:	
  6107                           
  6108                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  6109                           
  6110                           ;incstack = 0
  6111                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6112  06A9  3008               	movlw	8
  6113  06AA  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
  6114  06AB  1803               	skipnc
  6115  06AC  2EC3               	goto	i1l143
  6116                           
  6117                           ;eusart.c: 174: {
  6118                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  6119  06AD  0020               	movlb	0	; select bank0
  6120  06AE  0869               	movf	_eusartTxTail,w
  6121  06AF  3E51               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6122  06B0  0086               	movwf	6
  6123  06B1  0187               	clrf	7
  6124  06B2  0801               	movf	1,w
  6125  06B3  0023               	movlb	3	; select bank3
  6126  06B4  009A               	movwf	26	;volatile
  6127  06B5  3001               	movlw	1
  6128  06B6  00F5               	movwf	??_EUSART_Transmit_ISR
  6129  06B7  0875               	movf	??_EUSART_Transmit_ISR,w
  6130  06B8  0020               	movlb	0	; select bank0
  6131  06B9  07E9               	addwf	_eusartTxTail,f
  6132                           
  6133                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6134  06BA  3008               	movlw	8
  6135  06BB  0269               	subwf	_eusartTxTail,w
  6136  06BC  1803               	btfsc	3,0
  6137                           
  6138                           ;eusart.c: 177: {
  6139                           ;eusart.c: 178: eusartTxTail = 0;
  6140  06BD  01E9               	clrf	_eusartTxTail
  6141                           
  6142                           ;eusart.c: 179: }
  6143                           ;eusart.c: 180: eusartTxBufferRemaining++;
  6144  06BE  3001               	movlw	1
  6145  06BF  00F5               	movwf	??_EUSART_Transmit_ISR
  6146  06C0  0875               	movf	??_EUSART_Transmit_ISR,w
  6147  06C1  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
  6148                           
  6149                           ;eusart.c: 181: }
  6150  06C2  0008               	return
  6151  06C3                     i1l143:	
  6152                           
  6153                           ;eusart.c: 182: else
  6154                           ;eusart.c: 183: {
  6155                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  6156  06C3  0021               	movlb	1	; select bank1
  6157  06C4  1211               	bcf	17,4	;volatile
  6158  06C5  0008               	return
  6159  06C6                     __end_of_EUSART_Transmit_ISR:	
  6160                           
  6161                           	psect	text31
  6162  0734                     __ptext31:	
  6163 ;; *************** function _EUSART_Receive_ISR *****************
  6164 ;; Defined at:
  6165 ;;		line 188 in file "mcc_generated_files/eusart.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;		None
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1
  6179 ;;      Params:         0       0       0
  6180 ;;      Locals:         0       0       0
  6181 ;;      Temps:          1       0       0
  6182 ;;      Totals:         1       0       0
  6183 ;;Total ram usage:        1 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_INTERRUPT_InterruptManager
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function _EUSART_Receive_ISR
  6194  0734                     _EUSART_Receive_ISR:	
  6195                           
  6196                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  6197                           
  6198                           ;incstack = 0
  6199                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6200  0734  0023               	movlb	3	; select bank3
  6201  0735  1C9D               	btfss	29,1	;volatile
  6202  0736  2F39               	goto	i1l2366
  6203                           
  6204                           ;eusart.c: 192: {
  6205                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  6206  0737  139D               	bcf	29,7	;volatile
  6207                           
  6208                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  6209  0738  179D               	bsf	29,7	;volatile
  6210  0739                     i1l2366:	
  6211                           
  6212                           ;eusart.c: 197: }
  6213                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  6214  0739  0819               	movf	25,w	;volatile
  6215  073A  00F5               	movwf	??_EUSART_Receive_ISR
  6216  073B  0020               	movlb	0	; select bank0
  6217  073C  0866               	movf	_eusartRxHead,w
  6218  073D  3E49               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6219  073E  0086               	movwf	6
  6220  073F  0187               	clrf	7
  6221  0740  0875               	movf	??_EUSART_Receive_ISR,w
  6222  0741  0081               	movwf	1
  6223  0742  3001               	movlw	1
  6224  0743  00F5               	movwf	??_EUSART_Receive_ISR
  6225  0744  0875               	movf	??_EUSART_Receive_ISR,w
  6226  0745  07E6               	addwf	_eusartRxHead,f
  6227                           
  6228                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  6229  0746  3008               	movlw	8
  6230  0747  0266               	subwf	_eusartRxHead,w
  6231  0748  1803               	btfsc	3,0
  6232                           
  6233                           ;eusart.c: 202: {
  6234                           ;eusart.c: 203: eusartRxHead = 0;
  6235  0749  01E6               	clrf	_eusartRxHead
  6236                           
  6237                           ;eusart.c: 204: }
  6238                           ;eusart.c: 205: eusartRxCount++;
  6239  074A  3001               	movlw	1
  6240  074B  00F5               	movwf	??_EUSART_Receive_ISR
  6241  074C  0875               	movf	??_EUSART_Receive_ISR,w
  6242  074D  07F3               	addwf	_eusartRxCount,f	;volatile
  6243  074E  0008               	return
  6244  074F                     __end_of_EUSART_Receive_ISR:	
  6245  007E                     btemp	set	126	;btemp
  6246  007E                     int$flags	set	126
  6247  007E                     wtemp	set	126
  6248  007E                     wtemp0	set	126
  6249  0080                     wtemp1	set	128
  6250  0082                     wtemp2	set	130
  6251  0084                     wtemp3	set	132
  6252  0086                     wtemp4	set	134
  6253  0088                     wtemp5	set	136
  6254  007F                     wtemp6	set	127
  6255  007E                     ttemp	set	126
  6256  007E                     ttemp0	set	126
  6257  0081                     ttemp1	set	129
  6258  0084                     ttemp2	set	132
  6259  0087                     ttemp3	set	135
  6260  007F                     ttemp4	set	127
  6261  007E                     ltemp	set	126
  6262  007E                     ltemp0	set	126
  6263  0082                     ltemp1	set	130
  6264  0086                     ltemp2	set	134
  6265  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    5
    Data        1
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     41      77
    BANK1            32      7       7

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> my10msTimerISR(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> my10msTimerISR(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _my10msTimerISR->_button_update_loop
    _button_update_loop->_get_button_state

Critical Paths under _main in BANK0

    _main->_multiply_fp
    _multiply_fp->___lmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _GPS_read_speed->_convert_to_fp
    _GPS_Initialize->_printf
    _printf->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    7675
                                             38 BANK0      3     3      0
                                              0 BANK1      7     7      0
                 _EPWM_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _TMR2_StartTimer
                        _multiply_fp
 ---------------------------------------------------------------------------------
 (1) _multiply_fp                                         26    20      6    1265
                                             12 BANK0     26    20      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     185
                    _EPWM_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     185
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     185
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     155
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      19    19      0    4425
                                             18 BANK0     19    19      0
                        _EUSART_Read
                             ___wmul
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (2) _convert_to_fp                                       18    14      4     652
                                              0 BANK0     18    14      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     598
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                             10 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_LoadDutyValue                                   4     2      2     601
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     112
                                              4 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     112
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     112
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                     _my10msTimerISR *
 ---------------------------------------------------------------------------------
 (8) _my10msTimerISR                                       0     0      0     112
                    _LED_update_loop
                 _button_update_loop
 ---------------------------------------------------------------------------------
 (9) _button_update_loop                                   3     3      0     112
                                              1 COMMON     3     3      0
                   _get_button_state
 ---------------------------------------------------------------------------------
 (10) _get_button_state                                    1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _LED_update_loop                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
     ___wmul
     _convert_to_fp
   _LED_set_state
   _SYSTEM_Initialize
     _EPWM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_StartTimer
   _TMR0_SetInterruptHandler
   _TMR2_StartTimer
   _multiply_fp
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _my10msTimerISR *
         _LED_update_loop
         _button_update_loop
           _get_button_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      7       7       8       21.9%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 19 00:10:40 2016

                             __CFG_CP$OFF 0000                       ___wmul@multiplicand 0022  
                         _timer0ReloadVal 006B                                       l131 0650  
                  __end_of_my10msTimerISR 07DF                                       l264 07BE  
                                     l532 0683                                       l445 0208  
                                     l481 031D                                       l688 06CF  
                                     _PR2 001B                              __CFG_CPD$OFF 0000  
                         _TMR2_Initialize 07B0                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            ?_EUSART_Read 0075                              __CFG_LVP$OFF 0000  
                                    l3020 071E                                      l3100 05C5  
                                    l3112 0039                                      l3042 049C  
                                    l3114 0046                                      l3052 04CE  
                                    l3028 047A                                      l3300 0152  
                                    l3204 00CA                                      l3310 0167  
                                    l3150 007E                                      l3048 04C6  
                                    l3400 0228                                      l3320 0179  
                                    l3152 007F                                      l3136 0068  
                                    l3072 05F4                                      l3058 06C9  
                                    l3330 01B8                                      l3314 0177  
                                    l3234 00F4                                      l3226 00EC  
                                    l3162 008F                                      l3146 007C  
                                    l3412 0247                                      l3324 0198  
                                    l3236 00F5                                      l3076 05FE  
                                    l3094 05B0                                      l3406 0230  
                                    l3334 01C7                                      l3326 01B3  
                                    l3246 0105                                      l3502 02C5  
                                    l3424 0262                                      l3328 0159  
                                    l3192 00B9                                      l3184 00B1  
                                    l3432 0673                                      l3520 02F9  
                                    l3194 00BA                                      l3434 067A  
                                    l3530 0319                                      l3364 01F1  
                                    l3356 01E9                                      l3276 012F  
                                    l3268 0127                                      l3374 0201  
                                    l3366 01F3                                      l3278 0130  
                                    l3534 0326                                      l3526 0310  
                                    l3470 0277                                      l2904 0645  
                                    l3392 021E                                      l3560 036B  
                                    l3552 034F                                      l3480 0296  
                                    l3546 0338                                      l3490 02C2  
                                    l3396 0226                                      l3556 035E  
                                    l3476 028E                                      l2918 0664  
                                    l3486 02B6                                      l2954 068C  
                                    STR_1 0564                                      STR_2 0598  
                                    _LATA 010C                                      _LATC 010E  
                                    u3605 03B7                                      u3535 0238  
                                    u3615 03CA                                      u3625 03E1  
                                    u2915 06D0                                      u3635 03F6  
                                    u2925 06D5                                      u3645 041A  
                                    u2855 0486                                      u3655 0450  
                                    u3807 027E                                      u3817 02BD  
                                    u3907 05E4                                      u2955 05FF  
                                    u3827 02CC                                      u2884 04B8  
                                    u2885 04B6                                      u2965 0606  
                                    u3837 02E8                                      u3847 0300  
                                    u2985 06F3                                      u3857 033F  
                                    u3867 0359                                      u3877 0384  
                                    u3887 05B6                                      u3897 05D1  
                                    _PLLR 04D6                                      _TMR0 0015  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                    __end_of_GPS_read_speed 0264  
                             main@tmp_601 00A2                               main@tmp_603 00A3  
                             main@tmp_604 00A4                                      _main 0264  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0024  
                                    ttemp 007E                                      wtemp 007E  
                           __CFG_MCLRE$ON 0000                   __end_of_TMR0_Initialize 0779  
                           __CFG_PLLEN$ON 0000            ??_TMR0_DefaultInterruptHandler 0075  
                           ?_EUSART_Write 0075            __size_of_OSCILLATOR_Initialize 0008  
           __end_of_OSCILLATOR_Initialize 07C1                                     ?_main 0075  
                           _convert_to_fp 0465                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     _LATA5 0865  
                         ?_my10msTimerISR 0075                                     i1l143 06C3  
                                   i1l288 001F                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISC 008E                                     _TXREG 019A  
                                   _TXSTA 019E                          ??_GPS_Initialize 002A  
       __size_of_TMR0_SetInterruptHandler 0006                       ___lmul@multiplicand 0024  
               ?_TMR0_SetInterruptHandler 0020                          __end_of_TMR0_ISR 078D  
                                   _speed 0059                                     _putch 07D4  
                 __end_of_LED_update_loop 0643                                     pclath 000A  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
                         ?_GPS_read_speed 0075                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                         _TMR2_StartTimer 07D9                             multiply_fp@n1 002C  
                           multiply_fp@n2 002F                           __initialization 0025  
                  __size_of_LED_set_state 0021                              __end_of_main 038B  
                          ??_EUSART_Write 0020                   __end_of_TMR2_Initialize 07B9  
             ?_INTERRUPT_InterruptManager 0075                            ?_convert_to_fp 0020  
                                  ??_main 0046                              _b_last_state 0070  
                        _b_push_confirmed 0064                           _b_count_pressed 0072  
                                  _EEADRH 0192                                    _EEADRL 0191  
                                  _CCPR1H 0292                                    _EEDATH 0194  
                                  _CCPR1L 0291                                    _EEDATL 0193  
                                  _EECON2 0196                                    _APFCON 011D  
                                  _ANSELA 018C                                    ?_putch 0075  
                                  _ANSELC 018E                                    i1l2122 0631  
                                  i1l2142 0508                                    i1l2150 0519  
                                  i1l2084 07A3                                    i1l2158 0531  
                                  i1l2168 0545                                    i1l2178 055A  
                                  i1l2366 0739                                    i1l2772 0016  
                                  i1l2764 000D                                    u153_25 04FD  
                                  u156_25 0522                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                          __CFG_PWRTE$OFF 0000                        convert_to_fp@i_bit 002C  
                                  ___lmul 05EB                                    ___wmul 06C6  
                          __CFG_STVREN$ON 0000                       _EUSART_Transmit_ISR 06A9  
                        ?_TMR0_Initialize 0075                __end_of_button_update_loop 055F  
                                  _printf 0719                                    main@up 00A0  
                __size_of_EPWM_Initialize 000C                             _LED_set_state 0667  
                   __end_of_TMR0_CallBack 07B0                   __end_of_TMR2_StartTimer 07DC  
TMR0_SetInterruptHandler@InterruptHandler 0020                 __size_of_get_button_state 000C  
                    ?_EUSART_Transmit_ISR 0075                    convert_to_fp@res_fract 002A  
             __size_of_EPWM_LoadDutyValue 001C                          ?_LED_update_loop 0075  
                            ?_multiply_fp 002C                      __size_of_EUSART_Read 0021  
                       _SYSTEM_Initialize 07C1                   __end_of__initialization 0032  
                          multiply_fp@res 003C                        ?_SYSTEM_Initialize 0075  
                          __pcstackCOMMON 0075                              __pidataBANK0 07DF  
                     ??_SYSTEM_Initialize 0023                                 ?_TMR0_ISR 0075  
                         ??_convert_to_fp 0024                             __end_of_putch 07D9  
                        ?_TMR2_Initialize 0075                            _OPTION_REGbits 0095  
                   TMR0_ISR@CountCallBack 005C                            ?_LED_set_state 0075  
                _b_has_once_been_released 0063                 __end_of_SYSTEM_Initialize 07C8  
                   ??_EUSART_Transmit_ISR 0075                                   ??_putch 0022  
                              __pbssBANK0 0049                      __end_of_EUSART_Write 0667  
                        _b_count_released 0062               __size_of_EUSART_Receive_ISR 001B  
                              __pmaintext 0264          __end_of_TMR0_SetInterruptHandler 07D4  
                                 ?___lmul 0020                                   ?___wmul 0020  
                              ??_TMR0_ISR 0079                          ??_my10msTimerISR 0079  
                              __pintentry 0004                                   _CCP1CON 0293  
                                 _ECCP1AS 0295                                   _BAUDCON 019F  
                          ___lmul@product 0028                                   ?_printf 0023  
                   get_button_state@state 0075                             _eusartRxCount 0073  
                                 _OSCSTAT 009A                                   _OSCTUNE 0098  
                                 _PWM1CON 0294                          ??_GPS_read_speed 0032  
                        ?_TMR2_StartTimer 0075                         ??_EPWM_Initialize 0020  
                         __size_of___lmul 0030                           __size_of___wmul 001C  
                 convert_to_fp@fract_part 0022                                   __ptext1 038B  
                                 __ptext2 05EB                                   __ptext3 07C1  
                                 __ptext4 07B0                                   __ptext5 07D9  
                                 __ptext6 0765                                   __ptext7 07CE  
                                 __ptext8 074F                                   __ptext9 07B9  
                         __size_of_printf 001B                           ??_LED_set_state 0020  
                   _OSCILLATOR_Initialize 07B9                                 _T2CONbits 001C  
            GPS_read_speed@read_speed_fra 0038                  ??_PIN_MANAGER_Initialize 0020  
            GPS_read_speed@read_speed_int 0036                __size_of_SYSTEM_Initialize 0007  
                                 clrloop0 07C9                          _get_button_state 0799  
                                 main@tmp 00A1                            main@motor_load 00A5  
                    end_of_initialization 0032                         __end_of_ratio_mph 0562  
                  LED_set_state@new_state 0021                                 _LED_state 006C  
             EPWM_LoadDutyValue@dutyValue 0020                      __size_of_multiply_fp 00DA  
                       _EUSART_Initialize 06FE                        ?_EUSART_Initialize 0075  
                               _RCSTAbits 019D                                   printf@c 0029  
                                 printf@f 0023                              __pstringtext 055F  
                     ??_EUSART_Initialize 0020                  _TMR0_SetInterruptHandler 07CE  
                               _PORTAbits 000C                      GPS_read_speed@i_buff 0043  
                    GPS_read_speed@m_char 0044                      GPS_read_speed@buffer 003C  
                        __CFG_FOSC$INTOSC 0000                     __size_of_EUSART_Write 0024  
                      _button_update_loop 04EC                 __end_of_EUSART_Initialize 0719  
                 __size_of_GPS_Initialize 0041                       ?_button_update_loop 0075  
                          __end_of___lmul 061B                            __end_of___wmul 06E2  
                            _EUSART_Write 0643                         __size_of_TMR0_ISR 0014  
                        convert_to_fp@one 0562                          convert_to_fp@res 002F  
                  ?_OSCILLATOR_Initialize 0075                      ??_button_update_loop 0076  
                          __end_of_printf 0734                       start_initialization 0025  
                __size_of_TMR0_Initialize 0014           __size_of_PIN_MANAGER_Initialize 0016  
              __end_of_EPWM_LoadDutyValue 06FE                             ??_EUSART_Read 0020  
                             putch@txData 0022                  __size_of_LED_update_loop 0028  
                                ??___lmul 0028                                  ??___wmul 0024  
                  __size_of_TMR0_CallBack 000B                               __pdataBANK0 006C  
                   convert_to_fp@int_part 0020                     __end_of_convert_to_fp 04EC  
                                ??_printf 0025                           _EPWM_Initialize 078D  
             __end_of_EUSART_Transmit_ISR 06C6                               __pbssCOMMON 0070  
                               ___latbits 0000                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                     convert_to_fp@tmp_left 002D  
                __size_of_TMR2_Initialize 0009                __end_of_EUSART_Receive_ISR 074F  
              __size_of_EUSART_Initialize 001B                       __end_of_EUSART_Read 06A9  
                   _TMR0_InterruptHandler 005E                    _PIN_MANAGER_Initialize 074F  
                    EUSART_Read@readValue 0021                  __end_of_get_button_state 07A5  
                            _eusartRxHead 0066                              _eusartTxHead 0068  
                            _eusartRxTail 0067                              _eusartTxTail 0069  
            ??_INTERRUPT_InterruptManager 0079                   _eusartTxBufferRemaining 0074  
                           _TMR0_CallBack 07A5                            __size_of_putch 0005  
                          _eusartRxBuffer 0049                         ??_TMR0_Initialize 0022  
                          _GPS_Initialize 05AA                            _eusartTxBuffer 0051  
                          ___wmul@product 0024                                 clear_ram0 07C8  
                                _PIE1bits 0091                                 _ratio_mph 055F  
                __size_of_TMR2_StartTimer 0003       __size_of_INTERRUPT_InterruptManager 0020  
              ??_TMR0_SetInterruptHandler 0022                                  _PIR1bits 0011  
                                _TMR0_ISR 0779                                  _PSTR1CON 0296  
                 __end_of_EPWM_Initialize 0799                         ??_LED_update_loop 0075  
                       ___wmul@multiplier 0020                     __end_of_LED_set_state 0688  
                 __size_of_my10msTimerISR 0003                            ?_TMR0_CallBack 0075  
                             _EUSART_Read 0688                         ___lmul@multiplier 0020  
                  __end_of_GPS_Initialize 05EB                             ??_multiply_fp 0032  
                __end_ofconvert_to_fp@one 0564            GPS_read_speed@no_more_checksum 0035  
                       ??_TMR2_Initialize 0020                                _EECON1bits 0195  
                 __size_of_GPS_read_speed 022F                               _LED_counter 0060  
                       GPS_Initialize@tmp 002D                   ??_OSCILLATOR_Initialize 0020  
         button_update_loop@current_state 0078                  GPS_read_speed@before_dot 0034  
                                __ptext10 06FE                                  __ptext11 078D  
                                __ptext20 0643                                  __ptext12 0667  
                                __ptext21 06E2                                  __ptext13 0035  
                                __ptext30 06A9                                  __ptext14 0465  
                                __ptext31 0734                                  __ptext23 0779  
                                __ptext15 06C6                                  __ptext24 07A5  
                                __ptext16 0688                                  __ptext25 07E0  
                                __ptext17 05AA                                  __ptext26 07DC  
                                __ptext18 0719                                  __ptext27 04EC  
                                __ptext19 07D4                                  __ptext28 0799  
                                __ptext29 061B                           ?_GPS_Initialize 0075  
                       _b_confirmed_state 0061                             __size_of_main 0127  
    __end_of_TMR0_DefaultInterruptHandler 07E1     __size_of_TMR0_DefaultInterruptHandler 0001  
            _TMR0_DefaultInterruptHandler 07E0                        _EPWM_LoadDutyValue 06E2  
                     __end_of_multiply_fp 0465                                  int$flags 007E  
                     _b_release_confirmed 0065                          ?_EPWM_Initialize 0075  
                       ??_TMR2_StartTimer 0020        __end_of_INTERRUPT_InterruptManager 0024  
              _INTERRUPT_InterruptManager 0004                       ?_EPWM_LoadDutyValue 0020  
             __size_of_button_update_loop 0073                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0079                      ??_EPWM_LoadDutyValue 0022  
                                intlevel1 0000                   ?_PIN_MANAGER_Initialize 0075  
                 GPS_read_speed@checksum2 003A                         __CFG_CLKOUTEN$OFF 0000  
           ?_TMR0_DefaultInterruptHandler 0075                                  printf@ap 0028  
                      _EUSART_Receive_ISR 0734                         ?_get_button_state 0075  
                      ??_get_button_state 0075                                _OPTION_REG 0095  
                     ?_EUSART_Receive_ISR 0075                           _TMR0_Initialize 0765  
                  GPS_read_speed@checksum 003B                            _my10msTimerISR 07DC  
                             _speed_units 006A                        EUSART_Write@txData 0021  
            __size_of_EUSART_Transmit_ISR 001D            __end_of_PIN_MANAGER_Initialize 0765  
                   GPS_read_speed@i_buff2 0042                               _multiply_fp 038B  
                  __size_of_convert_to_fp 0087                      ??_EUSART_Receive_ISR 0075  
                       multiply_fp@n1_fra 0040                            _GPS_read_speed 0035  
                       multiply_fp@n2_fra 0043                           _LED_update_loop 061B  

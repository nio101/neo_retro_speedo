

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Sep 17 22:56:28 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000E                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001E                     	;# 
    57  001F                     	;# 
    58  008C                     	;# 
    59  008E                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0095                     	;# 
    63  0096                     	;# 
    64  0097                     	;# 
    65  0098                     	;# 
    66  0099                     	;# 
    67  009A                     	;# 
    68  009B                     	;# 
    69  009B                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009E                     	;# 
    73  010C                     	;# 
    74  010E                     	;# 
    75  0111                     	;# 
    76  0112                     	;# 
    77  0113                     	;# 
    78  0114                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  011A                     	;# 
    85  011B                     	;# 
    86  011D                     	;# 
    87  011D                     	;# 
    88  018C                     	;# 
    89  018E                     	;# 
    90  0191                     	;# 
    91  0191                     	;# 
    92  0192                     	;# 
    93  0193                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0199                     	;# 
   100  019A                     	;# 
   101  019B                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019C                     	;# 
   106  019C                     	;# 
   107  019D                     	;# 
   108  019E                     	;# 
   109  019F                     	;# 
   110  020C                     	;# 
   111  020E                     	;# 
   112  0211                     	;# 
   113  0211                     	;# 
   114  0212                     	;# 
   115  0212                     	;# 
   116  0213                     	;# 
   117  0213                     	;# 
   118  0214                     	;# 
   119  0214                     	;# 
   120  0215                     	;# 
   121  0215                     	;# 
   122  0215                     	;# 
   123  0216                     	;# 
   124  0216                     	;# 
   125  0217                     	;# 
   126  0217                     	;# 
   127  0291                     	;# 
   128  0291                     	;# 
   129  0292                     	;# 
   130  0293                     	;# 
   131  0294                     	;# 
   132  0295                     	;# 
   133  0295                     	;# 
   134  0296                     	;# 
   135  0391                     	;# 
   136  0392                     	;# 
   137  0393                     	;# 
   138  039A                     	;# 
   139  039C                     	;# 
   140  039D                     	;# 
   141  039E                     	;# 
   142  039F                     	;# 
   143  0FE4                     	;# 
   144  0FE5                     	;# 
   145  0FE6                     	;# 
   146  0FE7                     	;# 
   147  0FE8                     	;# 
   148  0FE9                     	;# 
   149  0FEA                     	;# 
   150  0FEB                     	;# 
   151  0FED                     	;# 
   152  0FEE                     	;# 
   153  0FEF                     	;# 
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000E                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  008C                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  010E                     	;# 
   198  0111                     	;# 
   199  0112                     	;# 
   200  0113                     	;# 
   201  0114                     	;# 
   202  0115                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  0118                     	;# 
   206  0119                     	;# 
   207  011A                     	;# 
   208  011B                     	;# 
   209  011D                     	;# 
   210  011D                     	;# 
   211  018C                     	;# 
   212  018E                     	;# 
   213  0191                     	;# 
   214  0191                     	;# 
   215  0192                     	;# 
   216  0193                     	;# 
   217  0193                     	;# 
   218  0193                     	;# 
   219  0194                     	;# 
   220  0195                     	;# 
   221  0196                     	;# 
   222  0199                     	;# 
   223  019A                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019C                     	;# 
   229  019C                     	;# 
   230  019D                     	;# 
   231  019E                     	;# 
   232  019F                     	;# 
   233  020C                     	;# 
   234  020E                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0216                     	;# 
   247  0216                     	;# 
   248  0217                     	;# 
   249  0217                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0294                     	;# 
   255  0295                     	;# 
   256  0295                     	;# 
   257  0296                     	;# 
   258  0391                     	;# 
   259  0392                     	;# 
   260  0393                     	;# 
   261  039A                     	;# 
   262  039C                     	;# 
   263  039D                     	;# 
   264  039E                     	;# 
   265  039F                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000E                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  001E                     	;# 
   303  001F                     	;# 
   304  008C                     	;# 
   305  008E                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0098                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010E                     	;# 
   321  0111                     	;# 
   322  0112                     	;# 
   323  0113                     	;# 
   324  0114                     	;# 
   325  0115                     	;# 
   326  0116                     	;# 
   327  0117                     	;# 
   328  0118                     	;# 
   329  0119                     	;# 
   330  011A                     	;# 
   331  011B                     	;# 
   332  011D                     	;# 
   333  011D                     	;# 
   334  018C                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0193                     	;# 
   342  0194                     	;# 
   343  0195                     	;# 
   344  0196                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019C                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020C                     	;# 
   357  020E                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0294                     	;# 
   378  0295                     	;# 
   379  0295                     	;# 
   380  0296                     	;# 
   381  0391                     	;# 
   382  0392                     	;# 
   383  0393                     	;# 
   384  039A                     	;# 
   385  039C                     	;# 
   386  039D                     	;# 
   387  039E                     	;# 
   388  039F                     	;# 
   389  0FE4                     	;# 
   390  0FE5                     	;# 
   391  0FE6                     	;# 
   392  0FE7                     	;# 
   393  0FE8                     	;# 
   394  0FE9                     	;# 
   395  0FEA                     	;# 
   396  0FEB                     	;# 
   397  0FED                     	;# 
   398  0FEE                     	;# 
   399  0FEF                     	;# 
   400  0000                     	;# 
   401  0001                     	;# 
   402  0002                     	;# 
   403  0003                     	;# 
   404  0004                     	;# 
   405  0005                     	;# 
   406  0006                     	;# 
   407  0007                     	;# 
   408  0008                     	;# 
   409  0009                     	;# 
   410  000A                     	;# 
   411  000B                     	;# 
   412  000C                     	;# 
   413  000E                     	;# 
   414  0011                     	;# 
   415  0012                     	;# 
   416  0015                     	;# 
   417  0016                     	;# 
   418  0016                     	;# 
   419  0017                     	;# 
   420  0018                     	;# 
   421  0019                     	;# 
   422  001A                     	;# 
   423  001B                     	;# 
   424  001C                     	;# 
   425  001E                     	;# 
   426  001F                     	;# 
   427  008C                     	;# 
   428  008E                     	;# 
   429  0091                     	;# 
   430  0092                     	;# 
   431  0095                     	;# 
   432  0096                     	;# 
   433  0097                     	;# 
   434  0098                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010E                     	;# 
   444  0111                     	;# 
   445  0112                     	;# 
   446  0113                     	;# 
   447  0114                     	;# 
   448  0115                     	;# 
   449  0116                     	;# 
   450  0117                     	;# 
   451  0118                     	;# 
   452  0119                     	;# 
   453  011A                     	;# 
   454  011B                     	;# 
   455  011D                     	;# 
   456  011D                     	;# 
   457  018C                     	;# 
   458  018E                     	;# 
   459  0191                     	;# 
   460  0191                     	;# 
   461  0192                     	;# 
   462  0193                     	;# 
   463  0193                     	;# 
   464  0193                     	;# 
   465  0194                     	;# 
   466  0195                     	;# 
   467  0196                     	;# 
   468  0199                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019C                     	;# 
   475  019C                     	;# 
   476  019D                     	;# 
   477  019E                     	;# 
   478  019F                     	;# 
   479  020C                     	;# 
   480  020E                     	;# 
   481  0211                     	;# 
   482  0211                     	;# 
   483  0212                     	;# 
   484  0212                     	;# 
   485  0213                     	;# 
   486  0213                     	;# 
   487  0214                     	;# 
   488  0214                     	;# 
   489  0215                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0216                     	;# 
   493  0216                     	;# 
   494  0217                     	;# 
   495  0217                     	;# 
   496  0291                     	;# 
   497  0291                     	;# 
   498  0292                     	;# 
   499  0293                     	;# 
   500  0294                     	;# 
   501  0295                     	;# 
   502  0295                     	;# 
   503  0296                     	;# 
   504  0391                     	;# 
   505  0392                     	;# 
   506  0393                     	;# 
   507  039A                     	;# 
   508  039C                     	;# 
   509  039D                     	;# 
   510  039E                     	;# 
   511  039F                     	;# 
   512  0FE4                     	;# 
   513  0FE5                     	;# 
   514  0FE6                     	;# 
   515  0FE7                     	;# 
   516  0FE8                     	;# 
   517  0FE9                     	;# 
   518  0FEA                     	;# 
   519  0FEB                     	;# 
   520  0FED                     	;# 
   521  0FEE                     	;# 
   522  0FEF                     	;# 
   523  0000                     	;# 
   524  0001                     	;# 
   525  0002                     	;# 
   526  0003                     	;# 
   527  0004                     	;# 
   528  0005                     	;# 
   529  0006                     	;# 
   530  0007                     	;# 
   531  0008                     	;# 
   532  0009                     	;# 
   533  000A                     	;# 
   534  000B                     	;# 
   535  000C                     	;# 
   536  000E                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0016                     	;# 
   542  0017                     	;# 
   543  0018                     	;# 
   544  0019                     	;# 
   545  001A                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  001E                     	;# 
   549  001F                     	;# 
   550  008C                     	;# 
   551  008E                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0095                     	;# 
   555  0096                     	;# 
   556  0097                     	;# 
   557  0098                     	;# 
   558  0099                     	;# 
   559  009A                     	;# 
   560  009B                     	;# 
   561  009B                     	;# 
   562  009C                     	;# 
   563  009D                     	;# 
   564  009E                     	;# 
   565  010C                     	;# 
   566  010E                     	;# 
   567  0111                     	;# 
   568  0112                     	;# 
   569  0113                     	;# 
   570  0114                     	;# 
   571  0115                     	;# 
   572  0116                     	;# 
   573  0117                     	;# 
   574  0118                     	;# 
   575  0119                     	;# 
   576  011A                     	;# 
   577  011B                     	;# 
   578  011D                     	;# 
   579  011D                     	;# 
   580  018C                     	;# 
   581  018E                     	;# 
   582  0191                     	;# 
   583  0191                     	;# 
   584  0192                     	;# 
   585  0193                     	;# 
   586  0193                     	;# 
   587  0193                     	;# 
   588  0194                     	;# 
   589  0195                     	;# 
   590  0196                     	;# 
   591  0199                     	;# 
   592  019A                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019C                     	;# 
   598  019C                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019F                     	;# 
   602  020C                     	;# 
   603  020E                     	;# 
   604  0211                     	;# 
   605  0211                     	;# 
   606  0212                     	;# 
   607  0212                     	;# 
   608  0213                     	;# 
   609  0213                     	;# 
   610  0214                     	;# 
   611  0214                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0216                     	;# 
   616  0216                     	;# 
   617  0217                     	;# 
   618  0217                     	;# 
   619  0291                     	;# 
   620  0291                     	;# 
   621  0292                     	;# 
   622  0293                     	;# 
   623  0294                     	;# 
   624  0295                     	;# 
   625  0295                     	;# 
   626  0296                     	;# 
   627  0391                     	;# 
   628  0392                     	;# 
   629  0393                     	;# 
   630  039A                     	;# 
   631  039C                     	;# 
   632  039D                     	;# 
   633  039E                     	;# 
   634  039F                     	;# 
   635  0FE4                     	;# 
   636  0FE5                     	;# 
   637  0FE6                     	;# 
   638  0FE7                     	;# 
   639  0FE8                     	;# 
   640  0FE9                     	;# 
   641  0FEA                     	;# 
   642  0FEB                     	;# 
   643  0FED                     	;# 
   644  0FEE                     	;# 
   645  0FEF                     	;# 
   646  0000                     	;# 
   647  0001                     	;# 
   648  0002                     	;# 
   649  0003                     	;# 
   650  0004                     	;# 
   651  0005                     	;# 
   652  0006                     	;# 
   653  0007                     	;# 
   654  0008                     	;# 
   655  0009                     	;# 
   656  000A                     	;# 
   657  000B                     	;# 
   658  000C                     	;# 
   659  000E                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0015                     	;# 
   663  0016                     	;# 
   664  0016                     	;# 
   665  0017                     	;# 
   666  0018                     	;# 
   667  0019                     	;# 
   668  001A                     	;# 
   669  001B                     	;# 
   670  001C                     	;# 
   671  001E                     	;# 
   672  001F                     	;# 
   673  008C                     	;# 
   674  008E                     	;# 
   675  0091                     	;# 
   676  0092                     	;# 
   677  0095                     	;# 
   678  0096                     	;# 
   679  0097                     	;# 
   680  0098                     	;# 
   681  0099                     	;# 
   682  009A                     	;# 
   683  009B                     	;# 
   684  009B                     	;# 
   685  009C                     	;# 
   686  009D                     	;# 
   687  009E                     	;# 
   688  010C                     	;# 
   689  010E                     	;# 
   690  0111                     	;# 
   691  0112                     	;# 
   692  0113                     	;# 
   693  0114                     	;# 
   694  0115                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  0118                     	;# 
   698  0119                     	;# 
   699  011A                     	;# 
   700  011B                     	;# 
   701  011D                     	;# 
   702  011D                     	;# 
   703  018C                     	;# 
   704  018E                     	;# 
   705  0191                     	;# 
   706  0191                     	;# 
   707  0192                     	;# 
   708  0193                     	;# 
   709  0193                     	;# 
   710  0193                     	;# 
   711  0194                     	;# 
   712  0195                     	;# 
   713  0196                     	;# 
   714  0199                     	;# 
   715  019A                     	;# 
   716  019B                     	;# 
   717  019B                     	;# 
   718  019B                     	;# 
   719  019B                     	;# 
   720  019C                     	;# 
   721  019C                     	;# 
   722  019D                     	;# 
   723  019E                     	;# 
   724  019F                     	;# 
   725  020C                     	;# 
   726  020E                     	;# 
   727  0211                     	;# 
   728  0211                     	;# 
   729  0212                     	;# 
   730  0212                     	;# 
   731  0213                     	;# 
   732  0213                     	;# 
   733  0214                     	;# 
   734  0214                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0217                     	;# 
   742  0291                     	;# 
   743  0291                     	;# 
   744  0292                     	;# 
   745  0293                     	;# 
   746  0294                     	;# 
   747  0295                     	;# 
   748  0295                     	;# 
   749  0296                     	;# 
   750  0391                     	;# 
   751  0392                     	;# 
   752  0393                     	;# 
   753  039A                     	;# 
   754  039C                     	;# 
   755  039D                     	;# 
   756  039E                     	;# 
   757  039F                     	;# 
   758  0FE4                     	;# 
   759  0FE5                     	;# 
   760  0FE6                     	;# 
   761  0FE7                     	;# 
   762  0FE8                     	;# 
   763  0FE9                     	;# 
   764  0FEA                     	;# 
   765  0FEB                     	;# 
   766  0FED                     	;# 
   767  0FEE                     	;# 
   768  0FEF                     	;# 
   769  0000                     	;# 
   770  0001                     	;# 
   771  0002                     	;# 
   772  0003                     	;# 
   773  0004                     	;# 
   774  0005                     	;# 
   775  0006                     	;# 
   776  0007                     	;# 
   777  0008                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  000E                     	;# 
   783  0011                     	;# 
   784  0012                     	;# 
   785  0015                     	;# 
   786  0016                     	;# 
   787  0016                     	;# 
   788  0017                     	;# 
   789  0018                     	;# 
   790  0019                     	;# 
   791  001A                     	;# 
   792  001B                     	;# 
   793  001C                     	;# 
   794  001E                     	;# 
   795  001F                     	;# 
   796  008C                     	;# 
   797  008E                     	;# 
   798  0091                     	;# 
   799  0092                     	;# 
   800  0095                     	;# 
   801  0096                     	;# 
   802  0097                     	;# 
   803  0098                     	;# 
   804  0099                     	;# 
   805  009A                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  010C                     	;# 
   812  010E                     	;# 
   813  0111                     	;# 
   814  0112                     	;# 
   815  0113                     	;# 
   816  0114                     	;# 
   817  0115                     	;# 
   818  0116                     	;# 
   819  0117                     	;# 
   820  0118                     	;# 
   821  0119                     	;# 
   822  011A                     	;# 
   823  011B                     	;# 
   824  011D                     	;# 
   825  011D                     	;# 
   826  018C                     	;# 
   827  018E                     	;# 
   828  0191                     	;# 
   829  0191                     	;# 
   830  0192                     	;# 
   831  0193                     	;# 
   832  0193                     	;# 
   833  0193                     	;# 
   834  0194                     	;# 
   835  0195                     	;# 
   836  0196                     	;# 
   837  0199                     	;# 
   838  019A                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019D                     	;# 
   846  019E                     	;# 
   847  019F                     	;# 
   848  020C                     	;# 
   849  020E                     	;# 
   850  0211                     	;# 
   851  0211                     	;# 
   852  0212                     	;# 
   853  0212                     	;# 
   854  0213                     	;# 
   855  0213                     	;# 
   856  0214                     	;# 
   857  0214                     	;# 
   858  0215                     	;# 
   859  0215                     	;# 
   860  0215                     	;# 
   861  0216                     	;# 
   862  0216                     	;# 
   863  0217                     	;# 
   864  0217                     	;# 
   865  0291                     	;# 
   866  0291                     	;# 
   867  0292                     	;# 
   868  0293                     	;# 
   869  0294                     	;# 
   870  0295                     	;# 
   871  0295                     	;# 
   872  0296                     	;# 
   873  0391                     	;# 
   874  0392                     	;# 
   875  0393                     	;# 
   876  039A                     	;# 
   877  039C                     	;# 
   878  039D                     	;# 
   879  039E                     	;# 
   880  039F                     	;# 
   881  0FE4                     	;# 
   882  0FE5                     	;# 
   883  0FE6                     	;# 
   884  0FE7                     	;# 
   885  0FE8                     	;# 
   886  0FE9                     	;# 
   887  0FEA                     	;# 
   888  0FEB                     	;# 
   889  0FED                     	;# 
   890  0FEE                     	;# 
   891  0FEF                     	;# 
   892  0000                     	;# 
   893  0001                     	;# 
   894  0002                     	;# 
   895  0003                     	;# 
   896  0004                     	;# 
   897  0005                     	;# 
   898  0006                     	;# 
   899  0007                     	;# 
   900  0008                     	;# 
   901  0009                     	;# 
   902  000A                     	;# 
   903  000B                     	;# 
   904  000C                     	;# 
   905  000E                     	;# 
   906  0011                     	;# 
   907  0012                     	;# 
   908  0015                     	;# 
   909  0016                     	;# 
   910  0016                     	;# 
   911  0017                     	;# 
   912  0018                     	;# 
   913  0019                     	;# 
   914  001A                     	;# 
   915  001B                     	;# 
   916  001C                     	;# 
   917  001E                     	;# 
   918  001F                     	;# 
   919  008C                     	;# 
   920  008E                     	;# 
   921  0091                     	;# 
   922  0092                     	;# 
   923  0095                     	;# 
   924  0096                     	;# 
   925  0097                     	;# 
   926  0098                     	;# 
   927  0099                     	;# 
   928  009A                     	;# 
   929  009B                     	;# 
   930  009B                     	;# 
   931  009C                     	;# 
   932  009D                     	;# 
   933  009E                     	;# 
   934  010C                     	;# 
   935  010E                     	;# 
   936  0111                     	;# 
   937  0112                     	;# 
   938  0113                     	;# 
   939  0114                     	;# 
   940  0115                     	;# 
   941  0116                     	;# 
   942  0117                     	;# 
   943  0118                     	;# 
   944  0119                     	;# 
   945  011A                     	;# 
   946  011B                     	;# 
   947  011D                     	;# 
   948  011D                     	;# 
   949  018C                     	;# 
   950  018E                     	;# 
   951  0191                     	;# 
   952  0191                     	;# 
   953  0192                     	;# 
   954  0193                     	;# 
   955  0193                     	;# 
   956  0193                     	;# 
   957  0194                     	;# 
   958  0195                     	;# 
   959  0196                     	;# 
   960  0199                     	;# 
   961  019A                     	;# 
   962  019B                     	;# 
   963  019B                     	;# 
   964  019B                     	;# 
   965  019B                     	;# 
   966  019C                     	;# 
   967  019C                     	;# 
   968  019D                     	;# 
   969  019E                     	;# 
   970  019F                     	;# 
   971  020C                     	;# 
   972  020E                     	;# 
   973  0211                     	;# 
   974  0211                     	;# 
   975  0212                     	;# 
   976  0212                     	;# 
   977  0213                     	;# 
   978  0213                     	;# 
   979  0214                     	;# 
   980  0214                     	;# 
   981  0215                     	;# 
   982  0215                     	;# 
   983  0215                     	;# 
   984  0216                     	;# 
   985  0216                     	;# 
   986  0217                     	;# 
   987  0217                     	;# 
   988  0291                     	;# 
   989  0291                     	;# 
   990  0292                     	;# 
   991  0293                     	;# 
   992  0294                     	;# 
   993  0295                     	;# 
   994  0295                     	;# 
   995  0296                     	;# 
   996  0391                     	;# 
   997  0392                     	;# 
   998  0393                     	;# 
   999  039A                     	;# 
  1000  039C                     	;# 
  1001  039D                     	;# 
  1002  039E                     	;# 
  1003  039F                     	;# 
  1004  0FE4                     	;# 
  1005  0FE5                     	;# 
  1006  0FE6                     	;# 
  1007  0FE7                     	;# 
  1008  0FE8                     	;# 
  1009  0FE9                     	;# 
  1010  0FEA                     	;# 
  1011  0FEB                     	;# 
  1012  0FED                     	;# 
  1013  0FEE                     	;# 
  1014  0FEF                     	;# 
  1015  0000                     	;# 
  1016  0001                     	;# 
  1017  0002                     	;# 
  1018  0003                     	;# 
  1019  0004                     	;# 
  1020  0005                     	;# 
  1021  0006                     	;# 
  1022  0007                     	;# 
  1023  0008                     	;# 
  1024  0009                     	;# 
  1025  000A                     	;# 
  1026  000B                     	;# 
  1027  000C                     	;# 
  1028  000E                     	;# 
  1029  0011                     	;# 
  1030  0012                     	;# 
  1031  0015                     	;# 
  1032  0016                     	;# 
  1033  0016                     	;# 
  1034  0017                     	;# 
  1035  0018                     	;# 
  1036  0019                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001C                     	;# 
  1040  001E                     	;# 
  1041  001F                     	;# 
  1042  008C                     	;# 
  1043  008E                     	;# 
  1044  0091                     	;# 
  1045  0092                     	;# 
  1046  0095                     	;# 
  1047  0096                     	;# 
  1048  0097                     	;# 
  1049  0098                     	;# 
  1050  0099                     	;# 
  1051  009A                     	;# 
  1052  009B                     	;# 
  1053  009B                     	;# 
  1054  009C                     	;# 
  1055  009D                     	;# 
  1056  009E                     	;# 
  1057  010C                     	;# 
  1058  010E                     	;# 
  1059  0111                     	;# 
  1060  0112                     	;# 
  1061  0113                     	;# 
  1062  0114                     	;# 
  1063  0115                     	;# 
  1064  0116                     	;# 
  1065  0117                     	;# 
  1066  0118                     	;# 
  1067  0119                     	;# 
  1068  011A                     	;# 
  1069  011B                     	;# 
  1070  011D                     	;# 
  1071  011D                     	;# 
  1072  018C                     	;# 
  1073  018E                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019F                     	;# 
  1094  020C                     	;# 
  1095  020E                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0291                     	;# 
  1112  0291                     	;# 
  1113  0292                     	;# 
  1114  0293                     	;# 
  1115  0294                     	;# 
  1116  0295                     	;# 
  1117  0295                     	;# 
  1118  0296                     	;# 
  1119  0391                     	;# 
  1120  0392                     	;# 
  1121  0393                     	;# 
  1122  039A                     	;# 
  1123  039C                     	;# 
  1124  039D                     	;# 
  1125  039E                     	;# 
  1126  039F                     	;# 
  1127  0FE4                     	;# 
  1128  0FE5                     	;# 
  1129  0FE6                     	;# 
  1130  0FE7                     	;# 
  1131  0FE8                     	;# 
  1132  0FE9                     	;# 
  1133  0FEA                     	;# 
  1134  0FEB                     	;# 
  1135  0FED                     	;# 
  1136  0FEE                     	;# 
  1137  0FEF                     	;# 
  1138  0000                     	;# 
  1139  0001                     	;# 
  1140  0002                     	;# 
  1141  0003                     	;# 
  1142  0004                     	;# 
  1143  0005                     	;# 
  1144  0006                     	;# 
  1145  0007                     	;# 
  1146  0008                     	;# 
  1147  0009                     	;# 
  1148  000A                     	;# 
  1149  000B                     	;# 
  1150  000C                     	;# 
  1151  000E                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0015                     	;# 
  1155  0016                     	;# 
  1156  0016                     	;# 
  1157  0017                     	;# 
  1158  0018                     	;# 
  1159  0019                     	;# 
  1160  001A                     	;# 
  1161  001B                     	;# 
  1162  001C                     	;# 
  1163  001E                     	;# 
  1164  001F                     	;# 
  1165  008C                     	;# 
  1166  008E                     	;# 
  1167  0091                     	;# 
  1168  0092                     	;# 
  1169  0095                     	;# 
  1170  0096                     	;# 
  1171  0097                     	;# 
  1172  0098                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  010C                     	;# 
  1181  010E                     	;# 
  1182  0111                     	;# 
  1183  0112                     	;# 
  1184  0113                     	;# 
  1185  0114                     	;# 
  1186  0115                     	;# 
  1187  0116                     	;# 
  1188  0117                     	;# 
  1189  0118                     	;# 
  1190  0119                     	;# 
  1191  011A                     	;# 
  1192  011B                     	;# 
  1193  011D                     	;# 
  1194  011D                     	;# 
  1195  018C                     	;# 
  1196  018E                     	;# 
  1197  0191                     	;# 
  1198  0191                     	;# 
  1199  0192                     	;# 
  1200  0193                     	;# 
  1201  0193                     	;# 
  1202  0193                     	;# 
  1203  0194                     	;# 
  1204  0195                     	;# 
  1205  0196                     	;# 
  1206  0199                     	;# 
  1207  019A                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019C                     	;# 
  1213  019C                     	;# 
  1214  019D                     	;# 
  1215  019E                     	;# 
  1216  019F                     	;# 
  1217  020C                     	;# 
  1218  020E                     	;# 
  1219  0211                     	;# 
  1220  0211                     	;# 
  1221  0212                     	;# 
  1222  0212                     	;# 
  1223  0213                     	;# 
  1224  0213                     	;# 
  1225  0214                     	;# 
  1226  0214                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0216                     	;# 
  1231  0216                     	;# 
  1232  0217                     	;# 
  1233  0217                     	;# 
  1234  0291                     	;# 
  1235  0291                     	;# 
  1236  0292                     	;# 
  1237  0293                     	;# 
  1238  0294                     	;# 
  1239  0295                     	;# 
  1240  0295                     	;# 
  1241  0296                     	;# 
  1242  0391                     	;# 
  1243  0392                     	;# 
  1244  0393                     	;# 
  1245  039A                     	;# 
  1246  039C                     	;# 
  1247  039D                     	;# 
  1248  039E                     	;# 
  1249  039F                     	;# 
  1250  0FE4                     	;# 
  1251  0FE5                     	;# 
  1252  0FE6                     	;# 
  1253  0FE7                     	;# 
  1254  0FE8                     	;# 
  1255  0FE9                     	;# 
  1256  0FEA                     	;# 
  1257  0FEB                     	;# 
  1258  0FED                     	;# 
  1259  0FEE                     	;# 
  1260  0FEF                     	;# 
  1261  0000                     	;# 
  1262  0001                     	;# 
  1263  0002                     	;# 
  1264  0003                     	;# 
  1265  0004                     	;# 
  1266  0005                     	;# 
  1267  0006                     	;# 
  1268  0007                     	;# 
  1269  0008                     	;# 
  1270  0009                     	;# 
  1271  000A                     	;# 
  1272  000B                     	;# 
  1273  000C                     	;# 
  1274  000E                     	;# 
  1275  0011                     	;# 
  1276  0012                     	;# 
  1277  0015                     	;# 
  1278  0016                     	;# 
  1279  0016                     	;# 
  1280  0017                     	;# 
  1281  0018                     	;# 
  1282  0019                     	;# 
  1283  001A                     	;# 
  1284  001B                     	;# 
  1285  001C                     	;# 
  1286  001E                     	;# 
  1287  001F                     	;# 
  1288  008C                     	;# 
  1289  008E                     	;# 
  1290  0091                     	;# 
  1291  0092                     	;# 
  1292  0095                     	;# 
  1293  0096                     	;# 
  1294  0097                     	;# 
  1295  0098                     	;# 
  1296  0099                     	;# 
  1297  009A                     	;# 
  1298  009B                     	;# 
  1299  009B                     	;# 
  1300  009C                     	;# 
  1301  009D                     	;# 
  1302  009E                     	;# 
  1303  010C                     	;# 
  1304  010E                     	;# 
  1305  0111                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0115                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  0118                     	;# 
  1313  0119                     	;# 
  1314  011A                     	;# 
  1315  011B                     	;# 
  1316  011D                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019C                     	;# 
  1336  019C                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019F                     	;# 
  1340  020C                     	;# 
  1341  020E                     	;# 
  1342  0211                     	;# 
  1343  0211                     	;# 
  1344  0212                     	;# 
  1345  0212                     	;# 
  1346  0213                     	;# 
  1347  0213                     	;# 
  1348  0214                     	;# 
  1349  0214                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0216                     	;# 
  1354  0216                     	;# 
  1355  0217                     	;# 
  1356  0217                     	;# 
  1357  0291                     	;# 
  1358  0291                     	;# 
  1359  0292                     	;# 
  1360  0293                     	;# 
  1361  0294                     	;# 
  1362  0295                     	;# 
  1363  0295                     	;# 
  1364  0296                     	;# 
  1365  0391                     	;# 
  1366  0392                     	;# 
  1367  0393                     	;# 
  1368  039A                     	;# 
  1369  039C                     	;# 
  1370  039D                     	;# 
  1371  039E                     	;# 
  1372  039F                     	;# 
  1373  0FE4                     	;# 
  1374  0FE5                     	;# 
  1375  0FE6                     	;# 
  1376  0FE7                     	;# 
  1377  0FE8                     	;# 
  1378  0FE9                     	;# 
  1379  0FEA                     	;# 
  1380  0FEB                     	;# 
  1381  0FED                     	;# 
  1382  0FEE                     	;# 
  1383  0FEF                     	;# 
  1384                           
  1385                           	psect	idataBANK0
  1386  046C                     __pidataBANK0:	
  1387                           
  1388                           ;initializer for _LED_state
  1389  046C  3401               	retlw	1
  1390                           
  1391                           	psect	stringtext
  1392  02ED                     __pstringtext:	
  1393  02ED                     convert_to_fp@one:	
  1394  02ED  3401               	retlw	1
  1395  02EE  3400               	retlw	0
  1396  02EF                     __end_ofconvert_to_fp@one:	
  1397  000B                     _INTCONbits	set	11
  1398  0011                     _PIR1bits	set	17
  1399  000C                     _PORTAbits	set	12
  1400  001B                     _PR2	set	27
  1401  001C                     _T2CON	set	28
  1402  001C                     _T2CONbits	set	28
  1403  0015                     _TMR0	set	21
  1404  001A                     _TMR2	set	26
  1405  0095                     _OPTION_REG	set	149
  1406  0095                     _OPTION_REGbits	set	149
  1407  0099                     _OSCCON	set	153
  1408  009A                     _OSCSTAT	set	154
  1409  0098                     _OSCTUNE	set	152
  1410  0091                     _PIE1bits	set	145
  1411  008C                     _TRISA	set	140
  1412  008E                     _TRISC	set	142
  1413  04D6                     _PLLR	set	1238
  1414  011D                     _APFCON	set	285
  1415  010C                     _LATA	set	268
  1416  010E                     _LATC	set	270
  1417  0865                     _LATA5	set	2149
  1418  018C                     _ANSELA	set	396
  1419  018E                     _ANSELC	set	398
  1420  019F                     _BAUDCON	set	415
  1421  0192                     _EEADRH	set	402
  1422  0191                     _EEADRL	set	401
  1423  0195                     _EECON1bits	set	405
  1424  0196                     _EECON2	set	406
  1425  0194                     _EEDATH	set	404
  1426  0193                     _EEDATL	set	403
  1427  0199                     _RCREG	set	409
  1428  019D                     _RCSTA	set	413
  1429  019D                     _RCSTAbits	set	413
  1430  019C                     _SPBRGH	set	412
  1431  019B                     _SPBRGL	set	411
  1432  019A                     _TXREG	set	410
  1433  019E                     _TXSTA	set	414
  1434  020C                     _WPUA	set	524
  1435  020E                     _WPUC	set	526
  1436  0293                     _CCP1CON	set	659
  1437  0292                     _CCPR1H	set	658
  1438  0291                     _CCPR1L	set	657
  1439  0295                     _ECCP1AS	set	661
  1440  0296                     _PSTR1CON	set	662
  1441  0294                     _PWM1CON	set	660
  1442  02EF                     STR_1:	
  1443  02EF  3424               	retlw	36	;'$'
  1444  02F0  3450               	retlw	80	;'P'
  1445  02F1  344D               	retlw	77	;'M'
  1446  02F2  3454               	retlw	84	;'T'
  1447  02F3  344B               	retlw	75	;'K'
  1448  02F4  3433               	retlw	51	;'3'
  1449  02F5  3431               	retlw	49	;'1'
  1450  02F6  3434               	retlw	52	;'4'
  1451  02F7  342C               	retlw	44	;','
  1452  02F8  3430               	retlw	48	;'0'
  1453  02F9  342C               	retlw	44	;','
  1454  02FA  3430               	retlw	48	;'0'
  1455  02FB  342C               	retlw	44	;','
  1456  02FC  3431               	retlw	49	;'1'
  1457  02FD  342C               	retlw	44	;','
  1458  02FE  3430               	retlw	48	;'0'
  1459  02FF  342C               	retlw	44	;','
  1460  0300  3430               	retlw	48	;'0'
  1461  0301  342C               	retlw	44	;','
  1462  0302  3430               	retlw	48	;'0'
  1463  0303  342C               	retlw	44	;','
  1464  0304  3430               	retlw	48	;'0'
  1465  0305  342C               	retlw	44	;','
  1466  0306  3430               	retlw	48	;'0'
  1467  0307  342C               	retlw	44	;','
  1468  0308  3430               	retlw	48	;'0'
  1469  0309  342C               	retlw	44	;','
  1470  030A  3430               	retlw	48	;'0'
  1471  030B  342C               	retlw	44	;','
  1472  030C  3430               	retlw	48	;'0'
  1473  030D  342C               	retlw	44	;','
  1474  030E  3430               	retlw	48	;'0'
  1475  030F  342C               	retlw	44	;','
  1476  0310  3430               	retlw	48	;'0'
  1477  0311  342C               	retlw	44	;','
  1478  0312  3430               	retlw	48	;'0'
  1479  0313  342C               	retlw	44	;','
  1480  0314  3430               	retlw	48	;'0'
  1481  0315  342C               	retlw	44	;','
  1482  0316  3430               	retlw	48	;'0'
  1483  0317  342C               	retlw	44	;','
  1484  0318  3430               	retlw	48	;'0'
  1485  0319  342C               	retlw	44	;','
  1486  031A  3430               	retlw	48	;'0'
  1487  031B  342C               	retlw	44	;','
  1488  031C  3430               	retlw	48	;'0'
  1489  031D  342A               	retlw	42	;'*'
  1490  031E  3432               	retlw	50	;'2'
  1491  031F  3439               	retlw	57	;'9'
  1492  0320  340D               	retlw	13
  1493  0321  340A               	retlw	10
  1494  0322  3400               	retlw	0
  1495  0323                     STR_2:	
  1496  0323  3424               	retlw	36	;'$'
  1497  0324  3450               	retlw	80	;'P'
  1498  0325  344D               	retlw	77	;'M'
  1499  0326  3454               	retlw	84	;'T'
  1500  0327  344B               	retlw	75	;'K'
  1501  0328  3432               	retlw	50	;'2'
  1502  0329  3432               	retlw	50	;'2'
  1503  032A  3430               	retlw	48	;'0'
  1504  032B  342C               	retlw	44	;','
  1505  032C  3431               	retlw	49	;'1'
  1506  032D  3430               	retlw	48	;'0'
  1507  032E  3430               	retlw	48	;'0'
  1508  032F  342A               	retlw	42	;'*'
  1509  0330  3432               	retlw	50	;'2'
  1510  0331  3446               	retlw	70	;'F'
  1511  0332  340D               	retlw	13
  1512  0333  340A               	retlw	10
  1513  0334  3400               	retlw	0
  1514                           
  1515                           ; #config settings
  1516  0000                     
  1517                           	psect	cinit
  1518  0025                     start_initialization:	
  1519  0025                     __initialization:	
  1520                           
  1521                           ; Initialize objects allocated to BANK0
  1522  0025  246C               	fcall	__pidataBANK0	;fetch initializer
  1523  0026  00DF               	movwf	__pdataBANK0& (0+127)
  1524                           
  1525                           ; Clear objects allocated to COMMON
  1526  0027  01FA               	clrf	__pbssCOMMON& (0+127)
  1527  0028  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1528                           
  1529                           ; Clear objects allocated to BANK0
  1530  0029  3020               	movlw	low __pbssBANK0
  1531  002A  0084               	movwf	4
  1532  002B  3000               	movlw	high __pbssBANK0
  1533  002C  0085               	movwf	5
  1534  002D  3027               	movlw	39
  1535  002E  245F               	fcall	clear_ram0
  1536  002F                     end_of_initialization:	
  1537                           ;End of C runtime variable initialization code
  1538                           
  1539  002F                     __end_of__initialization:	
  1540  002F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1541  0030  0020               	movlb	0
  1542  0031  297E               	ljmp	_main	;jump to C main() function
  1543                           
  1544                           	psect	bssCOMMON
  1545  007A                     __pbssCOMMON:	
  1546  007A                     _b_count_pressed:	
  1547  007A                     	ds	1
  1548  007B                     _eusartRxCount:	
  1549  007B                     	ds	1
  1550                           
  1551                           	psect	bssBANK0
  1552  0020                     __pbssBANK0:	
  1553  0020                     _eusartRxBuffer:	
  1554  0020                     	ds	8
  1555  0028                     _eusartTxBuffer:	
  1556  0028                     	ds	8
  1557  0030                     TMR0_ISR@CountCallBack:	
  1558  0030                     	ds	2
  1559  0032                     _TMR0_InterruptHandler:	
  1560  0032                     	ds	2
  1561  0034                     _b_last_state:	
  1562  0034                     	ds	2
  1563  0036                     _speed_dec:	
  1564  0036                     	ds	2
  1565  0038                     _speed_int:	
  1566  0038                     	ds	2
  1567  003A                     _LED_counter:	
  1568  003A                     	ds	1
  1569  003B                     _b_confirmed_state:	
  1570  003B                     	ds	1
  1571  003C                     _b_count_released:	
  1572  003C                     	ds	1
  1573  003D                     _b_has_once_been_released:	
  1574  003D                     	ds	1
  1575  003E                     _b_push_confirmed:	
  1576  003E                     	ds	1
  1577  003F                     _b_release_confirmed:	
  1578  003F                     	ds	1
  1579  0040                     _eusartRxHead:	
  1580  0040                     	ds	1
  1581  0041                     _eusartRxTail:	
  1582  0041                     	ds	1
  1583  0042                     _eusartTxBufferRemaining:	
  1584  0042                     	ds	1
  1585  0043                     _eusartTxHead:	
  1586  0043                     	ds	1
  1587  0044                     _eusartTxTail:	
  1588  0044                     	ds	1
  1589  0045                     _speed_units:	
  1590  0045                     	ds	1
  1591  0046                     _timer0ReloadVal:	
  1592  0046                     	ds	1
  1593                           
  1594                           	psect	dataBANK0
  1595  005F                     __pdataBANK0:	
  1596  005F                     _LED_state:	
  1597  005F                     	ds	1
  1598                           
  1599                           	psect	clrtext
  1600  045F                     clear_ram0:	
  1601                           ;	Called with FSR0 containing the base address, and
  1602                           ;	WREG with the size to clear
  1603                           
  1604  045F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1605  0460                     clrloop0:	
  1606  0460  0180               	clrf	0	;clear RAM location pointed to by FSR
  1607  0461  3101               	addfsr 0,1
  1608  0462  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1609  0463  2C60               	goto	clrloop0	;have we reached the end yet?
  1610  0464  3400               	retlw	0	;all done for this memory range, return
  1611                           
  1612                           	psect	cstackCOMMON
  1613  0070                     __pcstackCOMMON:	
  1614  0070                     ?_TMR2_StartTimer:	
  1615  0070                     ?_TMR0_DefaultInterruptHandler:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ??_TMR0_DefaultInterruptHandler:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621  0070                     ?_TMR0_CallBack:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624  0070                     ??_TMR0_CallBack:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627  0070                     ?_LED_set_state:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630  0070                     ?_EUSART_Read:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633  0070                     ?_EUSART_Write:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_putch:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_EUSART_Transmit_ISR:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ??_EUSART_Transmit_ISR:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?_EUSART_Receive_ISR:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ??_EUSART_Receive_ISR:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_TMR0_ISR:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ??_TMR0_ISR:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ?_INTERRUPT_InterruptManager:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_GPS_Initialize:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_GPS_read_speed:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_main:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669                           
  1670                           ; 1 bytes @ 0x0
  1671  0070                     	ds	1
  1672  0071                     ??_INTERRUPT_InterruptManager:	
  1673                           
  1674                           ; 1 bytes @ 0x1
  1675  0071                     	ds	1
  1676  0072                     ??_TMR2_StartTimer:	
  1677  0072                     ??_LED_set_state:	
  1678                           ; 1 bytes @ 0x2
  1679                           
  1680  0072                     ??_EUSART_Read:	
  1681                           ; 1 bytes @ 0x2
  1682                           
  1683  0072                     ??_EUSART_Write:	
  1684                           ; 1 bytes @ 0x2
  1685                           
  1686  0072                     ?_EPWM_LoadDutyValue:	
  1687                           ; 1 bytes @ 0x2
  1688                           
  1689  0072                     ?_convert_to_fp:	
  1690                           ; 1 bytes @ 0x2
  1691                           
  1692  0072                     EPWM_LoadDutyValue@dutyValue:	
  1693                           ; 2 bytes @ 0x2
  1694                           
  1695  0072                     convert_to_fp@int_part:	
  1696                           ; 2 bytes @ 0x2
  1697                           
  1698                           
  1699                           ; 2 bytes @ 0x2
  1700  0072                     	ds	1
  1701  0073                     EUSART_Read@readValue:	
  1702  0073                     EUSART_Write@txData:	
  1703                           ; 1 bytes @ 0x3
  1704                           
  1705  0073                     LED_set_state@new_state:	
  1706                           ; 1 bytes @ 0x3
  1707                           
  1708                           
  1709                           ; 1 bytes @ 0x3
  1710  0073                     	ds	1
  1711  0074                     ??_putch:	
  1712  0074                     ??_EPWM_LoadDutyValue:	
  1713                           ; 1 bytes @ 0x4
  1714                           
  1715  0074                     ??_GPS_read_speed:	
  1716                           ; 1 bytes @ 0x4
  1717                           
  1718  0074                     putch@txData:	
  1719                           ; 1 bytes @ 0x4
  1720                           
  1721  0074                     convert_to_fp@fract_part:	
  1722                           ; 1 bytes @ 0x4
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x4
  1726  0074                     	ds	1
  1727  0075                     ?_printf:	
  1728  0075                     printf@f:	
  1729                           ; 2 bytes @ 0x5
  1730                           
  1731                           
  1732                           ; 2 bytes @ 0x5
  1733  0075                     	ds	1
  1734  0076                     ??_convert_to_fp:	
  1735                           
  1736                           ; 1 bytes @ 0x6
  1737  0076                     	ds	1
  1738  0077                     ??_printf:	
  1739                           
  1740                           ; 1 bytes @ 0x7
  1741  0077                     	ds	3
  1742                           
  1743                           	psect	cstackBANK0
  1744  0047                     __pcstackBANK0:	
  1745  0047                     GPS_read_speed@tmp:	
  1746  0047                     printf@ap:	
  1747                           ; 1 bytes @ 0x0
  1748                           
  1749  0047                     convert_to_fp@res_fract:	
  1750                           ; 1 bytes @ 0x0
  1751                           
  1752                           
  1753                           ; 2 bytes @ 0x0
  1754  0047                     	ds	1
  1755  0048                     GPS_read_speed@checksum:	
  1756  0048                     printf@c:	
  1757                           ; 1 bytes @ 0x1
  1758                           
  1759                           
  1760                           ; 1 bytes @ 0x1
  1761  0048                     	ds	1
  1762  0049                     ??_GPS_Initialize:	
  1763  0049                     convert_to_fp@tmp_left:	
  1764                           ; 1 bytes @ 0x2
  1765                           
  1766  0049                     GPS_read_speed@buffer:	
  1767                           ; 2 bytes @ 0x2
  1768                           
  1769                           
  1770                           ; 6 bytes @ 0x2
  1771  0049                     	ds	2
  1772  004B                     convert_to_fp@i_bit:	
  1773                           
  1774                           ; 1 bytes @ 0x4
  1775  004B                     	ds	1
  1776  004C                     GPS_Initialize@tmp:	
  1777  004C                     convert_to_fp@res:	
  1778                           ; 1 bytes @ 0x5
  1779                           
  1780                           
  1781                           ; 2 bytes @ 0x5
  1782  004C                     	ds	3
  1783  004F                     GPS_read_speed@i_buff:	
  1784                           
  1785                           ; 1 bytes @ 0x8
  1786  004F                     	ds	1
  1787  0050                     GPS_read_speed@m_char:	
  1788                           
  1789                           ; 1 bytes @ 0x9
  1790  0050                     	ds	1
  1791  0051                     ??_main:	
  1792                           
  1793                           ; 1 bytes @ 0xA
  1794  0051                     	ds	3
  1795  0054                     main@test:	
  1796                           
  1797                           ; 2 bytes @ 0xD
  1798  0054                     	ds	2
  1799  0056                     main@zob:	
  1800                           
  1801                           ; 1 bytes @ 0xF
  1802  0056                     	ds	1
  1803  0057                     main@res:	
  1804                           
  1805                           ; 1 bytes @ 0x10
  1806  0057                     	ds	1
  1807  0058                     main@up:	
  1808                           
  1809                           ; 1 bytes @ 0x11
  1810  0058                     	ds	1
  1811  0059                     main@tmp:	
  1812                           
  1813                           ; 1 bytes @ 0x12
  1814  0059                     	ds	1
  1815  005A                     main@tmp_586:	
  1816                           
  1817                           ; 1 bytes @ 0x13
  1818  005A                     	ds	1
  1819  005B                     main@tmp_588:	
  1820                           
  1821                           ; 1 bytes @ 0x14
  1822  005B                     	ds	1
  1823  005C                     main@tmp_589:	
  1824                           
  1825                           ; 1 bytes @ 0x15
  1826  005C                     	ds	1
  1827  005D                     main@motor_load:	
  1828                           
  1829                           ; 2 bytes @ 0x16
  1830  005D                     	ds	2
  1831                           
  1832                           	psect	maintext
  1833  017E                     __pmaintext:	
  1834 ;;
  1835 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1836 ;;
  1837 ;; *************** function _main *****************
  1838 ;; Defined at:
  1839 ;;		line 243 in file "main.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  tmp             1   21[BANK0 ] unsigned char 
  1844 ;;  tmp             1   20[BANK0 ] unsigned char 
  1845 ;;  tmp             1   19[BANK0 ] unsigned char 
  1846 ;;  tmp             1   18[BANK0 ] unsigned char 
  1847 ;;  motor_load      2   22[BANK0 ] unsigned int 
  1848 ;;  test            2   13[BANK0 ] unsigned short 
  1849 ;;  up              1   17[BANK0 ] unsigned char 
  1850 ;;  res             1   16[BANK0 ] unsigned char 
  1851 ;;  zob             1   15[BANK0 ] unsigned char 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : B1F/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1
  1861 ;;      Params:         0       0       0
  1862 ;;      Locals:         0      11       0
  1863 ;;      Temps:          0       3       0
  1864 ;;      Totals:         0      14       0
  1865 ;;Total ram usage:       14 bytes
  1866 ;; Hardware stack levels required when called:    8
  1867 ;; This function calls:
  1868 ;;		_EPWM_LoadDutyValue
  1869 ;;		_GPS_Initialize
  1870 ;;		_GPS_read_speed
  1871 ;;		_LED_set_state
  1872 ;;		_TMR2_StartTimer
  1873 ;;		_convert_to_fp
  1874 ;; This function is called by:
  1875 ;;		Startup code after reset
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           
  1880                           ;psect for function _main
  1881  017E                     _main:	
  1882                           
  1883                           ;main.c: 252: t_fp test = convert_to_fp(23, 6875);
  1884                           
  1885                           ;incstack = 0
  1886                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1887  017E  3017               	movlw	23
  1888  017F  00F2               	movwf	convert_to_fp@int_part
  1889  0180  3000               	movlw	0
  1890  0181  00F3               	movwf	convert_to_fp@int_part+1
  1891  0182  30DB               	movlw	219
  1892  0183  00F4               	movwf	convert_to_fp@fract_part
  1893  0184  301A               	movlw	26
  1894  0185  00F5               	movwf	convert_to_fp@fract_part+1
  1895  0186  2281               	fcall	_convert_to_fp
  1896  0187  0873               	movf	?_convert_to_fp+1,w
  1897  0188  0020               	movlb	0	; select bank0
  1898  0189  00D5               	movwf	main@test+1
  1899  018A  0872               	movf	?_convert_to_fp,w
  1900  018B  00D4               	movwf	main@test
  1901                           
  1902                           ;main.c: 254: char zob = 'k';
  1903  018C  306B               	movlw	107
  1904  018D  00D1               	movwf	??_main
  1905  018E  0851               	movf	??_main,w
  1906  018F  00D6               	movwf	main@zob
  1907                           
  1908                           ;main.c: 262: (INTCONbits.GIE = 1);
  1909  0190  178B               	bsf	11,7	;volatile
  1910                           
  1911                           ;main.c: 265: (INTCONbits.PEIE = 1);
  1912  0191  170B               	bsf	11,6	;volatile
  1913                           
  1914                           ;main.c: 327: LED_set_state(manual_mode);
  1915  0192  3004               	movlw	4
  1916  0193  2398               	fcall	_LED_set_state
  1917                           
  1918                           ;main.c: 328: do { LATA5 = 0; } while(0);
  1919  0194  0022               	movlb	2	; select bank2
  1920  0195  128C               	bcf	12,5	;volatile
  1921                           
  1922                           ;main.c: 329: for(unsigned char tmp=0;tmp<(10*3);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  1923  0196  0020               	movlb	0	; select bank0
  1924  0197  01D9               	clrf	main@tmp
  1925  0198  301E               	movlw	30
  1926  0199  0259               	subwf	main@tmp,w
  1927  019A  1803               	btfsc	3,0
  1928  019B  29B1               	goto	l2636
  1929  019C                     l2630:	
  1930  019C  3005               	movlw	5
  1931  019D  00D3               	movwf	??_main+2
  1932  019E  300F               	movlw	15
  1933  019F  00D2               	movwf	??_main+1
  1934  01A0  30F4               	movlw	244
  1935  01A1  00D1               	movwf	??_main
  1936  01A2                     u2327:	
  1937  01A2  0BD1               	decfsz	??_main,f
  1938  01A3  29A2               	goto	u2327
  1939  01A4  0BD2               	decfsz	??_main+1,f
  1940  01A5  29A2               	goto	u2327
  1941  01A6  0BD3               	decfsz	??_main+2,f
  1942  01A7  29A2               	goto	u2327
  1943  01A8  3001               	movlw	1
  1944  01A9  0020               	movlb	0	; select bank0
  1945  01AA  00D1               	movwf	??_main
  1946  01AB  0851               	movf	??_main,w
  1947  01AC  07D9               	addwf	main@tmp,f
  1948  01AD  301E               	movlw	30
  1949  01AE  0259               	subwf	main@tmp,w
  1950  01AF  1C03               	skipc
  1951  01B0  299C               	goto	l2630
  1952  01B1                     l2636:	
  1953                           
  1954                           ;main.c: 346: GPS_Initialize();
  1955  01B1  2335               	fcall	_GPS_Initialize
  1956  01B2                     l2638:	
  1957                           ;main.c: 349: bool res;
  1958                           ;main.c: 350: while (1)
  1959                           
  1960                           
  1961                           ;main.c: 351: {
  1962                           ;main.c: 352: res = GPS_read_speed();
  1963  01B2  2032               	fcall	_GPS_read_speed
  1964  01B3  0020               	movlb	0	; select bank0
  1965  01B4  00D1               	movwf	??_main
  1966  01B5  0851               	movf	??_main,w
  1967  01B6  00D7               	movwf	main@res
  1968                           
  1969                           ;main.c: 353: if (res)
  1970  01B7  0857               	movf	main@res,w
  1971  01B8  1903               	btfsc	3,2
  1972  01B9  29C6               	goto	l2644
  1973                           
  1974                           ;main.c: 354: {
  1975                           ;main.c: 355: do { LATA5 = 1; } while(0);
  1976  01BA  0022               	movlb	2	; select bank2
  1977  01BB  168C               	bsf	12,5	;volatile
  1978                           
  1979                           ;main.c: 356: _delay((unsigned long)((20)*(32000000/4000.0)));
  1980  01BC  30D0               	movlw	208
  1981  01BD  0020               	movlb	0	; select bank0
  1982  01BE  00D2               	movwf	??_main+1
  1983  01BF  30C9               	movlw	201
  1984  01C0  00D1               	movwf	??_main
  1985  01C1                     u2337:	
  1986  01C1  0BD1               	decfsz	??_main,f
  1987  01C2  29C1               	goto	u2337
  1988  01C3  0BD2               	decfsz	??_main+1,f
  1989  01C4  29C1               	goto	u2337
  1990  01C5  3200               	nop2
  1991  01C6                     l2644:	
  1992                           ;main.c: 357: }
  1993                           ;main.c: 358: do { LATA5 = 0; } while(0);
  1994                           
  1995  01C6  0022               	movlb	2	; select bank2
  1996  01C7  128C               	bcf	12,5	;volatile
  1997  01C8  29B2               	goto	l2638
  1998  01C9                     l2656:	
  1999                           ;main.c: 370: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2000                           
  2001                           ;main.c: 369: TMR2_StartTimer();
  2002                           
  2003                           ;main.c: 368: EPWM_LoadDutyValue(1023-motor_load);
  2004                           
  2005                           ;main.c: 362: }
  2006                           ;main.c: 367: uint16_t motor_load = 0;
  2007                           
  2008  01C9  3005               	movlw	5
  2009  01CA  00D3               	movwf	??_main+2
  2010  01CB  300F               	movlw	15
  2011  01CC  00D2               	movwf	??_main+1
  2012  01CD  30F4               	movlw	244
  2013  01CE  00D1               	movwf	??_main
  2014  01CF                     u2347:	
  2015  01CF  0BD1               	decfsz	??_main,f
  2016  01D0  29CF               	goto	u2347
  2017  01D1  0BD2               	decfsz	??_main+1,f
  2018  01D2  29CF               	goto	u2347
  2019  01D3  0BD3               	decfsz	??_main+2,f
  2020  01D4  29CF               	goto	u2347
  2021  01D5  3001               	movlw	1
  2022  01D6  0020               	movlb	0	; select bank0
  2023  01D7  00D1               	movwf	??_main
  2024  01D8  0851               	movf	??_main,w
  2025  01D9  07DA               	addwf	main@tmp_586,f
  2026  01DA  3032               	movlw	50
  2027  01DB  025A               	subwf	main@tmp_586,w
  2028  01DC  1C03               	skipc
  2029  01DD  29C9               	goto	l2656
  2030                           
  2031                           ;main.c: 372: bool up = 1;
  2032  01DE  01D8               	clrf	main@up
  2033  01DF  0AD8               	incf	main@up,f
  2034                           
  2035                           ;main.c: 392: EPWM_LoadDutyValue(0);
  2036  01E0  3000               	movlw	0
  2037  01E1  00F2               	movwf	EPWM_LoadDutyValue@dutyValue
  2038  01E2  00F3               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2039  01E3  2429               	fcall	_EPWM_LoadDutyValue
  2040                           
  2041                           ;main.c: 393: _delay((unsigned long)((10)*(32000000/4000.0)));
  2042  01E4  3068               	movlw	104
  2043  01E5  0020               	movlb	0	; select bank0
  2044  01E6  00D2               	movwf	??_main+1
  2045  01E7  30E4               	movlw	228
  2046  01E8  00D1               	movwf	??_main
  2047  01E9                     u2357:	
  2048  01E9  0BD1               	decfsz	??_main,f
  2049  01EA  29E9               	goto	u2357
  2050  01EB  0BD2               	decfsz	??_main+1,f
  2051  01EC  29E9               	goto	u2357
  2052  01ED  0000               	nop
  2053                           
  2054                           ;main.c: 394: EPWM_LoadDutyValue(1023-148);
  2055  01EE  306B               	movlw	107
  2056  01EF  00F2               	movwf	EPWM_LoadDutyValue@dutyValue
  2057  01F0  3003               	movlw	3
  2058  01F1  00F3               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2059  01F2  2429               	fcall	_EPWM_LoadDutyValue
  2060                           
  2061                           ;main.c: 395: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2062  01F3  0020               	movlb	0	; select bank0
  2063  01F4  01DB               	clrf	main@tmp_588
  2064  01F5  3032               	movlw	50
  2065  01F6  025B               	subwf	main@tmp_588,w
  2066  01F7  1803               	btfsc	3,0
  2067  01F8  2A0E               	goto	l2680
  2068  01F9                     l2674:	
  2069  01F9  3005               	movlw	5
  2070  01FA  00D3               	movwf	??_main+2
  2071  01FB  300F               	movlw	15
  2072  01FC  00D2               	movwf	??_main+1
  2073  01FD  30F4               	movlw	244
  2074  01FE  00D1               	movwf	??_main
  2075  01FF                     u2367:	
  2076  01FF  0BD1               	decfsz	??_main,f
  2077  0200  29FF               	goto	u2367
  2078  0201  0BD2               	decfsz	??_main+1,f
  2079  0202  29FF               	goto	u2367
  2080  0203  0BD3               	decfsz	??_main+2,f
  2081  0204  29FF               	goto	u2367
  2082  0205  3001               	movlw	1
  2083  0206  0020               	movlb	0	; select bank0
  2084  0207  00D1               	movwf	??_main
  2085  0208  0851               	movf	??_main,w
  2086  0209  07DB               	addwf	main@tmp_588,f
  2087  020A  3032               	movlw	50
  2088  020B  025B               	subwf	main@tmp_588,w
  2089  020C  1C03               	skipc
  2090  020D  29F9               	goto	l2674
  2091  020E                     l2680:	
  2092                           ;main.c: 396: while (1)
  2093                           
  2094                           
  2095                           ;main.c: 397: {
  2096                           ;main.c: 398: if (up == 1)
  2097  020E  0020               	movlb	0	; select bank0
  2098  020F  0358               	decf	main@up,w
  2099  0210  1D03               	btfss	3,2
  2100  0211  2A17               	goto	l2684
  2101                           
  2102                           ;main.c: 399: motor_load += 1;
  2103  0212  3001               	movlw	1
  2104  0213  07DD               	addwf	main@motor_load,f
  2105  0214  3000               	movlw	0
  2106  0215  3DDE               	addwfc	main@motor_load+1,f
  2107  0216  2A1B               	goto	l443
  2108  0217                     l2684:	
  2109                           
  2110                           ;main.c: 400: else
  2111                           ;main.c: 401: motor_load -= 1;
  2112  0217  3001               	movlw	1
  2113  0218  02DD               	subwf	main@motor_load,f
  2114  0219  3000               	movlw	0
  2115  021A  3BDE               	subwfb	main@motor_load+1,f
  2116  021B                     l443:	
  2117                           
  2118                           ;main.c: 402: if (motor_load > 300)
  2119  021B  3001               	movlw	1
  2120  021C  025E               	subwf	main@motor_load+1,w
  2121  021D  302D               	movlw	45
  2122  021E  1903               	skipnz
  2123  021F  025D               	subwf	main@motor_load,w
  2124  0220  1C03               	skipc
  2125  0221  2A24               	goto	l2688
  2126                           
  2127                           ;main.c: 403: up = 0;
  2128  0222  01D8               	clrf	main@up
  2129  0223  2A58               	goto	l2710
  2130  0224                     l2688:	
  2131                           
  2132                           ;main.c: 404: else if (motor_load == 0)
  2133  0224  085D               	movf	main@motor_load,w
  2134  0225  045E               	iorwf	main@motor_load+1,w
  2135  0226  1D03               	btfss	3,2
  2136  0227  2A58               	goto	l2710
  2137                           
  2138                           ;main.c: 405: {
  2139                           ;main.c: 406: up = 1;
  2140  0228  01D8               	clrf	main@up
  2141  0229  0AD8               	incf	main@up,f
  2142                           
  2143                           ;main.c: 407: EPWM_LoadDutyValue(1023);
  2144  022A  30FF               	movlw	255
  2145  022B  00F2               	movwf	EPWM_LoadDutyValue@dutyValue
  2146  022C  3003               	movlw	3
  2147  022D  00F3               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2148  022E  2429               	fcall	_EPWM_LoadDutyValue
  2149                           
  2150                           ;main.c: 408: for(unsigned char tmp=0;tmp<(10*5);tmp++){_delay((unsigned long)((100)*(32
      +                          000000/4000.0)));};
  2151  022F  0020               	movlb	0	; select bank0
  2152  0230  01DC               	clrf	main@tmp_589
  2153  0231  3032               	movlw	50
  2154  0232  025C               	subwf	main@tmp_589,w
  2155  0233  1803               	btfsc	3,0
  2156  0234  2A4A               	goto	l2706
  2157  0235                     l2700:	
  2158  0235  3005               	movlw	5
  2159  0236  00D3               	movwf	??_main+2
  2160  0237  300F               	movlw	15
  2161  0238  00D2               	movwf	??_main+1
  2162  0239  30F4               	movlw	244
  2163  023A  00D1               	movwf	??_main
  2164  023B                     u2377:	
  2165  023B  0BD1               	decfsz	??_main,f
  2166  023C  2A3B               	goto	u2377
  2167  023D  0BD2               	decfsz	??_main+1,f
  2168  023E  2A3B               	goto	u2377
  2169  023F  0BD3               	decfsz	??_main+2,f
  2170  0240  2A3B               	goto	u2377
  2171  0241  3001               	movlw	1
  2172  0242  0020               	movlb	0	; select bank0
  2173  0243  00D1               	movwf	??_main
  2174  0244  0851               	movf	??_main,w
  2175  0245  07DC               	addwf	main@tmp_589,f
  2176  0246  3032               	movlw	50
  2177  0247  025C               	subwf	main@tmp_589,w
  2178  0248  1C03               	skipc
  2179  0249  2A35               	goto	l2700
  2180  024A                     l2706:	
  2181                           
  2182                           ;main.c: 410: EPWM_LoadDutyValue(0);
  2183  024A  3000               	movlw	0
  2184  024B  00F2               	movwf	EPWM_LoadDutyValue@dutyValue
  2185  024C  00F3               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2186  024D  2429               	fcall	_EPWM_LoadDutyValue
  2187                           
  2188                           ;main.c: 411: _delay((unsigned long)((10)*(32000000/4000.0)));
  2189  024E  3068               	movlw	104
  2190  024F  0020               	movlb	0	; select bank0
  2191  0250  00D2               	movwf	??_main+1
  2192  0251  30E4               	movlw	228
  2193  0252  00D1               	movwf	??_main
  2194  0253                     u2387:	
  2195  0253  0BD1               	decfsz	??_main,f
  2196  0254  2A53               	goto	u2387
  2197  0255  0BD2               	decfsz	??_main+1,f
  2198  0256  2A53               	goto	u2387
  2199  0257  0000               	nop
  2200  0258                     l2710:	
  2201                           
  2202                           ;main.c: 412: }
  2203                           ;main.c: 413: if (motor_load < 148)
  2204  0258  3000               	movlw	0
  2205  0259  0020               	movlb	0	; select bank0
  2206  025A  025E               	subwf	main@motor_load+1,w
  2207  025B  3094               	movlw	148
  2208  025C  1903               	skipnz
  2209  025D  025D               	subwf	main@motor_load,w
  2210  025E  1803               	skipnc
  2211  025F  2A64               	goto	l2714
  2212                           
  2213                           ;main.c: 414: EPWM_LoadDutyValue(1023-135);
  2214  0260  3078               	movlw	120
  2215  0261  00F2               	movwf	EPWM_LoadDutyValue@dutyValue
  2216  0262  3003               	movlw	3
  2217  0263  2A71               	goto	L1
  2218  0264                     l2714:	
  2219                           
  2220                           ;main.c: 415: else
  2221                           ;main.c: 416: EPWM_LoadDutyValue(1023-motor_load);
  2222  0264  0020               	movlb	0	; select bank0
  2223  0265  095D               	comf	main@motor_load,w
  2224  0266  00D1               	movwf	??_main
  2225  0267  095E               	comf	main@motor_load+1,w
  2226  0268  00D2               	movwf	??_main+1
  2227  0269  0AD1               	incf	??_main,f
  2228  026A  1903               	skipnz
  2229  026B  0AD2               	incf	??_main+1,f
  2230  026C  0851               	movf	??_main,w
  2231  026D  3EFF               	addlw	255
  2232  026E  00F2               	movwf	EPWM_LoadDutyValue@dutyValue
  2233  026F  3003               	movlw	3
  2234  0270  3D52               	addwfc	??_main+1,w
  2235  0271                     L1:	
  2236  0271  00F3               	movwf	EPWM_LoadDutyValue@dutyValue+1
  2237  0272  2429               	fcall	_EPWM_LoadDutyValue
  2238                           
  2239                           ;main.c: 417: _delay((unsigned long)((50)*(32000000/4000.0)));
  2240  0273  3003               	movlw	3
  2241  0274  0020               	movlb	0	; select bank0
  2242  0275  00D3               	movwf	??_main+2
  2243  0276  3008               	movlw	8
  2244  0277  00D2               	movwf	??_main+1
  2245  0278  3078               	movlw	120
  2246  0279  00D1               	movwf	??_main
  2247  027A                     u2397:	
  2248  027A  0BD1               	decfsz	??_main,f
  2249  027B  2A7A               	goto	u2397
  2250  027C  0BD2               	decfsz	??_main+1,f
  2251  027D  2A7A               	goto	u2397
  2252  027E  0BD3               	decfsz	??_main+2,f
  2253  027F  2A7A               	goto	u2397
  2254  0280  2A0E               	goto	l2680
  2255  0281                     __end_of_main:	
  2256                           
  2257                           	psect	text1
  2258  0281                     __ptext1:	
  2259 ;; *************** function _convert_to_fp *****************
  2260 ;; Defined at:
  2261 ;;		line 11 in file "fixed_point.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  int_part        2    2[COMMON] unsigned short 
  2264 ;;  fract_part      2    4[COMMON] unsigned short 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  i_bit           1    4[BANK0 ] unsigned char 
  2267 ;;  res             2    5[BANK0 ] unsigned short 
  2268 ;;  tmp_left        2    2[BANK0 ] unsigned short 
  2269 ;;  res_fract       2    0[BANK0 ] unsigned short 
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  2    2[COMMON] unsigned short 
  2272 ;; Registers used:
  2273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMMON   BANK0   BANK1
  2279 ;;      Params:         4       0       0
  2280 ;;      Locals:         0       7       0
  2281 ;;      Temps:          2       0       0
  2282 ;;      Totals:         6       7       0
  2283 ;;Total ram usage:       13 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    4
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           
  2294                           ;psect for function _convert_to_fp
  2295  0281                     _convert_to_fp:	
  2296                           
  2297                           ;fixed_point.c: 13: t_fp res = 0;
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _convert_to_fp: [wreg-fsr0h+status,2+status,0+pclath]
  2301  0281  0020               	movlb	0	; select bank0
  2302  0282  01CC               	clrf	convert_to_fp@res
  2303  0283  01CD               	clrf	convert_to_fp@res+1
  2304                           
  2305                           ;fixed_point.c: 15: if (int_part > 16383)
  2306  0284  3040               	movlw	64
  2307  0285  0273               	subwf	convert_to_fp@int_part+1,w
  2308  0286  3000               	movlw	0
  2309  0287  1903               	skipnz
  2310  0288  0272               	subwf	convert_to_fp@int_part,w
  2311  0289  1C03               	skipc
  2312  028A  2A90               	goto	l2292
  2313                           
  2314                           ;fixed_point.c: 16: return res;
  2315  028B  084D               	movf	convert_to_fp@res+1,w
  2316  028C  00F3               	movwf	?_convert_to_fp+1
  2317  028D  084C               	movf	convert_to_fp@res,w
  2318  028E  00F2               	movwf	?_convert_to_fp
  2319  028F  0008               	return
  2320  0290                     l2292:	
  2321                           
  2322                           ;fixed_point.c: 18: res = int_part;
  2323  0290  0873               	movf	convert_to_fp@int_part+1,w
  2324  0291  00CD               	movwf	convert_to_fp@res+1
  2325  0292  0872               	movf	convert_to_fp@int_part,w
  2326  0293  00CC               	movwf	convert_to_fp@res
  2327                           
  2328                           ;fixed_point.c: 19: res = res << 4;
  2329  0294  084D               	movf	convert_to_fp@res+1,w
  2330  0295  00F7               	movwf	??_convert_to_fp+1
  2331  0296  084C               	movf	convert_to_fp@res,w
  2332  0297  00F6               	movwf	??_convert_to_fp
  2333  0298  0EF6               	swapf	??_convert_to_fp,f
  2334  0299  0EF7               	swapf	??_convert_to_fp+1,f
  2335  029A  30F0               	movlw	240
  2336  029B  05F7               	andwf	??_convert_to_fp+1,f
  2337  029C  0876               	movf	??_convert_to_fp,w
  2338  029D  390F               	andlw	15
  2339  029E  04F7               	iorwf	??_convert_to_fp+1,f
  2340  029F  30F0               	movlw	240
  2341  02A0  05F6               	andwf	??_convert_to_fp,f
  2342  02A1  0876               	movf	??_convert_to_fp,w
  2343  02A2  00CC               	movwf	convert_to_fp@res
  2344  02A3  0877               	movf	??_convert_to_fp+1,w
  2345  02A4  00CD               	movwf	convert_to_fp@res+1
  2346                           
  2347                           ;fixed_point.c: 21: unsigned short tmp_left = fract_part;
  2348  02A5  0875               	movf	convert_to_fp@fract_part+1,w
  2349  02A6  00CA               	movwf	convert_to_fp@tmp_left+1
  2350  02A7  0874               	movf	convert_to_fp@fract_part,w
  2351  02A8  00C9               	movwf	convert_to_fp@tmp_left
  2352                           
  2353                           ;fixed_point.c: 22: unsigned short res_fract = 0;
  2354  02A9  01C7               	clrf	convert_to_fp@res_fract
  2355  02AA  01C8               	clrf	convert_to_fp@res_fract+1
  2356                           
  2357                           ;fixed_point.c: 23: const unsigned short one = 1;
  2358                           ;fixed_point.c: 24: for (unsigned char i_bit = 0; i_bit < 4; i_bit++)
  2359  02AB  01CB               	clrf	convert_to_fp@i_bit
  2360  02AC  3004               	movlw	4
  2361  02AD  024B               	subwf	convert_to_fp@i_bit,w
  2362  02AE  1803               	btfsc	3,0
  2363  02AF  2AE2               	goto	l2310
  2364  02B0                     l2300:	
  2365                           
  2366                           ;fixed_point.c: 25: {
  2367                           ;fixed_point.c: 26: tmp_left = tmp_left << 1;
  2368  02B0  3549               	lslf	convert_to_fp@tmp_left,w
  2369  02B1  00C9               	movwf	convert_to_fp@tmp_left
  2370  02B2  0D4A               	rlf	convert_to_fp@tmp_left+1,w
  2371  02B3  00CA               	movwf	convert_to_fp@tmp_left+1
  2372                           
  2373                           ;fixed_point.c: 27: if (tmp_left >= 10000)
  2374  02B4  3027               	movlw	39
  2375  02B5  024A               	subwf	convert_to_fp@tmp_left+1,w
  2376  02B6  3010               	movlw	16
  2377  02B7  1903               	skipnz
  2378  02B8  0249               	subwf	convert_to_fp@tmp_left,w
  2379  02B9  1C03               	skipc
  2380  02BA  2ADA               	goto	l2306
  2381                           
  2382                           ;fixed_point.c: 28: {
  2383                           ;fixed_point.c: 29: res_fract = res_fract | one<<(4-i_bit-1);
  2384  02BB  30ED               	movlw	low (convert_to_fp@one| (0+32768))
  2385  02BC  0084               	movwf	4
  2386  02BD  3082               	movlw	high (convert_to_fp@one| (0+32768))
  2387  02BE  0085               	movwf	5
  2388  02BF  3F00               	moviw [0]fsr0
  2389  02C0  00F6               	movwf	??_convert_to_fp
  2390  02C1  3F01               	moviw [1]fsr0
  2391  02C2  00F7               	movwf	??_convert_to_fp+1
  2392  02C3  084B               	movf	convert_to_fp@i_bit,w
  2393  02C4  3E01               	addlw	1
  2394  02C5  3AFF               	xorlw	255
  2395  02C6  3E01               	addlw	1
  2396  02C7  3E04               	addlw	4
  2397  02C8  0A89               	incf	9,f
  2398  02C9  2ACC               	goto	u1694
  2399  02CA                     u1695:	
  2400  02CA  35F6               	lslf	??_convert_to_fp,f
  2401  02CB  0DF7               	rlf	??_convert_to_fp+1,f
  2402  02CC                     u1694:	
  2403  02CC  0B89               	decfsz	9,f
  2404  02CD  2ACA               	goto	u1695
  2405  02CE  0847               	movf	convert_to_fp@res_fract,w
  2406  02CF  0476               	iorwf	??_convert_to_fp,w
  2407  02D0  00C7               	movwf	convert_to_fp@res_fract
  2408  02D1  0848               	movf	convert_to_fp@res_fract+1,w
  2409  02D2  0477               	iorwf	??_convert_to_fp+1,w
  2410  02D3  00C8               	movwf	convert_to_fp@res_fract+1
  2411                           
  2412                           ;fixed_point.c: 30: tmp_left = tmp_left - 10000;
  2413  02D4  0849               	movf	convert_to_fp@tmp_left,w
  2414  02D5  3EF0               	addlw	240
  2415  02D6  00C9               	movwf	convert_to_fp@tmp_left
  2416  02D7  30D8               	movlw	216
  2417  02D8  3D4A               	addwfc	convert_to_fp@tmp_left+1,w
  2418  02D9  00CA               	movwf	convert_to_fp@tmp_left+1
  2419  02DA                     l2306:	
  2420  02DA  3001               	movlw	1
  2421  02DB  00F6               	movwf	??_convert_to_fp
  2422  02DC  0876               	movf	??_convert_to_fp,w
  2423  02DD  07CB               	addwf	convert_to_fp@i_bit,f
  2424  02DE  3004               	movlw	4
  2425  02DF  024B               	subwf	convert_to_fp@i_bit,w
  2426  02E0  1C03               	skipc
  2427  02E1  2AB0               	goto	l2300
  2428  02E2                     l2310:	
  2429                           
  2430                           ;fixed_point.c: 31: }
  2431                           ;fixed_point.c: 32: }
  2432                           ;fixed_point.c: 34: res = res + res_fract;
  2433  02E2  0847               	movf	convert_to_fp@res_fract,w
  2434  02E3  074C               	addwf	convert_to_fp@res,w
  2435  02E4  00CC               	movwf	convert_to_fp@res
  2436  02E5  0848               	movf	convert_to_fp@res_fract+1,w
  2437  02E6  3D4D               	addwfc	convert_to_fp@res+1,w
  2438  02E7  00CD               	movwf	convert_to_fp@res+1
  2439                           
  2440                           ;fixed_point.c: 35: return res;
  2441  02E8  084D               	movf	convert_to_fp@res+1,w
  2442  02E9  00F3               	movwf	?_convert_to_fp+1
  2443  02EA  084C               	movf	convert_to_fp@res,w
  2444  02EB  00F2               	movwf	?_convert_to_fp
  2445  02EC  0008               	return
  2446  02ED                     __end_of_convert_to_fp:	
  2447                           
  2448                           	psect	text2
  2449  0469                     __ptext2:	
  2450 ;; *************** function _TMR2_StartTimer *****************
  2451 ;; Defined at:
  2452 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		None
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1
  2466 ;;      Params:         0       0       0
  2467 ;;      Locals:         0       0       0
  2468 ;;      Temps:          0       0       0
  2469 ;;      Totals:         0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    4
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;;		_TMR2_Initialize
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _TMR2_StartTimer
  2483  0469                     _TMR2_StartTimer:	
  2484                           
  2485                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _TMR2_StartTimer: []
  2489  0469  0020               	movlb	0	; select bank0
  2490  046A  151C               	bsf	28,2	;volatile
  2491  046B  0008               	return
  2492  046C                     __end_of_TMR2_StartTimer:	
  2493                           
  2494                           	psect	text3
  2495  0398                     __ptext3:	
  2496 ;; *************** function _LED_set_state *****************
  2497 ;; Defined at:
  2498 ;;		line 16 in file "interact.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;  new_state       1    wreg     enum E2607
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  new_state       1    3[COMMON] enum E2607
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, status,0
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1
  2512 ;;      Params:         0       0       0
  2513 ;;      Locals:         1       0       0
  2514 ;;      Temps:          1       0       0
  2515 ;;      Totals:         2       0       0
  2516 ;;Total ram usage:        2 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    4
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_main
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           
  2527                           ;psect for function _LED_set_state
  2528  0398                     _LED_set_state:	
  2529                           
  2530                           ;incstack = 0
  2531                           ; Regs used in _LED_set_state: [wreg+status,2+status,0]
  2532                           ;LED_set_state@new_state stored from wreg
  2533  0398  00F3               	movwf	LED_set_state@new_state
  2534                           
  2535                           ;interact.c: 18: LED_state = new_state;
  2536  0399  0873               	movf	LED_set_state@new_state,w
  2537  039A  00F2               	movwf	??_LED_set_state
  2538  039B  0872               	movf	??_LED_set_state,w
  2539  039C  0020               	movlb	0	; select bank0
  2540  039D  00DF               	movwf	_LED_state
  2541                           
  2542                           ;interact.c: 19: if (new_state == always_off)
  2543  039E  0373               	decf	LED_set_state@new_state,w
  2544  039F  1D03               	btfss	3,2
  2545  03A0  2BA4               	goto	l2320
  2546                           
  2547                           ;interact.c: 20: do { LATA5 = 0; } while(0);
  2548  03A1  0022               	movlb	2	; select bank2
  2549  03A2  128C               	bcf	12,5	;volatile
  2550  03A3  0008               	return
  2551  03A4                     l2320:	
  2552                           
  2553                           ;interact.c: 21: else if (new_state == always_on)
  2554  03A4  0873               	movf	LED_set_state@new_state,w
  2555  03A5  1D03               	btfss	3,2
  2556  03A6  2BAA               	goto	l2322
  2557                           
  2558                           ;interact.c: 22: do { LATA5 = 1; } while(0);
  2559  03A7  0022               	movlb	2	; select bank2
  2560  03A8  168C               	bsf	12,5	;volatile
  2561  03A9  0008               	return
  2562  03AA                     l2322:	
  2563                           
  2564                           ;interact.c: 23: else if ((new_state == slow_blinking)||(new_state == fast_blinking))
  2565  03AA  3002               	movlw	2
  2566  03AB  0673               	xorwf	LED_set_state@new_state,w
  2567  03AC  1903               	btfsc	3,2
  2568  03AD  2BB2               	goto	l494
  2569  03AE  3003               	movlw	3
  2570  03AF  0673               	xorwf	LED_set_state@new_state,w
  2571  03B0  1D03               	btfss	3,2
  2572  03B1  0008               	return
  2573  03B2                     l494:	
  2574                           ;interact.c: 24: {
  2575                           ;interact.c: 25: do { LATA5 = 1; } while(0);
  2576                           
  2577  03B2  0022               	movlb	2	; select bank2
  2578  03B3  168C               	bsf	12,5	;volatile
  2579                           
  2580                           ;interact.c: 26: LED_counter = 0;
  2581  03B4  0020               	movlb	0	; select bank0
  2582  03B5  01BA               	clrf	_LED_counter	;volatile
  2583  03B6  0008               	return
  2584  03B7                     __end_of_LED_set_state:	
  2585                           
  2586                           	psect	text4
  2587  0032                     __ptext4:	
  2588 ;; *************** function _GPS_read_speed *****************
  2589 ;; Defined at:
  2590 ;;		line 81 in file "main.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  buffer          6    2[BANK0 ] unsigned char [6]
  2595 ;;  m_char          1    9[BANK0 ] unsigned char 
  2596 ;;  i_buff          1    8[BANK0 ] unsigned char 
  2597 ;;  checksum        1    1[BANK0 ] unsigned char 
  2598 ;;  tmp             1    0[BANK0 ] unsigned char 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      unsigned char 
  2601 ;; Registers used:
  2602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1
  2608 ;;      Params:         0       0       0
  2609 ;;      Locals:         0      10       0
  2610 ;;      Temps:          1       0       0
  2611 ;;      Totals:         1      10       0
  2612 ;;Total ram usage:       11 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    5
  2615 ;; This function calls:
  2616 ;;		_EUSART_Read
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           
  2623                           ;psect for function _GPS_read_speed
  2624  0032                     _GPS_read_speed:	
  2625                           
  2626                           ;main.c: 85: unsigned char buffer[6];
  2627                           ;main.c: 86: unsigned char i_buff = 0;
  2628                           
  2629                           ;incstack = 0
  2630                           ; Regs used in _GPS_read_speed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2631  0032  0020               	movlb	0	; select bank0
  2632  0033  01CF               	clrf	GPS_read_speed@i_buff
  2633                           
  2634                           ;main.c: 87: unsigned char checksum = 0x00;
  2635  0034  01C8               	clrf	GPS_read_speed@checksum
  2636                           
  2637                           ;main.c: 89: unsigned char m_char = 0x00;
  2638  0035  01D0               	clrf	GPS_read_speed@m_char
  2639  0036                     l2058:	
  2640                           ;main.c: 90: while (m_char != '$')
  2641                           
  2642  0036  3024               	movlw	36
  2643  0037  0650               	xorwf	GPS_read_speed@m_char,w
  2644  0038  1903               	btfsc	3,2
  2645  0039  2843               	goto	l2060
  2646                           
  2647                           ;main.c: 91: if(eusartRxCount!=0)
  2648  003A  087B               	movf	_eusartRxCount,w	;volatile
  2649  003B  1903               	btfsc	3,2
  2650  003C  2836               	goto	l2058
  2651                           
  2652                           ;main.c: 92: m_char=EUSART_Read();
  2653  003D  23B7               	fcall	_EUSART_Read
  2654  003E  00F4               	movwf	??_GPS_read_speed
  2655  003F  0874               	movf	??_GPS_read_speed,w
  2656  0040  0020               	movlb	0	; select bank0
  2657  0041  00D0               	movwf	GPS_read_speed@m_char
  2658  0042  2836               	goto	l2058
  2659  0043                     l2060:	
  2660                           ;main.c: 96: while (1)
  2661                           
  2662                           
  2663                           ;main.c: 97: if (eusartRxCount!=0)
  2664  0043  087B               	movf	_eusartRxCount,w	;volatile
  2665  0044  1903               	btfsc	3,2
  2666  0045  2843               	goto	l2060
  2667                           
  2668                           ;main.c: 98: {
  2669                           ;main.c: 99: m_char=EUSART_Read();
  2670  0046  23B7               	fcall	_EUSART_Read
  2671  0047  00F4               	movwf	??_GPS_read_speed
  2672  0048  0874               	movf	??_GPS_read_speed,w
  2673  0049  0020               	movlb	0	; select bank0
  2674  004A  00D0               	movwf	GPS_read_speed@m_char
  2675                           
  2676                           ;main.c: 100: checksum ^= m_char;
  2677  004B  0850               	movf	GPS_read_speed@m_char,w
  2678  004C  00F4               	movwf	??_GPS_read_speed
  2679  004D  0874               	movf	??_GPS_read_speed,w
  2680  004E  06C8               	xorwf	GPS_read_speed@checksum,f
  2681                           
  2682                           ;main.c: 101: if (m_char == ',')
  2683  004F  302C               	movlw	44
  2684  0050  0650               	xorwf	GPS_read_speed@m_char,w
  2685  0051  1903               	btfsc	3,2
  2686  0052  2865               	goto	l2082
  2687                           
  2688                           ;main.c: 103: else
  2689                           ;main.c: 104: {
  2690                           ;main.c: 105: buffer[i_buff++] = m_char;
  2691                           
  2692                           ;main.c: 102: break;
  2693  0053  0850               	movf	GPS_read_speed@m_char,w
  2694  0054  00F4               	movwf	??_GPS_read_speed
  2695  0055  084F               	movf	GPS_read_speed@i_buff,w
  2696  0056  3E49               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  2697  0057  0086               	movwf	6
  2698  0058  0187               	clrf	7
  2699  0059  0874               	movf	??_GPS_read_speed,w
  2700  005A  0081               	movwf	1
  2701  005B  3001               	movlw	1
  2702  005C  00F4               	movwf	??_GPS_read_speed
  2703  005D  0874               	movf	??_GPS_read_speed,w
  2704  005E  07CF               	addwf	GPS_read_speed@i_buff,f
  2705                           
  2706                           ;main.c: 106: if (i_buff >= 6)
  2707  005F  3006               	movlw	6
  2708  0060  024F               	subwf	GPS_read_speed@i_buff,w
  2709  0061  1C03               	skipc
  2710  0062  2843               	goto	l2060
  2711                           
  2712                           ;main.c: 107: return 0;
  2713  0063  3000               	movlw	0
  2714  0064  0008               	return
  2715  0065                     l2082:	
  2716                           
  2717                           ;main.c: 108: }
  2718                           ;main.c: 109: }
  2719                           ;main.c: 111: if ((buffer[0] != 'G')||(buffer[1] != 'P')||(buffer[2] != 'V')||(buffer[3]
      +                           != 'T')||(buffer[4] != 'G'))
  2720  0065  3047               	movlw	71
  2721  0066  0649               	xorwf	GPS_read_speed@buffer,w
  2722  0067  1D03               	btfss	3,2
  2723  0068  2879               	goto	l2092
  2724  0069  3050               	movlw	80
  2725  006A  064A               	xorwf	GPS_read_speed@buffer+1,w
  2726  006B  1D03               	btfss	3,2
  2727  006C  2879               	goto	l2092
  2728  006D  3056               	movlw	86
  2729  006E  064B               	xorwf	GPS_read_speed@buffer+2,w
  2730  006F  1D03               	btfss	3,2
  2731  0070  2879               	goto	l2092
  2732  0071  3054               	movlw	84
  2733  0072  064C               	xorwf	GPS_read_speed@buffer+3,w
  2734  0073  1D03               	btfss	3,2
  2735  0074  2879               	goto	l2092
  2736  0075  3047               	movlw	71
  2737  0076  064D               	xorwf	GPS_read_speed@buffer+4,w
  2738  0077  1903               	btfsc	3,2
  2739  0078  287B               	goto	l2096
  2740  0079                     l2092:	
  2741                           
  2742                           ;main.c: 112: return 0;
  2743  0079  3000               	movlw	0
  2744  007A  0008               	return
  2745  007B                     l2096:	
  2746                           
  2747                           ;main.c: 113: i_buff = 0;
  2748  007B  01CF               	clrf	GPS_read_speed@i_buff
  2749  007C                     l2098:	
  2750                           ;main.c: 116: while (1)
  2751                           
  2752                           
  2753                           ;main.c: 117: if (eusartRxCount!=0)
  2754  007C  087B               	movf	_eusartRxCount,w	;volatile
  2755  007D  1903               	btfsc	3,2
  2756  007E  287C               	goto	l2098
  2757                           
  2758                           ;main.c: 118: {
  2759                           ;main.c: 119: m_char=EUSART_Read();
  2760  007F  23B7               	fcall	_EUSART_Read
  2761  0080  00F4               	movwf	??_GPS_read_speed
  2762  0081  0874               	movf	??_GPS_read_speed,w
  2763  0082  0020               	movlb	0	; select bank0
  2764  0083  00D0               	movwf	GPS_read_speed@m_char
  2765                           
  2766                           ;main.c: 120: checksum ^= m_char;
  2767  0084  0850               	movf	GPS_read_speed@m_char,w
  2768  0085  00F4               	movwf	??_GPS_read_speed
  2769  0086  0874               	movf	??_GPS_read_speed,w
  2770  0087  06C8               	xorwf	GPS_read_speed@checksum,f
  2771                           
  2772                           ;main.c: 121: if (m_char == ',')
  2773  0088  302C               	movlw	44
  2774  0089  0650               	xorwf	GPS_read_speed@m_char,w
  2775  008A  1D03               	btfss	3,2
  2776  008B  287C               	goto	l2098
  2777  008C                     l2108:	
  2778                           ;main.c: 123: }
  2779                           ;main.c: 125: while (1)
  2780                           
  2781                           ;main.c: 122: break;
  2782                           
  2783                           
  2784                           ;main.c: 126: if (eusartRxCount!=0)
  2785  008C  087B               	movf	_eusartRxCount,w	;volatile
  2786  008D  1903               	btfsc	3,2
  2787  008E  288C               	goto	l2108
  2788                           
  2789                           ;main.c: 127: {
  2790                           ;main.c: 128: m_char=EUSART_Read();
  2791  008F  23B7               	fcall	_EUSART_Read
  2792  0090  00F4               	movwf	??_GPS_read_speed
  2793  0091  0874               	movf	??_GPS_read_speed,w
  2794  0092  0020               	movlb	0	; select bank0
  2795  0093  00D0               	movwf	GPS_read_speed@m_char
  2796                           
  2797                           ;main.c: 129: checksum ^= m_char;
  2798  0094  0850               	movf	GPS_read_speed@m_char,w
  2799  0095  00F4               	movwf	??_GPS_read_speed
  2800  0096  0874               	movf	??_GPS_read_speed,w
  2801  0097  06C8               	xorwf	GPS_read_speed@checksum,f
  2802                           
  2803                           ;main.c: 130: if (m_char == ',')
  2804  0098  302C               	movlw	44
  2805  0099  0650               	xorwf	GPS_read_speed@m_char,w
  2806  009A  1903               	btfsc	3,2
  2807  009B  28AE               	goto	l2130
  2808                           
  2809                           ;main.c: 132: else
  2810                           ;main.c: 133: {
  2811                           ;main.c: 134: buffer[i_buff++] = m_char;
  2812                           
  2813                           ;main.c: 131: break;
  2814  009C  0850               	movf	GPS_read_speed@m_char,w
  2815  009D  00F4               	movwf	??_GPS_read_speed
  2816  009E  084F               	movf	GPS_read_speed@i_buff,w
  2817  009F  3E49               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  2818  00A0  0086               	movwf	6
  2819  00A1  0187               	clrf	7
  2820  00A2  0874               	movf	??_GPS_read_speed,w
  2821  00A3  0081               	movwf	1
  2822  00A4  3001               	movlw	1
  2823  00A5  00F4               	movwf	??_GPS_read_speed
  2824  00A6  0874               	movf	??_GPS_read_speed,w
  2825  00A7  07CF               	addwf	GPS_read_speed@i_buff,f
  2826                           
  2827                           ;main.c: 135: if (i_buff >= 6)
  2828  00A8  3006               	movlw	6
  2829  00A9  024F               	subwf	GPS_read_speed@i_buff,w
  2830  00AA  1C03               	skipc
  2831  00AB  288C               	goto	l2108
  2832                           
  2833                           ;main.c: 136: return 0;
  2834  00AC  3000               	movlw	0
  2835  00AD  0008               	return
  2836  00AE                     l2130:	
  2837                           
  2838                           ;main.c: 137: }
  2839                           ;main.c: 138: }
  2840                           ;main.c: 139: if ((buffer[0] != 'T')||(i_buff != 1))
  2841  00AE  3054               	movlw	84
  2842  00AF  0649               	xorwf	GPS_read_speed@buffer,w
  2843  00B0  1903               	btfsc	3,2
  2844  00B1  034F               	decf	GPS_read_speed@i_buff,w
  2845  00B2  1903               	btfsc	3,2
  2846  00B3  28B6               	goto	l2138
  2847                           
  2848                           ;main.c: 140: return 0;
  2849  00B4  3000               	movlw	0
  2850  00B5  0008               	return
  2851  00B6                     l2138:	
  2852                           
  2853                           ;main.c: 141: i_buff = 0;
  2854  00B6  01CF               	clrf	GPS_read_speed@i_buff
  2855  00B7                     l2140:	
  2856                           ;main.c: 144: while (1)
  2857                           
  2858                           
  2859                           ;main.c: 145: if (eusartRxCount!=0)
  2860  00B7  087B               	movf	_eusartRxCount,w	;volatile
  2861  00B8  1903               	btfsc	3,2
  2862  00B9  28B7               	goto	l2140
  2863                           
  2864                           ;main.c: 146: {
  2865                           ;main.c: 147: m_char=EUSART_Read();
  2866  00BA  23B7               	fcall	_EUSART_Read
  2867  00BB  00F4               	movwf	??_GPS_read_speed
  2868  00BC  0874               	movf	??_GPS_read_speed,w
  2869  00BD  0020               	movlb	0	; select bank0
  2870  00BE  00D0               	movwf	GPS_read_speed@m_char
  2871                           
  2872                           ;main.c: 148: checksum ^= m_char;
  2873  00BF  0850               	movf	GPS_read_speed@m_char,w
  2874  00C0  00F4               	movwf	??_GPS_read_speed
  2875  00C1  0874               	movf	??_GPS_read_speed,w
  2876  00C2  06C8               	xorwf	GPS_read_speed@checksum,f
  2877                           
  2878                           ;main.c: 149: if (m_char == ',')
  2879  00C3  302C               	movlw	44
  2880  00C4  0650               	xorwf	GPS_read_speed@m_char,w
  2881  00C5  1D03               	btfss	3,2
  2882  00C6  28B7               	goto	l2140
  2883  00C7                     l2150:	
  2884                           ;main.c: 151: }
  2885                           ;main.c: 153: while (1)
  2886                           
  2887                           ;main.c: 150: break;
  2888                           
  2889                           
  2890                           ;main.c: 154: if (eusartRxCount!=0)
  2891  00C7  087B               	movf	_eusartRxCount,w	;volatile
  2892  00C8  1903               	btfsc	3,2
  2893  00C9  28C7               	goto	l2150
  2894                           
  2895                           ;main.c: 155: {
  2896                           ;main.c: 156: m_char=EUSART_Read();
  2897  00CA  23B7               	fcall	_EUSART_Read
  2898  00CB  00F4               	movwf	??_GPS_read_speed
  2899  00CC  0874               	movf	??_GPS_read_speed,w
  2900  00CD  0020               	movlb	0	; select bank0
  2901  00CE  00D0               	movwf	GPS_read_speed@m_char
  2902                           
  2903                           ;main.c: 157: checksum ^= m_char;
  2904  00CF  0850               	movf	GPS_read_speed@m_char,w
  2905  00D0  00F4               	movwf	??_GPS_read_speed
  2906  00D1  0874               	movf	??_GPS_read_speed,w
  2907  00D2  06C8               	xorwf	GPS_read_speed@checksum,f
  2908                           
  2909                           ;main.c: 158: if (m_char == ',')
  2910  00D3  302C               	movlw	44
  2911  00D4  0650               	xorwf	GPS_read_speed@m_char,w
  2912  00D5  1903               	btfsc	3,2
  2913  00D6  28E9               	goto	l2172
  2914                           
  2915                           ;main.c: 160: else
  2916                           ;main.c: 161: {
  2917                           ;main.c: 162: buffer[i_buff++] = m_char;
  2918                           
  2919                           ;main.c: 159: break;
  2920  00D7  0850               	movf	GPS_read_speed@m_char,w
  2921  00D8  00F4               	movwf	??_GPS_read_speed
  2922  00D9  084F               	movf	GPS_read_speed@i_buff,w
  2923  00DA  3E49               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  2924  00DB  0086               	movwf	6
  2925  00DC  0187               	clrf	7
  2926  00DD  0874               	movf	??_GPS_read_speed,w
  2927  00DE  0081               	movwf	1
  2928  00DF  3001               	movlw	1
  2929  00E0  00F4               	movwf	??_GPS_read_speed
  2930  00E1  0874               	movf	??_GPS_read_speed,w
  2931  00E2  07CF               	addwf	GPS_read_speed@i_buff,f
  2932                           
  2933                           ;main.c: 163: if (i_buff >= 6)
  2934  00E3  3006               	movlw	6
  2935  00E4  024F               	subwf	GPS_read_speed@i_buff,w
  2936  00E5  1C03               	skipc
  2937  00E6  28C7               	goto	l2150
  2938                           
  2939                           ;main.c: 164: return 0;
  2940  00E7  3000               	movlw	0
  2941  00E8  0008               	return
  2942  00E9                     l2172:	
  2943                           
  2944                           ;main.c: 165: }
  2945                           ;main.c: 166: }
  2946                           ;main.c: 167: if ((buffer[0] != 'M')||(i_buff != 1))
  2947  00E9  304D               	movlw	77
  2948  00EA  0649               	xorwf	GPS_read_speed@buffer,w
  2949  00EB  1903               	btfsc	3,2
  2950  00EC  034F               	decf	GPS_read_speed@i_buff,w
  2951  00ED  1903               	btfsc	3,2
  2952  00EE  28F1               	goto	l2180
  2953                           
  2954                           ;main.c: 168: return 0;
  2955  00EF  3000               	movlw	0
  2956  00F0  0008               	return
  2957  00F1                     l2180:	
  2958                           
  2959                           ;main.c: 169: i_buff = 0;
  2960  00F1  01CF               	clrf	GPS_read_speed@i_buff
  2961  00F2                     l2182:	
  2962                           ;main.c: 172: while (1)
  2963                           
  2964                           
  2965                           ;main.c: 173: if (eusartRxCount!=0)
  2966  00F2  087B               	movf	_eusartRxCount,w	;volatile
  2967  00F3  1903               	btfsc	3,2
  2968  00F4  28F2               	goto	l2182
  2969                           
  2970                           ;main.c: 174: {
  2971                           ;main.c: 175: m_char=EUSART_Read();
  2972  00F5  23B7               	fcall	_EUSART_Read
  2973  00F6  00F4               	movwf	??_GPS_read_speed
  2974  00F7  0874               	movf	??_GPS_read_speed,w
  2975  00F8  0020               	movlb	0	; select bank0
  2976  00F9  00D0               	movwf	GPS_read_speed@m_char
  2977                           
  2978                           ;main.c: 176: checksum ^= m_char;
  2979  00FA  0850               	movf	GPS_read_speed@m_char,w
  2980  00FB  00F4               	movwf	??_GPS_read_speed
  2981  00FC  0874               	movf	??_GPS_read_speed,w
  2982  00FD  06C8               	xorwf	GPS_read_speed@checksum,f
  2983                           
  2984                           ;main.c: 177: if (m_char == ',')
  2985  00FE  302C               	movlw	44
  2986  00FF  0650               	xorwf	GPS_read_speed@m_char,w
  2987  0100  1D03               	btfss	3,2
  2988  0101  28F2               	goto	l2182
  2989  0102                     l2192:	
  2990                           ;main.c: 179: }
  2991                           ;main.c: 181: while (1)
  2992                           
  2993                           ;main.c: 178: break;
  2994                           
  2995                           
  2996                           ;main.c: 182: if (eusartRxCount!=0)
  2997  0102  087B               	movf	_eusartRxCount,w	;volatile
  2998  0103  1903               	btfsc	3,2
  2999  0104  2902               	goto	l2192
  3000                           
  3001                           ;main.c: 183: {
  3002                           ;main.c: 184: m_char=EUSART_Read();
  3003  0105  23B7               	fcall	_EUSART_Read
  3004  0106  00F4               	movwf	??_GPS_read_speed
  3005  0107  0874               	movf	??_GPS_read_speed,w
  3006  0108  0020               	movlb	0	; select bank0
  3007  0109  00D0               	movwf	GPS_read_speed@m_char
  3008                           
  3009                           ;main.c: 185: checksum ^= m_char;
  3010  010A  0850               	movf	GPS_read_speed@m_char,w
  3011  010B  00F4               	movwf	??_GPS_read_speed
  3012  010C  0874               	movf	??_GPS_read_speed,w
  3013  010D  06C8               	xorwf	GPS_read_speed@checksum,f
  3014                           
  3015                           ;main.c: 186: if (m_char == ',')
  3016  010E  302C               	movlw	44
  3017  010F  0650               	xorwf	GPS_read_speed@m_char,w
  3018  0110  1903               	btfsc	3,2
  3019  0111  2924               	goto	l2214
  3020                           
  3021                           ;main.c: 188: else
  3022                           ;main.c: 189: {
  3023                           ;main.c: 190: buffer[i_buff++] = m_char;
  3024                           
  3025                           ;main.c: 187: break;
  3026  0112  0850               	movf	GPS_read_speed@m_char,w
  3027  0113  00F4               	movwf	??_GPS_read_speed
  3028  0114  084F               	movf	GPS_read_speed@i_buff,w
  3029  0115  3E49               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3030  0116  0086               	movwf	6
  3031  0117  0187               	clrf	7
  3032  0118  0874               	movf	??_GPS_read_speed,w
  3033  0119  0081               	movwf	1
  3034  011A  3001               	movlw	1
  3035  011B  00F4               	movwf	??_GPS_read_speed
  3036  011C  0874               	movf	??_GPS_read_speed,w
  3037  011D  07CF               	addwf	GPS_read_speed@i_buff,f
  3038                           
  3039                           ;main.c: 191: if (i_buff >= 6)
  3040  011E  3006               	movlw	6
  3041  011F  024F               	subwf	GPS_read_speed@i_buff,w
  3042  0120  1C03               	skipc
  3043  0121  2902               	goto	l2192
  3044                           
  3045                           ;main.c: 192: return 0;
  3046  0122  3000               	movlw	0
  3047  0123  0008               	return
  3048  0124                     l2214:	
  3049                           
  3050                           ;main.c: 193: }
  3051                           ;main.c: 194: }
  3052                           ;main.c: 195: if ((buffer[0] != 'N')||(i_buff != 1))
  3053  0124  304E               	movlw	78
  3054  0125  0649               	xorwf	GPS_read_speed@buffer,w
  3055  0126  1903               	btfsc	3,2
  3056  0127  034F               	decf	GPS_read_speed@i_buff,w
  3057  0128  1903               	btfsc	3,2
  3058  0129  292C               	goto	l2222
  3059                           
  3060                           ;main.c: 196: return 0;
  3061  012A  3000               	movlw	0
  3062  012B  0008               	return
  3063  012C                     l2222:	
  3064                           
  3065                           ;main.c: 197: i_buff = 0;
  3066  012C  01CF               	clrf	GPS_read_speed@i_buff
  3067  012D                     l2224:	
  3068                           ;main.c: 200: while (1)
  3069                           
  3070                           
  3071                           ;main.c: 201: if (eusartRxCount!=0)
  3072  012D  087B               	movf	_eusartRxCount,w	;volatile
  3073  012E  1903               	btfsc	3,2
  3074  012F  292D               	goto	l2224
  3075                           
  3076                           ;main.c: 202: {
  3077                           ;main.c: 203: m_char=EUSART_Read();
  3078  0130  23B7               	fcall	_EUSART_Read
  3079  0131  00F4               	movwf	??_GPS_read_speed
  3080  0132  0874               	movf	??_GPS_read_speed,w
  3081  0133  0020               	movlb	0	; select bank0
  3082  0134  00D0               	movwf	GPS_read_speed@m_char
  3083                           
  3084                           ;main.c: 204: checksum ^= m_char;
  3085  0135  0850               	movf	GPS_read_speed@m_char,w
  3086  0136  00F4               	movwf	??_GPS_read_speed
  3087  0137  0874               	movf	??_GPS_read_speed,w
  3088  0138  06C8               	xorwf	GPS_read_speed@checksum,f
  3089                           
  3090                           ;main.c: 205: if (m_char == ',')
  3091  0139  302C               	movlw	44
  3092  013A  0650               	xorwf	GPS_read_speed@m_char,w
  3093  013B  1903               	btfsc	3,2
  3094  013C  294F               	goto	l2246
  3095                           
  3096                           ;main.c: 207: else
  3097                           ;main.c: 208: {
  3098                           ;main.c: 209: buffer[i_buff++] = m_char;
  3099                           
  3100                           ;main.c: 206: break;
  3101  013D  0850               	movf	GPS_read_speed@m_char,w
  3102  013E  00F4               	movwf	??_GPS_read_speed
  3103  013F  084F               	movf	GPS_read_speed@i_buff,w
  3104  0140  3E49               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3105  0141  0086               	movwf	6
  3106  0142  0187               	clrf	7
  3107  0143  0874               	movf	??_GPS_read_speed,w
  3108  0144  0081               	movwf	1
  3109  0145  3001               	movlw	1
  3110  0146  00F4               	movwf	??_GPS_read_speed
  3111  0147  0874               	movf	??_GPS_read_speed,w
  3112  0148  07CF               	addwf	GPS_read_speed@i_buff,f
  3113                           
  3114                           ;main.c: 210: if (i_buff >= 6)
  3115  0149  3006               	movlw	6
  3116  014A  024F               	subwf	GPS_read_speed@i_buff,w
  3117  014B  1C03               	skipc
  3118  014C  292D               	goto	l2224
  3119                           
  3120                           ;main.c: 211: return 0;
  3121  014D  3000               	movlw	0
  3122  014E  0008               	return
  3123  014F                     l2246:	
  3124                           
  3125                           ;main.c: 212: }
  3126                           ;main.c: 213: }
  3127                           ;main.c: 216: unsigned char tmp = 0;
  3128  014F  01C7               	clrf	GPS_read_speed@tmp
  3129                           
  3130                           ;main.c: 217: i_buff = 0;
  3131  0150  01CF               	clrf	GPS_read_speed@i_buff
  3132  0151                     l2248:	
  3133                           ;main.c: 220: while (1)
  3134                           
  3135                           
  3136                           ;main.c: 221: if (eusartRxCount!=0)
  3137  0151  087B               	movf	_eusartRxCount,w	;volatile
  3138  0152  1903               	btfsc	3,2
  3139  0153  2951               	goto	l2248
  3140                           
  3141                           ;main.c: 222: {
  3142                           ;main.c: 223: m_char=EUSART_Read();
  3143  0154  23B7               	fcall	_EUSART_Read
  3144  0155  00F4               	movwf	??_GPS_read_speed
  3145  0156  0874               	movf	??_GPS_read_speed,w
  3146  0157  0020               	movlb	0	; select bank0
  3147  0158  00D0               	movwf	GPS_read_speed@m_char
  3148                           
  3149                           ;main.c: 224: checksum ^= m_char;
  3150  0159  0850               	movf	GPS_read_speed@m_char,w
  3151  015A  00F4               	movwf	??_GPS_read_speed
  3152  015B  0874               	movf	??_GPS_read_speed,w
  3153  015C  06C8               	xorwf	GPS_read_speed@checksum,f
  3154                           
  3155                           ;main.c: 225: if (m_char == ',')
  3156  015D  302C               	movlw	44
  3157  015E  0650               	xorwf	GPS_read_speed@m_char,w
  3158  015F  1903               	btfsc	3,2
  3159  0160  2973               	goto	l2270
  3160                           
  3161                           ;main.c: 227: else
  3162                           ;main.c: 228: {
  3163                           ;main.c: 229: buffer[i_buff++] = m_char;
  3164                           
  3165                           ;main.c: 226: break;
  3166  0161  0850               	movf	GPS_read_speed@m_char,w
  3167  0162  00F4               	movwf	??_GPS_read_speed
  3168  0163  084F               	movf	GPS_read_speed@i_buff,w
  3169  0164  3E49               	addlw	(low (GPS_read_speed@buffer| 0))& (0+255)
  3170  0165  0086               	movwf	6
  3171  0166  0187               	clrf	7
  3172  0167  0874               	movf	??_GPS_read_speed,w
  3173  0168  0081               	movwf	1
  3174  0169  3001               	movlw	1
  3175  016A  00F4               	movwf	??_GPS_read_speed
  3176  016B  0874               	movf	??_GPS_read_speed,w
  3177  016C  07CF               	addwf	GPS_read_speed@i_buff,f
  3178                           
  3179                           ;main.c: 230: if (i_buff >= 6)
  3180  016D  3006               	movlw	6
  3181  016E  024F               	subwf	GPS_read_speed@i_buff,w
  3182  016F  1C03               	skipc
  3183  0170  2951               	goto	l2248
  3184                           
  3185                           ;main.c: 231: return 0;
  3186  0171  3000               	movlw	0
  3187  0172  0008               	return
  3188  0173                     l2270:	
  3189                           
  3190                           ;main.c: 232: }
  3191                           ;main.c: 233: }
  3192                           ;main.c: 234: if ((buffer[0] != 'K')||(i_buff != 1))
  3193  0173  304B               	movlw	75
  3194  0174  0649               	xorwf	GPS_read_speed@buffer,w
  3195  0175  1903               	btfsc	3,2
  3196  0176  034F               	decf	GPS_read_speed@i_buff,w
  3197  0177  1903               	btfsc	3,2
  3198  0178  297B               	goto	l2278
  3199                           
  3200                           ;main.c: 235: return 0;
  3201  0179  3000               	movlw	0
  3202  017A  0008               	return
  3203  017B                     l2278:	
  3204                           
  3205                           ;main.c: 236: i_buff = 0;
  3206  017B  01CF               	clrf	GPS_read_speed@i_buff
  3207                           
  3208                           ;main.c: 237: return 1;
  3209  017C  3001               	movlw	1
  3210  017D  0008               	return
  3211  017E                     __end_of_GPS_read_speed:	
  3212                           
  3213                           	psect	text5
  3214  03B7                     __ptext5:	
  3215 ;; *************** function _EUSART_Read *****************
  3216 ;; Defined at:
  3217 ;;		line 112 in file "mcc_generated_files/eusart.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  readValue       1    3[COMMON] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      unsigned char 
  3224 ;; Registers used:
  3225 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1
  3231 ;;      Params:         0       0       0
  3232 ;;      Locals:         1       0       0
  3233 ;;      Temps:          1       0       0
  3234 ;;      Totals:         2       0       0
  3235 ;;Total ram usage:        2 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    4
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_GPS_read_speed
  3242 ;;		_getch
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _EUSART_Read
  3248  03B7                     _EUSART_Read:	
  3249                           
  3250                           ;eusart.c: 114: uint8_t readValue = 0;
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3254  03B7  01F3               	clrf	EUSART_Read@readValue
  3255                           
  3256                           ;eusart.c: 117: RCSTAbits.SREN = 1;
  3257  03B8  0023               	movlb	3	; select bank3
  3258  03B9  169D               	bsf	29,5	;volatile
  3259  03BA                     l1930:	
  3260                           ;eusart.c: 120: {
  3261                           
  3262                           ;eusart.c: 119: while(0 == eusartRxCount)
  3263                           
  3264  03BA  087B               	movf	_eusartRxCount,w	;volatile
  3265  03BB  1903               	btfsc	3,2
  3266  03BC  2BBA               	goto	l1930
  3267                           
  3268                           ;eusart.c: 121: }
  3269                           ;eusart.c: 123: PIE1bits.RCIE = 0;
  3270  03BD  0021               	movlb	1	; select bank1
  3271  03BE  1291               	bcf	17,5	;volatile
  3272                           
  3273                           ;eusart.c: 125: readValue = eusartRxBuffer[eusartRxTail++];
  3274  03BF  0020               	movlb	0	; select bank0
  3275  03C0  0841               	movf	_eusartRxTail,w
  3276  03C1  3E20               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3277  03C2  0086               	movwf	6
  3278  03C3  0187               	clrf	7
  3279  03C4  0801               	movf	1,w
  3280  03C5  00F2               	movwf	??_EUSART_Read
  3281  03C6  0872               	movf	??_EUSART_Read,w
  3282  03C7  00F3               	movwf	EUSART_Read@readValue
  3283  03C8  3001               	movlw	1
  3284  03C9  00F2               	movwf	??_EUSART_Read
  3285  03CA  0872               	movf	??_EUSART_Read,w
  3286  03CB  07C1               	addwf	_eusartRxTail,f
  3287                           
  3288                           ;eusart.c: 126: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3289  03CC  3008               	movlw	8
  3290  03CD  0241               	subwf	_eusartRxTail,w
  3291  03CE  1803               	btfsc	3,0
  3292                           
  3293                           ;eusart.c: 127: {
  3294                           ;eusart.c: 128: eusartRxTail = 0;
  3295  03CF  01C1               	clrf	_eusartRxTail
  3296                           
  3297                           ;eusart.c: 129: }
  3298                           ;eusart.c: 130: eusartRxCount--;
  3299  03D0  3001               	movlw	1
  3300  03D1  02FB               	subwf	_eusartRxCount,f	;volatile
  3301                           
  3302                           ;eusart.c: 131: PIE1bits.RCIE = 1;
  3303  03D2  0021               	movlb	1	; select bank1
  3304  03D3  1691               	bsf	17,5	;volatile
  3305                           
  3306                           ;eusart.c: 133: return readValue;
  3307  03D4  0873               	movf	EUSART_Read@readValue,w
  3308  03D5  0008               	return
  3309  03D6                     __end_of_EUSART_Read:	
  3310                           
  3311                           	psect	text6
  3312  0335                     __ptext6:	
  3313 ;; *************** function _GPS_Initialize *****************
  3314 ;; Defined at:
  3315 ;;		line 71 in file "main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  tmp             1    5[BANK0 ] unsigned char 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1
  3329 ;;      Params:         0       0       0
  3330 ;;      Locals:         0       1       0
  3331 ;;      Temps:          0       3       0
  3332 ;;      Totals:         0       4       0
  3333 ;;Total ram usage:        4 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    7
  3336 ;; This function calls:
  3337 ;;		_printf
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _GPS_Initialize
  3345  0335                     _GPS_Initialize:	
  3346                           
  3347                           ;main.c: 73: for(unsigned char tmp=0;tmp<(10*1);tmp++){_delay((unsigned long)((100)*(320
      +                          00000/4000.0)));};
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in _GPS_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3351  0335  0020               	movlb	0	; select bank0
  3352  0336  01CC               	clrf	GPS_Initialize@tmp
  3353  0337  300A               	movlw	10
  3354  0338  024C               	subwf	GPS_Initialize@tmp,w
  3355  0339  1803               	btfsc	3,0
  3356  033A  2B50               	goto	l2606
  3357  033B                     l2600:	
  3358  033B  3005               	movlw	5
  3359  033C  00CB               	movwf	??_GPS_Initialize+2
  3360  033D  300F               	movlw	15
  3361  033E  00CA               	movwf	??_GPS_Initialize+1
  3362  033F  30F4               	movlw	244
  3363  0340  00C9               	movwf	??_GPS_Initialize
  3364  0341                     u2407:	
  3365  0341  0BC9               	decfsz	??_GPS_Initialize,f
  3366  0342  2B41               	goto	u2407
  3367  0343  0BCA               	decfsz	??_GPS_Initialize+1,f
  3368  0344  2B41               	goto	u2407
  3369  0345  0BCB               	decfsz	??_GPS_Initialize+2,f
  3370  0346  2B41               	goto	u2407
  3371  0347  3001               	movlw	1
  3372  0348  0020               	movlb	0	; select bank0
  3373  0349  00C9               	movwf	??_GPS_Initialize
  3374  034A  0849               	movf	??_GPS_Initialize,w
  3375  034B  07CC               	addwf	GPS_Initialize@tmp,f
  3376  034C  300A               	movlw	10
  3377  034D  024C               	subwf	GPS_Initialize@tmp,w
  3378  034E  1C03               	skipc
  3379  034F  2B3B               	goto	l2600
  3380  0350                     l2606:	
  3381                           
  3382                           ;main.c: 75: printf("$PMTK314,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
  3383  0350  30EF               	movlw	low (STR_1| (0+32768))
  3384  0351  00F5               	movwf	printf@f
  3385  0352  3082               	movlw	high (STR_1| (0+32768))
  3386  0353  00F6               	movwf	printf@f+1
  3387  0354  23F3               	fcall	_printf
  3388                           
  3389                           ;main.c: 76: _delay((unsigned long)((100)*(32000000/4000.0)));
  3390  0355  3005               	movlw	5
  3391  0356  0020               	movlb	0	; select bank0
  3392  0357  00CB               	movwf	??_GPS_Initialize+2
  3393  0358  300F               	movlw	15
  3394  0359  00CA               	movwf	??_GPS_Initialize+1
  3395  035A  30F4               	movlw	244
  3396  035B  00C9               	movwf	??_GPS_Initialize
  3397  035C                     u2417:	
  3398  035C  0BC9               	decfsz	??_GPS_Initialize,f
  3399  035D  2B5C               	goto	u2417
  3400  035E  0BCA               	decfsz	??_GPS_Initialize+1,f
  3401  035F  2B5C               	goto	u2417
  3402  0360  0BCB               	decfsz	??_GPS_Initialize+2,f
  3403  0361  2B5C               	goto	u2417
  3404                           
  3405                           ;main.c: 77: printf("$PMTK220,100*2F\r\n");
  3406  0362  3023               	movlw	low (STR_2| (0+32768))
  3407  0363  00F5               	movwf	printf@f
  3408  0364  3083               	movlw	high (STR_2| (0+32768))
  3409  0365  00F6               	movwf	printf@f+1
  3410  0366  23F3               	fcall	_printf
  3411                           
  3412                           ;main.c: 78: _delay((unsigned long)((100)*(32000000/4000.0)));
  3413  0367  3005               	movlw	5
  3414  0368  0020               	movlb	0	; select bank0
  3415  0369  00CB               	movwf	??_GPS_Initialize+2
  3416  036A  300F               	movlw	15
  3417  036B  00CA               	movwf	??_GPS_Initialize+1
  3418  036C  30F4               	movlw	244
  3419  036D  00C9               	movwf	??_GPS_Initialize
  3420  036E                     u2427:	
  3421  036E  0BC9               	decfsz	??_GPS_Initialize,f
  3422  036F  2B6E               	goto	u2427
  3423  0370  0BCA               	decfsz	??_GPS_Initialize+1,f
  3424  0371  2B6E               	goto	u2427
  3425  0372  0BCB               	decfsz	??_GPS_Initialize+2,f
  3426  0373  2B6E               	goto	u2427
  3427  0374  0008               	return
  3428  0375                     __end_of_GPS_Initialize:	
  3429                           
  3430                           	psect	text7
  3431  03F3                     __ptext7:	
  3432 ;; *************** function _printf *****************
  3433 ;; Defined at:
  3434 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  f               2    5[COMMON] PTR const unsigned char 
  3437 ;;		 -> STR_2(18), STR_1(52), 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  tmpval          4    0        struct .
  3440 ;;  cp              2    0        PTR const unsigned char 
  3441 ;;  len             2    0        unsigned int 
  3442 ;;  val             2    0        unsigned int 
  3443 ;;  c               1    1[BANK0 ] char 
  3444 ;;  ap              1    0[BANK0 ] PTR void [1]
  3445 ;;		 -> ?_printf(2), 
  3446 ;;  flag            1    0        unsigned char 
  3447 ;;  prec            1    0        char 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  2    5[COMMON] int 
  3450 ;; Registers used:
  3451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1
  3457 ;;      Params:         2       0       0
  3458 ;;      Locals:         0       2       0
  3459 ;;      Temps:          3       0       0
  3460 ;;      Totals:         5       2       0
  3461 ;;Total ram usage:        7 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    6
  3464 ;; This function calls:
  3465 ;;		_putch
  3466 ;; This function is called by:
  3467 ;;		_GPS_Initialize
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _printf
  3473  03F3                     _printf:	
  3474                           
  3475                           ;doprnt.c: 466: va_list ap;
  3476                           ;doprnt.c: 499: signed char c;
  3477                           ;doprnt.c: 506: signed char prec;
  3478                           ;doprnt.c: 508: unsigned char flag;
  3479                           ;doprnt.c: 523: union {
  3480                           ;doprnt.c: 524: unsigned long vd;
  3481                           ;doprnt.c: 525: double integ;
  3482                           ;doprnt.c: 526: } tmpval;
  3483                           ;doprnt.c: 528: unsigned int val;
  3484                           ;doprnt.c: 529: unsigned len;
  3485                           ;doprnt.c: 530: const char * cp;
  3486                           ;doprnt.c: 533: *ap = __va_start();
  3487                           
  3488                           ;incstack = 0
  3489                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3490  03F3  3077               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3491  03F4  00F7               	movwf	??_printf
  3492  03F5  0877               	movf	??_printf,w
  3493  03F6  0020               	movlb	0	; select bank0
  3494  03F7  00C7               	movwf	printf@ap
  3495  03F8                     l2592:	
  3496                           ;doprnt.c: 543: }
  3497                           ;doprnt.c: 1422: {
  3498                           
  3499                           ;doprnt.c: 542: continue;
  3500                           
  3501                           ;doprnt.c: 536: while(c = *f++) {
  3502                           
  3503  03F8  0876               	movf	printf@f+1,w
  3504  03F9  00F8               	movwf	??_printf+1
  3505  03FA  0875               	movf	printf@f,w
  3506  03FB  00F7               	movwf	??_printf
  3507  03FC  0AF5               	incf	printf@f,f
  3508  03FD  1903               	skipnz
  3509  03FE  0AF6               	incf	printf@f+1,f
  3510  03FF  0877               	movf	??_printf,w
  3511  0400  0084               	movwf	4
  3512  0401  0878               	movf	??_printf+1,w
  3513  0402  0085               	movwf	5
  3514  0403  0800               	movf	0,w	;code access
  3515  0404  00F9               	movwf	??_printf+2
  3516  0405  0879               	movf	??_printf+2,w
  3517  0406  0020               	movlb	0	; select bank0
  3518  0407  00C8               	movwf	printf@c
  3519  0408  0848               	movf	printf@c,w
  3520  0409  1903               	btfsc	3,2
  3521  040A  0008               	return
  3522                           
  3523                           ;doprnt.c: 540: {
  3524                           ;doprnt.c: 541: (putch(c) );
  3525  040B  0848               	movf	printf@c,w
  3526  040C  2465               	fcall	_putch
  3527  040D  2BF8               	goto	l2592
  3528  040E                     __end_of_printf:	
  3529                           ;doprnt.c: 1469: }
  3530                           ;doprnt.c: 1533: }
  3531                           ;doprnt.c: 1540: return 0;
  3532                           ;	Return value of _printf is never used
  3533                           
  3534                           
  3535                           	psect	text8
  3536  0465                     __ptext8:	
  3537 ;; *************** function _putch *****************
  3538 ;; Defined at:
  3539 ;;		line 164 in file "mcc_generated_files/eusart.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  txData          1    wreg     unsigned char 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  txData          1    4[COMMON] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      void 
  3546 ;; Registers used:
  3547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMMON   BANK0   BANK1
  3553 ;;      Params:         0       0       0
  3554 ;;      Locals:         1       0       0
  3555 ;;      Temps:          0       0       0
  3556 ;;      Totals:         1       0       0
  3557 ;;Total ram usage:        1 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    5
  3560 ;; This function calls:
  3561 ;;		_EUSART_Write
  3562 ;; This function is called by:
  3563 ;;		_printf
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function _putch
  3569  0465                     _putch:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3573                           ;putch@txData stored from wreg
  3574  0465  00F4               	movwf	putch@txData
  3575                           
  3576                           ;eusart.c: 166: EUSART_Write(txData);
  3577  0466  0874               	movf	putch@txData,w
  3578  0467  2375               	fcall	_EUSART_Write
  3579  0468  0008               	return
  3580  0469                     __end_of_putch:	
  3581                           
  3582                           	psect	text9
  3583  0375                     __ptext9:	
  3584 ;; *************** function _EUSART_Write *****************
  3585 ;; Defined at:
  3586 ;;		line 136 in file "mcc_generated_files/eusart.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;  txData          1    wreg     unsigned char 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  txData          1    3[COMMON] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1
  3600 ;;      Params:         0       0       0
  3601 ;;      Locals:         1       0       0
  3602 ;;      Temps:          1       0       0
  3603 ;;      Totals:         2       0       0
  3604 ;;Total ram usage:        2 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    4
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_putch
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _EUSART_Write
  3616  0375                     _EUSART_Write:	
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3620                           ;EUSART_Write@txData stored from wreg
  3621  0375  00F3               	movwf	EUSART_Write@txData
  3622  0376                     l2570:	
  3623                           ;eusart.c: 139: {
  3624                           
  3625                           ;eusart.c: 138: while(0 == eusartTxBufferRemaining)
  3626                           
  3627  0376  0020               	movlb	0	; select bank0
  3628  0377  0842               	movf	_eusartTxBufferRemaining,w	;volatile
  3629  0378  1903               	btfsc	3,2
  3630  0379  2B76               	goto	l2570
  3631                           
  3632                           ;eusart.c: 140: }
  3633                           ;eusart.c: 142: if(0 == PIE1bits.TXIE)
  3634  037A  0021               	movlb	1	; select bank1
  3635  037B  1A11               	btfsc	17,4	;volatile
  3636  037C  2B81               	goto	l131
  3637                           
  3638                           ;eusart.c: 143: {
  3639                           ;eusart.c: 144: TXREG = txData;
  3640  037D  0873               	movf	EUSART_Write@txData,w
  3641  037E  0023               	movlb	3	; select bank3
  3642  037F  009A               	movwf	26	;volatile
  3643                           
  3644                           ;eusart.c: 145: }
  3645  0380  2B95               	goto	l2584
  3646  0381                     l131:	
  3647                           
  3648                           ;eusart.c: 146: else
  3649                           ;eusart.c: 147: {
  3650                           ;eusart.c: 148: PIE1bits.TXIE = 0;
  3651  0381  1211               	bcf	17,4	;volatile
  3652                           
  3653                           ;eusart.c: 149: eusartTxBuffer[eusartTxHead++] = txData;
  3654  0382  0873               	movf	EUSART_Write@txData,w
  3655  0383  00F2               	movwf	??_EUSART_Write
  3656  0384  0020               	movlb	0	; select bank0
  3657  0385  0843               	movf	_eusartTxHead,w
  3658  0386  3E28               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3659  0387  0086               	movwf	6
  3660  0388  0187               	clrf	7
  3661  0389  0872               	movf	??_EUSART_Write,w
  3662  038A  0081               	movwf	1
  3663  038B  3001               	movlw	1
  3664  038C  00F2               	movwf	??_EUSART_Write
  3665  038D  0872               	movf	??_EUSART_Write,w
  3666  038E  07C3               	addwf	_eusartTxHead,f
  3667                           
  3668                           ;eusart.c: 150: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3669  038F  3008               	movlw	8
  3670  0390  0243               	subwf	_eusartTxHead,w
  3671  0391  1803               	btfsc	3,0
  3672                           
  3673                           ;eusart.c: 151: {
  3674                           ;eusart.c: 152: eusartTxHead = 0;
  3675  0392  01C3               	clrf	_eusartTxHead
  3676                           
  3677                           ;eusart.c: 153: }
  3678                           ;eusart.c: 154: eusartTxBufferRemaining--;
  3679  0393  3001               	movlw	1
  3680  0394  02C2               	subwf	_eusartTxBufferRemaining,f	;volatile
  3681  0395                     l2584:	
  3682                           
  3683                           ;eusart.c: 155: }
  3684                           ;eusart.c: 156: PIE1bits.TXIE = 1;
  3685  0395  0021               	movlb	1	; select bank1
  3686  0396  1611               	bsf	17,4	;volatile
  3687  0397  0008               	return
  3688  0398                     __end_of_EUSART_Write:	
  3689                           
  3690                           	psect	text10
  3691  0429                     __ptext10:	
  3692 ;; *************** function _EPWM_LoadDutyValue *****************
  3693 ;; Defined at:
  3694 ;;		line 87 in file "mcc_generated_files/epwm.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  dutyValue       2    2[COMMON] unsigned int 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1
  3708 ;;      Params:         2       0       0
  3709 ;;      Locals:         0       0       0
  3710 ;;      Temps:          2       0       0
  3711 ;;      Totals:         4       0       0
  3712 ;;Total ram usage:        4 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _EPWM_LoadDutyValue
  3724  0429                     _EPWM_LoadDutyValue:	
  3725                           
  3726                           ;epwm.c: 90: CCPR1L = ((dutyValue & 0x03FC)>>2);
  3727                           
  3728                           ;incstack = 0
  3729                           ; Regs used in _EPWM_LoadDutyValue: [wreg+status,2+status,0]
  3730  0429  0873               	movf	EPWM_LoadDutyValue@dutyValue+1,w
  3731  042A  00F5               	movwf	??_EPWM_LoadDutyValue+1
  3732  042B  0872               	movf	EPWM_LoadDutyValue@dutyValue,w
  3733  042C  00F4               	movwf	??_EPWM_LoadDutyValue
  3734  042D  36F5               	lsrf	??_EPWM_LoadDutyValue+1,f
  3735  042E  0CF4               	rrf	??_EPWM_LoadDutyValue,f
  3736  042F  36F5               	lsrf	??_EPWM_LoadDutyValue+1,f
  3737  0430  0CF4               	rrf	??_EPWM_LoadDutyValue,f
  3738  0431  0874               	movf	??_EPWM_LoadDutyValue,w
  3739  0432  0025               	movlb	5	; select bank5
  3740  0433  0091               	movwf	17	;volatile
  3741                           
  3742                           ;epwm.c: 93: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  3743  0434  0872               	movf	EPWM_LoadDutyValue@dutyValue,w
  3744  0435  3903               	andlw	3
  3745  0436  00F4               	movwf	??_EPWM_LoadDutyValue
  3746  0437  3004               	movlw	4
  3747  0438                     u1235:	
  3748  0438  35F4               	lslf	??_EPWM_LoadDutyValue,f
  3749  0439  0B89               	decfsz	9,f
  3750  043A  2C38               	goto	u1235
  3751  043B  0813               	movf	19,w	;volatile
  3752  043C  39CF               	andlw	207
  3753  043D  0474               	iorwf	??_EPWM_LoadDutyValue,w
  3754  043E  0093               	movwf	19	;volatile
  3755  043F  0008               	return
  3756  0440                     __end_of_EPWM_LoadDutyValue:	
  3757                           
  3758                           	psect	intentry
  3759  0004                     __pintentry:	
  3760 ;; *************** function _INTERRUPT_InterruptManager *****************
  3761 ;; Defined at:
  3762 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;		None
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMMON   BANK0   BANK1
  3776 ;;      Params:         0       0       0
  3777 ;;      Locals:         0       0       0
  3778 ;;      Temps:          1       0       0
  3779 ;;      Totals:         1       0       0
  3780 ;;Total ram usage:        1 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    3
  3783 ;; This function calls:
  3784 ;;		_EUSART_Receive_ISR
  3785 ;;		_EUSART_Transmit_ISR
  3786 ;;		_TMR0_ISR
  3787 ;; This function is called by:
  3788 ;;		Interrupt level 1
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792  0004                     _INTERRUPT_InterruptManager:	
  3793                           
  3794                           ;incstack = 0
  3795  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3796                           
  3797                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3798  0005  3180               	pagesel	$
  3799  0006  0020               	movlb	0	; select bank0
  3800  0007  087F               	movf	127,w
  3801  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  3802                           
  3803                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3804  0009  1A8B               	btfsc	11,5	;volatile
  3805  000A  1D0B               	btfss	11,2	;volatile
  3806  000B  280D               	goto	i1l2356
  3807                           
  3808                           ;interrupt_manager.c: 55: {
  3809                           ;interrupt_manager.c: 56: TMR0_ISR();
  3810  000C  2440               	fcall	_TMR0_ISR
  3811  000D                     i1l2356:	
  3812                           
  3813                           ;interrupt_manager.c: 57: }
  3814                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  3815  000D  1F0B               	btfss	11,6	;volatile
  3816  000E  2816               	goto	i1l2364
  3817  000F  0021               	movlb	1	; select bank1
  3818  0010  1E11               	btfss	17,4	;volatile
  3819  0011  2816               	goto	i1l2364
  3820  0012  0020               	movlb	0	; select bank0
  3821  0013  1E11               	btfss	17,4	;volatile
  3822  0014  2816               	goto	i1l2364
  3823                           
  3824                           ;interrupt_manager.c: 59: {
  3825                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  3826  0015  23D6               	fcall	_EUSART_Transmit_ISR
  3827  0016                     i1l2364:	
  3828                           
  3829                           ;interrupt_manager.c: 61: }
  3830                           ;interrupt_manager.c: 62: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  3831  0016  1F0B               	btfss	11,6	;volatile
  3832  0017  281F               	goto	i1l288
  3833  0018  0021               	movlb	1	; select bank1
  3834  0019  1E91               	btfss	17,5	;volatile
  3835  001A  281F               	goto	i1l288
  3836  001B  0020               	movlb	0	; select bank0
  3837  001C  1E91               	btfss	17,5	;volatile
  3838  001D  281F               	goto	i1l288
  3839                           
  3840                           ;interrupt_manager.c: 63: {
  3841                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  3842  001E  240E               	fcall	_EUSART_Receive_ISR
  3843  001F                     i1l288:	
  3844                           ;interrupt_manager.c: 66: else
  3845                           ;interrupt_manager.c: 67: {
  3846                           
  3847                           ;interrupt_manager.c: 65: }
  3848                           
  3849  001F  0871               	movf	??_INTERRUPT_InterruptManager,w
  3850  0020  0020               	movlb	0	; select bank0
  3851  0021  00FF               	movwf	127
  3852  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3853  0023  0009               	retfie
  3854  0024                     __end_of_INTERRUPT_InterruptManager:	
  3855                           
  3856                           	psect	text12
  3857  0440                     __ptext12:	
  3858 ;; *************** function _TMR0_ISR *****************
  3859 ;; Defined at:
  3860 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, pclath, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1
  3874 ;;      Params:         0       0       0
  3875 ;;      Locals:         0       0       0
  3876 ;;      Temps:          0       0       0
  3877 ;;      Totals:         0       0       0
  3878 ;;Total ram usage:        0 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    2
  3881 ;; This function calls:
  3882 ;;		_TMR0_CallBack
  3883 ;; This function is called by:
  3884 ;;		_INTERRUPT_InterruptManager
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           
  3889                           ;psect for function _TMR0_ISR
  3890  0440                     _TMR0_ISR:	
  3891                           
  3892                           ;tmr0.c: 110: static volatile uint16_t CountCallBack = 0;
  3893                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  3894                           
  3895                           ;incstack = 0
  3896                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  3897  0440  110B               	bcf	11,2	;volatile
  3898                           
  3899                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  3900  0441  0020               	movlb	0	; select bank0
  3901  0442  0846               	movf	_timer0ReloadVal,w	;volatile
  3902  0443  0095               	movwf	21	;volatile
  3903                           
  3904                           ;tmr0.c: 118: if (++CountCallBack >= 2)
  3905  0444  3001               	movlw	1
  3906  0445  07B0               	addwf	TMR0_ISR@CountCallBack,f	;volatile
  3907  0446  3000               	movlw	0
  3908  0447  3DB1               	addwfc	TMR0_ISR@CountCallBack+1,f	;volatile
  3909  0448  3000               	movlw	0
  3910  0449  0231               	subwf	TMR0_ISR@CountCallBack+1,w	;volatile
  3911  044A  3002               	movlw	2
  3912  044B  1903               	skipnz
  3913  044C  0230               	subwf	TMR0_ISR@CountCallBack,w	;volatile
  3914  044D  1C03               	skipc
  3915  044E  0008               	return
  3916                           
  3917                           ;tmr0.c: 119: {
  3918                           ;tmr0.c: 121: TMR0_CallBack();
  3919  044F  2454               	fcall	_TMR0_CallBack
  3920                           
  3921                           ;tmr0.c: 124: CountCallBack = 0;
  3922  0450  0020               	movlb	0	; select bank0
  3923  0451  01B0               	clrf	TMR0_ISR@CountCallBack	;volatile
  3924  0452  01B1               	clrf	TMR0_ISR@CountCallBack+1	;volatile
  3925  0453  0008               	return
  3926  0454                     __end_of_TMR0_ISR:	
  3927                           
  3928                           	psect	text13
  3929  0454                     __ptext13:	
  3930 ;; *************** function _TMR0_CallBack *****************
  3931 ;; Defined at:
  3932 ;;		line 130 in file "mcc_generated_files/tmr0.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;		None
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;		None
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      void 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0, pclath, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1
  3946 ;;      Params:         0       0       0
  3947 ;;      Locals:         0       0       0
  3948 ;;      Temps:          0       0       0
  3949 ;;      Totals:         0       0       0
  3950 ;;Total ram usage:        0 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    1
  3953 ;; This function calls:
  3954 ;;		Absolute function
  3955 ;;		_TMR0_DefaultInterruptHandler
  3956 ;; This function is called by:
  3957 ;;		_TMR0_ISR
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _TMR0_CallBack
  3963  0454                     _TMR0_CallBack:	
  3964                           
  3965                           ;tmr0.c: 134: if(TMR0_InterruptHandler)
  3966                           
  3967                           ;incstack = 0
  3968                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3969  0454  0020               	movlb	0	; select bank0
  3970  0455  0832               	movf	_TMR0_InterruptHandler,w
  3971  0456  0433               	iorwf	_TMR0_InterruptHandler+1,w
  3972  0457  1903               	btfsc	3,2
  3973  0458  0008               	return
  3974                           
  3975                           ;tmr0.c: 135: {
  3976                           ;tmr0.c: 136: TMR0_InterruptHandler();
  3977  0459  0833               	movf	_TMR0_InterruptHandler+1,w
  3978  045A  008A               	movwf	10
  3979  045B  0832               	movf	_TMR0_InterruptHandler,w
  3980  045C  000A               	callw
  3981  045D  3184               	pagesel	$
  3982  045E  0008               	return
  3983  045F                     __end_of_TMR0_CallBack:	
  3984                           
  3985                           	psect	text14
  3986  046D                     __ptext14:	
  3987 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3988 ;; Defined at:
  3989 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;		None
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		None
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMMON   BANK0   BANK1
  4003 ;;      Params:         0       0       0
  4004 ;;      Locals:         0       0       0
  4005 ;;      Temps:          0       0       0
  4006 ;;      Totals:         0       0       0
  4007 ;;Total ram usage:        0 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; This function calls:
  4010 ;;		Nothing
  4011 ;; This function is called by:
  4012 ;;		_TMR0_Initialize
  4013 ;;		_TMR0_CallBack
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           
  4018                           ;psect for function _TMR0_DefaultInterruptHandler
  4019  046D                     _TMR0_DefaultInterruptHandler:	
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  4023  046D  0008               	return
  4024  046E                     __end_of_TMR0_DefaultInterruptHandler:	
  4025                           
  4026                           	psect	text15
  4027  03D6                     __ptext15:	
  4028 ;; *************** function _EUSART_Transmit_ISR *****************
  4029 ;; Defined at:
  4030 ;;		line 169 in file "mcc_generated_files/eusart.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1
  4044 ;;      Params:         0       0       0
  4045 ;;      Locals:         0       0       0
  4046 ;;      Temps:          1       0       0
  4047 ;;      Totals:         1       0       0
  4048 ;;Total ram usage:        1 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_INTERRUPT_InterruptManager
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function _EUSART_Transmit_ISR
  4059  03D6                     _EUSART_Transmit_ISR:	
  4060                           
  4061                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4065  03D6  3008               	movlw	8
  4066  03D7  0020               	movlb	0	; select bank0
  4067  03D8  0242               	subwf	_eusartTxBufferRemaining,w	;volatile
  4068  03D9  1803               	skipnc
  4069  03DA  2BF0               	goto	i1l143
  4070                           
  4071                           ;eusart.c: 174: {
  4072                           ;eusart.c: 175: TXREG = eusartTxBuffer[eusartTxTail++];
  4073  03DB  0844               	movf	_eusartTxTail,w
  4074  03DC  3E28               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4075  03DD  0086               	movwf	6
  4076  03DE  0187               	clrf	7
  4077  03DF  0801               	movf	1,w
  4078  03E0  0023               	movlb	3	; select bank3
  4079  03E1  009A               	movwf	26	;volatile
  4080  03E2  3001               	movlw	1
  4081  03E3  00F0               	movwf	??_EUSART_Transmit_ISR
  4082  03E4  0870               	movf	??_EUSART_Transmit_ISR,w
  4083  03E5  0020               	movlb	0	; select bank0
  4084  03E6  07C4               	addwf	_eusartTxTail,f
  4085                           
  4086                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4087  03E7  3008               	movlw	8
  4088  03E8  0244               	subwf	_eusartTxTail,w
  4089  03E9  1803               	btfsc	3,0
  4090                           
  4091                           ;eusart.c: 177: {
  4092                           ;eusart.c: 178: eusartTxTail = 0;
  4093  03EA  01C4               	clrf	_eusartTxTail
  4094                           
  4095                           ;eusart.c: 179: }
  4096                           ;eusart.c: 180: eusartTxBufferRemaining++;
  4097  03EB  3001               	movlw	1
  4098  03EC  00F0               	movwf	??_EUSART_Transmit_ISR
  4099  03ED  0870               	movf	??_EUSART_Transmit_ISR,w
  4100  03EE  07C2               	addwf	_eusartTxBufferRemaining,f	;volatile
  4101                           
  4102                           ;eusart.c: 181: }
  4103  03EF  0008               	return
  4104  03F0                     i1l143:	
  4105                           
  4106                           ;eusart.c: 182: else
  4107                           ;eusart.c: 183: {
  4108                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  4109  03F0  0021               	movlb	1	; select bank1
  4110  03F1  1211               	bcf	17,4	;volatile
  4111  03F2  0008               	return
  4112  03F3                     __end_of_EUSART_Transmit_ISR:	
  4113                           
  4114                           	psect	text16
  4115  040E                     __ptext16:	
  4116 ;; *************** function _EUSART_Receive_ISR *****************
  4117 ;; Defined at:
  4118 ;;		line 188 in file "mcc_generated_files/eusart.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1
  4132 ;;      Params:         0       0       0
  4133 ;;      Locals:         0       0       0
  4134 ;;      Temps:          1       0       0
  4135 ;;      Totals:         1       0       0
  4136 ;;Total ram usage:        1 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_INTERRUPT_InterruptManager
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _EUSART_Receive_ISR
  4147  040E                     _EUSART_Receive_ISR:	
  4148                           
  4149                           ;eusart.c: 191: if(1 == RCSTAbits.OERR)
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4153  040E  0023               	movlb	3	; select bank3
  4154  040F  1C9D               	btfss	29,1	;volatile
  4155  0410  2C13               	goto	i1l2002
  4156                           
  4157                           ;eusart.c: 192: {
  4158                           ;eusart.c: 195: RCSTAbits.SPEN = 0;
  4159  0411  139D               	bcf	29,7	;volatile
  4160                           
  4161                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
  4162  0412  179D               	bsf	29,7	;volatile
  4163  0413                     i1l2002:	
  4164                           
  4165                           ;eusart.c: 197: }
  4166                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RCREG;
  4167  0413  0819               	movf	25,w	;volatile
  4168  0414  00F0               	movwf	??_EUSART_Receive_ISR
  4169  0415  0020               	movlb	0	; select bank0
  4170  0416  0840               	movf	_eusartRxHead,w
  4171  0417  3E20               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4172  0418  0086               	movwf	6
  4173  0419  0187               	clrf	7
  4174  041A  0870               	movf	??_EUSART_Receive_ISR,w
  4175  041B  0081               	movwf	1
  4176  041C  3001               	movlw	1
  4177  041D  00F0               	movwf	??_EUSART_Receive_ISR
  4178  041E  0870               	movf	??_EUSART_Receive_ISR,w
  4179  041F  07C0               	addwf	_eusartRxHead,f
  4180                           
  4181                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4182  0420  3008               	movlw	8
  4183  0421  0240               	subwf	_eusartRxHead,w
  4184  0422  1803               	btfsc	3,0
  4185                           
  4186                           ;eusart.c: 202: {
  4187                           ;eusart.c: 203: eusartRxHead = 0;
  4188  0423  01C0               	clrf	_eusartRxHead
  4189                           
  4190                           ;eusart.c: 204: }
  4191                           ;eusart.c: 205: eusartRxCount++;
  4192  0424  3001               	movlw	1
  4193  0425  00F0               	movwf	??_EUSART_Receive_ISR
  4194  0426  0870               	movf	??_EUSART_Receive_ISR,w
  4195  0427  07FB               	addwf	_eusartRxCount,f	;volatile
  4196  0428  0008               	return
  4197  0429                     __end_of_EUSART_Receive_ISR:	
  4198  007E                     btemp	set	126	;btemp
  4199  007E                     int$flags	set	126
  4200  007E                     wtemp	set	126
  4201  007E                     wtemp0	set	126
  4202  0080                     wtemp1	set	128
  4203  0082                     wtemp2	set	130
  4204  0084                     wtemp3	set	132
  4205  0086                     wtemp4	set	134
  4206  0088                     wtemp5	set	136
  4207  007F                     wtemp6	set	127
  4208  007E                     ttemp	set	126
  4209  007E                     ttemp0	set	126
  4210  0081                     ttemp1	set	129
  4211  0084                     ttemp2	set	132
  4212  0087                     ttemp3	set	135
  4213  007F                     ttemp4	set	127
  4214  007E                     ltemp	set	126
  4215  007E                     ltemp0	set	126
  4216  0082                     ltemp1	set	130
  4217  0086                     ltemp2	set	134
  4218  0080                     ltemp3	set	128


Data Sizes:
    Strings     70
    Constant    2
    Data        1
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     24      64
    BANK1            32      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_2(CODE[18]), STR_1(CODE[52]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _GPS_read_speed->_EUSART_Read
    _GPS_Initialize->_printf
    _printf->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_GPS_read_speed
    _GPS_Initialize->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    3277
                                             10 BANK0     14    14      0
                 _EPWM_LoadDutyValue
                     _GPS_Initialize
                     _GPS_read_speed
                      _LED_set_state
                    _TMR2_StartTimer
                      _convert_to_fp
 ---------------------------------------------------------------------------------
 (1) _convert_to_fp                                       13     9      4     469
                                              2 COMMON     6     2      4
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_set_state                                        2     2      0     110
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_read_speed                                      11    11      0    1307
                                              4 COMMON     1     1      0
                                              0 BANK0     10    10      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPS_Initialize                                       4     4      0     383
                                              2 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     315
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              4 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EPWM_LoadDutyValue                                   4     2      2     492
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPWM_LoadDutyValue
   _GPS_Initialize
     _printf
       _putch
         _EUSART_Write
   _GPS_read_speed
     _EUSART_Read
   _LED_set_state
   _TMR2_StartTimer
   _convert_to_fp

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     18      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4C       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Sep 17 22:56:28 2016

                          __CFG_CP$OFF 0000                        _timer0ReloadVal 0046  
                                  l131 0381                                    l443 021B  
                                  l494 03B2                                    _PR2 001B  
                         __CFG_CPD$OFF 0000                           __CFG_BORV$LO 0000  
                                  wreg 0009                           __CFG_IESO$ON 0000  
                         ?_EUSART_Read 0070                           __CFG_LVP$OFF 0000  
                                 l2130 00AE                                   l2140 00B7  
                                 l2108 008C                                   l2060 0043  
                                 l2300 02B0                                   l2222 012C  
                                 l2214 0124                                   l2150 00C7  
                                 l2310 02E2                                   l2224 012D  
                                 l2320 03A4                                   l2138 00B6  
                                 l2082 0065                                   l2058 0036  
                                 l2322 03AA                                   l2306 02DA  
                                 l2180 00F1                                   l2172 00E9  
                                 l2092 0079                                   l2270 0173  
                                 l2246 014F                                   l2182 00F2  
                                 l2600 033B                                   l2248 0151  
                                 l2192 0102                                   l2096 007B  
                                 l2098 007C                                   l2292 0290  
                                 l2700 0235                                   l2606 0350  
                                 l2278 017B                                   l2710 0258  
                                 l2630 019C                                   l2570 0376  
                                 l1930 03BA                                   l2714 0264  
                                 l2706 024A                                   l2644 01C6  
                                 l2636 01B1                                   l2638 01B2  
                                 l2584 0395                                   l2592 03F8  
                                 l2680 020E                                   l2656 01C9  
                                 l2674 01F9                                   l2684 0217  
                                 l2688 0224                                   STR_1 02EF  
                                 STR_2 0323                                   u1235 0438  
                                 _LATA 010C                                   _LATC 010E  
                                 u2407 0341                                   u2327 01A2  
                                 u2417 035C                                   u2337 01C1  
                                 u2427 036E                                   u2347 01CF  
                                 u2357 01E9                                   u2367 01FF  
                                 u2377 023B                                   u2387 0253  
                                 u2397 027A                                   u1694 02CC  
                                 u1695 02CA                                   _PLLR 04D6  
                                 _TMR0 0015                                   _TMR2 001A  
                                 _WPUA 020C                                   _WPUC 020E  
                         __CFG_WRT$OFF 0000                          __CFG_FCMEN$ON 0000  
               __end_of_GPS_read_speed 017E                            main@tmp_586 005A  
                          main@tmp_588 005B                            main@tmp_589 005C  
                                 _main 017E                                   fsr0h 0005  
                                 fsr1h 0007                                   fsr0l 0004  
                                 indf0 0000                                   indf1 0001  
                                 fsr1l 0006                                   btemp 007E  
                        __CFG_BOREN$ON 0000                                   ltemp 007E  
                                 start 0024                                   ttemp 007E  
                                 wtemp 007E                          __CFG_MCLRE$ON 0000  
                        __CFG_PLLEN$ON 0000         ??_TMR0_DefaultInterruptHandler 0070  
                        ?_EUSART_Write 0070                                  ?_main 0070  
                        _convert_to_fp 0281                          __CFG_WDTE$OFF 0000  
                                _T2CON 001C                                  _LATA5 0865  
                                i1l143 03F0                                  i1l288 001F  
                                _RCREG 0199                                  _RCSTA 019D  
                                _TRISA 008C                                  _TRISC 008E  
                                _TXREG 019A                                  _TXSTA 019E  
                     ??_GPS_Initialize 0049                       __end_of_TMR0_ISR 0454  
                                _putch 0465                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
                      ?_GPS_read_speed 0070                                  ttemp0 007E  
                                ttemp1 0081                                  ttemp2 0084  
                                ttemp3 0087                                  ttemp4 007F  
                                status 0003                                  wtemp0 007E  
                                wtemp1 0080                                  wtemp2 0082  
                                wtemp3 0084                                  wtemp4 0086  
                                wtemp5 0088                                  wtemp6 007F  
                      _TMR2_StartTimer 0469                        __initialization 0025  
               __size_of_LED_set_state 001F                           __end_of_main 0281  
                       ??_EUSART_Write 0072            ?_INTERRUPT_InterruptManager 0070  
                       ?_convert_to_fp 0072                                 ??_main 0051  
                         _b_last_state 0034                       _b_push_confirmed 003E  
                      _b_count_pressed 007A                                 _EEADRH 0192  
                               _EEADRL 0191                                 _CCPR1H 0292  
                               _EEDATH 0194                                 _CCPR1L 0291  
                               _EEDATL 0193                                 _EECON2 0196  
                               _APFCON 011D                                 _ANSELA 018C  
                               ?_putch 0070                                 _ANSELC 018E  
                               i1l2002 0413                                 i1l2364 0016  
                               i1l2356 000D                                 _OSCCON 0099  
                               _SPBRGH 019C                                 _SPBRGL 019B  
                    GPS_read_speed@tmp 0047                         __CFG_PWRTE$OFF 0000  
                   convert_to_fp@i_bit 004B                         __CFG_STVREN$ON 0000  
                  _EUSART_Transmit_ISR 03D6                                 _printf 03F3  
                               main@up 0058                          _LED_set_state 0398  
                __end_of_TMR0_CallBack 045F                __end_of_TMR2_StartTimer 046C  
                 ?_EUSART_Transmit_ISR 0070                 convert_to_fp@res_fract 0047  
          __size_of_EPWM_LoadDutyValue 0017                   __size_of_EUSART_Read 001F  
              __end_of__initialization 002F                         __pcstackCOMMON 0070  
                         __pidataBANK0 046C                              ?_TMR0_ISR 0070  
                      ??_convert_to_fp 0076                          __end_of_putch 0469  
                       _OPTION_REGbits 0095                  TMR0_ISR@CountCallBack 0030  
                       ?_LED_set_state 0070               _b_has_once_been_released 003D  
                ??_EUSART_Transmit_ISR 0070                                ??_putch 0074  
                           __pbssBANK0 0020                   __end_of_EUSART_Write 0398  
                     _b_count_released 003C            __size_of_EUSART_Receive_ISR 001B  
                           __pmaintext 017E                             ??_TMR0_ISR 0070  
                           __pintentry 0004                                _CCP1CON 0293  
                              _ECCP1AS 0295                                _BAUDCON 019F  
                              ?_printf 0075                          _eusartRxCount 007B  
                              _OSCSTAT 009A                                _OSCTUNE 0098  
                              _PWM1CON 0294                       ??_GPS_read_speed 0074  
                     ?_TMR2_StartTimer 0070                convert_to_fp@fract_part 0074  
                              __ptext1 0281                                __ptext2 0469  
                              __ptext3 0398                                __ptext4 0032  
                              __ptext5 03B7                                __ptext6 0335  
                              __ptext7 03F3                                __ptext8 0465  
                              __ptext9 0375                        __size_of_printf 001B  
                      ??_LED_set_state 0072                              _T2CONbits 001C  
                              clrloop0 0460                                main@res 0057  
                              main@tmp 0059                                main@zob 0056  
                       main@motor_load 005D                   end_of_initialization 002F  
               LED_set_state@new_state 0073                              _LED_state 005F  
          EPWM_LoadDutyValue@dutyValue 0072                              _RCSTAbits 019D  
                              printf@c 0048                                printf@f 0075  
                         __pstringtext 02ED                              _PORTAbits 000C  
                 GPS_read_speed@i_buff 004F                   GPS_read_speed@m_char 0050  
                 GPS_read_speed@buffer 0049                       __CFG_FOSC$INTOSC 0000  
                __size_of_EUSART_Write 0023                __size_of_GPS_Initialize 0040  
                         _EUSART_Write 0375                      __size_of_TMR0_ISR 0014  
                     convert_to_fp@one 02ED                       convert_to_fp@res 004C  
                       __end_of_printf 040E                    start_initialization 0025  
           __end_of_EPWM_LoadDutyValue 0440                          ??_EUSART_Read 0072  
                          putch@txData 0074                 __size_of_TMR0_CallBack 000B  
                          __pdataBANK0 005F                  convert_to_fp@int_part 0072  
                __end_of_convert_to_fp 02ED                               ??_printf 0077  
          __end_of_EUSART_Transmit_ISR 03F3                            __pbssCOMMON 007A  
                            ___latbits 0000                          __pcstackBANK0 0047  
                convert_to_fp@tmp_left 0049             __end_of_EUSART_Receive_ISR 0429  
                  __end_of_EUSART_Read 03D6                  _TMR0_InterruptHandler 0032  
                 EUSART_Read@readValue 0073                           _eusartRxHead 0040  
                         _eusartTxHead 0043                           _eusartRxTail 0041  
                         _eusartTxTail 0044           ??_INTERRUPT_InterruptManager 0071  
              _eusartTxBufferRemaining 0042                          _TMR0_CallBack 0454  
                       __size_of_putch 0004                         _eusartRxBuffer 0020  
                       _GPS_Initialize 0335                         _eusartTxBuffer 0028  
                            clear_ram0 045F                               _PIE1bits 0091  
             __size_of_TMR2_StartTimer 0003    __size_of_INTERRUPT_InterruptManager 0020  
                             _PIR1bits 0011                              _speed_dec 0036  
                             _TMR0_ISR 0440                              _speed_int 0038  
                             _PSTR1CON 0296                  __end_of_LED_set_state 03B7  
                       ?_TMR0_CallBack 0070                            _EUSART_Read 03B7  
               __end_of_GPS_Initialize 0375               __end_ofconvert_to_fp@one 02EF  
                           _EECON1bits 0195                __size_of_GPS_read_speed 014C  
                          _LED_counter 003A                      GPS_Initialize@tmp 004C  
                             __ptext10 0429                               __ptext12 0440  
                             __ptext13 0454                               __ptext14 046D  
                             __ptext15 03D6                               __ptext16 040E  
                      ?_GPS_Initialize 0070                      _b_confirmed_state 003B  
                        __size_of_main 0103   __end_of_TMR0_DefaultInterruptHandler 046E  
__size_of_TMR0_DefaultInterruptHandler 0001           _TMR0_DefaultInterruptHandler 046D  
                   _EPWM_LoadDutyValue 0429                               int$flags 007E  
                  _b_release_confirmed 003F                      ??_TMR2_StartTimer 0072  
   __end_of_INTERRUPT_InterruptManager 0024             _INTERRUPT_InterruptManager 0004  
                  ?_EPWM_LoadDutyValue 0072                               main@test 0054  
                           _INTCONbits 000B                        ??_TMR0_CallBack 0070  
                 ??_EPWM_LoadDutyValue 0074                               intlevel1 0000  
                    __CFG_CLKOUTEN$OFF 0000          ?_TMR0_DefaultInterruptHandler 0070  
                             printf@ap 0047                     _EUSART_Receive_ISR 040E  
                           _OPTION_REG 0095                    ?_EUSART_Receive_ISR 0070  
               GPS_read_speed@checksum 0048                            _speed_units 0045  
                   EUSART_Write@txData 0073           __size_of_EUSART_Transmit_ISR 001D  
               __size_of_convert_to_fp 006C                   ??_EUSART_Receive_ISR 0070  
                       _GPS_read_speed 0032  
